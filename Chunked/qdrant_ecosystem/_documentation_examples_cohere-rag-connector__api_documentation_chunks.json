[
  {
    "text": "### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "439363ee5903-0000",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 681,
      "end_char": 1354,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_precise_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.430641",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "b49cc869c6854f5f",
      "content_digest": "b49cc869c6854f5f",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.6351282051282051
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "439363ee5903-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 1356,
      "end_char": 7017,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.433720",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "439363ee5903-0002",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 7019,
      "end_char": 9366,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.433720",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.8358974358974359
    }
  },
  {
    "text": "### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "439363ee5903-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 9368,
      "end_char": 10041,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_precise_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.433720",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "b49cc869c6854f5f",
      "content_digest": "b49cc869c6854f5f",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.6351282051282051
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "439363ee5903-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 10043,
      "end_char": 15704,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.437853",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - [Examples](https://qdrant.tech/documentation/examples/) - - Implement Cohere RAG connector",
    "metadata": {
      "chunk_id": "439363ee5903-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 611,
      "char_count": 2497,
      "start_char": 15706,
      "end_char": 18203,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.89921875,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.438999",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "0ee13fcc783174f4",
      "content_digest": "0ee13fcc783174f4",
      "chunk_length": 2497,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "rag",
          "with",
          "data",
          "chatbot",
          "send",
          "cohere",
          "system",
          "semantic",
          "and",
          "precision",
          "reranking",
          "dspy",
          "for",
          "connector"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 32,
            "weight": 0.108475
          },
          {
            "term": "documentation",
            "tf": 24,
            "weight": 0.081356
          },
          {
            "term": "https",
            "tf": 23,
            "weight": 0.077966
          },
          {
            "term": "tech",
            "tf": 23,
            "weight": 0.077966
          },
          {
            "term": "examples",
            "tf": 16,
            "weight": 0.054237
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.033898
          },
          {
            "term": "rag",
            "tf": 10,
            "weight": 0.033898
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.030508
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.023729
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.020339
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.016949
          },
          {
            "term": "cohere",
            "tf": 5,
            "weight": 0.016949
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.016949
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013559
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.013559
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010169
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010169
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010169
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010169
          },
          {
            "term": "connector",
            "tf": 3,
            "weight": 0.010169
          }
        ],
        "unique_terms": 96,
        "total_terms": 295
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.89921875,
      "overall": 0.8330729166666666
    }
  },
  {
    "text": "# Implement custom connector for Cohere RAG  | Time: 45 min | Level: Intermediate |   |   | | ------------ | ------------------- | - | - |  The usual approach to implementing Retrieval Augmented Generation requires users to build their prompts with the relevant context the LLM may rely on, and manually sending them to the model. Cohere is quite unique here, as their models can now speak to the external tools and extract meaningful data on their own. You can virtually connect any data source and let the Cohere LLM know how to access it. Obviously, vector search goes well with LLMs, and enabling semantic search over your data is a typical case. Cohere RAG has lots of interesting features, such as inline citations, which help you to refer to the specific parts of the documents used to generate the response. *Source: <https://docs.cohere.com/docs/retrieval-augmented-generation-rag>*  The connectors have to implement a specific interface and expose the data source as HTTP REST API. Cohere documentation [describes a general process of creating a connector](https://docs.cohere.com/v1/docs/creating-and-deploying-a-connector). This tutorial guides you step by step on building such a service around Qdrant.",
    "metadata": {
      "chunk_id": "439363ee5903-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Implement custom connector for Cohere RAG"
      ],
      "heading_text": "Implement custom connector for Cohere RAG",
      "token_count": 264,
      "char_count": 1215,
      "start_char": 18205,
      "end_char": 19420,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6872826086956522,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.438999",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Implement custom connector for Cohere RAG",
      "chunk_hash": "20a5a5efbffb535f",
      "content_digest": "20a5a5efbffb535f",
      "chunk_length": 1215,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "cohere",
          "and",
          "data",
          "docs",
          "connector",
          "rag",
          "their",
          "you",
          "source",
          "implement",
          "retrieval",
          "augmented",
          "generation",
          "with",
          "llm",
          "can",
          "search",
          "such",
          "specific"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 11,
            "weight": 0.06962
          },
          {
            "term": "cohere",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "and",
            "tf": 6,
            "weight": 0.037975
          },
          {
            "term": "data",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "docs",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "connector",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "rag",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "their",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "source",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "implement",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "augmented",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "generation",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "llm",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "such",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "specific",
            "tf": 2,
            "weight": 0.012658
          }
        ],
        "unique_terms": 107,
        "total_terms": 158
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Implement custom connector for Cohere RAG",
        "and",
        "cohere",
        "connector",
        "data",
        "docs",
        "rag",
        "source",
        "the",
        "their",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6872826086956522,
      "overall": 0.762427536231884
    }
  },
  {
    "text": "## Qdrant connector\n\nYou probably already have some collections you would like to bring to the LLM. Maybe your pipeline was set up using some of the popular libraries such as Langchain, Llama Index, or Haystack. Cohere connectors may implement even more complex logic, e.g. hybrid search. In our case, we are going to start with a fresh Qdrant collection, index data using Cohere Embed v3, build the connector, and finally connect it with the [Command-R model](https://txt.cohere.com/command-r/).",
    "metadata": {
      "chunk_id": "439363ee5903-0007",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Qdrant connector"
      ],
      "heading_text": "Qdrant connector",
      "token_count": 115,
      "char_count": 496,
      "start_char": 19424,
      "end_char": 19920,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "chunking_strategy": "hierarchical_precise_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.438999",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Qdrant connector",
      "chunk_hash": "9dc192a626796ccd",
      "content_digest": "9dc192a626796ccd",
      "chunk_length": 496,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "cohere",
          "qdrant",
          "connector",
          "you",
          "some",
          "using",
          "index",
          "with",
          "command",
          "probably",
          "already",
          "have",
          "collections",
          "would",
          "like",
          "bring",
          "llm",
          "maybe",
          "your"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 4,
            "weight": 0.058824
          },
          {
            "term": "cohere",
            "tf": 3,
            "weight": 0.044118
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "connector",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "some",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "index",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "command",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "probably",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "already",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "have",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "collections",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "would",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "like",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "bring",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "llm",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "maybe",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "your",
            "tf": 1,
            "weight": 0.014706
          }
        ],
        "unique_terms": 55,
        "total_terms": 68
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Qdrant connector",
        "cohere",
        "command",
        "connector",
        "index",
        "qdrant",
        "some",
        "the",
        "using",
        "with",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "overall": 0.7157142857142856
    }
  },
  {
    "text": "### Building the collection\n\nFirst things first, let’s build a collection and configure it for the Cohere `embed-multilingual-v3.0` model. It produces 1024-dimensional embeddings, and we can choose any of the distance metrics available in Qdrant. Our connector will act as a personal assistant of a software engineer, and it will expose our notes to suggest the priorities or actions to perform.\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(\n    \"https://my-cluster.cloud.qdrant.io:6333\", \n    api_key=\"my-api-key\",\n)\nclient.create_collection(\n    collection_name=\"personal-notes\",\n    vectors_config=models.VectorParams(\n        size=1024,\n        distance=models.Distance.DOT,\n    ),\n)\n```\n\nOur notes will be represented as simple JSON objects with a `title` and `text` of the specific note. The embeddings will be created from the `text` field only.\n\n```python\nnotes = [\n    {\n        \"title\": \"Project Alpha Review\",\n        \"text\": \"Review the current progress of Project Alpha, focusing on the integration of the new API. Check for any compatibility issues with the existing system and document the steps needed to resolve them. Schedule a meeting with the development team to discuss the timeline and any potential roadblocks.\"\n    },\n    {",
    "metadata": {
      "chunk_id": "439363ee5903-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Building the collection"
      ],
      "heading_text": "Building the collection",
      "token_count": 281,
      "char_count": 1283,
      "start_char": 19922,
      "end_char": 21205,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.6971428571428572,
      "chunking_strategy": "hierarchical_precise_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.438999",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Building the collection",
      "chunk_hash": "57958ebd44b826b2",
      "content_digest": "57958ebd44b826b2",
      "chunk_length": 1283,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "and",
          "collection",
          "will",
          "notes",
          "any",
          "distance",
          "qdrant",
          "our",
          "client",
          "models",
          "api",
          "with",
          "text",
          "first",
          "for",
          "1024",
          "embeddings",
          "personal",
          "python"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 14,
            "weight": 0.090909
          },
          {
            "term": "and",
            "tf": 6,
            "weight": 0.038961
          },
          {
            "term": "collection",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "will",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "notes",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "any",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "distance",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "our",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "client",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "api",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "text",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "first",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "1024",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "embeddings",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "personal",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "python",
            "tf": 2,
            "weight": 0.012987
          }
        ],
        "unique_terms": 96,
        "total_terms": 154
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Building the collection",
        "and",
        "any",
        "client",
        "collection",
        "distance",
        "notes",
        "our",
        "qdrant",
        "the",
        "will"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.6971428571428572,
      "overall": 0.699047619047619
    }
  },
  {
    "text": "### Connecting to Command-R\n\nOur web service is implemented, yet running only on our local machine. It has to be exposed to the public before Command-R can interact with it. For a quick experiment, it might be enough to set up tunneling using services such as [ngrok](https://ngrok.com/). We won’t cover all the details in the tutorial, but their [Quickstart](https://ngrok.com/docs/guides/getting-started/) is a great resource describing the process step-by-step. Alternatively, you can also deploy the service with a public URL.\n\nOnce it’s done, we can create the connector first, and then tell the model to use it, while interacting through the chat API. Creating a connector is a single call to Cohere client:\n\n```python\nconnector_response = cohere_client.connectors.create(\n    name=\"personal-notes\",\n    url=\"https:/this-is-my-domain.app/search\",\n)\n```\n\nThe `connector_response.connector` will be a descriptor, with `id` being one of the attributes. We’ll use this identifier for our interactions like this:\n\n```python\nresponse = cohere_client.chat(\n    message=(\n        \"Is there anything I have to do regarding the project infrastructure? \"\n        \"Please mention the tasks briefly.\"\n    ),\n    connectors=[\n        cohere.ChatConnector(id=connector_response.connector.id)\n    ],\n    model=\"command-r\",\n)\n```",
    "metadata": {
      "chunk_id": "439363ee5903-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Connecting to Command-R"
      ],
      "heading_text": "Connecting to Command-R",
      "token_count": 289,
      "char_count": 1318,
      "start_char": 29758,
      "end_char": 31076,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.7123529411764705,
      "chunking_strategy": "hierarchical_precise_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.452078",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Connecting to Command-R",
      "chunk_hash": "234435835200e488",
      "content_digest": "234435835200e488",
      "chunk_length": 1318,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "connector",
          "cohere",
          "response",
          "command",
          "our",
          "can",
          "with",
          "ngrok",
          "https",
          "client",
          "this",
          "service",
          "public",
          "for",
          "com",
          "step",
          "url",
          "create",
          "model"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 12,
            "weight": 0.077419
          },
          {
            "term": "connector",
            "tf": 7,
            "weight": 0.045161
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.025806
          },
          {
            "term": "response",
            "tf": 4,
            "weight": 0.025806
          },
          {
            "term": "command",
            "tf": 3,
            "weight": 0.019355
          },
          {
            "term": "our",
            "tf": 3,
            "weight": 0.019355
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.019355
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.019355
          },
          {
            "term": "ngrok",
            "tf": 3,
            "weight": 0.019355
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.019355
          },
          {
            "term": "client",
            "tf": 3,
            "weight": 0.019355
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.019355
          },
          {
            "term": "service",
            "tf": 2,
            "weight": 0.012903
          },
          {
            "term": "public",
            "tf": 2,
            "weight": 0.012903
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.012903
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.012903
          },
          {
            "term": "step",
            "tf": 2,
            "weight": 0.012903
          },
          {
            "term": "url",
            "tf": 2,
            "weight": 0.012903
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.012903
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.012903
          }
        ],
        "unique_terms": 104,
        "total_terms": 155
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Connecting to Command-R",
        "can",
        "cohere",
        "command",
        "connector",
        "https",
        "ngrok",
        "our",
        "response",
        "the",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.7123529411764705,
      "overall": 0.7041176470588235
    }
  },
  {
    "text": "## Wrapping up\n\nWe have built a Cohere RAG connector that integrates with your existing knowledge base stored in Qdrant. We covered just the basic flow, but in real world scenarios, you should also consider e.g. [building the authentication system](https://docs.cohere.com/docs/connector-authentication) to prevent unauthorized access.",
    "metadata": {
      "chunk_id": "439363ee5903-0018",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Wrapping up"
      ],
      "heading_text": "Wrapping up",
      "token_count": 71,
      "char_count": 335,
      "start_char": 31891,
      "end_char": 32226,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5695454545454546,
      "chunking_strategy": "hierarchical_precise_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.452078",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Wrapping up",
      "chunk_hash": "ef7c747996ebda93",
      "content_digest": "ef7c747996ebda93",
      "chunk_length": 335,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "cohere",
          "connector",
          "the",
          "authentication",
          "docs",
          "wrapping",
          "have",
          "built",
          "rag",
          "that",
          "integrates",
          "with",
          "your",
          "existing",
          "knowledge",
          "base",
          "stored",
          "qdrant",
          "covered",
          "just"
        ],
        "term_weights": [
          {
            "term": "cohere",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "connector",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "authentication",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "docs",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "wrapping",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "have",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "built",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "rag",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "integrates",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "your",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "existing",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "knowledge",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "base",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "stored",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "qdrant",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "covered",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "just",
            "tf": 1,
            "weight": 0.02381
          }
        ],
        "unique_terms": 37,
        "total_terms": 42
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Wrapping up",
        "authentication",
        "built",
        "cohere",
        "connector",
        "docs",
        "have",
        "rag",
        "that",
        "the",
        "wrapping"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5695454545454546,
      "overall": 0.7231818181818181
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Implement custom connector for Cohere RAG](#implement-custom-connector-for-cohere-rag.md)    - [Qdrant connector](#qdrant-connector.md)      - [Building the collection](#building-the-collection.md)     - [Connector web service](#connector-web-service.md)     - [Connecting to Command-R](#connecting-to-command-r.md)    - [Wrapping up](#wrapping-up.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/examples/cohere-rag-connector.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "439363ee5903-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "filename": "_documentation_examples_cohere-rag-connector_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 243,
      "char_count": 929,
      "start_char": 32228,
      "end_char": 33157,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.528235294117647,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:40.453175",
      "document_id": "439363ee5903",
      "document_name": "_documentation_examples_cohere-rag-connector_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "source_filename": "_documentation_examples_cohere-rag-connector_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_cohere-rag-connector\\_documentation_examples_cohere-rag-connector_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "548a0ec5f5487620",
      "content_digest": "548a0ec5f5487620",
      "chunk_length": 929,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "connector",
          "page",
          "github",
          "landing",
          "https",
          "com",
          "cohere",
          "rag",
          "this",
          "for",
          "you",
          "edit",
          "tree",
          "master",
          "content",
          "documentation",
          "examples",
          "create",
          "issues"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.070796
          },
          {
            "term": "connector",
            "tf": 8,
            "weight": 0.070796
          },
          {
            "term": "page",
            "tf": 7,
            "weight": 0.061947
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.061947
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.053097
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.035398
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.035398
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.035398
          },
          {
            "term": "rag",
            "tf": 4,
            "weight": 0.035398
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.026549
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.026549
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.017699
          },
          {
            "term": "edit",
            "tf": 2,
            "weight": 0.017699
          },
          {
            "term": "tree",
            "tf": 2,
            "weight": 0.017699
          },
          {
            "term": "master",
            "tf": 2,
            "weight": 0.017699
          },
          {
            "term": "content",
            "tf": 2,
            "weight": 0.017699
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.017699
          },
          {
            "term": "examples",
            "tf": 2,
            "weight": 0.017699
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.017699
          },
          {
            "term": "issues",
            "tf": 2,
            "weight": 0.017699
          }
        ],
        "unique_terms": 44,
        "total_terms": 113
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "cohere",
        "com",
        "connector",
        "github",
        "https",
        "landing",
        "page",
        "qdrant",
        "rag",
        "this"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.528235294117647,
      "overall": 0.7094117647058823
    }
  }
]