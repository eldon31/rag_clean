[
  {
    "text": "# Movie Recommendations with Sparse Vectors  Relevant source files  - [README.md](https://github.com/qdrant/examples/blob/b3c4b28f/README.md) - [code-search/code-search.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/code-search/code-search.ipynb) - [sparse-vectors-movies-reco/recommend-movies.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0000",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Movie Recommendations with Sparse Vectors"
      ],
      "heading_text": "Movie Recommendations with Sparse Vectors",
      "token_count": 120,
      "char_count": 409,
      "start_char": 2092,
      "end_char": 2501,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.55,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.011327",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "Movie Recommendations with Sparse Vectors",
      "chunk_hash": "8642515091042245",
      "content_digest": "8642515091042245",
      "chunk_length": 409,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "code",
          "search",
          "ipynb",
          "movies",
          "sparse",
          "vectors",
          "https",
          "github",
          "com",
          "qdrant",
          "examples",
          "blob",
          "b3c4b28f",
          "readme",
          "reco",
          "recommend",
          "movie",
          "recommendations",
          "with",
          "relevant"
        ],
        "term_weights": [
          {
            "term": "code",
            "tf": 4,
            "weight": 0.072727
          },
          {
            "term": "search",
            "tf": 4,
            "weight": 0.072727
          },
          {
            "term": "ipynb",
            "tf": 4,
            "weight": 0.072727
          },
          {
            "term": "movies",
            "tf": 4,
            "weight": 0.072727
          },
          {
            "term": "sparse",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "examples",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "blob",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "b3c4b28f",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "readme",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "movie",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "recommendations",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "relevant",
            "tf": 1,
            "weight": 0.018182
          }
        ],
        "unique_terms": 22,
        "total_terms": 55
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Movie Recommendations with Sparse Vectors",
        "code",
        "com",
        "github",
        "https",
        "ipynb",
        "movies",
        "qdrant",
        "search",
        "sparse",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.55,
      "overall": 0.6833333333333332
    }
  },
  {
    "text": "## Purpose\n\nThis document explains how to implement a movie recommendation system using collaborative filtering with Qdrant's sparse vector capabilities. We'll demonstrate how to represent user preferences as sparse vectors, find similar users based on these vectors, and generate personalized movie recommendations. This approach is particularly efficient for recommendation systems with large, sparse feature spaces.\n\nSources: [README.md9-16](https://github.com/qdrant/examples/blob/b3c4b28f/README.md#L9-L16) [sparse-vectors-movies-reco/recommend-movies.ipynb6-25](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L6-L25)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Purpose"
      ],
      "heading_text": "Purpose",
      "token_count": 156,
      "char_count": 674,
      "start_char": 2503,
      "end_char": 3177,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.743448275862069,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.011753",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "Purpose",
      "chunk_hash": "5c910ae11d31b3ff",
      "content_digest": "5c910ae11d31b3ff",
      "chunk_length": 674,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "sparse",
          "vectors",
          "movies",
          "qdrant",
          "this",
          "how",
          "movie",
          "recommendation",
          "with",
          "readme",
          "https",
          "github",
          "com",
          "examples",
          "blob",
          "b3c4b28f",
          "reco",
          "recommend",
          "purpose",
          "document"
        ],
        "term_weights": [
          {
            "term": "sparse",
            "tf": 5,
            "weight": 0.061728
          },
          {
            "term": "vectors",
            "tf": 4,
            "weight": 0.049383
          },
          {
            "term": "movies",
            "tf": 4,
            "weight": 0.049383
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.037037
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "how",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "movie",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "recommendation",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "readme",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "examples",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "b3c4b28f",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.024691
          },
          {
            "term": "purpose",
            "tf": 1,
            "weight": 0.012346
          },
          {
            "term": "document",
            "tf": 1,
            "weight": 0.012346
          }
        ],
        "unique_terms": 55,
        "total_terms": 81
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Purpose",
        "how",
        "movie",
        "movies",
        "qdrant",
        "readme",
        "recommendation",
        "sparse",
        "this",
        "vectors",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.743448275862069,
      "overall": 0.7144827586206897
    }
  },
  {
    "text": "## Overview\n\nCollaborative filtering is a recommendation technique that finds patterns in user behavior to predict preferences. It works on the premise that if two users have similar tastes (rated similar movies similarly), they will likely have similar preferences for other movies. This example leverages Qdrant's sparse vector capabilities to implement a collaborative filtering system using the MovieLens dataset.\n\nThe key workflow is:\n\n1. Represent each user's movie ratings as a sparse vector\n2. Index these vectors in Qdrant\n3. Find users with similar taste patterns\n4. Recommend movies that similar users liked but the target user hasn't seen\n\n```\n```\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb6-25](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L6-L25)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0002",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Overview"
      ],
      "heading_text": "Overview",
      "token_count": 187,
      "char_count": 832,
      "start_char": 3179,
      "end_char": 4011,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.7200970873786408,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.012085",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "Overview",
      "chunk_hash": "d39930437fb2e313",
      "content_digest": "d39930437fb2e313",
      "chunk_length": 832,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "similar",
          "the",
          "sparse",
          "that",
          "user",
          "users",
          "qdrant",
          "vectors",
          "recommend",
          "collaborative",
          "filtering",
          "patterns",
          "preferences",
          "have",
          "vector",
          "reco",
          "overview",
          "recommendation",
          "technique"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 7,
            "weight": 0.067308
          },
          {
            "term": "similar",
            "tf": 5,
            "weight": 0.048077
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.038462
          },
          {
            "term": "sparse",
            "tf": 4,
            "weight": 0.038462
          },
          {
            "term": "that",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "user",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "users",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "recommend",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "collaborative",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "patterns",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "preferences",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "have",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "overview",
            "tf": 1,
            "weight": 0.009615
          },
          {
            "term": "recommendation",
            "tf": 1,
            "weight": 0.009615
          },
          {
            "term": "technique",
            "tf": 1,
            "weight": 0.009615
          }
        ],
        "unique_terms": 69,
        "total_terms": 104
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Overview",
        "movies",
        "qdrant",
        "recommend",
        "similar",
        "sparse",
        "that",
        "the",
        "user",
        "users",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.7200970873786408,
      "overall": 0.7066990291262135
    }
  },
  {
    "text": "### What are Sparse Vectors?\n\nSparse vectors contain mostly zero values, with only a few non-zero entries. In the context of movie recommendations:\n\n- Each dimension represents a movie ID\n- The value at that dimension represents the user's rating\n- Most users rate only a tiny fraction of all available movies, making the vector sparse\n\nQdrant efficiently handles sparse vectors by only storing non-zero values (values and their indices), significantly reducing storage requirements and improving search performance for recommendation systems.\n\n```\n```\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb416-428](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L416-L428)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "What are Sparse Vectors?"
      ],
      "heading_text": "What are Sparse Vectors?",
      "token_count": 160,
      "char_count": 731,
      "start_char": 4060,
      "end_char": 4791,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.7194117647058823,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.012445",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "What are Sparse Vectors?",
      "chunk_hash": "3c5111098478f513",
      "content_digest": "3c5111098478f513",
      "chunk_length": 731,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "sparse",
          "vectors",
          "movies",
          "the",
          "zero",
          "values",
          "only",
          "non",
          "movie",
          "dimension",
          "represents",
          "qdrant",
          "and",
          "reco",
          "recommend",
          "what",
          "are",
          "contain",
          "mostly",
          "with"
        ],
        "term_weights": [
          {
            "term": "sparse",
            "tf": 6,
            "weight": 0.063158
          },
          {
            "term": "vectors",
            "tf": 5,
            "weight": 0.052632
          },
          {
            "term": "movies",
            "tf": 5,
            "weight": 0.052632
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.042105
          },
          {
            "term": "zero",
            "tf": 3,
            "weight": 0.031579
          },
          {
            "term": "values",
            "tf": 3,
            "weight": 0.031579
          },
          {
            "term": "only",
            "tf": 3,
            "weight": 0.031579
          },
          {
            "term": "non",
            "tf": 2,
            "weight": 0.021053
          },
          {
            "term": "movie",
            "tf": 2,
            "weight": 0.021053
          },
          {
            "term": "dimension",
            "tf": 2,
            "weight": 0.021053
          },
          {
            "term": "represents",
            "tf": 2,
            "weight": 0.021053
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.021053
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.021053
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.021053
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.021053
          },
          {
            "term": "what",
            "tf": 1,
            "weight": 0.010526
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.010526
          },
          {
            "term": "contain",
            "tf": 1,
            "weight": 0.010526
          },
          {
            "term": "mostly",
            "tf": 1,
            "weight": 0.010526
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.010526
          }
        ],
        "unique_terms": 65,
        "total_terms": 95
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "What are Sparse Vectors?",
        "dimension",
        "movie",
        "movies",
        "non",
        "only",
        "sparse",
        "the",
        "values",
        "vectors",
        "zero"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.7194117647058823,
      "overall": 0.7731372549019606
    }
  },
  {
    "text": "## Implementation Steps",
    "metadata": {
      "chunk_id": "ed189c0b0797-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Implementation Steps"
      ],
      "heading_text": "Implementation Steps",
      "token_count": 3,
      "char_count": 23,
      "start_char": 4793,
      "end_char": 4816,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7899999999999999,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.012506",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "Implementation Steps",
      "chunk_hash": "90903e1dfd6c57b7",
      "content_digest": "90903e1dfd6c57b7",
      "chunk_length": 23,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "implementation",
          "steps"
        ],
        "term_weights": [
          {
            "term": "implementation",
            "tf": 1,
            "weight": 0.5
          },
          {
            "term": "steps",
            "tf": 1,
            "weight": 0.5
          }
        ],
        "unique_terms": 2,
        "total_terms": 2
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Implementation Steps",
        "implementation",
        "steps"
      ]
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7899999999999999,
      "overall": 0.83
    }
  },
  {
    "text": "### 1. Data Preparation\n\nFirst, we load the MovieLens dataset, which contains:\n\n- User information (demographics)\n- Movie information (title, genres)\n- User ratings for movies\n\n```\n```\n\nThe ratings are normalized to have a mean of 0 and standard deviation of 1. This normalization is particularly important for sparse vectors as it allows us to capture both positive and negative preferences.\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb210-408](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L210-L408)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "1. Data Preparation"
      ],
      "heading_text": "1. Data Preparation",
      "token_count": 140,
      "char_count": 571,
      "start_char": 4818,
      "end_char": 5389,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.53375,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.012822",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "1. Data Preparation",
      "chunk_hash": "43762d78e4f24b22",
      "content_digest": "43762d78e4f24b22",
      "chunk_length": 571,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "sparse",
          "vectors",
          "the",
          "user",
          "information",
          "ratings",
          "for",
          "and",
          "reco",
          "recommend",
          "data",
          "preparation",
          "first",
          "load",
          "movielens",
          "dataset",
          "which",
          "contains",
          "demographics"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 5,
            "weight": 0.073529
          },
          {
            "term": "sparse",
            "tf": 3,
            "weight": 0.044118
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.044118
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "user",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "information",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "ratings",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "data",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "preparation",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "first",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "load",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "movielens",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "dataset",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "which",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "contains",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "demographics",
            "tf": 1,
            "weight": 0.014706
          }
        ],
        "unique_terms": 52,
        "total_terms": 68
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "1. Data Preparation",
        "and",
        "for",
        "information",
        "movies",
        "ratings",
        "reco",
        "sparse",
        "the",
        "user",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.53375,
      "overall": 0.6779166666666665
    }
  },
  {
    "text": "### 2. Converting Ratings to Sparse Vectors\n\nEach user's ratings are converted into a sparse vector format with two components:\n\n- `values`: The normalized rating values\n- `indices`: The corresponding movie IDs\n\n```\n```\n\nThis structure efficiently represents each user's preferences across the entire movie space by only storing the movies they've actually rated.\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb416-428](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L416-L428)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0007",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "2. Converting Ratings to Sparse Vectors"
      ],
      "heading_text": "2. Converting Ratings to Sparse Vectors",
      "token_count": 130,
      "char_count": 542,
      "start_char": 5391,
      "end_char": 5933,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.5364285714285714,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.013063",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "2. Converting Ratings to Sparse Vectors",
      "chunk_hash": "4b8ec32fcf5b5e7d",
      "content_digest": "4b8ec32fcf5b5e7d",
      "chunk_length": 542,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "sparse",
          "the",
          "vectors",
          "ratings",
          "each",
          "user",
          "values",
          "movie",
          "reco",
          "recommend",
          "converting",
          "are",
          "converted",
          "into",
          "vector",
          "format",
          "with",
          "two",
          "components"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 5,
            "weight": 0.071429
          },
          {
            "term": "sparse",
            "tf": 4,
            "weight": 0.057143
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.057143
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.042857
          },
          {
            "term": "ratings",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "each",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "user",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "values",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "movie",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "converting",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "converted",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "into",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "vector",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "format",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "two",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "components",
            "tf": 1,
            "weight": 0.014286
          }
        ],
        "unique_terms": 51,
        "total_terms": 70
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "2. Converting Ratings to Sparse Vectors",
        "each",
        "movie",
        "movies",
        "ratings",
        "reco",
        "sparse",
        "the",
        "user",
        "values",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.5364285714285714,
      "overall": 0.6788095238095236
    }
  },
  {
    "text": "### 3. Setting Up Qdrant Collection\n\nUnlike dense vector collections that require a pre-defined dimension, sparse vector collections in Qdrant don't need dimension specification since the dimensionality is determined by the indices in the data.\n\n```\n```\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb460-469](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L460-L469)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "3. Setting Up Qdrant Collection"
      ],
      "heading_text": "3. Setting Up Qdrant Collection",
      "token_count": 109,
      "char_count": 432,
      "start_char": 5935,
      "end_char": 6367,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5361538461538461,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.013267",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "3. Setting Up Qdrant Collection",
      "chunk_hash": "5011b022f2d9bb7e",
      "content_digest": "5011b022f2d9bb7e",
      "chunk_length": 432,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "qdrant",
          "sparse",
          "the",
          "vector",
          "collections",
          "dimension",
          "vectors",
          "reco",
          "recommend",
          "setting",
          "collection",
          "unlike",
          "dense",
          "that",
          "require",
          "pre",
          "defined",
          "don",
          "need"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 4,
            "weight": 0.075472
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.056604
          },
          {
            "term": "sparse",
            "tf": 3,
            "weight": 0.056604
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.056604
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "dimension",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "setting",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "collection",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "unlike",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "dense",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "require",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "pre",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "defined",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "don",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "need",
            "tf": 1,
            "weight": 0.018868
          }
        ],
        "unique_terms": 38,
        "total_terms": 53
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "3. Setting Up Qdrant Collection",
        "collections",
        "dimension",
        "movies",
        "qdrant",
        "reco",
        "recommend",
        "sparse",
        "the",
        "vector",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5361538461538461,
      "overall": 0.6453846153846153
    }
  },
  {
    "text": "### 4. Indexing User Preference Vectors\n\nEach user's sparse rating vector is uploaded to Qdrant along with their demographic information:\n\n```\n```\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb480-494](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L480-L494)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0009",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "4. Indexing User Preference Vectors"
      ],
      "heading_text": "4. Indexing User Preference Vectors",
      "token_count": 91,
      "char_count": 325,
      "start_char": 6369,
      "end_char": 6694,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5775,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.013423",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "4. Indexing User Preference Vectors",
      "chunk_hash": "0564f7577f74cab6",
      "content_digest": "0564f7577f74cab6",
      "chunk_length": 325,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "vectors",
          "sparse",
          "user",
          "qdrant",
          "reco",
          "recommend",
          "indexing",
          "preference",
          "each",
          "rating",
          "vector",
          "uploaded",
          "along",
          "with",
          "their",
          "demographic",
          "information",
          "sources",
          "ipynb480"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 4,
            "weight": 0.097561
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.073171
          },
          {
            "term": "sparse",
            "tf": 3,
            "weight": 0.073171
          },
          {
            "term": "user",
            "tf": 2,
            "weight": 0.04878
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.04878
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.04878
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.04878
          },
          {
            "term": "indexing",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "preference",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "each",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "rating",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "vector",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "uploaded",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "along",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "their",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "demographic",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "information",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.02439
          },
          {
            "term": "ipynb480",
            "tf": 1,
            "weight": 0.02439
          }
        ],
        "unique_terms": 30,
        "total_terms": 41
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "4. Indexing User Preference Vectors",
        "each",
        "indexing",
        "movies",
        "preference",
        "qdrant",
        "reco",
        "recommend",
        "sparse",
        "user",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5775,
      "overall": 0.6591666666666667
    }
  },
  {
    "text": "### 5. Querying Similar Users\n\nTo generate recommendations, we first create a sparse vector of our own movie preferences:\n\n```\n```\n\nThen we search for similar users using Qdrant's vector similarity search:\n\n```\n```\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb510-554](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L510-L554)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0010",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "5. Querying Similar Users"
      ],
      "heading_text": "5. Querying Similar Users",
      "token_count": 106,
      "char_count": 393,
      "start_char": 6696,
      "end_char": 7089,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5316666666666666,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.013627",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "5. Querying Similar Users",
      "chunk_hash": "230c44dcae12b487",
      "content_digest": "230c44dcae12b487",
      "chunk_length": 393,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "sparse",
          "similar",
          "users",
          "vector",
          "search",
          "qdrant",
          "vectors",
          "reco",
          "recommend",
          "querying",
          "generate",
          "recommendations",
          "first",
          "create",
          "our",
          "own",
          "movie",
          "preferences",
          "then"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 4,
            "weight": 0.083333
          },
          {
            "term": "sparse",
            "tf": 3,
            "weight": 0.0625
          },
          {
            "term": "similar",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "users",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "querying",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "generate",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "recommendations",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "first",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "create",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "our",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "own",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "movie",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "preferences",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "then",
            "tf": 1,
            "weight": 0.020833
          }
        ],
        "unique_terms": 35,
        "total_terms": 48
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "5. Querying Similar Users",
        "movies",
        "qdrant",
        "reco",
        "recommend",
        "search",
        "similar",
        "sparse",
        "users",
        "vector",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5316666666666666,
      "overall": 0.6438888888888888
    }
  },
  {
    "text": "### 6. Generating Recommendations\n\nFrom the similar users' ratings, we identify movies they liked that the target user hasn't rated yet:\n\n```\n```\n\nThe final recommendations are generated by sorting movies by their aggregated scores:\n\n```\n```\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb562-603](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L562-L603)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "6. Generating Recommendations"
      ],
      "heading_text": "6. Generating Recommendations",
      "token_count": 107,
      "char_count": 420,
      "start_char": 7091,
      "end_char": 7511,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5284615384615384,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.013831",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "6. Generating Recommendations",
      "chunk_hash": "c14e1c567be4467c",
      "content_digest": "c14e1c567be4467c",
      "chunk_length": 420,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "the",
          "recommendations",
          "sparse",
          "vectors",
          "reco",
          "recommend",
          "generating",
          "from",
          "similar",
          "users",
          "ratings",
          "identify",
          "they",
          "liked",
          "that",
          "target",
          "user",
          "hasn",
          "rated"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 6,
            "weight": 0.113208
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.056604
          },
          {
            "term": "recommendations",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "sparse",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.037736
          },
          {
            "term": "generating",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "similar",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "users",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "ratings",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "identify",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "they",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "liked",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "target",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "user",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "hasn",
            "tf": 1,
            "weight": 0.018868
          },
          {
            "term": "rated",
            "tf": 1,
            "weight": 0.018868
          }
        ],
        "unique_terms": 41,
        "total_terms": 53
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "6. Generating Recommendations",
        "from",
        "generating",
        "movies",
        "reco",
        "recommend",
        "recommendations",
        "similar",
        "sparse",
        "the",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5284615384615384,
      "overall": 0.6428205128205128
    }
  },
  {
    "text": "### Filtered Recommendations\n\nQdrant allows filtering recommendations based on user demographics or other metadata. For example, you can find similar users within a specific age group:\n\n```\n```\n\nThis feature enables more personalized recommendations by leveraging both similarity in taste and demographic information.\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb622-649](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L622-L649)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Filtered Recommendations"
      ],
      "heading_text": "Filtered Recommendations",
      "token_count": 111,
      "char_count": 496,
      "start_char": 7535,
      "end_char": 8031,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.57,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.014108",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "Filtered Recommendations",
      "chunk_hash": "e31bfdf6c4888dc6",
      "content_digest": "e31bfdf6c4888dc6",
      "chunk_length": 496,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "recommendations",
          "qdrant",
          "sparse",
          "vectors",
          "reco",
          "recommend",
          "filtered",
          "allows",
          "filtering",
          "based",
          "user",
          "demographics",
          "other",
          "metadata",
          "for",
          "example",
          "you",
          "can",
          "find"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 4,
            "weight": 0.066667
          },
          {
            "term": "recommendations",
            "tf": 3,
            "weight": 0.05
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.033333
          },
          {
            "term": "sparse",
            "tf": 2,
            "weight": 0.033333
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.033333
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.033333
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.033333
          },
          {
            "term": "filtered",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "allows",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "filtering",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "based",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "user",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "demographics",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "other",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "metadata",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "example",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "you",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "can",
            "tf": 1,
            "weight": 0.016667
          },
          {
            "term": "find",
            "tf": 1,
            "weight": 0.016667
          }
        ],
        "unique_terms": 50,
        "total_terms": 60
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Filtered Recommendations",
        "allows",
        "filtered",
        "filtering",
        "movies",
        "qdrant",
        "reco",
        "recommend",
        "recommendations",
        "sparse",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.57,
      "overall": 0.6566666666666666
    }
  },
  {
    "text": "## System Architecture\n\nThe overall architecture of the movie recommendation system is as follows:\n\n```\n```\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb6-649](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L6-L649)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0014",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "System Architecture"
      ],
      "heading_text": "System Architecture",
      "token_count": 78,
      "char_count": 282,
      "start_char": 8033,
      "end_char": 8315,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.7233333333333333,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.014269",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "System Architecture",
      "chunk_hash": "599b9e88539e2291",
      "content_digest": "599b9e88539e2291",
      "chunk_length": 282,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "movies",
          "system",
          "architecture",
          "the",
          "sparse",
          "vectors",
          "reco",
          "recommend",
          "overall",
          "movie",
          "recommendation",
          "follows",
          "sources",
          "ipynb6",
          "649",
          "https",
          "github",
          "com",
          "qdrant",
          "examples"
        ],
        "term_weights": [
          {
            "term": "movies",
            "tf": 4,
            "weight": 0.117647
          },
          {
            "term": "system",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "architecture",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "sparse",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "overall",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "movie",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "recommendation",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "follows",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "ipynb6",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "649",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "qdrant",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "examples",
            "tf": 1,
            "weight": 0.029412
          }
        ],
        "unique_terms": 24,
        "total_terms": 34
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "System Architecture",
        "architecture",
        "movie",
        "movies",
        "overall",
        "reco",
        "recommend",
        "sparse",
        "system",
        "the",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.7233333333333333,
      "overall": 0.7077777777777777
    }
  },
  {
    "text": "## Performance Considerations\n\nSparse vectors are particularly efficient for collaborative filtering recommendation systems because:\n\n1. **Storage Efficiency**: Only non-zero values are stored, greatly reducing memory requirements for large catalogs with millions of items.\n\n2. **Computational Efficiency**: Similarity calculations only consider dimensions with non-zero values in at least one of the vectors.\n\n3. **Interpretability**: The sparse approach maintains clear relationships between dimensions (movie IDs) and values (ratings), making the system more interpretable.\n\n4. **Scalability**: The system can easily accommodate new movies without retraining, as they simply become new dimensions in the sparse vector space.\n\nFor production use cases, it's recommended to use a server-based Qdrant instance rather than the in-memory version shown in the example.\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb436-440](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L436-L440)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0015",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Performance Considerations"
      ],
      "heading_text": "Performance Considerations",
      "token_count": 214,
      "char_count": 1044,
      "start_char": 8317,
      "end_char": 9361,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.7253448275862068,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.014746",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "Performance Considerations",
      "chunk_hash": "9b6afad4164af4c6",
      "content_digest": "9b6afad4164af4c6",
      "chunk_length": 1044,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "sparse",
          "movies",
          "vectors",
          "for",
          "values",
          "dimensions",
          "are",
          "efficiency",
          "only",
          "non",
          "zero",
          "memory",
          "with",
          "system",
          "new",
          "use",
          "qdrant",
          "reco",
          "recommend"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 7,
            "weight": 0.055118
          },
          {
            "term": "sparse",
            "tf": 5,
            "weight": 0.03937
          },
          {
            "term": "movies",
            "tf": 5,
            "weight": 0.03937
          },
          {
            "term": "vectors",
            "tf": 4,
            "weight": 0.031496
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.023622
          },
          {
            "term": "values",
            "tf": 3,
            "weight": 0.023622
          },
          {
            "term": "dimensions",
            "tf": 3,
            "weight": 0.023622
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "efficiency",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "only",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "non",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "zero",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "memory",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "system",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "new",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.015748
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.015748
          }
        ],
        "unique_terms": 91,
        "total_terms": 127
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Performance Considerations",
        "are",
        "dimensions",
        "efficiency",
        "for",
        "movies",
        "only",
        "sparse",
        "the",
        "values",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.7253448275862068,
      "overall": 0.7084482758620689
    }
  },
  {
    "text": "## Conclusion\n\nThis implementation demonstrates how Qdrant's sparse vector capabilities can be leveraged to build an effective collaborative filtering recommendation system. The approach is particularly suitable for domains with large, sparse feature spaces like movie recommendations, e-commerce product recommendations, or content suggestions.\n\nBy representing user preferences as sparse vectors and utilizing Qdrant's vector search capabilities, we can efficiently find similar users and generate personalized recommendations with minimal computational overhead.\n\nSources: [sparse-vectors-movies-reco/recommend-movies.ipynb6-649](https://github.com/qdrant/examples/blob/b3c4b28f/sparse-vectors-movies-reco/recommend-movies.ipynb#L6-L649) [README.md16](https://github.com/qdrant/examples/blob/b3c4b28f/README.md#L16-L16)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh",
    "metadata": {
      "chunk_id": "ed189c0b0797-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Conclusion"
      ],
      "heading_text": "Conclusion",
      "token_count": 183,
      "char_count": 874,
      "start_char": 9363,
      "end_char": 10237,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.7487499999999999,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.015090",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "Conclusion",
      "chunk_hash": "bd41043c9e21710d",
      "content_digest": "bd41043c9e21710d",
      "chunk_length": 874,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "sparse",
          "qdrant",
          "movies",
          "recommendations",
          "vectors",
          "this",
          "vector",
          "capabilities",
          "can",
          "with",
          "and",
          "reco",
          "recommend",
          "https",
          "github",
          "com",
          "examples",
          "blob",
          "b3c4b28f",
          "readme"
        ],
        "term_weights": [
          {
            "term": "sparse",
            "tf": 5,
            "weight": 0.048544
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.038835
          },
          {
            "term": "movies",
            "tf": 4,
            "weight": 0.038835
          },
          {
            "term": "recommendations",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "capabilities",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "reco",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "recommend",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "examples",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "b3c4b28f",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "readme",
            "tf": 2,
            "weight": 0.019417
          }
        ],
        "unique_terms": 72,
        "total_terms": 103
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Conclusion",
        "can",
        "capabilities",
        "movies",
        "qdrant",
        "recommendations",
        "sparse",
        "this",
        "vector",
        "vectors",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.7487499999999999,
      "overall": 0.7162499999999999
    }
  },
  {
    "text": "### On this page  - [Movie Recommendations with Sparse Vectors](#movie-recommendations-with-sparse-vectors.md) - [Purpose](#purpose.md) - [Overview](#overview.md) - [Sparse Vectors for Collaborative Filtering](#sparse-vectors-for-collaborative-filtering.md) - [What are Sparse Vectors?](#what-are-sparse-vectors.md) - [Implementation Steps](#implementation-steps.md) - [1. Data Preparation](#1-data-preparation.md) - [2. Converting Ratings to Sparse Vectors](#2-converting-ratings-to-sparse-vectors.md) - [3. Setting Up Qdrant Collection](#3-setting-up-qdrant-collection.md) - [4. Indexing User Preference Vectors](#4-indexing-user-preference-vectors.md) - [5. Querying Similar Users](#5-querying-similar-users.md) - [6. Generating Recommendations](#6-generating-recommendations.md) - [Advanced Features](#advanced-features.md) - [Filtered Recommendations](#filtered-recommendations.md) - [System Architecture](#system-architecture.md) - [Performance Considerations](#performance-considerations.md) - [Conclusion](#conclusion.md)",
    "metadata": {
      "chunk_id": "ed189c0b0797-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "On this page"
      ],
      "heading_text": "On this page",
      "token_count": 267,
      "char_count": 1029,
      "start_char": 10239,
      "end_char": 11268,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.717027027027027,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:27.015512",
      "document_id": "ed189c0b0797",
      "document_name": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_filename": "_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_3.3-movie-recommendations-with-sparse-vectors.md",
      "hierarchy_path": "On this page",
      "chunk_hash": "07dd6ba7b3bcfc8c",
      "content_digest": "07dd6ba7b3bcfc8c",
      "chunk_length": 1029,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "vectors",
          "sparse",
          "recommendations",
          "movie",
          "with",
          "purpose",
          "overview",
          "for",
          "collaborative",
          "filtering",
          "what",
          "are",
          "implementation",
          "steps",
          "data",
          "preparation",
          "converting",
          "ratings",
          "setting",
          "qdrant"
        ],
        "term_weights": [
          {
            "term": "vectors",
            "tf": 10,
            "weight": 0.108696
          },
          {
            "term": "sparse",
            "tf": 8,
            "weight": 0.086957
          },
          {
            "term": "recommendations",
            "tf": 6,
            "weight": 0.065217
          },
          {
            "term": "movie",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "purpose",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "overview",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "collaborative",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "what",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "implementation",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "steps",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "preparation",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "converting",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "ratings",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "setting",
            "tf": 2,
            "weight": 0.021739
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.021739
          }
        ],
        "unique_terms": 38,
        "total_terms": 92
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "On this page",
        "collaborative",
        "filtering",
        "for",
        "movie",
        "overview",
        "purpose",
        "recommendations",
        "sparse",
        "vectors",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.717027027027027,
      "overall": 0.739009009009009
    }
  }
]