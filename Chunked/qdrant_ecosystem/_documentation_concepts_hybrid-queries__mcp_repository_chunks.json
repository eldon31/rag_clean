[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "2c49d1b91247-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1040,
      "end_char": 3008,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.435945",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "2c49d1b91247-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3690,
      "end_char": 5678,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.437120",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "2c49d1b91247-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5680,
      "end_char": 5991,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.437120",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "2c49d1b91247-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6368,
      "end_char": 8336,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.437120",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "2c49d1b91247-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9018,
      "end_char": 11006,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.437120",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)  - [Documentation](https://qdrant.tech/documentation/) - - [Concepts](https://qdrant.tech/documentation/concepts/) - - Hybrid Queries",
    "metadata": {
      "chunk_id": "2c49d1b91247-0009",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 116,
      "char_count": 445,
      "start_char": 11008,
      "end_char": 11453,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.437120",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "8a18c30950aa61bf",
      "content_digest": "8a18c30950aa61bf",
      "chunk_length": 445,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "documentation",
          "tech",
          "faq",
          "fundamentals",
          "database",
          "optimization",
          "concepts",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases",
          "hybrid",
          "queries"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.208333
          },
          {
            "term": "https",
            "tf": 6,
            "weight": 0.125
          },
          {
            "term": "documentation",
            "tf": 6,
            "weight": 0.125
          },
          {
            "term": "tech",
            "tf": 5,
            "weight": 0.104167
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.083333
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.0625
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "concepts",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "hybrid",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "queries",
            "tf": 1,
            "weight": 0.020833
          }
        ],
        "unique_terms": 17,
        "total_terms": 48
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "concepts",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5,
      "overall": 0.6999999999999998
    }
  },
  {
    "text": "## Hybrid Search\n\nOne of the most common problems when you have different representations of the same data is to combine the queried points for each representation into a single result.\n\nFusing results from multiple queries\n\nFor example, in text search, it is often useful to combine dense and sparse vectors get the best of semantics, plus the best of matching specific words.\n\nQdrant currently has two ways of combining the results from different queries:\n\n- `rrf` - [Reciprocal Rank Fusion](https://plg.uwaterloo.ca/~gvcormac/cormacksigir09-rrf.pdf)\n\n  Considers the positions of results within each query, and boosts the ones that appear closer to the top in multiple of them.\n\n- `dbsf` - [Distribution-Based Score Fusion ](https://medium.com/plain-simple-software/distribution-based-score-fusion-dbsf-a-new-approach-to-vector-search-ranking-f87c37488b18)*(available as of v1.11.0)*\n\n  Normalizes the scores of the points in each query, using the mean +/- the 3rd standard deviation as limits, and then sums the scores of the same point across different queries.\n\n  `dbsf` is stateless and calculates the normalization limits only based on the results of each query, not on all the scores that it has seen.\n\nHere is an example of Reciprocal Rank Fusion for a query containing two prefetches against different named vectors configured to respectively hold sparse and dense vectors.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": [\n        {\n            \"query\": { \n                \"indices\": [1, 42],    // <┐\n                \"values\": [0.22, 0.8]  // <┴─sparse vector\n             },\n            \"using\": \"sparse\",\n            \"limit\": 20\n        },\n        {\n            \"query\": [0.01, 0.45, 0.67, ...], // <-- dense vector\n            \"using\": \"dense\",\n            \"limit\": 20\n        }\n    ],\n    \"query\": { \"fusion\": \"rrf\" }, // <--- reciprocal rank fusion\n    \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=[\n        models.Prefetch(\n            query=models.SparseVector(indices=[1, 42], values=[0.22, 0.8]),\n            using=\"sparse\",\n            limit=20,\n        ),\n        models.Prefetch(\n            query=[0.01, 0.45, 0.67],  # <-- dense vector\n            using=\"dense\",\n            limit=20,\n        ),\n    ],\n    query=models.FusionQuery(fusion=models.Fusion.RRF),\n)\n```",
    "metadata": {
      "chunk_id": "2c49d1b91247-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Hybrid Search"
      ],
      "heading_text": "Hybrid Search",
      "token_count": 616,
      "char_count": 2478,
      "start_char": 12541,
      "end_char": 15019,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8856643356643357,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.443627",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Hybrid Search",
      "chunk_hash": "6ba060ceb91afa04",
      "content_digest": "6ba060ceb91afa04",
      "chunk_length": 2478,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "query",
          "fusion",
          "dense",
          "models",
          "and",
          "sparse",
          "using",
          "limit",
          "different",
          "points",
          "each",
          "results",
          "rrf",
          "vector",
          "prefetch",
          "search",
          "for",
          "from",
          "queries"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 18,
            "weight": 0.070312
          },
          {
            "term": "query",
            "tf": 12,
            "weight": 0.046875
          },
          {
            "term": "fusion",
            "tf": 8,
            "weight": 0.03125
          },
          {
            "term": "dense",
            "tf": 6,
            "weight": 0.023438
          },
          {
            "term": "models",
            "tf": 6,
            "weight": 0.023438
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.019531
          },
          {
            "term": "sparse",
            "tf": 5,
            "weight": 0.019531
          },
          {
            "term": "using",
            "tf": 5,
            "weight": 0.019531
          },
          {
            "term": "limit",
            "tf": 5,
            "weight": 0.019531
          },
          {
            "term": "different",
            "tf": 4,
            "weight": 0.015625
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.015625
          },
          {
            "term": "each",
            "tf": 4,
            "weight": 0.015625
          },
          {
            "term": "results",
            "tf": 4,
            "weight": 0.015625
          },
          {
            "term": "rrf",
            "tf": 4,
            "weight": 0.015625
          },
          {
            "term": "vector",
            "tf": 4,
            "weight": 0.015625
          },
          {
            "term": "prefetch",
            "tf": 4,
            "weight": 0.015625
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.011719
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.011719
          },
          {
            "term": "from",
            "tf": 3,
            "weight": 0.011719
          },
          {
            "term": "queries",
            "tf": 3,
            "weight": 0.011719
          }
        ],
        "unique_terms": 131,
        "total_terms": 256
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Hybrid Search",
        "and",
        "dense",
        "different",
        "fusion",
        "limit",
        "models",
        "query",
        "sparse",
        "the",
        "using"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8856643356643357,
      "overall": 0.7952214452214452
    }
  },
  {
    "text": "### Re-scoring examples\n\nFetch 1000 results using a shorter MRL byte vector, then re-score them using the full vector and get the top 10.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"query\": [1, 23, 45, 67], // <------------- small byte vector\n        \"using\": \"mrl_byte\"\n        \"limit\": 1000\n    },\n    \"query\": [0.01, 0.299, 0.45, 0.67, ...], // <-- full vector\n    \"using\": \"full\",\n    \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[1, 23, 45, 67],  # <------------- small byte vector\n        using=\"mrl_byte\",\n        limit=1000,\n    ),\n    query=[0.01, 0.299, 0.45, 0.67],  # <-- full vector\n    using=\"full\",\n    limit=10,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  prefetch: {\n    query: [1, 23, 45, 67], // <------------- small byte vector\n    using: 'mrl_byte',\n    limit: 1000,\n  },\n  query: [0.01, 0.299, 0.45, 0.67], // <-- full vector,\n  using: 'full',\n  limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![1.0, 23.0, 45.0, 67.0]))\n            .using(\"mlr_byte\")\n            .limit(1000u64)\n        )\n        .query(Query::new_nearest(vec![0.01, 0.299, 0.45, 0.67]))\n        .using(\"full\")\n        .limit(10u64)\n).await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());",
    "metadata": {
      "chunk_id": "2c49d1b91247-0015",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Re-scoring examples"
      ],
      "heading_text": "Re-scoring examples",
      "token_count": 670,
      "char_count": 2170,
      "start_char": 19378,
      "end_char": 21548,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.888265306122449,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.464695",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Re-scoring examples",
      "chunk_hash": "e67860a01e9dcbc2",
      "content_digest": "e67860a01e9dcbc2",
      "chunk_length": 2170,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "query",
          "qdrant",
          "using",
          "byte",
          "vector",
          "full",
          "limit",
          "import",
          "qdrantclient",
          "collection",
          "name",
          "prefetch",
          "new",
          "1000",
          "mrl",
          "points",
          "299",
          "localhost",
          "http"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 16,
            "weight": 0.076555
          },
          {
            "term": "query",
            "tf": 15,
            "weight": 0.07177
          },
          {
            "term": "qdrant",
            "tf": 12,
            "weight": 0.057416
          },
          {
            "term": "using",
            "tf": 10,
            "weight": 0.047847
          },
          {
            "term": "byte",
            "tf": 8,
            "weight": 0.038278
          },
          {
            "term": "vector",
            "tf": 8,
            "weight": 0.038278
          },
          {
            "term": "full",
            "tf": 8,
            "weight": 0.038278
          },
          {
            "term": "limit",
            "tf": 8,
            "weight": 0.038278
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.033493
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.033493
          },
          {
            "term": "collection",
            "tf": 5,
            "weight": 0.023923
          },
          {
            "term": "name",
            "tf": 5,
            "weight": 0.023923
          },
          {
            "term": "prefetch",
            "tf": 5,
            "weight": 0.023923
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.023923
          },
          {
            "term": "1000",
            "tf": 4,
            "weight": 0.019139
          },
          {
            "term": "mrl",
            "tf": 4,
            "weight": 0.019139
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.019139
          },
          {
            "term": "299",
            "tf": 4,
            "weight": 0.019139
          },
          {
            "term": "localhost",
            "tf": 4,
            "weight": 0.019139
          },
          {
            "term": "http",
            "tf": 3,
            "weight": 0.014354
          }
        ],
        "unique_terms": 69,
        "total_terms": 209
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Re-scoring examples",
        "byte",
        "client",
        "full",
        "import",
        "limit",
        "qdrant",
        "qdrantclient",
        "query",
        "using",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.888265306122449,
      "overall": 0.7627551020408164
    }
  },
  {
    "text": "### Maximal Marginal Relevance (MMR)\n\n*Available as of v1.15.0*\n\nA useful algorithm to improve the diversity of the results is [Maximal Marginal Relevance (MMR)](https://www.cs.cmu.edu/~jgc/publication/The_Use_MMR_Diversity_Based_LTMIR_1998.pdf). It excels when the dataset has many redundant or very similar points for a query.\n\nMMR selects candidates iteratively, starting with the most relevant point (higher similarity to the query). For each next point, it selects the one that hasn’t been chosen yet which has the best combination of relevance and higher separation to the already selected points.\n\n$$ MMR = \\arg \\max\\_{D\\_i \\in R\\setminus S}\\[\\lambda sim(D\\_i, Q) - (1 - \\lambda)\\max\\_{D\\_j \\in S}sim(D\\_i, D\\_j)] $$\n\nWhere $R$ is the candidates set, $S$ is the selected set, $Q$ is the query vector, $sim$ is the similarity function, and $\\lambda = 1 - diversity$.\n\nThis is implemented in Qdrant as a parameter of a nearest neighbors query. You define the vector to get the nearest candidates, and a `diversity` parameter which controls the balance between relevance (0.0) and diversity (1.0).\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"nearest\": [0.01, 0.45, 0.67, ...], // search vector\n    \"mmr\": {\n      \"diversity\": 0.5, // 0.0 - relevance; 1.0 - diversity\n      \"candidates_limit\": 100 // num of candidates to preselect\n    }\n  },\n  \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.NearestQuery(\n        nearest=[0.01, 0.45, 0.67], # search vector\n        mmr=models.Mmr(\n            diversity=0.5, # 0.0 - relevance; 1.0 - diversity\n            candidates_limit=100, # num of candidates to preselect\n        )\n    ),\n    limit=10,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: {\n    nearest: [0.01, 0.45, 0.67, ...], // search vector\n    mmr: {\n      diversity: 0.5, // 0.0 - relevance; 1.0 - diversity\n      candidates_limit: 100 // num of candidates to preselect\n    }\n  },\n  limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;",
    "metadata": {
      "chunk_id": "2c49d1b91247-0024",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Maximal Marginal Relevance (MMR)"
      ],
      "heading_text": "Maximal Marginal Relevance (MMR)",
      "token_count": 708,
      "char_count": 2430,
      "start_char": 32766,
      "end_char": 35196,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6774509803921569,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.477313",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Maximal Marginal Relevance (MMR)",
      "chunk_hash": "2ba23e3c486869b2",
      "content_digest": "2ba23e3c486869b2",
      "chunk_length": 2430,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "diversity",
          "query",
          "mmr",
          "candidates",
          "client",
          "qdrant",
          "relevance",
          "limit",
          "vector",
          "nearest",
          "points",
          "and",
          "collection",
          "name",
          "qdrantclient",
          "use",
          "lambda",
          "sim",
          "http"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 16,
            "weight": 0.064257
          },
          {
            "term": "diversity",
            "tf": 11,
            "weight": 0.044177
          },
          {
            "term": "query",
            "tf": 11,
            "weight": 0.044177
          },
          {
            "term": "mmr",
            "tf": 9,
            "weight": 0.036145
          },
          {
            "term": "candidates",
            "tf": 9,
            "weight": 0.036145
          },
          {
            "term": "client",
            "tf": 9,
            "weight": 0.036145
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.032129
          },
          {
            "term": "relevance",
            "tf": 7,
            "weight": 0.028112
          },
          {
            "term": "limit",
            "tf": 6,
            "weight": 0.024096
          },
          {
            "term": "vector",
            "tf": 5,
            "weight": 0.02008
          },
          {
            "term": "nearest",
            "tf": 5,
            "weight": 0.02008
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.016064
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.016064
          },
          {
            "term": "collection",
            "tf": 4,
            "weight": 0.016064
          },
          {
            "term": "name",
            "tf": 4,
            "weight": 0.016064
          },
          {
            "term": "qdrantclient",
            "tf": 4,
            "weight": 0.016064
          },
          {
            "term": "use",
            "tf": 3,
            "weight": 0.012048
          },
          {
            "term": "lambda",
            "tf": 3,
            "weight": 0.012048
          },
          {
            "term": "sim",
            "tf": 3,
            "weight": 0.012048
          },
          {
            "term": "http",
            "tf": 3,
            "weight": 0.012048
          }
        ],
        "unique_terms": 111,
        "total_terms": 249
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Maximal Marginal Relevance (MMR)",
        "candidates",
        "client",
        "diversity",
        "limit",
        "mmr",
        "qdrant",
        "query",
        "relevance",
        "the",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6774509803921569,
      "overall": 0.7258169934640523
    }
  },
  {
    "text": "## Score boosting\n\n*Available as of v1.14.0*\n\nWhen introducing vector search to specific applications, sometimes business logic needs to be considered for ranking the final list of results.\n\nA quick example is [our own documentation search bar](https://github.com/qdrant/page-search). It has vectors for every part of the documentation site. If one were to perform a search by “just” using the vectors, all kinds of elements would be equally considered good results. However, when searching for documentation, we can establish a hierarchy of importance:\n\n`title > content > snippets`\n\nOne way to solve this is to weight the results based on the kind of element. For example, we can assign a higher weight to titles and content, and keep snippets unboosted.\n\nPseudocode would be something like:\n\n`score = score + (is_title * 0.5) + (is_content * 0.25)`\n\nQuery API can rescore points with custom formulas. They can be based on:\n\n- Dynamic payload values\n- Conditions\n- Scores of prefetches\n\nTo express the formula, the syntax uses objects to identify each element. Taking the documentation example, the request would look like this:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"query\": [0.2, 0.8, ...],  // <-- dense vector\n        \"limit\": 50\n    }\n    \"query\": {\n        \"formula\": {\n            \"sum\": [\n                \"$score\",\n                { \n                    \"mult\": [ \n                        0.5,\n                        { \n                            \"key\": \"tag\",\n                            \"match\": { \"any\": [\"h1\", \"h2\", \"h3\", \"h4\"] } \n                        } \n                    ]\n                },\n                {\n                    \"mult\": [\n                        0.25,\n                        { \n                            \"key\": \"tag\",\n                            \"match\": { \"any\": [\"p\", \"li\"] } \n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import models\n\n\ntag_boosted = client.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[0.2, 0.8, ...],  # <-- dense vector\n        limit=50\n    ),\n    query=models.FormulaQuery(\n        formula=models.SumExpression(sum=[\n            \"$score\",\n            models.MultExpression(mult=[0.5, models.FieldCondition(key=\"tag\", match=models.MatchAny(any=[\"h1\", \"h2\", \"h3\", \"h4\"]))]),\n            models.MultExpression(mult=[0.25, models.FieldCondition(key=\"tag\", match=models.MatchAny(any=[\"p\", \"li\"]))])\n        ]\n    ))\n)\n```",
    "metadata": {
      "chunk_id": "2c49d1b91247-0027",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Score boosting"
      ],
      "heading_text": "Score boosting",
      "token_count": 581,
      "char_count": 2573,
      "start_char": 37736,
      "end_char": 40309,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8964028776978419,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.487105",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Score boosting",
      "chunk_hash": "ddfc27d3b41196d8",
      "content_digest": "ddfc27d3b41196d8",
      "chunk_length": 2573,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "models",
          "the",
          "query",
          "score",
          "tag",
          "search",
          "for",
          "documentation",
          "can",
          "mult",
          "key",
          "match",
          "any",
          "vector",
          "results",
          "example",
          "would",
          "content",
          "points",
          "formula"
        ],
        "term_weights": [
          {
            "term": "models",
            "tf": 10,
            "weight": 0.046296
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.041667
          },
          {
            "term": "query",
            "tf": 7,
            "weight": 0.032407
          },
          {
            "term": "score",
            "tf": 5,
            "weight": 0.023148
          },
          {
            "term": "tag",
            "tf": 5,
            "weight": 0.023148
          },
          {
            "term": "search",
            "tf": 4,
            "weight": 0.018519
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.018519
          },
          {
            "term": "documentation",
            "tf": 4,
            "weight": 0.018519
          },
          {
            "term": "can",
            "tf": 4,
            "weight": 0.018519
          },
          {
            "term": "mult",
            "tf": 4,
            "weight": 0.018519
          },
          {
            "term": "key",
            "tf": 4,
            "weight": 0.018519
          },
          {
            "term": "match",
            "tf": 4,
            "weight": 0.018519
          },
          {
            "term": "any",
            "tf": 4,
            "weight": 0.018519
          },
          {
            "term": "vector",
            "tf": 3,
            "weight": 0.013889
          },
          {
            "term": "results",
            "tf": 3,
            "weight": 0.013889
          },
          {
            "term": "example",
            "tf": 3,
            "weight": 0.013889
          },
          {
            "term": "would",
            "tf": 3,
            "weight": 0.013889
          },
          {
            "term": "content",
            "tf": 3,
            "weight": 0.013889
          },
          {
            "term": "points",
            "tf": 3,
            "weight": 0.013889
          },
          {
            "term": "formula",
            "tf": 3,
            "weight": 0.013889
          }
        ],
        "unique_terms": 121,
        "total_terms": 216
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Score boosting",
        "can",
        "documentation",
        "for",
        "models",
        "mult",
        "query",
        "score",
        "search",
        "tag",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8964028776978419,
      "overall": 0.7988009592326138
    }
  },
  {
    "text": "### Boost points closer to user\n\nAnother example. Combine the score with how close the result is to a user.\n\nConsidering each point has an associated geo location, we can calculate the distance between the point and the request’s location.\n\nAssuming we have cosine scores in the prefetch, we can use a helper function to clamp the geographical distance between 0 and 1, by using a decay function. Once clamped, we can sum the score and the distance together. Pseudocode:\n\n`score = score + gauss_decay(distance)`\n\nIn this case we use a **gauss\\_decay** function.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": { \"query\": [0.2, 0.8, ...], \"limit\": 50 },\n    \"query\": {\n        \"formula\": {\n            \"sum\": [\n                \"$score\",\n                {\n                    \"gauss_decay\": {\n                        \"x\": {\n                            \"geo_distance\": {\n                                \"origin\": { \"lat\": 52.504043, \"lon\": 13.393236 }\n                                \"to\": \"geo.location\"\n                            }\n                        },\n                        \"scale\": 5000 // 5km\n                    }\n                }\n            ]\n        },\n        \"defaults\": { \"geo.location\": {\"lat\": 48.137154, \"lon\": 11.576124} }\n    }\n}\n```\n\n```python\nfrom qdrant_client import models\n\n\ngeo_boosted = client.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[0.2, 0.8, ...],  # <-- dense vector\n        limit=50\n    ),\n    query=models.FormulaQuery(\n        formula=models.SumExpression(sum=[\n            \"$score\",\n            models.GaussDecayExpression(\n                gauss_decay=models.DecayParamsExpression(\n                    x=models.GeoDistance(\n                        geo_distance=models.GeoDistanceParams(\n                            origin=models.GeoPoint(\n                                lat=52.504043,\n                                lon=13.393236\n                            ),  # Berlin\n                            to=\"geo.location\"\n                        )\n                    ),\n                    scale=5000  # 5km\n                )\n            )\n        ]),\n        defaults={\"geo.location\": models.GeoPoint(lat=48.137154, lon=11.576124)}  # Munich\n    )\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });",
    "metadata": {
      "chunk_id": "2c49d1b91247-0032",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Boost points closer to user"
      ],
      "heading_text": "Boost points closer to user",
      "token_count": 529,
      "char_count": 2417,
      "start_char": 49077,
      "end_char": 51494,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.9041666666666668,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.506588",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Boost points closer to user",
      "chunk_hash": "dc6e2faba310b993",
      "content_digest": "dc6e2faba310b993",
      "chunk_length": 2417,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "models",
          "the",
          "geo",
          "score",
          "location",
          "distance",
          "query",
          "decay",
          "prefetch",
          "gauss",
          "lat",
          "lon",
          "client",
          "points",
          "can",
          "and",
          "function",
          "sum",
          "collection",
          "name"
        ],
        "term_weights": [
          {
            "term": "models",
            "tf": 10,
            "weight": 0.05291
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.047619
          },
          {
            "term": "geo",
            "tf": 8,
            "weight": 0.042328
          },
          {
            "term": "score",
            "tf": 6,
            "weight": 0.031746
          },
          {
            "term": "location",
            "tf": 6,
            "weight": 0.031746
          },
          {
            "term": "distance",
            "tf": 6,
            "weight": 0.031746
          },
          {
            "term": "query",
            "tf": 6,
            "weight": 0.031746
          },
          {
            "term": "decay",
            "tf": 5,
            "weight": 0.026455
          },
          {
            "term": "prefetch",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "gauss",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "lat",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "lon",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "points",
            "tf": 3,
            "weight": 0.015873
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.015873
          },
          {
            "term": "and",
            "tf": 3,
            "weight": 0.015873
          },
          {
            "term": "function",
            "tf": 3,
            "weight": 0.015873
          },
          {
            "term": "sum",
            "tf": 3,
            "weight": 0.015873
          },
          {
            "term": "collection",
            "tf": 3,
            "weight": 0.015873
          },
          {
            "term": "name",
            "tf": 3,
            "weight": 0.015873
          }
        ],
        "unique_terms": 92,
        "total_terms": 189
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Boost points closer to user",
        "decay",
        "distance",
        "gauss",
        "geo",
        "location",
        "models",
        "prefetch",
        "query",
        "score",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.9041666666666668,
      "overall": 0.7680555555555556
    }
  },
  {
    "text": "### Time-based score boosting  Or combine the score with the information on how “fresh” the result is. It’s applicable to (news) articles and in general many other different types of searches (think of the “newest” filter you use in applications). To implement time-based score boosting, you’ll need each point to have a datetime field in its payload, e.g., when the item was uploaded or last updated. Then we can calculate the time difference in seconds between this payload value and the current time, our `target`. With an exponential decay function, perfect for use cases with time, as freshness is a very quickly lost quality, we can convert this time difference into a value between 0 and 1, then add it to the original score to prioritise fresh results. `score = score + exp_decay(current_time - point_time)`  That’s how it will look for an application where, after 1 day, results start being only half-relevant (so get a score of 0.5): ```http POST /collections/{collection_name}/points/query {     \"prefetch\": {         \"query\": [0.2, 0.8, ...],  // <-- dense vector         \"limit\": 50     },     \"query\": {         \"formula\": {             \"sum\": [                 \"$score\", // the final score = score + exp_decay(target_time - x_time)                 {                     \"exp_decay\": {                         \"x\": {                             \"datetime_key\": \"update_time\" // payload key                         },                         \"target\": {                             \"datetime\": \"YYYY-MM-DDT00:00:00Z\" // current datetime                         },                         \"scale\": 86400, // 1 day in seconds                         \"midpoint\": 0.5 // if item's \"update_time\" is more than 1 day apart from current datetime, relevance score is less than 0.5                     }                 }             ]         }     } } ``` ```python from qdrant_client import models   time_boosted = client.query_points(     collection_name=\"{collection_name}\",     prefetch=models.Prefetch(         query=[0.2, 0.8, ...],  # <-- dense vector         limit=50     ),     query=models.FormulaQuery(         formula=models.SumExpression(             sum=[                 \"$score\", # the final score = score + exp_decay(target_time - x_time)                 models.ExpDecayExpression(                     exp_decay=models.DecayParamsExpression(                         x=models.DatetimeKeyExpression(                             datetime_key=\"upload_time\" # payload key                          ),                         target=models.DatetimeExpression(                             datetime=\"YYYY-MM-DDT00:00:00Z\" # current datetime                         ),                         scale=86400, # 1 day in seconds                         midpoint=0.5 # if item's \"update_time\" is more than 1 day apart from current datetime, relevance score is less than 0.5                     )                 )             ]         )     ) ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  const time_boosted = await client.query(collectionName, {   prefetch: {     query: [0.2, 0.8, ...], // <-- dense vector     limit: 50   },    query: {       formula: {           sum: [ //  the final score = score + exp_decay(target_time - x_time)               \"$score\",               {                   exp_decay: {                       x: {                           datetime_key: \"update_time\" // payload key                       },                       target: {                           datetime: \"YYYY-MM-DDT00:00:00Z\" // current datetime                       },                       midpoint: 0.5,                       scale: 86400 // 1 day in seconds                   }               }           ]       }   } }); ``` ```rust",
    "metadata": {
      "chunk_id": "2c49d1b91247-0036",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 36,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Time-based score boosting"
      ],
      "heading_text": "Time-based score boosting",
      "token_count": 812,
      "char_count": 3838,
      "start_char": 57950,
      "end_char": 61788,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.655421686746988,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.506588",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Time-based score boosting",
      "chunk_hash": "2c6bc13c308154bb",
      "content_digest": "2c6bc13c308154bb",
      "chunk_length": 3838,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "time",
          "score",
          "datetime",
          "the",
          "query",
          "decay",
          "models",
          "current",
          "target",
          "exp",
          "day",
          "key",
          "payload",
          "client",
          "seconds",
          "prefetch",
          "update",
          "than",
          "from",
          "with"
        ],
        "term_weights": [
          {
            "term": "time",
            "tf": 21,
            "weight": 0.06422
          },
          {
            "term": "score",
            "tf": 18,
            "weight": 0.055046
          },
          {
            "term": "datetime",
            "tf": 12,
            "weight": 0.036697
          },
          {
            "term": "the",
            "tf": 11,
            "weight": 0.033639
          },
          {
            "term": "query",
            "tf": 9,
            "weight": 0.027523
          },
          {
            "term": "decay",
            "tf": 8,
            "weight": 0.024465
          },
          {
            "term": "models",
            "tf": 8,
            "weight": 0.024465
          },
          {
            "term": "current",
            "tf": 7,
            "weight": 0.021407
          },
          {
            "term": "target",
            "tf": 7,
            "weight": 0.021407
          },
          {
            "term": "exp",
            "tf": 7,
            "weight": 0.021407
          },
          {
            "term": "day",
            "tf": 6,
            "weight": 0.018349
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.018349
          },
          {
            "term": "payload",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "seconds",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "prefetch",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "update",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "than",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "from",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.009174
          }
        ],
        "unique_terms": 137,
        "total_terms": 327
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Time-based score boosting",
        "current",
        "datetime",
        "decay",
        "exp",
        "models",
        "query",
        "score",
        "target",
        "the",
        "time"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.655421686746988,
      "overall": 0.785140562248996
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Hybrid and Multi-Stage Queries](#hybrid-and-multi-stage-queries.md)    - [Hybrid Search](#hybrid-search.md)    - [Multi-stage queries](#multi-stage-queries.md)      - [Re-scoring examples](#re-scoring-examples.md)     - [Maximal Marginal Relevance (MMR)](#maximal-marginal-relevance-mmr.md)    - [Score boosting](#score-boosting.md)      - [Boost points closer to user](#boost-points-closer-to-user.md)     - [Time-based score boosting](#time-based-score-boosting.md)    - [Grouping](#grouping.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "2c49d1b91247-0041",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 41,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 295,
      "char_count": 1063,
      "start_char": 72443,
      "end_char": 73506,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5237662337662338,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.516990",
      "document_id": "2c49d1b91247",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "57d14d507530b9bf",
      "content_digest": "57d14d507530b9bf",
      "chunk_length": 1063,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "page",
          "github",
          "qdrant",
          "landing",
          "hybrid",
          "queries",
          "https",
          "com",
          "multi",
          "stage",
          "score",
          "boosting",
          "this",
          "you",
          "edit",
          "tree",
          "master",
          "content",
          "documentation",
          "concepts"
        ],
        "term_weights": [
          {
            "term": "page",
            "tf": 7,
            "weight": 0.053435
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.053435
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "hybrid",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "queries",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "multi",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "stage",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "score",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "boosting",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.022901
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "edit",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "tree",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "master",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "content",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "concepts",
            "tf": 2,
            "weight": 0.015267
          }
        ],
        "unique_terms": 52,
        "total_terms": 131
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "com",
        "github",
        "https",
        "hybrid",
        "landing",
        "multi",
        "page",
        "qdrant",
        "queries",
        "stage"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5237662337662338,
      "overall": 0.6745887445887445
    }
  }
]