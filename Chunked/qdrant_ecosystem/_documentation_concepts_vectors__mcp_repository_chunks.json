[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1033,
      "end_char": 3001,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.040030",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3683,
      "end_char": 5671,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.040030",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5673,
      "end_char": 5984,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.040030",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6361,
      "end_char": 8329,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.040030",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9011,
      "end_char": 10999,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.043634",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "# Vectors\n\nVectors (or embeddings) are the core concept of the Qdrant Vector Search engine. Vectors define the similarity between objects in the vector space.\n\nIf a pair of vectors are similar in vector space, it means that the objects they represent are similar in some way.\n\nFor example, if you have a collection of images, you can represent each image as a vector. If two images are similar, their vectors will be close to each other in the vector space.\n\nIn order to obtain a vector representation of an object, you need to apply a vectorization algorithm to the object. Usually, this algorithm is a neural network that converts the object into a fixed-size vector.\n\nThe neural network is usually [trained](https://qdrant.tech/articles/metric-learning-tips/) on a pairs or [triplets](https://qdrant.tech/articles/triplet-loss/) of similar and dissimilar objects, so it learns to recognize a specific type of similarity.\n\nBy using this property of vectors, you can explore your data in a number of ways; e.g. by searching for similar objects, clustering objects, and more.",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0010",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Vectors"
      ],
      "heading_text": "Vectors",
      "token_count": 230,
      "char_count": 1075,
      "start_char": 11441,
      "end_char": 12516,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6649999999999999,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.043634",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Vectors",
      "chunk_hash": "f5e945fff11ea807",
      "content_digest": "f5e945fff11ea807",
      "chunk_length": 1075,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "vector",
          "vectors",
          "objects",
          "similar",
          "are",
          "you",
          "qdrant",
          "space",
          "object",
          "similarity",
          "that",
          "represent",
          "for",
          "images",
          "can",
          "each",
          "algorithm",
          "usually",
          "this"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 9,
            "weight": 0.066667
          },
          {
            "term": "vector",
            "tf": 7,
            "weight": 0.051852
          },
          {
            "term": "vectors",
            "tf": 6,
            "weight": 0.044444
          },
          {
            "term": "objects",
            "tf": 5,
            "weight": 0.037037
          },
          {
            "term": "similar",
            "tf": 5,
            "weight": 0.037037
          },
          {
            "term": "are",
            "tf": 4,
            "weight": 0.02963
          },
          {
            "term": "you",
            "tf": 4,
            "weight": 0.02963
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.022222
          },
          {
            "term": "space",
            "tf": 3,
            "weight": 0.022222
          },
          {
            "term": "object",
            "tf": 3,
            "weight": 0.022222
          },
          {
            "term": "similarity",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "represent",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "images",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "each",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "algorithm",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "usually",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.014815
          }
        ],
        "unique_terms": 80,
        "total_terms": 135
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Vectors",
        "are",
        "object",
        "objects",
        "qdrant",
        "similar",
        "space",
        "the",
        "vector",
        "vectors",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6649999999999999,
      "overall": 0.7549999999999999
    }
  },
  {
    "text": "### Dense Vectors\n\nThis is the most common type of vector. It is a simple list of numbers, it has a fixed length and each element of the list is a floating-point number.\n\nIt looks like this:\n\n```json\n\n// A piece of a real-world dense vector\n[\n    -0.013052909,\n    0.020387933,\n    -0.007869,\n    -0.11111383,\n    -0.030188112,\n    -0.0053388323,\n    0.0010654867,\n    0.072027855,\n    -0.04167721,\n    0.014839341,\n    -0.032948174,\n    -0.062975034,\n    -0.024837125,\n    ....\n]\n```\n\nThe majority of neural networks create dense vectors, so you can use them with Qdrant without any additional processing. Although compatible with most embedding models out there, Qdrant has been tested with the following [verified embedding providers](https://qdrant.tech/documentation/embeddings/).",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0012",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Dense Vectors"
      ],
      "heading_text": "Dense Vectors",
      "token_count": 226,
      "char_count": 785,
      "start_char": 12718,
      "end_char": 13503,
      "semantic_score": 0.6,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.518,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.046462",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Dense Vectors",
      "chunk_hash": "fa9e93052cf668cf",
      "content_digest": "fa9e93052cf668cf",
      "chunk_length": 785,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "dense",
          "with",
          "qdrant",
          "vectors",
          "this",
          "most",
          "vector",
          "list",
          "has",
          "embedding",
          "common",
          "type",
          "simple",
          "numbers",
          "fixed",
          "length",
          "and",
          "each",
          "element"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 4,
            "weight": 0.047619
          },
          {
            "term": "dense",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "most",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "list",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "has",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "embedding",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "common",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "numbers",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "fixed",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "length",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "each",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "element",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 68,
        "total_terms": 84
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Dense Vectors",
        "dense",
        "has",
        "list",
        "most",
        "qdrant",
        "the",
        "this",
        "vector",
        "vectors",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.518,
      "overall": 0.706
    }
  },
  {
    "text": "### Sparse Vectors\n\nSparse vectors are a special type of vectors. Mathematically, they are the same as dense vectors, but they contain many zeros so they are stored in a special format.\n\nSparse vectors in Qdrant don’t have a fixed length, as it is dynamically allocated during vector insertion. The amount of non-zero values in sparse vectors is currently limited to u32 datatype range (4294967295).\n\nIn order to define a sparse vector, you need to provide a list of non-zero elements and their indexes.\n\n```json\n// A sparse vector with 4 non-zero elements\n{\n    \"indexes\": [1, 3, 5, 7],\n    \"values\": [0.1, 0.2, 0.3, 0.4]\n}\n```\n\nSparse vectors in Qdrant are kept in special storage and indexed in a separate index, so their configuration is different from dense vectors.\n\nTo create a collection with sparse vectors:\n\n```http\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n}\n```\n\n```bash\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n  }'\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(),\n    },\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  sparse_vectors: {\n    text: { },\n  },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\n};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vector_config = SparseVectorsConfigBuilder::default();\n\nsparse_vector_config.add_named_vector_params(\"text\", SparseVectorParamsBuilder::default());\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .sparse_vectors_config(sparse_vector_config),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setSparseVectorsConfig(\n                SparseVectorConfig.newBuilder()\n                    .putMap(\"text\", SparseVectorParams.getDefaultInstance()))\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tsparseVectorsConfig: (\"text\", new SparseVectorParams())\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Sparse Vectors"
      ],
      "heading_text": "Sparse Vectors",
      "token_count": 802,
      "char_count": 3289,
      "start_char": 13505,
      "end_char": 16794,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6878688524590164,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.053459",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Sparse Vectors",
      "chunk_hash": "0e06d6e3352948a0",
      "content_digest": "0e06d6e3352948a0",
      "chunk_length": 3289,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "sparse",
          "vectors",
          "collection",
          "name",
          "import",
          "qdrantclient",
          "vector",
          "text",
          "localhost",
          "config",
          "collections",
          "new",
          "are",
          "from",
          "http",
          "sparsevectorparams",
          "6334",
          "grpc"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 23,
            "weight": 0.072555
          },
          {
            "term": "qdrant",
            "tf": 20,
            "weight": 0.063091
          },
          {
            "term": "sparse",
            "tf": 16,
            "weight": 0.050473
          },
          {
            "term": "vectors",
            "tf": 15,
            "weight": 0.047319
          },
          {
            "term": "collection",
            "tf": 11,
            "weight": 0.0347
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.025237
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.025237
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.025237
          },
          {
            "term": "vector",
            "tf": 7,
            "weight": 0.022082
          },
          {
            "term": "text",
            "tf": 7,
            "weight": 0.022082
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.022082
          },
          {
            "term": "config",
            "tf": 7,
            "weight": 0.022082
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.015773
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.015773
          },
          {
            "term": "are",
            "tf": 4,
            "weight": 0.012618
          },
          {
            "term": "from",
            "tf": 4,
            "weight": 0.012618
          },
          {
            "term": "http",
            "tf": 4,
            "weight": 0.012618
          },
          {
            "term": "sparsevectorparams",
            "tf": 4,
            "weight": 0.012618
          },
          {
            "term": "6334",
            "tf": 4,
            "weight": 0.012618
          },
          {
            "term": "grpc",
            "tf": 4,
            "weight": 0.012618
          }
        ],
        "unique_terms": 122,
        "total_terms": 317
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Sparse Vectors",
        "client",
        "collection",
        "import",
        "name",
        "qdrant",
        "qdrantclient",
        "sparse",
        "text",
        "vector",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6878688524590164,
      "overall": 0.7292896174863387
    }
  },
  {
    "text": "### Multivectors\n\n**Available as of v1.10.0**\n\nQdrant supports the storing of a variable amount of same-shaped dense vectors in a single point. This means that instead of a single dense vector, you can upload a matrix of dense vectors.\n\nThe length of the matrix is fixed, but the number of vectors in the matrix can be different for each point.\n\nMultivectors look like this:\n\n```json\n// A multivector of size 4\n\"vector\": [\n    [-0.013,  0.020, -0.007, -0.111],\n    [-0.030, -0.055,  0.001,  0.072],\n    [-0.041,  0.014, -0.032, -0.062],\n    ....\n]\n```\n\nThere are two scenarios where multivectors are useful:\n\n- **Multiple representation of the same object** - For example, you can store multiple embeddings for pictures of the same object, taken from different angles. This approach assumes that the payload is same for all vectors.\n- **Late interaction embeddings** - Some text embedding models can output multiple vectors for a single text. For example, a family of models such as ColBERT output a relatively small vector for each token in the text.\n\nIn order to use multivectors, we need to specify a function that will be used to compare between matrices of vectors\n\nCurrently, Qdrant supports `max_sim` function, which is defined as a sum of maximum similarities between each pair of vectors in the matrices.\n\n$$ score = \\sum\\_{i=1}^{N} \\max\\_{j=1}^{M} \\text{Sim}(\\text{vectorA}\\_i, \\text{vectorB}\\_j) $$\n\nWhere $N$ is the number of vectors in the first matrix, $M$ is the number of vectors in the second matrix, and $\\text{Sim}$ is a similarity function, for example, cosine similarity.\n\nTo use multivectors, create a collection with the following configuration:\n\n```http\nPUT collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\",\n    \"multivector_config\": {\n      \"comparator\": \"max_sim\"\n    }\n  }\n}\n```\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=128,\n        distance=models.Distance.COSINE,\n        multivector_config=models.MultiVectorConfig(\n            comparator=models.MultiVectorComparator.MAX_SIM\n        ),\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 128,\n    distance: \"Cosine\",\n    multivector_config: {\n      comparator: \"max_sim\"\n    }\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, VectorParamsBuilder,\n    MultiVectorComparator, MultiVectorConfigBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(\n                VectorParamsBuilder::new(100, Distance::Cosine)\n                    .multivector_config(\n                        MultiVectorConfigBuilder::new(MultiVectorComparator::MaxSim)\n                    ),\n            ),\n    )\n    .await?;\n```",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Multivectors"
      ],
      "heading_text": "Multivectors",
      "token_count": 797,
      "char_count": 3189,
      "start_char": 22808,
      "end_char": 25997,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8775,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.064961",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Multivectors",
      "chunk_hash": "eb56a5325ade18a7",
      "content_digest": "eb56a5325ade18a7",
      "chunk_length": 3189,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "vectors",
          "client",
          "qdrant",
          "for",
          "collection",
          "text",
          "models",
          "sim",
          "distance",
          "config",
          "multivectors",
          "matrix",
          "multivector",
          "max",
          "cosine",
          "name",
          "same",
          "can",
          "size"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 15,
            "weight": 0.045872
          },
          {
            "term": "vectors",
            "tf": 13,
            "weight": 0.039755
          },
          {
            "term": "client",
            "tf": 10,
            "weight": 0.030581
          },
          {
            "term": "qdrant",
            "tf": 9,
            "weight": 0.027523
          },
          {
            "term": "for",
            "tf": 8,
            "weight": 0.024465
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.024465
          },
          {
            "term": "text",
            "tf": 7,
            "weight": 0.021407
          },
          {
            "term": "models",
            "tf": 7,
            "weight": 0.021407
          },
          {
            "term": "sim",
            "tf": 6,
            "weight": 0.018349
          },
          {
            "term": "distance",
            "tf": 6,
            "weight": 0.018349
          },
          {
            "term": "config",
            "tf": 6,
            "weight": 0.018349
          },
          {
            "term": "multivectors",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "matrix",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "multivector",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "max",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "cosine",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "name",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "same",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "can",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "size",
            "tf": 4,
            "weight": 0.012232
          }
        ],
        "unique_terms": 147,
        "total_terms": 327
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Multivectors",
        "client",
        "collection",
        "distance",
        "for",
        "models",
        "qdrant",
        "sim",
        "text",
        "the",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8775,
      "overall": 0.7924999999999999
    }
  },
  {
    "text": "## Named Vectors\n\nIn Qdrant, you can store multiple vectors of different sizes and [types](#vector-types.md) in the same data [point](https://qdrant.tech/documentation/concepts/points/). This is useful when you need to define your data with multiple embeddings to represent different features or modalities (e.g., image, text or video).\n\nTo store different vectors for each point, you need to create separate named vector spaces in the [collection](https://qdrant.tech/documentation/concepts/collections/). You can define these vector spaces during collection creation and manage them independently.\n\nEach vector should have a unique name. Vectors can represent different modalities and you can use different embedding models to generate them.\n\nTo create a collection with named vectors, you need to specify a configuration for each vector:\n\n```http\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"image\": {\n      \"size\": 4,\n      \"distance\": \"Dot\"\n    },\n    \"text\": {\n      \"size\": 5,\n      \"distance\": \"Cosine\"\n    }\n  },\n  \"sparse_vectors\": {\n    \"text-sparse\": {}\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={\n        \"image\": models.VectorParams(size=4, distance=models.Distance.DOT),\n        \"text\": models.VectorParams(size=5, distance=models.Distance.COSINE),\n    },\n    sparse_vectors_config={\"text-sparse\": models.SparseVectorParams()},\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n    vectors: {\n        image: { size: 4, distance: \"Dot\" },\n        text: { size: 5, distance: \"Cosine\" },\n    },\n    sparse_vectors: {\n        text_sparse: {}\n    }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\n    VectorParamsBuilder, VectorsConfigBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut vector_config = VectorsConfigBuilder::default();\nvector_config.add_named_vector_params(\"text\", VectorParamsBuilder::new(5, Distance::Dot));\nvector_config.add_named_vector_params(\"image\", VectorParamsBuilder::new(4, Distance::Cosine));\n\nlet mut sparse_vectors_config = SparseVectorsConfigBuilder::default();\nsparse_vectors_config\n    .add_named_vector_params(\"text-sparse\", SparseVectorParamsBuilder::default());\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(vector_config)\n            .sparse_vectors_config(sparse_vectors_config),\n    )\n    .await?;\n```\n\n```java\nimport java.util.Map;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParamsMap;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0023",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Named Vectors"
      ],
      "heading_text": "Named Vectors",
      "token_count": 767,
      "char_count": 3310,
      "start_char": 33723,
      "end_char": 37033,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.6793357933579336,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.076918",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Named Vectors",
      "chunk_hash": "6f109a564e6a1569",
      "content_digest": "6f109a564e6a1569",
      "chunk_length": 3310,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "vectors",
          "vector",
          "distance",
          "import",
          "sparse",
          "config",
          "collection",
          "text",
          "collections",
          "models",
          "grpc",
          "named",
          "you",
          "name",
          "size",
          "different",
          "image",
          "qdrantclient"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.054913
          },
          {
            "term": "client",
            "tf": 19,
            "weight": 0.054913
          },
          {
            "term": "vectors",
            "tf": 16,
            "weight": 0.046243
          },
          {
            "term": "vector",
            "tf": 12,
            "weight": 0.034682
          },
          {
            "term": "distance",
            "tf": 12,
            "weight": 0.034682
          },
          {
            "term": "import",
            "tf": 12,
            "weight": 0.034682
          },
          {
            "term": "sparse",
            "tf": 11,
            "weight": 0.031792
          },
          {
            "term": "config",
            "tf": 11,
            "weight": 0.031792
          },
          {
            "term": "collection",
            "tf": 10,
            "weight": 0.028902
          },
          {
            "term": "text",
            "tf": 9,
            "weight": 0.026012
          },
          {
            "term": "collections",
            "tf": 9,
            "weight": 0.026012
          },
          {
            "term": "models",
            "tf": 7,
            "weight": 0.020231
          },
          {
            "term": "grpc",
            "tf": 7,
            "weight": 0.020231
          },
          {
            "term": "named",
            "tf": 6,
            "weight": 0.017341
          },
          {
            "term": "you",
            "tf": 6,
            "weight": 0.017341
          },
          {
            "term": "name",
            "tf": 6,
            "weight": 0.017341
          },
          {
            "term": "size",
            "tf": 6,
            "weight": 0.017341
          },
          {
            "term": "different",
            "tf": 5,
            "weight": 0.014451
          },
          {
            "term": "image",
            "tf": 5,
            "weight": 0.014451
          },
          {
            "term": "qdrantclient",
            "tf": 5,
            "weight": 0.014451
          }
        ],
        "unique_terms": 105,
        "total_terms": 346
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Named Vectors",
        "client",
        "collection",
        "config",
        "distance",
        "import",
        "qdrant",
        "sparse",
        "text",
        "vector",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.6793357933579336,
      "overall": 0.6931119311193111
    }
  },
  {
    "text": "## Datatypes\n\nNewest versions of embeddings models generate vectors with very large dimentionalities. With OpenAI’s `text-embedding-3-large` embedding model, the dimensionality can go up to 3072.\n\nThe amount of memory required to store such vectors grows linearly with the dimensionality, so it is important to choose the right datatype for the vectors.\n\nThe choice between datatypes is a trade-off between memory consumption and precision of vectors.\n\nQdrant supports a number of datatypes for both dense and sparse vectors:\n\n**Float32**\n\nThis is the default datatype for vectors in Qdrant. It is a 32-bit (4 bytes) floating-point number. The standard OpenAI embedding of 1536 dimensionality will require 6KB of memory to store in Float32.\n\nYou don’t need to specify the datatype for vectors in Qdrant, as it is set to Float32 by default.\n\n**Float16**\n\nThis is a 16-bit (2 bytes) floating-point number. It is also known as half-precision float. Intuitively, it looks like this:\n\n```text\nfloat32 -> float16 delta (float32 - float16).abs\n\n0.79701585 -> 0.796875   delta 0.00014084578\n0.7850789  -> 0.78515625 delta 0.00007736683\n0.7775044  -> 0.77734375 delta 0.00016063452\n0.85776305 -> 0.85791016 delta 0.00014710426\n0.6616839  -> 0.6616211  delta 0.000062823296\n```\n\nThe main advantage of Float16 is that it requires half the memory of Float32, while having virtually no impact on the quality of vector search.\n\nTo use Float16, you need to specify the datatype for vectors in the collection configuration:\n\n```http\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\",\n    \"datatype\": \"float16\" // <-- For dense vectors\n  },\n  \"sparse_vectors\": {\n    \"text\": {\n      \"index\": {\n        \"datatype\": \"float16\" // <-- And for sparse vectors \n      }\n    }\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=128,\n        distance=models.Distance.COSINE,\n        datatype=models.Datatype.FLOAT16\n    ),\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            index=models.SparseIndexParams(datatype=models.Datatype.FLOAT16)\n        ),\n    },\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 128,\n    distance: \"Cosine\",\n    datatype: \"float16\"\n  },\n  sparse_vectors: {\n    text: {\n      index: {\n        datatype: \"float16\"\n      }\n    }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Datatype, Distance, SparseIndexConfigBuilder, SparseVectorParamsBuilder, SparseVectorsConfigBuilder, VectorParamsBuilder\n};\nuse qdrant_client::Qdrant;",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0029",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Datatypes"
      ],
      "heading_text": "Datatypes",
      "token_count": 753,
      "char_count": 2889,
      "start_char": 45371,
      "end_char": 48260,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6773529411764705,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.078114",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Datatypes",
      "chunk_hash": "ced32664c4f39b56",
      "content_digest": "ced32664c4f39b56",
      "chunk_length": 2889,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "vectors",
          "the",
          "datatype",
          "float16",
          "qdrant",
          "models",
          "client",
          "for",
          "float32",
          "delta",
          "collection",
          "text",
          "sparse",
          "distance",
          "memory",
          "name",
          "qdrantclient",
          "datatypes",
          "with",
          "embedding"
        ],
        "term_weights": [
          {
            "term": "vectors",
            "tf": 16,
            "weight": 0.054422
          },
          {
            "term": "the",
            "tf": 14,
            "weight": 0.047619
          },
          {
            "term": "datatype",
            "tf": 13,
            "weight": 0.044218
          },
          {
            "term": "float16",
            "tf": 11,
            "weight": 0.037415
          },
          {
            "term": "qdrant",
            "tf": 9,
            "weight": 0.030612
          },
          {
            "term": "models",
            "tf": 8,
            "weight": 0.027211
          },
          {
            "term": "client",
            "tf": 8,
            "weight": 0.027211
          },
          {
            "term": "for",
            "tf": 7,
            "weight": 0.02381
          },
          {
            "term": "float32",
            "tf": 6,
            "weight": 0.020408
          },
          {
            "term": "delta",
            "tf": 6,
            "weight": 0.020408
          },
          {
            "term": "collection",
            "tf": 6,
            "weight": 0.020408
          },
          {
            "term": "text",
            "tf": 5,
            "weight": 0.017007
          },
          {
            "term": "sparse",
            "tf": 5,
            "weight": 0.017007
          },
          {
            "term": "distance",
            "tf": 5,
            "weight": 0.017007
          },
          {
            "term": "memory",
            "tf": 4,
            "weight": 0.013605
          },
          {
            "term": "name",
            "tf": 4,
            "weight": 0.013605
          },
          {
            "term": "qdrantclient",
            "tf": 4,
            "weight": 0.013605
          },
          {
            "term": "datatypes",
            "tf": 3,
            "weight": 0.010204
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.010204
          },
          {
            "term": "embedding",
            "tf": 3,
            "weight": 0.010204
          }
        ],
        "unique_terms": 135,
        "total_terms": 294
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Datatypes",
        "client",
        "datatype",
        "delta",
        "float16",
        "float32",
        "for",
        "models",
        "qdrant",
        "the",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6773529411764705,
      "overall": 0.72578431372549
    }
  },
  {
    "text": "## Quantization\n\nApart from changing the datatype of the original vectors, Qdrant can create quantized representations of vectors alongside the original ones. This quantized representation can be used to quickly select candidates for rescoring with the original vectors or even used directly for search.\n\nQuantization is applied in the background, during the optimization process.\n\nMore information about the quantization process can be found in the [Quantization](https://qdrant.tech/documentation/guides/quantization/) section.",
    "metadata": {
      "chunk_id": "8298efe4f9cb-0034",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Quantization"
      ],
      "heading_text": "Quantization",
      "token_count": 99,
      "char_count": 529,
      "start_char": 56508,
      "end_char": 57037,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7004477611940298,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:39.089217",
      "document_id": "8298efe4f9cb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Quantization",
      "chunk_hash": "9ace86b1f02bb020",
      "content_digest": "9ace86b1f02bb020",
      "chunk_length": 529,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "quantization",
          "original",
          "vectors",
          "can",
          "qdrant",
          "quantized",
          "used",
          "for",
          "process",
          "apart",
          "from",
          "changing",
          "datatype",
          "create",
          "representations",
          "alongside",
          "ones",
          "this",
          "representation"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 8,
            "weight": 0.126984
          },
          {
            "term": "quantization",
            "tf": 5,
            "weight": 0.079365
          },
          {
            "term": "original",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "quantized",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "used",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "process",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "apart",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "changing",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "datatype",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "create",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "representations",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "alongside",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "ones",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "representation",
            "tf": 1,
            "weight": 0.015873
          }
        ],
        "unique_terms": 41,
        "total_terms": 63
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Quantization",
        "can",
        "for",
        "original",
        "process",
        "qdrant",
        "quantization",
        "quantized",
        "the",
        "used",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7004477611940298,
      "overall": 0.7668159203980099
    }
  }
]