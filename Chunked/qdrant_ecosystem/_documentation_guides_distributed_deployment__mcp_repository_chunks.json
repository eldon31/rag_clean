[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "25122e454c1e-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1048,
      "end_char": 3016,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.364086",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "25122e454c1e-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3698,
      "end_char": 5686,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.365490",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "25122e454c1e-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5688,
      "end_char": 5999,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.365892",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "25122e454c1e-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6376,
      "end_char": 8344,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.366761",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "25122e454c1e-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9026,
      "end_char": 11014,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.367896",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)  - [Documentation](https://qdrant.tech/documentation/) - - [Guides](https://qdrant.tech/documentation/guides/) - - Distributed Deployment",
    "metadata": {
      "chunk_id": "25122e454c1e-0009",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 117,
      "char_count": 449,
      "start_char": 11016,
      "end_char": 11465,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7000000000000001,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.368319",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "589274c7fcb9cb98",
      "content_digest": "589274c7fcb9cb98",
      "chunk_length": 449,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "documentation",
          "tech",
          "faq",
          "fundamentals",
          "database",
          "optimization",
          "guides",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases",
          "distributed",
          "deployment"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.208333
          },
          {
            "term": "https",
            "tf": 6,
            "weight": 0.125
          },
          {
            "term": "documentation",
            "tf": 6,
            "weight": 0.125
          },
          {
            "term": "tech",
            "tf": 5,
            "weight": 0.104167
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.083333
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.0625
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "guides",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "distributed",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "deployment",
            "tf": 1,
            "weight": 0.020833
          }
        ],
        "unique_terms": 17,
        "total_terms": 48
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "guides",
        "https",
        "optimization",
        "qdrant",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7000000000000001,
      "overall": 0.7666666666666666
    }
  },
  {
    "text": "## How many Qdrant nodes should I run? The ideal number of Qdrant nodes depends on how much you value cost-saving, resilience, and performance/scalability in relation to each other. - **Prioritizing cost-saving**: If cost is most important to you, run a single Qdrant node. This is not recommended for production environments. Drawbacks:    - Resilience: Users will experience downtime during node restarts, and recovery is not possible unless you have backups or snapshots. - Performance: Limited to the resources of a single server. - **Prioritizing resilience**: If resilience is most important to you, run a Qdrant cluster with three or more nodes and two or more shard replicas. Clusters with three or more nodes and replication can perform all operations even while one node is down. Additionally, they gain performance benefits from load-balancing and they can recover from the permanent loss of one node without the need for backups or snapshots (but backups are still strongly recommended). This is most recommended for production environments. Drawbacks:    - Cost: Larger clusters are more costly than smaller clusters, which is the only drawback of this configuration. - **Balancing cost, resilience, and performance**: Running a two-node Qdrant cluster with replicated shards allows the cluster to respond to most read/write requests even when one node is down, such as during maintenance events. Having two nodes also means greater performance than a single-node cluster while still being cheaper than a three-node cluster. Drawbacks:    - Resilience (uptime): The cluster cannot perform operations on collections when one node is down. Those operations require >50% of nodes to be running, so this is only possible in a 3+ node cluster. Since creating, editing, and deleting collections are usually rare operations, many users find this drawback to be negligible. - Resilience (data integrity): If the data on one of the two nodes is permanently lost or corrupted, it cannot be recovered aside from snapshots or backups. Only 3+ node clusters can recover from the permanent loss of a single node since recovery operations require >50% of the cluster to be healthy. - Cost: Replicating your shards requires storing two copies of your data. - Performance: The maximum performance of a Qdrant cluster increases as you add more nodes. In summary, single-node clusters are best for non-production workloads, replicated 3+ node clusters are the gold standard, and replicated 2-node clusters strike a good balance.",
    "metadata": {
      "chunk_id": "25122e454c1e-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "How many Qdrant nodes should I run?"
      ],
      "heading_text": "How many Qdrant nodes should I run?",
      "token_count": 509,
      "char_count": 2522,
      "start_char": 11728,
      "end_char": 14250,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6438775510204082,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.369258",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "How many Qdrant nodes should I run?",
      "chunk_hash": "57a6b9732ffbfeff",
      "content_digest": "57a6b9732ffbfeff",
      "chunk_length": 2522,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "node",
          "the",
          "cluster",
          "nodes",
          "and",
          "resilience",
          "performance",
          "clusters",
          "qdrant",
          "cost",
          "you",
          "single",
          "this",
          "more",
          "two",
          "operations",
          "one",
          "are",
          "most",
          "for"
        ],
        "term_weights": [
          {
            "term": "node",
            "tf": 15,
            "weight": 0.046729
          },
          {
            "term": "the",
            "tf": 13,
            "weight": 0.040498
          },
          {
            "term": "cluster",
            "tf": 9,
            "weight": 0.028037
          },
          {
            "term": "nodes",
            "tf": 8,
            "weight": 0.024922
          },
          {
            "term": "and",
            "tf": 8,
            "weight": 0.024922
          },
          {
            "term": "resilience",
            "tf": 7,
            "weight": 0.021807
          },
          {
            "term": "performance",
            "tf": 7,
            "weight": 0.021807
          },
          {
            "term": "clusters",
            "tf": 7,
            "weight": 0.021807
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.018692
          },
          {
            "term": "cost",
            "tf": 6,
            "weight": 0.018692
          },
          {
            "term": "you",
            "tf": 5,
            "weight": 0.015576
          },
          {
            "term": "single",
            "tf": 5,
            "weight": 0.015576
          },
          {
            "term": "this",
            "tf": 5,
            "weight": 0.015576
          },
          {
            "term": "more",
            "tf": 5,
            "weight": 0.015576
          },
          {
            "term": "two",
            "tf": 5,
            "weight": 0.015576
          },
          {
            "term": "operations",
            "tf": 5,
            "weight": 0.015576
          },
          {
            "term": "one",
            "tf": 5,
            "weight": 0.015576
          },
          {
            "term": "are",
            "tf": 5,
            "weight": 0.015576
          },
          {
            "term": "most",
            "tf": 4,
            "weight": 0.012461
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.012461
          }
        ],
        "unique_terms": 146,
        "total_terms": 321
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "How many Qdrant nodes should I run?",
        "and",
        "cluster",
        "clusters",
        "cost",
        "node",
        "nodes",
        "performance",
        "qdrant",
        "resilience",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6438775510204082,
      "overall": 0.7812925170068027
    }
  },
  {
    "text": "## Enabling distributed mode in self-hosted Qdrant\n\nTo enable distributed deployment - enable the cluster mode in the [configuration](https://qdrant.tech/documentation/guides/configuration/) or using the ENV variable: `QDRANT__CLUSTER__ENABLED=true`.\n\n```yaml\ncluster:\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n  enabled: true\n  # Configuration of the inter-cluster communication\n  p2p:\n    # Port for internal communication between peers\n    port: 6335\n\n  # Configuration related to distributed consensus algorithm\n  consensus:\n    # How frequently peers should ping each other.\n    # Setting this parameter to lower value will allow consensus\n    # to detect disconnected node earlier, but too frequent\n    # tick period may create significant network and CPU overhead.\n    # We encourage you NOT to change this parameter unless you know what you are doing.\n    tick_period_ms: 100\n```\n\nBy default, Qdrant will use port `6335` for its internal communication. All peers should be accessible on this port from within the cluster, but make sure to isolate this port from outside access, as it might be used to perform write operations.\n\nAdditionally, you must provide the `--uri` flag to the first peer so it can tell other nodes how it should be reached:\n\n```bash\n./qdrant --uri 'http://qdrant_node_1:6335'\n```\n\nSubsequent peers in a cluster must know at least one node of the existing cluster to synchronize through it with the rest of the cluster.\n\nTo do this, they need to be provided with a bootstrap URL:\n\n```bash\n./qdrant --bootstrap 'http://qdrant_node_1:6335'\n```\n\nThe URL of the new peers themselves will be calculated automatically from the IP address of their request. But it is also possible to provide them individually using the `--uri` argument.\n\n```text\nUSAGE:\n    qdrant [OPTIONS]\n\nOPTIONS:\n        --bootstrap <URI>\n            Uri of the peer to bootstrap from in case of multi-peer deployment. If not specified -\n            this peer will be considered as a first in a new deployment\n\n        --uri <URI>\n            Uri of this peer. Other peers should be able to reach it by this uri.\n\n            This value has to be supplied if this is the first peer in a new deployment.\n\n            In case this is not the first peer and it bootstraps the value is optional. If not\n            supplied then qdrant will take internal grpc port from config and derive the IP address\n            of this peer on bootstrap peer (receiving side)\n```\n\nAfter a successful synchronization you can observe the state of the cluster through the [REST API](https://api.qdrant.tech/master/api-reference/distributed/cluster-status):\n\n```http\nGET /cluster\n```\n\nExample result:\n\n```json\n{\n  \"result\": {\n    \"status\": \"enabled\",\n    \"peer_id\": 11532566549086892000,\n    \"peers\": {\n      \"9834046559507417430\": {\n        \"uri\": \"http://172.18.0.3:6335/\"\n      },\n      \"11532566549086892528\": {\n        \"uri\": \"http://qdrant_node_1:6335/\"\n      }\n    },\n    \"raft_info\": {\n      \"term\": 1,\n      \"commit\": 4,\n      \"pending_operations\": 1,\n      \"leader\": 11532566549086892000,\n      \"role\": \"Leader\"\n    }\n  },\n  \"status\": \"ok\",\n  \"time\": 5.731e-06\n}\n```\n\nNote that enabling distributed mode does not automatically replicate your data. See the section on [making use of a new distributed Qdrant cluster](#making-use-of-a-new-distributed-qdrant-cluster.md) for the next steps.",
    "metadata": {
      "chunk_id": "25122e454c1e-0012",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Enabling distributed mode in self-hosted Qdrant"
      ],
      "heading_text": "Enabling distributed mode in self-hosted Qdrant",
      "token_count": 821,
      "char_count": 3398,
      "start_char": 14265,
      "end_char": 17663,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.855531453362256,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.370613",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Enabling distributed mode in self-hosted Qdrant",
      "chunk_hash": "e1d7a91446dc6ac0",
      "content_digest": "e1d7a91446dc6ac0",
      "chunk_length": 3398,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "qdrant",
          "cluster",
          "this",
          "uri",
          "peer",
          "distributed",
          "peers",
          "port",
          "6335",
          "deployment",
          "will",
          "node",
          "you",
          "not",
          "from",
          "http",
          "bootstrap",
          "new",
          "mode"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 24,
            "weight": 0.061381
          },
          {
            "term": "qdrant",
            "tf": 15,
            "weight": 0.038363
          },
          {
            "term": "cluster",
            "tf": 13,
            "weight": 0.033248
          },
          {
            "term": "this",
            "tf": 12,
            "weight": 0.030691
          },
          {
            "term": "uri",
            "tf": 11,
            "weight": 0.028133
          },
          {
            "term": "peer",
            "tf": 10,
            "weight": 0.025575
          },
          {
            "term": "distributed",
            "tf": 8,
            "weight": 0.02046
          },
          {
            "term": "peers",
            "tf": 7,
            "weight": 0.017903
          },
          {
            "term": "port",
            "tf": 6,
            "weight": 0.015345
          },
          {
            "term": "6335",
            "tf": 6,
            "weight": 0.015345
          },
          {
            "term": "deployment",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "will",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "node",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "you",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "not",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "from",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "http",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "bootstrap",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.012788
          },
          {
            "term": "mode",
            "tf": 4,
            "weight": 0.01023
          }
        ],
        "unique_terms": 185,
        "total_terms": 391
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "6335",
        "Enabling distributed mode in self-hosted Qdrant",
        "cluster",
        "distributed",
        "peer",
        "peers",
        "port",
        "qdrant",
        "the",
        "this",
        "uri"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.855531453362256,
      "overall": 0.885177151120752
    }
  },
  {
    "text": "## Enabling distributed mode in Qdrant Cloud\n\nFor best results, first ensure your cluster is running Qdrant v1.7.4 or higher. Older versions of Qdrant do support distributed mode, but improvements in v1.7.4 make distributed clusters more resilient during outages.\n\nIn the [Qdrant Cloud console](https://cloud.qdrant.io/), click “Scale Up” to increase your cluster size to >1. Qdrant Cloud configures the distributed mode settings automatically.\n\nAdditionally, Qdrant Cloud also offers the ability to automatically rebalance and to reshard your collections, which is not available in self-hosted Qdrant. See the [Resharding](https://qdrant.tech/documentation/cloud/cluster-scaling/#resharding) and [Shard Rebalancing](https://qdrant.tech/documentation/cloud/configure-cluster/#shard-rebalancing) sections in for more details.\n\nAfter the scale-up process completes, you will have a new empty node running alongside your existing node(s). To replicate data into this new empty node, see the next section.",
    "metadata": {
      "chunk_id": "25122e454c1e-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Enabling distributed mode in Qdrant Cloud"
      ],
      "heading_text": "Enabling distributed mode in Qdrant Cloud",
      "token_count": 229,
      "char_count": 1001,
      "start_char": 17665,
      "end_char": 18666,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5004838709677419,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.371011",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Enabling distributed mode in Qdrant Cloud",
      "chunk_hash": "5b0b19e4954f79b2",
      "content_digest": "5b0b19e4954f79b2",
      "chunk_length": 1001,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "cloud",
          "the",
          "distributed",
          "your",
          "cluster",
          "mode",
          "https",
          "node",
          "for",
          "running",
          "more",
          "scale",
          "automatically",
          "and",
          "see",
          "resharding",
          "tech",
          "documentation",
          "shard"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.080645
          },
          {
            "term": "cloud",
            "tf": 7,
            "weight": 0.056452
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.048387
          },
          {
            "term": "distributed",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "your",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "cluster",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "mode",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "node",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "running",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "more",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "scale",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "automatically",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "see",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "resharding",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "tech",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "shard",
            "tf": 2,
            "weight": 0.016129
          }
        ],
        "unique_terms": 75,
        "total_terms": 124
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Enabling distributed mode in Qdrant Cloud",
        "cloud",
        "cluster",
        "distributed",
        "for",
        "https",
        "mode",
        "node",
        "qdrant",
        "the",
        "your"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5004838709677419,
      "overall": 0.7001612903225807
    }
  },
  {
    "text": "### Choosing the right number of shards\n\nWhen you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster when the collection was created. The `shard_number` cannot be changed without recreating the collection.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 300,\n      \"distance\": \"Cosine\"\n    },\n    \"shard_number\": 6\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n    shard_number=6,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n    vectors: {\n        size: 300,\n        distance: \"Cosine\",\n    },\n    shard_number: 6,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(300, Distance::Cosine))\n            .shard_number(6),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(300)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setShardNumber(6)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\tshardNumber: 6\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     300,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tShardNumber: qdrant.PtrOf(uint32(6)),\n})\n```\n\nTo ensure all nodes in your cluster are evenly utilized, the number of shards must be a multiple of the number of nodes you are currently running in your cluster.\n\n> Aside: Advanced use cases such as multitenancy may require an uneven distribution of shards. See [Multitenancy](https://qdrant.tech/articles/multitenancy/).\n\nWe recommend creating at least 2 shards per node to allow future expansion without having to re-shard. [Resharding](#resharding.md) is possible when using our cloud offering, but should be avoided if hosting elsewhere as it would require creating a new collection.\n\nIf you anticipate a lot of growth, we recommend 12 shards since you can expand from 1 node up to 2, 3, 6, and 12 nodes without having to re-shard. Having more than 12 shards in a small cluster may not be worth the performance overhead.\n\nShards are evenly distributed across all existing nodes when a collection is first created, but Qdrant does not automatically rebalance shards if your cluster size or replication factor changes (since this is an expensive operation on large clusters). See the next section for how to move shards after scaling operations.",
    "metadata": {
      "chunk_id": "25122e454c1e-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Choosing the right number of shards"
      ],
      "heading_text": "Choosing the right number of shards",
      "token_count": 994,
      "char_count": 4232,
      "start_char": 21937,
      "end_char": 26169,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8820638820638822,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.373643",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Choosing the right number of shards",
      "chunk_hash": "63934b180e96826d",
      "content_digest": "63934b180e96826d",
      "chunk_length": 4232,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "collection",
          "distance",
          "number",
          "the",
          "shards",
          "shard",
          "import",
          "name",
          "qdrantclient",
          "300",
          "cosine",
          "new",
          "size",
          "localhost",
          "nodes",
          "cluster",
          "collections",
          "vectorparams"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.06338
          },
          {
            "term": "client",
            "tf": 25,
            "weight": 0.058685
          },
          {
            "term": "collection",
            "tf": 16,
            "weight": 0.037559
          },
          {
            "term": "distance",
            "tf": 12,
            "weight": 0.028169
          },
          {
            "term": "number",
            "tf": 11,
            "weight": 0.025822
          },
          {
            "term": "the",
            "tf": 10,
            "weight": 0.023474
          },
          {
            "term": "shards",
            "tf": 10,
            "weight": 0.023474
          },
          {
            "term": "shard",
            "tf": 9,
            "weight": 0.021127
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.021127
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.018779
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.018779
          },
          {
            "term": "300",
            "tf": 7,
            "weight": 0.016432
          },
          {
            "term": "cosine",
            "tf": 7,
            "weight": 0.016432
          },
          {
            "term": "new",
            "tf": 7,
            "weight": 0.016432
          },
          {
            "term": "size",
            "tf": 6,
            "weight": 0.014085
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.014085
          },
          {
            "term": "nodes",
            "tf": 5,
            "weight": 0.011737
          },
          {
            "term": "cluster",
            "tf": 5,
            "weight": 0.011737
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.011737
          },
          {
            "term": "vectorparams",
            "tf": 5,
            "weight": 0.011737
          }
        ],
        "unique_terms": 167,
        "total_terms": 426
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Choosing the right number of shards",
        "client",
        "collection",
        "distance",
        "import",
        "name",
        "number",
        "qdrant",
        "shard",
        "shards",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8820638820638822,
      "overall": 0.8273546273546274
    }
  },
  {
    "text": "### Moving shards\n\n*Available as of v0.9.0*\n\nQdrant allows moving shards between nodes in the cluster and removing nodes from the cluster. This functionality unlocks the ability to dynamically scale the cluster size without downtime. It also allows you to upgrade or migrate nodes without downtime.\n\nIf your cluster is running in Qdrant Cloud, shards are balanced across the cluster nodes automatically. For more information see the [Configuring Cloud Clusters](https://qdrant.tech/documentation/cloud/configure-cluster/#shard-rebalancing) and [Cloud Cluster Scaling](https://qdrant.tech/documentation/cloud/cluster-scaling/) documentation.\n\nQdrant provides the information regarding the current shard distribution in the cluster with the [Collection Cluster info API](https://api.qdrant.tech/master/api-reference/distributed/collection-cluster-info).\n\nUse the [Update collection cluster setup API](https://api.qdrant.tech/master/api-reference/distributed/update-collection-cluster) to initiate the shard transfer:\n\n```http\nPOST /collections/{collection_name}/cluster\n{\n    \"move_shard\": {\n        \"shard_id\": 0,\n        \"from_peer_id\": 381894127,\n        \"to_peer_id\": 467122995\n    }\n}\n```\n\nYou likely want to select a specific [shard transfer method](#shard-transfer-method.md) to get desired performance and guarantees.\n\nAfter the transfer is initiated, the service will process it based on the used [transfer method](#shard-transfer-method.md) keeping both shards in sync. Once the transfer is completed, the old shard is deleted from the source node.\n\nIn case you want to downscale the cluster, you can move all shards away from a peer and then remove the peer using the [remove peer API](https://api.qdrant.tech/master/api-reference/distributed/remove-peer).\n\n```http\nDELETE /cluster/peer/{peer_id}\n```\n\nAfter that, Qdrant will exclude the node from the consensus, and the instance will be ready for shutdown.",
    "metadata": {
      "chunk_id": "25122e454c1e-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Moving shards"
      ],
      "heading_text": "Moving shards",
      "token_count": 414,
      "char_count": 1916,
      "start_char": 26673,
      "end_char": 28589,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.5082909090909091,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.374437",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Moving shards",
      "chunk_hash": "e4c29df5bce51781",
      "content_digest": "e4c29df5bce51781",
      "chunk_length": 1916,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "cluster",
          "qdrant",
          "shard",
          "api",
          "peer",
          "transfer",
          "shards",
          "and",
          "from",
          "cloud",
          "https",
          "tech",
          "collection",
          "nodes",
          "you",
          "method",
          "documentation",
          "master",
          "reference"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 24,
            "weight": 0.097166
          },
          {
            "term": "cluster",
            "tf": 16,
            "weight": 0.064777
          },
          {
            "term": "qdrant",
            "tf": 9,
            "weight": 0.036437
          },
          {
            "term": "shard",
            "tf": 9,
            "weight": 0.036437
          },
          {
            "term": "api",
            "tf": 9,
            "weight": 0.036437
          },
          {
            "term": "peer",
            "tf": 8,
            "weight": 0.032389
          },
          {
            "term": "transfer",
            "tf": 7,
            "weight": 0.02834
          },
          {
            "term": "shards",
            "tf": 5,
            "weight": 0.020243
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.020243
          },
          {
            "term": "from",
            "tf": 5,
            "weight": 0.020243
          },
          {
            "term": "cloud",
            "tf": 5,
            "weight": 0.020243
          },
          {
            "term": "https",
            "tf": 5,
            "weight": 0.020243
          },
          {
            "term": "tech",
            "tf": 5,
            "weight": 0.020243
          },
          {
            "term": "collection",
            "tf": 5,
            "weight": 0.020243
          },
          {
            "term": "nodes",
            "tf": 4,
            "weight": 0.016194
          },
          {
            "term": "you",
            "tf": 4,
            "weight": 0.016194
          },
          {
            "term": "method",
            "tf": 4,
            "weight": 0.016194
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.012146
          },
          {
            "term": "master",
            "tf": 3,
            "weight": 0.012146
          },
          {
            "term": "reference",
            "tf": 3,
            "weight": 0.012146
          }
        ],
        "unique_terms": 109,
        "total_terms": 247
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Moving shards",
        "and",
        "api",
        "cluster",
        "from",
        "peer",
        "qdrant",
        "shard",
        "shards",
        "the",
        "transfer"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.5082909090909091,
      "overall": 0.7360969696969697
    }
  },
  {
    "text": "### User-defined sharding\n\n*Available as of v1.7.0*\n\nQdrant allows you to specify the shard for each point individually. This feature is useful if you want to control the shard placement of your data, so that operations can hit only the subset of shards they actually need. In big clusters, this can significantly improve the performance of operations that do not require the whole collection to be scanned.\n\nA clear use-case for this feature is managing a multi-tenant collection, where each tenant (let it be a user or organization) is assumed to be segregated, so they can have their data stored in separate shards.\n\nTo enable user-defined sharding, set `sharding_method` to `custom` during collection creation:\n\n```http\nPUT /collections/{collection_name}\n{\n    \"shard_number\": 1,\n    \"sharding_method\": \"custom\"\n    // ... other collection parameters\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    shard_number=1,\n    sharding_method=models.ShardingMethod.CUSTOM,\n    # ... other collection parameters\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n    shard_number: 1,\n    sharding_method: \"custom\",\n    // ... other collection parameters\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, ShardingMethod, VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(300, Distance::Cosine))\n            .shard_number(1)\n            .sharding_method(ShardingMethod::Custom.into()),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ShardKeyFactory.shardKey;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.ShardingMethod;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            // ... other collection parameters\n            .setShardNumber(1)\n            .setShardingMethod(ShardingMethod.Custom)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\t// ... other collection parameters\n\tshardNumber: 1,\n\tshardingMethod: ShardingMethod.Custom\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\t// ... other collection parameters\n\tShardNumber:    qdrant.PtrOf(uint32(1)),\n\tShardingMethod: qdrant.ShardingMethod_Custom.Enum(),\n})\n```\n\nIn this mode, the `shard_number` means the number of shards per shard key, where points will be distributed evenly. For example, if you have 10 shard keys and a collection config with these settings:\n\n```json\n{\n    \"shard_number\": 1,\n    \"sharding_method\": \"custom\",\n    \"replication_factor\": 2\n}\n```\n\nThen you will have `1 * 10 * 2 = 20` total physical shards in the collection.\n\nPhysical shards require a large amount of resources, so make sure your custom sharding key has a low cardinality.\n\nFor large cardinality keys, it is recommended to use [partition by payload](https://qdrant.tech/documentation/guides/multiple-partitions/#partition-by-payload) instead.\n\nNow you need to create custom shards ([API reference](https://api.qdrant.tech/api-reference/distributed/create-shard-key#request)):\n\n```http\nPUT /collections/{collection_name}/shards\n{\n  \"shard_key\": \"{shard_key}\"\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models",
    "metadata": {
      "chunk_id": "25122e454c1e-0020",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User-defined sharding"
      ],
      "heading_text": "User-defined sharding",
      "token_count": 1024,
      "char_count": 4226,
      "start_char": 28591,
      "end_char": 32817,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8764705882352941,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.379675",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "User-defined sharding",
      "chunk_hash": "d79f362bcb32f568",
      "content_digest": "d79f362bcb32f568",
      "chunk_length": 4226,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "collection",
          "shard",
          "custom",
          "sharding",
          "name",
          "import",
          "qdrantclient",
          "shardingmethod",
          "the",
          "shards",
          "number",
          "method",
          "other",
          "parameters",
          "localhost",
          "you",
          "new",
          "createcollection"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 25,
            "weight": 0.057339
          },
          {
            "term": "client",
            "tf": 25,
            "weight": 0.057339
          },
          {
            "term": "collection",
            "tf": 22,
            "weight": 0.050459
          },
          {
            "term": "shard",
            "tf": 13,
            "weight": 0.029817
          },
          {
            "term": "custom",
            "tf": 11,
            "weight": 0.025229
          },
          {
            "term": "sharding",
            "tf": 9,
            "weight": 0.020642
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.020642
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.020642
          },
          {
            "term": "qdrantclient",
            "tf": 9,
            "weight": 0.020642
          },
          {
            "term": "shardingmethod",
            "tf": 9,
            "weight": 0.020642
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.018349
          },
          {
            "term": "shards",
            "tf": 7,
            "weight": 0.016055
          },
          {
            "term": "number",
            "tf": 7,
            "weight": 0.016055
          },
          {
            "term": "method",
            "tf": 6,
            "weight": 0.013761
          },
          {
            "term": "other",
            "tf": 6,
            "weight": 0.013761
          },
          {
            "term": "parameters",
            "tf": 6,
            "weight": 0.013761
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.013761
          },
          {
            "term": "you",
            "tf": 5,
            "weight": 0.011468
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.011468
          },
          {
            "term": "createcollection",
            "tf": 5,
            "weight": 0.011468
          }
        ],
        "unique_terms": 169,
        "total_terms": 436
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User-defined sharding",
        "client",
        "collection",
        "custom",
        "import",
        "name",
        "qdrant",
        "qdrantclient",
        "shard",
        "sharding",
        "shardingmethod"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8764705882352941,
      "overall": 0.7921568627450979
    }
  },
  {
    "text": "### Shard transfer method  *Available as of v1.7.0*  There are different methods for transferring a shard, such as moving or replicating, to another node. Depending on what performance and guarantees you’d like to have and how you’d like to manage your cluster, you likely want to choose a specific method. Each method has its own pros and cons. Which is fastest depends on the size and state of a shard. Available shard transfer methods are:  - `stream_records`: *(default)* transfer by streaming just its records to the target node in batches. - `snapshot`: transfer including its index and quantized data by utilizing a [snapshot](https://qdrant.tech/documentation/concepts/snapshots/) automatically. - `wal_delta`: *(auto recovery default)* transfer by resolving [WAL](https://qdrant.tech/documentation/concepts/storage/#versioning) difference; the operations that were missed. Each has pros, cons and specific requirements, some of which are:  | Method:          | Stream records                               | Snapshot                                    | WAL delta                                 | | ---------------- | -------------------------------------------- | ------------------------------------------- | ----------------------------------------- | | **Version**      | v0.8.0+                                      | v1.7.0+                                     | v1.8.0+                                   | | **Target**       | New/existing shard                           | New/existing shard                          | Existing shard                            | | **Connectivity** | Internal gRPC API (6335)                     | REST API (6333) Internal gRPC API (6335)    | Internal gRPC API (6335)                  | | **HNSW index**   | Doesn’t transfer, will reindex on target.    | Does transfer, immediately ready on target. | Doesn’t transfer, may index on target.    | | **Quantization** | Doesn’t transfer, will requantize on target. | Does transfer, immediately ready on target. | Doesn’t transfer, may quantize on target. | | **Ordering**     | Unordered updates on target[1](#fn:1.md)     | Ordered updates on target[2](#fn:2.md)      | Ordered updates on target[2](#fn:2.md)    | | **Disk space**   | No extra required                            | Extra required for snapshot on both nodes   | No extra required                         |  To select a shard transfer method, specify the `method` like: ```http POST /collections/{collection_name}/cluster {     \"move_shard\": {         \"shard_id\": 0,         \"from_peer_id\": 381894127,         \"to_peer_id\": 467122995,         \"method\": \"snapshot\"     } } ``` The `stream_records` transfer method is the simplest available. It simply transfers all shard records in batches to the target node until it has transferred all of them, keeping both shards in sync. It will also make sure the transferred shard indexing process is keeping up before performing a final switch. The method has two common disadvantages: 1. It does not transfer index or quantization data, meaning that the shard has to be optimized again on the new node, which can be very expensive. 2. The ordering guarantees are `weak`[1](#fn:1.md), which is not suitable for some applications. Because it is so simple, it’s also very robust, making it a reliable choice if the above cons are acceptable in your use case. If your cluster is unstable and out of resources, it’s probably best to use the `stream_records` transfer method, because it is unlikely to fail. The `snapshot` transfer method utilizes [snapshots](https://qdrant.tech/documentation/concepts/snapshots/) to transfer a shard. A snapshot is created automatically. It is then transferred and restored on the target node. After this is done, the snapshot is removed from both nodes. While the snapshot/transfer/restore operation is happening, the source node queues up all new operations. All queued updates are then sent in order to the target shard to bring it into the same state as the source. There are two important benefits: 1. It transfers index and quantization data, so that the shard does not have to be optimized again on the target node, making them immediately available. This way, Qdrant ensures that there will be no degradation in performance at the end of the transfer. Especially on large shards, this can give a huge performance improvement. 2. The ordering guarantees can be `strong`[2](#fn:2.md), required for some applications.",
    "metadata": {
      "chunk_id": "25122e454c1e-0023",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Shard transfer method"
      ],
      "heading_text": "Shard transfer method",
      "token_count": 945,
      "char_count": 4456,
      "start_char": 38911,
      "end_char": 43367,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6376053962900505,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.381999",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Shard transfer method",
      "chunk_hash": "2129008a5b0bf57a",
      "content_digest": "2129008a5b0bf57a",
      "chunk_length": 4456,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "transfer",
          "shard",
          "target",
          "method",
          "and",
          "snapshot",
          "are",
          "node",
          "records",
          "has",
          "index",
          "available",
          "for",
          "which",
          "stream",
          "qdrant",
          "that",
          "new",
          "api"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 27,
            "weight": 0.058824
          },
          {
            "term": "transfer",
            "tf": 19,
            "weight": 0.041394
          },
          {
            "term": "shard",
            "tf": 16,
            "weight": 0.034858
          },
          {
            "term": "target",
            "tf": 15,
            "weight": 0.03268
          },
          {
            "term": "method",
            "tf": 11,
            "weight": 0.023965
          },
          {
            "term": "and",
            "tf": 9,
            "weight": 0.019608
          },
          {
            "term": "snapshot",
            "tf": 9,
            "weight": 0.019608
          },
          {
            "term": "are",
            "tf": 7,
            "weight": 0.015251
          },
          {
            "term": "node",
            "tf": 7,
            "weight": 0.015251
          },
          {
            "term": "records",
            "tf": 6,
            "weight": 0.013072
          },
          {
            "term": "has",
            "tf": 5,
            "weight": 0.010893
          },
          {
            "term": "index",
            "tf": 5,
            "weight": 0.010893
          },
          {
            "term": "available",
            "tf": 4,
            "weight": 0.008715
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.008715
          },
          {
            "term": "which",
            "tf": 4,
            "weight": 0.008715
          },
          {
            "term": "stream",
            "tf": 4,
            "weight": 0.008715
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.008715
          },
          {
            "term": "that",
            "tf": 4,
            "weight": 0.008715
          },
          {
            "term": "new",
            "tf": 4,
            "weight": 0.008715
          },
          {
            "term": "api",
            "tf": 4,
            "weight": 0.008715
          }
        ],
        "unique_terms": 201,
        "total_terms": 459
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Shard transfer method",
        "and",
        "are",
        "method",
        "node",
        "records",
        "shard",
        "snapshot",
        "target",
        "the",
        "transfer"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6376053962900505,
      "overall": 0.7458684654300168
    }
  },
  {
    "text": "### Replication factor\n\nWhen you create a collection, you can control how many shard replicas you’d like to store by changing the `replication_factor`. By default, `replication_factor` is set to “1”, meaning no additional copy is maintained automatically. The default can be changed in the [Qdrant configuration](https://qdrant.tech/documentation/guides/configuration/#configuration-options). You can change that by setting the `replication_factor` when you create a collection.\n\nThe `replication_factor` can be updated for an existing collection, but the effect of this depends on how you’re running Qdrant. If you’re hosting the open source version of Qdrant yourself, changing the replication factor after collection creation doesn’t do anything. You can manually [create](#creating-new-shard-replicas.md) or drop shard replicas to achieve your desired replication factor. In Qdrant Cloud (including Hybrid Cloud, Private Cloud) your shards will automatically be replicated or dropped to match your configured replication factor.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"size\": 300,\n        \"distance\": \"Cosine\"\n    },\n    \"shard_number\": 6,\n    \"replication_factor\": 2\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n    shard_number=6,\n    replication_factor=2,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 300,\n    distance: \"Cosine\",\n  },\n  shard_number: 6,\n  replication_factor: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(300, Distance::Cosine))\n            .shard_number(6)\n            .replication_factor(2),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(300)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setShardNumber(6)\n            .setReplicationFactor(2)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\tshardNumber: 6,\n\treplicationFactor: 2\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     300,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tShardNumber:       qdrant.PtrOf(uint32(6)),\n\tReplicationFactor: qdrant.PtrOf(uint32(2)),\n})\n```\n\nThis code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.\n\nSince a replication factor of “2” would require twice as much storage space, it is advised to make sure the hardware can host the additional shard replicas beforehand.",
    "metadata": {
      "chunk_id": "25122e454c1e-0026",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Replication factor"
      ],
      "heading_text": "Replication factor",
      "token_count": 1009,
      "char_count": 4304,
      "start_char": 44776,
      "end_char": 49080,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8943548387096774,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.384896",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Replication factor",
      "chunk_hash": "28c8159c0634f8ca",
      "content_digest": "28c8159c0634f8ca",
      "chunk_length": 4304,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "collection",
          "replication",
          "factor",
          "distance",
          "the",
          "import",
          "you",
          "shard",
          "name",
          "qdrantclient",
          "new",
          "300",
          "cosine",
          "can",
          "localhost",
          "create",
          "collections",
          "size"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.072115
          },
          {
            "term": "client",
            "tf": 25,
            "weight": 0.060096
          },
          {
            "term": "collection",
            "tf": 15,
            "weight": 0.036058
          },
          {
            "term": "replication",
            "tf": 13,
            "weight": 0.03125
          },
          {
            "term": "factor",
            "tf": 13,
            "weight": 0.03125
          },
          {
            "term": "distance",
            "tf": 12,
            "weight": 0.028846
          },
          {
            "term": "the",
            "tf": 10,
            "weight": 0.024038
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.021635
          },
          {
            "term": "you",
            "tf": 8,
            "weight": 0.019231
          },
          {
            "term": "shard",
            "tf": 8,
            "weight": 0.019231
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.019231
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.019231
          },
          {
            "term": "new",
            "tf": 7,
            "weight": 0.016827
          },
          {
            "term": "300",
            "tf": 7,
            "weight": 0.016827
          },
          {
            "term": "cosine",
            "tf": 7,
            "weight": 0.016827
          },
          {
            "term": "can",
            "tf": 6,
            "weight": 0.014423
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.014423
          },
          {
            "term": "create",
            "tf": 5,
            "weight": 0.012019
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.012019
          },
          {
            "term": "size",
            "tf": 5,
            "weight": 0.012019
          }
        ],
        "unique_terms": 153,
        "total_terms": 416
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Replication factor",
        "client",
        "collection",
        "distance",
        "factor",
        "import",
        "qdrant",
        "replication",
        "shard",
        "the",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8943548387096774,
      "overall": 0.8314516129032258
    }
  },
  {
    "text": "### Node Failure Recovery  Sometimes hardware malfunctions might render some nodes of the Qdrant cluster unrecoverable. No system is immune to this. But several recovery scenarios allow qdrant to stay available for requests and even avoid performance degradation. Let’s walk through them from best to worst. **Recover with replicated collection**  If the number of failed nodes is less than the replication factor of the collection, then your cluster should still be able to perform read, search and update queries. Now, if the failed node restarts, consensus will trigger the replication process to update the recovering node with the newest updates it has missed. If the failed node never restarts, you can recover the lost shards if you have a 3+ node cluster. You cannot recover lost shards in smaller clusters because recovery operations go through [raft](#raft.md) which requires >50% of the nodes to be healthy. **Recreate node with replicated collections**  If a node fails and it is impossible to recover it, you should exclude the dead node from the consensus and create an empty node. To exclude failed nodes from the consensus, use [remove peer](https://api.qdrant.tech/master/api-reference/distributed/remove-peer) API. Apply the `force` flag if necessary. When you create a new node, make sure to attach it to the existing cluster by specifying `--bootstrap` CLI parameter with the URL of any of the running cluster nodes. Once the new node is ready and synchronized with the cluster, you might want to ensure that the collection shards are replicated enough. Remember that Qdrant will not automatically balance shards since this is an expensive operation. Use the [Replicate Shard Operation](https://api.qdrant.tech/master/api-reference/distributed/update-collection-cluster) to create another copy of the shard on the newly connected node. It’s worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery. Building a completely automatic process of collection scaling would require control over the cluster machines themself. Check out our [cloud solution](https://qdrant.to/cloud), where we made exactly that. **Recover from snapshot**  If there are no copies of data in the cluster, it is still possible to recover from a snapshot. Follow the same steps to detach failed node and create a new one in the cluster:  - To exclude failed nodes from the consensus, use [remove peer](https://api.qdrant.tech/master/api-reference/distributed/remove-peer) API. Apply the `force` flag if necessary. - Create a new node, making sure to attach it to the existing cluster by specifying the `--bootstrap` CLI parameter with the URL of any of the running cluster nodes. Snapshot recovery, used in single-node deployment, is different from cluster one. Consensus manages all metadata about all collections and does not require snapshots to recover it. But you can use snapshots to recover missing shards of the collections. Use the [Collection Snapshot Recovery API](https://qdrant.tech/documentation/concepts/snapshots/#recover-in-cluster-deployment) to do it. The service will download the specified snapshot of the collection and recover shards with data from it. Once all shards of the collection are recovered, the collection will become operational again.",
    "metadata": {
      "chunk_id": "25122e454c1e-0029",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Node Failure Recovery"
      ],
      "heading_text": "Node Failure Recovery",
      "token_count": 663,
      "char_count": 3317,
      "start_char": 50770,
      "end_char": 54087,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8434782608695652,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.386663",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Node Failure Recovery",
      "chunk_hash": "57aa318984a3aa21",
      "content_digest": "57aa318984a3aa21",
      "chunk_length": 3317,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "node",
          "cluster",
          "recover",
          "qdrant",
          "collection",
          "api",
          "and",
          "from",
          "nodes",
          "with",
          "you",
          "shards",
          "recovery",
          "failed",
          "create",
          "consensus",
          "use",
          "https",
          "snapshot"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 42,
            "weight": 0.095672
          },
          {
            "term": "node",
            "tf": 15,
            "weight": 0.034169
          },
          {
            "term": "cluster",
            "tf": 14,
            "weight": 0.031891
          },
          {
            "term": "recover",
            "tf": 10,
            "weight": 0.022779
          },
          {
            "term": "qdrant",
            "tf": 9,
            "weight": 0.020501
          },
          {
            "term": "collection",
            "tf": 9,
            "weight": 0.020501
          },
          {
            "term": "api",
            "tf": 9,
            "weight": 0.020501
          },
          {
            "term": "and",
            "tf": 8,
            "weight": 0.018223
          },
          {
            "term": "from",
            "tf": 8,
            "weight": 0.018223
          },
          {
            "term": "nodes",
            "tf": 7,
            "weight": 0.015945
          },
          {
            "term": "with",
            "tf": 7,
            "weight": 0.015945
          },
          {
            "term": "you",
            "tf": 7,
            "weight": 0.015945
          },
          {
            "term": "shards",
            "tf": 7,
            "weight": 0.015945
          },
          {
            "term": "recovery",
            "tf": 6,
            "weight": 0.013667
          },
          {
            "term": "failed",
            "tf": 6,
            "weight": 0.013667
          },
          {
            "term": "create",
            "tf": 6,
            "weight": 0.013667
          },
          {
            "term": "consensus",
            "tf": 5,
            "weight": 0.01139
          },
          {
            "term": "use",
            "tf": 5,
            "weight": 0.01139
          },
          {
            "term": "https",
            "tf": 5,
            "weight": 0.01139
          },
          {
            "term": "snapshot",
            "tf": 5,
            "weight": 0.01139
          }
        ],
        "unique_terms": 193,
        "total_terms": 439
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Node Failure Recovery",
        "and",
        "api",
        "cluster",
        "collection",
        "from",
        "node",
        "nodes",
        "qdrant",
        "recover",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8434782608695652,
      "overall": 0.8144927536231883
    }
  },
  {
    "text": "### Write consistency factor\n\nThe `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to 1 by default. It can be configured at the collection’s creation or when updating the collection parameters.\n\nThis value can range from 1 to the number of replicas you have for each shard.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"size\": 300,\n        \"distance\": \"Cosine\"\n    },\n    \"shard_number\": 6,\n    \"replication_factor\": 2,\n    \"write_consistency_factor\": 2\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n    shard_number=6,\n    replication_factor=2,\n    write_consistency_factor=2,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 300,\n    distance: \"Cosine\",\n  },\n  shard_number: 6,\n  replication_factor: 2,\n  write_consistency_factor: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(300, Distance::Cosine))\n            .shard_number(6)\n            .replication_factor(2)\n            .write_consistency_factor(2),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(300)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setShardNumber(6)\n            .setReplicationFactor(2)\n            .setWriteConsistencyFactor(2)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\tshardNumber: 6,\n\treplicationFactor: 2,\n\twriteConsistencyFactor: 2\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     300,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tShardNumber:            qdrant.PtrOf(uint32(6)),\n\tReplicationFactor:      qdrant.PtrOf(uint32(2)),\n\tWriteConsistencyFactor: qdrant.PtrOf(uint32(2)),\n})\n```\n\nWrite operations will fail if the number of active replicas is less than the `write_consistency_factor`. In this case, the client is expected to send the operation again to ensure a consistent state is reached.\n\nSetting the `write_consistency_factor` to a lower value may allow accepting writes even if there are unresponsive nodes. Unresponsive nodes are marked as dead and will automatically be recovered once available to ensure data consistency.\n\nThe configuration of the `write_consistency_factor` is important for adjusting the cluster’s behavior when some nodes go offline due to restarts, upgrades, or failures.",
    "metadata": {
      "chunk_id": "25122e454c1e-0032",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Write consistency factor"
      ],
      "heading_text": "Write consistency factor",
      "token_count": 1003,
      "char_count": 4248,
      "start_char": 57099,
      "end_char": 61347,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6934097421203438,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.390981",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Write consistency factor",
      "chunk_hash": "3d087e90ffbd82fb",
      "content_digest": "3d087e90ffbd82fb",
      "chunk_length": 4248,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "the",
          "factor",
          "collection",
          "distance",
          "write",
          "consistency",
          "import",
          "name",
          "qdrantclient",
          "number",
          "300",
          "cosine",
          "localhost",
          "new",
          "shard",
          "collections",
          "size",
          "vectorparams"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 27,
            "weight": 0.067839
          },
          {
            "term": "qdrant",
            "tf": 26,
            "weight": 0.065327
          },
          {
            "term": "the",
            "tf": 14,
            "weight": 0.035176
          },
          {
            "term": "factor",
            "tf": 13,
            "weight": 0.032663
          },
          {
            "term": "collection",
            "tf": 12,
            "weight": 0.030151
          },
          {
            "term": "distance",
            "tf": 12,
            "weight": 0.030151
          },
          {
            "term": "write",
            "tf": 11,
            "weight": 0.027638
          },
          {
            "term": "consistency",
            "tf": 10,
            "weight": 0.025126
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.022613
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.020101
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.020101
          },
          {
            "term": "number",
            "tf": 7,
            "weight": 0.017588
          },
          {
            "term": "300",
            "tf": 7,
            "weight": 0.017588
          },
          {
            "term": "cosine",
            "tf": 7,
            "weight": 0.017588
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.015075
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.015075
          },
          {
            "term": "shard",
            "tf": 5,
            "weight": 0.012563
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.012563
          },
          {
            "term": "size",
            "tf": 5,
            "weight": 0.012563
          },
          {
            "term": "vectorparams",
            "tf": 5,
            "weight": 0.012563
          }
        ],
        "unique_terms": 144,
        "total_terms": 398
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Write consistency factor",
        "client",
        "collection",
        "consistency",
        "distance",
        "factor",
        "import",
        "name",
        "qdrant",
        "the",
        "write"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6934097421203438,
      "overall": 0.7644699140401144
    }
  },
  {
    "text": "### Read consistency\n\nRead `consistency` can be specified for most read requests and will ensure that the returned result is consistent across cluster nodes.\n\n- `all` will query all nodes and return points, which present on all of them\n- `majority` will query all nodes and return points, which present on the majority of them\n- `quorum` will query randomly selected majority of nodes and return points, which present on all of them\n- `1`/`2`/`3`/etc - will query specified number of randomly selected nodes and return points which present on all of them\n- default `consistency` is `1`\n\n```http\nPOST /collections/{collection_name}/points/query?consistency=majority\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"city\",\n                \"match\": {\n                    \"value\": \"London\"\n                }\n            }\n        ]\n    },\n    \"params\": {\n        \"hnsw_ef\": 128,\n        \"exact\": false\n    },\n    \"limit\": 3\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(\n                    value=\"London\",\n                ),\n            )\n        ]\n    ),\n    search_params=models.SearchParams(hnsw_ef=128, exact=False),\n    limit=3,\n    consistency=\"majority\",\n)\n```\n\n```typescript\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    filter: {\n        must: [{ key: \"city\", match: { value: \"London\" } }],\n    },\n    params: {\n        hnsw_ef: 128,\n        exact: false,\n    },\n    limit: 3,\n    consistency: \"majority\",\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    read_consistency::Value, Condition, Filter, QueryPointsBuilder, ReadConsistencyType,\n    SearchParamsBuilder,\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )]))\n            .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false))\n            .read_consistency(Value::Type(ReadConsistencyType::Majority.into())),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.ReadConsistency;\nimport io.qdrant.client.grpc.Points.ReadConsistencyType;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build())\n                .setQuery(nearest(.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(SearchParams.newBuilder().setHnswEf(128).setExact(false).build())\n                .setLimit(3)\n                .setReadConsistency(\n                        ReadConsistency.newBuilder().setType(ReadConsistencyType.Majority).build())\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);",
    "metadata": {
      "chunk_id": "25122e454c1e-0034",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Read consistency"
      ],
      "heading_text": "Read consistency",
      "token_count": 946,
      "char_count": 3727,
      "start_char": 62446,
      "end_char": 66173,
      "semantic_score": 0.6,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6851063829787234,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.395229",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Read consistency",
      "chunk_hash": "4831adbcc78e4852",
      "content_digest": "4831adbcc78e4852",
      "chunk_length": 3727,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "query",
          "points",
          "filter",
          "import",
          "consistency",
          "majority",
          "grpc",
          "all",
          "collection",
          "name",
          "false",
          "build",
          "read",
          "and",
          "will",
          "nodes",
          "city",
          "value"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 21,
            "weight": 0.063636
          },
          {
            "term": "qdrant",
            "tf": 17,
            "weight": 0.051515
          },
          {
            "term": "query",
            "tf": 13,
            "weight": 0.039394
          },
          {
            "term": "points",
            "tf": 11,
            "weight": 0.033333
          },
          {
            "term": "filter",
            "tf": 9,
            "weight": 0.027273
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.027273
          },
          {
            "term": "consistency",
            "tf": 8,
            "weight": 0.024242
          },
          {
            "term": "majority",
            "tf": 8,
            "weight": 0.024242
          },
          {
            "term": "grpc",
            "tf": 7,
            "weight": 0.021212
          },
          {
            "term": "all",
            "tf": 6,
            "weight": 0.018182
          },
          {
            "term": "collection",
            "tf": 6,
            "weight": 0.018182
          },
          {
            "term": "name",
            "tf": 6,
            "weight": 0.018182
          },
          {
            "term": "false",
            "tf": 6,
            "weight": 0.018182
          },
          {
            "term": "build",
            "tf": 6,
            "weight": 0.018182
          },
          {
            "term": "read",
            "tf": 5,
            "weight": 0.015152
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.015152
          },
          {
            "term": "will",
            "tf": 5,
            "weight": 0.015152
          },
          {
            "term": "nodes",
            "tf": 5,
            "weight": 0.015152
          },
          {
            "term": "city",
            "tf": 5,
            "weight": 0.015152
          },
          {
            "term": "value",
            "tf": 5,
            "weight": 0.015152
          }
        ],
        "unique_terms": 108,
        "total_terms": 330
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Read consistency",
        "all",
        "client",
        "consistency",
        "filter",
        "grpc",
        "import",
        "majority",
        "points",
        "qdrant",
        "query"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6851063829787234,
      "overall": 0.6950354609929077
    }
  },
  {
    "text": "### Write ordering\n\nWrite `ordering` can be specified for any write request to serialize it through a single “leader” node, which ensures that all write operations (issued with the same `ordering`) are performed and observed sequentially.\n\n- `weak` *(default)* ordering does not provide any additional guarantees, so write operations can be freely reordered.\n- `medium` ordering serializes all write operations through a dynamically elected leader, which might cause minor inconsistencies in case of leader change.\n- `strong` ordering serializes all write operations through the permanent leader, which provides strong consistency, but write operations may be unavailable if the leader is down.\n\nSome [shard transfer methods](#shard-transfer-method.md) may affect ordering guarantees.\n\n```http\nPUT /collections/{collection_name}/points?ordering=strong\n{\n    \"batch\": {\n        \"ids\": [1, 2, 3],\n        \"payloads\": [\n            {\"color\": \"red\"},\n            {\"color\": \"green\"},\n            {\"color\": \"blue\"}\n        ],\n        \"vectors\": [\n            [0.9, 0.1, 0.1],\n            [0.1, 0.9, 0.1],\n            [0.1, 0.1, 0.9]\n        ]\n    }\n}\n```\n\n```python\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=models.Batch(\n        ids=[1, 2, 3],\n        payloads=[\n            {\"color\": \"red\"},\n            {\"color\": \"green\"},\n            {\"color\": \"blue\"},\n        ],\n        vectors=[\n            [0.9, 0.1, 0.1],\n            [0.1, 0.9, 0.1],\n            [0.1, 0.1, 0.9],\n        ],\n    ),\n    ordering=models.WriteOrdering.STRONG,\n)\n```\n\n```typescript\nclient.upsert(\"{collection_name}\", {\n  batch: {\n    ids: [1, 2, 3],\n    payloads: [{ color: \"red\" }, { color: \"green\" }, { color: \"blue\" }],\n    vectors: [\n      [0.9, 0.1, 0.1],\n      [0.1, 0.9, 0.1],\n      [0.1, 0.1, 0.9],\n    ],\n  },\n  ordering: \"strong\",\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    PointStruct, UpsertPointsBuilder, WriteOrdering, WriteOrderingType\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![\n                PointStruct::new(1, vec![0.9, 0.1, 0.1], [(\"color\", \"red\".into())]),\n                PointStruct::new(2, vec![0.1, 0.9, 0.1], [(\"color\", \"green\".into())]),\n                PointStruct::new(3, vec![0.1, 0.1, 0.9], [(\"color\", \"blue\".into())]),\n            ],\n        )\n        .ordering(WriteOrdering {\n            r#type: WriteOrderingType::Strong.into(),\n        }),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.ValueFactory.value;\nimport static io.qdrant.client.VectorsFactory.vectors;\n\nimport io.qdrant.client.grpc.Points.PointStruct;\nimport io.qdrant.client.grpc.Points.UpsertPoints;\nimport io.qdrant.client.grpc.Points.WriteOrdering;\nimport io.qdrant.client.grpc.Points.WriteOrderingType;",
    "metadata": {
      "chunk_id": "25122e454c1e-0036",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 36,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Write ordering"
      ],
      "heading_text": "Write ordering",
      "token_count": 830,
      "char_count": 2980,
      "start_char": 67100,
      "end_char": 70080,
      "semantic_score": 0.6,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6836298932384341,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.399190",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Write ordering",
      "chunk_hash": "4a2ec79b15e65e12",
      "content_digest": "4a2ec79b15e65e12",
      "chunk_length": 2980,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "color",
          "qdrant",
          "ordering",
          "import",
          "write",
          "points",
          "strong",
          "leader",
          "operations",
          "collection",
          "name",
          "pointstruct",
          "red",
          "green",
          "blue",
          "vectors",
          "writeordering",
          "new",
          "vec"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 13,
            "weight": 0.050193
          },
          {
            "term": "color",
            "tf": 12,
            "weight": 0.046332
          },
          {
            "term": "qdrant",
            "tf": 12,
            "weight": 0.046332
          },
          {
            "term": "ordering",
            "tf": 11,
            "weight": 0.042471
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.034749
          },
          {
            "term": "write",
            "tf": 8,
            "weight": 0.030888
          },
          {
            "term": "points",
            "tf": 7,
            "weight": 0.027027
          },
          {
            "term": "strong",
            "tf": 6,
            "weight": 0.023166
          },
          {
            "term": "leader",
            "tf": 5,
            "weight": 0.019305
          },
          {
            "term": "operations",
            "tf": 5,
            "weight": 0.019305
          },
          {
            "term": "collection",
            "tf": 5,
            "weight": 0.019305
          },
          {
            "term": "name",
            "tf": 5,
            "weight": 0.019305
          },
          {
            "term": "pointstruct",
            "tf": 5,
            "weight": 0.019305
          },
          {
            "term": "red",
            "tf": 4,
            "weight": 0.015444
          },
          {
            "term": "green",
            "tf": 4,
            "weight": 0.015444
          },
          {
            "term": "blue",
            "tf": 4,
            "weight": 0.015444
          },
          {
            "term": "vectors",
            "tf": 4,
            "weight": 0.015444
          },
          {
            "term": "writeordering",
            "tf": 4,
            "weight": 0.015444
          },
          {
            "term": "new",
            "tf": 4,
            "weight": 0.015444
          },
          {
            "term": "vec",
            "tf": 4,
            "weight": 0.015444
          }
        ],
        "unique_terms": 108,
        "total_terms": 259
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Write ordering",
        "client",
        "color",
        "import",
        "leader",
        "operations",
        "ordering",
        "points",
        "qdrant",
        "strong",
        "write"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6836298932384341,
      "overall": 0.6945432977461446
    }
  },
  {
    "text": "## Consensus Checkpointing\n\nConsensus checkpointing is a technique used in Raft to improve performance and simplify log management by periodically creating a consistent snapshot of the system state. This snapshot represents a point in time where all nodes in the cluster have reached agreement on the state, and it can be used to truncate the log, reducing the amount of data that needs to be stored and transferred between nodes.\n\nFor example, if you attach a new node to the cluster, it should replay all the log entries to catch up with the current state. In long-running clusters, this can take a long time, and the log can grow very large.\n\nTo prevent this, one can use a special checkpointing mechanism, that will truncate the log and create a snapshot of the current state.\n\nTo use this feature, simply call the `/cluster/recover` API on required node:\n\n```http\nPOST /cluster/recover\n```\n\nThis API can be triggered on any non-leader node, it will send a request to the current consensus leader to create a snapshot. The leader will in turn send the snapshot back to the requesting node for application.\n\nIn some cases, this API can be used to recover from an inconsistent cluster state by forcing a snapshot creation.\n\n---\n\n1. Weak ordering for updates: All records are streamed to the target node in order. New updates are received on the target node in parallel, while the transfer of records is still happening. We therefore have `weak` ordering, regardless of what [ordering](#write-ordering.md) is used for updates. [↩︎](#fnref:1.md) [↩︎](#fnref1:1.md)\n\n2. Strong ordering for updates: A snapshot of the shard is created, it is transferred and recovered on the target node. That ensures the state of the shard is kept consistent. New updates are queued on the source node, and transferred in order to the target node. Updates therefore have the same [ordering](#write-ordering.md) as the user selects, making `strong` ordering possible. [↩︎](#fnref:2.md) [↩︎](#fnref1:2.md) [↩︎](#fnref2:2.md) [↩︎](#fnref3:2.md)",
    "metadata": {
      "chunk_id": "25122e454c1e-0039",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 39,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Consensus Checkpointing"
      ],
      "heading_text": "Consensus Checkpointing",
      "token_count": 482,
      "char_count": 2023,
      "start_char": 73714,
      "end_char": 75737,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6983267080745342,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.400807",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Consensus Checkpointing",
      "chunk_hash": "c5ab5f78b20633f6",
      "content_digest": "c5ab5f78b20633f6",
      "chunk_length": 2023,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "node",
          "ordering",
          "and",
          "snapshot",
          "state",
          "this",
          "can",
          "updates",
          "log",
          "cluster",
          "for",
          "used",
          "target",
          "consensus",
          "checkpointing",
          "all",
          "have",
          "that",
          "transferred"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 27,
            "weight": 0.104651
          },
          {
            "term": "node",
            "tf": 9,
            "weight": 0.034884
          },
          {
            "term": "ordering",
            "tf": 8,
            "weight": 0.031008
          },
          {
            "term": "and",
            "tf": 7,
            "weight": 0.027132
          },
          {
            "term": "snapshot",
            "tf": 7,
            "weight": 0.027132
          },
          {
            "term": "state",
            "tf": 6,
            "weight": 0.023256
          },
          {
            "term": "this",
            "tf": 6,
            "weight": 0.023256
          },
          {
            "term": "can",
            "tf": 6,
            "weight": 0.023256
          },
          {
            "term": "updates",
            "tf": 6,
            "weight": 0.023256
          },
          {
            "term": "log",
            "tf": 5,
            "weight": 0.01938
          },
          {
            "term": "cluster",
            "tf": 5,
            "weight": 0.01938
          },
          {
            "term": "for",
            "tf": 5,
            "weight": 0.01938
          },
          {
            "term": "used",
            "tf": 4,
            "weight": 0.015504
          },
          {
            "term": "target",
            "tf": 4,
            "weight": 0.015504
          },
          {
            "term": "consensus",
            "tf": 3,
            "weight": 0.011628
          },
          {
            "term": "checkpointing",
            "tf": 3,
            "weight": 0.011628
          },
          {
            "term": "all",
            "tf": 3,
            "weight": 0.011628
          },
          {
            "term": "have",
            "tf": 3,
            "weight": 0.011628
          },
          {
            "term": "that",
            "tf": 3,
            "weight": 0.011628
          },
          {
            "term": "transferred",
            "tf": 3,
            "weight": 0.011628
          }
        ],
        "unique_terms": 124,
        "total_terms": 258
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Consensus Checkpointing",
        "and",
        "can",
        "log",
        "node",
        "ordering",
        "snapshot",
        "state",
        "the",
        "this",
        "updates"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6983267080745342,
      "overall": 0.732775569358178
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/guides/distributed_deployment.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Distributed deployment](#distributed-deployment.md)    - [How many Qdrant nodes should I run?](#how-many-qdrant-nodes-should-i-run.md)    - [Enabling distributed mode in self-hosted Qdrant](#enabling-distributed-mode-in-self-hosted-qdrant.md)    - [Enabling distributed mode in Qdrant Cloud](#enabling-distributed-mode-in-qdrant-cloud.md)    - [Making use of a new distributed Qdrant cluster](#making-use-of-a-new-distributed-qdrant-cluster.md)    - [Raft](#raft.md)    - [Sharding](#sharding.md)      - [Choosing the right number of shards](#choosing-the-right-number-of-shards.md)     - [Resharding](#resharding.md)     - [Moving shards](#moving-shards.md)     - [User-defined sharding](#user-defined-sharding.md)     - [Shard transfer method](#shard-transfer-method.md)    - [Replication](#replication.md)      - [Replication factor](#replication-factor.md)     - [Creating new shard replicas](#creating-new-shard-replicas.md)     - [Error handling](#error-handling.md)     - [Node Failure Recovery](#node-failure-recovery.md)     - [Temporary node failure](#temporary-node-failure.md)    - [Consistency guarantees](#consistency-guarantees.md)      - [Write consistency factor](#write-consistency-factor.md)     - [Read consistency](#read-consistency.md)     - [Write ordering](#write-ordering.md)    - [Listener mode](#listener-mode.md)    - [Consensus Checkpointing](#consensus-checkpointing.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/guides/distributed_deployment.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "25122e454c1e-0040",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "filename": "_documentation_guides_distributed_deployment_.md",
      "file_extension": ".md",
      "chunk_index": 40,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 535,
      "char_count": 1978,
      "start_char": 75739,
      "end_char": 77717,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9121428571428571,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:07.401749",
      "document_id": "25122e454c1e",
      "document_name": "_documentation_guides_distributed_deployment_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "source_filename": "_documentation_guides_distributed_deployment_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_guides_distributed_deployment\\_documentation_guides_distributed_deployment_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "2445ef296259ab4f",
      "content_digest": "2445ef296259ab4f",
      "chunk_length": 1978,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "distributed",
          "page",
          "github",
          "landing",
          "new",
          "mode",
          "consistency",
          "https",
          "com",
          "deployment",
          "enabling",
          "sharding",
          "shards",
          "shard",
          "replication",
          "factor",
          "node",
          "failure",
          "write"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 14,
            "weight": 0.065116
          },
          {
            "term": "distributed",
            "tf": 10,
            "weight": 0.046512
          },
          {
            "term": "page",
            "tf": 7,
            "weight": 0.032558
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.032558
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.027907
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.027907
          },
          {
            "term": "mode",
            "tf": 6,
            "weight": 0.027907
          },
          {
            "term": "consistency",
            "tf": 6,
            "weight": 0.027907
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "deployment",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "enabling",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "sharding",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "shards",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "shard",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "replication",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "factor",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "node",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "failure",
            "tf": 4,
            "weight": 0.018605
          },
          {
            "term": "write",
            "tf": 4,
            "weight": 0.018605
          }
        ],
        "unique_terms": 78,
        "total_terms": 215
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "com",
        "consistency",
        "distributed",
        "github",
        "https",
        "landing",
        "mode",
        "new",
        "page",
        "qdrant"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9121428571428571,
      "overall": 0.8040476190476191
    }
  }
]