[
  {
    "text": "# Advanced RAG Systems  Relevant source files  - [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb) - [graphrag\\_neo4j/readme.md](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md) - [multivector-representation/multivector\\_representation\\_qdrant.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb) - [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb)  This page provides an overview of sophisticated Retrieval-Augmented Generation (RAG) systems implemented in the Qdrant examples repository. While basic RAG systems enhance Large Language Models (LLMs) with relevant context retrieved from a vector database, advanced RAG systems incorporate additional techniques such as multivector search, graph relationships, and specialized document processing to improve retrieval quality and response accuracy. The scope of this document covers:  - Multivector RAG with DSPy framework for medical applications - Graph-enhanced RAG using Neo4j for relationship-aware retrieval - PDF retrieval at scale using visual document understanding models  For information about basic vector operations, see [Getting Started with Qdrant](qdrant/examples/2-getting-started-with-qdrant.md). For specific text applications that use simpler RAG, see [Text Data Applications](qdrant/examples/3-text-data-applications.md). Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb8-23](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L8-L23) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb20-29](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L20-L29) [graphrag\\_neo4j/readme.md3-12](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L3-L12) [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb8-27](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb#L8-L27)",
    "metadata": {
      "chunk_id": "f9d6c2fff7a7-0000",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Advanced RAG Systems"
      ],
      "heading_text": "Advanced RAG Systems",
      "token_count": 642,
      "char_count": 2261,
      "start_char": 0,
      "end_char": 2261,
      "semantic_score": 0.35598307847976685,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9210526315789473,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:31:55.792907",
      "document_id": "f9d6c2fff7a7",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Advanced RAG Systems",
      "chunk_hash": "505a463df1a06263",
      "content_digest": "505a463df1a06263",
      "chunk_length": 2261,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "examples",
          "multivector",
          "dspy",
          "medical",
          "ipynb",
          "bot",
          "https",
          "github",
          "com",
          "blob",
          "b3c4b28f",
          "representation",
          "retrieval",
          "rag",
          "neo4j",
          "pdf",
          "scale",
          "systems",
          "graphrag"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 21,
            "weight": 0.074733
          },
          {
            "term": "examples",
            "tf": 11,
            "weight": 0.039146
          },
          {
            "term": "multivector",
            "tf": 10,
            "weight": 0.035587
          },
          {
            "term": "dspy",
            "tf": 9,
            "weight": 0.032028
          },
          {
            "term": "medical",
            "tf": 9,
            "weight": 0.032028
          },
          {
            "term": "ipynb",
            "tf": 9,
            "weight": 0.032028
          },
          {
            "term": "bot",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "https",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "github",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "com",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "blob",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "b3c4b28f",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "representation",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "retrieval",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "rag",
            "tf": 7,
            "weight": 0.024911
          },
          {
            "term": "neo4j",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "pdf",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "scale",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "systems",
            "tf": 4,
            "weight": 0.014235
          },
          {
            "term": "graphrag",
            "tf": 4,
            "weight": 0.014235
          }
        ],
        "unique_terms": 98,
        "total_terms": 281
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Advanced RAG Systems",
        "bot",
        "com",
        "dspy",
        "examples",
        "github",
        "https",
        "ipynb",
        "medical",
        "multivector",
        "qdrant"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.35598307847976685,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9210526315789473,
      "overall": 0.7256785700195714
    }
  },
  {
    "text": "## When to Use Each Advanced RAG Approach  | Aspect                        | Multivector RAG                                          | Graph-Enhanced RAG                                            | PDF Retrieval at Scale                                  | | ----------------------------- | -------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------- | | **Best For**                  | Fine-grained text matching                               | Relationship-heavy domains                                    | Visual document collections                             | | **Ideal Use Cases**           | Medical Q\\&A, technical documentation, precise retrieval | Knowledge graphs, organizational data, entity-centric domains | Academic papers, reports, forms, mixed-format documents | | **Key Strength**              | Token-level similarity                                   | Entity relationships                                          | Visual understanding without OCR                        | | **Vector Types**              | Dense + ColBERT multivectors                             | Dense embeddings + graph structure                            | Visual multivectors (ColPali/ColQwen2)                  | | **Implementation Complexity** | Moderate                                                 | High                                                          | High                                                    | | **Required Infrastructure**   | Qdrant with multivector support                          | Qdrant + Neo4j                                                | Qdrant with optimization strategies                     | | **Computational Overhead**    | Medium (reranking)                                       | Medium-High (graph queries)                                   | High (but optimized with pooling)                       | | **Framework Integration**     | DSPy, FastEmbed                                          | OpenAI GPT, custom extractors                                 | Vision Language Models                                  |",
    "metadata": {
      "chunk_id": "f9d6c2fff7a7-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "When to Use Each Advanced RAG Approach"
      ],
      "heading_text": "When to Use Each Advanced RAG Approach",
      "token_count": 287,
      "char_count": 2192,
      "start_char": 0,
      "end_char": 2192,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.46964071856287426,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:31:55.808924",
      "document_id": "f9d6c2fff7a7",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "When to Use Each Advanced RAG Approach",
      "chunk_hash": "388c4d5d03138f4d",
      "content_digest": "388c4d5d03138f4d",
      "chunk_length": 2192,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "high",
          "rag",
          "graph",
          "visual",
          "qdrant",
          "with",
          "use",
          "multivector",
          "retrieval",
          "domains",
          "entity",
          "dense",
          "multivectors",
          "medium",
          "when",
          "each",
          "advanced",
          "approach",
          "aspect",
          "enhanced"
        ],
        "term_weights": [
          {
            "term": "high",
            "tf": 4,
            "weight": 0.035088
          },
          {
            "term": "rag",
            "tf": 3,
            "weight": 0.026316
          },
          {
            "term": "graph",
            "tf": 3,
            "weight": 0.026316
          },
          {
            "term": "visual",
            "tf": 3,
            "weight": 0.026316
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.026316
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.026316
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.017544
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.017544
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.017544
          },
          {
            "term": "domains",
            "tf": 2,
            "weight": 0.017544
          },
          {
            "term": "entity",
            "tf": 2,
            "weight": 0.017544
          },
          {
            "term": "dense",
            "tf": 2,
            "weight": 0.017544
          },
          {
            "term": "multivectors",
            "tf": 2,
            "weight": 0.017544
          },
          {
            "term": "medium",
            "tf": 2,
            "weight": 0.017544
          },
          {
            "term": "when",
            "tf": 1,
            "weight": 0.008772
          },
          {
            "term": "each",
            "tf": 1,
            "weight": 0.008772
          },
          {
            "term": "advanced",
            "tf": 1,
            "weight": 0.008772
          },
          {
            "term": "approach",
            "tf": 1,
            "weight": 0.008772
          },
          {
            "term": "aspect",
            "tf": 1,
            "weight": 0.008772
          },
          {
            "term": "enhanced",
            "tf": 1,
            "weight": 0.008772
          }
        ],
        "unique_terms": 93,
        "total_terms": 114
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "When to Use Each Advanced RAG Approach",
        "domains",
        "graph",
        "high",
        "multivector",
        "qdrant",
        "rag",
        "retrieval",
        "use",
        "visual",
        "with"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.46964071856287426,
      "overall": 0.7232135728542914
    }
  },
  {
    "text": "### Code Integration Patterns  Key implementation patterns from the examples: ``` ``` Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb207-225](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L207-L225) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb552-571](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L552-L571) [graphrag\\_neo4j/readme.md15-21](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L15-L21) [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb55-67](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb#L55-L67)",
    "metadata": {
      "chunk_id": "f9d6c2fff7a7-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Code Integration Patterns"
      ],
      "heading_text": "Code Integration Patterns",
      "token_count": 253,
      "char_count": 758,
      "start_char": 0,
      "end_char": 758,
      "semantic_score": 0.4005800783634186,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7547058823529412,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:31:55.814456",
      "document_id": "f9d6c2fff7a7",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Code Integration Patterns",
      "chunk_hash": "d31a5603a556749b",
      "content_digest": "d31a5603a556749b",
      "chunk_length": 758,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "examples",
          "multivector",
          "representation",
          "https",
          "github",
          "com",
          "blob",
          "b3c4b28f",
          "dspy",
          "medical",
          "bot",
          "ipynb",
          "patterns",
          "graphrag",
          "neo4j",
          "readme",
          "pdf",
          "retrieval",
          "scale"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.082474
          },
          {
            "term": "examples",
            "tf": 5,
            "weight": 0.051546
          },
          {
            "term": "multivector",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "representation",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "github",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "blob",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "b3c4b28f",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "dspy",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "medical",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "bot",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "ipynb",
            "tf": 3,
            "weight": 0.030928
          },
          {
            "term": "patterns",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "graphrag",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "neo4j",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "readme",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "pdf",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "scale",
            "tf": 2,
            "weight": 0.020619
          }
        ],
        "unique_terms": 44,
        "total_terms": 97
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Code Integration Patterns",
        "b3c4b28f",
        "blob",
        "com",
        "dspy",
        "examples",
        "github",
        "https",
        "multivector",
        "qdrant",
        "representation"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.4005800783634186,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7547058823529412,
      "overall": 0.6850953202387866
    }
  },
  {
    "text": "### Implementation Details  The multivector system uses Qdrant's native support for multiple vector types per document: ``` ``` The retrieval process combines both vector types in a single query: ``` ``` Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb207-225](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L207-L225) [multivector-representation/multivector\\_representation\\_qdrant.ipynb292-302](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L292-L302) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb222-252](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L222-L252) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb376-383](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L376-L383)",
    "metadata": {
      "chunk_id": "f9d6c2fff7a7-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Implementation Details"
      ],
      "heading_text": "Implementation Details",
      "token_count": 291,
      "char_count": 954,
      "start_char": 0,
      "end_char": 954,
      "semantic_score": 0.4149194657802582,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.74,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:31:55.800242",
      "document_id": "f9d6c2fff7a7",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Implementation Details",
      "chunk_hash": "d936793ce8c9c391",
      "content_digest": "d936793ce8c9c391",
      "chunk_length": 954,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "multivector",
          "representation",
          "dspy",
          "medical",
          "bot",
          "https",
          "github",
          "com",
          "examples",
          "blob",
          "b3c4b28f",
          "ipynb",
          "the",
          "vector",
          "types",
          "implementation",
          "details",
          "system",
          "uses"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 13,
            "weight": 0.107438
          },
          {
            "term": "multivector",
            "tf": 9,
            "weight": 0.07438
          },
          {
            "term": "representation",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "dspy",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "medical",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "bot",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "github",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "examples",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "blob",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "b3c4b28f",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "ipynb",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "implementation",
            "tf": 1,
            "weight": 0.008264
          },
          {
            "term": "details",
            "tf": 1,
            "weight": 0.008264
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.008264
          },
          {
            "term": "uses",
            "tf": 1,
            "weight": 0.008264
          }
        ],
        "unique_terms": 49,
        "total_terms": 121
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Implementation Details",
        "bot",
        "com",
        "dspy",
        "examples",
        "github",
        "https",
        "medical",
        "multivector",
        "qdrant",
        "representation"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.4149194657802582,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.74,
      "overall": 0.684973155260086
    }
  },
  {
    "text": "## Conclusion  Advanced RAG systems represent a significant evolution beyond basic retrieval-augmented generation. By incorporating time awareness or graph relationships, these systems can provide more contextually rich and accurate responses, especially for complex or time-sensitive queries. The Qdrant examples repository demonstrates two powerful approaches:  1. **Recency-Aware RAG** with LlamaIndex for time-sensitive applications 2. **Graph-Enhanced RAG** with Neo4j for relationship-rich domains  These implementations showcase how vector databases like Qdrant can be extended and integrated with other systems to create more sophisticated knowledge retrieval architectures. Sources: [graphrag\\_neo4j/readme.md3-12](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L3-L12)  Dismiss  Refresh this wiki  Enter email to refresh",
    "metadata": {
      "chunk_id": "f9d6c2fff7a7-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Conclusion"
      ],
      "heading_text": "Conclusion",
      "token_count": 183,
      "char_count": 857,
      "start_char": 0,
      "end_char": 857,
      "semantic_score": 0.39176830649375916,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7383870967741936,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:31:55.815540",
      "document_id": "f9d6c2fff7a7",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Conclusion",
      "chunk_hash": "36af94164bd115f3",
      "content_digest": "36af94164bd115f3",
      "chunk_length": 857,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "rag",
          "systems",
          "time",
          "for",
          "qdrant",
          "with",
          "neo4j",
          "retrieval",
          "graph",
          "these",
          "can",
          "more",
          "rich",
          "and",
          "sensitive",
          "examples",
          "graphrag",
          "readme",
          "refresh",
          "conclusion"
        ],
        "term_weights": [
          {
            "term": "rag",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "systems",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "time",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "neo4j",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "graph",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "these",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "more",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "rich",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "sensitive",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "examples",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "graphrag",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "readme",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "refresh",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "conclusion",
            "tf": 1,
            "weight": 0.009709
          }
        ],
        "unique_terms": 77,
        "total_terms": 103
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Conclusion",
        "for",
        "graph",
        "neo4j",
        "qdrant",
        "rag",
        "retrieval",
        "systems",
        "these",
        "time",
        "with"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.39176830649375916,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7383870967741936,
      "overall": 0.6767184677559842
    }
  }
]