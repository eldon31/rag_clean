[
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "d406241c3254-0002",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "filename": "_documentation_data-ingestion-beginners_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 0,
      "end_char": 2347,
      "semantic_score": 0.5320299863815308,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:13:21.244489",
      "document_id": "d406241c3254",
      "document_name": "_documentation_data-ingestion-beginners_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "source_filename": "_documentation_data-ingestion-beginners_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.5320299863815308,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.779907431357946
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - Data Ingestion for Beginners",
    "metadata": {
      "chunk_id": "d406241c3254-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "filename": "_documentation_data-ingestion-beginners_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 597,
      "char_count": 2435,
      "start_char": 0,
      "end_char": 2435,
      "semantic_score": 0.5320299863815308,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9016,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:13:21.249266",
      "document_id": "d406241c3254",
      "document_name": "_documentation_data-ingestion-beginners_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "source_filename": "_documentation_data-ingestion-beginners_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "4a310d56ecf3b431",
      "content_digest": "4a310d56ecf3b431",
      "chunk_length": 2435,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "for",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 31,
            "weight": 0.107266
          },
          {
            "term": "documentation",
            "tf": 23,
            "weight": 0.079585
          },
          {
            "term": "https",
            "tf": 22,
            "weight": 0.076125
          },
          {
            "term": "tech",
            "tf": 22,
            "weight": 0.076125
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.048443
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.034602
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.031142
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.031142
          },
          {
            "term": "data",
            "tf": 8,
            "weight": 0.027682
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.020761
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017301
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017301
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013841
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.013841
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.013841
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.013841
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010381
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010381
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010381
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.00692
          }
        ],
        "unique_terms": 98,
        "total_terms": 289
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.5320299863815308,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9016,
      "overall": 0.7778766621271768
    }
  },
  {
    "text": "## Step 3: Loading Embeddings into Qdrant  Now that your documents have been processed and converted into embeddings, the next step is to load these embeddings into Qdrant.",
    "metadata": {
      "chunk_id": "d406241c3254-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "filename": "_documentation_data-ingestion-beginners_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Step 3: Loading Embeddings into Qdrant"
      ],
      "heading_text": "Step 3: Loading Embeddings into Qdrant",
      "token_count": 38,
      "char_count": 172,
      "start_char": 0,
      "end_char": 172,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:13:21.254209",
      "document_id": "d406241c3254",
      "document_name": "_documentation_data-ingestion-beginners_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "source_filename": "_documentation_data-ingestion-beginners_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "hierarchy_path": "Step 3: Loading Embeddings into Qdrant",
      "chunk_hash": "8a0ae3785ab26553",
      "content_digest": "8a0ae3785ab26553",
      "chunk_length": 172,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "embeddings",
          "into",
          "step",
          "qdrant",
          "loading",
          "now",
          "that",
          "your",
          "documents",
          "have",
          "been",
          "processed",
          "and",
          "converted",
          "the",
          "next",
          "load",
          "these"
        ],
        "term_weights": [
          {
            "term": "embeddings",
            "tf": 3,
            "weight": 0.125
          },
          {
            "term": "into",
            "tf": 3,
            "weight": 0.125
          },
          {
            "term": "step",
            "tf": 2,
            "weight": 0.083333
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.083333
          },
          {
            "term": "loading",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "now",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "your",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "documents",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "have",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "been",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "processed",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "converted",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "next",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "load",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "these",
            "tf": 1,
            "weight": 0.041667
          }
        ],
        "unique_terms": 18,
        "total_terms": 24
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Step 3: Loading Embeddings into Qdrant",
        "documents",
        "embeddings",
        "have",
        "into",
        "loading",
        "now",
        "qdrant",
        "step",
        "that",
        "your"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "overall": 0.7490476190476191
    }
  },
  {
    "text": "### Creating a Collection in Qdrant  In Qdrant, data is organized in collections, each representing a set of embeddings (or points) and their associated metadata (payload). To store the embeddings generated earlier, you’ll first need to create a collection. Here’s how to create a collection in Qdrant to store both text and image embeddings: ```python def create_collection(collection_name):     qdrant_client.create_collection(         collection_name,         vectors_config={             \"text_embedding\": models.VectorParams(                 size=384,  # Dimension of text embeddings                 distance=models.Distance.COSINE,  # Cosine similarity is used for comparison             ),             \"image_embedding\": models.VectorParams(                 size=512,  # Dimension of image embeddings                 distance=models.Distance.COSINE,  # Cosine similarity is used for comparison             ),         },     )  create_collection(\"products-data\") ``` ---  This function creates a collection for storing text (384 dimensions) and image (512 dimensions) embeddings, using cosine similarity to compare embeddings within the collection. Once the collection is set up, you can load the embeddings into Qdrant. This involves inserting (or updating) the embeddings and their associated metadata (payload) into the specified collection. Here’s the code for loading embeddings into Qdrant: ```python def ingest_data(points):     operation_info = qdrant_client.upsert(         collection_name=\"products-data\",  # Collection where data is being inserted         points=points     )     return operation_info ``` ---  **Explanation of Ingestion**  1. **Upserting the Data Point:** The upsert method on the `qdrant_client` inserts each PointStruct into the specified collection. If a point with the same ID already exists, it will be updated with the new values. 2. **Operation Info:** The function returns `operation_info`, which contains details about the upsert operation, such as success status or any potential errors. **Running the Ingestion Code**  Here’s how to call the function and ingest data: ```python from qdrant_client import models  if __name__ == \"__main__\":     collection_name = \"products-data\"     create_collection(collection_name)     for i in range(1,6): # Five documents         folder = f\"p_{i}\"         loader = S3DirectoryLoader(             \"product-dataset\",             folder,             aws_access_key_id=aws_access_key_id,             aws_secret_access_key=aws_secret_access_key         )         docs = loader.load()         points, text_review, product_image = [], \"\", \"\"         for idx, doc in enumerate(docs):             source = doc.metadata['source']             if source.endswith(\".txt\") or source.endswith(\".pdf\"):                 _text_review_source, text_review = process_text(doc)             elif source.endswith(\".png\"):                 product_image_source, product_image = process_image(doc)         if text_review:             point = models.PointStruct(                 id=idx,  # Unique identifier for each point                 vector={                     \"text_embedding\": models.Document(                         text=text_review, model=\"sentence-transformers/all-MiniLM-L6-v2\"                     ),                     \"image_embedding\": models.Image(                         image=product_image, model=\"Qdrant/clip-ViT-B-32-vision\"                     ),                 },                 payload={\"review\": text_review, \"product_image\": product_image_source},             )             points.append(point)     operation_info = ingest_data(points)     print(operation_info) ``` The `PointStruct` is instantiated with these key parameters:  - **id:** A unique identifier for each embedding, typically an incremental index. - **vector:** A dictionary holding the text and image inputs to be embedded. `qdrant-client` uses [FastEmbed](https://github.com/qdrant/fastembed) under the hood to automatically generate vector representations from these inputs locally. - **payload:** A dictionary storing additional metadata, like product reviews and image references, which is invaluable for retrieval and context during searches. The code dynamically loads folders from an S3 bucket, processes text and image files separately, and stores their embeddings and associated data in dedicated lists. It then creates a `PointStruct` for each data entry and calls the ingestion function to load it into Qdrant.",
    "metadata": {
      "chunk_id": "d406241c3254-0020",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "filename": "_documentation_data-ingestion-beginners_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Creating a Collection in Qdrant"
      ],
      "heading_text": "Creating a Collection in Qdrant",
      "token_count": 886,
      "char_count": 4469,
      "start_char": 0,
      "end_char": 4469,
      "semantic_score": 0.47584038972854614,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8696774193548387,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:13:21.255656",
      "document_id": "d406241c3254",
      "document_name": "_documentation_data-ingestion-beginners_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "source_filename": "_documentation_data-ingestion-beginners_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "hierarchy_path": "Creating a Collection in Qdrant",
      "chunk_hash": "77fc0570410c2685",
      "content_digest": "77fc0570410c2685",
      "chunk_length": 4469,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "collection",
          "image",
          "text",
          "qdrant",
          "and",
          "data",
          "embeddings",
          "for",
          "models",
          "product",
          "source",
          "points",
          "operation",
          "review",
          "create",
          "name",
          "info",
          "each",
          "client"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 22,
            "weight": 0.046414
          },
          {
            "term": "collection",
            "tf": 18,
            "weight": 0.037975
          },
          {
            "term": "image",
            "tf": 17,
            "weight": 0.035865
          },
          {
            "term": "text",
            "tf": 15,
            "weight": 0.031646
          },
          {
            "term": "qdrant",
            "tf": 13,
            "weight": 0.027426
          },
          {
            "term": "and",
            "tf": 12,
            "weight": 0.025316
          },
          {
            "term": "data",
            "tf": 11,
            "weight": 0.023207
          },
          {
            "term": "embeddings",
            "tf": 11,
            "weight": 0.023207
          },
          {
            "term": "for",
            "tf": 10,
            "weight": 0.021097
          },
          {
            "term": "models",
            "tf": 8,
            "weight": 0.016878
          },
          {
            "term": "product",
            "tf": 8,
            "weight": 0.016878
          },
          {
            "term": "source",
            "tf": 8,
            "weight": 0.016878
          },
          {
            "term": "points",
            "tf": 7,
            "weight": 0.014768
          },
          {
            "term": "operation",
            "tf": 7,
            "weight": 0.014768
          },
          {
            "term": "review",
            "tf": 7,
            "weight": 0.014768
          },
          {
            "term": "create",
            "tf": 6,
            "weight": 0.012658
          },
          {
            "term": "name",
            "tf": 6,
            "weight": 0.012658
          },
          {
            "term": "info",
            "tf": 6,
            "weight": 0.012658
          },
          {
            "term": "each",
            "tf": 5,
            "weight": 0.010549
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.010549
          }
        ],
        "unique_terms": 187,
        "total_terms": 474
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Creating a Collection in Qdrant",
        "and",
        "collection",
        "data",
        "embeddings",
        "for",
        "image",
        "models",
        "qdrant",
        "text",
        "the"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.47584038972854614,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8696774193548387,
      "overall": 0.7485059363611283
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "d406241c3254-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "filename": "_documentation_data-ingestion-beginners_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 0,
      "end_char": 5661,
      "semantic_score": 0.612305760383606,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_balanced",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:13:21.242846",
      "document_id": "d406241c3254",
      "document_name": "_documentation_data-ingestion-beginners_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "source_filename": "_documentation_data-ingestion-beginners_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_data-ingestion-beginners\\_documentation_data-ingestion-beginners_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.612305760383606,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7284608944868429
    }
  }
]