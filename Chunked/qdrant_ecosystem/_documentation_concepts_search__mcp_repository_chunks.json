[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1032,
      "end_char": 3000,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.593501",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3682,
      "end_char": 5670,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.594795",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5672,
      "end_char": 5983,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.595203",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6360,
      "end_char": 8328,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.596120",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9010,
      "end_char": 10998,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.597343",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "# Similarity search\n\nSearching for the nearest vectors is at the core of many representational learning applications. Modern neural networks are trained to transform objects into vectors so that objects close in the real world appear close in vector space. It could be, for example, texts with similar meanings, visually similar pictures, or songs of the same genre.\n\nThis is how vector similarity works",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0010",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Similarity search"
      ],
      "heading_text": "Similarity search",
      "token_count": 74,
      "char_count": 403,
      "start_char": 11439,
      "end_char": 11842,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5290625,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.598102",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Similarity search",
      "chunk_hash": "e8f507056e762523",
      "content_digest": "e8f507056e762523",
      "chunk_length": 403,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "similarity",
          "for",
          "vectors",
          "objects",
          "close",
          "vector",
          "similar",
          "search",
          "searching",
          "nearest",
          "core",
          "many",
          "representational",
          "learning",
          "applications",
          "modern",
          "neural",
          "networks",
          "are"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 4,
            "weight": 0.078431
          },
          {
            "term": "similarity",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "objects",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "close",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "similar",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "search",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "searching",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "nearest",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "core",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "many",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "representational",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "learning",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "applications",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "modern",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "neural",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "networks",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.019608
          }
        ],
        "unique_terms": 41,
        "total_terms": 51
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Similarity search",
        "close",
        "for",
        "objects",
        "search",
        "searching",
        "similar",
        "similarity",
        "the",
        "vector",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5290625,
      "overall": 0.6430208333333333
    }
  },
  {
    "text": "## Query API  *Available as of v1.10.0*  Qdrant provides a single interface for all kinds of search and exploration requests - the `Query API`. Here is a reference list of what kind of queries you can perform with the `Query API` in Qdrant:  Depending on the `query` parameter, Qdrant might prefer different strategies for the search. |                                                                                                      |                                                                     | | ---------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- | | Nearest Neighbors Search                                                                             | Vector Similarity Search, also known as k-NN                        | | Search By Id                                                                                         | Search by an already stored vector - skip embedding model inference | | [Recommendations](https://qdrant.tech/documentation/concepts/explore/#recommendation-api)            | Provide positive and negative examples                              | | [Discovery Search](https://qdrant.tech/documentation/concepts/explore/#discovery-api)                | Guide the search using context as a one-shot training set           | | [Scroll](https://qdrant.tech/documentation/concepts/points/#scroll-points)                           | Get all points with optional filtering                              | | [Grouping](https://qdrant.tech/documentation/concepts/search/#grouping-api)                          | Group results by a certain field                                    | | [Order By](https://qdrant.tech/documentation/concepts/hybrid-queries/#re-ranking-with-stored-values) | Order points by payload key                                         | | [Hybrid Search](https://qdrant.tech/documentation/concepts/hybrid-queries/#hybrid-search)            | Combine multiple queries to get better results                      | | [Multi-Stage Search](https://qdrant.tech/documentation/concepts/hybrid-queries/#multi-stage-queries) | Optimize performance for large embeddings                           | | [Random Sampling](#random-sampling.md)                                                               | Get random points from the collection                               |  **Nearest Neighbors Search** ```http POST /collections/{collection_name}/points/query {     \"query\": [0.2, 0.1, 0.9, 0.7] // <--- Dense vector } ``` ```python client.query_points(     collection_name=\"{collection_name}\",     query=[0.2, 0.1, 0.9, 0.7], # <--- Dense vector ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     query: [0.2, 0.1, 0.9, 0.7], // <--- Dense vector }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{Condition, Filter, Query, QueryPointsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(Query::new_nearest(vec![0.2, 0.1, 0.9, 0.7]))     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.QueryFactory.nearest;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.QueryPoints;  QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(QueryPoints.newBuilder()   .setCollectionName(\"{collectionName}\")   .setQuery(nearest(List.of(0.2f, 0.1f, 0.9f, 0.7f)))   .build()).get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(  collectionName: \"{collection_name}\",  query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7), }) ``` **Search By Id** ```http",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Query API"
      ],
      "heading_text": "Query API",
      "token_count": 985,
      "char_count": 4302,
      "start_char": 11844,
      "end_char": 16146,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8817391304347826,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.600067",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Query API",
      "chunk_hash": "36744e4d89756057",
      "content_digest": "36744e4d89756057",
      "chunk_length": 4302,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "query",
          "search",
          "points",
          "collection",
          "https",
          "tech",
          "documentation",
          "concepts",
          "name",
          "import",
          "api",
          "the",
          "queries",
          "qdrantclient",
          "new",
          "nearest",
          "vector",
          "hybrid"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.075419
          },
          {
            "term": "client",
            "tf": 20,
            "weight": 0.055866
          },
          {
            "term": "query",
            "tf": 17,
            "weight": 0.047486
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.039106
          },
          {
            "term": "points",
            "tf": 8,
            "weight": 0.022346
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.022346
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.019553
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.019553
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.019553
          },
          {
            "term": "concepts",
            "tf": 7,
            "weight": 0.019553
          },
          {
            "term": "name",
            "tf": 7,
            "weight": 0.019553
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.019553
          },
          {
            "term": "api",
            "tf": 6,
            "weight": 0.01676
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.01676
          },
          {
            "term": "queries",
            "tf": 6,
            "weight": 0.01676
          },
          {
            "term": "qdrantclient",
            "tf": 6,
            "weight": 0.01676
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.01676
          },
          {
            "term": "nearest",
            "tf": 5,
            "weight": 0.013966
          },
          {
            "term": "vector",
            "tf": 5,
            "weight": 0.013966
          },
          {
            "term": "hybrid",
            "tf": 5,
            "weight": 0.013966
          }
        ],
        "unique_terms": 142,
        "total_terms": 358
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Query API",
        "client",
        "collection",
        "concepts",
        "documentation",
        "https",
        "points",
        "qdrant",
        "query",
        "search",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8817391304347826,
      "overall": 0.8272463768115941
    }
  },
  {
    "text": "## Metrics  There are many ways to estimate the similarity of vectors with each other. In Qdrant terms, these ways are called metrics. The choice of metric depends on the vectors obtained and, in particular, on the neural network encoder training method. Qdrant supports these most popular types of metrics:  - Dot product: `Dot` - <https://en.wikipedia.org/wiki/Dot_product> - Cosine similarity: `Cosine` - <https://en.wikipedia.org/wiki/Cosine_similarity> - Euclidean distance: `Euclid` - <https://en.wikipedia.org/wiki/Euclidean_distance> - Manhattan distance: `Manhattan`\\*- <https://en.wikipedia.org/wiki/Taxicab_geometry> *\\*Available as of v1.7*  The most typical metric used in similarity learning models is the cosine metric. Qdrant counts this metric in 2 steps, due to which a higher search speed is achieved. The first step is to normalize the vector when adding it to the collection. It happens only once for each vector. The second step is the comparison of vectors. In this case, it becomes equivalent to dot production - a very fast operation due to SIMD. Depending on the query configuration, Qdrant might prefer different strategies for the search. Read more about it in the [query planning](#query-planning.md) section.",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Metrics"
      ],
      "heading_text": "Metrics",
      "token_count": 280,
      "char_count": 1238,
      "start_char": 18126,
      "end_char": 19364,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6831034482758621,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.602644",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Metrics",
      "chunk_hash": "8b92bbada352a536",
      "content_digest": "8b92bbada352a536",
      "chunk_length": 1238,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "similarity",
          "qdrant",
          "metric",
          "dot",
          "https",
          "wikipedia",
          "org",
          "wiki",
          "cosine",
          "metrics",
          "vectors",
          "distance",
          "query",
          "are",
          "ways",
          "each",
          "these",
          "most",
          "product"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 14,
            "weight": 0.090909
          },
          {
            "term": "similarity",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "metric",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "dot",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "wikipedia",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "org",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "wiki",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "cosine",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "metrics",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "distance",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "query",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "ways",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "each",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "these",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "most",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "product",
            "tf": 2,
            "weight": 0.012987
          }
        ],
        "unique_terms": 91,
        "total_terms": 154
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Metrics",
        "cosine",
        "dot",
        "https",
        "metric",
        "org",
        "qdrant",
        "similarity",
        "the",
        "wiki",
        "wikipedia"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6831034482758621,
      "overall": 0.7610344827586206
    }
  },
  {
    "text": "## Search API  Let’s look at an example of a search query. REST API - API Schema definition is available [here](https://api.qdrant.tech/api-reference/search/query-points) ```http POST /collections/{collection_name}/points/query {     \"query\": [0.2, 0.1, 0.9, 0.79],     \"filter\": {         \"must\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"params\": {         \"hnsw_ef\": 128,         \"exact\": false     },     \"limit\": 3 } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.query_points(     collection_name=\"{collection_name}\",     query=[0.2, 0.1, 0.9, 0.7],     query_filter=models.Filter(         must=[             models.FieldCondition(                 key=\"city\",                 match=models.MatchValue(                     value=\"London\",                 ),             )         ]     ),     search_params=models.SearchParams(hnsw_ef=128, exact=False),     limit=3, ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     query: [0.2, 0.1, 0.9, 0.7],     filter: {         must: [             {                 key: \"city\",                 match: {                     value: \"London\",                 },             },         ],     },     params: {         hnsw_ef: 128,         exact: false,     },     limit: 3, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, QueryPointsBuilder, SearchParamsBuilder}; use qdrant_client::Qdrant;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(vec![0.2, 0.1, 0.9, 0.7])             .limit(3)             .filter(Filter::must([Condition::matches(                 \"city\",                 \"London\".to_string(),             )]))             .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false)),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.matchKeyword; import static io.qdrant.client.QueryFactory.nearest;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.QueryPoints; import io.qdrant.client.grpc.Points.SearchParams;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(QueryPoints.newBuilder()         .setCollectionName(\"{collection_name}\")         .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))         .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build())         .setParams(SearchParams.newBuilder().setExact(false).setHnswEf(128).build())         .setLimit(3)         .build()).get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(     collectionName: \"{collection_name}\",     query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },     filter: MatchKeyword(\"city\", \"London\"),     searchParams: new SearchParams { Exact = false, HnswEf = 128 },     limit: 3 ); ``` ```go",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0014",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Search API"
      ],
      "heading_text": "Search API",
      "token_count": 880,
      "char_count": 3308,
      "start_char": 19370,
      "end_char": 22678,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8979508196721313,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.604462",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Search API",
      "chunk_hash": "72bdf61d6a21ca2e",
      "content_digest": "72bdf61d6a21ca2e",
      "chunk_length": 3308,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "query",
          "filter",
          "import",
          "qdrantclient",
          "collection",
          "name",
          "false",
          "points",
          "city",
          "london",
          "128",
          "new",
          "api",
          "exact",
          "limit",
          "models",
          "searchparams",
          "grpc"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 23,
            "weight": 0.081851
          },
          {
            "term": "qdrant",
            "tf": 17,
            "weight": 0.060498
          },
          {
            "term": "query",
            "tf": 12,
            "weight": 0.042705
          },
          {
            "term": "filter",
            "tf": 10,
            "weight": 0.035587
          },
          {
            "term": "import",
            "tf": 10,
            "weight": 0.035587
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "collection",
            "tf": 7,
            "weight": 0.024911
          },
          {
            "term": "name",
            "tf": 7,
            "weight": 0.024911
          },
          {
            "term": "false",
            "tf": 7,
            "weight": 0.024911
          },
          {
            "term": "points",
            "tf": 6,
            "weight": 0.021352
          },
          {
            "term": "city",
            "tf": 6,
            "weight": 0.021352
          },
          {
            "term": "london",
            "tf": 6,
            "weight": 0.021352
          },
          {
            "term": "128",
            "tf": 6,
            "weight": 0.021352
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.021352
          },
          {
            "term": "api",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "exact",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "limit",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "models",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "searchparams",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "grpc",
            "tf": 5,
            "weight": 0.017794
          }
        ],
        "unique_terms": 92,
        "total_terms": 281
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Search API",
        "client",
        "collection",
        "false",
        "filter",
        "import",
        "name",
        "points",
        "qdrant",
        "qdrantclient",
        "query"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8979508196721313,
      "overall": 0.7993169398907104
    }
  },
  {
    "text": "### Filtering results by score\n\nIn addition to payload filtering, it might be useful to filter out results with a low similarity score. For example, if you know the minimal acceptance score for your model and do not want any results which are less similar than the threshold. In this case, you can use `score_threshold` parameter of the search query. It will exclude all results with a score worse than the given.\n\nThis parameter may exclude lower or higher scores depending on the used metric. For example, higher scores of Euclidean metric are considered more distant and, therefore, will be excluded.",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0018",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Filtering results by score"
      ],
      "heading_text": "Filtering results by score",
      "token_count": 118,
      "char_count": 603,
      "start_char": 30709,
      "end_char": 31312,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7068316831683169,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.610603",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Filtering results by score",
      "chunk_hash": "e7ff406f78a4a63a",
      "content_digest": "e7ff406f78a4a63a",
      "chunk_length": 603,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "score",
          "the",
          "results",
          "for",
          "filtering",
          "with",
          "example",
          "you",
          "and",
          "are",
          "than",
          "threshold",
          "this",
          "parameter",
          "will",
          "exclude",
          "higher",
          "scores",
          "metric",
          "addition"
        ],
        "term_weights": [
          {
            "term": "score",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "results",
            "tf": 4,
            "weight": 0.047619
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "example",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "than",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "threshold",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "parameter",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "will",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "exclude",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "higher",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "scores",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "metric",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "addition",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 56,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Filtering results by score",
        "and",
        "are",
        "example",
        "filtering",
        "for",
        "results",
        "score",
        "the",
        "with",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7068316831683169,
      "overall": 0.768943894389439
    }
  },
  {
    "text": "### Payload and vector in the result\n\nBy default, retrieval methods do not return any stored information such as payload and vectors. Additional parameters `with_vectors` and `with_payload` alter this behavior.\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_vectors\": true,\n    \"with_payload\": true\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_vectors=True,\n    with_payload=True,\n)\n```\n\n```typescript\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_vector: true,\n  with_payload: true,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .with_payload(true)\n            .with_vectors(true),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.WithVectorsSelectorFactory;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Payload and vector in the result"
      ],
      "heading_text": "Payload and vector in the result",
      "token_count": 381,
      "char_count": 1349,
      "start_char": 31314,
      "end_char": 32663,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.7393,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.617925",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Payload and vector in the result",
      "chunk_hash": "54169d3cfe598705",
      "content_digest": "54169d3cfe598705",
      "chunk_length": 1349,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "with",
          "query",
          "true",
          "payload",
          "import",
          "vectors",
          "collection",
          "name",
          "and",
          "points",
          "vector",
          "http",
          "use",
          "querypointsbuilder",
          "static",
          "the",
          "result",
          "default"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 12,
            "weight": 0.088889
          },
          {
            "term": "qdrant",
            "tf": 11,
            "weight": 0.081481
          },
          {
            "term": "with",
            "tf": 10,
            "weight": 0.074074
          },
          {
            "term": "query",
            "tf": 8,
            "weight": 0.059259
          },
          {
            "term": "true",
            "tf": 8,
            "weight": 0.059259
          },
          {
            "term": "payload",
            "tf": 7,
            "weight": 0.051852
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.044444
          },
          {
            "term": "vectors",
            "tf": 5,
            "weight": 0.037037
          },
          {
            "term": "collection",
            "tf": 5,
            "weight": 0.037037
          },
          {
            "term": "name",
            "tf": 5,
            "weight": 0.037037
          },
          {
            "term": "and",
            "tf": 3,
            "weight": 0.022222
          },
          {
            "term": "points",
            "tf": 3,
            "weight": 0.022222
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "http",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "querypointsbuilder",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "static",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.007407
          },
          {
            "term": "result",
            "tf": 1,
            "weight": 0.007407
          },
          {
            "term": "default",
            "tf": 1,
            "weight": 0.007407
          }
        ],
        "unique_terms": 59,
        "total_terms": 135
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Payload and vector in the result",
        "client",
        "collection",
        "import",
        "name",
        "payload",
        "qdrant",
        "query",
        "true",
        "vectors",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.7393,
      "overall": 0.6797666666666666
    }
  },
  {
    "text": "## Batch search API\n\nThe batch search API enables to perform multiple search requests via a single request.\n\nIts semantic is straightforward, `n` batched search requests are equivalent to `n` singular search requests.\n\nThis approach has several advantages. Logically, fewer network connections are required which can be very beneficial on its own.\n\nMore importantly, batched requests will be efficiently processed via the query planner which can detect and optimize requests if they have the same `filter`.\n\nThis can have a great effect on latency for non trivial filters as the intermediary results can be shared among the request.\n\nIn order to use it, simply pack together your search requests. All the regular attributes of a search request are of course available.\n\n```http\nPOST /collections/{collection_name}/points/query/batch\n{\n    \"searches\": [\n        {\n            \"query\": [0.2, 0.1, 0.9, 0.7],\n            \"filter\": {\n                \"must\": [\n                    {\n                        \"key\": \"city\",\n                        \"match\": {\n                            \"value\": \"London\"\n                        }\n                    }\n                ]\n            },\n            \"limit\": 3\n        },\n        {\n            \"query\": [0.5, 0.3, 0.2, 0.3],\n            \"filter\": {\n                \"must\": [\n                    {\n                        \"key\": \"city\",\n                        \"match\": {\n                            \"value\": \"London\"\n                        }\n                    }\n                ]\n            },\n            \"limit\": 3\n        }\n    ]\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nfilter_ = models.Filter(\n    must=[\n        models.FieldCondition(\n            key=\"city\",\n            match=models.MatchValue(\n                value=\"London\",\n            ),\n        )\n    ]\n)\n\nsearch_queries = [\n    models.QueryRequest(query=[0.2, 0.1, 0.9, 0.7], filter=filter_, limit=3),\n    models.QueryRequest(query=[0.5, 0.3, 0.2, 0.3], filter=filter_, limit=3),\n]\n\nclient.query_batch_points(collection_name=\"{collection_name}\", requests=search_queries)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst filter = {\n    must: [\n        {\n            key: \"city\",\n            match: {\n                value: \"London\",\n            },\n        },\n    ],\n};\n\nconst searches = [\n    {\n        query: [0.2, 0.1, 0.9, 0.7],\n        filter,\n        limit: 3,\n    },\n    {\n        query: [0.5, 0.3, 0.2, 0.3],\n        filter,\n        limit: 3,\n    },\n];\n\nclient.queryBatch(\"{collection_name}\", {\n    searches,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, QueryBatchPointsBuilder, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet filter = Filter::must([Condition::matches(\"city\", \"London\".to_string())]);\n\nlet searches = vec![\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(vec![0.1, 0.2, 0.3, 0.4])\n        .limit(3)\n        .filter(filter.clone())\n        .build(),\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(vec![0.5, 0.3, 0.2, 0.3])\n        .limit(3)\n        .filter(filter)\n        .build(),\n];\n\nclient\n        .query_batch(QueryBatchPointsBuilder::new(\"{collection_name}\", searches))\n        .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nFilter filter = Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build();",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0023",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Batch search API"
      ],
      "heading_text": "Batch search API",
      "token_count": 965,
      "char_count": 3942,
      "start_char": 39664,
      "end_char": 43606,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.6686440677966101,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.623330",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Batch search API",
      "chunk_hash": "a12bc7eb085a4822",
      "content_digest": "a12bc7eb085a4822",
      "chunk_length": 3942,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "filter",
          "client",
          "qdrant",
          "query",
          "search",
          "import",
          "limit",
          "requests",
          "collection",
          "name",
          "qdrantclient",
          "the",
          "city",
          "london",
          "models",
          "batch",
          "searches",
          "must",
          "new",
          "build"
        ],
        "term_weights": [
          {
            "term": "filter",
            "tf": 23,
            "weight": 0.068862
          },
          {
            "term": "client",
            "tf": 17,
            "weight": 0.050898
          },
          {
            "term": "qdrant",
            "tf": 13,
            "weight": 0.038922
          },
          {
            "term": "query",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "search",
            "tf": 9,
            "weight": 0.026946
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.026946
          },
          {
            "term": "limit",
            "tf": 8,
            "weight": 0.023952
          },
          {
            "term": "requests",
            "tf": 7,
            "weight": 0.020958
          },
          {
            "term": "collection",
            "tf": 7,
            "weight": 0.020958
          },
          {
            "term": "name",
            "tf": 7,
            "weight": 0.020958
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.020958
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.017964
          },
          {
            "term": "city",
            "tf": 6,
            "weight": 0.017964
          },
          {
            "term": "london",
            "tf": 6,
            "weight": 0.017964
          },
          {
            "term": "models",
            "tf": 6,
            "weight": 0.017964
          },
          {
            "term": "batch",
            "tf": 5,
            "weight": 0.01497
          },
          {
            "term": "searches",
            "tf": 5,
            "weight": 0.01497
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.01497
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.01497
          },
          {
            "term": "build",
            "tf": 5,
            "weight": 0.01497
          }
        ],
        "unique_terms": 130,
        "total_terms": 334
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Batch search API",
        "client",
        "collection",
        "filter",
        "import",
        "limit",
        "name",
        "qdrant",
        "query",
        "requests",
        "search"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.6686440677966101,
      "overall": 0.68954802259887
    }
  },
  {
    "text": "## Query by ID\n\nWhenever you need to use a vector as an input, you can always use a [point ID](https://qdrant.tech/documentation/concepts/points/#point-ids) instead.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\" // <--- point id\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", # <--- point id\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Condition, Filter, PointId, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_nearest(PointId::new(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n    )\n    .await?;\n```\n\n```java\nimport java.util.UUID;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n  .setCollectionName(\"{collectionName}\")\n  .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n  .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")),\n})\n```\n\nThe above example will fetch the default vector from the point with this id, and use it as the query vector.\n\nIf the `using` parameter is also specified, Qdrant will use the vector with that name.\n\nIt is also possible to reference an ID from a different collection, by setting the `lookup_from` parameter.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", // <--- point id\n    \"using\": \"512d-vector\"\n    \"lookup_from\": {\n        \"collection\": \"another_collection\", // <--- other collection name\n        \"vector\": \"image-512\" // <--- vector name in the other collection\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\",  # <--- point id\n    using=\"512d-vector\",\n    lookup_from=models.LookupLocation(\n        collection=\"another_collection\",  # <--- other collection name\n        vector=\"image-512\",  # <--- vector name in the other collection\n    )\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0025",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Query by ID"
      ],
      "heading_text": "Query by ID",
      "token_count": 1010,
      "char_count": 3385,
      "start_char": 45789,
      "end_char": 49174,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.8555932203389831,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.627328",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Query by ID",
      "chunk_hash": "4a29cd2b3b742313",
      "content_digest": "4a29cd2b3b742313",
      "chunk_length": 3385,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "query",
          "collection",
          "name",
          "vector",
          "qdrantclient",
          "43cf51e2",
          "8777",
          "4f52",
          "bc74",
          "c2cbde0c8b04",
          "import",
          "from",
          "the",
          "point",
          "new",
          "localhost",
          "use",
          "points"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 25,
            "weight": 0.06812
          },
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.059946
          },
          {
            "term": "query",
            "tf": 19,
            "weight": 0.051771
          },
          {
            "term": "collection",
            "tf": 19,
            "weight": 0.051771
          },
          {
            "term": "name",
            "tf": 15,
            "weight": 0.040872
          },
          {
            "term": "vector",
            "tf": 10,
            "weight": 0.027248
          },
          {
            "term": "qdrantclient",
            "tf": 10,
            "weight": 0.027248
          },
          {
            "term": "43cf51e2",
            "tf": 9,
            "weight": 0.024523
          },
          {
            "term": "8777",
            "tf": 9,
            "weight": 0.024523
          },
          {
            "term": "4f52",
            "tf": 9,
            "weight": 0.024523
          },
          {
            "term": "bc74",
            "tf": 9,
            "weight": 0.024523
          },
          {
            "term": "c2cbde0c8b04",
            "tf": 9,
            "weight": 0.024523
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.024523
          },
          {
            "term": "from",
            "tf": 9,
            "weight": 0.024523
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.024523
          },
          {
            "term": "point",
            "tf": 8,
            "weight": 0.021798
          },
          {
            "term": "new",
            "tf": 7,
            "weight": 0.019074
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.019074
          },
          {
            "term": "use",
            "tf": 6,
            "weight": 0.016349
          },
          {
            "term": "points",
            "tf": 6,
            "weight": 0.016349
          }
        ],
        "unique_terms": 107,
        "total_terms": 367
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "43cf51e2",
        "4f52",
        "8777",
        "Query by ID",
        "client",
        "collection",
        "name",
        "qdrant",
        "qdrantclient",
        "query",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.8555932203389831,
      "overall": 0.7518644067796609
    }
  },
  {
    "text": "## Pagination\n\nSearch and [recommendation](https://qdrant.tech/documentation/concepts/explore/#recommendation-api) APIs allow to skip first results of the search and return only the result starting from some specified offset:\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_vectors\": true,\n    \"with_payload\": true,\n    \"limit\": 10,\n    \"offset\": 100\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_vectors=True,\n    with_payload=True,\n    limit=10,\n    offset=100,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_vector: true,\n  with_payload: true,\n  limit: 10,\n  offset: 100,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .with_payload(true)\n            .with_vectors(true)\n            .limit(10)\n            .offset(100),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.WithVectorsSelectorFactory;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(enable(true))\n                .setWithVectors(WithVectorsSelectorFactory.enable(true))\n                .setLimit(10)\n                .setOffset(100)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    payloadSelector: true,\n    vectorsSelector: true,\n    limit: 10,\n    offset: 100\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tWithPayload:    qdrant.NewWithPayload(true),\n\tWithVectors:    qdrant.NewWithVectors(true),\n\tOffset:         qdrant.PtrOf(uint64(100)),\n})\n```\n\nIs equivalent to retrieving the 11th page with 10 records per page.\n\nLarge offset values may cause performance issues\n\nVector-based retrieval in general and HNSW index in particular, are not designed to be paginated. It is impossible to retrieve Nth closest vector without retrieving the first N vectors first.\n\nHowever, using the offset parameter saves the resources by reducing network traffic and the number of times the storage is accessed.\n\nUsing an `offset` parameter, will require to internally retrieve `offset + limit` points, but only access payload and vector from the storage those points which are going to be actually returned.",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0027",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Pagination"
      ],
      "heading_text": "Pagination",
      "token_count": 975,
      "char_count": 3609,
      "start_char": 52052,
      "end_char": 55661,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8990740740740741,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.629226",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Pagination",
      "chunk_hash": "a0a083f1e1cc8237",
      "content_digest": "a0a083f1e1cc8237",
      "chunk_length": 3609,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "true",
          "offset",
          "query",
          "import",
          "the",
          "with",
          "collection",
          "name",
          "qdrantclient",
          "100",
          "limit",
          "localhost",
          "and",
          "from",
          "points",
          "payload",
          "new",
          "vectors"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 24,
            "weight": 0.066852
          },
          {
            "term": "client",
            "tf": 24,
            "weight": 0.066852
          },
          {
            "term": "true",
            "tf": 14,
            "weight": 0.038997
          },
          {
            "term": "offset",
            "tf": 11,
            "weight": 0.030641
          },
          {
            "term": "query",
            "tf": 11,
            "weight": 0.030641
          },
          {
            "term": "import",
            "tf": 10,
            "weight": 0.027855
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.02507
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.02507
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.022284
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.022284
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.022284
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.019499
          },
          {
            "term": "limit",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "from",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "payload",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "vectors",
            "tf": 4,
            "weight": 0.011142
          }
        ],
        "unique_terms": 152,
        "total_terms": 359
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Pagination",
        "client",
        "collection",
        "import",
        "name",
        "offset",
        "qdrant",
        "query",
        "the",
        "true",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8990740740740741,
      "overall": 0.7996913580246914
    }
  },
  {
    "text": "### Search groups\n\nREST API ([Schema](https://api.qdrant.tech/api-reference/search/query-points-groups)):\n\n```http\nPOST /collections/{collection_name}/points/query/groups\n{\n    // Same as in the regular query API\n    \"query\": [1.1],\n    // Grouping parameters\n    \"group_by\": \"document_id\",  // Path of the field to group by\n    \"limit\": 4,                 // Max amount of groups\n    \"group_size\": 2            // Max amount of points per group\n}\n```\n\n```python\nclient.query_points_groups(\n    collection_name=\"{collection_name}\",\n    # Same as in the regular query_points() API\n    query=[1.1],\n    # Grouping parameters\n    group_by=\"document_id\",  # Path of the field to group by\n    limit=4,  # Max amount of groups\n    group_size=2,  # Max amount of points per group\n)\n```\n\n```typescript\nclient.queryGroups(\"{collection_name}\", {\n    query: [1.1],\n    group_by: \"document_id\",\n    limit: 4,\n    group_size: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointGroupsBuilder;\n\nclient\n    .query_groups(\n        QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .group_size(2u64)\n            .with_payload(true)\n            .with_vectors(true)\n            .limit(4u64),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.SearchPointGroups;\n\nclient.queryGroupsAsync(\n        QueryPointGroups.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setGroupBy(\"document_id\")\n                .setLimit(4)\n                .setGroupSize(2)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryGroupsAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    groupBy: \"document_id\",\n    limit: 4,\n    groupSize: 2\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tGroupBy:        \"document_id\",\n\tGroupSize:      qdrant.PtrOf(uint64(2)),\n})\n```\n\nThe output of a ***groups*** call looks like this:\n\n```json\n{\n    \"result\": {\n        \"groups\": [\n            {\n                \"id\": \"a\",\n                \"hits\": [\n                    { \"id\": 0, \"score\": 0.91 },\n                    { \"id\": 1, \"score\": 0.85 }\n                ]\n            },\n            {\n                \"id\": \"b\",\n                \"hits\": [\n                    { \"id\": 1, \"score\": 0.85 }\n                ]\n            },\n            {\n                \"id\": 123,\n                \"hits\": [\n                    { \"id\": 3, \"score\": 0.79 },\n                    { \"id\": 4, \"score\": 0.75 }\n                ]\n            },\n            {\n                \"id\": -10,\n                \"hits\": [\n                    { \"id\": 5, \"score\": 0.6 }\n                ]\n            }\n        ]\n    },\n    \"status\": \"ok\",\n    \"time\": 0.001\n}\n```\n\nThe groups are ordered by the score of the top point in the group. Inside each group the points are sorted too.\n\nIf the `group_by` field of a point is an array (e.g. `\"document_id\": [\"a\", \"b\"]`), the point can be included in multiple groups (e.g. `\"document_id\": \"a\"` and `document_id: \"b\"`).\n\nThis feature relies heavily on the \\`group\\_by\\` key provided. To improve performance, make sure to create a dedicated index for it.\n\n**Limitations**:",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0029",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Search groups"
      ],
      "heading_text": "Search groups",
      "token_count": 1000,
      "char_count": 3645,
      "start_char": 57467,
      "end_char": 61112,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6688022284122563,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.632751",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Search groups",
      "chunk_hash": "a28684eadb2e33d8",
      "content_digest": "a28684eadb2e33d8",
      "chunk_length": 3645,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "group",
          "the",
          "qdrant",
          "query",
          "client",
          "groups",
          "document",
          "points",
          "collection",
          "name",
          "score",
          "api",
          "limit",
          "max",
          "amount",
          "size",
          "hits",
          "field",
          "new",
          "import"
        ],
        "term_weights": [
          {
            "term": "group",
            "tf": 15,
            "weight": 0.053381
          },
          {
            "term": "the",
            "tf": 13,
            "weight": 0.046263
          },
          {
            "term": "qdrant",
            "tf": 12,
            "weight": 0.042705
          },
          {
            "term": "query",
            "tf": 12,
            "weight": 0.042705
          },
          {
            "term": "client",
            "tf": 12,
            "weight": 0.042705
          },
          {
            "term": "groups",
            "tf": 11,
            "weight": 0.039146
          },
          {
            "term": "document",
            "tf": 10,
            "weight": 0.035587
          },
          {
            "term": "points",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "score",
            "tf": 7,
            "weight": 0.024911
          },
          {
            "term": "api",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "limit",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "max",
            "tf": 4,
            "weight": 0.014235
          },
          {
            "term": "amount",
            "tf": 4,
            "weight": 0.014235
          },
          {
            "term": "size",
            "tf": 4,
            "weight": 0.014235
          },
          {
            "term": "hits",
            "tf": 4,
            "weight": 0.014235
          },
          {
            "term": "field",
            "tf": 3,
            "weight": 0.010676
          },
          {
            "term": "new",
            "tf": 3,
            "weight": 0.010676
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.010676
          }
        ],
        "unique_terms": 125,
        "total_terms": 281
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Search groups",
        "client",
        "collection",
        "document",
        "group",
        "groups",
        "name",
        "points",
        "qdrant",
        "query",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6688022284122563,
      "overall": 0.7229340761374187
    }
  },
  {
    "text": "### Lookup in groups\n\nHaving multiple points for parts of the same item often introduces redundancy in the stored data. Which may be fine if the information shared by the points is small, but it can become a problem if the payload is large, because it multiplies the storage space needed to store the points by a factor of the amount of points we have per group.\n\nOne way of optimizing storage when using groups is to store the information shared by the points with the same group id in a single point in another collection. Then, when using the [**groups** API](#grouping-api.md), add the `with_lookup` parameter to bring the information from those points into each group.\n\nStore only document-level metadata (e.g., titles, abstracts) in the lookup collection, not chunks or duplicated data.\n\nThis has the extra benefit of having a single point to update when the information shared by the points in a group changes.\n\nFor example, if you have a collection of documents, you may want to chunk them and store the points for the chunks in a separate collection, making sure that you store the point id from the document it belongs in the payload of the chunk point.\n\nIn this case, to bring the information from the documents into the chunks grouped by the document id, you can use the `with_lookup` parameter:\n\n```http\nPOST /collections/chunks/points/query/groups\n{\n    // Same as in the regular query API\n    \"query\": [1.1],\n\n    // Grouping parameters\n    \"group_by\": \"document_id\",\n    \"limit\": 2,\n    \"group_size\": 2,\n\n    // Lookup parameters\n    \"with_lookup\": {\n        // Name of the collection to look up points in\n        \"collection\": \"documents\",\n\n        // Options for specifying what to bring from the payload \n        // of the looked up point, true by default\n        \"with_payload\": [\"title\", \"text\"],\n\n        // Options for specifying what to bring from the vector(s) \n        // of the looked up point, true by default\n        \"with_vectors\": false\n    }\n}\n```\n\n```python\nclient.query_points_groups(\n    collection_name=\"chunks\",\n    # Same as in the regular search() API\n    query=[1.1],\n    # Grouping parameters\n    group_by=\"document_id\",  # Path of the field to group by\n    limit=2,  # Max amount of groups\n    group_size=2,  # Max amount of points per group\n    # Lookup parameters\n    with_lookup=models.WithLookup(\n        # Name of the collection to look up points in\n        collection=\"documents\",\n        # Options for specifying what to bring from the payload\n        # of the looked up point, True by default\n        with_payload=[\"title\", \"text\"],\n        # Options for specifying what to bring from the vector(s)\n        # of the looked up point, True by default\n        with_vectors=False,\n    ),\n)\n```\n\n```typescript\nclient.queryGroups(\"{collection_name}\", {\n    query: [1.1],\n    group_by: \"document_id\",\n    limit: 2,\n    group_size: 2,\n    with_lookup: {\n        collection: \"documents\",\n        with_payload: [\"title\", \"text\"],\n        with_vectors: false,\n    },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{with_payload_selector::SelectorOptions, QueryPointGroupsBuilder, WithLookupBuilder};\n\nclient\n    .query_groups(\n        QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(2u64)\n            .limit(2u64)\n            .with_lookup(\n                WithLookupBuilder::new(\"documents\")\n                    .with_payload(SelectorOptions::Include(\n                        vec![\"title\".to_string(), \"text\".to_string()].into(),\n                    ))\n                    .with_vectors(false),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.QueryPointGroups;\nimport io.qdrant.client.grpc.Points.WithLookup;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithVectorsSelectorFactory.enable;\nimport static io.qdrant.client.WithPayloadSelectorFactory.include;",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0031",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Lookup in groups"
      ],
      "heading_text": "Lookup in groups",
      "token_count": 904,
      "char_count": 3971,
      "start_char": 61484,
      "end_char": 65455,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.8331923890063426,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.636720",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Lookup in groups",
      "chunk_hash": "1ede9003f69de2a5",
      "content_digest": "1ede9003f69de2a5",
      "chunk_length": 3971,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "with",
          "points",
          "group",
          "collection",
          "lookup",
          "payload",
          "client",
          "point",
          "query",
          "groups",
          "for",
          "from",
          "document",
          "qdrant",
          "bring",
          "documents",
          "import",
          "information",
          "store"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 42,
            "weight": 0.099291
          },
          {
            "term": "with",
            "tf": 16,
            "weight": 0.037825
          },
          {
            "term": "points",
            "tf": 15,
            "weight": 0.035461
          },
          {
            "term": "group",
            "tf": 12,
            "weight": 0.028369
          },
          {
            "term": "collection",
            "tf": 12,
            "weight": 0.028369
          },
          {
            "term": "lookup",
            "tf": 10,
            "weight": 0.023641
          },
          {
            "term": "payload",
            "tf": 9,
            "weight": 0.021277
          },
          {
            "term": "client",
            "tf": 9,
            "weight": 0.021277
          },
          {
            "term": "point",
            "tf": 8,
            "weight": 0.018913
          },
          {
            "term": "query",
            "tf": 8,
            "weight": 0.018913
          },
          {
            "term": "groups",
            "tf": 7,
            "weight": 0.016548
          },
          {
            "term": "for",
            "tf": 7,
            "weight": 0.016548
          },
          {
            "term": "from",
            "tf": 7,
            "weight": 0.016548
          },
          {
            "term": "document",
            "tf": 7,
            "weight": 0.016548
          },
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.016548
          },
          {
            "term": "bring",
            "tf": 6,
            "weight": 0.014184
          },
          {
            "term": "documents",
            "tf": 6,
            "weight": 0.014184
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.014184
          },
          {
            "term": "information",
            "tf": 5,
            "weight": 0.01182
          },
          {
            "term": "store",
            "tf": 5,
            "weight": 0.01182
          }
        ],
        "unique_terms": 143,
        "total_terms": 423
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Lookup in groups",
        "client",
        "collection",
        "group",
        "lookup",
        "payload",
        "point",
        "points",
        "query",
        "the",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.8331923890063426,
      "overall": 0.7443974630021142
    }
  },
  {
    "text": "## Random Sampling\n\n*Available as of v1.11.0*\n\nIn some cases it might be useful to retrieve a random sample of points from the collection. This can be useful for debugging, testing, or for providing entry points for exploration.\n\nRandom sampling API is a part of [Universal Query API](#query-api.md) and can be used in the same way as regular search API.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": {\n        \"sample\": \"random\"\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\n\nsampled = client.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.SampleQuery(sample=models.Sample.RANDOM)\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst sampled = await client.query(\"{collection_name}\", {\n  query: {\n    sample: \"random\",\n  },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Query, QueryPointsBuilder};\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet sampled = client\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_sample(Sample::Random))\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.sample;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.Sample;\n\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setQuery(sample(Sample.Random))\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(collectionName: \"{collection_name}\", query: Sample.Random);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuerySample(qdrant.Sample_Random),\n})\n```",
    "metadata": {
      "chunk_id": "bb1f15bec3a8-0033",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Random Sampling"
      ],
      "heading_text": "Random Sampling",
      "token_count": 575,
      "char_count": 2293,
      "start_char": 68702,
      "end_char": 70995,
      "semantic_score": 0.6,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6970149253731344,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:58.638269",
      "document_id": "bb1f15bec3a8",
      "document_name": "_documentation_concepts_search_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Random Sampling",
      "chunk_hash": "3d15770f8a12855e",
      "content_digest": "3d15770f8a12855e",
      "chunk_length": 2293,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "query",
          "sample",
          "random",
          "collection",
          "name",
          "import",
          "qdrantclient",
          "points",
          "new",
          "localhost",
          "from",
          "api",
          "6334",
          "for",
          "models",
          "sampled",
          "await",
          "build"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 23,
            "weight": 0.095436
          },
          {
            "term": "qdrant",
            "tf": 21,
            "weight": 0.087137
          },
          {
            "term": "query",
            "tf": 14,
            "weight": 0.058091
          },
          {
            "term": "sample",
            "tf": 13,
            "weight": 0.053942
          },
          {
            "term": "random",
            "tf": 10,
            "weight": 0.041494
          },
          {
            "term": "collection",
            "tf": 9,
            "weight": 0.037344
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.033195
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.033195
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.029046
          },
          {
            "term": "points",
            "tf": 6,
            "weight": 0.024896
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.020747
          },
          {
            "term": "localhost",
            "tf": 5,
            "weight": 0.020747
          },
          {
            "term": "from",
            "tf": 4,
            "weight": 0.016598
          },
          {
            "term": "api",
            "tf": 4,
            "weight": 0.016598
          },
          {
            "term": "6334",
            "tf": 4,
            "weight": 0.016598
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.012448
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.012448
          },
          {
            "term": "sampled",
            "tf": 3,
            "weight": 0.012448
          },
          {
            "term": "await",
            "tf": 3,
            "weight": 0.012448
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.012448
          }
        ],
        "unique_terms": 85,
        "total_terms": 241
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Random Sampling",
        "client",
        "collection",
        "import",
        "name",
        "points",
        "qdrant",
        "qdrantclient",
        "query",
        "random",
        "sample"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6970149253731344,
      "overall": 0.6990049751243781
    }
  }
]