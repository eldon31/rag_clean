[
  {
    "text": "### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "4435cb621f4a-0000",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 709,
      "end_char": 1382,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.511006",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "b49cc869c6854f5f",
      "content_digest": "b49cc869c6854f5f",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.6351282051282051
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "4435cb621f4a-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 1384,
      "end_char": 7045,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.512837",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "4435cb621f4a-0002",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 7047,
      "end_char": 9394,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.514235",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.8358974358974359
    }
  },
  {
    "text": "### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "4435cb621f4a-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 9396,
      "end_char": 10069,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.514759",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "b49cc869c6854f5f",
      "content_digest": "b49cc869c6854f5f",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.6351282051282051
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "4435cb621f4a-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 10071,
      "end_char": 15732,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.516532",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - [Send data](https://qdrant.tech/documentation/send-data/) - - How to Setup Seamless Data Streaming with Kafka and Qdrant",
    "metadata": {
      "chunk_id": "4435cb621f4a-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 619,
      "char_count": 2527,
      "start_char": 15734,
      "end_char": 18261,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8866666666666667,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.517958",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "e6eef17a83e44c0e",
      "content_digest": "e6eef17a83e44c0e",
      "chunk_length": 2527,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "with",
          "data",
          "rag",
          "send",
          "chatbot",
          "and",
          "system",
          "semantic",
          "cohere",
          "precision",
          "reranking",
          "streaming",
          "kafka",
          "dspy"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 33,
            "weight": 0.109272
          },
          {
            "term": "documentation",
            "tf": 24,
            "weight": 0.07947
          },
          {
            "term": "https",
            "tf": 23,
            "weight": 0.076159
          },
          {
            "term": "tech",
            "tf": 23,
            "weight": 0.076159
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.046358
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.033113
          },
          {
            "term": "with",
            "tf": 10,
            "weight": 0.033113
          },
          {
            "term": "data",
            "tf": 10,
            "weight": 0.033113
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.029801
          },
          {
            "term": "send",
            "tf": 7,
            "weight": 0.023179
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.016556
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.016556
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013245
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.013245
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.009934
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.009934
          },
          {
            "term": "streaming",
            "tf": 3,
            "weight": 0.009934
          },
          {
            "term": "kafka",
            "tf": 3,
            "weight": 0.009934
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.009934
          }
        ],
        "unique_terms": 96,
        "total_terms": 302
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "send",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8866666666666667,
      "overall": 0.8288888888888888
    }
  },
  {
    "text": "# Setup Data Streaming with Kafka via Confluent\n\n**Author:** [M K Pavan Kumar](https://www.linkedin.com/in/kameshwara-pavan-kumar-mantha-91678b21/) , research scholar at [IIITDM, Kurnool](https://iiitk.ac.in). Specialist in hallucination mitigation techniques and RAG methodologies. • [GitHub](https://github.com/pavanjava) • [Medium](https://medium.com/@manthapavankumar11)",
    "metadata": {
      "chunk_id": "4435cb621f4a-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Setup Data Streaming with Kafka via Confluent"
      ],
      "heading_text": "Setup Data Streaming with Kafka via Confluent",
      "token_count": 104,
      "char_count": 374,
      "start_char": 18263,
      "end_char": 18637,
      "semantic_score": 0.6,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.5803225806451613,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.518483",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Setup Data Streaming with Kafka via Confluent",
      "chunk_hash": "350700c7facbc493",
      "content_digest": "350700c7facbc493",
      "chunk_length": 374,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "com",
          "pavan",
          "kumar",
          "github",
          "medium",
          "setup",
          "data",
          "streaming",
          "with",
          "kafka",
          "via",
          "confluent",
          "author",
          "www",
          "linkedin",
          "kameshwara",
          "mantha",
          "91678b21",
          "research"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 4,
            "weight": 0.095238
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.071429
          },
          {
            "term": "pavan",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "kumar",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "medium",
            "tf": 2,
            "weight": 0.047619
          },
          {
            "term": "setup",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "data",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "streaming",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "kafka",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "via",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "confluent",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "author",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "www",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "linkedin",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "kameshwara",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "mantha",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "91678b21",
            "tf": 1,
            "weight": 0.02381
          },
          {
            "term": "research",
            "tf": 1,
            "weight": 0.02381
          }
        ],
        "unique_terms": 33,
        "total_terms": 42
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Setup Data Streaming with Kafka via Confluent",
        "com",
        "data",
        "github",
        "https",
        "kumar",
        "medium",
        "pavan",
        "setup",
        "streaming",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.5803225806451613,
      "overall": 0.6601075268817204
    }
  },
  {
    "text": "## Introduction\n\nThis guide will walk you through the detailed steps of installing and setting up the [Qdrant Sink Connector](https://github.com/qdrant/qdrant-kafka), building the necessary infrastructure, and creating a practical playground application. By the end of this article, you will have a deep understanding of how to leverage this powerful integration to streamline your data workflows, ultimately enhancing the performance and capabilities of your data-driven real-time semantic search and RAG applications.\n\nIn this example, original data will be sourced from Azure Blob Storage and MongoDB.\n\nFigure 1: [Real time Change Data Capture (CDC)](https://www.confluent.io/learn/change-data-capture/) with Kafka and Qdrant.",
    "metadata": {
      "chunk_id": "4435cb621f4a-0007",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Introduction"
      ],
      "heading_text": "Introduction",
      "token_count": 146,
      "char_count": 729,
      "start_char": 18639,
      "end_char": 19368,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7173684210526315,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.518817",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Introduction",
      "chunk_hash": "4527ad4995874bc4",
      "content_digest": "4527ad4995874bc4",
      "chunk_length": 729,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "and",
          "the",
          "data",
          "this",
          "qdrant",
          "will",
          "you",
          "https",
          "kafka",
          "your",
          "real",
          "time",
          "change",
          "capture",
          "introduction",
          "guide",
          "walk",
          "through",
          "detailed",
          "steps"
        ],
        "term_weights": [
          {
            "term": "and",
            "tf": 6,
            "weight": 0.0625
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.052083
          },
          {
            "term": "data",
            "tf": 5,
            "weight": 0.052083
          },
          {
            "term": "this",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "will",
            "tf": 3,
            "weight": 0.03125
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "kafka",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "your",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "real",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "time",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "change",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "capture",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "introduction",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "guide",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "walk",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "through",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "detailed",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "steps",
            "tf": 1,
            "weight": 0.010417
          }
        ],
        "unique_terms": 67,
        "total_terms": 96
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Introduction",
        "and",
        "data",
        "https",
        "kafka",
        "qdrant",
        "the",
        "this",
        "will",
        "you",
        "your"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7173684210526315,
      "overall": 0.7724561403508772
    }
  },
  {
    "text": "## Source Systems\n\nThe architecture begins with the **source systems**, represented by MongoDB and Azure Blob Storage. These systems are vital for storing and managing raw data. MongoDB, a popular NoSQL database, is known for its flexibility in handling various data formats and its capability to scale horizontally. It is widely used for applications that require high performance and scalability. Azure Blob Storage, on the other hand, is Microsoft’s object storage solution for the cloud. It is designed for storing massive amounts of unstructured data, such as text or binary data. The data from these sources is extracted using **source connectors**, which are responsible for capturing changes in real-time and streaming them into Kafka.",
    "metadata": {
      "chunk_id": "4435cb621f4a-0009",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Source Systems"
      ],
      "heading_text": "Source Systems",
      "token_count": 135,
      "char_count": 743,
      "start_char": 19392,
      "end_char": 20135,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5136842105263157,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.519167",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Source Systems",
      "chunk_hash": "4913fd693260a502",
      "content_digest": "4913fd693260a502",
      "chunk_length": 743,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "for",
          "the",
          "and",
          "data",
          "source",
          "systems",
          "storage",
          "mongodb",
          "azure",
          "blob",
          "these",
          "are",
          "storing",
          "its",
          "architecture",
          "begins",
          "with",
          "represented",
          "vital",
          "managing"
        ],
        "term_weights": [
          {
            "term": "for",
            "tf": 6,
            "weight": 0.061224
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.05102
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.05102
          },
          {
            "term": "data",
            "tf": 5,
            "weight": 0.05102
          },
          {
            "term": "source",
            "tf": 3,
            "weight": 0.030612
          },
          {
            "term": "systems",
            "tf": 3,
            "weight": 0.030612
          },
          {
            "term": "storage",
            "tf": 3,
            "weight": 0.030612
          },
          {
            "term": "mongodb",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "azure",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "these",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "storing",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "its",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "architecture",
            "tf": 1,
            "weight": 0.010204
          },
          {
            "term": "begins",
            "tf": 1,
            "weight": 0.010204
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.010204
          },
          {
            "term": "represented",
            "tf": 1,
            "weight": 0.010204
          },
          {
            "term": "vital",
            "tf": 1,
            "weight": 0.010204
          },
          {
            "term": "managing",
            "tf": 1,
            "weight": 0.010204
          }
        ],
        "unique_terms": 68,
        "total_terms": 98
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Source Systems",
        "and",
        "azure",
        "blob",
        "data",
        "for",
        "mongodb",
        "source",
        "storage",
        "systems",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5136842105263157,
      "overall": 0.7045614035087718
    }
  },
  {
    "text": "## Kafka\n\nAt the heart of this architecture lies **Kafka**, a distributed event streaming platform capable of handling trillions of events a day. Kafka acts as a central hub where data from various sources can be ingested, processed, and distributed to various downstream systems. Its fault-tolerant and scalable design ensures that data can be reliably transmitted and processed in real-time. Kafka’s capability to handle high-throughput, low-latency data streams makes it an ideal choice for real-time data processing and analytics. The use of **Confluent** enhances Kafka’s functionalities, providing additional tools and services for managing Kafka clusters and stream processing.",
    "metadata": {
      "chunk_id": "4435cb621f4a-0010",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Kafka"
      ],
      "heading_text": "Kafka",
      "token_count": 128,
      "char_count": 684,
      "start_char": 20137,
      "end_char": 20821,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5195918367346939,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.519408",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Kafka",
      "chunk_hash": "3ed5814d1cbf4f82",
      "content_digest": "3ed5814d1cbf4f82",
      "chunk_length": 684,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "kafka",
          "and",
          "data",
          "the",
          "distributed",
          "various",
          "can",
          "processed",
          "real",
          "time",
          "for",
          "processing",
          "heart",
          "this",
          "architecture",
          "lies",
          "event",
          "streaming",
          "platform",
          "capable"
        ],
        "term_weights": [
          {
            "term": "kafka",
            "tf": 6,
            "weight": 0.069767
          },
          {
            "term": "and",
            "tf": 6,
            "weight": 0.069767
          },
          {
            "term": "data",
            "tf": 4,
            "weight": 0.046512
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "distributed",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "various",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "processed",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "real",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "time",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "processing",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "heart",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "architecture",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "lies",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "event",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "streaming",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "platform",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "capable",
            "tf": 1,
            "weight": 0.011628
          }
        ],
        "unique_terms": 64,
        "total_terms": 86
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Kafka",
        "and",
        "can",
        "data",
        "distributed",
        "kafka",
        "processed",
        "real",
        "the",
        "time",
        "various"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5195918367346939,
      "overall": 0.7398639455782311
    }
  },
  {
    "text": "## Qdrant\n\nThe processed data is then routed to **Qdrant**, a highly scalable vector search engine designed for similarity searches. Qdrant excels at managing and searching through high-dimensional vector data, which is essential for applications involving machine learning and AI, such as recommendation systems, image recognition, and natural language processing. The **Qdrant Sink Connector** for Kafka plays a pivotal role here, enabling seamless integration between Kafka and Qdrant. This connector allows for the real-time ingestion of vector data into Qdrant, ensuring that the data is always up-to-date and ready for high-performance similarity searches.",
    "metadata": {
      "chunk_id": "4435cb621f4a-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Qdrant"
      ],
      "heading_text": "Qdrant",
      "token_count": 126,
      "char_count": 662,
      "start_char": 20823,
      "end_char": 21485,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5190322580645161,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.519622",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Qdrant",
      "chunk_hash": "9903f76f7ad39486",
      "content_digest": "9903f76f7ad39486",
      "chunk_length": 662,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "for",
          "and",
          "the",
          "data",
          "vector",
          "similarity",
          "searches",
          "high",
          "connector",
          "kafka",
          "processed",
          "then",
          "routed",
          "highly",
          "scalable",
          "search",
          "engine",
          "designed",
          "excels"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.070588
          },
          {
            "term": "for",
            "tf": 5,
            "weight": 0.058824
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.058824
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.047059
          },
          {
            "term": "data",
            "tf": 4,
            "weight": 0.047059
          },
          {
            "term": "vector",
            "tf": 3,
            "weight": 0.035294
          },
          {
            "term": "similarity",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "searches",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "high",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "connector",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "kafka",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "processed",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "then",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "routed",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "highly",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "scalable",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "search",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "engine",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "designed",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "excels",
            "tf": 1,
            "weight": 0.011765
          }
        ],
        "unique_terms": 59,
        "total_terms": 85
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Qdrant",
        "and",
        "connector",
        "data",
        "for",
        "high",
        "qdrant",
        "searches",
        "similarity",
        "the",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5190322580645161,
      "overall": 0.7396774193548387
    }
  },
  {
    "text": "## Installation of Confluent Kafka Platform\n\nTo install the Confluent Kafka Platform (self-managed locally), follow these 3 simple steps:\n\n**Download and Extract the Distribution Files:**\n\n- Visit [Confluent Installation Page](https://www.confluent.io/installation/).\n- Download the distribution files (tar, zip, etc.).\n- Extract the downloaded file using:\n\n```bash\ntar -xvf confluent-<version>.tar.gz\n```\n\nor\n\n```bash\nunzip confluent-<version>.zip\n```\n\n**Configure Environment Variables:**\n\n```bash",
    "metadata": {
      "chunk_id": "4435cb621f4a-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Installation of Confluent Kafka Platform"
      ],
      "heading_text": "Installation of Confluent Kafka Platform",
      "token_count": 122,
      "char_count": 499,
      "start_char": 22313,
      "end_char": 22812,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.5175862068965517,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.520162",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Installation of Confluent Kafka Platform",
      "chunk_hash": "8312c6f9e899248b",
      "content_digest": "8312c6f9e899248b",
      "chunk_length": 499,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "confluent",
          "the",
          "installation",
          "tar",
          "bash",
          "kafka",
          "platform",
          "download",
          "extract",
          "distribution",
          "files",
          "zip",
          "version",
          "install",
          "self",
          "managed",
          "locally",
          "follow",
          "these",
          "simple"
        ],
        "term_weights": [
          {
            "term": "confluent",
            "tf": 6,
            "weight": 0.105263
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.070175
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.052632
          },
          {
            "term": "tar",
            "tf": 3,
            "weight": 0.052632
          },
          {
            "term": "bash",
            "tf": 3,
            "weight": 0.052632
          },
          {
            "term": "kafka",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "platform",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "download",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "extract",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "distribution",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "files",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "zip",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "version",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "install",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "self",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "managed",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "locally",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "follow",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "these",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.017544
          }
        ],
        "unique_terms": 35,
        "total_terms": 57
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Installation of Confluent Kafka Platform",
        "bash",
        "confluent",
        "distribution",
        "download",
        "extract",
        "installation",
        "kafka",
        "platform",
        "tar",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.5175862068965517,
      "overall": 0.6725287356321838
    }
  },
  {
    "text": "## Installation of Qdrant:\n\nTo install and run Qdrant (self-managed locally), you can use Docker, which simplifies the process. First, ensure you have Docker installed on your system. Then, you can pull the Qdrant image from Docker Hub and run it with the following commands:\n\n```bash\ndocker pull qdrant/qdrant\ndocker run -p 6334:6334 -p 6333:6333 qdrant/qdrant\n```\n\nThis will download the Qdrant image and start a Qdrant instance accessible at `http://localhost:6333`. For more detailed instructions and alternative installation methods, refer to the [Qdrant installation documentation](https://qdrant.tech/documentation/quick-start/).",
    "metadata": {
      "chunk_id": "4435cb621f4a-0018",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Installation of Qdrant:"
      ],
      "heading_text": "Installation of Qdrant:",
      "token_count": 158,
      "char_count": 636,
      "start_char": 23172,
      "end_char": 23808,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5017647058823529,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.520742",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Installation of Qdrant:",
      "chunk_hash": "05f59fcf46059d02",
      "content_digest": "05f59fcf46059d02",
      "chunk_length": 636,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "docker",
          "the",
          "and",
          "installation",
          "run",
          "you",
          "6333",
          "can",
          "pull",
          "image",
          "6334",
          "start",
          "documentation",
          "install",
          "self",
          "managed",
          "locally",
          "use",
          "which"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 11,
            "weight": 0.126437
          },
          {
            "term": "docker",
            "tf": 5,
            "weight": 0.057471
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.057471
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.045977
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "run",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "6333",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "pull",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "image",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "6334",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "start",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "install",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "self",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "managed",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "locally",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "which",
            "tf": 1,
            "weight": 0.011494
          }
        ],
        "unique_terms": 52,
        "total_terms": 87
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "6333",
        "Installation of Qdrant:",
        "and",
        "can",
        "docker",
        "installation",
        "pull",
        "qdrant",
        "run",
        "the",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5017647058823529,
      "overall": 0.7339215686274508
    }
  },
  {
    "text": "## Installation of Qdrant-Kafka Sink Connector:\n\nTo install the Qdrant Kafka connector using [Confluent Hub](https://www.confluent.io/hub/), you can utilize the straightforward `confluent-hub install` command. This command simplifies the process by eliminating the need for manual configuration file manipulations. To install the Qdrant Kafka connector version 1.1.0, execute the following command in your terminal:\n\n```bash\n confluent-hub install qdrant/qdrant-kafka:1.1.0\n```\n\nThis command downloads and installs the specified connector directly from Confluent Hub into your Confluent Platform or Kafka Connect environment. The installation process ensures that all necessary dependencies are handled automatically, allowing for a seamless integration of the Qdrant Kafka connector with your existing setup. Once installed, the connector can be configured and managed using the Confluent Control Center or the Kafka Connect REST API, enabling efficient data streaming between Kafka and Qdrant without the need for intricate manual setup.\n\n*Figure 2: Local Confluent platform showing the Source and Sink connectors after installation.*\n\nEnsure the configuration of the connector once it’s installed as below. keep in mind that your `key.converter` and `value.converter` are very important for kafka to safely deliver the messages from topic to qdrant.\n\n```bash\n{\n  \"name\": \"QdrantSinkConnectorConnector_0\",\n  \"config\": {\n    \"value.converter.schemas.enable\": \"false\",\n    \"name\": \"QdrantSinkConnectorConnector_0\",\n    \"connector.class\": \"io.qdrant.kafka.QdrantSinkConnector\",\n    \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n    \"topics\": \"topic_62,qdrant_kafka.docs\",\n    \"errors.deadletterqueue.topic.name\": \"dead_queue\",\n    \"errors.deadletterqueue.topic.replication.factor\": \"1\",\n    \"qdrant.grpc.url\": \"http://localhost:6334\",\n    \"qdrant.api.key\": \"************\"\n  }\n}\n```",
    "metadata": {
      "chunk_id": "4435cb621f4a-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Installation of Qdrant-Kafka Sink Connector:"
      ],
      "heading_text": "Installation of Qdrant-Kafka Sink Connector:",
      "token_count": 444,
      "char_count": 1973,
      "start_char": 23810,
      "end_char": 25783,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.5256528301886793,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.521395",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Installation of Qdrant-Kafka Sink Connector:",
      "chunk_hash": "58a3d6e4329de864",
      "content_digest": "58a3d6e4329de864",
      "chunk_length": 1973,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "kafka",
          "qdrant",
          "connector",
          "confluent",
          "hub",
          "and",
          "converter",
          "install",
          "command",
          "for",
          "your",
          "connect",
          "topic",
          "installation",
          "key",
          "value",
          "name",
          "sink",
          "using"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 17,
            "weight": 0.073593
          },
          {
            "term": "kafka",
            "tf": 13,
            "weight": 0.056277
          },
          {
            "term": "qdrant",
            "tf": 12,
            "weight": 0.051948
          },
          {
            "term": "connector",
            "tf": 8,
            "weight": 0.034632
          },
          {
            "term": "confluent",
            "tf": 8,
            "weight": 0.034632
          },
          {
            "term": "hub",
            "tf": 5,
            "weight": 0.021645
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.021645
          },
          {
            "term": "converter",
            "tf": 5,
            "weight": 0.021645
          },
          {
            "term": "install",
            "tf": 4,
            "weight": 0.017316
          },
          {
            "term": "command",
            "tf": 4,
            "weight": 0.017316
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.017316
          },
          {
            "term": "your",
            "tf": 4,
            "weight": 0.017316
          },
          {
            "term": "connect",
            "tf": 4,
            "weight": 0.017316
          },
          {
            "term": "topic",
            "tf": 4,
            "weight": 0.017316
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.012987
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.012987
          },
          {
            "term": "value",
            "tf": 3,
            "weight": 0.012987
          },
          {
            "term": "name",
            "tf": 3,
            "weight": 0.012987
          },
          {
            "term": "sink",
            "tf": 2,
            "weight": 0.008658
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008658
          }
        ],
        "unique_terms": 118,
        "total_terms": 231
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Installation of Qdrant-Kafka Sink Connector:",
        "and",
        "command",
        "confluent",
        "connector",
        "converter",
        "hub",
        "install",
        "kafka",
        "qdrant",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.5256528301886793,
      "overall": 0.675217610062893
    }
  },
  {
    "text": "## Installation of MongoDB\n\nFor the Kafka to connect MongoDB as source, your MongoDB instance should be running in a `replicaSet` mode. below is the `docker compose` file which will spin a single node `replicaSet` instance of MongoDB.\n\n```bash\nversion: \"3.8\"\n\nservices:\n  mongo1:\n    image: mongo:7.0\n    command: [\"--replSet\", \"rs0\", \"--bind_ip_all\", \"--port\", \"27017\"]\n    ports:\n      - 27017:27017\n    healthcheck:\n      test: echo \"try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }\" | mongosh --port 27017 --quiet\n      interval: 5s\n      timeout: 30s\n      start_period: 0s\n      start_interval: 1s\n      retries: 30\n    volumes:\n      - \"mongo1_data:/data/db\"\n      - \"mongo1_config:/data/configdb\"\n\nvolumes:\n  mongo1_data:\n  mongo1_config:\n```\n\nSimilarly, install and configure source connector as below.\n\n```bash\nconfluent-hub install mongodb/kafka-connect-mongodb:latest\n```\n\nAfter installing the `MongoDB` connector, connector configuration should look like this:\n\n```bash\n{\n  \"name\": \"MongoSourceConnectorConnector_0\",\n  \"config\": {\n    \"connector.class\": \"com.mongodb.kafka.connect.MongoSourceConnector\",\n    \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"value.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"connection.uri\": \"mongodb://127.0.0.1:27017/?replicaSet=rs0&directConnection=true\",\n    \"database\": \"qdrant_kafka\",\n    \"collection\": \"docs\",\n    \"publish.full.document.only\": \"true\",\n    \"topic.namespace.map\": \"{\\\"*\\\":\\\"qdrant_kafka.docs\\\"}\",\n    \"copy.existing\": \"true\"\n  }\n}\n```",
    "metadata": {
      "chunk_id": "4435cb621f4a-0020",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Installation of MongoDB"
      ],
      "heading_text": "Installation of MongoDB",
      "token_count": 446,
      "char_count": 1615,
      "start_char": 25785,
      "end_char": 27400,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.5806085106382979,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.522246",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Installation of MongoDB",
      "chunk_hash": "3a6c3754ee651cdf",
      "content_digest": "3a6c3754ee651cdf",
      "chunk_length": 1615,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "mongodb",
          "kafka",
          "27017",
          "connect",
          "mongo1",
          "data",
          "connector",
          "the",
          "replicaset",
          "bash",
          "rs0",
          "config",
          "true",
          "source",
          "instance",
          "should",
          "below",
          "docker",
          "port",
          "host"
        ],
        "term_weights": [
          {
            "term": "mongodb",
            "tf": 9,
            "weight": 0.054217
          },
          {
            "term": "kafka",
            "tf": 7,
            "weight": 0.042169
          },
          {
            "term": "27017",
            "tf": 6,
            "weight": 0.036145
          },
          {
            "term": "connect",
            "tf": 5,
            "weight": 0.03012
          },
          {
            "term": "mongo1",
            "tf": 5,
            "weight": 0.03012
          },
          {
            "term": "data",
            "tf": 4,
            "weight": 0.024096
          },
          {
            "term": "connector",
            "tf": 4,
            "weight": 0.024096
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.018072
          },
          {
            "term": "replicaset",
            "tf": 3,
            "weight": 0.018072
          },
          {
            "term": "bash",
            "tf": 3,
            "weight": 0.018072
          },
          {
            "term": "rs0",
            "tf": 3,
            "weight": 0.018072
          },
          {
            "term": "config",
            "tf": 3,
            "weight": 0.018072
          },
          {
            "term": "true",
            "tf": 3,
            "weight": 0.018072
          },
          {
            "term": "source",
            "tf": 2,
            "weight": 0.012048
          },
          {
            "term": "instance",
            "tf": 2,
            "weight": 0.012048
          },
          {
            "term": "should",
            "tf": 2,
            "weight": 0.012048
          },
          {
            "term": "below",
            "tf": 2,
            "weight": 0.012048
          },
          {
            "term": "docker",
            "tf": 2,
            "weight": 0.012048
          },
          {
            "term": "port",
            "tf": 2,
            "weight": 0.012048
          },
          {
            "term": "host",
            "tf": 2,
            "weight": 0.012048
          }
        ],
        "unique_terms": 103,
        "total_terms": 166
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "27017",
        "Installation of MongoDB",
        "bash",
        "connect",
        "connector",
        "data",
        "kafka",
        "mongo1",
        "mongodb",
        "replicaset",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.5806085106382979,
      "overall": 0.6935361702127659
    }
  },
  {
    "text": "## Playground Application\n\nAs the infrastructure set is completely done, now it’s time for us to create a simple application and check our setup. the objective of our application is the data is inserted to Mongodb and eventually it will get ingested into Qdrant also using [Change Data Capture (CDC)](https://www.confluent.io/learn/change-data-capture/).\n\n`requirements.txt`\n\n```bash\nfastembed==0.3.1\npymongo==4.8.0\nqdrant_client==1.10.1\n```\n\n`project_root_folder/main.py`\n\nThis is just sample code. Nevertheless it can be extended to millions of operations based on your use case.\n\n```python\nfrom pymongo import MongoClient\nfrom utils.app_utils import create_qdrant_collection\nfrom fastembed import TextEmbedding\n\ncollection_name: str = 'test'\nembed_model_name: str = 'snowflake/snowflake-arctic-embed-s'\n```\n\n```python",
    "metadata": {
      "chunk_id": "4435cb621f4a-0021",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Playground Application"
      ],
      "heading_text": "Playground Application",
      "token_count": 201,
      "char_count": 820,
      "start_char": 27402,
      "end_char": 28222,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5233333333333333,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.522638",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Playground Application",
      "chunk_hash": "f96886a1278ca4b8",
      "content_digest": "f96886a1278ca4b8",
      "chunk_length": 820,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "application",
          "the",
          "data",
          "qdrant",
          "from",
          "import",
          "create",
          "and",
          "our",
          "change",
          "capture",
          "fastembed",
          "pymongo",
          "python",
          "utils",
          "collection",
          "name",
          "str",
          "embed",
          "snowflake"
        ],
        "term_weights": [
          {
            "term": "application",
            "tf": 3,
            "weight": 0.030303
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.030303
          },
          {
            "term": "data",
            "tf": 3,
            "weight": 0.030303
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.030303
          },
          {
            "term": "from",
            "tf": 3,
            "weight": 0.030303
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.030303
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "our",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "change",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "capture",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "pymongo",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "python",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "utils",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "collection",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "name",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "str",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "embed",
            "tf": 2,
            "weight": 0.020202
          },
          {
            "term": "snowflake",
            "tf": 2,
            "weight": 0.020202
          }
        ],
        "unique_terms": 73,
        "total_terms": 99
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Playground Application",
        "and",
        "application",
        "change",
        "create",
        "data",
        "from",
        "import",
        "our",
        "qdrant",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5233333333333333,
      "overall": 0.6411111111111111
    }
  },
  {
    "text": "# Step 0: create qdrant_collection\ncreate_qdrant_collection(collection_name=collection_name, embed_model=embed_model_name)",
    "metadata": {
      "chunk_id": "4435cb621f4a-0022",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Step 0: create qdrant_collection"
      ],
      "heading_text": "Step 0: create qdrant_collection",
      "token_count": 29,
      "char_count": 122,
      "start_char": 28223,
      "end_char": 28345,
      "semantic_score": 0.8,
      "structural_score": 0.7,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.522749",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Step 0: create qdrant_collection",
      "chunk_hash": "6224bcade4740ece",
      "content_digest": "6224bcade4740ece",
      "chunk_length": 122,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "name",
          "create",
          "qdrant",
          "embed",
          "model",
          "step"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 4,
            "weight": 0.25
          },
          {
            "term": "name",
            "tf": 3,
            "weight": 0.1875
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.125
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.125
          },
          {
            "term": "embed",
            "tf": 2,
            "weight": 0.125
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.125
          },
          {
            "term": "step",
            "tf": 1,
            "weight": 0.0625
          }
        ],
        "unique_terms": 7,
        "total_terms": 16
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Step 0: create qdrant_collection",
        "collection",
        "create",
        "embed",
        "model",
        "name",
        "qdrant",
        "step"
      ]
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.7,
      "retrieval_quality": 0.59,
      "overall": 0.6966666666666667
    }
  },
  {
    "text": "# Step 4: Create a Document to Insert\n\ndescription = \"qdrant is a high available vector search engine\"\nembedding_model = TextEmbedding(model_name=embed_model_name)\nvector = next(embedding_model.embed(documents=description)).tolist()\ndocument = {\n    \"collection_name\": collection_name,\n    \"id\": 1,\n    \"vector\": vector,\n    \"payload\": {\n        \"name\": \"qdrant\",\n        \"description\": description,\n        \"url\": \"https://qdrant.tech/documentation\"\n    }\n}",
    "metadata": {
      "chunk_id": "4435cb621f4a-0026",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Step 4: Create a Document to Insert"
      ],
      "heading_text": "Step 4: Create a Document to Insert",
      "token_count": 112,
      "char_count": 458,
      "start_char": 28573,
      "end_char": 29031,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5341860465116279,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.523274",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Step 4: Create a Document to Insert",
      "chunk_hash": "ba11469a2b93ded8",
      "content_digest": "ba11469a2b93ded8",
      "chunk_length": 458,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "name",
          "description",
          "vector",
          "model",
          "qdrant",
          "document",
          "embedding",
          "embed",
          "collection",
          "step",
          "create",
          "insert",
          "high",
          "available",
          "search",
          "engine",
          "textembedding",
          "next",
          "documents",
          "tolist"
        ],
        "term_weights": [
          {
            "term": "name",
            "tf": 5,
            "weight": 0.113636
          },
          {
            "term": "description",
            "tf": 4,
            "weight": 0.090909
          },
          {
            "term": "vector",
            "tf": 4,
            "weight": 0.090909
          },
          {
            "term": "model",
            "tf": 4,
            "weight": 0.090909
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.068182
          },
          {
            "term": "document",
            "tf": 2,
            "weight": 0.045455
          },
          {
            "term": "embedding",
            "tf": 2,
            "weight": 0.045455
          },
          {
            "term": "embed",
            "tf": 2,
            "weight": 0.045455
          },
          {
            "term": "collection",
            "tf": 2,
            "weight": 0.045455
          },
          {
            "term": "step",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "create",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "insert",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "high",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "available",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "search",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "engine",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "textembedding",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "next",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "documents",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "tolist",
            "tf": 1,
            "weight": 0.022727
          }
        ],
        "unique_terms": 25,
        "total_terms": 44
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Step 4: Create a Document to Insert",
        "collection",
        "description",
        "document",
        "embed",
        "embedding",
        "model",
        "name",
        "qdrant",
        "step",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5341860465116279,
      "overall": 0.6447286821705426
    }
  },
  {
    "text": "# Step 6: Print the Inserted Document's ID\nprint(\"Inserted document ID:\", result.inserted_id)\n```\n\n`project_root_folder/utils/app_utils.py`\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\", api_key=\"<YOUR_KEY>\")\ndimension_dict = {\"snowflake/snowflake-arctic-embed-s\": 384}\n\ndef create_qdrant_collection(collection_name: str, embed_model: str):\n\n    if not client.collection_exists(collection_name=collection_name):\n        client.create_collection(\n            collection_name=collection_name,\n            vectors_config=models.VectorParams(size=dimension_dict.get(embed_model), distance=models.Distance.COSINE)\n        )\n```\n\nBefore we run the application, below is the state of MongoDB and Qdrant databases.\n\nFigure 3: Initial state: no collection named `test` & `no data` in the `docs` collection of MongodDB.\n\nOnce you run the code the data goes into Mongodb and the CDC gets triggered and eventually Qdrant will receive this data.\n\nFigure 4: The test Qdrant collection is created automatically.\n\nFigure 5: Data is inserted into both MongoDB and Qdrant.",
    "metadata": {
      "chunk_id": "4435cb621f4a-0028",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Step 6: Print the Inserted Document's ID"
      ],
      "heading_text": "Step 6: Print the Inserted Document's ID",
      "token_count": 257,
      "char_count": 1117,
      "start_char": 29125,
      "end_char": 30242,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5189473684210526,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.523850",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Step 6: Print the Inserted Document's ID",
      "chunk_hash": "ed9f34636127e7ca",
      "content_digest": "ed9f34636127e7ca",
      "chunk_length": 1117,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "the",
          "qdrant",
          "name",
          "inserted",
          "client",
          "and",
          "data",
          "models",
          "embed",
          "mongodb",
          "figure",
          "print",
          "document",
          "utils",
          "qdrantclient",
          "key",
          "dimension",
          "dict",
          "snowflake"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 11,
            "weight": 0.07971
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.057971
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.043478
          },
          {
            "term": "name",
            "tf": 5,
            "weight": 0.036232
          },
          {
            "term": "inserted",
            "tf": 4,
            "weight": 0.028986
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.028986
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.028986
          },
          {
            "term": "data",
            "tf": 4,
            "weight": 0.028986
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.021739
          },
          {
            "term": "embed",
            "tf": 3,
            "weight": 0.021739
          },
          {
            "term": "mongodb",
            "tf": 3,
            "weight": 0.021739
          },
          {
            "term": "figure",
            "tf": 3,
            "weight": 0.021739
          },
          {
            "term": "print",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "document",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "utils",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "qdrantclient",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "key",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "dimension",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "dict",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "snowflake",
            "tf": 2,
            "weight": 0.014493
          }
        ],
        "unique_terms": 76,
        "total_terms": 138
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Step 6: Print the Inserted Document's ID",
        "and",
        "client",
        "collection",
        "data",
        "embed",
        "inserted",
        "models",
        "name",
        "qdrant",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5189473684210526,
      "overall": 0.7063157894736841
    }
  },
  {
    "text": "## Conclusion:\n\nIn conclusion, the integration of **Kafka** with **Qdrant** using the **Qdrant Sink Connector** provides a seamless and efficient solution for real-time data streaming and processing. This setup not only enhances the capabilities of your data pipeline but also ensures that high-dimensional vector data is continuously indexed and readily available for similarity searches. By following the installation and setup guide, you can easily establish a robust data flow from your **source systems** like **MongoDB** and **Azure Blob Storage**, through **Kafka**, and into **Qdrant**. This architecture empowers modern applications to leverage real-time data insights and advanced search capabilities, paving the way for innovative data-driven solutions.",
    "metadata": {
      "chunk_id": "4435cb621f4a-0029",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Conclusion:"
      ],
      "heading_text": "Conclusion:",
      "token_count": 143,
      "char_count": 764,
      "start_char": 30244,
      "end_char": 31008,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7271428571428572,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.524118",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Conclusion:",
      "chunk_hash": "e572c08c1af0a347",
      "content_digest": "e572c08c1af0a347",
      "chunk_length": 764,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "and",
          "data",
          "the",
          "qdrant",
          "for",
          "conclusion",
          "kafka",
          "real",
          "time",
          "this",
          "setup",
          "capabilities",
          "your",
          "integration",
          "with",
          "using",
          "sink",
          "connector",
          "provides",
          "seamless"
        ],
        "term_weights": [
          {
            "term": "and",
            "tf": 7,
            "weight": 0.07
          },
          {
            "term": "data",
            "tf": 6,
            "weight": 0.06
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.05
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.03
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.03
          },
          {
            "term": "conclusion",
            "tf": 2,
            "weight": 0.02
          },
          {
            "term": "kafka",
            "tf": 2,
            "weight": 0.02
          },
          {
            "term": "real",
            "tf": 2,
            "weight": 0.02
          },
          {
            "term": "time",
            "tf": 2,
            "weight": 0.02
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.02
          },
          {
            "term": "setup",
            "tf": 2,
            "weight": 0.02
          },
          {
            "term": "capabilities",
            "tf": 2,
            "weight": 0.02
          },
          {
            "term": "your",
            "tf": 2,
            "weight": 0.02
          },
          {
            "term": "integration",
            "tf": 1,
            "weight": 0.01
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.01
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.01
          },
          {
            "term": "sink",
            "tf": 1,
            "weight": 0.01
          },
          {
            "term": "connector",
            "tf": 1,
            "weight": 0.01
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.01
          },
          {
            "term": "seamless",
            "tf": 1,
            "weight": 0.01
          }
        ],
        "unique_terms": 73,
        "total_terms": 100
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Conclusion:",
        "and",
        "conclusion",
        "data",
        "for",
        "kafka",
        "qdrant",
        "real",
        "the",
        "this",
        "time"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7271428571428572,
      "overall": 0.809047619047619
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Setup Data Streaming with Kafka via Confluent](#setup-data-streaming-with-kafka-via-confluent.md)    - [Introduction](#introduction.md)   - [The Architecture:](#the-architecture.md)   - [Source Systems](#source-systems.md)   - [Kafka](#kafka.md)   - [Qdrant](#qdrant.md)   - [Integration and Pipeline Importance](#integration-and-pipeline-importance.md)   - [Installation of Confluent Kafka Platform](#installation-of-confluent-kafka-platform.md)   - [Installation of Qdrant:](#installation-of-qdrant.md)   - [Installation of Qdrant-Kafka Sink Connector:](#installation-of-qdrant-kafka-sink-connector.md)   - [Installation of MongoDB](#installation-of-mongodb.md)   - [Playground Application](#playground-application.md)   - [Conclusion:](#conclusion.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/send-data/data-streaming-kafka-qdrant.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "4435cb621f4a-0030",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 365,
      "char_count": 1348,
      "start_char": 31010,
      "end_char": 32358,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5256290322580646,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:14:11.524683",
      "document_id": "4435cb621f4a",
      "document_name": "_documentation_send-data_data-streaming-kafka-qdrant_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_filename": "_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_send-data_data-streaming-kafka-qdrant\\_documentation_send-data_data-streaming-kafka-qdrant_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "93b23aef8bcc28ab",
      "content_digest": "93b23aef8bcc28ab",
      "chunk_length": 1348,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "kafka",
          "installation",
          "page",
          "github",
          "landing",
          "data",
          "https",
          "com",
          "streaming",
          "confluent",
          "this",
          "you",
          "edit",
          "tree",
          "master",
          "content",
          "documentation",
          "send",
          "create"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 14,
            "weight": 0.092715
          },
          {
            "term": "kafka",
            "tf": 10,
            "weight": 0.066225
          },
          {
            "term": "installation",
            "tf": 8,
            "weight": 0.05298
          },
          {
            "term": "page",
            "tf": 7,
            "weight": 0.046358
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.046358
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.039735
          },
          {
            "term": "data",
            "tf": 6,
            "weight": 0.039735
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.02649
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.02649
          },
          {
            "term": "streaming",
            "tf": 4,
            "weight": 0.02649
          },
          {
            "term": "confluent",
            "tf": 4,
            "weight": 0.02649
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.019868
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.013245
          },
          {
            "term": "edit",
            "tf": 2,
            "weight": 0.013245
          },
          {
            "term": "tree",
            "tf": 2,
            "weight": 0.013245
          },
          {
            "term": "master",
            "tf": 2,
            "weight": 0.013245
          },
          {
            "term": "content",
            "tf": 2,
            "weight": 0.013245
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.013245
          },
          {
            "term": "send",
            "tf": 2,
            "weight": 0.013245
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.013245
          }
        ],
        "unique_terms": 55,
        "total_terms": 151
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "com",
        "data",
        "github",
        "https",
        "installation",
        "kafka",
        "landing",
        "page",
        "qdrant",
        "streaming"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5256290322580646,
      "overall": 0.7085430107526882
    }
  }
]