[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "95b82acb124e-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1033,
      "end_char": 3001,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.566624",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "95b82acb124e-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3683,
      "end_char": 5671,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.567830",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "95b82acb124e-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5673,
      "end_char": 5984,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.568227",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "95b82acb124e-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6361,
      "end_char": 8329,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.569049",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "95b82acb124e-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9011,
      "end_char": 10999,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.570131",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "# Explore the data\n\nAfter mastering the concepts in [search](https://qdrant.tech/documentation/concepts/search/), you can start exploring your data in other ways. Qdrant provides a stack of APIs that allow you to find similar vectors in a different fashion, as well as to find the most dissimilar ones. These are useful tools for recommendation systems, data exploration, and data cleaning.",
    "metadata": {
      "chunk_id": "95b82acb124e-0010",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Explore the data"
      ],
      "heading_text": "Explore the data",
      "token_count": 81,
      "char_count": 390,
      "start_char": 11441,
      "end_char": 11831,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5268421052631579,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.570786",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Explore the data",
      "chunk_hash": "1eb573a5bfe5627a",
      "content_digest": "1eb573a5bfe5627a",
      "chunk_length": 390,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "data",
          "the",
          "concepts",
          "search",
          "qdrant",
          "you",
          "find",
          "explore",
          "after",
          "mastering",
          "https",
          "tech",
          "documentation",
          "can",
          "start",
          "exploring",
          "your",
          "other",
          "ways",
          "provides"
        ],
        "term_weights": [
          {
            "term": "data",
            "tf": 4,
            "weight": 0.076923
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.057692
          },
          {
            "term": "concepts",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "find",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "explore",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "after",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "mastering",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "tech",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "documentation",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "can",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "start",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "exploring",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "your",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "other",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "ways",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.019231
          }
        ],
        "unique_terms": 42,
        "total_terms": 52
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Explore the data",
        "after",
        "concepts",
        "data",
        "explore",
        "find",
        "mastering",
        "qdrant",
        "search",
        "the",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5268421052631579,
      "overall": 0.7089473684210525
    }
  },
  {
    "text": "## Recommendation API\n\nIn addition to the regular search, Qdrant also allows you to search based on multiple positive and negative examples. The API is called ***recommend***, and the examples can be point IDs, so that you can leverage the already encoded objects; and, as of v1.6, you can also use raw vectors as input, so that you can create your vectors on the fly without uploading them as points.\n\nREST API - API Schema definition is available [here](https://api.qdrant.tech/api-reference/search/recommend-points)\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718, [0.2, 0.3, 0.4, 0.5]],\n      \"strategy\": \"average_vector\"\n    }\n  },\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"city\",\n        \"match\": {\n          \"value\": \"London\"\n        }\n      }\n    ]\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],\n            negative=[718, [0.2, 0.3, 0.4, 0.5]],\n            strategy=models.RecommendStrategy.AVERAGE_VECTOR,\n        )\n    ),\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(\n                    value=\"London\",\n                ),\n            )\n        ]\n    ),\n    limit=3,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718, [0.2, 0.3, 0.4, 0.5]],\n            strategy: \"average_vector\"\n        }\n    },\n    filter: {\n        must: [\n            {\n                key: \"city\",\n                match: {\n                    value: \"London\",\n                },\n            },\n        ],\n    },\n    limit: 3\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    Condition, Filter, QueryPointsBuilder, RecommendInputBuilder, RecommendStrategy,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n    \nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_positive(vec![0.2, 0.3, 0.4, 0.5])\n                    .add_negative(718)\n                    .strategy(RecommendStrategy::AverageVector)\n                    .build(),\n            )\n            .limit(3)\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )])),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\nimport io.qdrant.client.grpc.Points.RecommendStrategy;\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(200), vectorInput(100.0f, 231.0f)))\n                .addAllNegative(List.of(vectorInput(718), vectorInput(0.2f, 0.3f, 0.4f, 0.5f)))\n                .setStrategy(RecommendStrategy.AverageVector)\n                .build()))\n        .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")))\n        .setLimit(3)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;",
    "metadata": {
      "chunk_id": "95b82acb124e-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Recommendation API"
      ],
      "heading_text": "Recommendation API",
      "token_count": 1020,
      "char_count": 4199,
      "start_char": 11833,
      "end_char": 16032,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.8973684210526316,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.574069",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Recommendation API",
      "chunk_hash": "96926fd3dc01f2d0",
      "content_digest": "96926fd3dc01f2d0",
      "chunk_length": 4199,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "import",
          "query",
          "filter",
          "points",
          "positive",
          "recommend",
          "qdrantclient",
          "models",
          "api",
          "collection",
          "name",
          "100",
          "grpc",
          "vectorinput",
          "the",
          "negative",
          "231",
          "718"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 24,
            "weight": 0.066852
          },
          {
            "term": "qdrant",
            "tf": 21,
            "weight": 0.058496
          },
          {
            "term": "import",
            "tf": 12,
            "weight": 0.033426
          },
          {
            "term": "query",
            "tf": 9,
            "weight": 0.02507
          },
          {
            "term": "filter",
            "tf": 9,
            "weight": 0.02507
          },
          {
            "term": "points",
            "tf": 8,
            "weight": 0.022284
          },
          {
            "term": "positive",
            "tf": 7,
            "weight": 0.019499
          },
          {
            "term": "recommend",
            "tf": 7,
            "weight": 0.019499
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.019499
          },
          {
            "term": "models",
            "tf": 7,
            "weight": 0.019499
          },
          {
            "term": "api",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "collection",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "name",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "100",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "grpc",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "vectorinput",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "negative",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "231",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "718",
            "tf": 5,
            "weight": 0.013928
          }
        ],
        "unique_terms": 126,
        "total_terms": 359
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Recommendation API",
        "client",
        "filter",
        "import",
        "models",
        "points",
        "positive",
        "qdrant",
        "qdrantclient",
        "query",
        "recommend"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.8973684210526316,
      "overall": 0.7324561403508771
    }
  },
  {
    "text": "### Average vector strategy\n\nThe default and first strategy added to Qdrant is called `average_vector`. It preprocesses the input examples to create a single vector that is used for the search. Since the preprocessing step happens very fast, the performance of this strategy is on-par with regular search. The intuition behind this kind of recommendation is that each vector component represents an independent feature of the data, so, by averaging the examples, we should get a good recommendation.\n\nThe way to produce the searching vector is by first averaging all the positive and negative examples separately, and then combining them into a single vector using the following formula:\n\n```rust\navg_positive + avg_positive - avg_negative\n```\n\nIn the case of not having any negative examples, the search vector will simply be equal to `avg_positive`.\n\nThis is the default strategy that’s going to be set implicitly, but you can explicitly define it by setting `\"strategy\": \"average_vector\"` in the recommendation request.",
    "metadata": {
      "chunk_id": "95b82acb124e-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Average vector strategy"
      ],
      "heading_text": "Average vector strategy",
      "token_count": 194,
      "char_count": 1022,
      "start_char": 17480,
      "end_char": 18502,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6817721518987342,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.574686",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Average vector strategy",
      "chunk_hash": "1794ef129406161d",
      "content_digest": "1794ef129406161d",
      "chunk_length": 1022,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "vector",
          "strategy",
          "examples",
          "positive",
          "avg",
          "average",
          "and",
          "that",
          "search",
          "this",
          "recommendation",
          "negative",
          "default",
          "first",
          "single",
          "averaging",
          "added",
          "qdrant",
          "called"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 16,
            "weight": 0.123077
          },
          {
            "term": "vector",
            "tf": 8,
            "weight": 0.061538
          },
          {
            "term": "strategy",
            "tf": 5,
            "weight": 0.038462
          },
          {
            "term": "examples",
            "tf": 4,
            "weight": 0.030769
          },
          {
            "term": "positive",
            "tf": 4,
            "weight": 0.030769
          },
          {
            "term": "avg",
            "tf": 4,
            "weight": 0.030769
          },
          {
            "term": "average",
            "tf": 3,
            "weight": 0.023077
          },
          {
            "term": "and",
            "tf": 3,
            "weight": 0.023077
          },
          {
            "term": "that",
            "tf": 3,
            "weight": 0.023077
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.023077
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.023077
          },
          {
            "term": "recommendation",
            "tf": 3,
            "weight": 0.023077
          },
          {
            "term": "negative",
            "tf": 3,
            "weight": 0.023077
          },
          {
            "term": "default",
            "tf": 2,
            "weight": 0.015385
          },
          {
            "term": "first",
            "tf": 2,
            "weight": 0.015385
          },
          {
            "term": "single",
            "tf": 2,
            "weight": 0.015385
          },
          {
            "term": "averaging",
            "tf": 2,
            "weight": 0.015385
          },
          {
            "term": "added",
            "tf": 1,
            "weight": 0.007692
          },
          {
            "term": "qdrant",
            "tf": 1,
            "weight": 0.007692
          },
          {
            "term": "called",
            "tf": 1,
            "weight": 0.007692
          }
        ],
        "unique_terms": 77,
        "total_terms": 130
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Average vector strategy",
        "and",
        "average",
        "avg",
        "examples",
        "positive",
        "search",
        "strategy",
        "that",
        "the",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6817721518987342,
      "overall": 0.7939240506329113
    }
  },
  {
    "text": "### Best score strategy\n\n*Available as of v1.6.0*\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one. The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:\n\n```rust\n// Sigmoid function to normalize the score between 0 and 1\nlet sigmoid = |x| 0.5 * (1.0 + (x / (1.0 + x.abs())));\n\nlet score = if best_positive_score > best_negative_score {\n    sigmoid(best_positive_score)\n} else {\n    -sigmoid(best_negative_score)\n};\n```\n\nThe performance of `best_score` strategy will be linearly impacted by the amount of examples.\n\nSince we are computing similarities to every example at each step of the search, the performance of this strategy will be linearly impacted by the amount of examples. This means that the more examples you provide, the slower the search will be. However, this strategy can be very powerful and should be more embedding-agnostic.\n\nAccuracy may be impacted with this strategy. To improve it, increasing the `ef` search parameter to something above 32 will already be much better than the default 16, e.g: `\"params\": { \"ef\": 64 }`\n\nTo use this algorithm, you need to set `\"strategy\": \"best_score\"` in the recommendation request.",
    "metadata": {
      "chunk_id": "95b82acb124e-0014",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Best score strategy"
      ],
      "heading_text": "Best score strategy",
      "token_count": 335,
      "char_count": 1464,
      "start_char": 18504,
      "end_char": 19968,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.6752933884297521,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.575185",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Best score strategy",
      "chunk_hash": "91d6d8c2825dcbd2",
      "content_digest": "91d6d8c2825dcbd2",
      "chunk_length": 1464,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "best",
          "score",
          "strategy",
          "this",
          "that",
          "positive",
          "negative",
          "sigmoid",
          "will",
          "are",
          "example",
          "and",
          "impacted",
          "examples",
          "search",
          "way",
          "find",
          "ones",
          "closer"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 19,
            "weight": 0.105556
          },
          {
            "term": "best",
            "tf": 11,
            "weight": 0.061111
          },
          {
            "term": "score",
            "tf": 11,
            "weight": 0.061111
          },
          {
            "term": "strategy",
            "tf": 7,
            "weight": 0.038889
          },
          {
            "term": "this",
            "tf": 6,
            "weight": 0.033333
          },
          {
            "term": "that",
            "tf": 5,
            "weight": 0.027778
          },
          {
            "term": "positive",
            "tf": 4,
            "weight": 0.022222
          },
          {
            "term": "negative",
            "tf": 4,
            "weight": 0.022222
          },
          {
            "term": "sigmoid",
            "tf": 4,
            "weight": 0.022222
          },
          {
            "term": "will",
            "tf": 4,
            "weight": 0.022222
          },
          {
            "term": "are",
            "tf": 3,
            "weight": 0.016667
          },
          {
            "term": "example",
            "tf": 3,
            "weight": 0.016667
          },
          {
            "term": "and",
            "tf": 3,
            "weight": 0.016667
          },
          {
            "term": "impacted",
            "tf": 3,
            "weight": 0.016667
          },
          {
            "term": "examples",
            "tf": 3,
            "weight": 0.016667
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.016667
          },
          {
            "term": "way",
            "tf": 2,
            "weight": 0.011111
          },
          {
            "term": "find",
            "tf": 2,
            "weight": 0.011111
          },
          {
            "term": "ones",
            "tf": 2,
            "weight": 0.011111
          },
          {
            "term": "closer",
            "tf": 2,
            "weight": 0.011111
          }
        ],
        "unique_terms": 89,
        "total_terms": 180
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Best score strategy",
        "best",
        "negative",
        "positive",
        "score",
        "sigmoid",
        "strategy",
        "that",
        "the",
        "this",
        "will"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.6752933884297521,
      "overall": 0.7917644628099172
    }
  },
  {
    "text": "### Sum scores strategy\n\nAnother strategy for using multiple query vectors simultaneously is to just sum their scores against the candidates. In qdrant, this is called `sum_scores` strategy.\n\nThis strategy was used in [this paper](https://arxiv.org/abs/2210.10695) by [UKP Lab](http://www.ukp.tu-darmstadt.de/), [hessian.ai](https://hessian.ai) and [cohere.ai](https://cohere.ai) to incorporate relevance feedback into a subsequent search. In the paper this boosted the nDCG\\@20 performance by 5.6% points when using 2-8 positive feedback documents.\n\nThe formula that this strategy implements is\n\n$$ s\\_i = \\sum\\_{v\\_q\\in Q^+}s(v\\_q, v\\_i) - \\sum\\_{v\\_q\\in Q^-}s(v\\_q, v\\_i) $$\n\nwhere $Q^+$ is the set of positive examples, $Q^-$ is the set of negative examples, and $s(v\\_q, v\\_i)$ is the score of the vector $v\\_q$ against the vector $v\\_i$\n\nAs with `best_score`, this strategy also allows using only negative examples.",
    "metadata": {
      "chunk_id": "95b82acb124e-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Sum scores strategy"
      ],
      "heading_text": "Sum scores strategy",
      "token_count": 268,
      "char_count": 921,
      "start_char": 20409,
      "end_char": 21330,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6883870967741935,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.575872",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Sum scores strategy",
      "chunk_hash": "d997bde6cb2346d6",
      "content_digest": "d997bde6cb2346d6",
      "chunk_length": 921,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "strategy",
          "this",
          "sum",
          "scores",
          "using",
          "https",
          "examples",
          "against",
          "paper",
          "ukp",
          "hessian",
          "and",
          "cohere",
          "feedback",
          "positive",
          "set",
          "negative",
          "score",
          "vector"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 9,
            "weight": 0.086538
          },
          {
            "term": "strategy",
            "tf": 6,
            "weight": 0.057692
          },
          {
            "term": "this",
            "tf": 6,
            "weight": 0.057692
          },
          {
            "term": "sum",
            "tf": 5,
            "weight": 0.048077
          },
          {
            "term": "scores",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "using",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "examples",
            "tf": 3,
            "weight": 0.028846
          },
          {
            "term": "against",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "paper",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "ukp",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "hessian",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "cohere",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "feedback",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "positive",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "set",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "negative",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "score",
            "tf": 2,
            "weight": 0.019231
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.019231
          }
        ],
        "unique_terms": 62,
        "total_terms": 104
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Sum scores strategy",
        "against",
        "examples",
        "https",
        "paper",
        "scores",
        "strategy",
        "sum",
        "the",
        "this",
        "using"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6883870967741935,
      "overall": 0.7627956989247311
    }
  },
  {
    "text": "### Multiple vectors\n\n*Available as of v0.10.0*\n\nIf the collection was created with multiple vectors, the name of the vector should be specified in the recommendation request:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718]\n    }\n  },\n  \"using\": \"image\",\n  \"limit\": 10\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],\n            negative=[718],\n        )\n    ),\n    using=\"image\",\n    limit=10,\n)\n```\n\n```typescript\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718],\n        }\n    },\n    using: \"image\",\n    limit: 10\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{QueryPointsBuilder, RecommendInputBuilder};\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_negative(718)\n                    .build(),\n            )\n            .limit(10)\n            .using(\"image\"),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(231)))\n                .addAllNegative(List.of(vectorInput(718)))\n                .build()))\n        .setUsing(\"image\")\n        .setLimit(10)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new RecommendInput {\n        Positive = { 100, 231 },\n        Negative = { 718 }\n    },\n    usingVector: \"image\",\n    limit: 10\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n        Positive: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n            qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n        },\n        Negative: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n        },\n    }),\n    Using: qdrant.PtrOf(\"image\"),\n})\n```\n\nParameter `using` specifies which stored vectors to use for the recommendation.",
    "metadata": {
      "chunk_id": "95b82acb124e-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Multiple vectors"
      ],
      "heading_text": "Multiple vectors",
      "token_count": 721,
      "char_count": 3000,
      "start_char": 21332,
      "end_char": 24332,
      "semantic_score": 0.6,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.7091346153846154,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.577017",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Multiple vectors",
      "chunk_hash": "21d73179046c6661",
      "content_digest": "21d73179046c6661",
      "chunk_length": 3000,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "query",
          "collection",
          "name",
          "using",
          "positive",
          "100",
          "231",
          "718",
          "image",
          "negative",
          "import",
          "vectorinput",
          "the",
          "recommend",
          "limit",
          "recommendinput",
          "points",
          "vectors"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 24,
            "weight": 0.09375
          },
          {
            "term": "client",
            "tf": 16,
            "weight": 0.0625
          },
          {
            "term": "query",
            "tf": 11,
            "weight": 0.042969
          },
          {
            "term": "collection",
            "tf": 9,
            "weight": 0.035156
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.035156
          },
          {
            "term": "using",
            "tf": 8,
            "weight": 0.03125
          },
          {
            "term": "positive",
            "tf": 7,
            "weight": 0.027344
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.027344
          },
          {
            "term": "231",
            "tf": 7,
            "weight": 0.027344
          },
          {
            "term": "718",
            "tf": 7,
            "weight": 0.027344
          },
          {
            "term": "image",
            "tf": 7,
            "weight": 0.027344
          },
          {
            "term": "negative",
            "tf": 6,
            "weight": 0.023438
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.023438
          },
          {
            "term": "vectorinput",
            "tf": 6,
            "weight": 0.023438
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.019531
          },
          {
            "term": "recommend",
            "tf": 5,
            "weight": 0.019531
          },
          {
            "term": "limit",
            "tf": 5,
            "weight": 0.019531
          },
          {
            "term": "recommendinput",
            "tf": 5,
            "weight": 0.019531
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.015625
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.011719
          }
        ],
        "unique_terms": 88,
        "total_terms": 256
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "100",
        "231",
        "718",
        "Multiple vectors",
        "client",
        "collection",
        "name",
        "positive",
        "qdrant",
        "query",
        "using"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.7091346153846154,
      "overall": 0.7697115384615385
    }
  },
  {
    "text": "### Lookup vectors from another collection\n\n*Available as of v0.11.6*\n\nIf you have collections with vectors of the same dimensionality, and you want to look for recommendations in one collection based on the vectors of another collection, you can use the `lookup_from` parameter.\n\nIt might be useful, e.g. in the item-to-user recommendations scenario. Where user and item embeddings, although having the same vector parameters (distance type and dimensionality), are usually stored in different collections.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718]\n    }\n  },\n  \"limit\": 10,\n  \"lookup_from\": {\n    \"collection\": \"{external_collection_name}\",\n    \"vector\": \"{external_vector_name}\"\n  }\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],\n            negative=[718],\n        )\n    ),\n    using=\"image\",\n    limit=10,\n    lookup_from=models.LookupLocation(\n        collection=\"{external_collection_name}\", vector=\"{external_vector_name}\"\n    ),\n)\n```\n\n```typescript\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718],\n        }\n    },\n    using: \"image\",\n    limit: 10,\n    lookup_from: {\n        collection: \"{external_collection_name}\",\n        vector: \"{external_vector_name}\"\n    }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{LookupLocationBuilder, QueryPointsBuilder, RecommendInputBuilder};\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_negative(718)\n                    .build(),\n            )\n            .limit(10)\n            .using(\"image\")\n            .lookup_from(\n                LookupLocationBuilder::new(\"{external_collection_name}\")\n                    .vector_name(\"{external_vector_name}\"),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.LookupLocation;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(231)))\n                .addAllNegative(List.of(vectorInput(718)))\n                .build()))\n        .setUsing(\"image\")\n        .setLimit(10)\n        .setLookupFrom(\n                LookupLocation.newBuilder()\n                        .setCollectionName(\"{external_collection_name}\")\n                        .setVectorName(\"{external_vector_name}\")\n                        .build())\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new RecommendInput {\n        Positive = { 100, 231 },\n        Negative = { 718 }\n    },\n    usingVector: \"image\",\n    limit: 10,\n    lookupFrom: new LookupLocation\n    {\n        CollectionName = \"{external_collection_name}\",\n        VectorName = \"{external_vector_name}\",\n    }\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n        Positive: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n            qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n        },\n        Negative: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n        },\n    }),\n    Using: qdrant.PtrOf(\"image\"),\n    LookupFrom: &qdrant.LookupLocation{\n        CollectionName: \"{external_collection_name}\",\n        VectorName:     qdrant.PtrOf(\"{external_vector_name}\"),\n    },\n})\n```\n\nVectors are retrieved from the external collection by ids provided in the `positive` and `negative` lists. These vectors then used to perform the recommendation in the current collection, comparing against the “using” or default vector.",
    "metadata": {
      "chunk_id": "95b82acb124e-0018",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Lookup vectors from another collection"
      ],
      "heading_text": "Lookup vectors from another collection",
      "token_count": 1024,
      "char_count": 4627,
      "start_char": 24334,
      "end_char": 28961,
      "semantic_score": 0.6,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.7012307692307693,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.578793",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Lookup vectors from another collection",
      "chunk_hash": "5c7ac8dfc5210c02",
      "content_digest": "5c7ac8dfc5210c02",
      "chunk_length": 4627,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "collection",
          "name",
          "client",
          "external",
          "vector",
          "query",
          "the",
          "positive",
          "from",
          "100",
          "231",
          "negative",
          "718",
          "using",
          "import",
          "lookup",
          "image",
          "vectorinput",
          "vectors"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.066998
          },
          {
            "term": "collection",
            "tf": 23,
            "weight": 0.057072
          },
          {
            "term": "name",
            "tf": 23,
            "weight": 0.057072
          },
          {
            "term": "client",
            "tf": 17,
            "weight": 0.042184
          },
          {
            "term": "external",
            "tf": 15,
            "weight": 0.037221
          },
          {
            "term": "vector",
            "tf": 13,
            "weight": 0.032258
          },
          {
            "term": "query",
            "tf": 11,
            "weight": 0.027295
          },
          {
            "term": "the",
            "tf": 10,
            "weight": 0.024814
          },
          {
            "term": "positive",
            "tf": 8,
            "weight": 0.019851
          },
          {
            "term": "from",
            "tf": 7,
            "weight": 0.01737
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.01737
          },
          {
            "term": "231",
            "tf": 7,
            "weight": 0.01737
          },
          {
            "term": "negative",
            "tf": 7,
            "weight": 0.01737
          },
          {
            "term": "718",
            "tf": 7,
            "weight": 0.01737
          },
          {
            "term": "using",
            "tf": 7,
            "weight": 0.01737
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.01737
          },
          {
            "term": "lookup",
            "tf": 6,
            "weight": 0.014888
          },
          {
            "term": "image",
            "tf": 6,
            "weight": 0.014888
          },
          {
            "term": "vectorinput",
            "tf": 6,
            "weight": 0.014888
          },
          {
            "term": "vectors",
            "tf": 5,
            "weight": 0.012407
          }
        ],
        "unique_terms": 127,
        "total_terms": 403
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Lookup vectors from another collection",
        "client",
        "collection",
        "external",
        "from",
        "name",
        "positive",
        "qdrant",
        "query",
        "the",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.7012307692307693,
      "overall": 0.7670769230769231
    }
  },
  {
    "text": "## Batch recommendation API\n\n*Available as of v0.10.0*\n\nSimilar to the batch search API in terms of usage and advantages, it enables the batching of recommendation requests.\n\n```http\nPOST /collections/{collection_name}/query/batch\n{\n  \"searches\": [\n    {\n      \"query\": {\n        \"recommend\": {\n          \"positive\": [100, 231],\n          \"negative\": [718]\n        }\n      },\n      \"filter\": {\n        \"must\": [\n          {\n            \"key\": \"city\",\n            \"match\": {\n              \"value\": \"London\"\n            }\n          }\n        ]\n      },\n      \"limit\": 10\n    },\n    {\n      \"query\": {\n        \"recommend\": {\n          \"positive\": [200, 67],\n          \"negative\": [300]\n        }\n      },\n      \"filter\": {\n        \"must\": [\n          {\n            \"key\": \"city\",\n            \"match\": {\n              \"value\": \"London\"\n            }\n          }\n        ]\n      },\n      \"limit\": 10\n    }\n  ]\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nfilter_ = models.Filter(\n    must=[\n        models.FieldCondition(\n            key=\"city\",\n            match=models.MatchValue(\n                value=\"London\",\n            ),\n        )\n    ]\n)\n\nrecommend_queries = [\n    models.QueryRequest(\n        query=models.RecommendQuery(\n            recommend=models.RecommendInput(positive=[100, 231], negative=[718])\n        ),\n        filter=filter_,\n        limit=3,\n    ),\n    models.QueryRequest(\n        query=models.RecommendQuery(\n            recommend=models.RecommendInput(positive=[200, 67], negative=[300])\n        ),\n        filter=filter_,\n        limit=3,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=recommend_queries\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst filter = {\n    must: [\n        {\n            key: \"city\",\n            match: {\n                value: \"London\",\n            },\n        },\n    ],\n};\n\nconst searches = [\n    {\n        query: {\n            recommend: {\n                positive: [100, 231],\n                negative: [718]\n            }\n        },\n        filter,\n        limit: 3,\n    },\n    {\n        query: {\n            recommend: {\n                positive: [200, 67],\n                negative: [300]\n            }\n        },\n        filter,\n        limit: 3,\n    },\n];\n\nclient.queryBatch(\"{collection_name}\", {\n    searches,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    Condition, Filter, QueryBatchPointsBuilder, QueryPointsBuilder,\n    RecommendInputBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet filter = Filter::must([Condition::matches(\"city\", \"London\".to_string())]);\n\nlet recommend_queries = vec![\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(\n            RecommendInputBuilder::default()\n                .add_positive(100)\n                .add_positive(231)\n                .add_negative(718)\n                .build(),\n        )\n        .filter(filter.clone())\n        .build(),\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(\n            RecommendInputBuilder::default()\n                .add_positive(200)\n                .add_positive(67)\n                .add_negative(300)\n                .build(),\n        )\n        .filter(filter)\n        .build(),\n];\n\nclient\n    .query_batch(QueryBatchPointsBuilder::new(\n        \"{collection_name}\",\n        recommend_queries,\n    ))\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nFilter filter = Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build();",
    "metadata": {
      "chunk_id": "95b82acb124e-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Batch recommendation API"
      ],
      "heading_text": "Batch recommendation API",
      "token_count": 962,
      "char_count": 4196,
      "start_char": 28963,
      "end_char": 33159,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6529411764705881,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.582946",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Batch recommendation API",
      "chunk_hash": "2bab92322e0fddbf",
      "content_digest": "2bab92322e0fddbf",
      "chunk_length": 4196,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "filter",
          "client",
          "qdrant",
          "query",
          "recommend",
          "import",
          "positive",
          "models",
          "negative",
          "collection",
          "name",
          "qdrantclient",
          "build",
          "city",
          "london",
          "limit",
          "add",
          "batch",
          "must",
          "new"
        ],
        "term_weights": [
          {
            "term": "filter",
            "tf": 22,
            "weight": 0.067485
          },
          {
            "term": "client",
            "tf": 19,
            "weight": 0.058282
          },
          {
            "term": "qdrant",
            "tf": 15,
            "weight": 0.046012
          },
          {
            "term": "query",
            "tf": 11,
            "weight": 0.033742
          },
          {
            "term": "recommend",
            "tf": 11,
            "weight": 0.033742
          },
          {
            "term": "import",
            "tf": 11,
            "weight": 0.033742
          },
          {
            "term": "positive",
            "tf": 10,
            "weight": 0.030675
          },
          {
            "term": "models",
            "tf": 10,
            "weight": 0.030675
          },
          {
            "term": "negative",
            "tf": 8,
            "weight": 0.02454
          },
          {
            "term": "collection",
            "tf": 7,
            "weight": 0.021472
          },
          {
            "term": "name",
            "tf": 7,
            "weight": 0.021472
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.021472
          },
          {
            "term": "build",
            "tf": 7,
            "weight": 0.021472
          },
          {
            "term": "city",
            "tf": 6,
            "weight": 0.018405
          },
          {
            "term": "london",
            "tf": 6,
            "weight": 0.018405
          },
          {
            "term": "limit",
            "tf": 6,
            "weight": 0.018405
          },
          {
            "term": "add",
            "tf": 6,
            "weight": 0.018405
          },
          {
            "term": "batch",
            "tf": 5,
            "weight": 0.015337
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.015337
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.015337
          }
        ],
        "unique_terms": 92,
        "total_terms": 326
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Batch recommendation API",
        "client",
        "collection",
        "filter",
        "import",
        "models",
        "negative",
        "positive",
        "qdrant",
        "query",
        "recommend"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6529411764705881,
      "overall": 0.7176470588235292
    }
  },
  {
    "text": "## Discovery API  *Available as of v1.7*  REST API Schema definition available [here](https://api.qdrant.tech/api-reference/search/discover-points)  In this API, Qdrant introduces the concept of `context`, which is used for splitting the space. Context is a set of positive-negative pairs, and each pair divides the space into positive and negative zones. In that mode, the search operation prefers points based on how many positive zones they belong to (or how much they avoid negative zones). The interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs. Discovery API lets you do two new types of search:  - **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context. - **Context search**: Using only the context pairs, get the points that live in the best zone, where loss is minimized  The way positive and negative examples should be arranged in the context pairs is completely up to you. So you can have the flexibility of trying out different permutation techniques based on your model and data. The speed of search is linearly related to the amount of examples you provide in the query.",
    "metadata": {
      "chunk_id": "95b82acb124e-0021",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Discovery API"
      ],
      "heading_text": "Discovery API",
      "token_count": 273,
      "char_count": 1328,
      "start_char": 37017,
      "end_char": 38345,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730985915492959,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.584040",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Discovery API",
      "chunk_hash": "aa29d687536f5f84",
      "content_digest": "aa29d687536f5f84",
      "chunk_length": 1328,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "context",
          "api",
          "search",
          "positive",
          "negative",
          "pairs",
          "and",
          "points",
          "you",
          "discovery",
          "zones",
          "they",
          "available",
          "qdrant",
          "this",
          "for",
          "space",
          "that",
          "based"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 21,
            "weight": 0.117318
          },
          {
            "term": "context",
            "tf": 8,
            "weight": 0.044693
          },
          {
            "term": "api",
            "tf": 7,
            "weight": 0.039106
          },
          {
            "term": "search",
            "tf": 6,
            "weight": 0.03352
          },
          {
            "term": "positive",
            "tf": 6,
            "weight": 0.03352
          },
          {
            "term": "negative",
            "tf": 6,
            "weight": 0.03352
          },
          {
            "term": "pairs",
            "tf": 5,
            "weight": 0.027933
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.027933
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.022346
          },
          {
            "term": "you",
            "tf": 4,
            "weight": 0.022346
          },
          {
            "term": "discovery",
            "tf": 3,
            "weight": 0.01676
          },
          {
            "term": "zones",
            "tf": 3,
            "weight": 0.01676
          },
          {
            "term": "they",
            "tf": 3,
            "weight": 0.01676
          },
          {
            "term": "available",
            "tf": 2,
            "weight": 0.011173
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.011173
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.011173
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.011173
          },
          {
            "term": "space",
            "tf": 2,
            "weight": 0.011173
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.011173
          },
          {
            "term": "based",
            "tf": 2,
            "weight": 0.011173
          }
        ],
        "unique_terms": 99,
        "total_terms": 179
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Discovery API",
        "and",
        "api",
        "context",
        "negative",
        "pairs",
        "points",
        "positive",
        "search",
        "the",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730985915492959,
      "overall": 0.7576995305164319
    }
  },
  {
    "text": "### Discovery search\n\nThis type of search works specially well for combining multimodal, vector-constrained searches. Qdrant already has extensive support for filters, which constrain the search based on its payload, but using discovery search, you can also constrain the vector space in which the search is performed.\n\nThe formula for the discovery score can be expressed as:\n\n$$ \\text{rank}(v^+, v^-) = \\begin{cases} 1, &\\quad s(v^+) \\geq s(v^-) \\\\\\ -1, &\\quad s(v^+) < s(v^-) \\end{cases} $$ where $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as: $$ \\text{discovery score} = \\text{sigmoid}(s(v\\_t))+ \\sum \\text{rank}(v\\_i^+, v\\_i^-), $$ where $s(v)$ is the similarity function, $v\\_t$ is the target vector, and again $v\\_i^+$ and $v\\_i^-$ are the positive and negative examples, respectively. The sigmoid function is used to normalize the score between 0 and 1 and the sum of ranks is used to penalize vectors that are closer to the negative examples than to the positive ones. In other words, the sum of individual ranks determines how many positive zones a point is in, while the closeness hierarchy comes second.\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"discover\": {\n      \"target\": [0.2, 0.1, 0.9, 0.7],\n      \"context\": [\n        {\n          \"positive\": 100,\n          \"negative\": 718\n        },\n        {\n          \"positive\": 200,\n          \"negative\": 300\n        }\n      ]\n    }\n  },\n  \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\ndiscover_queries = [\n    models.QueryRequest(\n        query=models.DiscoverQuery(\n            discover=models.DiscoverInput(\n                target=[0.2, 0.1, 0.9, 0.7],\n                context=[\n                    models.ContextPair(\n                        positive=100,\n                        negative=718,\n                    ),\n                    models.ContextPair(\n                        positive=200,\n                        negative=300,\n                    ),\n                ],\n            )\n        ),\n        limit=10,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=discover_queries\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        discover: {\n            target: [0.2, 0.1, 0.9, 0.7],\n            context: [\n                {\n                    positive: 100,\n                    negative: 718,\n                },\n                {\n                    positive: 200,\n                    negative: 300,\n                },\n            ],\n        }\n    },\n    limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{ContextInputBuilder, DiscoverInputBuilder, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\").query(\n            DiscoverInputBuilder::new(\n                vec![0.2, 0.1, 0.9, 0.7],\n                ContextInputBuilder::default()\n                    .add_pair(100, 718)\n                    .add_pair(200, 300),\n            )\n            .build(),\n        ),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.ContextInput;\nimport io.qdrant.client.grpc.Points.ContextInputPair;\nimport io.qdrant.client.grpc.Points.DiscoverInput;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.discover;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());",
    "metadata": {
      "chunk_id": "95b82acb124e-0022",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Discovery search"
      ],
      "heading_text": "Discovery search",
      "token_count": 963,
      "char_count": 3930,
      "start_char": 38350,
      "end_char": 42280,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.8796791443850267,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.588038",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Discovery search",
      "chunk_hash": "db5ce084d664a616",
      "content_digest": "db5ce084d664a616",
      "chunk_length": 3930,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "client",
          "qdrant",
          "import",
          "positive",
          "negative",
          "query",
          "qdrantclient",
          "and",
          "points",
          "discover",
          "models",
          "discovery",
          "search",
          "vector",
          "score",
          "target",
          "collection",
          "name",
          "text"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 18,
            "weight": 0.052326
          },
          {
            "term": "client",
            "tf": 18,
            "weight": 0.052326
          },
          {
            "term": "qdrant",
            "tf": 15,
            "weight": 0.043605
          },
          {
            "term": "import",
            "tf": 11,
            "weight": 0.031977
          },
          {
            "term": "positive",
            "tf": 10,
            "weight": 0.02907
          },
          {
            "term": "negative",
            "tf": 9,
            "weight": 0.026163
          },
          {
            "term": "query",
            "tf": 8,
            "weight": 0.023256
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.020349
          },
          {
            "term": "and",
            "tf": 6,
            "weight": 0.017442
          },
          {
            "term": "points",
            "tf": 6,
            "weight": 0.017442
          },
          {
            "term": "discover",
            "tf": 6,
            "weight": 0.017442
          },
          {
            "term": "models",
            "tf": 6,
            "weight": 0.017442
          },
          {
            "term": "discovery",
            "tf": 5,
            "weight": 0.014535
          },
          {
            "term": "search",
            "tf": 5,
            "weight": 0.014535
          },
          {
            "term": "vector",
            "tf": 5,
            "weight": 0.014535
          },
          {
            "term": "score",
            "tf": 5,
            "weight": 0.014535
          },
          {
            "term": "target",
            "tf": 5,
            "weight": 0.014535
          },
          {
            "term": "collection",
            "tf": 5,
            "weight": 0.014535
          },
          {
            "term": "name",
            "tf": 5,
            "weight": 0.014535
          },
          {
            "term": "text",
            "tf": 4,
            "weight": 0.011628
          }
        ],
        "unique_terms": 144,
        "total_terms": 344
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Discovery search",
        "and",
        "client",
        "import",
        "negative",
        "points",
        "positive",
        "qdrant",
        "qdrantclient",
        "query",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.8796791443850267,
      "overall": 0.7598930481283421
    }
  },
  {
    "text": "### Context search\n\nConversely, in the absence of a target, a rigid integer-by-integer function doesn’t provide much guidance for the search when utilizing a proximity graph like HNSW. Instead, context search employs a function derived from the [triplet-loss](https://qdrant.tech/articles/triplet-loss/) concept, which is usually applied during model training. For context search, this function is adapted to steer the search towards areas with fewer negative examples.\n\nWe can directly associate the score function to a loss function, where 0.0 is the maximum score a point can have, which means it is only in positive areas. As soon as a point exists closer to a negative example, its loss will simply be the difference of the positive and negative similarities.\n\n$$ \\text{context score} = \\sum \\min(s(v^+\\_i) - s(v^-\\_i), 0.0) $$\n\nWhere $v^+\\_i$ and $v^-\\_i$ are the positive and negative examples of each pair, and $s(v)$ is the similarity function.\n\nUsing this kind of search, you can expect the output to not necessarily be around a single point, but rather, to be any point that isn’t closer to a negative example, which creates a constrained diverse result. So, even when the API is not called [`recommend`](#recommendation-api.md), recommendation systems can also use this approach and adapt it for their specific use-cases.\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"context\": [\n      {\n        \"positive\": 100,\n        \"negative\": 718\n      },\n      {\n        \"positive\": 200,\n        \"negative\": 300\n      }\n    ]\n  },\n  \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\ndiscover_queries = [\n    models.QueryRequest(\n        query=models.ContextQuery(\n            context=[\n                models.ContextPair(\n                    positive=100,\n                    negative=718,\n                ),\n                models.ContextPair(\n                    positive=200,\n                    negative=300,\n                ),\n            ],\n        ),\n        limit=10,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=discover_queries\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        context: [\n            {\n                positive: 100,\n                negative: 718,\n            },\n            {\n                positive: 200,\n                negative: 300,\n            },\n        ]\n    },\n    limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{ContextInputBuilder, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\").query(\n            ContextInputBuilder::default()\n                .add_pair(100, 718)\n                .add_pair(200, 300)\n                .build(),\n        ),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.ContextInput;\nimport io.qdrant.client.grpc.Points.ContextInputPair;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.context;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(context(ContextInput.newBuilder()\n                .addAllPairs(List.of(\n                        ContextInputPair.newBuilder()\n                                .setPositive(vectorInput(100))\n                                .setNegative(vectorInput(718))\n                                .build(),\n                        ContextInputPair.newBuilder()\n                                .setPositive(vectorInput(200))\n                                .setNegative(vectorInput(300))\n                                .build()))\n                .build()))\n        .setLimit(10)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);",
    "metadata": {
      "chunk_id": "95b82acb124e-0024",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Context search"
      ],
      "heading_text": "Context search",
      "token_count": 965,
      "char_count": 4371,
      "start_char": 45201,
      "end_char": 49572,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.8861256544502618,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.591920",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Context search",
      "chunk_hash": "498ab03096e1b127",
      "content_digest": "498ab03096e1b127",
      "chunk_length": 4371,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "the",
          "negative",
          "import",
          "context",
          "positive",
          "query",
          "qdrantclient",
          "build",
          "search",
          "function",
          "collection",
          "name",
          "and",
          "points",
          "100",
          "718",
          "200",
          "300"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 22,
            "weight": 0.054591
          },
          {
            "term": "qdrant",
            "tf": 17,
            "weight": 0.042184
          },
          {
            "term": "the",
            "tf": 12,
            "weight": 0.029777
          },
          {
            "term": "negative",
            "tf": 11,
            "weight": 0.027295
          },
          {
            "term": "import",
            "tf": 10,
            "weight": 0.024814
          },
          {
            "term": "context",
            "tf": 9,
            "weight": 0.022333
          },
          {
            "term": "positive",
            "tf": 9,
            "weight": 0.022333
          },
          {
            "term": "query",
            "tf": 8,
            "weight": 0.019851
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.019851
          },
          {
            "term": "build",
            "tf": 7,
            "weight": 0.01737
          },
          {
            "term": "search",
            "tf": 6,
            "weight": 0.014888
          },
          {
            "term": "function",
            "tf": 6,
            "weight": 0.014888
          },
          {
            "term": "collection",
            "tf": 6,
            "weight": 0.014888
          },
          {
            "term": "name",
            "tf": 6,
            "weight": 0.014888
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.012407
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.012407
          },
          {
            "term": "100",
            "tf": 5,
            "weight": 0.012407
          },
          {
            "term": "718",
            "tf": 5,
            "weight": 0.012407
          },
          {
            "term": "200",
            "tf": 5,
            "weight": 0.012407
          },
          {
            "term": "300",
            "tf": 5,
            "weight": 0.012407
          }
        ],
        "unique_terms": 171,
        "total_terms": 403
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Context search",
        "build",
        "client",
        "context",
        "import",
        "negative",
        "positive",
        "qdrant",
        "qdrantclient",
        "query",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.8861256544502618,
      "overall": 0.762041884816754
    }
  },
  {
    "text": "## Distance Matrix  *Available as of v1.12.0*  The distance matrix API allows to calculate the distance between sampled pairs of vectors and to return the result as a sparse matrix. Such API enables new data exploration use cases such as clustering similar vectors, visualization of connections or dimension reduction. The API input request consists of the following parameters:  - `sample`: the number of vectors to sample - `limit`: the number of scores to return per sample - `filter`: the filter to apply to constraint the samples  Let’s have a look at a basic example with `sample=100`, `limit=10`:  The engine starts by selecting `100` random points from the collection, then for each of the selected points, it will compute the top `10` closest points **within** the samples. This will results in a total of 1000 scores represented as a sparse matrix for efficient processing. The distance matrix API offers two output formats to ease the integration with different tools.",
    "metadata": {
      "chunk_id": "95b82acb124e-0026",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Distance Matrix"
      ],
      "heading_text": "Distance Matrix",
      "token_count": 202,
      "char_count": 979,
      "start_char": 50898,
      "end_char": 51877,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6817721518987342,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.592552",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Distance Matrix",
      "chunk_hash": "d462f5d7e7eae32d",
      "content_digest": "d462f5d7e7eae32d",
      "chunk_length": 979,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "matrix",
          "distance",
          "api",
          "sample",
          "vectors",
          "points",
          "return",
          "sparse",
          "such",
          "number",
          "limit",
          "scores",
          "filter",
          "samples",
          "with",
          "100",
          "for",
          "will",
          "available"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 16,
            "weight": 0.129032
          },
          {
            "term": "matrix",
            "tf": 5,
            "weight": 0.040323
          },
          {
            "term": "distance",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "api",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "sample",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "points",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "return",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "sparse",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "such",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "number",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "limit",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "scores",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "filter",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "samples",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "100",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "will",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "available",
            "tf": 1,
            "weight": 0.008065
          }
        ],
        "unique_terms": 80,
        "total_terms": 124
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Distance Matrix",
        "api",
        "distance",
        "matrix",
        "points",
        "return",
        "sample",
        "sparse",
        "such",
        "the",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6817721518987342,
      "overall": 0.7939240506329113
    }
  },
  {
    "text": "### Pairwise format\n\nReturns the distance matrix as a list of pairs of point `ids` with their respective score.\n\n```http\nPOST /collections/{collection_name}/points/search/matrix/pairs\n{\n    \"sample\": 10,\n    \"limit\": 2,\n    \"filter\": {\n        \"must\": {\n            \"key\": \"color\",\n            \"match\": { \"value\": \"red\" }\n        }\n    }  \n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.search_matrix_pairs(\n    collection_name=\"{collection_name}\",\n    sample=10,\n    limit=2,\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"color\", match=models.MatchValue(value=\"red\")\n            ),\n        ]\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.searchMatrixPairs(\"{collection_name}\", {\n    filter: {\n        must: [\n            {\n                key: \"color\",\n                match: {\n                    value: \"red\",\n                },\n            },\n        ],\n    },\n    sample: 10,\n    limit: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, SearchMatrixPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .search_matrix_pairs(\n        SearchMatrixPointsBuilder::new(\"collection_name\")\n           .filter(Filter::must(vec![Condition::matches(\n               \"color\",\n               \"red\".to_string(),\n           )]))\n           .sample(10)\n           .limit(2),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.SearchMatrixPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .searchMatrixPairsAsync(\n        Points.SearchMatrixPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n            .setSample(10)\n            .setLimit(2)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchMatrixPairsAsync(\n    collectionName: \"{collection_name}\",\n    filter: MatchKeyword(\"color\", \"red\"),\n    sample: 10,\n    limit: 2\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nsample := uint64(10)\nlimit := uint64(2)\nres, err := client.SearchMatrixPairs(ctx, &qdrant.SearchMatrixPoints{\n    CollectionName: \"{collection_name}\",\n    Sample:         &sample,\n    Limit:          &limit,\n    Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"color\", \"red\"),\n        },\n    },\n})\n```\n\nReturns",
    "metadata": {
      "chunk_id": "95b82acb124e-0027",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Pairwise format"
      ],
      "heading_text": "Pairwise format",
      "token_count": 764,
      "char_count": 3054,
      "start_char": 51883,
      "end_char": 54937,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.6995535714285714,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.595636",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Pairwise format",
      "chunk_hash": "26eedb119135cf2a",
      "content_digest": "26eedb119135cf2a",
      "chunk_length": 3054,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "filter",
          "collection",
          "name",
          "sample",
          "limit",
          "import",
          "qdrantclient",
          "color",
          "red",
          "must",
          "localhost",
          "matrix",
          "pairs",
          "points",
          "models",
          "new",
          "grpc",
          "search"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 24,
            "weight": 0.090909
          },
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.083333
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.045455
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.030303
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.030303
          },
          {
            "term": "sample",
            "tf": 8,
            "weight": 0.030303
          },
          {
            "term": "limit",
            "tf": 8,
            "weight": 0.030303
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.030303
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.030303
          },
          {
            "term": "color",
            "tf": 7,
            "weight": 0.026515
          },
          {
            "term": "red",
            "tf": 7,
            "weight": 0.026515
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.018939
          },
          {
            "term": "localhost",
            "tf": 5,
            "weight": 0.018939
          },
          {
            "term": "matrix",
            "tf": 4,
            "weight": 0.015152
          },
          {
            "term": "pairs",
            "tf": 4,
            "weight": 0.015152
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.015152
          },
          {
            "term": "models",
            "tf": 4,
            "weight": 0.015152
          },
          {
            "term": "new",
            "tf": 4,
            "weight": 0.015152
          },
          {
            "term": "grpc",
            "tf": 4,
            "weight": 0.015152
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.011364
          }
        ],
        "unique_terms": 91,
        "total_terms": 264
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Pairwise format",
        "client",
        "collection",
        "color",
        "filter",
        "import",
        "limit",
        "name",
        "qdrant",
        "qdrantclient",
        "sample"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.6995535714285714,
      "overall": 0.6998511904761905
    }
  },
  {
    "text": "### Offset format\n\nReturns the distance matrix as a four arrays:\n\n- `offsets_row` and `offsets_col`, represent the positions of non-zero distance values in the matrix.\n- `scores` contains the distance values.\n- `ids` contains the point ids corresponding to the distance values.\n\n```http\nPOST /collections/{collection_name}/points/search/matrix/offsets\n{\n    \"sample\": 10,\n    \"limit\": 2,\n    \"filter\": {\n        \"must\": {\n            \"key\": \"color\",\n            \"match\": { \"value\": \"red\" }\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.search_matrix_offsets(\n    collection_name=\"{collection_name}\",\n    sample=10,\n    limit=2,\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"color\", match=models.MatchValue(value=\"red\")\n            ),\n        ]\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.searchMatrixOffsets(\"{collection_name}\", {\n    filter: {\n        must: [\n            {\n                key: \"color\",\n                match: {\n                    value: \"red\",\n                },\n            },\n        ],\n    },\n    sample: 10,\n    limit: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, SearchMatrixPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .search_matrix_offsets(\n        SearchMatrixPointsBuilder::new(\"collection_name\")\n           .filter(Filter::must(vec![Condition::matches(\n               \"color\",\n               \"red\".to_string(),\n           )]))\n           .sample(10)\n           .limit(2),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.SearchMatrixPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .searchMatrixOffsetsAsync(\n        SearchMatrixPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n            .setSample(10)\n            .setLimit(2)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchMatrixOffsetsAsync(\n    collectionName: \"{collection_name}\",\n    filter: MatchKeyword(\"color\", \"red\"),\n    sample: 10,\n    limit: 2\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nsample := uint64(10)\nlimit := uint64(2)\nres, err := client.SearchMatrixOffsets(ctx, &qdrant.SearchMatrixPoints{\n    CollectionName: \"{collection_name}\",\n    Sample:         &sample,\n    Limit:          &limit,\n    Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"color\", \"red\"),\n        },\n    },\n})\n```\n\nReturns",
    "metadata": {
      "chunk_id": "95b82acb124e-0029",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Offset format"
      ],
      "heading_text": "Offset format",
      "token_count": 799,
      "char_count": 3225,
      "start_char": 55783,
      "end_char": 59008,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6955465587044534,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T09:13:57.598110",
      "document_id": "95b82acb124e",
      "document_name": "_documentation_concepts_explore_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_filename": "_documentation_concepts_explore_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "hierarchy_path": "Offset format",
      "chunk_hash": "1187045dcaf13d40",
      "content_digest": "1187045dcaf13d40",
      "chunk_length": 3225,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "filter",
          "collection",
          "name",
          "sample",
          "limit",
          "import",
          "qdrantclient",
          "color",
          "red",
          "the",
          "matrix",
          "offsets",
          "must",
          "localhost",
          "distance",
          "models",
          "new",
          "grpc"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 24,
            "weight": 0.084211
          },
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.077193
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.042105
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "sample",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "limit",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "color",
            "tf": 7,
            "weight": 0.024561
          },
          {
            "term": "red",
            "tf": 7,
            "weight": 0.024561
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.021053
          },
          {
            "term": "matrix",
            "tf": 5,
            "weight": 0.017544
          },
          {
            "term": "offsets",
            "tf": 5,
            "weight": 0.017544
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.017544
          },
          {
            "term": "localhost",
            "tf": 5,
            "weight": 0.017544
          },
          {
            "term": "distance",
            "tf": 4,
            "weight": 0.014035
          },
          {
            "term": "models",
            "tf": 4,
            "weight": 0.014035
          },
          {
            "term": "new",
            "tf": 4,
            "weight": 0.014035
          },
          {
            "term": "grpc",
            "tf": 4,
            "weight": 0.014035
          }
        ],
        "unique_terms": 99,
        "total_terms": 285
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Offset format",
        "client",
        "collection",
        "color",
        "filter",
        "import",
        "limit",
        "name",
        "qdrant",
        "qdrantclient",
        "sample"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6955465587044534,
      "overall": 0.7318488529014844
    }
  }
]