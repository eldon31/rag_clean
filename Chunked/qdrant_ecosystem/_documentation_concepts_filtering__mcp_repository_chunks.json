[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "e8f29afde80c-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1035,
      "end_char": 3003,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.384783",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "e8f29afde80c-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3685,
      "end_char": 5673,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.386002",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "e8f29afde80c-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5675,
      "end_char": 5986,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.386383",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "e8f29afde80c-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6363,
      "end_char": 8331,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.387237",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "e8f29afde80c-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9013,
      "end_char": 11001,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.388392",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "# Filtering\n\nWith Qdrant, you can set conditions when searching or retrieving points. For example, you can impose conditions on both the [payload](https://qdrant.tech/documentation/concepts/payload/) and the `id` of the point.\n\nSetting additional conditions is important when it is impossible to express all the features of the object in the embedding. Examples include a variety of business requirements: stock availability, user location, or desired price range.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0010",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Filtering"
      ],
      "heading_text": "Filtering",
      "token_count": 92,
      "char_count": 464,
      "start_char": 11445,
      "end_char": 11909,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.524375,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.389207",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Filtering",
      "chunk_hash": "1a31c59a53d55000",
      "content_digest": "1a31c59a53d55000",
      "chunk_length": 464,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "conditions",
          "qdrant",
          "you",
          "can",
          "when",
          "payload",
          "filtering",
          "with",
          "set",
          "searching",
          "retrieving",
          "points",
          "for",
          "example",
          "impose",
          "both",
          "https",
          "tech",
          "documentation"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 6,
            "weight": 0.107143
          },
          {
            "term": "conditions",
            "tf": 3,
            "weight": 0.053571
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "when",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "filtering",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "set",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "searching",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "retrieving",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "points",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "example",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "impose",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "both",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "tech",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "documentation",
            "tf": 1,
            "weight": 0.017857
          }
        ],
        "unique_terms": 44,
        "total_terms": 56
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Filtering",
        "can",
        "conditions",
        "filtering",
        "payload",
        "qdrant",
        "set",
        "the",
        "when",
        "with",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.524375,
      "overall": 0.7081249999999999
    }
  },
  {
    "text": "## Related Content  | [A Complete Guide to Filtering in Vector Search](https://qdrant.tech/articles/vector-search-filtering/) | Developer advice on proper usage and advanced practices. | | ------------------------------------------------------------------------------------------------------- | -------------------------------------------------------- |",
    "metadata": {
      "chunk_id": "e8f29afde80c-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Related Content"
      ],
      "heading_text": "Related Content",
      "token_count": 45,
      "char_count": 353,
      "start_char": 11911,
      "end_char": 12264,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5344444444444444,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.389368",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Related Content",
      "chunk_hash": "23f9295954cc451d",
      "content_digest": "23f9295954cc451d",
      "chunk_length": 353,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "filtering",
          "vector",
          "search",
          "related",
          "content",
          "complete",
          "guide",
          "https",
          "qdrant",
          "tech",
          "articles",
          "developer",
          "advice",
          "proper",
          "usage",
          "and",
          "advanced",
          "practices"
        ],
        "term_weights": [
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.095238
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.095238
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.095238
          },
          {
            "term": "related",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "content",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "complete",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "guide",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "qdrant",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "tech",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "articles",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "developer",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "advice",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "proper",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "usage",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "advanced",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "practices",
            "tf": 1,
            "weight": 0.047619
          }
        ],
        "unique_terms": 18,
        "total_terms": 21
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Related Content",
        "complete",
        "content",
        "filtering",
        "guide",
        "https",
        "qdrant",
        "related",
        "search",
        "tech",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5344444444444444,
      "overall": 0.7114814814814814
    }
  },
  {
    "text": "### Must\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"key\": \"city\", \"match\": { \"value\": \"London\" } },\n            { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n        ]\n    }\n    ...\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(value=\"London\"),\n            ),\n            models.FieldCondition(\n                key=\"color\",\n                match=models.MatchValue(value=\"red\"),\n            ),\n        ]\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"city\",\n        match: { value: \"London\" },\n      },\n      {\n        key: \"color\",\n        match: { value: \"red\" },\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([\n            Condition::matches(\"city\", \"london\".to_string()),\n            Condition::matches(\"color\", \"red\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllMust(\n                        List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\n// & operator combines two conditions in an AND conjunction(must)\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"city\", \"London\") & MatchKeyword(\"color\", \"red\")\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\nFiltered points would be:\n\n```json\n[{ \"id\": 2, \"city\": \"London\", \"color\": \"red\" }]\n```\n\nWhen using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied. In this sense, `must` is equivalent to the operator `AND`.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Must"
      ],
      "heading_text": "Must",
      "token_count": 824,
      "char_count": 3293,
      "start_char": 12958,
      "end_char": 16251,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8932584269662922,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.391680",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Must",
      "chunk_hash": "16eacb57060161ba",
      "content_digest": "16eacb57060161ba",
      "chunk_length": 3293,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "filter",
          "must",
          "import",
          "collection",
          "name",
          "city",
          "london",
          "color",
          "red",
          "qdrantclient",
          "scroll",
          "key",
          "match",
          "value",
          "models",
          "localhost",
          "condition",
          "matchkeyword"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 24,
            "weight": 0.07947
          },
          {
            "term": "qdrant",
            "tf": 23,
            "weight": 0.076159
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.039735
          },
          {
            "term": "must",
            "tf": 10,
            "weight": 0.033113
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.029801
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "city",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "london",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "color",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "red",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "match",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "value",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "models",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.016556
          },
          {
            "term": "matchkeyword",
            "tf": 5,
            "weight": 0.016556
          }
        ],
        "unique_terms": 95,
        "total_terms": 302
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Must",
        "city",
        "client",
        "collection",
        "color",
        "filter",
        "import",
        "london",
        "must",
        "name",
        "qdrant"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8932584269662922,
      "overall": 0.8310861423220973
    }
  },
  {
    "text": "### Should\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"should\": [\n            { \"key\": \"city\", \"match\": { \"value\": \"London\" } },\n            { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n        ]\n    }\n}\n```\n\n```python\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        should=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(value=\"London\"),\n            ),\n            models.FieldCondition(\n                key=\"color\",\n                match=models.MatchValue(value=\"red\"),\n            ),\n        ]\n    ),\n)\n```\n\n```typescript\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    should: [\n      {\n        key: \"city\",\n        match: { value: \"London\" },\n      },\n      {\n        key: \"color\",\n        match: { value: \"red\" },\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::should([\n            Condition::matches(\"city\", \"london\".to_string()),\n            Condition::matches(\"color\", \"red\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\nimport java.util.List;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllShould(\n                        List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\n// | operator combines two conditions in an OR disjunction(should)\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"city\", \"London\") | MatchKeyword(\"color\", \"red\")\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tShould: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\nFiltered points would be:\n\n```json\n[\n  { \"id\": 1, \"city\": \"London\", \"color\": \"green\" },\n  { \"id\": 2, \"city\": \"London\", \"color\": \"red\" },\n  { \"id\": 3, \"city\": \"London\", \"color\": \"blue\" },\n  { \"id\": 4, \"city\": \"Berlin\", \"color\": \"red\" }\n]\n```\n\nWhen using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied. In this sense, `should` is equivalent to the operator `OR`.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0014",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Should"
      ],
      "heading_text": "Should",
      "token_count": 772,
      "char_count": 3047,
      "start_char": 16253,
      "end_char": 19300,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8883720930232559,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.393811",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Should",
      "chunk_hash": "39393f9bfd8a4508",
      "content_digest": "39393f9bfd8a4508",
      "chunk_length": 3047,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "filter",
          "city",
          "color",
          "should",
          "london",
          "red",
          "collection",
          "name",
          "scroll",
          "key",
          "match",
          "value",
          "models",
          "condition",
          "import",
          "matchkeyword",
          "points",
          "localhost"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.070896
          },
          {
            "term": "client",
            "tf": 17,
            "weight": 0.063433
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.044776
          },
          {
            "term": "city",
            "tf": 11,
            "weight": 0.041045
          },
          {
            "term": "color",
            "tf": 11,
            "weight": 0.041045
          },
          {
            "term": "should",
            "tf": 10,
            "weight": 0.037313
          },
          {
            "term": "london",
            "tf": 10,
            "weight": 0.037313
          },
          {
            "term": "red",
            "tf": 9,
            "weight": 0.033582
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.029851
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.029851
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.022388
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.022388
          },
          {
            "term": "match",
            "tf": 6,
            "weight": 0.022388
          },
          {
            "term": "value",
            "tf": 6,
            "weight": 0.022388
          },
          {
            "term": "models",
            "tf": 5,
            "weight": 0.018657
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.018657
          },
          {
            "term": "import",
            "tf": 5,
            "weight": 0.018657
          },
          {
            "term": "matchkeyword",
            "tf": 5,
            "weight": 0.018657
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.014925
          },
          {
            "term": "localhost",
            "tf": 3,
            "weight": 0.011194
          }
        ],
        "unique_terms": 92,
        "total_terms": 268
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Should",
        "city",
        "client",
        "collection",
        "color",
        "filter",
        "london",
        "name",
        "qdrant",
        "red",
        "should"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8883720930232559,
      "overall": 0.8294573643410853
    }
  },
  {
    "text": "### Must Not\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must_not\": [\n            { \"key\": \"city\", \"match\": { \"value\": \"London\" } },\n            { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n        ]\n    }\n}\n```\n\n```python\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must_not=[\n            models.FieldCondition(key=\"city\", match=models.MatchValue(value=\"London\")),\n            models.FieldCondition(key=\"color\", match=models.MatchValue(value=\"red\")),\n        ]\n    ),\n)\n```\n\n```typescript\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must_not: [\n      {\n        key: \"city\",\n        match: { value: \"London\" },\n      },\n      {\n        key: \"color\",\n        match: { value: \"red\" },\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must_not([\n            Condition::matches(\"city\", \"london\".to_string()),\n            Condition::matches(\"color\", \"red\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllMustNot(\n                        List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\n// The ! operator negates the condition(must not)\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: !(MatchKeyword(\"city\", \"London\") & MatchKeyword(\"color\", \"red\"))\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMustNot: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\nFiltered points would be:\n\n```json\n[\n  { \"id\": 5, \"city\": \"Moscow\", \"color\": \"green\" },\n  { \"id\": 6, \"city\": \"Moscow\", \"color\": \"blue\" }\n]\n```\n\nWhen using `must_not`, the clause becomes `true` if none of the conditions listed inside `must_not` is satisfied. In this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0015",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Must Not"
      ],
      "heading_text": "Must Not",
      "token_count": 743,
      "char_count": 2891,
      "start_char": 19302,
      "end_char": 22193,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9004098360655739,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.395554",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Must Not",
      "chunk_hash": "c3a758ee4fbba192",
      "content_digest": "c3a758ee4fbba192",
      "chunk_length": 2891,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "not",
          "filter",
          "must",
          "city",
          "color",
          "collection",
          "name",
          "london",
          "red",
          "scroll",
          "key",
          "match",
          "value",
          "models",
          "condition",
          "import",
          "matchkeyword",
          "the"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.069343
          },
          {
            "term": "client",
            "tf": 17,
            "weight": 0.062044
          },
          {
            "term": "not",
            "tf": 12,
            "weight": 0.043796
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.043796
          },
          {
            "term": "must",
            "tf": 9,
            "weight": 0.032847
          },
          {
            "term": "city",
            "tf": 9,
            "weight": 0.032847
          },
          {
            "term": "color",
            "tf": 9,
            "weight": 0.032847
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.029197
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.029197
          },
          {
            "term": "london",
            "tf": 7,
            "weight": 0.025547
          },
          {
            "term": "red",
            "tf": 7,
            "weight": 0.025547
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.021898
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.021898
          },
          {
            "term": "match",
            "tf": 6,
            "weight": 0.021898
          },
          {
            "term": "value",
            "tf": 6,
            "weight": 0.021898
          },
          {
            "term": "models",
            "tf": 5,
            "weight": 0.018248
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.018248
          },
          {
            "term": "import",
            "tf": 5,
            "weight": 0.018248
          },
          {
            "term": "matchkeyword",
            "tf": 5,
            "weight": 0.018248
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.018248
          }
        ],
        "unique_terms": 93,
        "total_terms": 274
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Must Not",
        "city",
        "client",
        "collection",
        "color",
        "filter",
        "london",
        "must",
        "name",
        "not",
        "qdrant"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9004098360655739,
      "overall": 0.8334699453551911
    }
  },
  {
    "text": "### Clauses combination\n\nIt is also possible to use several clauses simultaneously:\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"key\": \"city\", \"match\": { \"value\": \"London\" } }\n        ],\n        \"must_not\": [\n            { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n        ]\n    }\n}\n```\n\n```python\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.FieldCondition(key=\"city\", match=models.MatchValue(value=\"London\")),\n        ],\n        must_not=[\n            models.FieldCondition(key=\"color\", match=models.MatchValue(value=\"red\")),\n        ],\n    ),\n)\n```\n\n```typescript\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"city\",\n        match: { value: \"London\" },\n      },\n    ],\n    must_not: [\n      {\n        key: \"color\",\n        match: { value: \"red\" },\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter {\n            must: vec![Condition::matches(\"city\", \"London\".to_string())],\n            must_not: vec![Condition::matches(\"color\", \"red\".to_string())],\n            ..Default::default()\n        }),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(matchKeyword(\"city\", \"London\"))\n                    .addMustNot(matchKeyword(\"color\", \"red\"))\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"city\", \"London\") & !MatchKeyword(\"color\", \"red\")\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t},\n\t\tMustNot: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"color\", \"red\"),\n\t\t},\n\t},\n})\n```\n\nFiltered points would be:\n\n```json\n[\n  { \"id\": 1, \"city\": \"London\", \"color\": \"green\" },\n  { \"id\": 3, \"city\": \"London\", \"color\": \"blue\" }\n]\n```\n\nIn this case, the conditions are combined by `AND`.\n\nAlso, the conditions could be recursively nested. Example:\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must_not\": [\n            {\n                \"must\": [\n                    { \"key\": \"city\", \"match\": { \"value\": \"London\" } },\n                    { \"key\": \"color\", \"match\": { \"value\": \"red\" } }\n                ]\n            }\n        ]\n    }\n}\n```\n\n```python\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must_not=[\n            models.Filter(\n                must=[\n                    models.FieldCondition(\n                        key=\"city\", match=models.MatchValue(value=\"London\")\n                    ),\n                    models.FieldCondition(\n                        key=\"color\", match=models.MatchValue(value=\"red\")\n                    ),\n                ],\n            ),\n        ],\n    ),\n)\n```\n\n```typescript\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must_not: [\n      {\n        must: [\n          {\n            key: \"city\",\n            match: { value: \"London\" },\n          },\n          {\n            key: \"color\",\n            match: { value: \"red\" },\n          },\n        ],\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};",
    "metadata": {
      "chunk_id": "e8f29afde80c-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Clauses combination"
      ],
      "heading_text": "Clauses combination",
      "token_count": 977,
      "char_count": 4079,
      "start_char": 22195,
      "end_char": 26274,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.8445121951219512,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.399288",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Clauses combination",
      "chunk_hash": "25f4e8b5044bea6a",
      "content_digest": "25f4e8b5044bea6a",
      "chunk_length": 4079,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "filter",
          "client",
          "must",
          "collection",
          "name",
          "key",
          "city",
          "match",
          "value",
          "london",
          "color",
          "models",
          "scroll",
          "red",
          "not",
          "condition",
          "points",
          "matchkeyword",
          "fieldcondition"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.056886
          },
          {
            "term": "filter",
            "tf": 18,
            "weight": 0.053892
          },
          {
            "term": "client",
            "tf": 18,
            "weight": 0.053892
          },
          {
            "term": "must",
            "tf": 15,
            "weight": 0.04491
          },
          {
            "term": "collection",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "name",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "key",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "city",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "match",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "value",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "london",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "color",
            "tf": 12,
            "weight": 0.035928
          },
          {
            "term": "models",
            "tf": 11,
            "weight": 0.032934
          },
          {
            "term": "scroll",
            "tf": 10,
            "weight": 0.02994
          },
          {
            "term": "red",
            "tf": 10,
            "weight": 0.02994
          },
          {
            "term": "not",
            "tf": 7,
            "weight": 0.020958
          },
          {
            "term": "condition",
            "tf": 6,
            "weight": 0.017964
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.01497
          },
          {
            "term": "matchkeyword",
            "tf": 5,
            "weight": 0.01497
          },
          {
            "term": "fieldcondition",
            "tf": 4,
            "weight": 0.011976
          }
        ],
        "unique_terms": 89,
        "total_terms": 334
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Clauses combination",
        "city",
        "client",
        "collection",
        "filter",
        "key",
        "match",
        "must",
        "name",
        "qdrant",
        "value"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.8445121951219512,
      "overall": 0.748170731707317
    }
  },
  {
    "text": "### Match\n\n```json\n{\n  \"key\": \"color\",\n  \"match\": {\n    \"value\": \"red\"\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"color\",\n    match=models.MatchValue(value=\"red\"),\n)\n```\n\n```typescript\n{\n    key: 'color', \n    match: {value: 'red'}\n}\n```\n\n```rust\nCondition::matches(\"color\", \"red\".to_string())\n```\n\n```java\nmatchKeyword(\"color\", \"red\");\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatchKeyword(\"color\", \"red\");\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatch(\"color\", \"red\")\n```\n\nFor the other types, the match condition will look exactly the same, except for the type used:\n\n```json\n{\n  \"key\": \"count\",\n  \"match\": {\n    \"value\": 0\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"count\",\n    match=models.MatchValue(value=0),\n)\n```\n\n```typescript\n{\n    key: 'count',\n    match: {value: 0}    \n}\n```\n\n```rust\nCondition::matches(\"count\", 0)\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.match;\n\nmatch(\"count\", 0);\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatch(\"count\", 0);\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchInt(\"count\", 0)\n```\n\nThe simplest kind of condition is one that checks if the stored value equals the given one. If several values are stored, at least one of them should match the condition. You can apply it to [keyword](https://qdrant.tech/documentation/concepts/payload/#keyword), [integer](https://qdrant.tech/documentation/concepts/payload/#integer) and [bool](https://qdrant.tech/documentation/concepts/payload/#bool) payloads.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Match"
      ],
      "heading_text": "Match",
      "token_count": 441,
      "char_count": 1565,
      "start_char": 28804,
      "end_char": 30369,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5100070063694268,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.400571",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Match",
      "chunk_hash": "524469c9933334cb",
      "content_digest": "524469c9933334cb",
      "chunk_length": 1565,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "match",
          "qdrant",
          "the",
          "color",
          "value",
          "red",
          "count",
          "key",
          "condition",
          "client",
          "models",
          "static",
          "import",
          "one",
          "https",
          "tech",
          "documentation",
          "concepts",
          "payload",
          "json"
        ],
        "term_weights": [
          {
            "term": "match",
            "tf": 12,
            "weight": 0.068966
          },
          {
            "term": "qdrant",
            "tf": 12,
            "weight": 0.068966
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.045977
          },
          {
            "term": "color",
            "tf": 7,
            "weight": 0.04023
          },
          {
            "term": "value",
            "tf": 7,
            "weight": 0.04023
          },
          {
            "term": "red",
            "tf": 7,
            "weight": 0.04023
          },
          {
            "term": "count",
            "tf": 7,
            "weight": 0.04023
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.034483
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.028736
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.028736
          },
          {
            "term": "models",
            "tf": 4,
            "weight": 0.022989
          },
          {
            "term": "static",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "one",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "concepts",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "payload",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "json",
            "tf": 2,
            "weight": 0.011494
          }
        ],
        "unique_terms": 69,
        "total_terms": 174
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Match",
        "client",
        "color",
        "condition",
        "count",
        "key",
        "match",
        "qdrant",
        "red",
        "the",
        "value"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5100070063694268,
      "overall": 0.7033356687898089
    }
  },
  {
    "text": "### Match Any\n\n*Available as of v1.1.0*\n\nIn case you want to check if the stored value is one of multiple values, you can use the Match Any condition. Match Any works as a logical OR for the given values. It can also be described as a `IN` operator.\n\nYou can apply it to [keyword](https://qdrant.tech/documentation/concepts/payload/#keyword) and [integer](https://qdrant.tech/documentation/concepts/payload/#integer) payloads.\n\nExample:\n\n```json\n{\n  \"key\": \"color\",\n  \"match\": {\n    \"any\": [\"black\", \"yellow\"]\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"color\",\n    match=models.MatchAny(any=[\"black\", \"yellow\"]),\n)\n```\n\n```typescript\n{\n    key: 'color',\n    match: {any: ['black', 'yellow']}    \n}\n```\n\n```rust\nCondition::matches(\"color\", vec![\"black\".to_string(), \"yellow\".to_string()])\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeywords;\n\nmatchKeywords(\"color\", List.of(\"black\", \"yellow\"));\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatch(\"color\", [\"black\", \"yellow\"]);\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchKeywords(\"color\", \"black\", \"yellow\")\n```\n\nIn this example, the condition will be satisfied if the stored value is either `black` or `yellow`.\n\nIf the stored value is an array, it should have at least one value matching any of the given values. E.g. if the stored value is `[\"black\", \"green\"]`, the condition will be satisfied, because `\"black\"` is in `[\"black\", \"yellow\"]`.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0020",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Match Any"
      ],
      "heading_text": "Match Any",
      "token_count": 386,
      "char_count": 1468,
      "start_char": 30371,
      "end_char": 31839,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.7059162790697674,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.401174",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Match Any",
      "chunk_hash": "d55bdcaca5684743",
      "content_digest": "d55bdcaca5684743",
      "chunk_length": 1468,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "black",
          "the",
          "yellow",
          "match",
          "any",
          "qdrant",
          "color",
          "value",
          "stored",
          "condition",
          "you",
          "values",
          "can",
          "key",
          "client",
          "one",
          "given",
          "keyword",
          "https",
          "tech"
        ],
        "term_weights": [
          {
            "term": "black",
            "tf": 11,
            "weight": 0.068323
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.055901
          },
          {
            "term": "yellow",
            "tf": 9,
            "weight": 0.055901
          },
          {
            "term": "match",
            "tf": 7,
            "weight": 0.043478
          },
          {
            "term": "any",
            "tf": 7,
            "weight": 0.043478
          },
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.043478
          },
          {
            "term": "color",
            "tf": 7,
            "weight": 0.043478
          },
          {
            "term": "value",
            "tf": 5,
            "weight": 0.031056
          },
          {
            "term": "stored",
            "tf": 4,
            "weight": 0.024845
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.024845
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "values",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "client",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "one",
            "tf": 2,
            "weight": 0.012422
          },
          {
            "term": "given",
            "tf": 2,
            "weight": 0.012422
          },
          {
            "term": "keyword",
            "tf": 2,
            "weight": 0.012422
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.012422
          },
          {
            "term": "tech",
            "tf": 2,
            "weight": 0.012422
          }
        ],
        "unique_terms": 74,
        "total_terms": 161
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Match Any",
        "any",
        "black",
        "color",
        "condition",
        "match",
        "qdrant",
        "stored",
        "the",
        "value",
        "yellow"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.7059162790697674,
      "overall": 0.8019720930232558
    }
  },
  {
    "text": "### Match Except\n\n*Available as of v1.2.0*\n\nIn case you want to check if the stored value is not one of multiple values, you can use the Match Except condition. Match Except works as a logical NOR for the given values. It can also be described as a `NOT IN` operator.\n\nYou can apply it to [keyword](https://qdrant.tech/documentation/concepts/payload/#keyword) and [integer](https://qdrant.tech/documentation/concepts/payload/#integer) payloads.\n\nExample:\n\n```json\n{\n  \"key\": \"color\",\n  \"match\": {\n    \"except\": [\"black\", \"yellow\"]\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"color\",\n    match=models.MatchExcept(**{\"except\": [\"black\", \"yellow\"]}),\n)\n```\n\n```typescript\n{\n    key: 'color',\n    match: {except: ['black', 'yellow']}\n}\n```\n\n```rust\nuse qdrant_client::qdrant::r#match::MatchValue;\n\nCondition::matches(\n    \"color\",\n    !MatchValue::from(vec![\"black\".to_string(), \"yellow\".to_string()]),\n)\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchExceptKeywords;\n\nmatchExceptKeywords(\"color\", List.of(\"black\", \"yellow\"));\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatch(\"color\", [\"black\", \"yellow\"]);\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchExcept(\"color\", \"black\", \"yellow\")\n```\n\nIn this example, the condition will be satisfied if the stored value is neither `black` nor `yellow`.\n\nIf the stored value is an array, it should have at least one value not matching any of the given values. E.g. if the stored value is `[\"black\", \"green\"]`, the condition will be satisfied, because `\"green\"` does not match `\"black\"` nor `\"yellow\"`.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0021",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Match Except"
      ],
      "heading_text": "Match Except",
      "token_count": 422,
      "char_count": 1608,
      "start_char": 31841,
      "end_char": 33449,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.7161604395604396,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.401827",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Match Except",
      "chunk_hash": "b36587c1aabfe756",
      "content_digest": "b36587c1aabfe756",
      "chunk_length": 1608,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "black",
          "match",
          "the",
          "qdrant",
          "yellow",
          "color",
          "except",
          "value",
          "stored",
          "not",
          "condition",
          "client",
          "you",
          "values",
          "can",
          "nor",
          "key",
          "one",
          "use",
          "given"
        ],
        "term_weights": [
          {
            "term": "black",
            "tf": 10,
            "weight": 0.05618
          },
          {
            "term": "match",
            "tf": 9,
            "weight": 0.050562
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.050562
          },
          {
            "term": "qdrant",
            "tf": 9,
            "weight": 0.050562
          },
          {
            "term": "yellow",
            "tf": 9,
            "weight": 0.050562
          },
          {
            "term": "color",
            "tf": 7,
            "weight": 0.039326
          },
          {
            "term": "except",
            "tf": 6,
            "weight": 0.033708
          },
          {
            "term": "value",
            "tf": 5,
            "weight": 0.02809
          },
          {
            "term": "stored",
            "tf": 4,
            "weight": 0.022472
          },
          {
            "term": "not",
            "tf": 4,
            "weight": 0.022472
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.022472
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.022472
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "values",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "nor",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "one",
            "tf": 2,
            "weight": 0.011236
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.011236
          },
          {
            "term": "given",
            "tf": 2,
            "weight": 0.011236
          }
        ],
        "unique_terms": 80,
        "total_terms": 178
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Match Except",
        "black",
        "color",
        "except",
        "match",
        "not",
        "qdrant",
        "stored",
        "the",
        "value",
        "yellow"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.7161604395604396,
      "overall": 0.805386813186813
    }
  },
  {
    "text": "### Nested key\n\n*Available as of v1.1.0*\n\nPayloads being arbitrary JSON object, it is likely that you will need to filter on a nested field.\n\nFor convenience, we use a syntax similar to what can be found in the [Jq](https://stedolan.github.io/jq/manual/#Basicfilters) project.\n\nSuppose we have a set of points with the following payload:\n\n```json\n[\n  {\n    \"id\": 1,\n    \"country\": {\n      \"name\": \"Germany\",\n      \"cities\": [\n        {\n          \"name\": \"Berlin\",\n          \"population\": 3.7,\n          \"sightseeing\": [\"Brandenburg Gate\", \"Reichstag\"]\n        },\n        {\n          \"name\": \"Munich\",\n          \"population\": 1.5,\n          \"sightseeing\": [\"Marienplatz\", \"Olympiapark\"]\n        }\n      ]\n    }\n  },\n  {\n    \"id\": 2,\n    \"country\": {\n      \"name\": \"Japan\",\n      \"cities\": [\n        {\n          \"name\": \"Tokyo\",\n          \"population\": 9.3,\n          \"sightseeing\": [\"Tokyo Tower\", \"Tokyo Skytree\"]\n        },\n        {\n          \"name\": \"Osaka\",\n          \"population\": 2.7,\n          \"sightseeing\": [\"Osaka Castle\", \"Universal Studios Japan\"]\n        }\n      ]\n    }\n  }\n]\n```\n\nYou can search on a nested field using a dot notation.\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"should\": [\n            {\n                \"key\": \"country.name\",\n                \"match\": {\n                    \"value\": \"Germany\"\n                }\n            }\n        ]\n    }\n}\n```\n\n```python\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        should=[\n            models.FieldCondition(\n                key=\"country.name\", match=models.MatchValue(value=\"Germany\")\n            ),\n        ],\n    ),\n)\n```\n\n```typescript\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    should: [\n      {\n        key: \"country.name\",\n        match: { value: \"Germany\" },\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::should([\n            Condition::matches(\"country.name\", \"Germany\".to_string()),\n        ])),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addShould(matchKeyword(\"country.name\", \"Germany\"))\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(collectionName: \"{collection_name}\", filter: MatchKeyword(\"country.name\", \"Germany\"));\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tShould: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"country.name\", \"Germany\"),\n\t\t},\n\t},\n})\n```\n\nYou can also search through arrays by projecting inner values using the `[]` syntax.\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"should\": [\n            {\n                \"key\": \"country.cities[].population\",\n                \"range\": {\n                    \"gte\": 9.0,\n                }\n            }\n        ]\n    }\n}\n```\n\n```python\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        should=[\n            models.FieldCondition(\n                key=\"country.cities[].population\",\n                range=models.Range(\n                    gt=None,\n                    gte=9.0,\n                    lt=None,\n                    lte=None,\n                ),\n            ),\n        ],\n    ),\n)\n```",
    "metadata": {
      "chunk_id": "e8f29afde80c-0022",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Nested key"
      ],
      "heading_text": "Nested key",
      "token_count": 959,
      "char_count": 4047,
      "start_char": 33451,
      "end_char": 37498,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6824074074074074,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.407748",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Nested key",
      "chunk_hash": "a4c25ce432ce083b",
      "content_digest": "a4c25ce432ce083b",
      "chunk_length": 4047,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "name",
          "client",
          "filter",
          "qdrant",
          "country",
          "collection",
          "scroll",
          "germany",
          "should",
          "key",
          "population",
          "models",
          "points",
          "using",
          "cities",
          "sightseeing",
          "import",
          "grpc",
          "nested",
          "you"
        ],
        "term_weights": [
          {
            "term": "name",
            "tf": 24,
            "weight": 0.075472
          },
          {
            "term": "client",
            "tf": 17,
            "weight": 0.053459
          },
          {
            "term": "filter",
            "tf": 16,
            "weight": 0.050314
          },
          {
            "term": "qdrant",
            "tf": 16,
            "weight": 0.050314
          },
          {
            "term": "country",
            "tf": 11,
            "weight": 0.034591
          },
          {
            "term": "collection",
            "tf": 11,
            "weight": 0.034591
          },
          {
            "term": "scroll",
            "tf": 9,
            "weight": 0.028302
          },
          {
            "term": "germany",
            "tf": 8,
            "weight": 0.025157
          },
          {
            "term": "should",
            "tf": 7,
            "weight": 0.022013
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.018868
          },
          {
            "term": "population",
            "tf": 6,
            "weight": 0.018868
          },
          {
            "term": "models",
            "tf": 6,
            "weight": 0.018868
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.015723
          },
          {
            "term": "using",
            "tf": 5,
            "weight": 0.015723
          },
          {
            "term": "cities",
            "tf": 4,
            "weight": 0.012579
          },
          {
            "term": "sightseeing",
            "tf": 4,
            "weight": 0.012579
          },
          {
            "term": "import",
            "tf": 4,
            "weight": 0.012579
          },
          {
            "term": "grpc",
            "tf": 4,
            "weight": 0.012579
          },
          {
            "term": "nested",
            "tf": 3,
            "weight": 0.009434
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.009434
          }
        ],
        "unique_terms": 124,
        "total_terms": 318
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Nested key",
        "client",
        "collection",
        "country",
        "filter",
        "germany",
        "key",
        "name",
        "qdrant",
        "scroll",
        "should"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6824074074074074,
      "overall": 0.727469135802469
    }
  },
  {
    "text": "### Nested object filter\n\n*Available as of v1.2.0*\n\nBy default, the conditions are taking into account the entire payload of a point.\n\nFor instance, given two points with the following payload:\n\n```json\n[\n  {\n    \"id\": 1,\n    \"dinosaur\": \"t-rex\",\n    \"diet\": [\n      { \"food\": \"leaves\", \"likes\": false},\n      { \"food\": \"meat\", \"likes\": true}\n    ]\n  },\n  {\n    \"id\": 2,\n    \"dinosaur\": \"diplodocus\",\n    \"diet\": [\n      { \"food\": \"leaves\", \"likes\": true},\n      { \"food\": \"meat\", \"likes\": false}\n    ]\n  }\n]\n```\n\nThe following query would match both points:\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"diet[].food\",\n                  \"match\": {\n                    \"value\": \"meat\"\n                }\n            },\n            {\n                \"key\": \"diet[].likes\",\n                  \"match\": {\n                    \"value\": true\n                }\n            }\n        ]\n    }\n}\n```\n\n```python\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"diet[].food\", match=models.MatchValue(value=\"meat\")\n            ),\n            models.FieldCondition(\n                key=\"diet[].likes\", match=models.MatchValue(value=True)\n            ),\n        ],\n    ),\n)\n```\n\n```typescript\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        key: \"diet[].food\",\n        match: { value: \"meat\" },\n      },\n      {\n        key: \"diet[].likes\",\n        match: { value: true },\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([\n            Condition::matches(\"diet[].food\", \"meat\".to_string()),\n            Condition::matches(\"diet[].likes\", true),\n        ])),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.match;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addAllMust(\n                        List.of(matchKeyword(\"diet[].food\", \"meat\"), match(\"diet[].likes\", true)))\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\tcollectionName: \"{collection_name}\",\n\tfilter: MatchKeyword(\"diet[].food\", \"meat\") & Match(\"diet[].likes\", true)\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"diet[].food\", \"meat\"),\n\t\t\tqdrant.NewMatchBool(\"diet[].likes\", true),\n\t\t},\n\t},\n})\n```\n\nThis happens because both points are matching the two conditions:\n\n- the “t-rex” matches food=meat on `diet[1].food` and likes=true on `diet[1].likes`\n- the “diplodocus” matches food=meat on `diet[1].food` and likes=true on `diet[0].likes`\n\nTo retrieve only the points which are matching the conditions on an array element basis, that is the point with id 1 in this example, you would need to use a nested object filter.\n\nNested object filters allow arrays of objects to be queried independently of each other.\n\nIt is achieved by using the `nested` condition type formed by a payload key to focus on and a filter to apply.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0025",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Nested object filter"
      ],
      "heading_text": "Nested object filter",
      "token_count": 1006,
      "char_count": 4054,
      "start_char": 42076,
      "end_char": 46130,
      "semantic_score": 0.6,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.8760869565217393,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.416161",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Nested object filter",
      "chunk_hash": "0e3853023d3384d8",
      "content_digest": "0e3853023d3384d8",
      "chunk_length": 4054,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "diet",
          "client",
          "qdrant",
          "filter",
          "food",
          "likes",
          "the",
          "meat",
          "true",
          "match",
          "collection",
          "name",
          "import",
          "points",
          "key",
          "scroll",
          "value",
          "must",
          "models",
          "condition"
        ],
        "term_weights": [
          {
            "term": "diet",
            "tf": 20,
            "weight": 0.052632
          },
          {
            "term": "client",
            "tf": 19,
            "weight": 0.05
          },
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.05
          },
          {
            "term": "filter",
            "tf": 15,
            "weight": 0.039474
          },
          {
            "term": "food",
            "tf": 15,
            "weight": 0.039474
          },
          {
            "term": "likes",
            "tf": 15,
            "weight": 0.039474
          },
          {
            "term": "the",
            "tf": 11,
            "weight": 0.028947
          },
          {
            "term": "meat",
            "tf": 11,
            "weight": 0.028947
          },
          {
            "term": "true",
            "tf": 11,
            "weight": 0.028947
          },
          {
            "term": "match",
            "tf": 10,
            "weight": 0.026316
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.021053
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.021053
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.021053
          },
          {
            "term": "points",
            "tf": 7,
            "weight": 0.018421
          },
          {
            "term": "key",
            "tf": 7,
            "weight": 0.018421
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.015789
          },
          {
            "term": "value",
            "tf": 6,
            "weight": 0.015789
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.013158
          },
          {
            "term": "models",
            "tf": 5,
            "weight": 0.013158
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.013158
          }
        ],
        "unique_terms": 123,
        "total_terms": 380
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Nested object filter",
        "client",
        "diet",
        "filter",
        "food",
        "likes",
        "match",
        "meat",
        "qdrant",
        "the",
        "true"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.8760869565217393,
      "overall": 0.8253623188405798
    }
  },
  {
    "text": "### Full Text Match\n\n*Available as of v0.10.0*\n\nA special case of the `match` condition is the `text` match condition. It allows you to search for a specific substring, token or phrase within the text field.\n\nExact texts that will match the condition depend on full-text index configuration. Configuration is defined during the index creation and describe at [full-text index](https://qdrant.tech/documentation/concepts/indexing/#full-text-index).\n\nIf there is no full-text index for the field, the condition will work as exact substring match.\n\n```json\n{\n  \"key\": \"description\",\n  \"match\": {\n    \"text\": \"good cheap\"\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"description\",\n    match=models.MatchText(text=\"good cheap\"),\n)\n```\n\n```typescript\n{\n    key: 'description',\n    match: {text: 'good cheap'}    \n}\n```\n\n```rust\nuse qdrant_client::qdrant::Condition;\n\nCondition::matches_text(\"description\", \"good cheap\")\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchText;\n\nmatchText(\"description\", \"good cheap\");\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatchText(\"description\", \"good cheap\");\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchText(\"description\", \"good cheap\")\n```\n\nIf the query has several words, then the condition will be satisfied only if all of them are present in the text.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0028",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Full Text Match"
      ],
      "heading_text": "Full Text Match",
      "token_count": 329,
      "char_count": 1358,
      "start_char": 55189,
      "end_char": 56547,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.5056620253164557,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.418247",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Full Text Match",
      "chunk_hash": "b18bc3f2027835db",
      "content_digest": "b18bc3f2027835db",
      "chunk_length": 1358,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "text",
          "the",
          "match",
          "qdrant",
          "condition",
          "description",
          "good",
          "cheap",
          "full",
          "index",
          "matchtext",
          "client",
          "will",
          "key",
          "for",
          "substring",
          "field",
          "exact",
          "configuration",
          "models"
        ],
        "term_weights": [
          {
            "term": "text",
            "tf": 12,
            "weight": 0.075949
          },
          {
            "term": "the",
            "tf": 10,
            "weight": 0.063291
          },
          {
            "term": "match",
            "tf": 8,
            "weight": 0.050633
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.050633
          },
          {
            "term": "condition",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "description",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "good",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "cheap",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "full",
            "tf": 5,
            "weight": 0.031646
          },
          {
            "term": "index",
            "tf": 5,
            "weight": 0.031646
          },
          {
            "term": "matchtext",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "will",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "substring",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "field",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "exact",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "configuration",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.012658
          }
        ],
        "unique_terms": 74,
        "total_terms": 158
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Full Text Match",
        "cheap",
        "condition",
        "description",
        "full",
        "good",
        "index",
        "match",
        "qdrant",
        "text",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.5056620253164557,
      "overall": 0.7352206751054852
    }
  },
  {
    "text": "### Phrase Match\n\n*Available as of v1.15.0*\n\nA match `phrase` condition also leverages [full-text index](https://qdrant.tech/documentation/concepts/indexing/#full-text-index), to perform exact phrase comparisons. It allows you to search for a specific token phrase within the text field.\n\nFor example, the text `\"quick brown fox\"` will be matched by the query `\"brown fox\"`, but not by `\"fox brown\"`.\n\nThe index must be configured with `phrase_matching` parameter set to `true`. If the index has phrase matching disabled, phrase conditions won't match anything.\n\nIf there is no full-text index for the field, the condition will work as exact substring match.\n\n```json\n{\n  \"key\": \"description\",\n  \"match\": {\n    \"phrase\": \"brown fox\"\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"description\",\n    match=models.MatchPhrase(phrase=\"brown fox\"),\n)\n```\n\n```typescript\n{\n    key: 'description',\n    match: {phrase: 'brown fox'}\n}\n```\n\n```rust\nuse qdrant_client::qdrant::Condition;\n\nCondition::matches_phrase(\"description\", \"brown fox\")\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchPhrase;\n\nmatchPhrase(\"description\", \"brown fox\");\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatchPhrase(\"description\", \"brown fox\");\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatchPhrase(\"description\", \"brown fox\")\n```",
    "metadata": {
      "chunk_id": "e8f29afde80c-0029",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Phrase Match"
      ],
      "heading_text": "Phrase Match",
      "token_count": 334,
      "char_count": 1364,
      "start_char": 56549,
      "end_char": 57913,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.7100039215686275,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.418872",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Phrase Match",
      "chunk_hash": "6473b5373bbf34f9",
      "content_digest": "6473b5373bbf34f9",
      "chunk_length": 1364,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "phrase",
          "brown",
          "fox",
          "qdrant",
          "match",
          "the",
          "description",
          "text",
          "index",
          "condition",
          "matchphrase",
          "client",
          "full",
          "for",
          "key",
          "exact",
          "field",
          "will",
          "matching",
          "conditions"
        ],
        "term_weights": [
          {
            "term": "phrase",
            "tf": 11,
            "weight": 0.070064
          },
          {
            "term": "brown",
            "tf": 10,
            "weight": 0.063694
          },
          {
            "term": "fox",
            "tf": 10,
            "weight": 0.063694
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.050955
          },
          {
            "term": "match",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "description",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "text",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "index",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "matchphrase",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "full",
            "tf": 3,
            "weight": 0.019108
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.019108
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.019108
          },
          {
            "term": "exact",
            "tf": 2,
            "weight": 0.012739
          },
          {
            "term": "field",
            "tf": 2,
            "weight": 0.012739
          },
          {
            "term": "will",
            "tf": 2,
            "weight": 0.012739
          },
          {
            "term": "matching",
            "tf": 2,
            "weight": 0.012739
          },
          {
            "term": "conditions",
            "tf": 2,
            "weight": 0.012739
          }
        ],
        "unique_terms": 73,
        "total_terms": 157
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Phrase Match",
        "brown",
        "condition",
        "description",
        "fox",
        "index",
        "match",
        "phrase",
        "qdrant",
        "text",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.7100039215686275,
      "overall": 0.7366679738562091
    }
  },
  {
    "text": "### Range\n\n```json\n{\n  \"key\": \"price\",\n  \"range\": {\n    \"gt\": null,\n    \"gte\": 100.0,\n    \"lt\": null,\n    \"lte\": 450.0\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"price\",\n    range=models.Range(\n        gt=None,\n        gte=100.0,\n        lt=None,\n        lte=450.0,\n    ),\n)\n```\n\n```typescript\n{\n    key: 'price',\n    range: {\n        gt: null,\n        gte: 100.0,\n        lt: null,\n        lte: 450.0    \n    }    \n}\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Range};\n\nCondition::range(\n    \"price\",\n    Range {\n        gt: None,\n        gte: Some(100.0),\n        lt: None,\n        lte: Some(450.0),\n    },\n)\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.range;\n\nimport io.qdrant.client.grpc.Points.Range;\n\nrange(\"price\", Range.newBuilder().setGte(100.0).setLte(450).build());\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nRange(\"price\", new Qdrant.Client.Grpc.Range { Gte = 100.0, Lte = 450 });\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewRange(\"price\", &qdrant.Range{\n\tGte: qdrant.PtrOf(100.0),\n\tLte: qdrant.PtrOf(450.0),\n})\n```\n\nThe `range` condition sets the range of possible values for stored payload values. If several values are stored, at least one of them should match the condition.\n\nComparisons that can be used:\n\n- `gt` - greater than\n- `gte` - greater than or equal\n- `lt` - less than\n- `lte` - less than or equal\n\nCan be applied to [float](https://qdrant.tech/documentation/concepts/payload/#float) and [integer](https://qdrant.tech/documentation/concepts/payload/#integer) payloads.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0030",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Range"
      ],
      "heading_text": "Range",
      "token_count": 479,
      "char_count": 1569,
      "start_char": 57915,
      "end_char": 59484,
      "semantic_score": 0.6,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.5424951807228915,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.419640",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Range",
      "chunk_hash": "0bc0edfca0f462d7",
      "content_digest": "0bc0edfca0f462d7",
      "chunk_length": 1569,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "range",
          "qdrant",
          "price",
          "gte",
          "100",
          "lte",
          "450",
          "client",
          "null",
          "none",
          "condition",
          "than",
          "key",
          "import",
          "grpc",
          "the",
          "values",
          "payload",
          "models",
          "some"
        ],
        "term_weights": [
          {
            "term": "range",
            "tf": 17,
            "weight": 0.098837
          },
          {
            "term": "qdrant",
            "tf": 14,
            "weight": 0.081395
          },
          {
            "term": "price",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "gte",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "lte",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "450",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "client",
            "tf": 6,
            "weight": 0.034884
          },
          {
            "term": "null",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "none",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "than",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "grpc",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "values",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "payload",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.011628
          },
          {
            "term": "some",
            "tf": 2,
            "weight": 0.011628
          }
        ],
        "unique_terms": 69,
        "total_terms": 172
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "100",
        "450",
        "Range",
        "client",
        "gte",
        "lte",
        "none",
        "null",
        "price",
        "qdrant",
        "range"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.5424951807228915,
      "overall": 0.7141650602409637
    }
  },
  {
    "text": "### Datetime Range\n\nThe datetime range is a unique range condition, used for [datetime](https://qdrant.tech/documentation/concepts/payload/#datetime) payloads, which supports RFC 3339 formats. You do not need to convert dates to UNIX timestaps. During comparison, timestamps are parsed and converted to UTC.\n\n*Available as of v1.8.0*\n\n```json\n{\n  \"key\": \"date\",\n  \"range\": {\n    \"gt\": \"2023-02-08T10:49:00Z\",\n    \"gte\": null,\n    \"lt\": null,\n    \"lte\": \"2024-01-31 10:14:31Z\"\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"date\",\n    range=models.DatetimeRange(\n        gt=\"2023-02-08T10:49:00Z\",\n        gte=None,\n        lt=None,\n        lte=\"2024-01-31T10:14:31Z\",\n    ),\n)\n```\n\n```typescript\n{\n    key: 'date',\n    range: {\n        gt: '2023-02-08T10:49:00Z',\n        gte: null,\n        lt: null,\n        lte: '2024-01-31T10:14:31Z'\n    }\n}\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, DatetimeRange, Timestamp};\n\nCondition::datetime_range(\n    \"date\",\n    DatetimeRange {\n        gt: Some(Timestamp::date_time(2023, 2, 8, 10, 49, 0).unwrap()),\n        gte: None,\n        lt: None,\n        lte: Some(Timestamp::date_time(2024, 1, 31, 10, 14, 31).unwrap()),\n    },\n)\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.datetimeRange;\n\nimport com.google.protobuf.Timestamp;\nimport io.qdrant.client.grpc.Points.DatetimeRange;\nimport java.time.Instant;\n\nlong gt = Instant.parse(\"2023-02-08T10:49:00Z\").getEpochSecond();\nlong lte = Instant.parse(\"2024-01-31T10:14:31Z\").getEpochSecond();\n\ndatetimeRange(\"date\",\n    DatetimeRange.newBuilder()\n        .setGt(Timestamp.newBuilder().setSeconds(gt))\n        .setLte(Timestamp.newBuilder().setSeconds(lte))\n        .build());\n```\n\n```csharp\nusing Qdrant.Client.Grpc;\n\nConditions.DatetimeRange(\n    field: \"date\",\n    gt: new DateTime(2023, 2, 8, 10, 49, 0, DateTimeKind.Utc),\n    lte: new DateTime(2024, 1, 31, 10, 14, 31, DateTimeKind.Utc)\n);\n```\n\n```go\nimport (\n\t\"time\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n)\n\nqdrant.NewDatetimeRange(\"date\", &qdrant.DatetimeRange{\n\tGt:  timestamppb.New(time.Date(2023, 2, 8, 10, 49, 0, 0, time.UTC)),\n\tLte: timestamppb.New(time.Date(2024, 1, 31, 10, 14, 31, 0, time.UTC)),\n})\n```",
    "metadata": {
      "chunk_id": "e8f29afde80c-0031",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Datetime Range"
      ],
      "heading_text": "Datetime Range",
      "token_count": 736,
      "char_count": 2237,
      "start_char": 59486,
      "end_char": 61723,
      "semantic_score": 0.6,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.7030303030303031,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.420730",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Datetime Range",
      "chunk_hash": "dc5936bd2b646aa0",
      "content_digest": "dc5936bd2b646aa0",
      "chunk_length": 2237,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "date",
          "qdrant",
          "datetimerange",
          "lte",
          "time",
          "datetime",
          "range",
          "2023",
          "2024",
          "timestamp",
          "utc",
          "client",
          "import",
          "08t10",
          "00z",
          "gte",
          "null",
          "31z",
          "none",
          "new"
        ],
        "term_weights": [
          {
            "term": "date",
            "tf": 11,
            "weight": 0.050228
          },
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.045662
          },
          {
            "term": "datetimerange",
            "tf": 9,
            "weight": 0.041096
          },
          {
            "term": "lte",
            "tf": 8,
            "weight": 0.03653
          },
          {
            "term": "time",
            "tf": 8,
            "weight": 0.03653
          },
          {
            "term": "datetime",
            "tf": 7,
            "weight": 0.031963
          },
          {
            "term": "range",
            "tf": 7,
            "weight": 0.031963
          },
          {
            "term": "2023",
            "tf": 7,
            "weight": 0.031963
          },
          {
            "term": "2024",
            "tf": 7,
            "weight": 0.031963
          },
          {
            "term": "timestamp",
            "tf": 6,
            "weight": 0.027397
          },
          {
            "term": "utc",
            "tf": 5,
            "weight": 0.022831
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.022831
          },
          {
            "term": "import",
            "tf": 5,
            "weight": 0.022831
          },
          {
            "term": "08t10",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "00z",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "gte",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "null",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "31z",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "none",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "new",
            "tf": 4,
            "weight": 0.018265
          }
        ],
        "unique_terms": 91,
        "total_terms": 219
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "2023",
        "2024",
        "Datetime Range",
        "date",
        "datetime",
        "datetimerange",
        "lte",
        "qdrant",
        "range",
        "time",
        "timestamp"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.7030303030303031,
      "overall": 0.701010101010101
    }
  },
  {
    "text": "### UUID Match\n\n*Available as of v1.11.0*\n\nMatching of UUID values works similarly to the regular `match` condition for strings. Functionally, it will work with `keyword` and `uuid` indexes exactly the same, but `uuid` index is more memory efficient.\n\n```json\n{\n  \"key\": \"uuid\",\n  \"match\": {\n    \"value\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"uuid\",\n    match=models.MatchValue(value=\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"),\n)\n```\n\n```typescript\n{\n    key: 'uuid',\n    match: {value: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'}    \n}\n```\n\n```rust\nCondition::matches(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\".to_string())\n```\n\n```java\nmatchKeyword(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\");\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nMatchKeyword(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\");\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewMatch(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\")\n```",
    "metadata": {
      "chunk_id": "e8f29afde80c-0032",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "UUID Match"
      ],
      "heading_text": "UUID Match",
      "token_count": 372,
      "char_count": 996,
      "start_char": 61725,
      "end_char": 62721,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.5557860465116279,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.421301",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "UUID Match",
      "chunk_hash": "1d9777b25ee856b0",
      "content_digest": "1d9777b25ee856b0",
      "chunk_length": 996,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "uuid",
          "f47ac10b",
          "58cc",
          "4372",
          "a567",
          "0e02b2c3d479",
          "match",
          "qdrant",
          "key",
          "value",
          "the",
          "condition",
          "models",
          "matchkeyword",
          "client",
          "available",
          "matching",
          "values",
          "works",
          "similarly"
        ],
        "term_weights": [
          {
            "term": "uuid",
            "tf": 11,
            "weight": 0.099099
          },
          {
            "term": "f47ac10b",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "58cc",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "4372",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "a567",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "0e02b2c3d479",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "match",
            "tf": 5,
            "weight": 0.045045
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.036036
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.027027
          },
          {
            "term": "value",
            "tf": 3,
            "weight": 0.027027
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "condition",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "matchkeyword",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "client",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "available",
            "tf": 1,
            "weight": 0.009009
          },
          {
            "term": "matching",
            "tf": 1,
            "weight": 0.009009
          },
          {
            "term": "values",
            "tf": 1,
            "weight": 0.009009
          },
          {
            "term": "works",
            "tf": 1,
            "weight": 0.009009
          },
          {
            "term": "similarly",
            "tf": 1,
            "weight": 0.009009
          }
        ],
        "unique_terms": 55,
        "total_terms": 111
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "0e02b2c3d479",
        "4372",
        "58cc",
        "UUID Match",
        "a567",
        "f47ac10b",
        "key",
        "match",
        "qdrant",
        "uuid",
        "value"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.5557860465116279,
      "overall": 0.6852620155038759
    }
  },
  {
    "text": "#### Geo Bounding Box\n\n```json\n{\n  \"key\": \"location\",\n  \"geo_bounding_box\": {\n    \"bottom_right\": {\n      \"lon\": 13.455868,\n      \"lat\": 52.495862\n    },\n    \"top_left\": {\n      \"lon\": 13.403683,\n      \"lat\": 52.520711\n    }\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"location\",\n    geo_bounding_box=models.GeoBoundingBox(\n        bottom_right=models.GeoPoint(\n            lon=13.455868,\n            lat=52.495862,\n        ),\n        top_left=models.GeoPoint(\n            lon=13.403683,\n            lat=52.520711,\n        ),\n    ),\n)\n```\n\n```typescript\n{\n    key: 'location',\n    geo_bounding_box: {\n        bottom_right: {\n            lon: 13.455868,\n            lat: 52.495862\n        },\n        top_left: {\n            lon: 13.403683,\n            lat: 52.520711\n        }\n    }\n}\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, GeoBoundingBox, GeoPoint};\n\nCondition::geo_bounding_box(\n    \"location\",\n    GeoBoundingBox {\n        bottom_right: Some(GeoPoint {\n            lon: 13.455868,\n            lat: 52.495862,\n        }),\n        top_left: Some(GeoPoint {\n            lon: 13.403683,\n            lat: 52.520711,\n        }),\n    },\n)\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.geoBoundingBox;\n\ngeoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868);\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nGeoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868);\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewGeoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868)\n```\n\nIt matches with `location`s inside a rectangle with the coordinates of the upper left corner in `bottom_right` and the coordinates of the lower right corner in `top_left`.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0034",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Geo Bounding Box"
      ],
      "heading_text": "Geo Bounding Box",
      "token_count": 514,
      "char_count": 1751,
      "start_char": 62732,
      "end_char": 64483,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6671140939597315,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.422270",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Geo Bounding Box",
      "chunk_hash": "9c819aeb199dc37f",
      "content_digest": "9c819aeb199dc37f",
      "chunk_length": 1751,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "location",
          "lon",
          "lat",
          "455868",
          "495862",
          "403683",
          "520711",
          "qdrant",
          "right",
          "left",
          "geoboundingbox",
          "geo",
          "bounding",
          "box",
          "bottom",
          "top",
          "geopoint",
          "models",
          "client",
          "the"
        ],
        "term_weights": [
          {
            "term": "location",
            "tf": 8,
            "weight": 0.050955
          },
          {
            "term": "lon",
            "tf": 8,
            "weight": 0.050955
          },
          {
            "term": "lat",
            "tf": 8,
            "weight": 0.050955
          },
          {
            "term": "455868",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "495862",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "403683",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "520711",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "right",
            "tf": 6,
            "weight": 0.038217
          },
          {
            "term": "left",
            "tf": 6,
            "weight": 0.038217
          },
          {
            "term": "geoboundingbox",
            "tf": 6,
            "weight": 0.038217
          },
          {
            "term": "geo",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "bounding",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "box",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "bottom",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "top",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "geopoint",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "models",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.025478
          }
        ],
        "unique_terms": 49,
        "total_terms": 157
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "403683",
        "455868",
        "495862",
        "520711",
        "Geo Bounding Box",
        "lat",
        "left",
        "location",
        "lon",
        "qdrant",
        "right"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6671140939597315,
      "overall": 0.7223713646532438
    }
  },
  {
    "text": "#### Geo Radius\n\n```json\n{\n  \"key\": \"location\",\n  \"geo_radius\": {\n    \"center\": {\n      \"lon\": 13.403683,\n      \"lat\": 52.520711\n    },\n    \"radius\": 1000.0\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"location\",\n    geo_radius=models.GeoRadius(\n        center=models.GeoPoint(\n            lon=13.403683,\n            lat=52.520711,\n        ),\n        radius=1000.0,\n    ),\n)\n```\n\n```typescript\n{\n    key: 'location',\n    geo_radius: {\n        center: {\n            lon: 13.403683,\n            lat: 52.520711\n        },\n        radius: 1000.0\n    }    \n}\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, GeoPoint, GeoRadius};\n\nCondition::geo_radius(\n    \"location\",\n    GeoRadius {\n        center: Some(GeoPoint {\n            lon: 13.403683,\n            lat: 52.520711,\n        }),\n        radius: 1000.0,\n    },\n)\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.geoRadius;\n\ngeoRadius(\"location\", 52.520711, 13.403683, 1000.0f);\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nGeoRadius(\"location\", 52.520711, 13.403683, 1000.0f);\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewGeoRadius(\"location\", 52.520711, 13.403683, 1000.0)\n```\n\nIt matches with `location`s inside a circle with the `center` at the center and a radius of `radius` meters.\n\nIf several values are stored, at least one of them should match the condition. These conditions can only be applied to payloads that match the [geo-data format](https://qdrant.tech/documentation/concepts/payload/#geo).",
    "metadata": {
      "chunk_id": "e8f29afde80c-0035",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 35,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Geo Radius"
      ],
      "heading_text": "Geo Radius",
      "token_count": 450,
      "char_count": 1517,
      "start_char": 64485,
      "end_char": 66002,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5356896551724138,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.423045",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Geo Radius",
      "chunk_hash": "6a7cce82dc29ccc3",
      "content_digest": "6a7cce82dc29ccc3",
      "chunk_length": 1517,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "radius",
          "location",
          "qdrant",
          "geo",
          "403683",
          "520711",
          "1000",
          "center",
          "georadius",
          "lon",
          "lat",
          "client",
          "the",
          "key",
          "models",
          "geopoint",
          "condition",
          "import",
          "static",
          "conditions"
        ],
        "term_weights": [
          {
            "term": "radius",
            "tf": 11,
            "weight": 0.075342
          },
          {
            "term": "location",
            "tf": 8,
            "weight": 0.054795
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.054795
          },
          {
            "term": "geo",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "403683",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "520711",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "1000",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "center",
            "tf": 6,
            "weight": 0.041096
          },
          {
            "term": "georadius",
            "tf": 6,
            "weight": 0.041096
          },
          {
            "term": "lon",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "lat",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "geopoint",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "condition",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "static",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "conditions",
            "tf": 2,
            "weight": 0.013699
          }
        ],
        "unique_terms": 63,
        "total_terms": 146
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "1000",
        "403683",
        "520711",
        "Geo Radius",
        "center",
        "geo",
        "georadius",
        "location",
        "lon",
        "qdrant",
        "radius"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5356896551724138,
      "overall": 0.6785632183908046
    }
  },
  {
    "text": "### Values count\n\nIn addition to the direct value comparison, it is also possible to filter by the amount of values.\n\nFor example, given the data:\n\n```json\n[\n  { \"id\": 1, \"name\": \"product A\", \"comments\": [\"Very good!\", \"Excellent\"] },\n  { \"id\": 2, \"name\": \"product B\", \"comments\": [\"meh\", \"expected more\", \"ok\"] }\n]\n```\n\nWe can perform the search only among the items with more than two comments:\n\n```json\n{\n  \"key\": \"comments\",\n  \"values_count\": {\n    \"gt\": 2\n  }\n}\n```\n\n```python\nmodels.FieldCondition(\n    key=\"comments\",\n    values_count=models.ValuesCount(gt=2),\n)\n```\n\n```typescript\n{\n    key: 'comments',\n    values_count: {gt: 2}    \n}\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, ValuesCount};\n\nCondition::values_count(\n    \"comments\",\n    ValuesCount {\n        gt: Some(2),\n        ..Default::default()\n    },\n)\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.valuesCount;\n\nimport io.qdrant.client.grpc.Points.ValuesCount;\n\nvaluesCount(\"comments\", ValuesCount.newBuilder().setGt(2).build());\n```\n\n```csharp\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nValuesCount(\"comments\", new ValuesCount { Gt = 2 });\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewValuesCount(\"comments\", &qdrant.ValuesCount{\n\tGt: qdrant.PtrOf(uint64(2)),\n})\n```\n\nThe result would be:\n\n```json\n[{ \"id\": 2, \"name\": \"product B\", \"comments\": [\"meh\", \"expected more\", \"ok\"] }]\n```\n\nIf stored value is not an array - it is assumed that the amount of values is equals to 1.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0039",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 39,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Values count"
      ],
      "heading_text": "Values count",
      "token_count": 430,
      "char_count": 1513,
      "start_char": 73741,
      "end_char": 75254,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.727876404494382,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.431290",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Values count",
      "chunk_hash": "75a2d1877709f58d",
      "content_digest": "75a2d1877709f58d",
      "chunk_length": 1513,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "comments",
          "qdrant",
          "valuescount",
          "values",
          "the",
          "client",
          "count",
          "json",
          "name",
          "product",
          "more",
          "key",
          "import",
          "grpc",
          "value",
          "amount",
          "meh",
          "expected",
          "models",
          "condition"
        ],
        "term_weights": [
          {
            "term": "comments",
            "tf": 11,
            "weight": 0.075342
          },
          {
            "term": "qdrant",
            "tf": 11,
            "weight": 0.075342
          },
          {
            "term": "valuescount",
            "tf": 10,
            "weight": 0.068493
          },
          {
            "term": "values",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "client",
            "tf": 6,
            "weight": 0.041096
          },
          {
            "term": "count",
            "tf": 5,
            "weight": 0.034247
          },
          {
            "term": "json",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "name",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "product",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "more",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "grpc",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "value",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "amount",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "meh",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "expected",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "condition",
            "tf": 2,
            "weight": 0.013699
          }
        ],
        "unique_terms": 73,
        "total_terms": 146
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Values count",
        "client",
        "comments",
        "count",
        "json",
        "name",
        "product",
        "qdrant",
        "the",
        "values",
        "valuescount"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.727876404494382,
      "overall": 0.7759588014981272
    }
  },
  {
    "text": "### Is Empty\n\nSometimes it is also useful to filter out records that are missing some value. The `IsEmpty` condition may help you with that:\n\n```json\n{\n  \"is_empty\": {\n    \"key\": \"reports\"\n  }\n}\n```\n\n```python\nmodels.IsEmptyCondition(\n    is_empty=models.PayloadField(key=\"reports\"),\n)\n```\n\n```typescript\n{\n  is_empty: {\n    key: \"reports\"\n  }\n}\n```\n\n```rust\nuse qdrant_client::qdrant::Condition;\n\nCondition::is_empty(\"reports\")\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.isEmpty;\n\nisEmpty(\"reports\");\n```\n\n```csharp\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nIsEmpty(\"reports\");\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewIsEmpty(\"reports\")\n```\n\nThis condition will match all records where the field `reports` either does not exist, or has `null` or `[]` value.\n\nThe **IsEmpty** is often useful together with the logical negation **must\\_not**. In this case all non-empty values will be selected.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0040",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 40,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Is Empty"
      ],
      "heading_text": "Is Empty",
      "token_count": 249,
      "char_count": 966,
      "start_char": 75256,
      "end_char": 76222,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5069642857142856,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.431783",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Is Empty",
      "chunk_hash": "b765af92eb706ea1",
      "content_digest": "b765af92eb706ea1",
      "chunk_length": 966,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "reports",
          "qdrant",
          "empty",
          "isempty",
          "client",
          "the",
          "condition",
          "key",
          "useful",
          "records",
          "that",
          "value",
          "with",
          "models",
          "import",
          "static",
          "using",
          "grpc",
          "this",
          "will"
        ],
        "term_weights": [
          {
            "term": "reports",
            "tf": 8,
            "weight": 0.071429
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.071429
          },
          {
            "term": "empty",
            "tf": 6,
            "weight": 0.053571
          },
          {
            "term": "isempty",
            "tf": 5,
            "weight": 0.044643
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.044643
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.035714
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.035714
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.026786
          },
          {
            "term": "useful",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "records",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "value",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "static",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "grpc",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "will",
            "tf": 2,
            "weight": 0.017857
          }
        ],
        "unique_terms": 63,
        "total_terms": 112
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Is Empty",
        "client",
        "condition",
        "empty",
        "isempty",
        "key",
        "qdrant",
        "records",
        "reports",
        "the",
        "useful"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5069642857142856,
      "overall": 0.7023214285714285
    }
  },
  {
    "text": "### Is Null\n\nIt is not possible to test for `NULL` values with the **match** condition. We have to use `IsNull` condition instead:\n\n```json\n{\n    \"is_null\": {\n        \"key\": \"reports\"\n    }\n}\n```\n\n```python\nmodels.IsNullCondition(\n    is_null=models.PayloadField(key=\"reports\"),\n)\n```\n\n```typescript\n{\n  is_null: {\n    key: \"reports\"\n  }\n}\n```\n\n```rust\nuse qdrant_client::qdrant::Condition;\n\nCondition::is_null(\"reports\")\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.isNull;\n\nisNull(\"reports\");\n```\n\n```csharp\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nIsNull(\"reports\");\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\nqdrant.NewIsNull(\"reports\")\n```\n\nThis condition will match all records where the field `reports` exists and has `NULL` value.",
    "metadata": {
      "chunk_id": "e8f29afde80c-0041",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 41,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Is Null"
      ],
      "heading_text": "Is Null",
      "token_count": 213,
      "char_count": 797,
      "start_char": 76224,
      "end_char": 77021,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5088235294117647,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.432205",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Is Null",
      "chunk_hash": "63eceab653784444",
      "content_digest": "63eceab653784444",
      "chunk_length": 797,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "reports",
          "qdrant",
          "null",
          "condition",
          "client",
          "isnull",
          "key",
          "the",
          "match",
          "use",
          "models",
          "import",
          "static",
          "using",
          "grpc",
          "not",
          "possible",
          "test",
          "for",
          "values"
        ],
        "term_weights": [
          {
            "term": "reports",
            "tf": 8,
            "weight": 0.091954
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.091954
          },
          {
            "term": "null",
            "tf": 7,
            "weight": 0.08046
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.057471
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.057471
          },
          {
            "term": "isnull",
            "tf": 4,
            "weight": 0.045977
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "match",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "static",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "grpc",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "not",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "possible",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "test",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "values",
            "tf": 1,
            "weight": 0.011494
          }
        ],
        "unique_terms": 46,
        "total_terms": 87
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Is Null",
        "client",
        "condition",
        "isnull",
        "key",
        "match",
        "null",
        "qdrant",
        "reports",
        "the",
        "use"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5088235294117647,
      "overall": 0.7029411764705881
    }
  },
  {
    "text": "### Has id\n\nThis type of query is not related to payload, but can be very useful in some situations. For example, the user could mark some specific search results as irrelevant, or we want to search only among the specified points.\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"has_id\": [1,3,5,7,9,11] }\n        ]\n    }\n    ...\n}\n```\n\n```python\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.HasIdCondition(has_id=[1, 3, 5, 7, 9, 11]),\n        ],\n    ),\n)\n```\n\n```typescript\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        has_id: [1, 3, 5, 7, 9, 11],\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n    \nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\")\n            .filter(Filter::must([Condition::has_id([1, 3, 5, 7, 9, 11])])),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.hasId;\nimport static io.qdrant.client.PointIdFactory.id;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(hasId(List.of(id(1), id(3), id(5), id(7), id(9), id(11))))\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(collectionName: \"{collection_name}\", filter: HasId([1, 3, 5, 7, 9, 11]));\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewHasID(\n\t\t\t\tqdrant.NewIDNum(1),\n\t\t\t\tqdrant.NewIDNum(3),\n\t\t\t\tqdrant.NewIDNum(5),\n\t\t\t\tqdrant.NewIDNum(7),\n\t\t\t\tqdrant.NewIDNum(9),\n\t\t\t\tqdrant.NewIDNum(11),\n\t\t\t),\n\t\t},\n\t},\n})\n```\n\nFiltered points would be:\n\n```json\n[\n  { \"id\": 1, \"city\": \"London\", \"color\": \"green\" },\n  { \"id\": 3, \"city\": \"London\", \"color\": \"blue\" },\n  { \"id\": 5, \"city\": \"Moscow\", \"color\": \"green\" }\n]\n```",
    "metadata": {
      "chunk_id": "e8f29afde80c-0042",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 42,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Has id"
      ],
      "heading_text": "Has id",
      "token_count": 753,
      "char_count": 2577,
      "start_char": 77023,
      "end_char": 79600,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.9046610169491527,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.433491",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Has id",
      "chunk_hash": "bdd54250d58a8ff6",
      "content_digest": "bdd54250d58a8ff6",
      "chunk_length": 2577,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "filter",
          "collection",
          "name",
          "scroll",
          "import",
          "newidnum",
          "has",
          "points",
          "must",
          "condition",
          "localhost",
          "6334",
          "build",
          "static",
          "hasid",
          "grpc",
          "scrollpoints",
          "city"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 25,
            "weight": 0.110132
          },
          {
            "term": "client",
            "tf": 18,
            "weight": 0.079295
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.052863
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.035242
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.035242
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.026432
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.026432
          },
          {
            "term": "newidnum",
            "tf": 6,
            "weight": 0.026432
          },
          {
            "term": "has",
            "tf": 5,
            "weight": 0.022026
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.022026
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.022026
          },
          {
            "term": "condition",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "localhost",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "6334",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "static",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "hasid",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "grpc",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "scrollpoints",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "city",
            "tf": 3,
            "weight": 0.013216
          }
        ],
        "unique_terms": 96,
        "total_terms": 227
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Has id",
        "client",
        "collection",
        "filter",
        "has",
        "import",
        "name",
        "newidnum",
        "points",
        "qdrant",
        "scroll"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.9046610169491527,
      "overall": 0.7348870056497175
    }
  },
  {
    "text": "### Has vector\n\n*Available as of v1.13.0*\n\nThis condition enables filtering by the presence of a given named vector on a point.\n\nFor example, if we have two named vector in our collection.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"image\": {\n            \"size\": 4,\n            \"distance\": \"Dot\"\n        },\n        \"text\": {\n            \"size\": 8,\n            \"distance\": \"Cosine\"\n        }\n    },\n    \"sparse_vectors\": {\n        \"sparse-image\": {},\n        \"sparse-text\": {},\n    },\n}\n```\n\nSome points in the collection might have all vectors, some might have only a subset of them.\n\nIf your collection does not have named vectors, use an empty (`\"\"`) name.\n\nThis is how you can search for points which have the dense `image` vector defined:\n\n```http\nPOST /collections/{collection_name}/points/scroll\n{\n    \"filter\": {\n        \"must\": [\n            { \"has_vector\": \"image\" }\n        ]\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.scroll(\n    collection_name=\"{collection_name}\",\n    scroll_filter=models.Filter(\n        must=[\n            models.HasVectorCondition(has_vector=\"image\"),\n        ],\n    ),\n)\n```\n\n```typescript\nclient.scroll(\"{collection_name}\", {\n  filter: {\n    must: [\n      {\n        has_vector: \"image\",\n      },\n    ],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n    \nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"{collection_name}\")\n            .filter(Filter::must([Condition::has_vector(\"image\")])),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.hasVector;\nimport static io.qdrant.client.PointIdFactory.id;\n\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nclient\n    .scrollAsync(\n        ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(\n                Filter.newBuilder()\n                    .addMust(hasVector(\"image\"))\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(collectionName: \"{collection_name}\", filter: HasVector(\"image\"));\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Scroll(context.Background(), &qdrant.ScrollPoints{\n\tCollectionName: \"{collection_name}\",\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewHasVector(\n        \"image\",\n\t\t\t),\n\t\t},\n\t},\n})\n```",
    "metadata": {
      "chunk_id": "e8f29afde80c-0043",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 43,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Has vector"
      ],
      "heading_text": "Has vector",
      "token_count": 689,
      "char_count": 2823,
      "start_char": 79602,
      "end_char": 82425,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8979757085020244,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.434728",
      "document_id": "e8f29afde80c",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Has vector",
      "chunk_hash": "24f04f36e37b3dfa",
      "content_digest": "24f04f36e37b3dfa",
      "chunk_length": 2823,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "collection",
          "filter",
          "name",
          "image",
          "vector",
          "import",
          "scroll",
          "has",
          "have",
          "points",
          "must",
          "condition",
          "http",
          "vectors",
          "localhost",
          "the",
          "named",
          "sparse"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 20,
            "weight": 0.074349
          },
          {
            "term": "client",
            "tf": 20,
            "weight": 0.074349
          },
          {
            "term": "collection",
            "tf": 12,
            "weight": 0.04461
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.04461
          },
          {
            "term": "name",
            "tf": 10,
            "weight": 0.037175
          },
          {
            "term": "image",
            "tf": 10,
            "weight": 0.037175
          },
          {
            "term": "vector",
            "tf": 8,
            "weight": 0.02974
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.026022
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.022305
          },
          {
            "term": "has",
            "tf": 5,
            "weight": 0.018587
          },
          {
            "term": "have",
            "tf": 5,
            "weight": 0.018587
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.018587
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.018587
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.01487
          },
          {
            "term": "http",
            "tf": 4,
            "weight": 0.01487
          },
          {
            "term": "vectors",
            "tf": 4,
            "weight": 0.01487
          },
          {
            "term": "localhost",
            "tf": 4,
            "weight": 0.01487
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.011152
          },
          {
            "term": "named",
            "tf": 3,
            "weight": 0.011152
          },
          {
            "term": "sparse",
            "tf": 3,
            "weight": 0.011152
          }
        ],
        "unique_terms": 102,
        "total_terms": 269
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Has vector",
        "client",
        "collection",
        "filter",
        "has",
        "image",
        "import",
        "name",
        "qdrant",
        "scroll",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8979757085020244,
      "overall": 0.7993252361673413
    }
  }
]