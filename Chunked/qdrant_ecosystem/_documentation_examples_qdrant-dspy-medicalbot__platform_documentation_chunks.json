[
  {
    "text": "### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0000",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 715,
      "end_char": 1388,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.424771",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "b49cc869c6854f5f",
      "content_digest": "b49cc869c6854f5f",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.6351282051282051
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 1390,
      "end_char": 7051,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.426743",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0002",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 7053,
      "end_char": 9400,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.428362",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.8358974358974359
    }
  },
  {
    "text": "### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 9402,
      "end_char": 10075,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.428926",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "b49cc869c6854f5f",
      "content_digest": "b49cc869c6854f5f",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.6351282051282051
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 10077,
      "end_char": 15738,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.430870",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - [Examples](https://qdrant.tech/documentation/examples/) - - Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 621,
      "char_count": 2531,
      "start_char": 15740,
      "end_char": 18271,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8917293233082708,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.432506",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "6aa64df9591aad96",
      "content_digest": "6aa64df9591aad96",
      "chunk_length": 2531,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "and",
          "system",
          "semantic",
          "dspy",
          "cohere",
          "precision",
          "reranking",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 33,
            "weight": 0.11
          },
          {
            "term": "documentation",
            "tf": 24,
            "weight": 0.08
          },
          {
            "term": "https",
            "tf": 23,
            "weight": 0.076667
          },
          {
            "term": "tech",
            "tf": 23,
            "weight": 0.076667
          },
          {
            "term": "examples",
            "tf": 16,
            "weight": 0.053333
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.033333
          },
          {
            "term": "with",
            "tf": 10,
            "weight": 0.033333
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.03
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.023333
          },
          {
            "term": "chatbot",
            "tf": 7,
            "weight": 0.023333
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.016667
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.016667
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.016667
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013333
          },
          {
            "term": "dspy",
            "tf": 4,
            "weight": 0.013333
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.013333
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.01
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.01
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.01
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.006667
          }
        ],
        "unique_terms": 96,
        "total_terms": 300
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8917293233082708,
      "overall": 0.8305764411027569
    }
  },
  {
    "text": "# Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy  Accessing medical information from LLMs can lead to hallucinations or outdated information. Relying on this type of information can result in serious medical consequences. Building a trustworthy and context-aware medical chatbot can solve this. In this article, we will look at how to tackle these challenges using:  - **Retrieval-Augmented Generation (RAG)**: Instead of answering the questions from scratch, the bot retrieves the information from medical literature before answering questions. - **Filtering**: Users can filter the results by specialty and publication year, ensuring the information is accurate and up-to-date. Let’s discover the technologies needed to build the medical bot.",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy"
      ],
      "heading_text": "Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy",
      "token_count": 150,
      "char_count": 762,
      "start_char": 18273,
      "end_char": 19035,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5011111111111111,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.433869",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy",
      "chunk_hash": "d524f9b965ba6b19",
      "content_digest": "d524f9b965ba6b19",
      "chunk_length": 762,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "medical",
          "information",
          "and",
          "can",
          "from",
          "this",
          "building",
          "chatbot",
          "answering",
          "questions",
          "bot",
          "chain",
          "thought",
          "with",
          "qdrant",
          "dspy",
          "accessing",
          "llms",
          "lead"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 7,
            "weight": 0.075269
          },
          {
            "term": "medical",
            "tf": 6,
            "weight": 0.064516
          },
          {
            "term": "information",
            "tf": 5,
            "weight": 0.053763
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.043011
          },
          {
            "term": "can",
            "tf": 4,
            "weight": 0.043011
          },
          {
            "term": "from",
            "tf": 3,
            "weight": 0.032258
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.032258
          },
          {
            "term": "building",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "chatbot",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "answering",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "questions",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "bot",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "chain",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "thought",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "qdrant",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "dspy",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "accessing",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "llms",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "lead",
            "tf": 1,
            "weight": 0.010753
          }
        ],
        "unique_terms": 63,
        "total_terms": 93
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy",
        "and",
        "answering",
        "building",
        "can",
        "chatbot",
        "from",
        "information",
        "medical",
        "the",
        "this"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5011111111111111,
      "overall": 0.7337037037037035
    }
  },
  {
    "text": "## Tech Stack Overview  To build a robust and trustworthy medical chatbot, we will combine the following technologies:  - [**Qdrant Cloud**](https://qdrant.tech/cloud/): Qdrant is a high-performance vector search engine for storing and retrieving large collections of embeddings. In this project, we will use it to enable fast and accurate search across millions of medical documents, supporting dense and multi-vector (ColBERT) retrieval for context-aware answers. - [**Stanford DSPy**](https://qdrant.tech/documentation/frameworks/dspy/)**:** DSPy is the AI framework we will use to obtain the final answer. It allows the medical bot to retrieve the relevant information and reason step-by-step to produce accurate and explainable answers.",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0007",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tech Stack Overview"
      ],
      "heading_text": "Tech Stack Overview",
      "token_count": 156,
      "char_count": 741,
      "start_char": 19039,
      "end_char": 19780,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5012244897959184,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.434526",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Tech Stack Overview",
      "chunk_hash": "962ae4d05dd28581",
      "content_digest": "962ae4d05dd28581",
      "chunk_length": 741,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "and",
          "the",
          "qdrant",
          "tech",
          "medical",
          "will",
          "dspy",
          "cloud",
          "https",
          "vector",
          "search",
          "for",
          "use",
          "accurate",
          "answers",
          "step",
          "stack",
          "overview",
          "build",
          "robust"
        ],
        "term_weights": [
          {
            "term": "and",
            "tf": 6,
            "weight": 0.065934
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.054945
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.043956
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.032967
          },
          {
            "term": "medical",
            "tf": 3,
            "weight": 0.032967
          },
          {
            "term": "will",
            "tf": 3,
            "weight": 0.032967
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.032967
          },
          {
            "term": "cloud",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "accurate",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "answers",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "step",
            "tf": 2,
            "weight": 0.021978
          },
          {
            "term": "stack",
            "tf": 1,
            "weight": 0.010989
          },
          {
            "term": "overview",
            "tf": 1,
            "weight": 0.010989
          },
          {
            "term": "build",
            "tf": 1,
            "weight": 0.010989
          },
          {
            "term": "robust",
            "tf": 1,
            "weight": 0.010989
          }
        ],
        "unique_terms": 62,
        "total_terms": 91
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tech Stack Overview",
        "and",
        "cloud",
        "dspy",
        "https",
        "medical",
        "qdrant",
        "tech",
        "the",
        "vector",
        "will"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5012244897959184,
      "overall": 0.7337414965986394
    }
  },
  {
    "text": "### Indexing with Dense and ColBERT Multivectors\n\nTo enable high-quality retrieval, we will embed each medical passage with two models:\n\n- **Dense Embeddings**: These are generated using the `BAAI/bge-small-en` model and capture the passages’ general semantic meaning.\n- **ColBERT Multivectors**: These provide more fine-grained representations, enabling precise ranking of results.\n\n```python\ndense_documents = [\n    models.Document(text=doc, model=\"BAAI/bge-small-en\") for doc in ds[\"passage_text\"]\n]\n\ncolbert_documents = [\n    models.Document(text=doc, model=\"colbert-ir/colbertv2.0\")\n    for doc in ds[\"passage_text\"]\n]\n\ncollection_name = \"miriad\"",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0009",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Indexing with Dense and ColBERT Multivectors"
      ],
      "heading_text": "Indexing with Dense and ColBERT Multivectors",
      "token_count": 159,
      "char_count": 651,
      "start_char": 20114,
      "end_char": 20765,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.5332432432432432,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.435625",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Indexing with Dense and ColBERT Multivectors",
      "chunk_hash": "e844b4e801f5a7aa",
      "content_digest": "e844b4e801f5a7aa",
      "chunk_length": 651,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "colbert",
          "text",
          "doc",
          "dense",
          "passage",
          "models",
          "model",
          "with",
          "and",
          "multivectors",
          "these",
          "the",
          "baai",
          "bge",
          "small",
          "documents",
          "document",
          "for",
          "indexing",
          "enable"
        ],
        "term_weights": [
          {
            "term": "colbert",
            "tf": 4,
            "weight": 0.050633
          },
          {
            "term": "text",
            "tf": 4,
            "weight": 0.050633
          },
          {
            "term": "doc",
            "tf": 4,
            "weight": 0.050633
          },
          {
            "term": "dense",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "passage",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "model",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "multivectors",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "these",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "baai",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "bge",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "small",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "documents",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "document",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "indexing",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "enable",
            "tf": 1,
            "weight": 0.012658
          }
        ],
        "unique_terms": 51,
        "total_terms": 79
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Indexing with Dense and ColBERT Multivectors",
        "and",
        "colbert",
        "dense",
        "doc",
        "model",
        "models",
        "multivectors",
        "passage",
        "text",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.5332432432432432,
      "overall": 0.6777477477477477
    }
  },
  {
    "text": "# Create collection\nif not client.collection_exists(collection_name):\n    client.create_collection(\n        collection_name=collection_name,\n        vectors_config={\n            \"dense\": models.VectorParams(size=384, distance=models.Distance.COSINE),\n            \"colbert\": models.VectorParams(\n                size=128,\n                distance=models.Distance.COSINE,\n                multivector_config=models.MultiVectorConfig(\n                    comparator=models.MultiVectorComparator.MAX_SIM\n                ),\n                hnsw_config=models.HnswConfigDiff(m=0),  # reranker: no indexing\n            ),\n        },\n    )\n```\n\nWe disable indexing for the ColBERT multivector since it will only be used for reranking. To learn more about this, check out the [How to Effectively Use Multivector Representations in Qdrant for Reranking](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) article.",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0010",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Create collection"
      ],
      "heading_text": "Create collection",
      "token_count": 190,
      "char_count": 940,
      "start_char": 20767,
      "end_char": 21707,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7512903225806452,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.436431",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Create collection",
      "chunk_hash": "f0178fff84836432",
      "content_digest": "f0178fff84836432",
      "chunk_length": 940,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "models",
          "collection",
          "distance",
          "multivector",
          "name",
          "config",
          "for",
          "create",
          "client",
          "vectorparams",
          "size",
          "cosine",
          "colbert",
          "indexing",
          "the",
          "reranking",
          "representations",
          "qdrant",
          "not",
          "exists"
        ],
        "term_weights": [
          {
            "term": "models",
            "tf": 7,
            "weight": 0.08046
          },
          {
            "term": "collection",
            "tf": 6,
            "weight": 0.068966
          },
          {
            "term": "distance",
            "tf": 4,
            "weight": 0.045977
          },
          {
            "term": "multivector",
            "tf": 4,
            "weight": 0.045977
          },
          {
            "term": "name",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "config",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "client",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "vectorparams",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "size",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "cosine",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "colbert",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "reranking",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "not",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "exists",
            "tf": 1,
            "weight": 0.011494
          }
        ],
        "unique_terms": 53,
        "total_terms": 87
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Create collection",
        "client",
        "collection",
        "config",
        "create",
        "distance",
        "for",
        "models",
        "multivector",
        "name",
        "vectorparams"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7512903225806452,
      "overall": 0.783763440860215
    }
  },
  {
    "text": "### Batch Uploading to Qdrant\n\nTo avoid hitting API limits, we upload the data in batches, each batch containing:\n\n- The passage text\n- ColBERT and dense embeddings.\n- `year` and `specialty` metadata fields.\n\n```python\nBATCH_SIZE = 3\npoints_batch = []\n\nfor i in range(len(ds[\"passage_text\"])):\n    point = models.PointStruct(\n        id=i,\n        vector={\"dense\": dense_documents[i], \"colbert\": colbert_documents[i]},\n        payload={\n            \"passage_text\": ds[\"passage_text\"][i],\n            \"year\": ds[\"year\"][i],\n            \"specialty\": ds[\"specialty\"][i],\n        },\n    )\n    points_batch.append(point)\n\n    if len(points_batch) == BATCH_SIZE:\n        client.upsert(collection_name=collection_name, points=points_batch)\n        print(f\"Uploaded batch ending at index {i}\")\n        points_batch = []",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Batch Uploading to Qdrant"
      ],
      "heading_text": "Batch Uploading to Qdrant",
      "token_count": 196,
      "char_count": 811,
      "start_char": 21709,
      "end_char": 22520,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.54,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.437212",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Batch Uploading to Qdrant",
      "chunk_hash": "611fe428ffec8dc2",
      "content_digest": "611fe428ffec8dc2",
      "chunk_length": 811,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "batch",
          "points",
          "passage",
          "text",
          "colbert",
          "dense",
          "year",
          "specialty",
          "the",
          "and",
          "size",
          "len",
          "point",
          "documents",
          "collection",
          "name",
          "uploading",
          "qdrant",
          "avoid",
          "hitting"
        ],
        "term_weights": [
          {
            "term": "batch",
            "tf": 10,
            "weight": 0.125
          },
          {
            "term": "points",
            "tf": 6,
            "weight": 0.075
          },
          {
            "term": "passage",
            "tf": 4,
            "weight": 0.05
          },
          {
            "term": "text",
            "tf": 4,
            "weight": 0.05
          },
          {
            "term": "colbert",
            "tf": 3,
            "weight": 0.0375
          },
          {
            "term": "dense",
            "tf": 3,
            "weight": 0.0375
          },
          {
            "term": "year",
            "tf": 3,
            "weight": 0.0375
          },
          {
            "term": "specialty",
            "tf": 3,
            "weight": 0.0375
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "size",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "len",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "point",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "documents",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "collection",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "name",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "uploading",
            "tf": 1,
            "weight": 0.0125
          },
          {
            "term": "qdrant",
            "tf": 1,
            "weight": 0.0125
          },
          {
            "term": "avoid",
            "tf": 1,
            "weight": 0.0125
          },
          {
            "term": "hitting",
            "tf": 1,
            "weight": 0.0125
          }
        ],
        "unique_terms": 44,
        "total_terms": 80
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Batch Uploading to Qdrant",
        "and",
        "batch",
        "colbert",
        "dense",
        "passage",
        "points",
        "specialty",
        "text",
        "the",
        "year"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.54,
      "overall": 0.7133333333333333
    }
  },
  {
    "text": "### Integration of DSPy and Qdrant\n\nAt the heart of the application is the Qdrant vector database that provides the information sent to DSPy to generate the final answer. This is what happens when a user submits a query:\n\n- DSPy searches against the Qdrant vector database to retrieve the top documents and answers the query. The results are also filtered with a particular year range for a specific specialty.\n- The retrieved passages are then reranked using ColBERT multivector embeddings, leading to the most relevant and contextually appropriate answers.\n- DSPy uses these passages to guide the language model through a chain-of-thought reasoning to generate the most accurate answer.\n\n```python\ndef rerank_with_colbert(query_text, min_year, max_year, specialty):\n    from fastembed import TextEmbedding, LateInteractionTextEmbedding\n\n    # Encode query once with both models\n    dense_model = TextEmbedding(\"BAAI/bge-small-en\")\n    colbert_model = LateInteractionTextEmbedding(\"colbert-ir/colbertv2.0\")\n\n    dense_query = list(dense_model.embed(query_text))[0]\n    colbert_query = list(colbert_model.embed(query_text))[0]\n\n    # Combined query: retrieve with dense,\n    # rerank with ColBERT\n    results = client.query_points(\n        collection_name=collection_name,\n        prefetch=models.Prefetch(query=dense_query, using=\"dense\"),\n        query=colbert_query,\n        using=\"colbert\",\n        limit=5,\n        with_payload=True,\n        query_filter=Filter(\n            must=[\n                FieldCondition(key=\"specialty\", match=MatchValue(value=specialty)),\n                FieldCondition(\n                    key=\"year\",\n                    range=models.Range(gt=None, gte=min_year, lt=None, lte=max_year),\n                ),\n            ]\n        ),\n    )\n\n    points = results.points\n    docs = []\n\n    for point in points:\n        docs.append(point.payload[\"passage_text\"])\n\n    return docs\n  \n```\n\nThe pipeline ensures that each response is grounded in real and recent medical literature and is aligned with the user’s needs.",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0014",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integration of DSPy and Qdrant"
      ],
      "heading_text": "Integration of DSPy and Qdrant",
      "token_count": 435,
      "char_count": 2043,
      "start_char": 22843,
      "end_char": 24886,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.735763157894737,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.438872",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Integration of DSPy and Qdrant",
      "chunk_hash": "7903deb789099a44",
      "content_digest": "7903deb789099a44",
      "chunk_length": 2043,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "query",
          "colbert",
          "with",
          "year",
          "dense",
          "and",
          "model",
          "dspy",
          "specialty",
          "text",
          "points",
          "qdrant",
          "results",
          "range",
          "using",
          "models",
          "docs",
          "vector",
          "database"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 15,
            "weight": 0.064655
          },
          {
            "term": "query",
            "tf": 15,
            "weight": 0.064655
          },
          {
            "term": "colbert",
            "tf": 9,
            "weight": 0.038793
          },
          {
            "term": "with",
            "tf": 7,
            "weight": 0.030172
          },
          {
            "term": "year",
            "tf": 6,
            "weight": 0.025862
          },
          {
            "term": "dense",
            "tf": 6,
            "weight": 0.025862
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.021552
          },
          {
            "term": "model",
            "tf": 5,
            "weight": 0.021552
          },
          {
            "term": "dspy",
            "tf": 4,
            "weight": 0.017241
          },
          {
            "term": "specialty",
            "tf": 4,
            "weight": 0.017241
          },
          {
            "term": "text",
            "tf": 4,
            "weight": 0.017241
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.017241
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.012931
          },
          {
            "term": "results",
            "tf": 3,
            "weight": 0.012931
          },
          {
            "term": "range",
            "tf": 3,
            "weight": 0.012931
          },
          {
            "term": "using",
            "tf": 3,
            "weight": 0.012931
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.012931
          },
          {
            "term": "docs",
            "tf": 3,
            "weight": 0.012931
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.008621
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.008621
          }
        ],
        "unique_terms": 120,
        "total_terms": 232
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integration of DSPy and Qdrant",
        "and",
        "colbert",
        "dense",
        "dspy",
        "model",
        "query",
        "specialty",
        "the",
        "with",
        "year"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.735763157894737,
      "overall": 0.8452543859649122
    }
  },
  {
    "text": "## Conclusion\n\nBy leveraging Qdrant and DSPy, you can build a medical chatbot that generates accurate and up-to-date medical responses. Qdrant provides the technology and enables fast and scalable retrieval, while DSPy synthesizes this information to provide correct answers grounded in the medical literature. As a result, you can achieve a medical system that is truthful, safe, and provides relevant responses. Check out the entire project from this [notebook](https://github.com/qdrant/examples/blob/master/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb). You’ll need a free [Qdrant Cloud](https://qdrant.tech/cloud/) account to run the notebook.",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Conclusion"
      ],
      "heading_text": "Conclusion",
      "token_count": 144,
      "char_count": 650,
      "start_char": 26373,
      "end_char": 27023,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.71125,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.440353",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Conclusion",
      "chunk_hash": "a5fd8b2c766063db",
      "content_digest": "a5fd8b2c766063db",
      "chunk_length": 650,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "medical",
          "and",
          "dspy",
          "the",
          "you",
          "can",
          "that",
          "responses",
          "provides",
          "this",
          "notebook",
          "https",
          "bot",
          "cloud",
          "conclusion",
          "leveraging",
          "build",
          "chatbot",
          "generates"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.068182
          },
          {
            "term": "medical",
            "tf": 6,
            "weight": 0.068182
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.056818
          },
          {
            "term": "dspy",
            "tf": 4,
            "weight": 0.045455
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.045455
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.034091
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "responses",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "provides",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "notebook",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "bot",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "cloud",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "conclusion",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "leveraging",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "build",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "chatbot",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "generates",
            "tf": 1,
            "weight": 0.011364
          }
        ],
        "unique_terms": 57,
        "total_terms": 88
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Conclusion",
        "and",
        "can",
        "dspy",
        "medical",
        "provides",
        "qdrant",
        "responses",
        "that",
        "the",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.71125,
      "overall": 0.7704166666666666
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/examples/Qdrant-DSPy-medicalbot.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](#building-a-chain-of-thought-medical-chatbot-with-qdrant-and-dspy.md)    - [Tech Stack Overview](#tech-stack-overview.md)    - [Dataset Preparation and Indexing](#dataset-preparation-and-indexing.md)      - [Indexing with Dense and ColBERT Multivectors](#indexing-with-dense-and-colbert-multivectors.md)     - [Batch Uploading to Qdrant](#batch-uploading-to-qdrant.md)    - [Retrieval-Augmented Generation (RAG) Pipeline](#retrieval-augmented-generation-rag-pipeline.md)     - [Integration of DSPy and Qdrant](#integration-of-dspy-and-qdrant.md)    - [Guardrails and Medical Question Detection](#guardrails-and-medical-question-detection.md)    - [Conclusion](#conclusion.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/examples/Qdrant-DSPy-medicalbot.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "2f9c4eebd952-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 359,
      "char_count": 1323,
      "start_char": 27025,
      "end_char": 28348,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5335064516129032,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:23.441235",
      "document_id": "2f9c4eebd952",
      "document_name": "_documentation_examples_qdrant-dspy-medicalbot_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_filename": "_documentation_examples_qdrant-dspy-medicalbot_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_qdrant-dspy-medicalbot\\_documentation_examples_qdrant-dspy-medicalbot_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "fe21f69161ece1ad",
      "content_digest": "fe21f69161ece1ad",
      "chunk_length": 1323,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "and",
          "page",
          "github",
          "landing",
          "dspy",
          "https",
          "com",
          "medical",
          "with",
          "indexing",
          "this",
          "you",
          "edit",
          "tree",
          "master",
          "content",
          "documentation",
          "examples",
          "medicalbot"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 14,
            "weight": 0.08805
          },
          {
            "term": "and",
            "tf": 10,
            "weight": 0.062893
          },
          {
            "term": "page",
            "tf": 7,
            "weight": 0.044025
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.044025
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.037736
          },
          {
            "term": "dspy",
            "tf": 6,
            "weight": 0.037736
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.025157
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.025157
          },
          {
            "term": "medical",
            "tf": 4,
            "weight": 0.025157
          },
          {
            "term": "with",
            "tf": 4,
            "weight": 0.025157
          },
          {
            "term": "indexing",
            "tf": 4,
            "weight": 0.025157
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.018868
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.012579
          },
          {
            "term": "edit",
            "tf": 2,
            "weight": 0.012579
          },
          {
            "term": "tree",
            "tf": 2,
            "weight": 0.012579
          },
          {
            "term": "master",
            "tf": 2,
            "weight": 0.012579
          },
          {
            "term": "content",
            "tf": 2,
            "weight": 0.012579
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.012579
          },
          {
            "term": "examples",
            "tf": 2,
            "weight": 0.012579
          },
          {
            "term": "medicalbot",
            "tf": 2,
            "weight": 0.012579
          }
        ],
        "unique_terms": 61,
        "total_terms": 159
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "and",
        "com",
        "dspy",
        "github",
        "https",
        "landing",
        "medical",
        "page",
        "qdrant",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5335064516129032,
      "overall": 0.711168817204301
    }
  }
]