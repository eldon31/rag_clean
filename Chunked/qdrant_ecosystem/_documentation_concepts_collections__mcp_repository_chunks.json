[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "094317ae8768-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1037,
      "end_char": 3005,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.248594",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "094317ae8768-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3687,
      "end_char": 5675,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.249806",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "094317ae8768-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5677,
      "end_char": 5988,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.250167",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "094317ae8768-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6365,
      "end_char": 8333,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.250989",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "094317ae8768-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9015,
      "end_char": 11003,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.252116",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "## Setting up multitenancy\n\n**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](https://qdrant.tech/documentation/tutorials/multiple-partitions/)\n\n**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise.",
    "metadata": {
      "chunk_id": "094317ae8768-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Setting up multitenancy"
      ],
      "heading_text": "Setting up multitenancy",
      "token_count": 155,
      "char_count": 748,
      "start_char": 12845,
      "end_char": 13593,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.718,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.253692",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Setting up multitenancy",
      "chunk_hash": "36adfe46b6373d41",
      "content_digest": "36adfe46b6373d41",
      "chunk_length": 748,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "you",
          "multitenancy",
          "collections",
          "should",
          "how",
          "create",
          "most",
          "this",
          "approach",
          "https",
          "users",
          "but",
          "multiple",
          "when",
          "need",
          "may",
          "setting",
          "many",
          "cases",
          "only"
        ],
        "term_weights": [
          {
            "term": "you",
            "tf": 6,
            "weight": 0.064516
          },
          {
            "term": "multitenancy",
            "tf": 3,
            "weight": 0.032258
          },
          {
            "term": "collections",
            "tf": 3,
            "weight": 0.032258
          },
          {
            "term": "should",
            "tf": 3,
            "weight": 0.032258
          },
          {
            "term": "how",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "most",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "approach",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "users",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "but",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "multiple",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "when",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "need",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "may",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "setting",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "many",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "cases",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "only",
            "tf": 1,
            "weight": 0.010753
          }
        ],
        "unique_terms": 70,
        "total_terms": 93
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Setting up multitenancy",
        "approach",
        "collections",
        "create",
        "how",
        "https",
        "most",
        "multitenancy",
        "should",
        "this",
        "you"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.718,
      "overall": 0.8059999999999999
    }
  },
  {
    "text": "## Create a collection\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 300,\n      \"distance\": \"Cosine\"\n    }\n}\n```\n\n```bash\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n      \"size\": 300,\n      \"distance\": \"Cosine\"\n    } \n  }'\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=100, distance=models.Distance.COSINE),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: { size: 100, distance: \"Cosine\" },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{CreateCollectionBuilder, VectorParamsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(100, Distance::Cosine)),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nQdrantClient client = new QdrantClient(\n    QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.createCollectionAsync(\"{collection_name}\",\n        VectorParams.newBuilder().setDistance(Distance.Cosine).setSize(100).build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 100, Distance = Distance.Cosine }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     100,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n})\n```\n\nIn addition to the required options, you can also specify custom values for the following collection options:\n\n- `hnsw_config` - see [indexing](https://qdrant.tech/documentation/concepts/indexing/#vector-index) for details.\n- `wal_config` - Write-Ahead-Log related configuration. See more details about [WAL](https://qdrant.tech/documentation/concepts/storage/#versioning)\n- `optimizers_config` - see [optimizer](https://qdrant.tech/documentation/concepts/optimizer/) for details.\n- `shard_number` - which defines how many shards the collection should have. See [distributed deployment](https://qdrant.tech/documentation/guides/distributed_deployment/#sharding) section for details.\n- `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.\n- `quantization_config` - see [quantization](https://qdrant.tech/documentation/guides/quantization/#setting-up-quantization-in-qdrant) for details.\n- `strict_mode_config` - see [strict mode](https://qdrant.tech/documentation/guides/administration/#strict-mode) for details.\n\nDefault parameters for the optional collection parameters are defined in [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).\n\nSee [schema definitions](https://api.qdrant.tech/api-reference/collections/create-collection) and a [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml) for more information about collection and vector parameters.\n\n*Available as of v1.2.0*",
    "metadata": {
      "chunk_id": "094317ae8768-0012",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Create a collection"
      ],
      "heading_text": "Create a collection",
      "token_count": 976,
      "char_count": 3908,
      "start_char": 13595,
      "end_char": 17503,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8878594249201279,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.256464",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Create a collection",
      "chunk_hash": "b497613ab34f0681",
      "content_digest": "b497613ab34f0681",
      "chunk_length": 3908,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "collection",
          "distance",
          "config",
          "name",
          "for",
          "https",
          "cosine",
          "qdrantclient",
          "localhost",
          "import",
          "see",
          "tech",
          "size",
          "100",
          "new",
          "documentation",
          "details",
          "collections"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 33,
            "weight": 0.07783
          },
          {
            "term": "client",
            "tf": 23,
            "weight": 0.054245
          },
          {
            "term": "collection",
            "tf": 17,
            "weight": 0.040094
          },
          {
            "term": "distance",
            "tf": 12,
            "weight": 0.028302
          },
          {
            "term": "config",
            "tf": 12,
            "weight": 0.028302
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.021226
          },
          {
            "term": "for",
            "tf": 9,
            "weight": 0.021226
          },
          {
            "term": "https",
            "tf": 9,
            "weight": 0.021226
          },
          {
            "term": "cosine",
            "tf": 8,
            "weight": 0.018868
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.018868
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.016509
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.016509
          },
          {
            "term": "see",
            "tf": 7,
            "weight": 0.016509
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.016509
          },
          {
            "term": "size",
            "tf": 6,
            "weight": 0.014151
          },
          {
            "term": "100",
            "tf": 6,
            "weight": 0.014151
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.014151
          },
          {
            "term": "documentation",
            "tf": 6,
            "weight": 0.014151
          },
          {
            "term": "details",
            "tf": 6,
            "weight": 0.014151
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.011792
          }
        ],
        "unique_terms": 152,
        "total_terms": 424
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Create a collection",
        "client",
        "collection",
        "config",
        "cosine",
        "distance",
        "for",
        "https",
        "name",
        "qdrant",
        "qdrantclient"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8878594249201279,
      "overall": 0.7959531416400426
    }
  },
  {
    "text": "### Create collection from another collection\n\n*Available as of v1.0.0*\n\nIt is possible to initialize a collection from another existing collection.\n\nThis might be useful for experimenting quickly with different configurations for the same data set.\n\nUsage of the `init_from` can create unpredictable load on the qdrant cluster. It is not recommended to use `init_from` in performance-sensitive environments.\n\nMake sure the vectors have the same `size` and `distance` function when setting up the vectors configuration in the new collection. If you used the previous sample code, `\"size\": 300` and `\"distance\": \"Cosine\"`.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 100,\n      \"distance\": \"Cosine\"\n    },\n    \"init_from\": {\n       \"collection\": \"{from_collection_name}\"\n    }\n}\n```\n\n```bash\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n      \"size\": 300,\n      \"distance\": \"Cosine\"\n    },\n    \"init_from\": {\n       \"collection\": {from_collection_name}\n    }\n  }'\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=100, distance=models.Distance.COSINE),\n    init_from=models.InitFrom(collection=\"{from_collection_name}\"),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: { size: 100, distance: \"Cosine\" },\n  init_from: { collection: \"{from_collection_name}\" },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(100, Distance::Cosine))\n            .init_from_collection(\"{from_collection_name}\"),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(100)\n                            .setDistance(Distance.Cosine)\n                            .build()))\n            .setInitFromCollection(\"{from_collection_name}\")\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 100, Distance = Distance.Cosine },\n\tinitFromCollection: \"{from_collection_name}\"\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     100,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tInitFromCollection: qdrant.PtrOf(\"{from_collection_name}\"),\n})\n```",
    "metadata": {
      "chunk_id": "094317ae8768-0014",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Create collection from another collection"
      ],
      "heading_text": "Create collection from another collection",
      "token_count": 913,
      "char_count": 3866,
      "start_char": 17832,
      "end_char": 21698,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6956521739130435,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.258000",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Create collection from another collection",
      "chunk_hash": "d1e6c2374ab8f89d",
      "content_digest": "d1e6c2374ab8f89d",
      "chunk_length": 3866,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "qdrant",
          "client",
          "from",
          "name",
          "distance",
          "cosine",
          "import",
          "the",
          "size",
          "qdrantclient",
          "init",
          "vectors",
          "new",
          "100",
          "localhost",
          "collections",
          "vectorparams",
          "createcollection",
          "grpc"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 29,
            "weight": 0.078167
          },
          {
            "term": "qdrant",
            "tf": 25,
            "weight": 0.067385
          },
          {
            "term": "client",
            "tf": 25,
            "weight": 0.067385
          },
          {
            "term": "from",
            "tf": 20,
            "weight": 0.053908
          },
          {
            "term": "name",
            "tf": 17,
            "weight": 0.045822
          },
          {
            "term": "distance",
            "tf": 15,
            "weight": 0.040431
          },
          {
            "term": "cosine",
            "tf": 9,
            "weight": 0.024259
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.024259
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.021563
          },
          {
            "term": "size",
            "tf": 8,
            "weight": 0.021563
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.021563
          },
          {
            "term": "init",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "vectors",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "new",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "collections",
            "tf": 6,
            "weight": 0.016173
          },
          {
            "term": "vectorparams",
            "tf": 5,
            "weight": 0.013477
          },
          {
            "term": "createcollection",
            "tf": 5,
            "weight": 0.013477
          },
          {
            "term": "grpc",
            "tf": 5,
            "weight": 0.013477
          }
        ],
        "unique_terms": 116,
        "total_terms": 371
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Create collection from another collection",
        "client",
        "collection",
        "cosine",
        "distance",
        "from",
        "import",
        "name",
        "qdrant",
        "size",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6956521739130435,
      "overall": 0.7318840579710143
    }
  },
  {
    "text": "### Vector datatypes\n\n*Available as of v1.9.0*\n\nSome embedding providers may provide embeddings in a pre-quantized format. One of the most notable examples is the [Cohere int8 & binary embeddings](https://cohere.com/blog/int8-binary-embeddings). Qdrant has direct support for uint8 embeddings, which you can also use in combination with binary quantization.\n\nTo create a collection with uint8 embeddings, you can use the following configuration:\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 1024,\n      \"distance\": \"Cosine\",\n      \"datatype\": \"uint8\"\n    }\n}\n```\n\n```bash\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n      \"size\": 1024,\n      \"distance\": \"Cosine\",\n      \"datatype\": \"uint8\"\n    }\n  }'\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=1024,\n        distance=models.Distance.COSINE,\n        datatype=models.Datatype.UINT8,\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    image: { size: 1024, distance: \"Cosine\", datatype: \"uint8\" },\n  },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Datatype, Distance, VectorParamsBuilder,\n};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\").vectors_config(\n            VectorParamsBuilder::new(1024, Distance::Cosine).datatype(Datatype::Uint8),\n        ),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.grpc.Collections.Datatype;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nQdrantClient client = new QdrantClient(\n    QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\"{collection_name}\",\n        VectorParams.newBuilder()\n            .setSize(1024)\n            .setDistance(Distance.Cosine)\n            .setDatatype(Datatype.Uint8)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 1024, Distance = Distance.Cosine, Datatype = Datatype.Uint8\n  }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     1024,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tDatatype: qdrant.Datatype_Uint8.Enum(),\n\t}),\n})\n```\n\nVectors with `uint8` datatype are stored in a more compact format, which can save memory and improve search speed at the cost of some precision. If you choose to use the `uint8` datatype, elements of the vector will be stored as unsigned 8-bit integers, which can take values **from 0 to 255**.",
    "metadata": {
      "chunk_id": "094317ae8768-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Vector datatypes"
      ],
      "heading_text": "Vector datatypes",
      "token_count": 893,
      "char_count": 3457,
      "start_char": 26274,
      "end_char": 29731,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.8938906752411575,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.262026",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Vector datatypes",
      "chunk_hash": "931106218d2c61ee",
      "content_digest": "931106218d2c61ee",
      "chunk_length": 3457,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "datatype",
          "distance",
          "uint8",
          "collection",
          "name",
          "1024",
          "cosine",
          "qdrantclient",
          "localhost",
          "import",
          "the",
          "vectors",
          "size",
          "new",
          "embeddings",
          "use",
          "collections",
          "vectorparams"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 23,
            "weight": 0.064972
          },
          {
            "term": "client",
            "tf": 23,
            "weight": 0.064972
          },
          {
            "term": "datatype",
            "tf": 16,
            "weight": 0.045198
          },
          {
            "term": "distance",
            "tf": 13,
            "weight": 0.036723
          },
          {
            "term": "uint8",
            "tf": 12,
            "weight": 0.033898
          },
          {
            "term": "collection",
            "tf": 12,
            "weight": 0.033898
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.025424
          },
          {
            "term": "1024",
            "tf": 8,
            "weight": 0.022599
          },
          {
            "term": "cosine",
            "tf": 8,
            "weight": 0.022599
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.022599
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.019774
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.019774
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.016949
          },
          {
            "term": "vectors",
            "tf": 6,
            "weight": 0.016949
          },
          {
            "term": "size",
            "tf": 6,
            "weight": 0.016949
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.016949
          },
          {
            "term": "embeddings",
            "tf": 5,
            "weight": 0.014124
          },
          {
            "term": "use",
            "tf": 5,
            "weight": 0.014124
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.014124
          },
          {
            "term": "vectorparams",
            "tf": 5,
            "weight": 0.014124
          }
        ],
        "unique_terms": 128,
        "total_terms": 354
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "1024",
        "Vector datatypes",
        "client",
        "collection",
        "cosine",
        "datatype",
        "distance",
        "name",
        "qdrant",
        "qdrantclient",
        "uint8"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.8938906752411575,
      "overall": 0.8646302250803858
    }
  },
  {
    "text": "### Collection with sparse vectors\n\n*Available as of v1.7.0*\n\nQdrant supports sparse vectors as a first-class citizen.\n\nSparse vectors are useful for text search, where each word is represented as a separate dimension.\n\nCollections can contain sparse vectors as additional [named vectors](#collection-with-multiple-vectors.md) along side regular dense vectors in a single point.\n\nUnlike dense vectors, sparse vectors must be named. And additionally, sparse vectors and dense vectors must have different names within a collection.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n}\n```\n\n```bash\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n  }'\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(),\n    },\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  sparse_vectors: {\n    text: { },\n  },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\n};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vector_config = SparseVectorsConfigBuilder::default();\n\nsparse_vector_config.add_named_vector_params(\"text\", SparseVectorParamsBuilder::default());\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .sparse_vectors_config(sparse_vector_config),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setSparseVectorsConfig(\n                SparseVectorConfig.newBuilder()\n                    .putMap(\"text\", SparseVectorParams.getDefaultInstance()))\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tsparseVectorsConfig: (\"text\", new SparseVectorParams())\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text\": {},\n\t\t}),\n})\n```\n\nOutside of a unique name, there are no required configuration parameters for sparse vectors.\n\nThe distance function for sparse vectors is always `Dot` and does not need to be specified.\n\nHowever, there are optional parameters to tune the underlying [sparse vector index](https://qdrant.tech/documentation/concepts/indexing/#sparse-vector-index).",
    "metadata": {
      "chunk_id": "094317ae8768-0018",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Collection with sparse vectors"
      ],
      "heading_text": "Collection with sparse vectors",
      "token_count": 827,
      "char_count": 3582,
      "start_char": 29733,
      "end_char": 33315,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.695608108108108,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.263330",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Collection with sparse vectors",
      "chunk_hash": "c993b55cc93d82ab",
      "content_digest": "c993b55cc93d82ab",
      "chunk_length": 3582,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "vectors",
          "sparse",
          "collection",
          "name",
          "text",
          "import",
          "qdrantclient",
          "localhost",
          "config",
          "collections",
          "vector",
          "sparsevectorparams",
          "new",
          "createcollection",
          "http",
          "6334",
          "grpc",
          "are"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 24,
            "weight": 0.069164
          },
          {
            "term": "qdrant",
            "tf": 23,
            "weight": 0.066282
          },
          {
            "term": "vectors",
            "tf": 19,
            "weight": 0.054755
          },
          {
            "term": "sparse",
            "tf": 18,
            "weight": 0.051873
          },
          {
            "term": "collection",
            "tf": 14,
            "weight": 0.040346
          },
          {
            "term": "name",
            "tf": 10,
            "weight": 0.028818
          },
          {
            "term": "text",
            "tf": 9,
            "weight": 0.025937
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.023055
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.023055
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.020173
          },
          {
            "term": "config",
            "tf": 7,
            "weight": 0.020173
          },
          {
            "term": "collections",
            "tf": 6,
            "weight": 0.017291
          },
          {
            "term": "vector",
            "tf": 6,
            "weight": 0.017291
          },
          {
            "term": "sparsevectorparams",
            "tf": 5,
            "weight": 0.014409
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.014409
          },
          {
            "term": "createcollection",
            "tf": 5,
            "weight": 0.014409
          },
          {
            "term": "http",
            "tf": 4,
            "weight": 0.011527
          },
          {
            "term": "6334",
            "tf": 4,
            "weight": 0.011527
          },
          {
            "term": "grpc",
            "tf": 4,
            "weight": 0.011527
          },
          {
            "term": "are",
            "tf": 3,
            "weight": 0.008646
          }
        ],
        "unique_terms": 136,
        "total_terms": 347
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Collection with sparse vectors",
        "client",
        "collection",
        "import",
        "localhost",
        "name",
        "qdrant",
        "qdrantclient",
        "sparse",
        "text",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.695608108108108,
      "overall": 0.7985360360360358
    }
  },
  {
    "text": "### Update collection parameters\n\nDynamic parameter updates may be helpful, for example, for more efficient initial loading of vectors. For example, you can disable indexing during the upload process, and enable it immediately after the upload is finished. As a result, you will not waste extra computation resources on rebuilding the index.\n\nThe following command enables indexing for segments that have more than 10000 kB of vectors stored:\n\n```http\nPATCH /collections/{collection_name}\n{\n    \"optimizers_config\": {\n        \"indexing_threshold\": 10000\n    }\n}\n```\n\n```bash\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"optimizers_config\": {\n        \"indexing_threshold\": 10000\n    }\n  }'\n```\n\n```python\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    optimizers_config=models.OptimizersConfigDiff(indexing_threshold=10000),\n)\n```\n\n```typescript\nclient.updateCollection(\"{collection_name}\", {\n  optimizers_config: {\n    indexing_threshold: 10000,\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{OptimizersConfigDiffBuilder, UpdateCollectionBuilder};\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"{collection_name}\").optimizers_config(\n            OptimizersConfigDiffBuilder::default().indexing_threshold(10000),\n        ),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\n\nclient.updateCollectionAsync(\n    UpdateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setOptimizersConfig(\n            OptimizersConfigDiff.newBuilder().setIndexingThreshold(10000).build())\n        .build());\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\toptimizersConfig: new OptimizersConfigDiff { IndexingThreshold = 10000 }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.UpdateCollection(context.Background(), &qdrant.UpdateCollection{\n\tCollectionName: \"{collection_name}\",\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{\n\t\tIndexingThreshold: qdrant.PtrOf(uint64(10000)),\n\t},\n})\n```\n\nThe following parameters can be updated:\n\n- `optimizers_config` - see [optimizer](https://qdrant.tech/documentation/concepts/optimizer/) for details.\n- `hnsw_config` - see [indexing](https://qdrant.tech/documentation/concepts/indexing/#vector-index) for details.\n- `quantization_config` - see [quantization](https://qdrant.tech/documentation/guides/quantization/#setting-up-quantization-in-qdrant) for details.\n- `vectors_config` - vector-specific configuration, including individual `hnsw_config`, `quantization_config` and `on_disk` settings.\n- `params` - other collection parameters, including `write_consistency_factor` and `on_disk_payload`.\n- `strict_mode_config` - see [strict mode](https://qdrant.tech/documentation/guides/administration/#strict-mode) for details.\n\nFull API specification is available in [schema definitions](https://api.qdrant.tech/api-reference/collections/update-collection).\n\nCalls to this endpoint may be blocking as it waits for existing optimizers to finish. We recommended against using this in a production database as it may introduce huge overhead due to the rebuilding of the index.",
    "metadata": {
      "chunk_id": "094317ae8768-0021",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Update collection parameters"
      ],
      "heading_text": "Update collection parameters",
      "token_count": 817,
      "char_count": 3519,
      "start_char": 34600,
      "end_char": 38119,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.897938144329897,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.265312",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Update collection parameters",
      "chunk_hash": "178f04a93cf35d38",
      "content_digest": "178f04a93cf35d38",
      "chunk_length": 3519,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "collection",
          "client",
          "config",
          "for",
          "indexing",
          "10000",
          "name",
          "the",
          "optimizers",
          "collections",
          "threshold",
          "optimizersconfigdiff",
          "updatecollection",
          "https",
          "tech",
          "quantization",
          "update",
          "see",
          "documentation"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.054598
          },
          {
            "term": "collection",
            "tf": 14,
            "weight": 0.04023
          },
          {
            "term": "client",
            "tf": 14,
            "weight": 0.04023
          },
          {
            "term": "config",
            "tf": 13,
            "weight": 0.037356
          },
          {
            "term": "for",
            "tf": 9,
            "weight": 0.025862
          },
          {
            "term": "indexing",
            "tf": 9,
            "weight": 0.025862
          },
          {
            "term": "10000",
            "tf": 9,
            "weight": 0.025862
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.025862
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.020115
          },
          {
            "term": "optimizers",
            "tf": 7,
            "weight": 0.020115
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "threshold",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "optimizersconfigdiff",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "updatecollection",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "https",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "tech",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "quantization",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "update",
            "tf": 4,
            "weight": 0.011494
          },
          {
            "term": "see",
            "tf": 4,
            "weight": 0.011494
          },
          {
            "term": "documentation",
            "tf": 4,
            "weight": 0.011494
          }
        ],
        "unique_terms": 154,
        "total_terms": 348
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "10000",
        "Update collection parameters",
        "client",
        "collection",
        "config",
        "for",
        "indexing",
        "name",
        "optimizers",
        "qdrant",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.897938144329897,
      "overall": 0.8659793814432989
    }
  },
  {
    "text": "#### Update vector parameters\n\n*Available as of v1.4.0*\n\nTo update vector parameters using the collection update API, you must always specify a vector name. If your collection does not have named vectors, use an empty (`\"\"`) name.\n\nQdrant 1.4 adds support for updating more collection parameters at runtime. HNSW index, quantization and disk configurations can now be changed without recreating a collection. Segments (with index and quantized data) will automatically be rebuilt in the background to match updated parameters.\n\nTo put vector data on disk for a collection that **does not have** named vectors, use `\"\"` as name:\n\n```http\nPATCH /collections/{collection_name}\n{\n    \"vectors\": {\n        \"\": {\n            \"on_disk\": true\n        }\n    }\n}\n```\n\n```bash\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n        \"\": { \n            \"on_disk\": true \n      }\n    }\n  }'\n```\n\nTo put vector data on disk for a collection that **does have** named vectors:\n\nNote: To create a vector name, follow the procedure from our [Points](https://qdrant.tech/documentation/concepts/points/#create-vector-name).\n\n```http\nPATCH /collections/{collection_name}\n{\n    \"vectors\": {\n        \"my_vector\": {\n            \"on_disk\": true\n        }\n    }\n}\n```\n\n```bash\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n        \"my_vector\": { \n           \"on_disk\": true \n      }\n    }\n  }'\n```\n\nIn the following example the HNSW index and quantization parameters are updated, both for the whole collection, and for `my_vector` specifically:\n\n```http\nPATCH /collections/{collection_name}\n{\n    \"vectors\": {\n        \"my_vector\": {\n            \"hnsw_config\": {\n                \"m\": 32,\n                \"ef_construct\": 123\n            },\n            \"quantization_config\": {\n                \"product\": {\n                    \"compression\": \"x32\",\n                    \"always_ram\": true\n                }\n            },\n            \"on_disk\": true\n        }\n    },\n    \"hnsw_config\": {\n        \"ef_construct\": 123\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"quantile\": 0.8,\n            \"always_ram\": false\n        }\n    }\n}\n```\n\n```bash\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"vectors\": {\n        \"my_vector\": {\n            \"hnsw_config\": {\n                \"m\": 32,\n                \"ef_construct\": 123\n            },\n            \"quantization_config\": {\n                \"product\": {\n                    \"compression\": \"x32\",\n                    \"always_ram\": true\n                }\n            },\n            \"on_disk\": true\n        }\n    },\n    \"hnsw_config\": {\n        \"ef_construct\": 123\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"quantile\": 0.8,\n            \"always_ram\": false\n        }\n    }\n}'\n```\n\n```python\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={\n        \"my_vector\": models.VectorParamsDiff(\n            hnsw_config=models.HnswConfigDiff(\n                m=32,\n                ef_construct=123,\n            ),\n            quantization_config=models.ProductQuantization(\n                product=models.ProductQuantizationConfig(\n                    compression=models.CompressionRatio.X32,\n                    always_ram=True,\n                ),\n            ),\n            on_disk=True,\n        ),\n    },\n    hnsw_config=models.HnswConfigDiff(\n        ef_construct=123,\n    ),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            quantile=0.8,\n            always_ram=False,\n        ),\n    ),\n)\n```",
    "metadata": {
      "chunk_id": "094317ae8768-0022",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Update vector parameters"
      ],
      "heading_text": "Update vector parameters",
      "token_count": 907,
      "char_count": 3908,
      "start_char": 38121,
      "end_char": 42029,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8278409090909091,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.272359",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Update vector parameters",
      "chunk_hash": "8c527f6ee9b2232b",
      "content_digest": "8c527f6ee9b2232b",
      "chunk_length": 3908,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "vector",
          "name",
          "config",
          "vectors",
          "disk",
          "true",
          "models",
          "hnsw",
          "quantization",
          "always",
          "the",
          "data",
          "http",
          "patch",
          "collections",
          "type",
          "construct",
          "123",
          "ram"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 16,
            "weight": 0.050794
          },
          {
            "term": "vector",
            "tf": 13,
            "weight": 0.04127
          },
          {
            "term": "name",
            "tf": 13,
            "weight": 0.04127
          },
          {
            "term": "config",
            "tf": 13,
            "weight": 0.04127
          },
          {
            "term": "vectors",
            "tf": 10,
            "weight": 0.031746
          },
          {
            "term": "disk",
            "tf": 10,
            "weight": 0.031746
          },
          {
            "term": "true",
            "tf": 10,
            "weight": 0.031746
          },
          {
            "term": "models",
            "tf": 9,
            "weight": 0.028571
          },
          {
            "term": "hnsw",
            "tf": 8,
            "weight": 0.025397
          },
          {
            "term": "quantization",
            "tf": 8,
            "weight": 0.025397
          },
          {
            "term": "always",
            "tf": 7,
            "weight": 0.022222
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "data",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "http",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "patch",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "collections",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "type",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "construct",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "123",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "ram",
            "tf": 6,
            "weight": 0.019048
          }
        ],
        "unique_terms": 103,
        "total_terms": 315
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Update vector parameters",
        "collection",
        "config",
        "disk",
        "hnsw",
        "models",
        "name",
        "quantization",
        "true",
        "vector",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8278409090909091,
      "overall": 0.809280303030303
    }
  },
  {
    "text": "## Collection info\n\nQdrant allows determining the configuration parameters of an existing collection to better understand how the points are distributed and indexed.\n\n```http\nGET /collections/{collection_name}\n```\n\n```bash\ncurl -X GET http://localhost:6333/collections/{collection_name}\n```\n\n```python\nclient.get_collection(collection_name=\"{collection_name}\")\n```\n\n```typescript\nclient.getCollection(\"{collection_name}\");\n```\n\n```rust\nclient.collection_info(\"{collection_name}\").await?;\n```\n\n```java\nclient.getCollectionInfoAsync(\"{collection_name}\").get();\n```\n\n```csharp\nawait client.GetCollectionInfoAsync(\"{collection_name}\");\n```\n\n```go\nimport \"context\"\n\nclient.GetCollectionInfo(context.Background(), \"{collection_name}\")\n```\n\nExpected result\n\n```json\n{\n    \"result\": {\n        \"status\": \"green\",\n        \"optimizer_status\": \"ok\",\n        \"indexed_vectors_count\": 1024232,\n        \"points_count\": 1068786,\n        \"segments_count\": 31,\n        \"config\": {\n            \"params\": {\n                \"vectors\": {\n                    \"size\": 384,\n                    \"distance\": \"Cosine\"\n                },\n                \"shard_number\": 1,\n                \"replication_factor\": 1,\n                \"write_consistency_factor\": 1,\n                \"on_disk_payload\": false\n            },\n            \"hnsw_config\": {\n                \"m\": 16,\n                \"ef_construct\": 100,\n                \"full_scan_threshold\": 10000,\n                \"max_indexing_threads\": 0\n            },\n            \"optimizer_config\": {\n                \"deleted_threshold\": 0.2,\n                \"vacuum_min_vector_number\": 1000,\n                \"default_segment_number\": 0,\n                \"max_segment_size\": null,\n                \"memmap_threshold\": null,\n                \"indexing_threshold\": 20000,\n                \"flush_interval_sec\": 5,\n                \"max_optimization_threads\": 1\n            },\n            \"wal_config\": {\n                \"wal_capacity_mb\": 32,\n                \"wal_segments_ahead\": 0\n            }\n        },\n        \"payload_schema\": {}\n    },\n    \"status\": \"ok\",\n    \"time\": 0.00010143\n}\n```\n\nIf you insert the vectors into the collection, the `status` field may become `yellow` whilst it is optimizing. It will become `green` once all the points are successfully processed.\n\nThe following color statuses are possible:\n\n- 🟢 `green`: collection is ready\n- 🟡 `yellow`: collection is optimizing\n- ⚫ `grey`: collection is pending optimization ([help](#grey-collection-status.md))\n- 🔴 `red`: an error occurred which the engine could not recover from",
    "metadata": {
      "chunk_id": "094317ae8768-0025",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Collection info"
      ],
      "heading_text": "Collection info",
      "token_count": 570,
      "char_count": 2553,
      "start_char": 46766,
      "end_char": 49319,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.7257281553398058,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.274505",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Collection info",
      "chunk_hash": "b96958a54114f8cf",
      "content_digest": "b96958a54114f8cf",
      "chunk_length": 2553,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "name",
          "the",
          "client",
          "status",
          "get",
          "config",
          "threshold",
          "points",
          "are",
          "green",
          "vectors",
          "count",
          "number",
          "max",
          "wal",
          "info",
          "indexed",
          "http",
          "collections"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 18,
            "weight": 0.084507
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.042254
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.037559
          },
          {
            "term": "client",
            "tf": 6,
            "weight": 0.028169
          },
          {
            "term": "status",
            "tf": 5,
            "weight": 0.023474
          },
          {
            "term": "get",
            "tf": 4,
            "weight": 0.018779
          },
          {
            "term": "config",
            "tf": 4,
            "weight": 0.018779
          },
          {
            "term": "threshold",
            "tf": 4,
            "weight": 0.018779
          },
          {
            "term": "points",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "are",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "green",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "count",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "number",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "max",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "wal",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "info",
            "tf": 2,
            "weight": 0.00939
          },
          {
            "term": "indexed",
            "tf": 2,
            "weight": 0.00939
          },
          {
            "term": "http",
            "tf": 2,
            "weight": 0.00939
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.00939
          }
        ],
        "unique_terms": 125,
        "total_terms": 213
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Collection info",
        "are",
        "client",
        "collection",
        "config",
        "get",
        "name",
        "points",
        "status",
        "the",
        "threshold"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.7257281553398058,
      "overall": 0.7752427184466019
    }
  },
  {
    "text": "### Grey collection status\n\n*Available as of v1.9.0*\n\nA collection may have the grey ⚫ status or show “optimizations pending, awaiting update operation” as optimization status. This state is normally caused by restarting a Qdrant instance while optimizations were ongoing.\n\nIt means the collection has optimizations pending, but they are paused. You must send any update operation to trigger and start the optimizations again.\n\nFor example:\n\n```http\nPATCH /collections/{collection_name}\n{\n    \"optimizers_config\": {}\n}\n```\n\n```bash\ncurl -X PATCH http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"optimizers_config\": {}\n  }'\n```\n\n```python\nclient.update_collection(\n    collection_name=\"{collection_name}\",\n    optimizer_config=models.OptimizersConfigDiff(),\n)\n```\n\n```typescript\nclient.updateCollection(\"{collection_name}\", {\n  optimizers_config: {},\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{OptimizersConfigDiffBuilder, UpdateCollectionBuilder};\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"{collection_name}\")\n            .optimizers_config(OptimizersConfigDiffBuilder::default()),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\n\nclient.updateCollectionAsync(\n    UpdateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setOptimizersConfig(\n            OptimizersConfigDiff.getDefaultInstance())\n        .build());\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\toptimizersConfig: new OptimizersConfigDiff { }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.UpdateCollection(context.Background(), &qdrant.UpdateCollection{\n\tCollectionName:   \"{collection_name}\",\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{},\n})\n```\n\nAlternatively you may use the `Trigger Optimizers` button in the [Qdrant Web UI](https://qdrant.tech/documentation/web-ui/). It is shown next to the grey collection status on the collection info page.",
    "metadata": {
      "chunk_id": "094317ae8768-0026",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Grey collection status"
      ],
      "heading_text": "Grey collection status",
      "token_count": 539,
      "char_count": 2317,
      "start_char": 49321,
      "end_char": 51638,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.9212121212121211,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.275514",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Grey collection status",
      "chunk_hash": "c8baec23c04ae4a4",
      "content_digest": "c8baec23c04ae4a4",
      "chunk_length": 2317,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "qdrant",
          "client",
          "name",
          "the",
          "config",
          "optimizers",
          "optimizersconfigdiff",
          "updatecollection",
          "status",
          "optimizations",
          "update",
          "collections",
          "grey",
          "localhost",
          "new",
          "import",
          "grpc",
          "may",
          "pending"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 16,
            "weight": 0.073733
          },
          {
            "term": "qdrant",
            "tf": 15,
            "weight": 0.069124
          },
          {
            "term": "client",
            "tf": 14,
            "weight": 0.064516
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.041475
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.032258
          },
          {
            "term": "config",
            "tf": 6,
            "weight": 0.02765
          },
          {
            "term": "optimizers",
            "tf": 5,
            "weight": 0.023041
          },
          {
            "term": "optimizersconfigdiff",
            "tf": 5,
            "weight": 0.023041
          },
          {
            "term": "updatecollection",
            "tf": 5,
            "weight": 0.023041
          },
          {
            "term": "status",
            "tf": 4,
            "weight": 0.018433
          },
          {
            "term": "optimizations",
            "tf": 4,
            "weight": 0.018433
          },
          {
            "term": "update",
            "tf": 4,
            "weight": 0.018433
          },
          {
            "term": "collections",
            "tf": 4,
            "weight": 0.018433
          },
          {
            "term": "grey",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "localhost",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "new",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "grpc",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "may",
            "tf": 2,
            "weight": 0.009217
          },
          {
            "term": "pending",
            "tf": 2,
            "weight": 0.009217
          }
        ],
        "unique_terms": 104,
        "total_terms": 217
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Grey collection status",
        "client",
        "collection",
        "config",
        "name",
        "optimizers",
        "optimizersconfigdiff",
        "qdrant",
        "status",
        "the",
        "updatecollection"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.9212121212121211,
      "overall": 0.8737373737373737
    }
  },
  {
    "text": "### Create alias\n\n```http\nPOST /collections/aliases\n{\n    \"actions\": [\n        {\n            \"create_alias\": {\n                \"collection_name\": \"example_collection\",\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}\n```\n\n```bash\ncurl -X POST http://localhost:6333/collections/aliases \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"actions\": [\n        {\n            \"create_alias\": {\n                \"collection_name\": \"example_collection\",\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}'\n```\n\n```python\nclient.update_collection_aliases(\n    change_aliases_operations=[\n        models.CreateAliasOperation(\n            create_alias=models.CreateAlias(\n                collection_name=\"example_collection\", alias_name=\"production_collection\"\n            )\n        )\n    ]\n)\n```\n\n```typescript\nclient.updateCollectionAliases({\n  actions: [\n    {\n      create_alias: {\n        collection_name: \"example_collection\",\n        alias_name: \"production_collection\",\n      },\n    },\n  ],\n});\n```\n\n```rust\nuse qdrant_client::qdrant::CreateAliasBuilder;\n\nclient\n    .create_alias(CreateAliasBuilder::new(\n        \"example_collection\",\n        \"production_collection\",\n    ))\n    .await?;\n```\n\n```java\nclient.createAliasAsync(\"production_collection\", \"example_collection\").get();\n```\n\n```csharp\nawait client.CreateAliasAsync(aliasName: \"production_collection\", collectionName: \"example_collection\");\n```\n\n```go\nimport \"context\"\n\nclient.CreateAlias(context.Background(), \"production_collection\", \"example_collection\")\n```",
    "metadata": {
      "chunk_id": "094317ae8768-0030",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Create alias"
      ],
      "heading_text": "Create alias",
      "token_count": 335,
      "char_count": 1600,
      "start_char": 54576,
      "end_char": 56176,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6927330097087379,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.277890",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Create alias",
      "chunk_hash": "32ead3cc7b25b70f",
      "content_digest": "32ead3cc7b25b70f",
      "chunk_length": 1600,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "alias",
          "name",
          "example",
          "production",
          "client",
          "create",
          "aliases",
          "actions",
          "http",
          "post",
          "collections",
          "models",
          "createalias",
          "qdrant",
          "createaliasbuilder",
          "await",
          "createaliasasync",
          "context",
          "bash"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 21,
            "weight": 0.172131
          },
          {
            "term": "alias",
            "tf": 10,
            "weight": 0.081967
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.065574
          },
          {
            "term": "example",
            "tf": 8,
            "weight": 0.065574
          },
          {
            "term": "production",
            "tf": 8,
            "weight": 0.065574
          },
          {
            "term": "client",
            "tf": 7,
            "weight": 0.057377
          },
          {
            "term": "create",
            "tf": 6,
            "weight": 0.04918
          },
          {
            "term": "aliases",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "actions",
            "tf": 3,
            "weight": 0.02459
          },
          {
            "term": "http",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "post",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "createalias",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "createaliasbuilder",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "await",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "createaliasasync",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "context",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "bash",
            "tf": 1,
            "weight": 0.008197
          }
        ],
        "unique_terms": 46,
        "total_terms": 122
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Create alias",
        "actions",
        "alias",
        "aliases",
        "client",
        "collection",
        "create",
        "example",
        "http",
        "name",
        "production"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6927330097087379,
      "overall": 0.7642443365695791
    }
  },
  {
    "text": "### Switch collection\n\nMultiple alias actions are performed atomically. For example, you can switch underlying collection with the following command:\n\n```http\nPOST /collections/aliases\n{\n    \"actions\": [\n        {\n            \"delete_alias\": {\n                \"alias_name\": \"production_collection\"\n            }\n        },\n        {\n            \"create_alias\": {\n                \"collection_name\": \"example_collection\",\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}\n```\n\n```bash\ncurl -X POST http://localhost:6333/collections/aliases \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"actions\": [\n        {\n            \"delete_alias\": {\n                \"alias_name\": \"production_collection\"\n            }\n        },\n        {\n            \"create_alias\": {\n                \"collection_name\": \"example_collection\",\n                \"alias_name\": \"production_collection\"\n            }\n        }\n    ]\n}'\n```\n\n```python\nclient.update_collection_aliases(\n    change_aliases_operations=[\n        models.DeleteAliasOperation(\n            delete_alias=models.DeleteAlias(alias_name=\"production_collection\")\n        ),\n        models.CreateAliasOperation(\n            create_alias=models.CreateAlias(\n                collection_name=\"example_collection\", alias_name=\"production_collection\"\n            )\n        ),\n    ]\n)\n```\n\n```typescript\nclient.updateCollectionAliases({\n  actions: [\n    {\n      delete_alias: {\n        alias_name: \"production_collection\",\n      },\n    },\n    {\n      create_alias: {\n        collection_name: \"example_collection\",\n        alias_name: \"production_collection\",\n      },\n    },\n  ],\n});\n```\n\n```rust\nuse qdrant_client::qdrant::CreateAliasBuilder;\n\nclient.delete_alias(\"production_collection\").await?;\nclient\n    .create_alias(CreateAliasBuilder::new(\n        \"example_collection\",\n        \"production_collection\",\n    ))\n    .await?;\n```\n\n```java\nclient.deleteAliasAsync(\"production_collection\").get();\nclient.createAliasAsync(\"production_collection\", \"example_collection\").get();\n```\n\n```csharp\nawait client.DeleteAliasAsync(\"production_collection\");\nawait client.CreateAliasAsync(aliasName: \"production_collection\", collectionName: \"example_collection\");\n```\n\n```go\nimport \"context\"\n\nclient.DeleteAlias(context.Background(), \"production_collection\")\nclient.CreateAlias(context.Background(), \"production_collection\", \"example_collection\")\n```",
    "metadata": {
      "chunk_id": "094317ae8768-0032",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Switch collection"
      ],
      "heading_text": "Switch collection",
      "token_count": 475,
      "char_count": 2420,
      "start_char": 57331,
      "end_char": 59751,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.7245,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:21.279559",
      "document_id": "094317ae8768",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Switch collection",
      "chunk_hash": "6e4808725500db86",
      "content_digest": "6e4808725500db86",
      "chunk_length": 2420,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "alias",
          "production",
          "name",
          "client",
          "example",
          "delete",
          "create",
          "actions",
          "aliases",
          "models",
          "await",
          "context",
          "switch",
          "http",
          "post",
          "collections",
          "deletealias",
          "createalias",
          "qdrant"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 31,
            "weight": 0.164021
          },
          {
            "term": "alias",
            "tf": 19,
            "weight": 0.100529
          },
          {
            "term": "production",
            "tf": 16,
            "weight": 0.084656
          },
          {
            "term": "name",
            "tf": 12,
            "weight": 0.063492
          },
          {
            "term": "client",
            "tf": 11,
            "weight": 0.058201
          },
          {
            "term": "example",
            "tf": 9,
            "weight": 0.047619
          },
          {
            "term": "delete",
            "tf": 5,
            "weight": 0.026455
          },
          {
            "term": "create",
            "tf": 5,
            "weight": 0.026455
          },
          {
            "term": "actions",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "aliases",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "models",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "await",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "context",
            "tf": 3,
            "weight": 0.015873
          },
          {
            "term": "switch",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "http",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "post",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "deletealias",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "createalias",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.010582
          }
        ],
        "unique_terms": 63,
        "total_terms": 189
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Switch collection",
        "actions",
        "alias",
        "aliases",
        "client",
        "collection",
        "create",
        "delete",
        "example",
        "name",
        "production"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.7245,
      "overall": 0.7414999999999999
    }
  }
]