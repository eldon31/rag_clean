[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1034,
      "end_char": 3002,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.574316",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3684,
      "end_char": 5672,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.575345",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5674,
      "end_char": 5985,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.576340",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6362,
      "end_char": 8330,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.577414",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9012,
      "end_char": 11000,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.577414",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Parameterized index  *Available as of v1.8.0*  We’ve added a parameterized variant to the `integer` index, which allows you to fine-tune indexing and search performance. Both the regular and parameterized `integer` indexes use the following flags:  - `lookup`: enables support for direct lookup using [Match](https://qdrant.tech/documentation/concepts/filtering/#match) filters. - `range`: enables support for [Range](https://qdrant.tech/documentation/concepts/filtering/#range) filters. The regular `integer` index assumes both `lookup` and `range` are `true`. In contrast, to configure a parameterized index, you would set only one of these filters to `true`:  | `lookup` | `range` | Result                      | | -------- | ------- | --------------------------- | | `true`   | `true`  | Regular integer index       | | `true`   | `false` | Parameterized integer index | | `false`  | `true`  | Parameterized integer index | | `false`  | `false` | No integer index            |  The parameterized index can enhance performance in collections with millions of points. We encourage you to try it out. If it does not enhance performance in your use case, you can always restore the regular `integer` index. Note: If you set `\"lookup\": true` with a range filter, that may lead to significant performance issues. For example, the following code sets up a parameterized integer index which supports only range filters: ```http PUT /collections/{collection_name}/index {     \"field_name\": \"name_of_the_field_to_index\",     \"field_schema\": {         \"type\": \"integer\",         \"lookup\": false,         \"range\": true     } } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.create_payload_index(     collection_name=\"{collection_name}\",     field_name=\"name_of_the_field_to_index\",     field_schema=models.IntegerIndexParams(         type=models.IntegerIndexType.INTEGER,         lookup=False,         range=True,     ), ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.createPayloadIndex(\"{collection_name}\", {   field_name: \"name_of_the_field_to_index\",   field_schema: {     type: \"integer\",     lookup: false,     range: true,   }, }); ``` ```rust use qdrant_client::qdrant::{     payload_index_params::IndexParams, CreateFieldIndexCollectionBuilder, FieldType,     IntegerIndexParams, PayloadIndexParams, }; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .create_field_index(         CreateFieldIndexCollectionBuilder::new(             \"{collection_name}\",             \"name_of_the_field_to_index\",             FieldType::Integer,         )         .field_index_params(PayloadIndexParams {             index_params: Some(IndexParams::IntegerIndexParams(IntegerIndexParams {                 lookup: false,                 range: true,             })),         }),     )     .await?; ``` ```java import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Collections.IntegerIndexParams; import io.qdrant.client.grpc.Collections.PayloadIndexParams; import io.qdrant.client.grpc.Collections.PayloadSchemaType;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .createPayloadIndexAsync(         \"{collection_name}\",         \"name_of_the_field_to_index\",         PayloadSchemaType.Integer,         PayloadIndexParams.newBuilder()             .setIntegerIndexParams(                 IntegerIndexParams.newBuilder().setLookup(false).setRange(true).build())             .build(),         null,         null,         null)     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.CreatePayloadIndexAsync(     collectionName: \"{collection_name}\",     fieldName: \"name_of_the_field_to_index\",     schemaType: PayloadSchemaType.Integer,     indexParams: new PayloadIndexParams     { \t    IntegerIndexParams = new() \t    { \t\t    Lookup = false, \t\t    Range = true \t    }     } ); ``` ```go",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0013",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Parameterized index"
      ],
      "heading_text": "Parameterized index",
      "token_count": 976,
      "char_count": 4212,
      "start_char": 17040,
      "end_char": 21252,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8672,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.583732",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Parameterized index",
      "chunk_hash": "b0d9fec731635e52",
      "content_digest": "b0d9fec731635e52",
      "chunk_length": 4212,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "index",
          "client",
          "qdrant",
          "name",
          "integer",
          "field",
          "the",
          "true",
          "range",
          "false",
          "lookup",
          "parameterized",
          "qdrantclient",
          "collection",
          "import",
          "integerindexparams",
          "new",
          "you",
          "collections",
          "localhost"
        ],
        "term_weights": [
          {
            "term": "index",
            "tf": 23,
            "weight": 0.05665
          },
          {
            "term": "client",
            "tf": 21,
            "weight": 0.051724
          },
          {
            "term": "qdrant",
            "tf": 16,
            "weight": 0.039409
          },
          {
            "term": "name",
            "tf": 16,
            "weight": 0.039409
          },
          {
            "term": "integer",
            "tf": 15,
            "weight": 0.036946
          },
          {
            "term": "field",
            "tf": 14,
            "weight": 0.034483
          },
          {
            "term": "the",
            "tf": 13,
            "weight": 0.03202
          },
          {
            "term": "true",
            "tf": 13,
            "weight": 0.03202
          },
          {
            "term": "range",
            "tf": 12,
            "weight": 0.029557
          },
          {
            "term": "false",
            "tf": 11,
            "weight": 0.027094
          },
          {
            "term": "lookup",
            "tf": 10,
            "weight": 0.024631
          },
          {
            "term": "parameterized",
            "tf": 8,
            "weight": 0.019704
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.019704
          },
          {
            "term": "collection",
            "tf": 7,
            "weight": 0.017241
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.017241
          },
          {
            "term": "integerindexparams",
            "tf": 7,
            "weight": 0.017241
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.014778
          },
          {
            "term": "you",
            "tf": 5,
            "weight": 0.012315
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.012315
          },
          {
            "term": "localhost",
            "tf": 5,
            "weight": 0.012315
          }
        ],
        "unique_terms": 129,
        "total_terms": 406
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Parameterized index",
        "client",
        "false",
        "field",
        "index",
        "integer",
        "name",
        "qdrant",
        "range",
        "the",
        "true"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8672,
      "overall": 0.8224
    }
  },
  {
    "text": "### On-disk payload index\n\n*Available as of v1.11.0*\n\nBy default all payload-related structures are stored in memory. In this way, the vector index can quickly access payload values during search. As latency in this case is critical, it is recommended to keep hot payload indexes in memory.\n\nThere are, however, cases when payload indexes are too large or rarely used. In those cases, it is possible to store payload indexes on disk.\n\nOn-disk payload index might affect cold requests latency, as it requires additional disk I/O operations.\n\nTo configure on-disk payload index, you can use the following index parameters:\n\n```http\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"payload_field_name\",\n    \"field_schema\": {\n        \"type\": \"keyword\",\n        \"on_disk\": true\n    }\n}\n```\n\n```python\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"payload_field_name\",\n    field_schema=models.KeywordIndexParams(\n        type=models.KeywordIndexType.KEYWORD,\n        on_disk=True,\n    ),\n)\n```\n\n```typescript\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"payload_field_name\",\n  field_schema: {\n    type: \"keyword\",\n    on_disk: true\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    KeywordIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n    CreateFieldIndexCollectionBuilder::new(\n        \"{collection_name}\",\n        \"payload_field_name\",\n        FieldType::Keyword,\n    )\n    .field_index_params(\n        KeywordIndexParamsBuilder::default()\n            .on_disk(true),\n    ),\n);\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.KeywordIndexParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"payload_field_name\",\n        PayloadSchemaType.Keyword,\n        PayloadIndexParams.newBuilder()\n            .setKeywordIndexParams(\n                KeywordIndexParams.newBuilder()\n                    .setOnDisk(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n collectionName: \"{collection_name}\",\n fieldName: \"payload_field_name\",\n schemaType: PayloadSchemaType.Keyword,\n indexParams: new PayloadIndexParams\n {\n  KeywordIndexParams = new KeywordIndexParams\n  {\n   OnDisk   = true\n  }\n }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n\tCollectionName: \"{collection_name}\",\n\tFieldName:      \"name_of_the_field_to_index\",\n\tFieldType:      qdrant.FieldType_FieldTypeKeyword.Enum(),\n\tFieldIndexParams: qdrant.NewPayloadIndexParamsKeyword(\n\t\t&qdrant.KeywordIndexParams{\n\t\t\tOnDisk: qdrant.PtrOf(true),\n\t\t}),\n})\n```\n\nPayload index on-disk is supported for the following types:\n\n- `keyword`\n- `integer`\n- `float`\n- `datetime`\n- `uuid`\n- `text`\n- `geo`\n\nThe list will be extended in future versions.",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0015",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "On-disk payload index"
      ],
      "heading_text": "On-disk payload index",
      "token_count": 842,
      "char_count": 3577,
      "start_char": 21768,
      "end_char": 25345,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.7013559322033898,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.583732",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "On-disk payload index",
      "chunk_hash": "f237c1e89c92bb88",
      "content_digest": "f237c1e89c92bb88",
      "chunk_length": 3577,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "name",
          "payload",
          "field",
          "index",
          "disk",
          "collection",
          "keyword",
          "true",
          "keywordindexparams",
          "import",
          "the",
          "new",
          "collections",
          "fieldtype",
          "localhost",
          "6334",
          "build",
          "qdrantclient"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 21,
            "weight": 0.062687
          },
          {
            "term": "client",
            "tf": 20,
            "weight": 0.059701
          },
          {
            "term": "name",
            "tf": 18,
            "weight": 0.053731
          },
          {
            "term": "payload",
            "tf": 16,
            "weight": 0.047761
          },
          {
            "term": "field",
            "tf": 15,
            "weight": 0.044776
          },
          {
            "term": "index",
            "tf": 11,
            "weight": 0.032836
          },
          {
            "term": "disk",
            "tf": 10,
            "weight": 0.029851
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.023881
          },
          {
            "term": "keyword",
            "tf": 7,
            "weight": 0.020896
          },
          {
            "term": "true",
            "tf": 7,
            "weight": 0.020896
          },
          {
            "term": "keywordindexparams",
            "tf": 6,
            "weight": 0.01791
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.01791
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.014925
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.014925
          },
          {
            "term": "collections",
            "tf": 4,
            "weight": 0.01194
          },
          {
            "term": "fieldtype",
            "tf": 4,
            "weight": 0.01194
          },
          {
            "term": "localhost",
            "tf": 4,
            "weight": 0.01194
          },
          {
            "term": "6334",
            "tf": 4,
            "weight": 0.01194
          },
          {
            "term": "build",
            "tf": 4,
            "weight": 0.01194
          },
          {
            "term": "qdrantclient",
            "tf": 4,
            "weight": 0.01194
          }
        ],
        "unique_terms": 136,
        "total_terms": 335
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "On-disk payload index",
        "client",
        "collection",
        "disk",
        "field",
        "index",
        "keyword",
        "name",
        "payload",
        "qdrant",
        "true"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.7013559322033898,
      "overall": 0.8004519774011299
    }
  },
  {
    "text": "### Tenant Index\n\n*Available as of v1.11.0*\n\nMany vector search use-cases require multitenancy. In a multi-tenant scenario the collection is expected to contain multiple subsets of data, where each subset belongs to a different tenant.\n\nQdrant supports efficient multi-tenant search by enabling [special configuration](https://qdrant.tech/documentation/guides/multiple-partitions/) vector index, which disables global search and only builds sub-indexes for each tenant.\n\nIn Qdrant, tenants are not necessarily non-overlapping. It is possible to have subsets of data that belong to multiple tenants.\n\nHowever, knowing that the collection contains multiple tenants unlocks more opportunities for optimization. To optimize storage in Qdrant further, you can enable tenant indexing for payload fields.\n\nThis option will tell Qdrant which fields are used for tenant identification and will allow Qdrant to structure storage for faster search of tenant-specific data. One example of such optimization is localizing tenant-specific data closer on disk, which will reduce the number of disk reads during search.\n\nTo enable tenant index for a field, you can use the following index parameters:\n\n```http\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"payload_field_name\",\n    \"field_schema\": {\n        \"type\": \"keyword\",\n        \"is_tenant\": true\n    }\n}\n```\n\n```python\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"payload_field_name\",\n    field_schema=models.KeywordIndexParams(\n        type=models.KeywordIndexType.KEYWORD,\n        is_tenant=True,\n    ),\n)\n```\n\n```typescript\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"payload_field_name\",\n  field_schema: {\n    type: \"keyword\",\n    is_tenant: true\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    KeywordIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n    CreateFieldIndexCollectionBuilder::new(\n        \"{collection_name}\",\n        \"payload_field_name\",\n        FieldType::Keyword,\n    )\n    .field_index_params(\n        KeywordIndexParamsBuilder::default()\n            .is_tenant(true),\n    ),\n);\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.KeywordIndexParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"payload_field_name\",\n        PayloadSchemaType.Keyword,\n        PayloadIndexParams.newBuilder()\n            .setKeywordIndexParams(\n                KeywordIndexParams.newBuilder()\n                    .setIsTenant(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n collectionName: \"{collection_name}\",\n fieldName: \"payload_field_name\",\n schemaType: PayloadSchemaType.Keyword,\n indexParams: new PayloadIndexParams\n {\n  KeywordIndexParams = new KeywordIndexParams\n  {\n   IsTenant = true\n  }\n }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tenant Index"
      ],
      "heading_text": "Tenant Index",
      "token_count": 811,
      "char_count": 3612,
      "start_char": 25347,
      "end_char": 28959,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8987261146496817,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.589414",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Tenant Index",
      "chunk_hash": "d91f2930dffc1de2",
      "content_digest": "d91f2930dffc1de2",
      "chunk_length": 3612,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "name",
          "field",
          "tenant",
          "collection",
          "index",
          "payload",
          "for",
          "keyword",
          "true",
          "import",
          "search",
          "keywordindexparams",
          "new",
          "use",
          "the",
          "multiple",
          "data",
          "collections"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.060942
          },
          {
            "term": "client",
            "tf": 19,
            "weight": 0.052632
          },
          {
            "term": "name",
            "tf": 16,
            "weight": 0.044321
          },
          {
            "term": "field",
            "tf": 15,
            "weight": 0.041551
          },
          {
            "term": "tenant",
            "tf": 14,
            "weight": 0.038781
          },
          {
            "term": "collection",
            "tf": 9,
            "weight": 0.024931
          },
          {
            "term": "index",
            "tf": 8,
            "weight": 0.022161
          },
          {
            "term": "payload",
            "tf": 8,
            "weight": 0.022161
          },
          {
            "term": "for",
            "tf": 6,
            "weight": 0.01662
          },
          {
            "term": "keyword",
            "tf": 6,
            "weight": 0.01662
          },
          {
            "term": "true",
            "tf": 6,
            "weight": 0.01662
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.01662
          },
          {
            "term": "search",
            "tf": 5,
            "weight": 0.01385
          },
          {
            "term": "keywordindexparams",
            "tf": 5,
            "weight": 0.01385
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.01385
          },
          {
            "term": "use",
            "tf": 4,
            "weight": 0.01108
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.01108
          },
          {
            "term": "multiple",
            "tf": 4,
            "weight": 0.01108
          },
          {
            "term": "data",
            "tf": 4,
            "weight": 0.01108
          },
          {
            "term": "collections",
            "tf": 4,
            "weight": 0.01108
          }
        ],
        "unique_terms": 154,
        "total_terms": 361
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tenant Index",
        "client",
        "collection",
        "field",
        "for",
        "index",
        "keyword",
        "name",
        "payload",
        "qdrant",
        "tenant"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8987261146496817,
      "overall": 0.7995753715498939
    }
  },
  {
    "text": "### Principal Index\n\n*Available as of v1.11.0*\n\nSimilar to the tenant index, the principal index is used to optimize storage for faster search, assuming that the search request is primarily filtered by the principal field.\n\nA good example of a use case for the principal index is time-related data, where each point is associated with a timestamp. In this case, the principal index can be used to optimize storage for faster search with time-based filters.\n\n```http\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"timestamp\",\n    \"field_schema\": {\n        \"type\": \"integer\",\n        \"is_principal\": true\n    }\n}\n```\n\n```python\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"timestamp\",\n    field_schema=models.IntegerIndexParams(\n        type=models.IntegerIndexType.INTEGER,\n        is_principal=True,\n    ),\n)\n```\n\n```typescript\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"timestamp\",\n  field_schema: {\n    type: \"integer\",\n    is_principal: true\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    IntegerIndexParamsBuilder,\n    FieldType\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.create_field_index(\n    CreateFieldIndexCollectionBuilder::new(\n        \"{collection_name}\",\n        \"timestamp\",\n        FieldType::Integer,\n    )\n    .field_index_params(\n        IntegerIndexParamsBuilder::default()\n            .is_principal(true),\n    ),\n);\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.IntegerIndexParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"timestamp\",\n        PayloadSchemaType.Integer,\n        PayloadIndexParams.newBuilder()\n            .setIntegerIndexParams(\n                KeywordIndexParams.newBuilder()\n                    .setIsPrincipa(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreatePayloadIndexAsync(\n collectionName: \"{collection_name}\",\n fieldName: \"timestamp\",\n schemaType: PayloadSchemaType.Integer,\n indexParams: new PayloadIndexParams\n {\n  IntegerIndexParams = new IntegerIndexParams\n  {\n   IsPrincipal = true\n  }\n }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateFieldIndex(context.Background(), &qdrant.CreateFieldIndexCollection{\n\tCollectionName: \"{collection_name}\",\n\tFieldName:      \"name_of_the_field_to_index\",\n\tFieldType:      qdrant.FieldType_FieldTypeInteger.Enum(),\n\tFieldIndexParams: qdrant.NewPayloadIndexParamsInt(\n\t\t&qdrant.IntegerIndexParams{\n\t\t\tIsPrincipal: qdrant.PtrOf(true),\n\t\t}),\n})\n```\n\nPrincipal optimization is supported for following types:\n\n- `integer`\n- `float`\n- `datetime`",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0018",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Principal Index"
      ],
      "heading_text": "Principal Index",
      "token_count": 765,
      "char_count": 3299,
      "start_char": 29405,
      "end_char": 32704,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.8980237154150199,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.589414",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Principal Index",
      "chunk_hash": "979cd4cb8fb552f9",
      "content_digest": "979cd4cb8fb552f9",
      "chunk_length": 3299,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "name",
          "principal",
          "index",
          "field",
          "collection",
          "the",
          "timestamp",
          "integer",
          "true",
          "import",
          "integerindexparams",
          "new",
          "for",
          "collections",
          "fieldtype",
          "localhost",
          "6334",
          "build"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 21,
            "weight": 0.071429
          },
          {
            "term": "client",
            "tf": 20,
            "weight": 0.068027
          },
          {
            "term": "name",
            "tf": 12,
            "weight": 0.040816
          },
          {
            "term": "principal",
            "tf": 10,
            "weight": 0.034014
          },
          {
            "term": "index",
            "tf": 10,
            "weight": 0.034014
          },
          {
            "term": "field",
            "tf": 10,
            "weight": 0.034014
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.027211
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.02381
          },
          {
            "term": "timestamp",
            "tf": 7,
            "weight": 0.02381
          },
          {
            "term": "integer",
            "tf": 7,
            "weight": 0.02381
          },
          {
            "term": "true",
            "tf": 7,
            "weight": 0.02381
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.020408
          },
          {
            "term": "integerindexparams",
            "tf": 5,
            "weight": 0.017007
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.017007
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.013605
          },
          {
            "term": "collections",
            "tf": 4,
            "weight": 0.013605
          },
          {
            "term": "fieldtype",
            "tf": 4,
            "weight": 0.013605
          },
          {
            "term": "localhost",
            "tf": 4,
            "weight": 0.013605
          },
          {
            "term": "6334",
            "tf": 4,
            "weight": 0.013605
          },
          {
            "term": "build",
            "tf": 4,
            "weight": 0.013605
          }
        ],
        "unique_terms": 114,
        "total_terms": 294
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Principal Index",
        "client",
        "collection",
        "field",
        "index",
        "integer",
        "name",
        "principal",
        "qdrant",
        "the",
        "timestamp"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.8980237154150199,
      "overall": 0.7993412384716733
    }
  },
  {
    "text": "## Full-text index\n\nQdrant supports full-text search for string payload. Full-text index allows you to filter points by the presence of a word or a phrase in the payload field.\n\nFull-text index configuration is a bit more complex than other indexes, as you can specify the tokenization parameters. Tokenization is the process of splitting a string into tokens, which are then indexed in the inverted index.\n\nSee [Full Text match](https://qdrant.tech/documentation/concepts/filtering/#full-text-match) for examples of querying with a full-text index.\n\nTo create a full-text index, you can use the following:\n\n```http\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"name_of_the_field_to_index\",\n    \"field_schema\": {\n        \"type\": \"text\",\n        \"tokenizer\": \"word\",\n        \"min_token_len\": 2,\n        \"max_token_len\": 10,\n        \"lowercase\": true\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"name_of_the_field_to_index\",\n    field_schema=models.TextIndexParams(\n        type=\"text\",\n        tokenizer=models.TokenizerType.WORD,\n        min_token_len=2,\n        max_token_len=10,\n        lowercase=True,\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"name_of_the_field_to_index\",\n  field_schema: {\n    type: \"text\",\n    tokenizer: \"word\",\n    min_token_len: 2,\n    max_token_len: 10,\n    lowercase: true,\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    TextIndexParamsBuilder,\n    FieldType,\n    TokenizerType,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet text_index_params = TextIndexParamsBuilder::new(TokenizerType::Word)\n    .min_token_len(2)\n    .max_token_len(10)\n    .lowercase(true);\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"name_of_the_field_to_index\",\n            FieldType::Text,\n        ).field_index_params(text_index_params.build()),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.TextIndexParams;\nimport io.qdrant.client.grpc.Collections.TokenizerType;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"name_of_the_field_to_index\",\n        PayloadSchemaType.Text,\n        PayloadIndexParams.newBuilder()\n            .setTextIndexParams(\n                TextIndexParams.newBuilder()\n                    .setTokenizer(TokenizerType.Word)\n                    .setMinTokenLen(2)\n                    .setMaxTokenLen(10)\n                    .setLowercase(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Full-text index"
      ],
      "heading_text": "Full-text index",
      "token_count": 803,
      "char_count": 3388,
      "start_char": 32706,
      "end_char": 36094,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.597961",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Full-text index",
      "chunk_hash": "e3a46a028b777743",
      "content_digest": "e3a46a028b777743",
      "chunk_length": 3388,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "index",
          "qdrant",
          "text",
          "field",
          "name",
          "the",
          "full",
          "token",
          "len",
          "import",
          "qdrantclient",
          "word",
          "collection",
          "collections",
          "true",
          "localhost",
          "tokenizertype",
          "new",
          "build"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 21,
            "weight": 0.061947
          },
          {
            "term": "index",
            "tf": 17,
            "weight": 0.050147
          },
          {
            "term": "qdrant",
            "tf": 17,
            "weight": 0.050147
          },
          {
            "term": "text",
            "tf": 15,
            "weight": 0.044248
          },
          {
            "term": "field",
            "tf": 14,
            "weight": 0.041298
          },
          {
            "term": "name",
            "tf": 14,
            "weight": 0.041298
          },
          {
            "term": "the",
            "tf": 11,
            "weight": 0.032448
          },
          {
            "term": "full",
            "tf": 8,
            "weight": 0.023599
          },
          {
            "term": "token",
            "tf": 8,
            "weight": 0.023599
          },
          {
            "term": "len",
            "tf": 8,
            "weight": 0.023599
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.023599
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.023599
          },
          {
            "term": "word",
            "tf": 6,
            "weight": 0.017699
          },
          {
            "term": "collection",
            "tf": 6,
            "weight": 0.017699
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.014749
          },
          {
            "term": "true",
            "tf": 5,
            "weight": 0.014749
          },
          {
            "term": "localhost",
            "tf": 5,
            "weight": 0.014749
          },
          {
            "term": "tokenizertype",
            "tf": 5,
            "weight": 0.014749
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.014749
          },
          {
            "term": "build",
            "tf": 5,
            "weight": 0.014749
          }
        ],
        "unique_terms": 110,
        "total_terms": 339
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Full-text index",
        "client",
        "field",
        "full",
        "index",
        "len",
        "name",
        "qdrant",
        "text",
        "the",
        "token"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.7692307692307692
    }
  },
  {
    "text": "### Tokenizers  Tokenizers are algorithms used to split text into smaller units called tokens, which are then indexed and searched in a full-text index. In the context of Qdrant, tokenizers determine how string payloads are broken down for efficient searching and filtering. The choice of tokenizer affects how queries match the indexed text, supporting different languages, word boundaries, and search behaviours such as prefix or phrase matching. Available tokenizers are:  - `word` - splits the string into words, separated by spaces, punctuation marks, and special characters. - `whitespace` - splits the string into words, separated by spaces. - `prefix` - splits the string into words, separated by spaces, punctuation marks, and special characters, and then creates a prefix index for each word. For example: `hello` will be indexed as `h`, `he`, `hel`, `hell`, `hello`. - `multilingual` - a special type of tokenizer based on multiple packages like [charabia](https://github.com/meilisearch/charabia) and [vaporetto](https://github.com/daac-tools/vaporetto) to deliver fast and accurate tokenization for a large variety of languages. It allows proper tokenization and lemmatization for multiple languages, including those with non-Latin alphabets and non-space delimiters. See the [charabia documentation](https://github.com/meilisearch/charabia) for a full list of supported languages and normalization options. Note: For the Japanese language, Qdrant relies on the `vaporetto` project, which has much less overhead compared to `charabia`, while maintaining comparable performance.",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0021",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tokenizers"
      ],
      "heading_text": "Tokenizers",
      "token_count": 350,
      "char_count": 1590,
      "start_char": 37084,
      "end_char": 38674,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6966666666666667,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.598075",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Tokenizers",
      "chunk_hash": "c1d5a660fe6630ea",
      "content_digest": "c1d5a660fe6630ea",
      "chunk_length": 1590,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "and",
          "the",
          "for",
          "charabia",
          "tokenizers",
          "are",
          "into",
          "string",
          "languages",
          "text",
          "indexed",
          "word",
          "prefix",
          "splits",
          "words",
          "separated",
          "spaces",
          "special",
          "https",
          "github"
        ],
        "term_weights": [
          {
            "term": "and",
            "tf": 11,
            "weight": 0.055276
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.045226
          },
          {
            "term": "for",
            "tf": 7,
            "weight": 0.035176
          },
          {
            "term": "charabia",
            "tf": 5,
            "weight": 0.025126
          },
          {
            "term": "tokenizers",
            "tf": 4,
            "weight": 0.020101
          },
          {
            "term": "are",
            "tf": 4,
            "weight": 0.020101
          },
          {
            "term": "into",
            "tf": 4,
            "weight": 0.020101
          },
          {
            "term": "string",
            "tf": 4,
            "weight": 0.020101
          },
          {
            "term": "languages",
            "tf": 4,
            "weight": 0.020101
          },
          {
            "term": "text",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "indexed",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "word",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "prefix",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "splits",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "words",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "separated",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "spaces",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "special",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.015075
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.015075
          }
        ],
        "unique_terms": 115,
        "total_terms": 199
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tokenizers",
        "and",
        "are",
        "charabia",
        "for",
        "into",
        "languages",
        "string",
        "text",
        "the",
        "tokenizers"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6966666666666667,
      "overall": 0.7655555555555554
    }
  },
  {
    "text": "### Stemmer\n\nA **stemmer** is an algorithm used in text processing to reduce words to their root or base form, known as the “stem.” For example, the words “running”, “runner and “runs” can all be reduced to the stem “run.” When configuring a full-text index in Qdrant, you can specify a stemmer to be used for a particular language. This enables the index to recognize and match different inflections or derivations of a word.\n\nQdrant provides an implementation of [Snowball stemmer](https://snowballstem.org/), a widely used and performant variant for some of the most popular languages. For the list of supported languages, please visit the [rust-stemmers repository](https://github.com/qdrant/rust-stemmers).\n\nHere is an example of full-text Index configuration with Snowball stemmer:\n\n```http\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"name_of_the_field_to_index\",\n    \"field_schema\": {\n        \"type\": \"text\",\n        \"tokenizer\": \"word\",\n        \"stemmer\": {\n            \"type\": \"snowball\",\n            \"language\": \"english\"\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"name_of_the_field_to_index\",\n    field_schema=models.TextIndexParams(\n        type=\"text\",\n        tokenizer=models.TokenizerType.WORD,\n        stemmer=models.SnowballParams(\n            type=models.Snowball.SNOWBALL,\n            language=models.SnowballLanguage.ENGLISH\n        )\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"name_of_the_field_to_index\",\n  field_schema: {\n    type: \"text\",\n    tokenizer: \"word\",\n    stemmer: {\n      type: \"snowball\",\n      language: \"english\"\n    }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    TextIndexParamsBuilder,\n    FieldType,\n    TokenizerType,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet text_index_params = TextIndexParamsBuilder::new(TokenizerType::Word)\n    .snowball_stemmer(\"english\".to_string());\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"{field_name}\",\n            FieldType::Text,\n        ).field_index_params(text_index_params.build()),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.SnowballParams;\nimport io.qdrant.client.grpc.Collections.StemmingAlgorithm;\nimport io.qdrant.client.grpc.Collections.TextIndexParams;\nimport io.qdrant.client.grpc.Collections.TokenizerType;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0022",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Stemmer"
      ],
      "heading_text": "Stemmer",
      "token_count": 744,
      "char_count": 3092,
      "start_char": 38677,
      "end_char": 41769,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.8980000000000001,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.601784",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Stemmer",
      "chunk_hash": "b9e56d44562449f0",
      "content_digest": "b9e56d44562449f0",
      "chunk_length": 3092,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "index",
          "name",
          "field",
          "the",
          "import",
          "stemmer",
          "text",
          "snowball",
          "collections",
          "qdrantclient",
          "type",
          "models",
          "grpc",
          "word",
          "collection",
          "for",
          "language",
          "english"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 19,
            "weight": 0.060317
          },
          {
            "term": "qdrant",
            "tf": 18,
            "weight": 0.057143
          },
          {
            "term": "index",
            "tf": 12,
            "weight": 0.038095
          },
          {
            "term": "name",
            "tf": 12,
            "weight": 0.038095
          },
          {
            "term": "field",
            "tf": 12,
            "weight": 0.038095
          },
          {
            "term": "the",
            "tf": 10,
            "weight": 0.031746
          },
          {
            "term": "import",
            "tf": 10,
            "weight": 0.031746
          },
          {
            "term": "stemmer",
            "tf": 9,
            "weight": 0.028571
          },
          {
            "term": "text",
            "tf": 9,
            "weight": 0.028571
          },
          {
            "term": "snowball",
            "tf": 7,
            "weight": 0.022222
          },
          {
            "term": "collections",
            "tf": 7,
            "weight": 0.022222
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.022222
          },
          {
            "term": "type",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "models",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "grpc",
            "tf": 6,
            "weight": 0.019048
          },
          {
            "term": "word",
            "tf": 5,
            "weight": 0.015873
          },
          {
            "term": "collection",
            "tf": 5,
            "weight": 0.015873
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.012698
          },
          {
            "term": "language",
            "tf": 4,
            "weight": 0.012698
          },
          {
            "term": "english",
            "tf": 4,
            "weight": 0.012698
          }
        ],
        "unique_terms": 116,
        "total_terms": 315
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Stemmer",
        "client",
        "field",
        "import",
        "index",
        "name",
        "qdrant",
        "snowball",
        "stemmer",
        "text",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.8980000000000001,
      "overall": 0.766
    }
  },
  {
    "text": "### Stopwords\n\nStopwords are common words (such as “the”, “is”, “at”, “which”, and “on”) that are often filtered out during text processing because they carry little meaningful information for search and retrieval tasks.\n\nIn Qdrant, you can specify a list of stopwords to be ignored during full-text indexing and search. This helps simplify search queries and improves relevance.\n\nYou can configure stopwords based on predefined languages, as well as extend existing stopword lists with custom words.\n\nHere is an example of configuring a full-text index with custom stopwords:\n\n```http\n// Simple\nPUT collections/{collection_name}/index\n{\n    \"field_name\": \"name_of_the_field_to_index\",\n    \"field_schema\": {\n        \"type\": \"text\",\n        \"tokenizer\": \"word\",\n        \"stopwords\": \"english\"\n    }\n}\n\n// Explicit\nPUT collections/{collection_name}/index\n{\n    \"field_name\": \"name_of_the_field_to_index\",\n    \"field_schema\": {\n        \"type\": \"text\",\n        \"tokenizer\": \"word\",\n        \"stopwords\": {\n            \"languages\": [\n                \"english\",\n                \"spanish\"\n            ],\n            \"custom\": [\n                \"example\"\n            ]\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0024",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Stopwords"
      ],
      "heading_text": "Stopwords",
      "token_count": 289,
      "char_count": 1291,
      "start_char": 43592,
      "end_char": 44883,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.7,
      "retrieval_quality": 0.7102797202797203,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.602959",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Stopwords",
      "chunk_hash": "a4b9be4346117dc7",
      "content_digest": "a4b9be4346117dc7",
      "chunk_length": 1291,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "stopwords",
          "name",
          "field",
          "text",
          "index",
          "and",
          "the",
          "search",
          "custom",
          "are",
          "words",
          "during",
          "qdrant",
          "you",
          "can",
          "full",
          "languages",
          "with",
          "example",
          "http"
        ],
        "term_weights": [
          {
            "term": "stopwords",
            "tf": 7,
            "weight": 0.053435
          },
          {
            "term": "name",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "field",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "text",
            "tf": 5,
            "weight": 0.038168
          },
          {
            "term": "index",
            "tf": 5,
            "weight": 0.038168
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.022901
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.022901
          },
          {
            "term": "custom",
            "tf": 3,
            "weight": 0.022901
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "words",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "during",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "full",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "languages",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "example",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "http",
            "tf": 2,
            "weight": 0.015267
          }
        ],
        "unique_terms": 77,
        "total_terms": 131
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Stopwords",
        "and",
        "are",
        "custom",
        "field",
        "index",
        "name",
        "search",
        "stopwords",
        "text",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.7,
      "retrieval_quality": 0.7102797202797203,
      "overall": 0.7367599067599068
    }
  },
  {
    "text": "# Simple\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"name_of_the_field_to_index\",\n    field_schema=models.TextIndexParams(\n        type=\"text\",\n        tokenizer=models.TokenizerType.WORD,\n        stopwords=models.Language.ENGLISH,\n    ),\n)",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0025",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Simple"
      ],
      "heading_text": "Simple",
      "token_count": 58,
      "char_count": 282,
      "start_char": 44885,
      "end_char": 45167,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.602959",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Simple",
      "chunk_hash": "7ca4f07355a75b9d",
      "content_digest": "7ca4f07355a75b9d",
      "chunk_length": 282,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "name",
          "field",
          "models",
          "index",
          "collection",
          "simple",
          "client",
          "create",
          "payload",
          "the",
          "schema",
          "textindexparams",
          "type",
          "text",
          "tokenizer",
          "tokenizertype",
          "word",
          "stopwords",
          "language",
          "english"
        ],
        "term_weights": [
          {
            "term": "name",
            "tf": 4,
            "weight": 0.137931
          },
          {
            "term": "field",
            "tf": 3,
            "weight": 0.103448
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.103448
          },
          {
            "term": "index",
            "tf": 2,
            "weight": 0.068966
          },
          {
            "term": "collection",
            "tf": 2,
            "weight": 0.068966
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "client",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "create",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "payload",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "schema",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "textindexparams",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "text",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "tokenizer",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "tokenizertype",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "word",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "stopwords",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "language",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "english",
            "tf": 1,
            "weight": 0.034483
          }
        ],
        "unique_terms": 20,
        "total_terms": 29
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Simple",
        "client",
        "collection",
        "create",
        "field",
        "index",
        "models",
        "name",
        "payload",
        "simple",
        "the"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.59,
      "overall": 0.6299999999999999
    }
  },
  {
    "text": "# Explicit\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"name_of_the_field_to_index\",\n    field_schema=models.TextIndexParams(\n        type=\"text\",\n        tokenizer=models.TokenizerType.WORD,\n        stopwords=models.StopwordsSet(\n            languages=[\n                models.Language.ENGLISH,\n                models.Language.SPANISH,\n            ],\n            custom=[\n                \"example\"\n            ]\n        ),\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\n// Simple\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"name_of_the_field_to_index\",\n  field_schema: {\n    type: \"text\",\n    tokenizer: \"word\",\n    stopwords: \"english\"\n  },\n});\n\n// Explicit\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"name_of_the_field_to_index\",\n  field_schema: {\n    type: \"text\",\n    tokenizer: \"word\",\n    stopwords: {\n      languages: [\n        \"english\",\n        \"spanish\"\n      ],\n      custom: [\n        \"example\"\n      ]\n    }\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    TextIndexParamsBuilder,\n    FieldType,\n    TokenizerType,\n    StopwordsSet,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\n// Simple\nlet text_index_params = TextIndexParamsBuilder::new(TokenizerType::Word)\n    .stopwords_language(\"english\".to_string());\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"name_of_the_field_to_index\",\n            FieldType::Text,\n        ).field_index_params(text_index_params.build()),\n    )\n    .await?;\n\n// Explicit\nlet text_index_params = TextIndexParamsBuilder::new(TokenizerType::Word)\n    .stopwords(StopwordsSet {\n        languages: vec![\n            \"english\".to_string(),\n            \"spanish\".to_string(),\n        ],\n        custom: vec![\"example\".to_string()],\n    });\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"{field_name}\",\n            FieldType::Text,\n        ).field_index_params(text_index_params.build()),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.StopwordsSet;\nimport io.qdrant.client.grpc.Collections.TextIndexParams;\nimport io.qdrant.client.grpc.Collections.TokenizerType;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0026",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Explicit"
      ],
      "heading_text": "Explicit",
      "token_count": 644,
      "char_count": 2805,
      "start_char": 45169,
      "end_char": 47974,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.8732919254658384,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.602959",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Explicit",
      "chunk_hash": "936bb93239dc0460",
      "content_digest": "936bb93239dc0460",
      "chunk_length": 2805,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "field",
          "name",
          "index",
          "qdrant",
          "text",
          "import",
          "collection",
          "new",
          "params",
          "models",
          "tokenizertype",
          "word",
          "stopwords",
          "english",
          "qdrantclient",
          "grpc",
          "collections",
          "the",
          "stopwordsset"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 18,
            "weight": 0.073171
          },
          {
            "term": "field",
            "tf": 15,
            "weight": 0.060976
          },
          {
            "term": "name",
            "tf": 14,
            "weight": 0.056911
          },
          {
            "term": "index",
            "tf": 13,
            "weight": 0.052846
          },
          {
            "term": "qdrant",
            "tf": 13,
            "weight": 0.052846
          },
          {
            "term": "text",
            "tf": 9,
            "weight": 0.036585
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.036585
          },
          {
            "term": "collection",
            "tf": 6,
            "weight": 0.02439
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.02439
          },
          {
            "term": "params",
            "tf": 6,
            "weight": 0.02439
          },
          {
            "term": "models",
            "tf": 5,
            "weight": 0.020325
          },
          {
            "term": "tokenizertype",
            "tf": 5,
            "weight": 0.020325
          },
          {
            "term": "word",
            "tf": 5,
            "weight": 0.020325
          },
          {
            "term": "stopwords",
            "tf": 5,
            "weight": 0.020325
          },
          {
            "term": "english",
            "tf": 5,
            "weight": 0.020325
          },
          {
            "term": "qdrantclient",
            "tf": 5,
            "weight": 0.020325
          },
          {
            "term": "grpc",
            "tf": 5,
            "weight": 0.020325
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.020325
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.01626
          },
          {
            "term": "stopwordsset",
            "tf": 4,
            "weight": 0.01626
          }
        ],
        "unique_terms": 63,
        "total_terms": 246
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Explicit",
        "client",
        "collection",
        "field",
        "import",
        "index",
        "name",
        "new",
        "params",
        "qdrant",
        "text"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.8732919254658384,
      "overall": 0.7577639751552795
    }
  },
  {
    "text": "### Phrase Search\n\nPhrase search in Qdrant allows you to find documents or points where a specific sequence of words appears together, in the same order, within a text payload field. This is useful when you want to match exact phrases rather than individual words scattered throughout the text.\n\nWhen using a full-text index with phrase search enabled, you can perform phrase search by enclosing the desired phrase in double quotes in your filter query. For example, searching for `\"machine learning\"` will only return results where the words “machine” and “learning” appear together as a phrase, not just anywhere in the text.\n\nFor efficient phrase search, Qdrant requires building an additional data structure, so it needs to be configured during the creation of the full-text index:\n\n```http\nPUT /collections/{collection_name}/index\n{\n    \"field_name\": \"name_of_the_field_to_index\",\n    \"field_schema\": {\n        \"type\": \"text\",\n        \"tokenizer\": \"word\",\n        \"lowercase\": true,\n        \"phrase_matching\": true\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_payload_index(\n    collection_name=\"{collection_name}\",\n    field_name=\"name_of_the_field_to_index\",\n    field_schema=models.TextIndexParams(\n        type=\"text\",\n        tokenizer=models.TokenizerType.WORD,\n        lowercase=True,\n        phrase_matching=True,\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"name_of_the_field_to_index\",\n  field_schema: {\n    type: \"text\",\n    tokenizer: \"word\",\n    lowercase: true,\n    phrase_matching: true,\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateFieldIndexCollectionBuilder,\n    TextIndexParamsBuilder,\n    FieldType,\n    TokenizerType,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet text_index_params = TextIndexParamsBuilder::new(TokenizerType::Word)\n    .phrase_matching(true)\n    .lowercase(true);\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n            \"{collection_name}\",\n            \"name_of_the_field_to_index\",\n            FieldType::Text,\n        ).field_index_params(text_index_params.build()),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.PayloadIndexParams;\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\nimport io.qdrant.client.grpc.Collections.TextIndexParams;\nimport io.qdrant.client.grpc.Collections.TokenizerType;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createPayloadIndexAsync(\n        \"{collection_name}\",\n        \"name_of_the_field_to_index\",\n        PayloadSchemaType.Text,\n        PayloadIndexParams.newBuilder()\n            .setTextIndexParams(\n                TextIndexParams.newBuilder()\n                    .setTokenizer(TokenizerType.Word)\n                    .setLowercase(true)\n                    .setPhraseMatching(true)\n                    .build())\n            .build(),\n        null,\n        null,\n        null)\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0028",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Phrase Search"
      ],
      "heading_text": "Phrase Search",
      "token_count": 763,
      "char_count": 3401,
      "start_char": 49813,
      "end_char": 53214,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.9128676470588235,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.609362",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Phrase Search",
      "chunk_hash": "b208034b5e5492e0",
      "content_digest": "b208034b5e5492e0",
      "chunk_length": 3401,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "field",
          "name",
          "index",
          "the",
          "text",
          "phrase",
          "true",
          "import",
          "qdrantclient",
          "collection",
          "search",
          "collections",
          "word",
          "tokenizertype",
          "build",
          "grpc",
          "lowercase",
          "matching"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 20,
            "weight": 0.05848
          },
          {
            "term": "qdrant",
            "tf": 17,
            "weight": 0.049708
          },
          {
            "term": "field",
            "tf": 14,
            "weight": 0.040936
          },
          {
            "term": "name",
            "tf": 14,
            "weight": 0.040936
          },
          {
            "term": "index",
            "tf": 13,
            "weight": 0.038012
          },
          {
            "term": "the",
            "tf": 12,
            "weight": 0.035088
          },
          {
            "term": "text",
            "tf": 12,
            "weight": 0.035088
          },
          {
            "term": "phrase",
            "tf": 11,
            "weight": 0.032164
          },
          {
            "term": "true",
            "tf": 10,
            "weight": 0.02924
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.023392
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.020468
          },
          {
            "term": "collection",
            "tf": 6,
            "weight": 0.017544
          },
          {
            "term": "search",
            "tf": 5,
            "weight": 0.01462
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.01462
          },
          {
            "term": "word",
            "tf": 5,
            "weight": 0.01462
          },
          {
            "term": "tokenizertype",
            "tf": 5,
            "weight": 0.01462
          },
          {
            "term": "build",
            "tf": 5,
            "weight": 0.01462
          },
          {
            "term": "grpc",
            "tf": 5,
            "weight": 0.01462
          },
          {
            "term": "lowercase",
            "tf": 4,
            "weight": 0.011696
          },
          {
            "term": "matching",
            "tf": 4,
            "weight": 0.011696
          }
        ],
        "unique_terms": 127,
        "total_terms": 342
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Phrase Search",
        "client",
        "field",
        "import",
        "index",
        "name",
        "phrase",
        "qdrant",
        "text",
        "the",
        "true"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.9128676470588235,
      "overall": 0.7709558823529411
    }
  },
  {
    "text": "## Vector Index\n\nA vector index is a data structure built on vectors through a specific mathematical model. Through the vector index, we can efficiently query several vectors similar to the target vector.\n\nQdrant currently only uses HNSW as a dense vector index.\n\n[HNSW](https://arxiv.org/abs/1603.09320) (Hierarchical Navigable Small World Graph) is a graph-based indexing algorithm. It builds a multi-layer navigation structure for an image according to certain rules. In this structure, the upper layers are more sparse and the distances between nodes are farther. The lower layers are denser and the distances between nodes are closer. The search starts from the uppermost layer, finds the node closest to the target in this layer, and then enters the next layer to begin another search. After multiple iterations, it can quickly approach the target position.\n\nIn order to improve performance, HNSW limits the maximum degree of nodes on each layer of the graph to `m`. In addition, you can use `ef_construct` (when building an index) or `ef` (when searching targets) to specify a search range.\n\nThe corresponding parameters could be configured in the configuration file:\n\n```yaml\nstorage:\n  # Default parameters of HNSW Index. Could be overridden for each collection or named vector individually\n  hnsw_index:\n    # Number of edges per node in the index graph.\n    # Larger the value - more accurate the search, more space required.\n    m: 16\n    # Number of neighbours to consider during the index building.\n    # Larger the value - more accurate the search, more time required to build index.\n    ef_construct: 100\n    # Minimal size threshold (in KiloBytes) below which full-scan is preferred over HNSW search.\n    # This measures the total size of vectors being queried against.\n    # When the maximum estimated amount of points that a condition satisfies is smaller than\n    # `full_scan_threshold_kb`, the query planner will use full-scan search instead of HNSW index\n    # traversal for better performance.\n    # Note: 1Kb = 1 vector of size 256\n    full_scan_threshold: 10000\n```\n\nAnd so in the process of creating a [collection](https://qdrant.tech/documentation/concepts/collections/). The `ef` parameter is configured during [the search](https://qdrant.tech/documentation/concepts/search/) and by default is equal to `ef_construct`.\n\nHNSW is chosen for several reasons. First, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search. Second, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).\n\n*Available as of v1.1.1*",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0030",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Vector Index"
      ],
      "heading_text": "Vector Index",
      "token_count": 591,
      "char_count": 2655,
      "start_char": 54467,
      "end_char": 57122,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6674418604651162,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.611072",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Vector Index",
      "chunk_hash": "ae4306dba3bbfb05",
      "content_digest": "ae4306dba3bbfb05",
      "chunk_length": 2655,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "index",
          "search",
          "hnsw",
          "vector",
          "and",
          "layer",
          "more",
          "qdrant",
          "https",
          "graph",
          "for",
          "are",
          "full",
          "scan",
          "structure",
          "vectors",
          "can",
          "target",
          "this"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 30,
            "weight": 0.090634
          },
          {
            "term": "index",
            "tf": 11,
            "weight": 0.033233
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.030211
          },
          {
            "term": "hnsw",
            "tf": 9,
            "weight": 0.02719
          },
          {
            "term": "vector",
            "tf": 7,
            "weight": 0.021148
          },
          {
            "term": "and",
            "tf": 6,
            "weight": 0.018127
          },
          {
            "term": "layer",
            "tf": 5,
            "weight": 0.015106
          },
          {
            "term": "more",
            "tf": 5,
            "weight": 0.015106
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.012085
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.012085
          },
          {
            "term": "graph",
            "tf": 4,
            "weight": 0.012085
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.012085
          },
          {
            "term": "are",
            "tf": 4,
            "weight": 0.012085
          },
          {
            "term": "full",
            "tf": 4,
            "weight": 0.012085
          },
          {
            "term": "scan",
            "tf": 4,
            "weight": 0.012085
          },
          {
            "term": "structure",
            "tf": 3,
            "weight": 0.009063
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.009063
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.009063
          },
          {
            "term": "target",
            "tf": 3,
            "weight": 0.009063
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.009063
          }
        ],
        "unique_terms": 183,
        "total_terms": 331
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Vector Index",
        "and",
        "hnsw",
        "https",
        "index",
        "layer",
        "more",
        "qdrant",
        "search",
        "the",
        "vector"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6674418604651162,
      "overall": 0.7224806201550388
    }
  },
  {
    "text": "## Sparse Vector Index\n\n*Available as of v1.7.0*\n\nSparse vectors in Qdrant are indexed with a special data structure, which is optimized for vectors that have a high proportion of zeroes. In some ways, this indexing method is similar to the inverted index, which is used in text search engines.\n\n- A sparse vector index in Qdrant is exact, meaning it does not use any approximation algorithms.\n- All sparse vectors added to the collection are immediately indexed in the mutable version of a sparse index.\n\nWith Qdrant, you can benefit from a more compact and efficient immutable sparse index, which is constructed during the same optimization process as the dense vector index.\n\nThis approach is particularly useful for collections storing both dense and sparse vectors.\n\nTo configure a sparse vector index, create a collection with the following parameters:\n\n```http\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": {\n            \"index\": {\n                \"on_disk\": false\n            }\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            index=models.SparseIndexParams(on_disk=False),\n        )\n    },\n)\n```\n\n```typescript\nimport { QdrantClient, Schemas } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  sparse_vectors: {\n    \"splade-model-name\": {\n      index: {\n        on_disk: false\n      }\n    }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, SparseIndexConfigBuilder, SparseVectorParamsBuilder,\n    SparseVectorsConfigBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vectors_config = SparseVectorsConfigBuilder::default();\n\nsparse_vectors_config.add_named_vector_params(\n    \"splade-model-name\",\n    SparseVectorParamsBuilder::default()\n        .index(SparseIndexConfigBuilder::default().on_disk(true)),\n);\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .sparse_vectors_config(sparse_vectors_config),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections;\n\nQdrantClient client = new QdrantClient(\n    QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.createCollectionAsync(\n    Collections.CreateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setSparseVectorsConfig(\n            Collections.SparseVectorConfig.newBuilder().putMap(\n                \"splade-model-name\",\n                Collections.SparseVectorParams.newBuilder()\n                    .setIndex(\n                        Collections.SparseIndexConfig\n                            .newBuilder()\n                            .setOnDisk(false)\n                            .build()\n                    ).build()\n            ).build()\n        ).build()\n).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tsparseVectorsConfig: (\"splade-model-name\", new SparseVectorParams{\n        Index = new SparseIndexConfig {\n            OnDisk = false,\n        }\n    })\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0032",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Sparse Vector Index"
      ],
      "heading_text": "Sparse Vector Index",
      "token_count": 822,
      "char_count": 3725,
      "start_char": 57334,
      "end_char": 61059,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6858490566037736,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.611741",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "Sparse Vector Index",
      "chunk_hash": "6dbf68c704754eff",
      "content_digest": "6dbf68c704754eff",
      "chunk_length": 3725,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "sparse",
          "index",
          "vectors",
          "collection",
          "name",
          "qdrantclient",
          "collections",
          "config",
          "the",
          "false",
          "import",
          "localhost",
          "new",
          "build",
          "vector",
          "newbuilder",
          "from",
          "disk"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 21,
            "weight": 0.061404
          },
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.055556
          },
          {
            "term": "sparse",
            "tf": 15,
            "weight": 0.04386
          },
          {
            "term": "index",
            "tf": 12,
            "weight": 0.035088
          },
          {
            "term": "vectors",
            "tf": 12,
            "weight": 0.035088
          },
          {
            "term": "collection",
            "tf": 11,
            "weight": 0.032164
          },
          {
            "term": "name",
            "tf": 11,
            "weight": 0.032164
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.023392
          },
          {
            "term": "collections",
            "tf": 7,
            "weight": 0.020468
          },
          {
            "term": "config",
            "tf": 7,
            "weight": 0.020468
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.017544
          },
          {
            "term": "false",
            "tf": 6,
            "weight": 0.017544
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.017544
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.017544
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.017544
          },
          {
            "term": "build",
            "tf": 6,
            "weight": 0.017544
          },
          {
            "term": "vector",
            "tf": 5,
            "weight": 0.01462
          },
          {
            "term": "newbuilder",
            "tf": 5,
            "weight": 0.01462
          },
          {
            "term": "from",
            "tf": 4,
            "weight": 0.011696
          },
          {
            "term": "disk",
            "tf": 4,
            "weight": 0.011696
          }
        ],
        "unique_terms": 136,
        "total_terms": 342
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": true,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Sparse Vector Index",
        "client",
        "collection",
        "collections",
        "config",
        "index",
        "name",
        "qdrant",
        "qdrantclient",
        "sparse",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6858490566037736,
      "overall": 0.7286163522012578
    }
  },
  {
    "text": "### IDF Modifier\n\n*Available as of v1.10.0*\n\nFor many search algorithms, it is important to consider how often an item occurs in a collection. Intuitively speaking, the less frequently an item appears in a collection, the more important it is in a search.\n\nThis is also known as the Inverse Document Frequency (IDF). It is used in text search engines to rank search results based on the rarity of a word in a collection.\n\nIDF depends on the currently stored documents and therefore can’t be pre-computed in the sparse vectors in streaming inference mode. In order to support IDF in the sparse vector index, Qdrant provides an option to modify the sparse vector query with the IDF statistics automatically.\n\nThe only requirement is to enable the IDF modifier in the collection configuration:\n\n```http\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": {\n            \"modifier\": \"idf\"\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            modifier=models.Modifier.IDF,\n        ),\n    },\n)\n```\n\n```typescript\nimport { QdrantClient, Schemas } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  sparse_vectors: {\n    \"text\": {\n      modifier: \"idf\"\n    }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Modifier, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\n};\nuse qdrant_client::{Qdrant, QdrantError};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vectors_config = SparseVectorsConfigBuilder::default();\nsparse_vectors_config.add_named_vector_params(\n    \"text\",\n    SparseVectorParamsBuilder::default().modifier(Modifier::Idf),\n);\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .sparse_vectors_config(sparse_vectors_config),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Modifier;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .createCollectionAsync(\n    CreateCollection.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setSparseVectorsConfig(\n      SparseVectorConfig.newBuilder()\n      .putMap(\"text\", SparseVectorParams.newBuilder().setModifier(Modifier.Idf).build()))\n    .build())\n  .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  sparseVectorsConfig: (\"text\", new SparseVectorParams {\n    Modifier = Modifier.Idf,\n  })\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})",
    "metadata": {
      "chunk_id": "fd741aa60c5d-0034",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "filename": "_documentation_concepts_indexing_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "IDF Modifier"
      ],
      "heading_text": "IDF Modifier",
      "token_count": 782,
      "char_count": 3313,
      "start_char": 61964,
      "end_char": 65277,
      "semantic_score": 0.7,
      "structural_score": 0.7999999999999998,
      "retrieval_quality": 0.6896321070234114,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:38.611741",
      "document_id": "fd741aa60c5d",
      "document_name": "_documentation_concepts_indexing_",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "source_filename": "_documentation_concepts_indexing_.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing",
      "relative_path": "Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_indexing\\_documentation_concepts_indexing_.md",
      "hierarchy_path": "IDF Modifier",
      "chunk_hash": "8fb3f387e7c317c4",
      "content_digest": "8fb3f387e7c317c4",
      "chunk_length": 3313,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "modifier",
          "collection",
          "idf",
          "the",
          "sparse",
          "vectors",
          "import",
          "qdrantclient",
          "text",
          "name",
          "config",
          "localhost",
          "collections",
          "new",
          "grpc",
          "search",
          "sparsevectorparams",
          "6334"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 24,
            "weight": 0.074074
          },
          {
            "term": "qdrant",
            "tf": 20,
            "weight": 0.061728
          },
          {
            "term": "modifier",
            "tf": 13,
            "weight": 0.040123
          },
          {
            "term": "collection",
            "tf": 13,
            "weight": 0.040123
          },
          {
            "term": "idf",
            "tf": 12,
            "weight": 0.037037
          },
          {
            "term": "the",
            "tf": 12,
            "weight": 0.037037
          },
          {
            "term": "sparse",
            "tf": 10,
            "weight": 0.030864
          },
          {
            "term": "vectors",
            "tf": 9,
            "weight": 0.027778
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.027778
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.024691
          },
          {
            "term": "text",
            "tf": 7,
            "weight": 0.021605
          },
          {
            "term": "name",
            "tf": 7,
            "weight": 0.021605
          },
          {
            "term": "config",
            "tf": 7,
            "weight": 0.021605
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.018519
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.015432
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.015432
          },
          {
            "term": "grpc",
            "tf": 5,
            "weight": 0.015432
          },
          {
            "term": "search",
            "tf": 4,
            "weight": 0.012346
          },
          {
            "term": "sparsevectorparams",
            "tf": 4,
            "weight": 0.012346
          },
          {
            "term": "6334",
            "tf": 4,
            "weight": 0.012346
          }
        ],
        "unique_terms": 126,
        "total_terms": 324
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "IDF Modifier",
        "client",
        "collection",
        "idf",
        "import",
        "modifier",
        "qdrant",
        "qdrantclient",
        "sparse",
        "the",
        "vectors"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7999999999999998,
      "retrieval_quality": 0.6896321070234114,
      "overall": 0.7298773690078036
    }
  }
]