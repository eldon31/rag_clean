[
  {
    "text": "# Advanced RAG Systems  Relevant source files  - [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb) - [graphrag\\_neo4j/readme.md](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md) - [multivector-representation/multivector\\_representation\\_qdrant.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb) - [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb)  This page provides an overview of sophisticated Retrieval-Augmented Generation (RAG) systems implemented in the Qdrant examples repository. While basic RAG systems enhance Large Language Models (LLMs) with relevant context retrieved from a vector database, advanced RAG systems incorporate additional techniques such as multivector search, graph relationships, and specialized document processing to improve retrieval quality and response accuracy. The scope of this document covers:  - Multivector RAG with DSPy framework for medical applications - Graph-enhanced RAG using Neo4j for relationship-aware retrieval - PDF retrieval at scale using visual document understanding models  For information about basic vector operations, see [Getting Started with Qdrant](qdrant/examples/2-getting-started-with-qdrant.md). For specific text applications that use simpler RAG, see [Text Data Applications](qdrant/examples/3-text-data-applications.md). Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb8-23](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L8-L23) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb20-29](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L20-L29) [graphrag\\_neo4j/readme.md3-12](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L3-L12) [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb8-27](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb#L8-L27)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0000",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Advanced RAG Systems"
      ],
      "heading_text": "Advanced RAG Systems",
      "token_count": 642,
      "char_count": 2261,
      "start_char": 2071,
      "end_char": 4332,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9210526315789473,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.368280",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 642,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Advanced RAG Systems",
      "chunk_hash": "505a463df1a06263",
      "content_digest": "505a463df1a06263",
      "chunk_length": 2261,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "examples",
          "multivector",
          "dspy",
          "medical",
          "ipynb",
          "bot",
          "https",
          "github",
          "com",
          "blob",
          "b3c4b28f",
          "representation",
          "retrieval",
          "rag",
          "neo4j",
          "pdf",
          "scale",
          "systems",
          "graphrag"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 21,
            "weight": 0.074733
          },
          {
            "term": "examples",
            "tf": 11,
            "weight": 0.039146
          },
          {
            "term": "multivector",
            "tf": 10,
            "weight": 0.035587
          },
          {
            "term": "dspy",
            "tf": 9,
            "weight": 0.032028
          },
          {
            "term": "medical",
            "tf": 9,
            "weight": 0.032028
          },
          {
            "term": "ipynb",
            "tf": 9,
            "weight": 0.032028
          },
          {
            "term": "bot",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "https",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "github",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "com",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "blob",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "b3c4b28f",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "representation",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "retrieval",
            "tf": 8,
            "weight": 0.02847
          },
          {
            "term": "rag",
            "tf": 7,
            "weight": 0.024911
          },
          {
            "term": "neo4j",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "pdf",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "scale",
            "tf": 5,
            "weight": 0.017794
          },
          {
            "term": "systems",
            "tf": 4,
            "weight": 0.014235
          },
          {
            "term": "graphrag",
            "tf": 4,
            "weight": 0.014235
          }
        ],
        "unique_terms": 98,
        "total_terms": 281
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Advanced RAG Systems",
        "bot",
        "com",
        "dspy",
        "examples",
        "github",
        "https",
        "ipynb",
        "medical",
        "multivector",
        "qdrant"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9210526315789473,
      "overall": 0.8403508771929825
    }
  },
  {
    "text": "## Architecture Overview of Advanced RAG Systems  Advanced RAG systems extend the basic RAG architecture by incorporating sophisticated retrieval techniques that go beyond simple vector similarity search. These enhancements address common limitations in traditional RAG systems, such as the inability to capture complex relationships between entities, fine-grained token-level matching, or visual document understanding. **Advanced RAG System Architecture** ``` ``` The key distinguishing factors of advanced RAG systems include multivector search capabilities, graph-enhanced context, and framework-based orchestration for complex reasoning tasks. Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb207-225](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L207-L225) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb552-571](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L552-L571) [graphrag\\_neo4j/readme.md7-11](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L7-L11)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0001",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Architecture Overview of Advanced RAG Systems"
      ],
      "heading_text": "Architecture Overview of Advanced RAG Systems",
      "token_count": 278,
      "char_count": 1142,
      "start_char": 4336,
      "end_char": 5478,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7364285714285713,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.370929",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 278,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Architecture Overview of Advanced RAG Systems",
      "chunk_hash": "26712f9d6fe203f8",
      "content_digest": "26712f9d6fe203f8",
      "chunk_length": 1142,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "multivector",
          "advanced",
          "systems",
          "representation",
          "dspy",
          "medical",
          "bot",
          "architecture",
          "the",
          "https",
          "github",
          "com",
          "examples",
          "blob",
          "b3c4b28f",
          "search",
          "complex",
          "ipynb"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.051095
          },
          {
            "term": "rag",
            "tf": 6,
            "weight": 0.043796
          },
          {
            "term": "multivector",
            "tf": 5,
            "weight": 0.036496
          },
          {
            "term": "advanced",
            "tf": 4,
            "weight": 0.029197
          },
          {
            "term": "systems",
            "tf": 4,
            "weight": 0.029197
          },
          {
            "term": "representation",
            "tf": 4,
            "weight": 0.029197
          },
          {
            "term": "dspy",
            "tf": 4,
            "weight": 0.029197
          },
          {
            "term": "medical",
            "tf": 4,
            "weight": 0.029197
          },
          {
            "term": "bot",
            "tf": 4,
            "weight": 0.029197
          },
          {
            "term": "architecture",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "examples",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "blob",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "b3c4b28f",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "complex",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "ipynb",
            "tf": 2,
            "weight": 0.014599
          }
        ],
        "unique_terms": 82,
        "total_terms": 137
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Architecture Overview of Advanced RAG Systems",
        "advanced",
        "architecture",
        "bot",
        "dspy",
        "medical",
        "multivector",
        "qdrant",
        "rag",
        "representation",
        "systems"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7364285714285713,
      "overall": 0.7788095238095237
    }
  },
  {
    "text": "### Comparison of Basic vs Advanced RAG  | Feature                          | Basic RAG                             | Advanced RAG                                                                      | | -------------------------------- | ------------------------------------- | --------------------------------------------------------------------------------- | | Context Source                   | Direct document retrieval             | Enhanced with graph relationships, multivector reranking, or visual understanding | | Retrieval Method                 | Single embedding similarity search    | Hybrid approaches: prefetch + rerank, graph + vector, visual + textual            | | Vector Representations           | Single dense vector per document      | Multiple vectors: dense + ColBERT, visual + textual                               | | Response Quality                 | Good for simple factual questions     | Better for complex, relationship-based, or multimodal queries                     | | Implementation Complexity        | Lower                                 | Higher                                                                            | | Handling of Token-level Matching | Limited to document-level similarity  | Fine-grained token interactions via ColBERT                                       | | Understanding of Relationships   | Limited to what's in single documents | Can traverse complex entity relationships via graph databases                     | | Framework Integration            | Basic LLM calls                       | Sophisticated frameworks like DSPy with guardrails and reasoning                  |  Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb337-354](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L337-L354) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb785-794](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L785-L794) [graphrag\\_neo4j/readme.md5-12](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L5-L12)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0002",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Comparison of Basic vs Advanced RAG"
      ],
      "heading_text": "Comparison of Basic vs Advanced RAG",
      "token_count": 394,
      "char_count": 2145,
      "start_char": 5484,
      "end_char": 7629,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6916939759036144,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.372069",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 394,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Comparison of Basic vs Advanced RAG",
      "chunk_hash": "71000aea28940170",
      "content_digest": "71000aea28940170",
      "chunk_length": 2145,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "multivector",
          "dspy",
          "representation",
          "medical",
          "bot",
          "basic",
          "rag",
          "document",
          "graph",
          "relationships",
          "visual",
          "single",
          "vector",
          "https",
          "github",
          "com",
          "examples",
          "blob",
          "b3c4b28f"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "multivector",
            "tf": 5,
            "weight": 0.02907
          },
          {
            "term": "dspy",
            "tf": 5,
            "weight": 0.02907
          },
          {
            "term": "representation",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "medical",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "bot",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "basic",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "rag",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "document",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "graph",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "relationships",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "visual",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "single",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "vector",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "examples",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "blob",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "b3c4b28f",
            "tf": 3,
            "weight": 0.017442
          }
        ],
        "unique_terms": 103,
        "total_terms": 172
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Comparison of Basic vs Advanced RAG",
        "basic",
        "bot",
        "document",
        "dspy",
        "graph",
        "medical",
        "multivector",
        "qdrant",
        "rag",
        "representation"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6916939759036144,
      "overall": 0.7972313253012047
    }
  },
  {
    "text": "## Multivector RAG with DSPy  Multivector RAG combines dense embeddings for efficient retrieval with ColBERT multivectors for fine-grained reranking. This approach addresses limitations of single-vector systems by enabling token-level interactions while maintaining search efficiency. **Multivector RAG Architecture** ``` ```",
    "metadata": {
      "chunk_id": "67c4a0579e21-0003",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Multivector RAG with DSPy"
      ],
      "heading_text": "Multivector RAG with DSPy",
      "token_count": 62,
      "char_count": 325,
      "start_char": 7631,
      "end_char": 7956,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5438461538461539,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.373209",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 62,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Multivector RAG with DSPy",
      "chunk_hash": "f4b037bf789273fb",
      "content_digest": "f4b037bf789273fb",
      "chunk_length": 325,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "multivector",
          "rag",
          "with",
          "for",
          "dspy",
          "combines",
          "dense",
          "embeddings",
          "efficient",
          "retrieval",
          "colbert",
          "multivectors",
          "fine",
          "grained",
          "reranking",
          "this",
          "approach",
          "addresses",
          "limitations",
          "single"
        ],
        "term_weights": [
          {
            "term": "multivector",
            "tf": 3,
            "weight": 0.081081
          },
          {
            "term": "rag",
            "tf": 3,
            "weight": 0.081081
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "dspy",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "combines",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "dense",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "embeddings",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "efficient",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "retrieval",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "colbert",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "multivectors",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "fine",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "grained",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "reranking",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "approach",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "addresses",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "limitations",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "single",
            "tf": 1,
            "weight": 0.027027
          }
        ],
        "unique_terms": 31,
        "total_terms": 37
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Multivector RAG with DSPy",
        "combines",
        "dense",
        "dspy",
        "efficient",
        "embeddings",
        "for",
        "multivector",
        "rag",
        "retrieval",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5438461538461539,
      "overall": 0.7146153846153845
    }
  },
  {
    "text": "### Implementation Details  The multivector system uses Qdrant's native support for multiple vector types per document: ``` ``` The retrieval process combines both vector types in a single query: ``` ``` Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb207-225](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L207-L225) [multivector-representation/multivector\\_representation\\_qdrant.ipynb292-302](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L292-L302) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb222-252](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L222-L252) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb376-383](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L376-L383)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0005",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Implementation Details"
      ],
      "heading_text": "Implementation Details",
      "token_count": 291,
      "char_count": 954,
      "start_char": 8697,
      "end_char": 9651,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.74,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.375008",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 291,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Implementation Details",
      "chunk_hash": "d936793ce8c9c391",
      "content_digest": "d936793ce8c9c391",
      "chunk_length": 954,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "multivector",
          "representation",
          "dspy",
          "medical",
          "bot",
          "https",
          "github",
          "com",
          "examples",
          "blob",
          "b3c4b28f",
          "ipynb",
          "the",
          "vector",
          "types",
          "implementation",
          "details",
          "system",
          "uses"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 13,
            "weight": 0.107438
          },
          {
            "term": "multivector",
            "tf": 9,
            "weight": 0.07438
          },
          {
            "term": "representation",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "dspy",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "medical",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "bot",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "github",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "examples",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "blob",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "b3c4b28f",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "ipynb",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "implementation",
            "tf": 1,
            "weight": 0.008264
          },
          {
            "term": "details",
            "tf": 1,
            "weight": 0.008264
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.008264
          },
          {
            "term": "uses",
            "tf": 1,
            "weight": 0.008264
          }
        ],
        "unique_terms": 49,
        "total_terms": 121
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Implementation Details",
        "bot",
        "com",
        "dspy",
        "examples",
        "github",
        "https",
        "medical",
        "multivector",
        "qdrant",
        "representation"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.74,
      "overall": 0.7799999999999999
    }
  },
  {
    "text": "### Implementation Details  The implementation follows these steps:  1. **Environment Initialization**: Loads API keys and database credentials from environment variables  2. **Graph Extraction**:     - Uses OpenAI to convert unstructured text into a structured graph    - The output includes entities (nodes) and their relationships (edges)  3. **Data Ingestion**:     - Neo4j: Inserts extracted nodes labeled as `Entity` and their relationships    - Qdrant: Computes embeddings for text segments and uploads them to a collection  4. **Retrieval & Graph Querying**:     - Performs vector search in Qdrant to find relevant text    - Queries Neo4j to fetch related graph context    - Combines both results to enrich the prompt  5. **Response Generation**:     - Uses the enriched context to generate detailed answers via OpenAI's GPT  Sources: [graphrag\\_neo4j/readme.md5-130](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L5-L130)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0008",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Implementation Details"
      ],
      "heading_text": "Implementation Details",
      "token_count": 227,
      "char_count": 958,
      "start_char": 10892,
      "end_char": 11850,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7194117647058823,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.377194",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 227,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Implementation Details",
      "chunk_hash": "0631e848d7431fbd",
      "content_digest": "0631e848d7431fbd",
      "chunk_length": 958,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "and",
          "graph",
          "neo4j",
          "text",
          "qdrant",
          "implementation",
          "environment",
          "uses",
          "openai",
          "nodes",
          "their",
          "relationships",
          "context",
          "graphrag",
          "readme",
          "details",
          "follows",
          "these",
          "steps"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 4,
            "weight": 0.036697
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.036697
          },
          {
            "term": "graph",
            "tf": 4,
            "weight": 0.036697
          },
          {
            "term": "neo4j",
            "tf": 4,
            "weight": 0.036697
          },
          {
            "term": "text",
            "tf": 3,
            "weight": 0.027523
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.027523
          },
          {
            "term": "implementation",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "environment",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "uses",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "openai",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "nodes",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "their",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "relationships",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "context",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "graphrag",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "readme",
            "tf": 2,
            "weight": 0.018349
          },
          {
            "term": "details",
            "tf": 1,
            "weight": 0.009174
          },
          {
            "term": "follows",
            "tf": 1,
            "weight": 0.009174
          },
          {
            "term": "these",
            "tf": 1,
            "weight": 0.009174
          },
          {
            "term": "steps",
            "tf": 1,
            "weight": 0.009174
          }
        ],
        "unique_terms": 83,
        "total_terms": 109
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Implementation Details",
        "and",
        "environment",
        "graph",
        "implementation",
        "neo4j",
        "openai",
        "qdrant",
        "text",
        "the",
        "uses"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7194117647058823,
      "overall": 0.7731372549019607
    }
  },
  {
    "text": "## PDF Retrieval at Scale  PDF retrieval at scale addresses the challenge of efficiently searching large collections of visual documents using Vision Language Models (VLLMs) like ColPali and ColQwen2. These models work directly with PDF pages as images, avoiding complex OCR and text extraction pipelines. **PDF Retrieval at Scale Architecture** ``` ```",
    "metadata": {
      "chunk_id": "67c4a0579e21-0009",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "PDF Retrieval at Scale"
      ],
      "heading_text": "PDF Retrieval at Scale",
      "token_count": 69,
      "char_count": 353,
      "start_char": 11852,
      "end_char": 12205,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5207692307692308,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.378288",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 69,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "PDF Retrieval at Scale",
      "chunk_hash": "6b107da599433050",
      "content_digest": "6b107da599433050",
      "chunk_length": 353,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pdf",
          "retrieval",
          "scale",
          "models",
          "and",
          "addresses",
          "the",
          "challenge",
          "efficiently",
          "searching",
          "large",
          "collections",
          "visual",
          "documents",
          "using",
          "vision",
          "language",
          "vllms",
          "like",
          "colpali"
        ],
        "term_weights": [
          {
            "term": "pdf",
            "tf": 4,
            "weight": 0.093023
          },
          {
            "term": "retrieval",
            "tf": 3,
            "weight": 0.069767
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.069767
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.046512
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.046512
          },
          {
            "term": "addresses",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "challenge",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "efficiently",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "searching",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "large",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "collections",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "visual",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "documents",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "vision",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "language",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "vllms",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "like",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "colpali",
            "tf": 1,
            "weight": 0.023256
          }
        ],
        "unique_terms": 34,
        "total_terms": 43
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "PDF Retrieval at Scale",
        "addresses",
        "and",
        "challenge",
        "efficiently",
        "models",
        "pdf",
        "retrieval",
        "scale",
        "searching",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5207692307692308,
      "overall": 0.7069230769230769
    }
  },
  {
    "text": "### Key Components  1. **Vision Language Models**:     - **ColPali**: Generates \\~1,024 vectors per PDF page    - **ColQwen2**: Generates \\~700 vectors per page (dynamically adjusted)  2. **Scaling Challenge**:     - Building HNSW index with full vectors requires \\~49 million comparisons per page    - For 20,000 pages, this becomes computationally prohibitive  3. **Optimization Strategy**:     - Apply mean pooling to reduce vectors (e.g., 1,024 patches → 32 vectors)    - Use compressed vectors for first-stage retrieval    - Keep full vectors for precise reranking  4. **Two-Stage Process**:     - **Stage 1**: Fast retrieval using mean-pooled vectors    - **Stage 2**: Rerank top candidates using original full-resolution vectors",
    "metadata": {
      "chunk_id": "67c4a0579e21-0010",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Key Components"
      ],
      "heading_text": "Key Components",
      "token_count": 181,
      "char_count": 735,
      "start_char": 12209,
      "end_char": 12944,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5112121212121212,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.378808",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 181,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Key Components",
      "chunk_hash": "a3d1339a635276b1",
      "content_digest": "a3d1339a635276b1",
      "chunk_length": 735,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "vectors",
          "stage",
          "per",
          "page",
          "full",
          "for",
          "generates",
          "024",
          "mean",
          "retrieval",
          "using",
          "key",
          "components",
          "vision",
          "language",
          "models",
          "colpali",
          "pdf",
          "colqwen2",
          "700"
        ],
        "term_weights": [
          {
            "term": "vectors",
            "tf": 9,
            "weight": 0.109756
          },
          {
            "term": "stage",
            "tf": 4,
            "weight": 0.04878
          },
          {
            "term": "per",
            "tf": 3,
            "weight": 0.036585
          },
          {
            "term": "page",
            "tf": 3,
            "weight": 0.036585
          },
          {
            "term": "full",
            "tf": 3,
            "weight": 0.036585
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.036585
          },
          {
            "term": "generates",
            "tf": 2,
            "weight": 0.02439
          },
          {
            "term": "024",
            "tf": 2,
            "weight": 0.02439
          },
          {
            "term": "mean",
            "tf": 2,
            "weight": 0.02439
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.02439
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.02439
          },
          {
            "term": "key",
            "tf": 1,
            "weight": 0.012195
          },
          {
            "term": "components",
            "tf": 1,
            "weight": 0.012195
          },
          {
            "term": "vision",
            "tf": 1,
            "weight": 0.012195
          },
          {
            "term": "language",
            "tf": 1,
            "weight": 0.012195
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.012195
          },
          {
            "term": "colpali",
            "tf": 1,
            "weight": 0.012195
          },
          {
            "term": "pdf",
            "tf": 1,
            "weight": 0.012195
          },
          {
            "term": "colqwen2",
            "tf": 1,
            "weight": 0.012195
          },
          {
            "term": "700",
            "tf": 1,
            "weight": 0.012195
          }
        ],
        "unique_terms": 58,
        "total_terms": 82
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "024",
        "Key Components",
        "for",
        "full",
        "generates",
        "mean",
        "page",
        "per",
        "retrieval",
        "stage",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5112121212121212,
      "overall": 0.737070707070707
    }
  },
  {
    "text": "### Implementation Approach\n\nThe system processes PDF pages as visual documents:\n\n1. **PDF Page Processing**: Convert each page to an image representation\n2. **Multivector Generation**: Use ColPali/ColQwen2 to generate patch-based embeddings\n3. **Mean Pooling**: Group patches by spatial location and average embeddings\n4. **Dual Storage**: Store both compressed (indexed) and full (non-indexed) vectors\n5. **Query Processing**: First retrieve with compressed vectors, then rerank with full vectors\n\nSources: [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb36-67](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb#L36-L67) [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb40-53](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb#L40-L53)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0012",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Implementation Approach"
      ],
      "heading_text": "Implementation Approach",
      "token_count": 243,
      "char_count": 862,
      "start_char": 13448,
      "end_char": 14310,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.7508695652173912,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.379947",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 243,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Implementation Approach",
      "chunk_hash": "98da9787304c75e4",
      "content_digest": "98da9787304c75e4",
      "chunk_length": 862,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pdf",
          "colpali",
          "colqwen2",
          "retrieval",
          "scale",
          "tutorial",
          "vectors",
          "page",
          "processing",
          "embeddings",
          "and",
          "compressed",
          "indexed",
          "full",
          "with",
          "https",
          "github",
          "com",
          "qdrant",
          "examples"
        ],
        "term_weights": [
          {
            "term": "pdf",
            "tf": 6,
            "weight": 0.057143
          },
          {
            "term": "colpali",
            "tf": 5,
            "weight": 0.047619
          },
          {
            "term": "colqwen2",
            "tf": 5,
            "weight": 0.047619
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.038095
          },
          {
            "term": "scale",
            "tf": 4,
            "weight": 0.038095
          },
          {
            "term": "tutorial",
            "tf": 4,
            "weight": 0.038095
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.028571
          },
          {
            "term": "page",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "processing",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "embeddings",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "compressed",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "indexed",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "full",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.019048
          },
          {
            "term": "examples",
            "tf": 2,
            "weight": 0.019048
          }
        ],
        "unique_terms": 65,
        "total_terms": 105
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Implementation Approach",
        "colpali",
        "colqwen2",
        "embeddings",
        "page",
        "pdf",
        "processing",
        "retrieval",
        "scale",
        "tutorial",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.7508695652173912,
      "overall": 0.7169565217391304
    }
  },
  {
    "text": "### Decision Guide  Choose **Multivector RAG** when:  - You need precise token-level matching beyond document similarity - Your domain requires fine-grained retrieval (medical, legal, technical) - You want to combine fast retrieval with accurate reranking  Choose **Graph-Enhanced RAG** when:  - Your domain involves complex relationships between entities - Queries require understanding connections across multiple documents - You need structured knowledge representation alongside vector search  Choose **PDF Retrieval at Scale** when:  - You have large collections of visual documents (PDFs, forms, reports) - OCR quality is poor or documents contain complex layouts - You need to search both text and visual elements in documents  These approaches can be combined for maximum effectiveness in complex domains requiring multiple types of understanding. Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb346-354](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L346-L354) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb785-794](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L785-L794) [graphrag\\_neo4j/readme.md96-130](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L96-L130) [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb55-67](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb#L55-L67)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0014",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Decision Guide"
      ],
      "heading_text": "Decision Guide",
      "token_count": 396,
      "char_count": 1530,
      "start_char": 16506,
      "end_char": 18036,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.536541935483871,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.382097",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 396,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Decision Guide",
      "chunk_hash": "d0ee2df237494182",
      "content_digest": "d0ee2df237494182",
      "chunk_length": 1530,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "multivector",
          "you",
          "retrieval",
          "medical",
          "representation",
          "documents",
          "https",
          "github",
          "com",
          "examples",
          "blob",
          "b3c4b28f",
          "dspy",
          "bot",
          "choose",
          "when",
          "need",
          "complex",
          "pdf"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.041885
          },
          {
            "term": "multivector",
            "tf": 5,
            "weight": 0.026178
          },
          {
            "term": "you",
            "tf": 5,
            "weight": 0.026178
          },
          {
            "term": "retrieval",
            "tf": 5,
            "weight": 0.026178
          },
          {
            "term": "medical",
            "tf": 5,
            "weight": 0.026178
          },
          {
            "term": "representation",
            "tf": 5,
            "weight": 0.026178
          },
          {
            "term": "documents",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "github",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "examples",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "blob",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "b3c4b28f",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "dspy",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "bot",
            "tf": 4,
            "weight": 0.020942
          },
          {
            "term": "choose",
            "tf": 3,
            "weight": 0.015707
          },
          {
            "term": "when",
            "tf": 3,
            "weight": 0.015707
          },
          {
            "term": "need",
            "tf": 3,
            "weight": 0.015707
          },
          {
            "term": "complex",
            "tf": 3,
            "weight": 0.015707
          },
          {
            "term": "pdf",
            "tf": 3,
            "weight": 0.015707
          }
        ],
        "unique_terms": 110,
        "total_terms": 191
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Decision Guide",
        "com",
        "documents",
        "github",
        "https",
        "medical",
        "multivector",
        "qdrant",
        "representation",
        "retrieval",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.536541935483871,
      "overall": 0.7121806451612903
    }
  },
  {
    "text": "### Code Integration Patterns  Key implementation patterns from the examples: ``` ``` Sources: [multivector-representation/multivector\\_representation\\_qdrant.ipynb207-225](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L207-L225) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb552-571](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L552-L571) [graphrag\\_neo4j/readme.md15-21](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L15-L21) [pdf-retrieval-at-scale/ColPali\\_ColQwen2\\_Tutorial.ipynb55-67](https://github.com/qdrant/examples/blob/b3c4b28f/pdf-retrieval-at-scale/ColPali_ColQwen2_Tutorial.ipynb#L55-L67)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0016",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Code Integration Patterns"
      ],
      "heading_text": "Code Integration Patterns",
      "token_count": 253,
      "char_count": 758,
      "start_char": 19862,
      "end_char": 20620,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7547058823529412,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.384480",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 253,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Code Integration Patterns",
      "chunk_hash": "d31a5603a556749b",
      "content_digest": "d31a5603a556749b",
      "chunk_length": 758,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "examples",
          "multivector",
          "representation",
          "https",
          "github",
          "com",
          "blob",
          "b3c4b28f",
          "dspy",
          "medical",
          "bot",
          "ipynb",
          "patterns",
          "graphrag",
          "neo4j",
          "readme",
          "pdf",
          "retrieval",
          "scale"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.082474
          },
          {
            "term": "examples",
            "tf": 5,
            "weight": 0.051546
          },
          {
            "term": "multivector",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "representation",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "github",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "blob",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "b3c4b28f",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "dspy",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "medical",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "bot",
            "tf": 4,
            "weight": 0.041237
          },
          {
            "term": "ipynb",
            "tf": 3,
            "weight": 0.030928
          },
          {
            "term": "patterns",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "graphrag",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "neo4j",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "readme",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "pdf",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.020619
          },
          {
            "term": "scale",
            "tf": 2,
            "weight": 0.020619
          }
        ],
        "unique_terms": 44,
        "total_terms": 97
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Code Integration Patterns",
        "b3c4b28f",
        "blob",
        "com",
        "dspy",
        "examples",
        "github",
        "https",
        "multivector",
        "qdrant",
        "representation"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7547058823529412,
      "overall": 0.7515686274509804
    }
  },
  {
    "text": "## Conclusion\n\nAdvanced RAG systems represent a significant evolution beyond basic retrieval-augmented generation. By incorporating time awareness or graph relationships, these systems can provide more contextually rich and accurate responses, especially for complex or time-sensitive queries.\n\nThe Qdrant examples repository demonstrates two powerful approaches:\n\n1. **Recency-Aware RAG** with LlamaIndex for time-sensitive applications\n2. **Graph-Enhanced RAG** with Neo4j for relationship-rich domains\n\nThese implementations showcase how vector databases like Qdrant can be extended and integrated with other systems to create more sophisticated knowledge retrieval architectures.\n\nSources: [graphrag\\_neo4j/readme.md3-12](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L3-L12)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh",
    "metadata": {
      "chunk_id": "67c4a0579e21-0017",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Conclusion"
      ],
      "heading_text": "Conclusion",
      "token_count": 179,
      "char_count": 859,
      "start_char": 20624,
      "end_char": 21483,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.7383870967741936,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.385286",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 179,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "Conclusion",
      "chunk_hash": "d8234c97651d2996",
      "content_digest": "d8234c97651d2996",
      "chunk_length": 859,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "rag",
          "systems",
          "time",
          "for",
          "qdrant",
          "with",
          "neo4j",
          "retrieval",
          "graph",
          "these",
          "can",
          "more",
          "rich",
          "and",
          "sensitive",
          "examples",
          "graphrag",
          "readme",
          "refresh",
          "conclusion"
        ],
        "term_weights": [
          {
            "term": "rag",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "systems",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "time",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "neo4j",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "graph",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "these",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "more",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "rich",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "sensitive",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "examples",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "graphrag",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "readme",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "refresh",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "conclusion",
            "tf": 1,
            "weight": 0.009709
          }
        ],
        "unique_terms": 77,
        "total_terms": 103
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Conclusion",
        "for",
        "graph",
        "neo4j",
        "qdrant",
        "rag",
        "retrieval",
        "systems",
        "these",
        "time",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.7383870967741936,
      "overall": 0.7127956989247312
    }
  },
  {
    "text": "### On this page  - [Advanced RAG Systems](#advanced-rag-systems.md) - [Architecture Overview of Advanced RAG Systems](#architecture-overview-of-advanced-rag-systems.md) - [Comparison of Basic vs Advanced RAG](#comparison-of-basic-vs-advanced-rag.md) - [Multivector RAG with DSPy](#multivector-rag-with-dspy.md) - [Key Components](#key-components.md) - [Implementation Details](#implementation-details.md) - [Graph-Enhanced RAG with Neo4j](#graph-enhanced-rag-with-neo4j.md) - [Key Components](#key-components-1.md) - [Implementation Details](#implementation-details-1.md) - [PDF Retrieval at Scale](#pdf-retrieval-at-scale.md) - [Key Components](#key-components-2.md) - [Mathematical Foundation](#mathematical-foundation.md) - [Implementation Approach](#implementation-approach.md) - [When to Use Each Advanced RAG Approach](#when-to-use-each-advanced-rag-approach.md) - [Decision Guide](#decision-guide.md) - [Implementation Considerations](#implementation-considerations.md) - [Code Integration Patterns](#code-integration-patterns.md) - [Conclusion](#conclusion.md)",
    "metadata": {
      "chunk_id": "67c4a0579e21-0018",
      "source_file": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "On this page"
      ],
      "heading_text": "On this page",
      "token_count": 284,
      "char_count": 1069,
      "start_char": 21485,
      "end_char": 22554,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6746153846153846,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:39.386632",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 284,
      "document_id": "67c4a0579e21",
      "document_name": "_qdrant_examples_6-advanced-rag-systems",
      "source_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "source_filename": "_qdrant_examples_6-advanced-rag-systems.md",
      "source_directory": "Docs\\Qdrant\\qdrant_examples",
      "relative_path": "Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6-advanced-rag-systems.md",
      "hierarchy_path": "On this page",
      "chunk_hash": "a4023674a6751489",
      "content_digest": "a4023674a6751489",
      "chunk_length": 1069,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "rag",
          "advanced",
          "implementation",
          "key",
          "components",
          "systems",
          "with",
          "details",
          "approach",
          "architecture",
          "overview",
          "comparison",
          "basic",
          "multivector",
          "dspy",
          "graph",
          "enhanced",
          "neo4j",
          "pdf",
          "retrieval"
        ],
        "term_weights": [
          {
            "term": "rag",
            "tf": 12,
            "weight": 0.113208
          },
          {
            "term": "advanced",
            "tf": 8,
            "weight": 0.075472
          },
          {
            "term": "implementation",
            "tf": 8,
            "weight": 0.075472
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.056604
          },
          {
            "term": "components",
            "tf": 6,
            "weight": 0.056604
          },
          {
            "term": "systems",
            "tf": 4,
            "weight": 0.037736
          },
          {
            "term": "with",
            "tf": 4,
            "weight": 0.037736
          },
          {
            "term": "details",
            "tf": 4,
            "weight": 0.037736
          },
          {
            "term": "approach",
            "tf": 4,
            "weight": 0.037736
          },
          {
            "term": "architecture",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "overview",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "comparison",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "basic",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "dspy",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "graph",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "enhanced",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "neo4j",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "pdf",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.018868
          }
        ],
        "unique_terms": 35,
        "total_terms": 106
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "On this page",
        "advanced",
        "approach",
        "architecture",
        "components",
        "details",
        "implementation",
        "key",
        "rag",
        "systems",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6746153846153846,
      "overall": 0.7248717948717949
    }
  }
]