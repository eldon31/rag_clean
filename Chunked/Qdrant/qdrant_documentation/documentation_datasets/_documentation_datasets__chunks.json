[
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "9ac01601aee7-0000",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 668,
      "end_char": 1341,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.481595",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "9ac01601aee7-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 1343,
      "end_char": 7004,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.509914",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "9ac01601aee7-0002",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 7006,
      "end_char": 9353,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.519508",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 576,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.8358974358974359
    }
  },
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "9ac01601aee7-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 9355,
      "end_char": 10028,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.522512",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "9ac01601aee7-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 10030,
      "end_char": 15691,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.552663",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - Practice Datasets",
    "metadata": {
      "chunk_id": "9ac01601aee7-0005",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 594,
      "char_count": 2424,
      "start_char": 15693,
      "end_char": 18117,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9048780487804879,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.562471",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 594,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "9b6f1994d54ee2d8",
      "content_digest": "9b6f1994d54ee2d8",
      "chunk_length": 2424,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "datasets"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 31,
            "weight": 0.108014
          },
          {
            "term": "documentation",
            "tf": 23,
            "weight": 0.080139
          },
          {
            "term": "https",
            "tf": 22,
            "weight": 0.076655
          },
          {
            "term": "tech",
            "tf": 22,
            "weight": 0.076655
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.04878
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.034843
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.031359
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.031359
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.02439
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.020906
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017422
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017422
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013937
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.013937
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.013937
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010453
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010453
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010453
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010453
          },
          {
            "term": "datasets",
            "tf": 3,
            "weight": 0.010453
          }
        ],
        "unique_terms": 96,
        "total_terms": 287
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9048780487804879,
      "overall": 0.8349593495934959
    }
  },
  {
    "text": "## Available datasets  Our snapshots are usually generated from publicly available datasets, which are often used for non-commercial or academic purposes. The following datasets are currently available. Please click on a dataset name to see its detailed description. | Dataset                                       | Model                                                                       | Vector size | Documents | Size   | Qdrant snapshot                                                                                          | HF Hub                                                                                 | | --------------------------------------------- | --------------------------------------------------------------------------- | ----------- | --------- | ------ | -------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- | | [Arxiv.org titles](#arxivorg-titles.md)       | [InstructorXL](https://huggingface.co/hkunlp/instructor-xl)                 | 768         | 2.3M      | 7.1 GB | [Download](https://snapshots.qdrant.io/arxiv_titles-3083016565637815127-2023-05-29-13-56-22.snapshot)    | [Open](https://huggingface.co/datasets/Qdrant/arxiv-titles-instructorxl-embeddings)    | | [Arxiv.org abstracts](#arxivorg-abstracts.md) | [InstructorXL](https://huggingface.co/hkunlp/instructor-xl)                 | 768         | 2.3M      | 8.4 GB | [Download](https://snapshots.qdrant.io/arxiv_abstracts-3083016565637815127-2023-06-02-07-26-29.snapshot) | [Open](https://huggingface.co/datasets/Qdrant/arxiv-abstracts-instructorxl-embeddings) | | [Wolt food](#wolt-food.md)                    | [clip-ViT-B-32](https://huggingface.co/sentence-transformers/clip-ViT-B-32) | 512         | 1.7M      | 7.9 GB | [Download](https://snapshots.qdrant.io/wolt-clip-ViT-B-32-2446808438011867-2023-12-14-15-55-26.snapshot) | [Open](https://huggingface.co/datasets/Qdrant/wolt-food-clip-ViT-B-32-embeddings)      |  Once you download a snapshot, you need to [restore it](https://qdrant.tech/documentation/concepts/snapshots/#restore-snapshot) using the Qdrant CLI upon startup or through the API.",
    "metadata": {
      "chunk_id": "9ac01601aee7-0007",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Available datasets"
      ],
      "heading_text": "Available datasets",
      "token_count": 507,
      "char_count": 2243,
      "start_char": 18440,
      "end_char": 20683,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6774647887323944,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.565301",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 507,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Available datasets",
      "chunk_hash": "7425db1037426c61",
      "content_digest": "7425db1037426c61",
      "chunk_length": 2243,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "datasets",
          "snapshot",
          "arxiv",
          "huggingface",
          "snapshots",
          "titles",
          "instructorxl",
          "download",
          "abstracts",
          "wolt",
          "clip",
          "vit",
          "available",
          "are",
          "the",
          "2023",
          "open",
          "embeddings"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 10,
            "weight": 0.063291
          },
          {
            "term": "qdrant",
            "tf": 9,
            "weight": 0.056962
          },
          {
            "term": "datasets",
            "tf": 6,
            "weight": 0.037975
          },
          {
            "term": "snapshot",
            "tf": 6,
            "weight": 0.037975
          },
          {
            "term": "arxiv",
            "tf": 6,
            "weight": 0.037975
          },
          {
            "term": "huggingface",
            "tf": 6,
            "weight": 0.037975
          },
          {
            "term": "snapshots",
            "tf": 5,
            "weight": 0.031646
          },
          {
            "term": "titles",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "instructorxl",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "download",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "abstracts",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "wolt",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "clip",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "vit",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "available",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "are",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "2023",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "open",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "embeddings",
            "tf": 3,
            "weight": 0.018987
          }
        ],
        "unique_terms": 72,
        "total_terms": 158
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Available datasets",
        "arxiv",
        "datasets",
        "download",
        "https",
        "huggingface",
        "instructorxl",
        "qdrant",
        "snapshot",
        "snapshots",
        "titles"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6774647887323944,
      "overall": 0.7591549295774648
    }
  },
  {
    "text": "## Qdrant on Hugging Face\n\n[](https://huggingface.co/Qdrant)\n\n[Hugging Face](https://huggingface.co/) provides a platform for sharing and using ML models and datasets. [Qdrant](https://huggingface.co/Qdrant) is one of the organizations there! We aim to provide you with datasets containing neural embeddings that you can use to practice with Qdrant and build your applications based on semantic search. **Please let us know if you’d like to see a specific dataset!**\n\nIf you are not familiar with [Hugging Face datasets](https://huggingface.co/docs/datasets/index), or would like to know how to combine it with Qdrant, please refer to the [tutorial](https://qdrant.tech/documentation/tutorials/huggingface-datasets/).",
    "metadata": {
      "chunk_id": "9ac01601aee7-0008",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Qdrant on Hugging Face"
      ],
      "heading_text": "Qdrant on Hugging Face",
      "token_count": 170,
      "char_count": 717,
      "start_char": 20686,
      "end_char": 21403,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7192134831460674,
      "chunking_strategy": "hierarchical_context_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.566679",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 170,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Qdrant on Hugging Face",
      "chunk_hash": "2f729e005f9a9eaf",
      "content_digest": "2f729e005f9a9eaf",
      "chunk_length": 717,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "huggingface",
          "datasets",
          "you",
          "with",
          "hugging",
          "face",
          "and",
          "the",
          "please",
          "know",
          "like",
          "provides",
          "platform",
          "for",
          "sharing",
          "using",
          "models",
          "one"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.079545
          },
          {
            "term": "https",
            "tf": 5,
            "weight": 0.056818
          },
          {
            "term": "huggingface",
            "tf": 5,
            "weight": 0.056818
          },
          {
            "term": "datasets",
            "tf": 5,
            "weight": 0.056818
          },
          {
            "term": "you",
            "tf": 4,
            "weight": 0.045455
          },
          {
            "term": "with",
            "tf": 4,
            "weight": 0.045455
          },
          {
            "term": "hugging",
            "tf": 3,
            "weight": 0.034091
          },
          {
            "term": "face",
            "tf": 3,
            "weight": 0.034091
          },
          {
            "term": "and",
            "tf": 3,
            "weight": 0.034091
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "please",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "know",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "like",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "platform",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "sharing",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "one",
            "tf": 1,
            "weight": 0.011364
          }
        ],
        "unique_terms": 54,
        "total_terms": 88
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Qdrant on Hugging Face",
        "and",
        "datasets",
        "face",
        "https",
        "hugging",
        "huggingface",
        "qdrant",
        "the",
        "with",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7192134831460674,
      "overall": 0.773071161048689
    }
  },
  {
    "text": "### Arxiv.org titles  This dataset contains embeddings generated from the paper titles only. Each vector has a payload with the title used to create it, along with the DOI (Digital Object Identifier). ```json {     \"title\": \"Nash Social Welfare for Indivisible Items under Separable, Piecewise-Linear Concave Utilities\",     \"DOI\": \"1612.05191\" } ``` The embeddings generated with InstructorXL model have been generated using the following instruction:  > Represent the Research Paper title for retrieval; Input:  The following code snippet shows how to generate embeddings using the InstructorXL model: ```python from InstructorEmbedding import INSTRUCTOR  model = INSTRUCTOR(\"hkunlp/instructor-xl\") sentence = \"3D ActionSLAM: wearable person tracking in multi-floor environments\" instruction = \"Represent the Research Paper title for retrieval; Input:\" embeddings = model.encode([[instruction, sentence]]) ``` The snapshot of the dataset might be downloaded [here](https://snapshots.qdrant.io/arxiv_titles-3083016565637815127-2023-05-29-13-56-22.snapshot).",
    "metadata": {
      "chunk_id": "9ac01601aee7-0010",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Arxiv.org titles"
      ],
      "heading_text": "Arxiv.org titles",
      "token_count": 231,
      "char_count": 1058,
      "start_char": 22215,
      "end_char": 23273,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7025984251968503,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.569863",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 231,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Arxiv.org titles",
      "chunk_hash": "77d05e0a4e13f2fd",
      "content_digest": "77d05e0a4e13f2fd",
      "chunk_length": 1058,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "embeddings",
          "title",
          "model",
          "titles",
          "generated",
          "paper",
          "with",
          "for",
          "instruction",
          "instructor",
          "arxiv",
          "dataset",
          "from",
          "doi",
          "instructorxl",
          "using",
          "following",
          "represent",
          "research"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 11,
            "weight": 0.088
          },
          {
            "term": "embeddings",
            "tf": 4,
            "weight": 0.032
          },
          {
            "term": "title",
            "tf": 4,
            "weight": 0.032
          },
          {
            "term": "model",
            "tf": 4,
            "weight": 0.032
          },
          {
            "term": "titles",
            "tf": 3,
            "weight": 0.024
          },
          {
            "term": "generated",
            "tf": 3,
            "weight": 0.024
          },
          {
            "term": "paper",
            "tf": 3,
            "weight": 0.024
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.024
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.024
          },
          {
            "term": "instruction",
            "tf": 3,
            "weight": 0.024
          },
          {
            "term": "instructor",
            "tf": 3,
            "weight": 0.024
          },
          {
            "term": "arxiv",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "dataset",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "from",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "doi",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "instructorxl",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "following",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "represent",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "research",
            "tf": 2,
            "weight": 0.016
          }
        ],
        "unique_terms": 79,
        "total_terms": 125
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Arxiv.org titles",
        "embeddings",
        "for",
        "generated",
        "instruction",
        "model",
        "paper",
        "the",
        "title",
        "titles",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7025984251968503,
      "overall": 0.8008661417322833
    }
  },
  {
    "text": "#### Importing the dataset  The easiest way to use the provided dataset is to recover it via the API by passing the URL as a location. It works also in [Qdrant Cloud](https://cloud.qdrant.io/). The following code snippet shows how to create a new collection and fill it with the snapshot data: ```http PUT /collections/{collection_name}/snapshots/recover {   \"location\": \"https://snapshots.qdrant.io/arxiv_titles-3083016565637815127-2023-05-29-13-56-22.snapshot\" } ```",
    "metadata": {
      "chunk_id": "9ac01601aee7-0011",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Importing the dataset"
      ],
      "heading_text": "Importing the dataset",
      "token_count": 122,
      "char_count": 468,
      "start_char": 23279,
      "end_char": 23747,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5279310344827586,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.571746",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 122,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Importing the dataset",
      "chunk_hash": "fe3f10c83bd74337",
      "content_digest": "fe3f10c83bd74337",
      "chunk_length": 468,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "qdrant",
          "dataset",
          "recover",
          "location",
          "cloud",
          "https",
          "collection",
          "snapshot",
          "snapshots",
          "importing",
          "easiest",
          "way",
          "use",
          "provided",
          "via",
          "api",
          "passing",
          "url",
          "works"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 7,
            "weight": 0.125
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.053571
          },
          {
            "term": "dataset",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "recover",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "location",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "cloud",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "collection",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "snapshot",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "importing",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "easiest",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "way",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "provided",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "via",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "api",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "passing",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "url",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "works",
            "tf": 1,
            "weight": 0.017857
          }
        ],
        "unique_terms": 40,
        "total_terms": 56
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Importing the dataset",
        "cloud",
        "collection",
        "dataset",
        "https",
        "location",
        "qdrant",
        "recover",
        "snapshot",
        "snapshots",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5279310344827586,
      "overall": 0.709310344827586
    }
  },
  {
    "text": "### Arxiv.org abstracts  This dataset contains embeddings generated from the paper abstracts. Each vector has a payload with the abstract used to create it, along with the DOI (Digital Object Identifier). ```json {     \"abstract\": \"Recently Cole and Gkatzelis gave the first constant factor approximation\\nalgorithm for the problem of allocating indivisible items to agents, under\\nadditive valuations, so as to maximize the Nash Social Welfare. We give\\nconstant factor algorithms for a substantial generalization of their problem --\\nto the case of separable, piecewise-linear concave utility functions. We give\\ntwo such algorithms, the first using market equilibria and the second using the\\ntheory of stable polynomials.\\n  In AGT, there is a paucity of methods for the design of mechanisms for the\\nallocation of indivisible goods and the result of Cole and Gkatzelis seemed to\\nbe taking a major step towards filling this gap. Our result can be seen as\\nanother step in this direction.\\n\",     \"DOI\": \"1612.05191\" } ``` The embeddings generated with InstructorXL model have been generated using the following instruction:  > Represent the Research Paper abstract for retrieval; Input:  The following code snippet shows how to generate embeddings using the InstructorXL model: ```python from InstructorEmbedding import INSTRUCTOR  model = INSTRUCTOR(\"hkunlp/instructor-xl\") sentence = \"The dominant sequence transduction models are based on complex recurrent or convolutional neural networks in an encoder-decoder configuration. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train.\" instruction = \"Represent the Research Paper abstract for retrieval; Input:\" embeddings = model.encode([[instruction, sentence]]) ``` The snapshot of the dataset might be downloaded [here](https://snapshots.qdrant.io/arxiv_abstracts-3083016565637815127-2023-06-02-07-26-29.snapshot).",
    "metadata": {
      "chunk_id": "9ac01601aee7-0012",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Arxiv.org abstracts"
      ],
      "heading_text": "Arxiv.org abstracts",
      "token_count": 458,
      "char_count": 2238,
      "start_char": 23750,
      "end_char": 25988,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7367220338983052,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.575138",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 458,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Arxiv.org abstracts",
      "chunk_hash": "0d65f38b66f90ea5",
      "content_digest": "0d65f38b66f90ea5",
      "chunk_length": 2238,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "and",
          "for",
          "embeddings",
          "with",
          "abstract",
          "using",
          "model",
          "abstracts",
          "this",
          "generated",
          "paper",
          "instruction",
          "instructor",
          "models",
          "arxiv",
          "dataset",
          "from",
          "doi",
          "cole"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 25,
            "weight": 0.093633
          },
          {
            "term": "and",
            "tf": 7,
            "weight": 0.026217
          },
          {
            "term": "for",
            "tf": 6,
            "weight": 0.022472
          },
          {
            "term": "embeddings",
            "tf": 4,
            "weight": 0.014981
          },
          {
            "term": "with",
            "tf": 4,
            "weight": 0.014981
          },
          {
            "term": "abstract",
            "tf": 4,
            "weight": 0.014981
          },
          {
            "term": "using",
            "tf": 4,
            "weight": 0.014981
          },
          {
            "term": "model",
            "tf": 4,
            "weight": 0.014981
          },
          {
            "term": "abstracts",
            "tf": 3,
            "weight": 0.011236
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.011236
          },
          {
            "term": "generated",
            "tf": 3,
            "weight": 0.011236
          },
          {
            "term": "paper",
            "tf": 3,
            "weight": 0.011236
          },
          {
            "term": "instruction",
            "tf": 3,
            "weight": 0.011236
          },
          {
            "term": "instructor",
            "tf": 3,
            "weight": 0.011236
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.011236
          },
          {
            "term": "arxiv",
            "tf": 2,
            "weight": 0.007491
          },
          {
            "term": "dataset",
            "tf": 2,
            "weight": 0.007491
          },
          {
            "term": "from",
            "tf": 2,
            "weight": 0.007491
          },
          {
            "term": "doi",
            "tf": 2,
            "weight": 0.007491
          },
          {
            "term": "cole",
            "tf": 2,
            "weight": 0.007491
          }
        ],
        "unique_terms": 176,
        "total_terms": 267
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Arxiv.org abstracts",
        "abstract",
        "abstracts",
        "and",
        "embeddings",
        "for",
        "model",
        "the",
        "this",
        "using",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7367220338983052,
      "overall": 0.8122406779661017
    }
  },
  {
    "text": "#### Importing the dataset  The easiest way to use the provided dataset is to recover it via the API by passing the URL as a location. It works also in [Qdrant Cloud](https://cloud.qdrant.io/). The following code snippet shows how to create a new collection and fill it with the snapshot data: ```http PUT /collections/{collection_name}/snapshots/recover {   \"location\": \"https://snapshots.qdrant.io/arxiv_abstracts-3083016565637815127-2023-06-02-07-26-29.snapshot\" } ```",
    "metadata": {
      "chunk_id": "9ac01601aee7-0013",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Importing the dataset"
      ],
      "heading_text": "Importing the dataset",
      "token_count": 123,
      "char_count": 471,
      "start_char": 25994,
      "end_char": 26465,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5279310344827586,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.577289",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 123,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Importing the dataset",
      "chunk_hash": "d0c1ba981ce5b2eb",
      "content_digest": "d0c1ba981ce5b2eb",
      "chunk_length": 471,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "qdrant",
          "dataset",
          "recover",
          "location",
          "cloud",
          "https",
          "collection",
          "snapshot",
          "snapshots",
          "importing",
          "easiest",
          "way",
          "use",
          "provided",
          "via",
          "api",
          "passing",
          "url",
          "works"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 7,
            "weight": 0.125
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.053571
          },
          {
            "term": "dataset",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "recover",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "location",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "cloud",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "collection",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "snapshot",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "importing",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "easiest",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "way",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "provided",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "via",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "api",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "passing",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "url",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "works",
            "tf": 1,
            "weight": 0.017857
          }
        ],
        "unique_terms": 40,
        "total_terms": 56
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Importing the dataset",
        "cloud",
        "collection",
        "dataset",
        "https",
        "location",
        "qdrant",
        "recover",
        "snapshot",
        "snapshots",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5279310344827586,
      "overall": 0.709310344827586
    }
  },
  {
    "text": "## Wolt food  Our [Food Discovery demo](https://food-discovery.qdrant.tech/) relies on the dataset of food images from the Wolt app. Each point in the collection represents a dish with a single image. The image is represented as a vector of 512 float numbers. There is also a JSON payload attached to each point, which looks similar to this: ```json {     \"cafe\": {         \"address\": \"VGX7+6R2 Vecchia Napoli, Valletta\",         \"categories\": [\"italian\", \"pasta\", \"pizza\", \"burgers\", \"mediterranean\"],         \"location\": {\"lat\": 35.8980154, \"lon\": 14.5145106},         \"menu_id\": \"610936a4ee8ea7a56f4a372a\",         \"name\": \"Vecchia Napoli Is-Suq Tal-Belt\",         \"rating\": 9,         \"slug\": \"vecchia-napoli-skyparks-suq-tal-belt\"     },     \"description\": \"Tomato sauce, mozzarella fior di latte, crispy guanciale, Pecorino Romano cheese and a hint of chilli\",     \"image\": \"https://wolt-menu-images-cdn.wolt.com/menu-images/610936a4ee8ea7a56f4a372a/005dfeb2-e734-11ec-b667-ced7a78a5abd_l_amatriciana_pizza_joel_gueller1.jpeg\",     \"name\": \"L'Amatriciana\" } ``` The embeddings generated with clip-ViT-B-32 model have been generated using the following code snippet: ```python from PIL import Image from sentence_transformers import SentenceTransformer  image_path = \"5dbfd216-5cce-11eb-8122-de94874ad1c8_ns_takeaway_seelachs_ei_baguette.jpeg\"  model = SentenceTransformer(\"clip-ViT-B-32\") embedding = model.encode(Image.open(image_path)) ``` The snapshot of the dataset might be downloaded [here](https://snapshots.qdrant.io/wolt-clip-ViT-B-32-2446808438011867-2023-12-14-15-55-26.snapshot).",
    "metadata": {
      "chunk_id": "9ac01601aee7-0014",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Wolt food"
      ],
      "heading_text": "Wolt food",
      "token_count": 485,
      "char_count": 1597,
      "start_char": 26468,
      "end_char": 28065,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5827549019607843,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.582222",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Wolt food",
      "chunk_hash": "64aceda2a1771439",
      "content_digest": "64aceda2a1771439",
      "chunk_length": 1597,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "image",
          "wolt",
          "food",
          "https",
          "images",
          "from",
          "vecchia",
          "napoli",
          "menu",
          "clip",
          "vit",
          "model",
          "discovery",
          "qdrant",
          "dataset",
          "each",
          "point",
          "with",
          "json"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 8,
            "weight": 0.043956
          },
          {
            "term": "image",
            "tf": 7,
            "weight": 0.038462
          },
          {
            "term": "wolt",
            "tf": 5,
            "weight": 0.027473
          },
          {
            "term": "food",
            "tf": 4,
            "weight": 0.021978
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "images",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "from",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "vecchia",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "napoli",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "menu",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "clip",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "vit",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "model",
            "tf": 3,
            "weight": 0.016484
          },
          {
            "term": "discovery",
            "tf": 2,
            "weight": 0.010989
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.010989
          },
          {
            "term": "dataset",
            "tf": 2,
            "weight": 0.010989
          },
          {
            "term": "each",
            "tf": 2,
            "weight": 0.010989
          },
          {
            "term": "point",
            "tf": 2,
            "weight": 0.010989
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.010989
          },
          {
            "term": "json",
            "tf": 2,
            "weight": 0.010989
          }
        ],
        "unique_terms": 124,
        "total_terms": 182
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Wolt food",
        "food",
        "from",
        "https",
        "image",
        "images",
        "menu",
        "napoli",
        "the",
        "vecchia",
        "wolt"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5827549019607843,
      "overall": 0.7275849673202615
    }
  },
  {
    "text": "#### Importing the dataset  The easiest way to use the provided dataset is to recover it via the API by passing the URL as a location. It works also in [Qdrant Cloud](https://cloud.qdrant.io/). The following code snippet shows how to create a new collection and fill it with the snapshot data: ```http PUT /collections/{collection_name}/snapshots/recover {   \"location\": \"https://snapshots.qdrant.io/wolt-clip-ViT-B-32-2446808438011867-2023-12-14-15-55-26.snapshot\" } ```",
    "metadata": {
      "chunk_id": "9ac01601aee7-0015",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "filename": "_documentation_datasets_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Importing the dataset"
      ],
      "heading_text": "Importing the dataset",
      "token_count": 127,
      "char_count": 471,
      "start_char": 28071,
      "end_char": 28542,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5279310344827586,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:19.584381",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 127,
      "document_id": "9ac01601aee7",
      "document_name": "_documentation_datasets_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "source_filename": "_documentation_datasets_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_datasets\\_documentation_datasets_.md",
      "hierarchy_path": "Importing the dataset",
      "chunk_hash": "c45b3e843713da80",
      "content_digest": "c45b3e843713da80",
      "chunk_length": 471,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "qdrant",
          "dataset",
          "recover",
          "location",
          "cloud",
          "https",
          "collection",
          "snapshot",
          "snapshots",
          "importing",
          "easiest",
          "way",
          "use",
          "provided",
          "via",
          "api",
          "passing",
          "url",
          "works"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 7,
            "weight": 0.122807
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.052632
          },
          {
            "term": "dataset",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "recover",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "location",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "cloud",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "collection",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "snapshot",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.035088
          },
          {
            "term": "importing",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "easiest",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "way",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "provided",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "via",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "api",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "passing",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "url",
            "tf": 1,
            "weight": 0.017544
          },
          {
            "term": "works",
            "tf": 1,
            "weight": 0.017544
          }
        ],
        "unique_terms": 41,
        "total_terms": 57
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Importing the dataset",
        "cloud",
        "collection",
        "dataset",
        "https",
        "location",
        "qdrant",
        "recover",
        "snapshot",
        "snapshots",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5279310344827586,
      "overall": 0.709310344827586
    }
  }
]