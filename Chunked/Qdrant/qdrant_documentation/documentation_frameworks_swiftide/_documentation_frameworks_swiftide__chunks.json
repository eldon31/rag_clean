[
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0000",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 659,
      "end_char": 1332,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.646500",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 1334,
      "end_char": 6995,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.671540",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0002",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 6997,
      "end_char": 9344,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.679666",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 576,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.8358974358974359
    }
  },
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 9346,
      "end_char": 10019,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.682924",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 10021,
      "end_char": 15682,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.707342",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - [Frameworks](https://qdrant.tech/documentation/frameworks/) - - Swiftide",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0005",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 608,
      "char_count": 2479,
      "start_char": 15684,
      "end_char": 18163,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9016,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.714231",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 608,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "9ea70918f121b6cf",
      "content_digest": "9ea70918f121b6cf",
      "chunk_length": 2479,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 32,
            "weight": 0.109589
          },
          {
            "term": "documentation",
            "tf": 24,
            "weight": 0.082192
          },
          {
            "term": "https",
            "tf": 23,
            "weight": 0.078767
          },
          {
            "term": "tech",
            "tf": 23,
            "weight": 0.078767
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.047945
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.034247
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.030822
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.030822
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.023973
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.020548
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017123
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017123
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013699
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.013699
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.013699
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010274
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010274
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010274
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010274
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.006849
          }
        ],
        "unique_terms": 98,
        "total_terms": 292
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9016,
      "overall": 0.8338666666666666
    }
  },
  {
    "text": "## Indexing Example (Step by Step)  This example indexes `.rs` files using Swiftide with Qdrant as vector storage. ```rust use swiftide::{     indexing,     indexing::LanguageModelWithBackOff,     indexing::loaders::FileLoader,     indexing::transformers::{ChunkCode, Embed, MetadataQACode},     integrations::{self, qdrant::Qdrant, redis::Redis}, };  #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> {     tracing_subscriber::fmt::init();      // 1. Set up OpenAI client for embedding and prompt models     let openai_client = integrations::openai::OpenAI::builder()         .default_embed_model(\"text-embedding-3-small\")         .default_prompt_model(\"gpt-3.5-turbo\")         .build()?;      // 3. Set up Redis for caching which files/chunks are already processed     let redis_url = std::env::var(\"REDIS_URL\")         .as_deref()         .unwrap_or(\"redis://localhost:6379\")         .to_owned();      indexing::Pipeline::from_loader(FileLoader::new(\".\").with_extensions(&[\"rs\"]))         // 4. Skip files/chunks already indexed (cached in Redis)         .filter_cached(Redis::try_from_url(redis_url, \"swiftide-examples\")?)         // 5. Generate metadata Q&A for code chunks, using LLM         .then(MetadataQACode::new(openai_client.clone()))         // 6. Split code into chunks suitable for embedding         .then_chunk(ChunkCode::try_for_language_and_chunk_size(\"rust\", 10..2048)?)         // 7. Embed code+metadata in batches         .then_in_batch(Embed::new(openai_client.clone()).with_batch_size(10))         // 8. Store results in a Qdrant collection         .then_store_with(             Qdrant::builder()                 .batch_size(50)                 .vector_size(1536)                 .collection_name(\"swiftide-examples\")                 .build()?,         )         // 9. Run the pipeline asynchronously         .run()         .await?;     Ok(()) } ```",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0009",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Indexing Example (Step by Step)"
      ],
      "heading_text": "Indexing Example (Step by Step)",
      "token_count": 477,
      "char_count": 1896,
      "start_char": 19064,
      "end_char": 20960,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7955137931034483,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.721215",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 477,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Indexing Example (Step by Step)",
      "chunk_hash": "e2fc97c308282dfc",
      "content_digest": "e2fc97c308282dfc",
      "chunk_length": 1896,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "redis",
          "indexing",
          "openai",
          "qdrant",
          "for",
          "swiftide",
          "with",
          "embed",
          "client",
          "chunks",
          "url",
          "then",
          "size",
          "files",
          "embedding",
          "new",
          "code",
          "batch",
          "example",
          "step"
        ],
        "term_weights": [
          {
            "term": "redis",
            "tf": 9,
            "weight": 0.046392
          },
          {
            "term": "indexing",
            "tf": 6,
            "weight": 0.030928
          },
          {
            "term": "openai",
            "tf": 6,
            "weight": 0.030928
          },
          {
            "term": "qdrant",
            "tf": 5,
            "weight": 0.025773
          },
          {
            "term": "for",
            "tf": 5,
            "weight": 0.025773
          },
          {
            "term": "swiftide",
            "tf": 4,
            "weight": 0.020619
          },
          {
            "term": "with",
            "tf": 4,
            "weight": 0.020619
          },
          {
            "term": "embed",
            "tf": 4,
            "weight": 0.020619
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.020619
          },
          {
            "term": "chunks",
            "tf": 4,
            "weight": 0.020619
          },
          {
            "term": "url",
            "tf": 4,
            "weight": 0.020619
          },
          {
            "term": "then",
            "tf": 4,
            "weight": 0.020619
          },
          {
            "term": "size",
            "tf": 4,
            "weight": 0.020619
          },
          {
            "term": "files",
            "tf": 3,
            "weight": 0.015464
          },
          {
            "term": "embedding",
            "tf": 3,
            "weight": 0.015464
          },
          {
            "term": "new",
            "tf": 3,
            "weight": 0.015464
          },
          {
            "term": "code",
            "tf": 3,
            "weight": 0.015464
          },
          {
            "term": "batch",
            "tf": 3,
            "weight": 0.015464
          },
          {
            "term": "example",
            "tf": 2,
            "weight": 0.010309
          },
          {
            "term": "step",
            "tf": 2,
            "weight": 0.010309
          }
        ],
        "unique_terms": 102,
        "total_terms": 194
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Indexing Example (Step by Step)",
        "chunks",
        "client",
        "embed",
        "for",
        "indexing",
        "openai",
        "qdrant",
        "redis",
        "swiftide",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7955137931034483,
      "overall": 0.7651712643678161
    }
  },
  {
    "text": "## Hybrid Search Example  Below is a streamlined workflow for hybrid dense/sparse search using Qdrant. ```rust use swiftide::{     indexing::{         self, EmbeddedField,         loaders::FileLoader,         transformers::{self, ChunkCode, MetadataQACode},     },     integrations::{fastembed::FastEmbed, openai, qdrant::Qdrant},     query::{self, answers, query_transformers, search_strategies::HybridSearch}, };  #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> {     tracing_subscriber::fmt::init();      // 1. Create fastembed (dense/sparse) clients     let batch_size = 64;     let fastembed_sparse = FastEmbed::try_default_sparse().unwrap().to_owned();     let fastembed = FastEmbed::try_default().unwrap().to_owned();      // 2. Use a compact OpenAI prompt model for metadata Q&A generation     let openai = openai::OpenAI::builder()         .default_prompt_model(\"gpt-4o-mini\")         .build()         .unwrap();      // 3. Set up Qdrant for both dense and sparse vectors     let qdrant = Qdrant::builder()         .batch_size(batch_size)         .vector_size(384)         .with_vector(EmbeddedField::Combined)         .with_sparse_vector(EmbeddedField::Combined)         .collection_name(\"swiftide-hybrid-example\")         .build()?;      indexing::Pipeline::from_loader(FileLoader::new(\"swiftide-core/\").with_extensions(&[\"rs\"]))         .then_chunk(ChunkCode::try_for_language_and_chunk_size(\"rust\", 10..2048)?)         .then(MetadataQACode::from_client(openai.clone()).build().unwrap())         .then_in_batch(transformers::SparseEmbed::new(fastembed_sparse.clone()).with_batch_size(batch_size))         .then_in_batch(transformers::Embed::new(fastembed.clone()).with_batch_size(batch_size))         .then_store_with(qdrant.clone())         .run()         .await?;      // 4. Run a hybrid search pipeline     let openai = openai::OpenAI::builder()         .default_prompt_model(\"gpt-4o\")         .build()         .unwrap();      let query_pipeline = query::Pipeline::from_search_strategy(         HybridSearch::default()             .with_top_n(20)             .with_top_k(20)             .to_owned(),     )     .then_transform_query(query_transformers::GenerateSubquestions::from_client(openai.clone()))     .then_transform_query(query_transformers::Embed::from_client(fastembed.clone()))     .then_transform_query(query_transformers::SparseEmbed::from_client(fastembed_sparse.clone()))     .then_retrieve(qdrant.clone())     .then_answer(answers::Simple::from_client(openai.clone()));      let answer = query_pipeline         .query(\"What are the different pipelines in Swiftide and how do they work?\")         .await         .unwrap();      println!(\"{}\", answer.answer()); } ``` ---",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0010",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Hybrid Search Example"
      ],
      "heading_text": "Hybrid Search Example",
      "token_count": 655,
      "char_count": 2724,
      "start_char": 20963,
      "end_char": 23687,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9333333333333333,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.727671",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 655,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Hybrid Search Example",
      "chunk_hash": "d20d7b26d181dc6e",
      "content_digest": "d20d7b26d181dc6e",
      "chunk_length": 2724,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "query",
          "fastembed",
          "openai",
          "then",
          "batch",
          "size",
          "clone",
          "sparse",
          "qdrant",
          "let",
          "with",
          "transformers",
          "from",
          "unwrap",
          "search",
          "default",
          "pipeline",
          "client",
          "hybrid",
          "for"
        ],
        "term_weights": [
          {
            "term": "query",
            "tf": 12,
            "weight": 0.042105
          },
          {
            "term": "fastembed",
            "tf": 11,
            "weight": 0.038596
          },
          {
            "term": "openai",
            "tf": 11,
            "weight": 0.038596
          },
          {
            "term": "then",
            "tf": 10,
            "weight": 0.035088
          },
          {
            "term": "batch",
            "tf": 9,
            "weight": 0.031579
          },
          {
            "term": "size",
            "tf": 9,
            "weight": 0.031579
          },
          {
            "term": "clone",
            "tf": 9,
            "weight": 0.031579
          },
          {
            "term": "sparse",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "let",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "with",
            "tf": 8,
            "weight": 0.02807
          },
          {
            "term": "transformers",
            "tf": 7,
            "weight": 0.024561
          },
          {
            "term": "from",
            "tf": 7,
            "weight": 0.024561
          },
          {
            "term": "unwrap",
            "tf": 6,
            "weight": 0.021053
          },
          {
            "term": "search",
            "tf": 5,
            "weight": 0.017544
          },
          {
            "term": "default",
            "tf": 5,
            "weight": 0.017544
          },
          {
            "term": "pipeline",
            "tf": 5,
            "weight": 0.017544
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.017544
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.014035
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.014035
          }
        ],
        "unique_terms": 102,
        "total_terms": 285
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Hybrid Search Example",
        "batch",
        "clone",
        "fastembed",
        "let",
        "openai",
        "qdrant",
        "query",
        "size",
        "sparse",
        "then"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9333333333333333,
      "overall": 0.8111111111111112
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/frameworks/swiftide.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Swiftide](#swiftide.md)    - [High level features](#high-level-features.md)   - [Installation](#installation.md)   - [Indexing Example (Step by Step)](#indexing-example-step-by-step.md)   - [Hybrid Search Example](#hybrid-search-example.md)   - [Further reading](#further-reading.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/frameworks/swiftide.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "ade6b26c8cee-0012",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "filename": "_documentation_frameworks_swiftide_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 227,
      "char_count": 841,
      "start_char": 23814,
      "end_char": 24655,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.53375,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:30.730602",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 227,
      "document_id": "ade6b26c8cee",
      "document_name": "_documentation_frameworks_swiftide_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "source_filename": "_documentation_frameworks_swiftide_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_swiftide\\_documentation_frameworks_swiftide_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "eb785bbdeaabb336",
      "content_digest": "eb785bbdeaabb336",
      "chunk_length": 841,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "page",
          "github",
          "qdrant",
          "landing",
          "https",
          "com",
          "swiftide",
          "example",
          "step",
          "this",
          "you",
          "edit",
          "tree",
          "master",
          "content",
          "documentation",
          "frameworks",
          "create",
          "issues",
          "new"
        ],
        "term_weights": [
          {
            "term": "page",
            "tf": 7,
            "weight": 0.067961
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.067961
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.058252
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.058252
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.038835
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.038835
          },
          {
            "term": "swiftide",
            "tf": 4,
            "weight": 0.038835
          },
          {
            "term": "example",
            "tf": 4,
            "weight": 0.038835
          },
          {
            "term": "step",
            "tf": 4,
            "weight": 0.038835
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "edit",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "tree",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "master",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "content",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "frameworks",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "issues",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "new",
            "tf": 2,
            "weight": 0.019417
          }
        ],
        "unique_terms": 43,
        "total_terms": 103
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "com",
        "example",
        "github",
        "https",
        "landing",
        "page",
        "qdrant",
        "step",
        "swiftide",
        "this"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.53375,
      "overall": 0.6779166666666666
    }
  }
]