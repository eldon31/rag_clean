[
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "3b0a30281fba-0000",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 677,
      "end_char": 1350,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.426795",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "3b0a30281fba-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 1352,
      "end_char": 7013,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.481451",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "3b0a30281fba-0002",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 7015,
      "end_char": 9362,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.488657",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 576,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.8358974358974359
    }
  },
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "3b0a30281fba-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 9364,
      "end_char": 10037,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.492125",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "3b0a30281fba-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 10039,
      "end_char": 15700,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.522856",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - Agentic RAG With LangGraph",
    "metadata": {
      "chunk_id": "3b0a30281fba-0005",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 598,
      "char_count": 2433,
      "start_char": 15702,
      "end_char": 18135,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9016,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.532312",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 598,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "bbcb64fe79da941f",
      "content_digest": "bbcb64fe79da941f",
      "chunk_length": 2433,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 31,
            "weight": 0.107266
          },
          {
            "term": "documentation",
            "tf": 23,
            "weight": 0.079585
          },
          {
            "term": "https",
            "tf": 22,
            "weight": 0.076125
          },
          {
            "term": "tech",
            "tf": 22,
            "weight": 0.076125
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.048443
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.034602
          },
          {
            "term": "with",
            "tf": 10,
            "weight": 0.034602
          },
          {
            "term": "rag",
            "tf": 10,
            "weight": 0.034602
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.024221
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.020761
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017301
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017301
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013841
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.013841
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.013841
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010381
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010381
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010381
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010381
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.00692
          }
        ],
        "unique_terms": 98,
        "total_terms": 289
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9016,
      "overall": 0.8338666666666666
    }
  },
  {
    "text": "# Agentic RAG With LangGraph and Qdrant\n\nTraditional Retrieval-Augmented Generation (RAG) systems follow a straightforward path: query → retrieve → generate. Sure, this works well for many scenarios. But let’s face it—this linear approach often struggles when you’re dealing with complex queries that demand multiple steps or pulling together diverse types of information.\n\n[Agentic RAG](https://qdrant.tech/articles/agentic-rag/) takes things up a notch by introducing AI agents that can orchestrate multiple retrieval steps and smartly decide how to gather and use the information you need. Think of it this way: in an Agentic RAG workflow, RAG becomes just one powerful tool in a much bigger and more versatile toolkit.\n\nBy combining LangGraph’s robust state management with Qdrant’s cutting-edge vector search, we’ll build a system that doesn’t just answer questions—it tackles complex, multi-step information retrieval tasks with finesse.",
    "metadata": {
      "chunk_id": "3b0a30281fba-0006",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Agentic RAG With LangGraph and Qdrant"
      ],
      "heading_text": "Agentic RAG With LangGraph and Qdrant",
      "token_count": 194,
      "char_count": 943,
      "start_char": 18137,
      "end_char": 19080,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.736268656716418,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.533680",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 194,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Agentic RAG With LangGraph and Qdrant",
      "chunk_hash": "ed65a87f0980e3d6",
      "content_digest": "ed65a87f0980e3d6",
      "chunk_length": 943,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "rag",
          "agentic",
          "with",
          "and",
          "qdrant",
          "retrieval",
          "this",
          "that",
          "information",
          "langgraph",
          "you",
          "complex",
          "multiple",
          "steps",
          "just",
          "traditional",
          "augmented",
          "generation",
          "systems",
          "follow"
        ],
        "term_weights": [
          {
            "term": "rag",
            "tf": 6,
            "weight": 0.04878
          },
          {
            "term": "agentic",
            "tf": 4,
            "weight": 0.03252
          },
          {
            "term": "with",
            "tf": 4,
            "weight": 0.03252
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.03252
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.02439
          },
          {
            "term": "retrieval",
            "tf": 3,
            "weight": 0.02439
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.02439
          },
          {
            "term": "that",
            "tf": 3,
            "weight": 0.02439
          },
          {
            "term": "information",
            "tf": 3,
            "weight": 0.02439
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.01626
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.01626
          },
          {
            "term": "complex",
            "tf": 2,
            "weight": 0.01626
          },
          {
            "term": "multiple",
            "tf": 2,
            "weight": 0.01626
          },
          {
            "term": "steps",
            "tf": 2,
            "weight": 0.01626
          },
          {
            "term": "just",
            "tf": 2,
            "weight": 0.01626
          },
          {
            "term": "traditional",
            "tf": 1,
            "weight": 0.00813
          },
          {
            "term": "augmented",
            "tf": 1,
            "weight": 0.00813
          },
          {
            "term": "generation",
            "tf": 1,
            "weight": 0.00813
          },
          {
            "term": "systems",
            "tf": 1,
            "weight": 0.00813
          },
          {
            "term": "follow",
            "tf": 1,
            "weight": 0.00813
          }
        ],
        "unique_terms": 93,
        "total_terms": 123
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Agentic RAG With LangGraph and Qdrant",
        "agentic",
        "and",
        "information",
        "langgraph",
        "qdrant",
        "rag",
        "retrieval",
        "that",
        "this",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.736268656716418,
      "overall": 0.812089552238806
    }
  },
  {
    "text": "## What We’ll Build\n\nWe’re building an AI agent to answer questions about Hugging Face and Transformers documentation using LangGraph. At the heart of our AI agent lies LangGraph, which acts like a conductor in an orchestra. It directs the flow between various components—deciding when to retrieve information, when to perform a web search, and when to generate responses.\n\nThe components are: two Qdrant vector stores and the Brave web search engine. However, our agent doesn’t just blindly follow one path. Instead, it evaluates each query and decides whether to tap into the first vector store, the second one, or search the web.\n\nThis selective approach gives your system the flexibility to choose the best data source for the job, rather than being locked into the same retrieval process every time, like traditional RAG. While we won’t dive into query refinement in this tutorial, the concepts you’ll learn here are a solid foundation for adding that functionality down the line.",
    "metadata": {
      "chunk_id": "3b0a30281fba-0007",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "What We’ll Build"
      ],
      "heading_text": "What We’ll Build",
      "token_count": 194,
      "char_count": 985,
      "start_char": 19082,
      "end_char": 20067,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.715,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.534203",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 194,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "What We’ll Build",
      "chunk_hash": "2141650fd96b99a9",
      "content_digest": "2141650fd96b99a9",
      "chunk_length": 985,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "and",
          "agent",
          "when",
          "web",
          "search",
          "into",
          "langgraph",
          "our",
          "like",
          "components",
          "are",
          "vector",
          "one",
          "query",
          "this",
          "for",
          "what",
          "build",
          "building"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 13,
            "weight": 0.094891
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.029197
          },
          {
            "term": "agent",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "when",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "web",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "into",
            "tf": 3,
            "weight": 0.021898
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "our",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "like",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "components",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "one",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "query",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.014599
          },
          {
            "term": "what",
            "tf": 1,
            "weight": 0.007299
          },
          {
            "term": "build",
            "tf": 1,
            "weight": 0.007299
          },
          {
            "term": "building",
            "tf": 1,
            "weight": 0.007299
          }
        ],
        "unique_terms": 102,
        "total_terms": 137
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "What We’ll Build",
        "agent",
        "and",
        "into",
        "langgraph",
        "like",
        "our",
        "search",
        "the",
        "web",
        "when"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.715,
      "overall": 0.8049999999999998
    }
  },
  {
    "text": "## The Stack  The architecture taps into cutting-edge tools to power efficient Agentic RAG workflows. Here’s a quick overview of its components and the technologies you’ll need:  - **AI Agent:** The mastermind of the system, this agent parses your queries, picks the right tools, and integrates the responses. We’ll use OpenAI’s *gpt-4o* as the reasoning engine, managed seamlessly by LangGraph. - **Embedding:** Queries are transformed into vector embeddings using OpenAI’s *text-embedding-3-small* model. - **Vector Database:** Embeddings are stored and used for similarity searches, with Qdrant stepping in as our database of choice. - **LLM:** Responses are generated using OpenAI’s *gpt-4o*, ensuring answers are accurate and contextually grounded. - **Search Tools:** To extend RAG’s capabilities, we’ve added a web search component powered by BraveSearchAPI, perfect for real-time and external data retrieval. - **Workflow Management:** The entire orchestration and decision-making flow is built with LangGraph, providing the flexibility and intelligence needed to handle complex workflows. Ready to start building this system from the ground up? Let’s get to it!",
    "metadata": {
      "chunk_id": "3b0a30281fba-0009",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "The Stack"
      ],
      "heading_text": "The Stack",
      "token_count": 249,
      "char_count": 1170,
      "start_char": 23125,
      "end_char": 24295,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5145508982035928,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.537217",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 249,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "The Stack",
      "chunk_hash": "64265f941cb95f07",
      "content_digest": "64265f941cb95f07",
      "chunk_length": 1170,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "and",
          "are",
          "tools",
          "openai",
          "into",
          "rag",
          "workflows",
          "agent",
          "system",
          "this",
          "queries",
          "responses",
          "gpt",
          "langgraph",
          "embedding",
          "vector",
          "embeddings",
          "using",
          "database"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 11,
            "weight": 0.076389
          },
          {
            "term": "and",
            "tf": 7,
            "weight": 0.048611
          },
          {
            "term": "are",
            "tf": 4,
            "weight": 0.027778
          },
          {
            "term": "tools",
            "tf": 3,
            "weight": 0.020833
          },
          {
            "term": "openai",
            "tf": 3,
            "weight": 0.020833
          },
          {
            "term": "into",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "rag",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "workflows",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "agent",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "system",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "responses",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "gpt",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "embedding",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "embeddings",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.013889
          }
        ],
        "unique_terms": 103,
        "total_terms": 144
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "The Stack",
        "agent",
        "and",
        "are",
        "into",
        "openai",
        "rag",
        "system",
        "the",
        "tools",
        "workflows"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5145508982035928,
      "overall": 0.7381836327345308
    }
  },
  {
    "text": "## Implementation\n\nBefore we dive into building our agent, let’s get everything set up.",
    "metadata": {
      "chunk_id": "3b0a30281fba-0010",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Implementation"
      ],
      "heading_text": "Implementation",
      "token_count": 18,
      "char_count": 87,
      "start_char": 24298,
      "end_char": 24385,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.537552",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 18,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Implementation",
      "chunk_hash": "24f82d2b0c407f3c",
      "content_digest": "24f82d2b0c407f3c",
      "chunk_length": 87,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "implementation",
          "before",
          "dive",
          "into",
          "building",
          "our",
          "agent",
          "let",
          "get",
          "everything",
          "set"
        ],
        "term_weights": [
          {
            "term": "implementation",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "before",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "dive",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "into",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "building",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "our",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "agent",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "let",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "get",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "everything",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "set",
            "tf": 1,
            "weight": 0.090909
          }
        ],
        "unique_terms": 11,
        "total_terms": 11
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Implementation",
        "agent",
        "before",
        "building",
        "dive",
        "everything",
        "get",
        "implementation",
        "into",
        "let",
        "our"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "overall": 0.7633333333333333
    }
  },
  {
    "text": "### Qdrant Vector Database Setup  We’ll use **Qdrant Cloud** as our vector store for document embeddings. Here’s how to set it up:  | **Step**                   | **Description**                                                                                                                                                                                  | | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | **1. Create an Account**   | If you don’t already have one, head to Qdrant Cloud and sign up.                                                                                                                                 | | **2. Set Up a Cluster**    | Log in to your account and find the **Create New Cluster** button on the dashboard. Follow the prompts to configure: - Select your **preferred region**. - Choose the **free tier** for testing. | | **3. Secure Your Details** | Once your cluster is ready, note these details: - **Cluster URL** (e.g., <https://xxx-xxx-xxx.aws.cloud.qdrant.io>) - **API Key**                                                                |  Save these securely for future use!",
    "metadata": {
      "chunk_id": "3b0a30281fba-0012",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Qdrant Vector Database Setup"
      ],
      "heading_text": "Qdrant Vector Database Setup",
      "token_count": 196,
      "char_count": 1298,
      "start_char": 24956,
      "end_char": 26254,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5057024793388429,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.539160",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 196,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Qdrant Vector Database Setup",
      "chunk_hash": "418006b0f7061110",
      "content_digest": "418006b0f7061110",
      "chunk_length": 1298,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "cluster",
          "your",
          "the",
          "cloud",
          "for",
          "xxx",
          "vector",
          "use",
          "set",
          "create",
          "account",
          "and",
          "details",
          "these",
          "database",
          "setup",
          "our",
          "store",
          "document"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.047059
          },
          {
            "term": "cluster",
            "tf": 4,
            "weight": 0.047059
          },
          {
            "term": "your",
            "tf": 4,
            "weight": 0.047059
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.047059
          },
          {
            "term": "cloud",
            "tf": 3,
            "weight": 0.035294
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.035294
          },
          {
            "term": "xxx",
            "tf": 3,
            "weight": 0.035294
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "set",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "account",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "details",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "these",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "database",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "setup",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "our",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "store",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "document",
            "tf": 1,
            "weight": 0.011765
          }
        ],
        "unique_terms": 59,
        "total_terms": 85
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Qdrant Vector Database Setup",
        "cloud",
        "cluster",
        "for",
        "qdrant",
        "set",
        "the",
        "use",
        "vector",
        "xxx",
        "your"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5057024793388429,
      "overall": 0.7352341597796143
    }
  },
  {
    "text": "### OpenAI API Configuration\n\nYour OpenAI API key will power both embedding generation and language model interactions. Visit [OpenAI’s platform](https://platform.openai.com/) and sign up for an account. In the API section of your dashboard, create a new API key. We’ll use the text-embedding-3-small model for embeddings and GPT-4 as the language model.",
    "metadata": {
      "chunk_id": "3b0a30281fba-0013",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "OpenAI API Configuration"
      ],
      "heading_text": "OpenAI API Configuration",
      "token_count": 79,
      "char_count": 354,
      "start_char": 26256,
      "end_char": 26610,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5194117647058824,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.539698",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 79,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "OpenAI API Configuration",
      "chunk_hash": "4b63ecaba37e182d",
      "content_digest": "4b63ecaba37e182d",
      "chunk_length": 354,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "openai",
          "api",
          "and",
          "model",
          "the",
          "your",
          "key",
          "embedding",
          "language",
          "platform",
          "for",
          "configuration",
          "will",
          "power",
          "both",
          "generation",
          "interactions",
          "visit",
          "https",
          "com"
        ],
        "term_weights": [
          {
            "term": "openai",
            "tf": 4,
            "weight": 0.081633
          },
          {
            "term": "api",
            "tf": 4,
            "weight": 0.081633
          },
          {
            "term": "and",
            "tf": 3,
            "weight": 0.061224
          },
          {
            "term": "model",
            "tf": 3,
            "weight": 0.061224
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.061224
          },
          {
            "term": "your",
            "tf": 2,
            "weight": 0.040816
          },
          {
            "term": "key",
            "tf": 2,
            "weight": 0.040816
          },
          {
            "term": "embedding",
            "tf": 2,
            "weight": 0.040816
          },
          {
            "term": "language",
            "tf": 2,
            "weight": 0.040816
          },
          {
            "term": "platform",
            "tf": 2,
            "weight": 0.040816
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.040816
          },
          {
            "term": "configuration",
            "tf": 1,
            "weight": 0.020408
          },
          {
            "term": "will",
            "tf": 1,
            "weight": 0.020408
          },
          {
            "term": "power",
            "tf": 1,
            "weight": 0.020408
          },
          {
            "term": "both",
            "tf": 1,
            "weight": 0.020408
          },
          {
            "term": "generation",
            "tf": 1,
            "weight": 0.020408
          },
          {
            "term": "interactions",
            "tf": 1,
            "weight": 0.020408
          },
          {
            "term": "visit",
            "tf": 1,
            "weight": 0.020408
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.020408
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.020408
          }
        ],
        "unique_terms": 31,
        "total_terms": 49
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "OpenAI API Configuration",
        "and",
        "api",
        "embedding",
        "key",
        "language",
        "model",
        "openai",
        "platform",
        "the",
        "your"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5194117647058824,
      "overall": 0.7064705882352941
    }
  },
  {
    "text": "### Brave Search  To enhance search capabilities, we’ll integrate Brave Search. Visit the [Brave API](https://api.search.brave.com/) and complete their API access request process to obtain an API key. This key will enable web search functionality for our agent. For added security, store all API keys in a .env file. ```json OPENAI_API_KEY = <your-openai-api-key> QDRANT_KEY = <your-qdrant-api-key> QDRANT_URL = <your-qdrant-url> BRAVE_API_KEY = <your-brave-api-key> ``` ---  Then load the environment variables: ```python load_dotenv() qdrant_key = os.getenv(\"QDRANT_KEY\") qdrant_url = os.getenv(\"QDRANT_URL\") brave_key = os.getenv(\"BRAVE_API_KEY\") ``` ---",
    "metadata": {
      "chunk_id": "3b0a30281fba-0014",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Brave Search"
      ],
      "heading_text": "Brave Search",
      "token_count": 174,
      "char_count": 657,
      "start_char": 26612,
      "end_char": 27269,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5233333333333333,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.541433",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 174,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Brave Search",
      "chunk_hash": "29b3c78a1bd314cf",
      "content_digest": "29b3c78a1bd314cf",
      "chunk_length": 657,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "key",
          "api",
          "brave",
          "qdrant",
          "search",
          "your",
          "url",
          "getenv",
          "the",
          "for",
          "openai",
          "load",
          "enhance",
          "capabilities",
          "integrate",
          "visit",
          "https",
          "com",
          "and",
          "complete"
        ],
        "term_weights": [
          {
            "term": "key",
            "tf": 12,
            "weight": 0.125
          },
          {
            "term": "api",
            "tf": 11,
            "weight": 0.114583
          },
          {
            "term": "brave",
            "tf": 8,
            "weight": 0.083333
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.083333
          },
          {
            "term": "search",
            "tf": 5,
            "weight": 0.052083
          },
          {
            "term": "your",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "url",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "getenv",
            "tf": 3,
            "weight": 0.03125
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "openai",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "load",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "enhance",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "capabilities",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "integrate",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "visit",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "complete",
            "tf": 1,
            "weight": 0.010417
          }
        ],
        "unique_terms": 45,
        "total_terms": 96
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Brave Search",
        "api",
        "brave",
        "for",
        "getenv",
        "key",
        "qdrant",
        "search",
        "the",
        "url",
        "your"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5233333333333333,
      "overall": 0.7077777777777777
    }
  },
  {
    "text": "## Conclusion\n\nWe’ve successfully implemented Agentic RAG. But this is just the beginning—there’s plenty more you can explore to take your system to the next level.\n\nAgentic RAG is transforming how businesses connect data sources with AI, enabling smarter and more dynamic interactions. In this tutorial, you’ve learned how to build an Agentic RAG system that combines the power of LangGraph, Qdrant, and web search into one seamless workflow.\n\nThis system doesn’t just stop at retrieving relevant information from Hugging Face and Transformers documentation. It also smartly falls back to web search when needed, ensuring no query goes unanswered. With Qdrant as the vector database backbone, you get fast, scalable semantic search that excels at retrieving precise information—even from massive datasets.\n\nTo truly grasp the potential of this approach, why not apply these concepts to your own projects? Customize the template we’ve shared to fit your unique use case, and unlock the full potential of Agentic RAG for your business needs. The possibilities are endless.",
    "metadata": {
      "chunk_id": "3b0a30281fba-0023",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Conclusion"
      ],
      "heading_text": "Conclusion",
      "token_count": 209,
      "char_count": 1071,
      "start_char": 35029,
      "end_char": 36100,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7063636363636364,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.557202",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 209,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Conclusion",
      "chunk_hash": "d754a980bc527e81",
      "content_digest": "d754a980bc527e81",
      "chunk_length": 1071,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "agentic",
          "rag",
          "this",
          "your",
          "and",
          "you",
          "system",
          "search",
          "just",
          "more",
          "how",
          "with",
          "that",
          "qdrant",
          "web",
          "retrieving",
          "information",
          "from",
          "potential"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 8,
            "weight": 0.055556
          },
          {
            "term": "agentic",
            "tf": 4,
            "weight": 0.027778
          },
          {
            "term": "rag",
            "tf": 4,
            "weight": 0.027778
          },
          {
            "term": "this",
            "tf": 4,
            "weight": 0.027778
          },
          {
            "term": "your",
            "tf": 4,
            "weight": 0.027778
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.027778
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.020833
          },
          {
            "term": "system",
            "tf": 3,
            "weight": 0.020833
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.020833
          },
          {
            "term": "just",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "more",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "how",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "web",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "retrieving",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "information",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "from",
            "tf": 2,
            "weight": 0.013889
          },
          {
            "term": "potential",
            "tf": 2,
            "weight": 0.013889
          }
        ],
        "unique_terms": 105,
        "total_terms": 144
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Conclusion",
        "agentic",
        "and",
        "just",
        "rag",
        "search",
        "system",
        "the",
        "this",
        "you",
        "your"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7063636363636364,
      "overall": 0.7687878787878787
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Agentic RAG With LangGraph and Qdrant](#agentic-rag-with-langgraph-and-qdrant.md)    - [What We’ll Build](#what-well-build.md)    - [Workflow](#workflow.md)    - [The Stack](#the-stack.md)    - [Implementation](#implementation.md)      - [Imports](#imports.md)     - [Qdrant Vector Database Setup](#qdrant-vector-database-setup.md)     - [OpenAI API Configuration](#openai-api-configuration.md)     - [Brave Search](#brave-search.md)     - [Document Processing](#document-processing.md)     - [Defining the State](#defining-the-state.md)     - [Building the Tools](#building-the-tools.md)     - [Routing and Decision Making](#routing-and-decision-making.md)    - [Putting It All Together: The Graph](#putting-it-all-together-the-graph.md)     - [Running the Agent](#running-the-agent.md)    - [Conclusion](#conclusion.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/agentic-rag-langgraph.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "3b0a30281fba-0024",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "filename": "_documentation_agentic-rag-langgraph_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 378,
      "char_count": 1383,
      "start_char": 36102,
      "end_char": 37485,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5384,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:14.559560",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 378,
      "document_id": "3b0a30281fba",
      "document_name": "_documentation_agentic-rag-langgraph_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "source_filename": "_documentation_agentic-rag-langgraph_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_agentic-rag-langgraph\\_documentation_agentic-rag-langgraph_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "4125c080eee95375",
      "content_digest": "4125c080eee95375",
      "chunk_length": 1383,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "the",
          "page",
          "github",
          "landing",
          "https",
          "com",
          "agentic",
          "rag",
          "langgraph",
          "and",
          "this",
          "you",
          "edit",
          "tree",
          "master",
          "content",
          "documentation",
          "create",
          "issues"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.060976
          },
          {
            "term": "the",
            "tf": 10,
            "weight": 0.060976
          },
          {
            "term": "page",
            "tf": 7,
            "weight": 0.042683
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.042683
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.036585
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.02439
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.02439
          },
          {
            "term": "agentic",
            "tf": 4,
            "weight": 0.02439
          },
          {
            "term": "rag",
            "tf": 4,
            "weight": 0.02439
          },
          {
            "term": "langgraph",
            "tf": 4,
            "weight": 0.02439
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.02439
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.018293
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.012195
          },
          {
            "term": "edit",
            "tf": 2,
            "weight": 0.012195
          },
          {
            "term": "tree",
            "tf": 2,
            "weight": 0.012195
          },
          {
            "term": "master",
            "tf": 2,
            "weight": 0.012195
          },
          {
            "term": "content",
            "tf": 2,
            "weight": 0.012195
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.012195
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.012195
          },
          {
            "term": "issues",
            "tf": 2,
            "weight": 0.012195
          }
        ],
        "unique_terms": 67,
        "total_terms": 164
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "agentic",
        "com",
        "github",
        "https",
        "landing",
        "langgraph",
        "page",
        "qdrant",
        "rag",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5384,
      "overall": 0.6794666666666668
    }
  }
]