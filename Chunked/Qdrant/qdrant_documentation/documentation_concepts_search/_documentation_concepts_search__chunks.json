[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1032,
      "end_char": 3000,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:15.947522",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3682,
      "end_char": 5670,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:15.957893",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5672,
      "end_char": 5983,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:15.959965",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 83,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0006",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6360,
      "end_char": 8328,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:15.968072",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0008",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9010,
      "end_char": 10998,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:15.975811",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "# Similarity search\n\nSearching for the nearest vectors is at the core of many representational learning applications. Modern neural networks are trained to transform objects into vectors so that objects close in the real world appear close in vector space. It could be, for example, texts with similar meanings, visually similar pictures, or songs of the same genre.\n\nThis is how vector similarity works",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0010",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Similarity search"
      ],
      "heading_text": "Similarity search",
      "token_count": 74,
      "char_count": 403,
      "start_char": 11439,
      "end_char": 11842,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5290625,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:15.977957",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 74,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Similarity search",
      "chunk_hash": "e8f507056e762523",
      "content_digest": "e8f507056e762523",
      "chunk_length": 403,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "similarity",
          "for",
          "vectors",
          "objects",
          "close",
          "vector",
          "similar",
          "search",
          "searching",
          "nearest",
          "core",
          "many",
          "representational",
          "learning",
          "applications",
          "modern",
          "neural",
          "networks",
          "are"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 4,
            "weight": 0.078431
          },
          {
            "term": "similarity",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "objects",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "close",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "similar",
            "tf": 2,
            "weight": 0.039216
          },
          {
            "term": "search",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "searching",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "nearest",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "core",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "many",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "representational",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "learning",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "applications",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "modern",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "neural",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "networks",
            "tf": 1,
            "weight": 0.019608
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.019608
          }
        ],
        "unique_terms": 41,
        "total_terms": 51
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Similarity search",
        "close",
        "for",
        "objects",
        "search",
        "searching",
        "similar",
        "similarity",
        "the",
        "vector",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5290625,
      "overall": 0.6430208333333333
    }
  },
  {
    "text": "## Query API  *Available as of v1.10.0*  Qdrant provides a single interface for all kinds of search and exploration requests - the `Query API`. Here is a reference list of what kind of queries you can perform with the `Query API` in Qdrant:  Depending on the `query` parameter, Qdrant might prefer different strategies for the search. |                                                                                                      |                                                                     | | ---------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- | | Nearest Neighbors Search                                                                             | Vector Similarity Search, also known as k-NN                        | | Search By Id                                                                                         | Search by an already stored vector - skip embedding model inference | | [Recommendations](https://qdrant.tech/documentation/concepts/explore/#recommendation-api)            | Provide positive and negative examples                              | | [Discovery Search](https://qdrant.tech/documentation/concepts/explore/#discovery-api)                | Guide the search using context as a one-shot training set           | | [Scroll](https://qdrant.tech/documentation/concepts/points/#scroll-points)                           | Get all points with optional filtering                              | | [Grouping](https://qdrant.tech/documentation/concepts/search/#grouping-api)                          | Group results by a certain field                                    | | [Order By](https://qdrant.tech/documentation/concepts/hybrid-queries/#re-ranking-with-stored-values) | Order points by payload key                                         | | [Hybrid Search](https://qdrant.tech/documentation/concepts/hybrid-queries/#hybrid-search)            | Combine multiple queries to get better results                      | | [Multi-Stage Search](https://qdrant.tech/documentation/concepts/hybrid-queries/#multi-stage-queries) | Optimize performance for large embeddings                           | | [Random Sampling](#random-sampling.md)                                                               | Get random points from the collection                               |  **Nearest Neighbors Search** ```http POST /collections/{collection_name}/points/query {     \"query\": [0.2, 0.1, 0.9, 0.7] // <--- Dense vector } ``` ```python client.query_points(     collection_name=\"{collection_name}\",     query=[0.2, 0.1, 0.9, 0.7], # <--- Dense vector ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     query: [0.2, 0.1, 0.9, 0.7], // <--- Dense vector }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{Condition, Filter, Query, QueryPointsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(Query::new_nearest(vec![0.2, 0.1, 0.9, 0.7]))     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.QueryFactory.nearest;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.QueryPoints;  QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(QueryPoints.newBuilder()   .setCollectionName(\"{collectionName}\")   .setQuery(nearest(List.of(0.2f, 0.1f, 0.9f, 0.7f)))   .build()).get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(  collectionName: \"{collection_name}\",  query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7), }) ``` **Search By Id** ```http POST /collections/{collection_name}/points/query {     \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\" // <--- point id } ``` ```python client.query_points(     collection_name=\"{collection_name}\",     query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", # <--- point id ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{Condition, Filter, PointId, Query, QueryPointsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(Query::new_nearest(PointId::new(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))     )     .await?; ``` ```java import java.util.UUID;  import static io.qdrant.client.QueryFactory.nearest;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.QueryPoints;  QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(QueryPoints.newBuilder()   .setCollectionName(\"{collectionName}\")   .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))   .build()).get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(     collectionName: \"{collection_name}\",     query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\") ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")), }) ```",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0011",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Query API"
      ],
      "heading_text": "Query API",
      "token_count": 1613,
      "char_count": 6264,
      "start_char": 11844,
      "end_char": 18108,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6538358490566037,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:15.998078",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1613,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Query API",
      "chunk_hash": "88f047295fd772a3",
      "content_digest": "88f047295fd772a3",
      "chunk_length": 6264,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "query",
          "collection",
          "search",
          "name",
          "import",
          "qdrantclient",
          "new",
          "points",
          "localhost",
          "nearest",
          "6334",
          "https",
          "tech",
          "documentation",
          "concepts",
          "43cf51e2",
          "8777",
          "4f52"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 45,
            "weight": 0.079646
          },
          {
            "term": "client",
            "tf": 40,
            "weight": 0.070796
          },
          {
            "term": "query",
            "tf": 30,
            "weight": 0.053097
          },
          {
            "term": "collection",
            "tf": 15,
            "weight": 0.026549
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.024779
          },
          {
            "term": "name",
            "tf": 14,
            "weight": 0.024779
          },
          {
            "term": "import",
            "tf": 14,
            "weight": 0.024779
          },
          {
            "term": "qdrantclient",
            "tf": 12,
            "weight": 0.021239
          },
          {
            "term": "new",
            "tf": 12,
            "weight": 0.021239
          },
          {
            "term": "points",
            "tf": 11,
            "weight": 0.019469
          },
          {
            "term": "localhost",
            "tf": 10,
            "weight": 0.017699
          },
          {
            "term": "nearest",
            "tf": 8,
            "weight": 0.014159
          },
          {
            "term": "6334",
            "tf": 8,
            "weight": 0.014159
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.012389
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.012389
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.012389
          },
          {
            "term": "concepts",
            "tf": 7,
            "weight": 0.012389
          },
          {
            "term": "43cf51e2",
            "tf": 7,
            "weight": 0.012389
          },
          {
            "term": "8777",
            "tf": 7,
            "weight": 0.012389
          },
          {
            "term": "4f52",
            "tf": 7,
            "weight": 0.012389
          }
        ],
        "unique_terms": 155,
        "total_terms": 565
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Query API",
        "client",
        "collection",
        "import",
        "name",
        "new",
        "points",
        "qdrant",
        "qdrantclient",
        "query",
        "search"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6538358490566037,
      "overall": 0.7179452830188678
    }
  },
  {
    "text": "## Metrics  There are many ways to estimate the similarity of vectors with each other. In Qdrant terms, these ways are called metrics. The choice of metric depends on the vectors obtained and, in particular, on the neural network encoder training method. Qdrant supports these most popular types of metrics:  - Dot product: `Dot` - <https://en.wikipedia.org/wiki/Dot_product> - Cosine similarity: `Cosine` - <https://en.wikipedia.org/wiki/Cosine_similarity> - Euclidean distance: `Euclid` - <https://en.wikipedia.org/wiki/Euclidean_distance> - Manhattan distance: `Manhattan`\\*- <https://en.wikipedia.org/wiki/Taxicab_geometry> *\\*Available as of v1.7*  The most typical metric used in similarity learning models is the cosine metric. Qdrant counts this metric in 2 steps, due to which a higher search speed is achieved. The first step is to normalize the vector when adding it to the collection. It happens only once for each vector. The second step is the comparison of vectors. In this case, it becomes equivalent to dot production - a very fast operation due to SIMD. Depending on the query configuration, Qdrant might prefer different strategies for the search. Read more about it in the [query planning](#query-planning.md) section.",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0012",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Metrics"
      ],
      "heading_text": "Metrics",
      "token_count": 280,
      "char_count": 1238,
      "start_char": 18126,
      "end_char": 19364,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6831034482758621,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.001611",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 280,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Metrics",
      "chunk_hash": "8b92bbada352a536",
      "content_digest": "8b92bbada352a536",
      "chunk_length": 1238,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "similarity",
          "qdrant",
          "metric",
          "dot",
          "https",
          "wikipedia",
          "org",
          "wiki",
          "cosine",
          "metrics",
          "vectors",
          "distance",
          "query",
          "are",
          "ways",
          "each",
          "these",
          "most",
          "product"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 14,
            "weight": 0.090909
          },
          {
            "term": "similarity",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "metric",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "dot",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "wikipedia",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "org",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "wiki",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "cosine",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "metrics",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "distance",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "query",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "ways",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "each",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "these",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "most",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "product",
            "tf": 2,
            "weight": 0.012987
          }
        ],
        "unique_terms": 91,
        "total_terms": 154
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Metrics",
        "cosine",
        "dot",
        "https",
        "metric",
        "org",
        "qdrant",
        "similarity",
        "the",
        "wiki",
        "wikipedia"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6831034482758621,
      "overall": 0.7610344827586206
    }
  },
  {
    "text": "## Search API  Let’s look at an example of a search query. REST API - API Schema definition is available [here](https://api.qdrant.tech/api-reference/search/query-points) ```http POST /collections/{collection_name}/points/query {     \"query\": [0.2, 0.1, 0.9, 0.79],     \"filter\": {         \"must\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"params\": {         \"hnsw_ef\": 128,         \"exact\": false     },     \"limit\": 3 } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.query_points(     collection_name=\"{collection_name}\",     query=[0.2, 0.1, 0.9, 0.7],     query_filter=models.Filter(         must=[             models.FieldCondition(                 key=\"city\",                 match=models.MatchValue(                     value=\"London\",                 ),             )         ]     ),     search_params=models.SearchParams(hnsw_ef=128, exact=False),     limit=3, ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     query: [0.2, 0.1, 0.9, 0.7],     filter: {         must: [             {                 key: \"city\",                 match: {                     value: \"London\",                 },             },         ],     },     params: {         hnsw_ef: 128,         exact: false,     },     limit: 3, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, QueryPointsBuilder, SearchParamsBuilder}; use qdrant_client::Qdrant;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(vec![0.2, 0.1, 0.9, 0.7])             .limit(3)             .filter(Filter::must([Condition::matches(                 \"city\",                 \"London\".to_string(),             )]))             .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false)),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.matchKeyword; import static io.qdrant.client.QueryFactory.nearest;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.QueryPoints; import io.qdrant.client.grpc.Points.SearchParams;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(QueryPoints.newBuilder()         .setCollectionName(\"{collection_name}\")         .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))         .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build())         .setParams(SearchParams.newBuilder().setExact(false).setHnswEf(128).build())         .setLimit(3)         .build()).get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(     collectionName: \"{collection_name}\",     query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },     filter: MatchKeyword(\"city\", \"London\"),     searchParams: new SearchParams { Exact = false, HnswEf = 128 },     limit: 3 ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7), \tFilter: &qdrant.Filter{ \t\tMust: []*qdrant.Condition{ \t\t\tqdrant.NewMatch(\"city\", \"London\"), \t\t}, \t}, \tParams: &qdrant.SearchParams{ \t\tExact:  qdrant.PtrOf(false), \t\tHnswEf: qdrant.PtrOf(uint64(128)), \t}, }) ``` In this example, we are looking for vectors similar to vector `[0.2, 0.1, 0.9, 0.7]`. Parameter `limit` (or its alias - `top`) specifies the amount of most similar results we would like to retrieve. Values under the key `params` specify custom parameters for the search. Currently, it could be:  - `hnsw_ef` - value that specifies `ef` parameter of the HNSW algorithm. - `exact` - option to not use the approximate search (ANN). If set to true, the search may run for a long as it performs a full scan to retrieve exact results. - `indexed_only` - With this option you can disable the search in those segments where vector index is not built yet. This may be useful if you want to minimize the impact to the search performance whilst the collection is also being updated. Using this option may lead to a partial result if the collection is not fully indexed yet, consider using it only if eventual consistency is acceptable for your use case. Since the `filter` parameter is specified, the search is performed only among those points that satisfy the filter condition. See details of possible filters and their work in the [filtering](https://qdrant.tech/documentation/concepts/filtering/) section. Example result of this API would be ```json {   \"result\": [     { \"id\": 10, \"score\": 0.81 },     { \"id\": 14, \"score\": 0.75 },     { \"id\": 11, \"score\": 0.73 }   ],   \"status\": \"ok\",   \"time\": 0.001 } ``` The `result` contains ordered by `score` list of found point ids. Note that payload and vector data is missing in these results by default. See [payload and vector in the result](#payload-and-vector-in-the-result.md) on how to include it. If the collection was created with multiple vectors, the name of the vector to use for searching should be provided: ```http POST /collections/{collection_name}/points/query {     \"query\": [0.2, 0.1, 0.9, 0.7],     \"using\": \"image\",     \"limit\": 3 } ``` ```python from qdrant_client import QdrantClient  client = QdrantClient(url=\"http://localhost:6333\")  client.query_points(     collection_name=\"{collection_name}\",     query=[0.2, 0.1, 0.9, 0.7],     using=\"image\",     limit=3, ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {   query: [0.2, 0.1, 0.9, 0.7],   using: \"image\",   limit: 3, }); ``` ```rust use qdrant_client::qdrant::QueryPointsBuilder; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(vec![0.2, 0.1, 0.9, 0.7])             .limit(3)             .using(\"image\"),     )     .await?; ``` ```java import java.util.List;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.QueryPoints;  import static io.qdrant.client.QueryFactory.nearest;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(QueryPoints.newBuilder()         .setCollectionName(\"{collection_name}\")         .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))         .setUsing(\"image\")         .setLimit(3)         .build()).get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync( \tcollectionName: \"{collection_name}\", \tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f }, \tusingVector: \"image\", \tlimit: 3 ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7), \tUsing:          qdrant.PtrOf(\"image\"), }) ``` Search is processing only among vectors with the same name. If the collection was created with sparse vectors, the name of the sparse vector to use for searching should be provided:  You can still use payload filtering and other features of the search API with sparse vectors. There are however important differences between dense and sparse vector search:  | Index            | Sparse Query                                                                      | Dense Query                                       | | ---------------- | --------------------------------------------------------------------------------- | ------------------------------------------------- | | Scoring Metric   | Default is `Dot product`, no need to specify it                                   | `Distance` has supported metrics e.g. Dot, Cosine | | Search Type      | Always exact in Qdrant                                                            | HNSW is an approximate NN                         | | Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors                           |  In general, the speed of the search is proportional to the number of non-zero values in the query vector. ```http POST /collections/{collection_name}/points/query {     \"query\": {         \"indices\": [1, 3, 5, 7],         \"values\": [0.1, 0.2, 0.3, 0.4]     },     \"using\": \"text\" } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")   result = client.query_points(     collection_name=\"{collection_name}\",     query=models.SparseVector(indices=[1, 3, 5, 7], values=[0.1, 0.2, 0.3, 0.4]),     using=\"text\", ).points ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     query: {         indices: [1, 3, 5, 7],         values: [0.1, 0.2, 0.3, 0.4]     },     using: \"text\",     limit: 3, }); ``` ```rust use qdrant_client::qdrant::QueryPointsBuilder; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(vec![(1, 0.2), (3, 0.1), (5, 0.9), (7, 0.7)])             .limit(10)             .using(\"text\"),     )     .await?; ``` ```java import java.util.List;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.QueryPoints;  import static io.qdrant.client.QueryFactory.nearest;  QdrantClient client =   new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(         QueryPoints.newBuilder()                 .setCollectionName(\"{collection_name}\")                 .setUsing(\"text\")                 .setQuery(nearest(List.of(0.1f, 0.2f, 0.3f, 0.4f), List.of(1, 3, 5, 7)))                 .setLimit(3)                 .build())         .get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(   collectionName: \"{collection_name}\",   query: new (float, uint)[] {(0.1f, 1), (0.2f, 3), (0.3f, 5), (0.4f, 7)},   usingVector: \"text\",   limit: 3 ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery: qdrant.NewQuerySparse( \t\t[]uint32{1, 3, 5, 7}, \t\t[]float32{0.1, 0.2, 0.3, 0.4}), \tUsing: qdrant.PtrOf(\"text\"), }) ```",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0013",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Search API"
      ],
      "heading_text": "Search API",
      "token_count": 3153,
      "char_count": 11304,
      "start_char": 19370,
      "end_char": 30674,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6127767695099818,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.031149",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 3153,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Search API",
      "chunk_hash": "a66525849e827fc8",
      "content_digest": "a66525849e827fc8",
      "chunk_length": 11304,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "query",
          "the",
          "collection",
          "name",
          "import",
          "qdrantclient",
          "localhost",
          "using",
          "new",
          "search",
          "limit",
          "points",
          "filter",
          "use",
          "6334",
          "false",
          "build",
          "vector"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 70,
            "weight": 0.066288
          },
          {
            "term": "qdrant",
            "tf": 69,
            "weight": 0.065341
          },
          {
            "term": "query",
            "tf": 40,
            "weight": 0.037879
          },
          {
            "term": "the",
            "tf": 32,
            "weight": 0.030303
          },
          {
            "term": "collection",
            "tf": 28,
            "weight": 0.026515
          },
          {
            "term": "name",
            "tf": 27,
            "weight": 0.025568
          },
          {
            "term": "import",
            "tf": 27,
            "weight": 0.025568
          },
          {
            "term": "qdrantclient",
            "tf": 24,
            "weight": 0.022727
          },
          {
            "term": "localhost",
            "tf": 17,
            "weight": 0.016098
          },
          {
            "term": "using",
            "tf": 17,
            "weight": 0.016098
          },
          {
            "term": "new",
            "tf": 16,
            "weight": 0.015152
          },
          {
            "term": "search",
            "tf": 15,
            "weight": 0.014205
          },
          {
            "term": "limit",
            "tf": 15,
            "weight": 0.014205
          },
          {
            "term": "points",
            "tf": 14,
            "weight": 0.013258
          },
          {
            "term": "filter",
            "tf": 14,
            "weight": 0.013258
          },
          {
            "term": "use",
            "tf": 11,
            "weight": 0.010417
          },
          {
            "term": "6334",
            "tf": 11,
            "weight": 0.010417
          },
          {
            "term": "false",
            "tf": 10,
            "weight": 0.00947
          },
          {
            "term": "build",
            "tf": 10,
            "weight": 0.00947
          },
          {
            "term": "vector",
            "tf": 10,
            "weight": 0.00947
          }
        ],
        "unique_terms": 256,
        "total_terms": 1056
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Search API",
        "client",
        "collection",
        "import",
        "localhost",
        "name",
        "qdrant",
        "qdrantclient",
        "query",
        "the",
        "using"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6127767695099818,
      "overall": 0.7375922565033273
    }
  },
  {
    "text": "### Filtering results by score\n\nIn addition to payload filtering, it might be useful to filter out results with a low similarity score. For example, if you know the minimal acceptance score for your model and do not want any results which are less similar than the threshold. In this case, you can use `score_threshold` parameter of the search query. It will exclude all results with a score worse than the given.\n\nThis parameter may exclude lower or higher scores depending on the used metric. For example, higher scores of Euclidean metric are considered more distant and, therefore, will be excluded.",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0014",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Filtering results by score"
      ],
      "heading_text": "Filtering results by score",
      "token_count": 118,
      "char_count": 603,
      "start_char": 30709,
      "end_char": 31312,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7068316831683169,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.034433",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 118,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Filtering results by score",
      "chunk_hash": "e7ff406f78a4a63a",
      "content_digest": "e7ff406f78a4a63a",
      "chunk_length": 603,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "score",
          "the",
          "results",
          "for",
          "filtering",
          "with",
          "example",
          "you",
          "and",
          "are",
          "than",
          "threshold",
          "this",
          "parameter",
          "will",
          "exclude",
          "higher",
          "scores",
          "metric",
          "addition"
        ],
        "term_weights": [
          {
            "term": "score",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "results",
            "tf": 4,
            "weight": 0.047619
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "example",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "than",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "threshold",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "parameter",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "will",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "exclude",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "higher",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "scores",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "metric",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "addition",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 56,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Filtering results by score",
        "and",
        "are",
        "example",
        "filtering",
        "for",
        "results",
        "score",
        "the",
        "with",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7068316831683169,
      "overall": 0.768943894389439
    }
  },
  {
    "text": "## Query by ID  Whenever you need to use a vector as an input, you can always use a [point ID](https://qdrant.tech/documentation/concepts/points/#point-ids) instead. ```http POST /collections/{collection_name}/points/query {     \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\" // <--- point id } ``` ```python client.query_points(     collection_name=\"{collection_name}\",     query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", # <--- point id ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{Condition, Filter, PointId, Query, QueryPointsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(Query::new_nearest(PointId::new(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))     )     .await?; ``` ```java import java.util.UUID;  import static io.qdrant.client.QueryFactory.nearest;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.QueryPoints;  QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(QueryPoints.newBuilder()   .setCollectionName(\"{collectionName}\")   .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))   .build()).get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(     collectionName: \"{collection_name}\",     query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\") ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")), }) ``` The above example will fetch the default vector from the point with this id, and use it as the query vector. If the `using` parameter is also specified, Qdrant will use the vector with that name. It is also possible to reference an ID from a different collection, by setting the `lookup_from` parameter. ```http POST /collections/{collection_name}/points/query {     \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", // <--- point id     \"using\": \"512d-vector\"     \"lookup_from\": {         \"collection\": \"another_collection\", // <--- other collection name         \"vector\": \"image-512\" // <--- vector name in the other collection     } } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.query_points(     collection_name=\"{collection_name}\",     query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\",  # <--- point id     using=\"512d-vector\",     lookup_from=models.LookupLocation(         collection=\"another_collection\",  # <--- other collection name         vector=\"image-512\",  # <--- vector name in the other collection     ) ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id     using: '512d-vector',     lookup_from: {         collection: 'another_collection', // <--- other collection name         vector: 'image-512', // <--- vector name in the other collection     } }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{LookupLocationBuilder, PointId, Query, QueryPointsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client.query(     QueryPointsBuilder::new(\"{collection_name}\")         .query(Query::new_nearest(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\"))         .using(\"512d-vector\")         .lookup_from(             LookupLocationBuilder::new(\"another_collection\")                 .vector_name(\"image-512\")         ) ).await?; ``` ```java import static io.qdrant.client.QueryFactory.nearest;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.LookupLocation; import io.qdrant.client.grpc.Points.QueryPoints; import java.util.UUID;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .queryAsync(         QueryPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))             .setUsing(\"512d-vector\")             .setLookupFrom(                 LookupLocation.newBuilder()                     .setCollectionName(\"another_collection\")                     .setVectorName(\"image-512\")                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(   collectionName: \"{collection_name}\",   query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\"), // <--- point id   usingVector: \"512d-vector\",   lookupFrom: new() {     CollectionName = \"another_collection\", // <--- other collection name       VectorName = \"image-512\" // <--- vector name in the other collection   } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")), \tUsing:          qdrant.PtrOf(\"512d-vector\"), \tLookupFrom: &qdrant.LookupLocation{ \t\tCollectionName: \"another_collection\", \t\tVectorName:     qdrant.PtrOf(\"image-512\"), \t}, }) ``` In the case above, Qdrant will fetch the `\"image-512\"` vector from the specified point id in the collection `another_collection`. The fetched vector(s) must match the characteristics of the `using` vector, otherwise, an error will be returned.",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0017",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Query by ID"
      ],
      "heading_text": "Query by ID",
      "token_count": 1785,
      "char_count": 6242,
      "start_char": 45789,
      "end_char": 52031,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6146987951807229,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.076721",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1785,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Query by ID",
      "chunk_hash": "40692cf4d33ee866",
      "content_digest": "40692cf4d33ee866",
      "chunk_length": 6242,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "collection",
          "query",
          "name",
          "vector",
          "the",
          "import",
          "43cf51e2",
          "8777",
          "4f52",
          "bc74",
          "c2cbde0c8b04",
          "qdrantclient",
          "from",
          "new",
          "point",
          "localhost",
          "using",
          "use"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 44,
            "weight": 0.067901
          },
          {
            "term": "client",
            "tf": 43,
            "weight": 0.066358
          },
          {
            "term": "collection",
            "tf": 36,
            "weight": 0.055556
          },
          {
            "term": "query",
            "tf": 28,
            "weight": 0.04321
          },
          {
            "term": "name",
            "tf": 25,
            "weight": 0.03858
          },
          {
            "term": "vector",
            "tf": 22,
            "weight": 0.033951
          },
          {
            "term": "the",
            "tf": 18,
            "weight": 0.027778
          },
          {
            "term": "import",
            "tf": 16,
            "weight": 0.024691
          },
          {
            "term": "43cf51e2",
            "tf": 14,
            "weight": 0.021605
          },
          {
            "term": "8777",
            "tf": 14,
            "weight": 0.021605
          },
          {
            "term": "4f52",
            "tf": 14,
            "weight": 0.021605
          },
          {
            "term": "bc74",
            "tf": 14,
            "weight": 0.021605
          },
          {
            "term": "c2cbde0c8b04",
            "tf": 14,
            "weight": 0.021605
          },
          {
            "term": "qdrantclient",
            "tf": 14,
            "weight": 0.021605
          },
          {
            "term": "from",
            "tf": 13,
            "weight": 0.020062
          },
          {
            "term": "new",
            "tf": 13,
            "weight": 0.020062
          },
          {
            "term": "point",
            "tf": 11,
            "weight": 0.016975
          },
          {
            "term": "localhost",
            "tf": 11,
            "weight": 0.016975
          },
          {
            "term": "using",
            "tf": 9,
            "weight": 0.013889
          },
          {
            "term": "use",
            "tf": 8,
            "weight": 0.012346
          }
        ],
        "unique_terms": 123,
        "total_terms": 648
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "43cf51e2",
        "8777",
        "Query by ID",
        "client",
        "collection",
        "import",
        "name",
        "qdrant",
        "query",
        "the",
        "vector"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6146987951807229,
      "overall": 0.7048995983935743
    }
  },
  {
    "text": "## Pagination  Search and [recommendation](https://qdrant.tech/documentation/concepts/explore/#recommendation-api) APIs allow to skip first results of the search and return only the result starting from some specified offset:  Example: ```http POST /collections/{collection_name}/points/query {     \"query\": [0.2, 0.1, 0.9, 0.7],     \"with_vectors\": true,     \"with_payload\": true,     \"limit\": 10,     \"offset\": 100 } ``` ```python from qdrant_client import QdrantClient  client = QdrantClient(url=\"http://localhost:6333\")  client.query_points(     collection_name=\"{collection_name}\",     query=[0.2, 0.1, 0.9, 0.7],     with_vectors=True,     with_payload=True,     limit=10,     offset=100, ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {   query: [0.2, 0.1, 0.9, 0.7],   with_vector: true,   with_payload: true,   limit: 10,   offset: 100, }); ``` ```rust use qdrant_client::qdrant::QueryPointsBuilder; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(vec![0.2, 0.1, 0.9, 0.7])             .with_payload(true)             .with_vectors(true)             .limit(10)             .offset(100),     )     .await?; ``` ```java import java.util.List;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.WithVectorsSelectorFactory; import io.qdrant.client.grpc.Points.QueryPoints;  import static io.qdrant.client.QueryFactory.nearest; import static io.qdrant.client.WithPayloadSelectorFactory.enable;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(         QueryPoints.newBuilder()                 .setCollectionName(\"{collection_name}\")                 .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))                 .setWithPayload(enable(true))                 .setWithVectors(WithVectorsSelectorFactory.enable(true))                 .setLimit(10)                 .setOffset(100)                 .build())         .get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(     collectionName: \"{collection_name}\",     query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },     payloadSelector: true,     vectorsSelector: true,     limit: 10,     offset: 100 ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7), \tWithPayload:    qdrant.NewWithPayload(true), \tWithVectors:    qdrant.NewWithVectors(true), \tOffset:         qdrant.PtrOf(uint64(100)), }) ``` Is equivalent to retrieving the 11th page with 10 records per page. Large offset values may cause performance issues  Vector-based retrieval in general and HNSW index in particular, are not designed to be paginated. It is impossible to retrieve Nth closest vector without retrieving the first N vectors first. However, using the offset parameter saves the resources by reducing network traffic and the number of times the storage is accessed. Using an `offset` parameter, will require to internally retrieve `offset + limit` points, but only access payload and vector from the storage those points which are going to be actually returned.",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0018",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Pagination"
      ],
      "heading_text": "Pagination",
      "token_count": 981,
      "char_count": 3598,
      "start_char": 52052,
      "end_char": 55650,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8990740740740741,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.084613",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 981,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Pagination",
      "chunk_hash": "7af08c60468c322f",
      "content_digest": "7af08c60468c322f",
      "chunk_length": 3598,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "true",
          "offset",
          "query",
          "import",
          "the",
          "with",
          "collection",
          "name",
          "qdrantclient",
          "100",
          "limit",
          "localhost",
          "and",
          "from",
          "points",
          "payload",
          "new",
          "vectors"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 24,
            "weight": 0.066852
          },
          {
            "term": "client",
            "tf": 24,
            "weight": 0.066852
          },
          {
            "term": "true",
            "tf": 14,
            "weight": 0.038997
          },
          {
            "term": "offset",
            "tf": 11,
            "weight": 0.030641
          },
          {
            "term": "query",
            "tf": 11,
            "weight": 0.030641
          },
          {
            "term": "import",
            "tf": 10,
            "weight": 0.027855
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.02507
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.02507
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.022284
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.022284
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.022284
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.019499
          },
          {
            "term": "limit",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.016713
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "from",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "payload",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.013928
          },
          {
            "term": "vectors",
            "tf": 4,
            "weight": 0.011142
          }
        ],
        "unique_terms": 152,
        "total_terms": 359
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Pagination",
        "client",
        "collection",
        "import",
        "name",
        "offset",
        "qdrant",
        "query",
        "the",
        "true",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8990740740740741,
      "overall": 0.7996913580246914
    }
  },
  {
    "text": "### Search groups  REST API ([Schema](https://api.qdrant.tech/api-reference/search/query-points-groups)): ```http POST /collections/{collection_name}/points/query/groups {     // Same as in the regular query API     \"query\": [1.1],     // Grouping parameters     \"group_by\": \"document_id\",  // Path of the field to group by     \"limit\": 4,                 // Max amount of groups     \"group_size\": 2            // Max amount of points per group } ``` ```python client.query_points_groups(     collection_name=\"{collection_name}\",     # Same as in the regular query_points() API     query=[1.1],     # Grouping parameters     group_by=\"document_id\",  # Path of the field to group by     limit=4,  # Max amount of groups     group_size=2,  # Max amount of points per group ) ``` ```typescript client.queryGroups(\"{collection_name}\", {     query: [1.1],     group_by: \"document_id\",     limit: 4,     group_size: 2, }); ``` ```rust use qdrant_client::qdrant::QueryPointGroupsBuilder;  client     .query_groups(         QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")             .query(vec![0.2, 0.1, 0.9, 0.7])             .group_size(2u64)             .with_payload(true)             .with_vectors(true)             .limit(4u64),     )     .await?; ``` ```java import java.util.List;  import io.qdrant.client.grpc.Points.SearchPointGroups;  client.queryGroupsAsync(         QueryPointGroups.newBuilder()                 .setCollectionName(\"{collection_name}\")                 .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))                 .setGroupBy(\"document_id\")                 .setLimit(4)                 .setGroupSize(2)                 .build())         .get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryGroupsAsync(     collectionName: \"{collection_name}\",     query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },     groupBy: \"document_id\",     limit: 4,     groupSize: 2 ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.QueryGroups(context.Background(), &qdrant.QueryPointGroups{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7), \tGroupBy:        \"document_id\", \tGroupSize:      qdrant.PtrOf(uint64(2)), }) ``` The output of a ***groups*** call looks like this: ```json {     \"result\": {         \"groups\": [             {                 \"id\": \"a\",                 \"hits\": [                     { \"id\": 0, \"score\": 0.91 },                     { \"id\": 1, \"score\": 0.85 }                 ]             },             {                 \"id\": \"b\",                 \"hits\": [                     { \"id\": 1, \"score\": 0.85 }                 ]             },             {                 \"id\": 123,                 \"hits\": [                     { \"id\": 3, \"score\": 0.79 },                     { \"id\": 4, \"score\": 0.75 }                 ]             },             {                 \"id\": -10,                 \"hits\": [                     { \"id\": 5, \"score\": 0.6 }                 ]             }         ]     },     \"status\": \"ok\",     \"time\": 0.001 } ``` The groups are ordered by the score of the top point in the group. Inside each group the points are sorted too. If the `group_by` field of a point is an array (e.g. `\"document_id\": [\"a\", \"b\"]`), the point can be included in multiple groups (e.g. `\"document_id\": \"a\"` and `document_id: \"b\"`). This feature relies heavily on the \\`group\\_by\\` key provided. To improve performance, make sure to create a dedicated index for it. **Limitations**:  - Only [keyword](https://qdrant.tech/documentation/concepts/payload/#keyword) and [integer](https://qdrant.tech/documentation/concepts/payload/#integer) payload values are supported for the `group_by` parameter. Payload values with other types will be ignored. - At the moment, pagination is not enabled when using **groups**, so the `offset` parameter is not allowed.",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0020",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Search groups"
      ],
      "heading_text": "Search groups",
      "token_count": 1068,
      "char_count": 4002,
      "start_char": 57467,
      "end_char": 61469,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6703517587939698,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.096603",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1068,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Search groups",
      "chunk_hash": "e868decfebb7f1fa",
      "content_digest": "e868decfebb7f1fa",
      "chunk_length": 4002,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "group",
          "qdrant",
          "groups",
          "query",
          "client",
          "document",
          "points",
          "collection",
          "name",
          "score",
          "api",
          "limit",
          "payload",
          "max",
          "amount",
          "size",
          "hits",
          "https",
          "tech"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 16,
            "weight": 0.04893
          },
          {
            "term": "group",
            "tf": 16,
            "weight": 0.04893
          },
          {
            "term": "qdrant",
            "tf": 14,
            "weight": 0.042813
          },
          {
            "term": "groups",
            "tf": 12,
            "weight": 0.036697
          },
          {
            "term": "query",
            "tf": 12,
            "weight": 0.036697
          },
          {
            "term": "client",
            "tf": 12,
            "weight": 0.036697
          },
          {
            "term": "document",
            "tf": 10,
            "weight": 0.030581
          },
          {
            "term": "points",
            "tf": 8,
            "weight": 0.024465
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.024465
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.024465
          },
          {
            "term": "score",
            "tf": 7,
            "weight": 0.021407
          },
          {
            "term": "api",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "limit",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "payload",
            "tf": 5,
            "weight": 0.015291
          },
          {
            "term": "max",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "amount",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "size",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "hits",
            "tf": 4,
            "weight": 0.012232
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.009174
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.009174
          }
        ],
        "unique_terms": 144,
        "total_terms": 327
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Search groups",
        "client",
        "collection",
        "document",
        "group",
        "groups",
        "name",
        "points",
        "qdrant",
        "query",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6703517587939698,
      "overall": 0.7567839195979899
    }
  },
  {
    "text": "### Lookup in groups  Having multiple points for parts of the same item often introduces redundancy in the stored data. Which may be fine if the information shared by the points is small, but it can become a problem if the payload is large, because it multiplies the storage space needed to store the points by a factor of the amount of points we have per group. One way of optimizing storage when using groups is to store the information shared by the points with the same group id in a single point in another collection. Then, when using the [**groups** API](#grouping-api.md), add the `with_lookup` parameter to bring the information from those points into each group. Store only document-level metadata (e.g., titles, abstracts) in the lookup collection, not chunks or duplicated data. This has the extra benefit of having a single point to update when the information shared by the points in a group changes. For example, if you have a collection of documents, you may want to chunk them and store the points for the chunks in a separate collection, making sure that you store the point id from the document it belongs in the payload of the chunk point. In this case, to bring the information from the documents into the chunks grouped by the document id, you can use the `with_lookup` parameter: ```http POST /collections/chunks/points/query/groups {     // Same as in the regular query API     \"query\": [1.1],      // Grouping parameters     \"group_by\": \"document_id\",     \"limit\": 2,     \"group_size\": 2,      // Lookup parameters     \"with_lookup\": {         // Name of the collection to look up points in         \"collection\": \"documents\",          // Options for specifying what to bring from the payload          // of the looked up point, true by default         \"with_payload\": [\"title\", \"text\"],          // Options for specifying what to bring from the vector(s)          // of the looked up point, true by default         \"with_vectors\": false     } } ``` ```python client.query_points_groups(     collection_name=\"chunks\",     # Same as in the regular search() API     query=[1.1],     # Grouping parameters     group_by=\"document_id\",  # Path of the field to group by     limit=2,  # Max amount of groups     group_size=2,  # Max amount of points per group     # Lookup parameters     with_lookup=models.WithLookup(         # Name of the collection to look up points in         collection=\"documents\",         # Options for specifying what to bring from the payload         # of the looked up point, True by default         with_payload=[\"title\", \"text\"],         # Options for specifying what to bring from the vector(s)         # of the looked up point, True by default         with_vectors=False,     ), ) ``` ```typescript client.queryGroups(\"{collection_name}\", {     query: [1.1],     group_by: \"document_id\",     limit: 2,     group_size: 2,     with_lookup: {         collection: \"documents\",         with_payload: [\"title\", \"text\"],         with_vectors: false,     }, }); ``` ```rust use qdrant_client::qdrant::{with_payload_selector::SelectorOptions, QueryPointGroupsBuilder, WithLookupBuilder};  client     .query_groups(         QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")             .query(vec![0.2, 0.1, 0.9, 0.7])             .limit(2u64)             .limit(2u64)             .with_lookup(                 WithLookupBuilder::new(\"documents\")                     .with_payload(SelectorOptions::Include(                         vec![\"title\".to_string(), \"text\".to_string()].into(),                     ))                     .with_vectors(false),             ),     )     .await?; ``` ```java import java.util.List;  import io.qdrant.client.grpc.Points.QueryPointGroups; import io.qdrant.client.grpc.Points.WithLookup;  import static io.qdrant.client.QueryFactory.nearest; import static io.qdrant.client.WithVectorsSelectorFactory.enable; import static io.qdrant.client.WithPayloadSelectorFactory.include;  client.queryGroupsAsync(         QueryPointGroups.newBuilder()                 .setCollectionName(\"{collection_name}\")                 .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))                 .setGroupBy(\"document_id\")                 .setLimit(2)                 .setGroupSize(2)                 .setWithLookup(                         WithLookup.newBuilder()                                 .setCollection(\"documents\")                                 .setWithPayload(include(List.of(\"title\", \"text\")))                                 .setWithVectors(enable(false))                                 .build())                 .build())         .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.SearchGroupsAsync(     collectionName: \"{collection_name}\",     vector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f},     groupBy: \"document_id\",     limit: 2,     groupSize: 2,     withLookup: new WithLookup     {         Collection = \"documents\",         WithPayload = new WithPayloadSelector         {             Include = new PayloadIncludeSelector { Fields = { new string[] { \"title\", \"text\" } } }         },         WithVectors = false     } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.QueryGroups(context.Background(), &qdrant.QueryPointGroups{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7), \tGroupBy:        \"document_id\", \tGroupSize:      qdrant.PtrOf(uint64(2)), \tWithLookup: &qdrant.WithLookup{ \t\tCollection:  \"documents\", \t\tWithPayload: qdrant.NewWithPayloadInclude(\"title\", \"text\"), \t}, }) ``` For the `with_lookup` parameter, you can also use the shorthand `with_lookup=\"documents\"` to bring the whole payload and vector(s) without explicitly specifying it. The looked up result will show up under `lookup` in each group. ```json {     \"result\": {         \"groups\": [             {                 \"id\": 1,                 \"hits\": [                     { \"id\": 0, \"score\": 0.91 },                     { \"id\": 1, \"score\": 0.85 }                 ],                 \"lookup\": {                     \"id\": 1,                     \"payload\": {                         \"title\": \"Document A\",                         \"text\": \"This is document A\"                     }                 }             },             {                 \"id\": 2,                 \"hits\": [                     { \"id\": 1, \"score\": 0.85 }                 ],                 \"lookup\": {                     \"id\": 2,                     \"payload\": {                         \"title\": \"Document B\",                         \"text\": \"This is document B\"                     }                 }             }         ]     },     \"status\": \"ok\",     \"time\": 0.001 } ``` Since the lookup is done by matching directly with the point id, the lookup collection must be pre-populated with points where the `id` matches the `group_by` value (e.g., document\\_id) from your primary collection. Any group id that is not an existing (and valid) point id in the lookup collection will be ignored, and the `lookup` field will be empty.",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0021",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Lookup in groups"
      ],
      "heading_text": "Lookup in groups",
      "token_count": 1662,
      "char_count": 7199,
      "start_char": 61484,
      "end_char": 68683,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.63495091383812,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.113890",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1662,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Lookup in groups",
      "chunk_hash": "c35c65e0e015b16e",
      "content_digest": "c35c65e0e015b16e",
      "chunk_length": 7199,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "with",
          "collection",
          "lookup",
          "qdrant",
          "client",
          "points",
          "group",
          "document",
          "payload",
          "point",
          "documents",
          "query",
          "title",
          "text",
          "groups",
          "for",
          "from",
          "name",
          "new"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 53,
            "weight": 0.082043
          },
          {
            "term": "with",
            "tf": 20,
            "weight": 0.03096
          },
          {
            "term": "collection",
            "tf": 20,
            "weight": 0.03096
          },
          {
            "term": "lookup",
            "tf": 19,
            "weight": 0.029412
          },
          {
            "term": "qdrant",
            "tf": 18,
            "weight": 0.027864
          },
          {
            "term": "client",
            "tf": 17,
            "weight": 0.026316
          },
          {
            "term": "points",
            "tf": 16,
            "weight": 0.024768
          },
          {
            "term": "group",
            "tf": 15,
            "weight": 0.02322
          },
          {
            "term": "document",
            "tf": 15,
            "weight": 0.02322
          },
          {
            "term": "payload",
            "tf": 12,
            "weight": 0.018576
          },
          {
            "term": "point",
            "tf": 10,
            "weight": 0.01548
          },
          {
            "term": "documents",
            "tf": 10,
            "weight": 0.01548
          },
          {
            "term": "query",
            "tf": 9,
            "weight": 0.013932
          },
          {
            "term": "title",
            "tf": 9,
            "weight": 0.013932
          },
          {
            "term": "text",
            "tf": 9,
            "weight": 0.013932
          },
          {
            "term": "groups",
            "tf": 8,
            "weight": 0.012384
          },
          {
            "term": "for",
            "tf": 8,
            "weight": 0.012384
          },
          {
            "term": "from",
            "tf": 8,
            "weight": 0.012384
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.012384
          },
          {
            "term": "new",
            "tf": 8,
            "weight": 0.012384
          }
        ],
        "unique_terms": 216,
        "total_terms": 646
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Lookup in groups",
        "client",
        "collection",
        "document",
        "group",
        "lookup",
        "payload",
        "points",
        "qdrant",
        "the",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.63495091383812,
      "overall": 0.74498363794604
    }
  },
  {
    "text": "## Random Sampling  *Available as of v1.11.0*  In some cases it might be useful to retrieve a random sample of points from the collection. This can be useful for debugging, testing, or for providing entry points for exploration. Random sampling API is a part of [Universal Query API](#query-api.md) and can be used in the same way as regular search API. ```http POST /collections/{collection_name}/points/query {     \"query\": {         \"sample\": \"random\"     } } ``` ```python from qdrant_client import QdrantClient, models   sampled = client.query_points(     collection_name=\"{collection_name}\",     query=models.SampleQuery(sample=models.Sample.RANDOM) ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  const sampled = await client.query(\"{collection_name}\", {   query: {     sample: \"random\",   }, }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{Query, QueryPointsBuilder}; let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  let sampled = client     .query(         QueryPointsBuilder::new(\"{collection_name}\")             .query(Query::new_sample(Sample::Random))     )     .await?; ``` ```java import static io.qdrant.client.QueryFactory.sample;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.QueryPoints; import io.qdrant.client.grpc.Points.Sample;   QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());   client     .queryAsync(         QueryPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setQuery(sample(Sample.Random))             .build())     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(collectionName: \"{collection_name}\", query: Sample.Random); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.QueryGroups(context.Background(), &qdrant.QueryPointGroups{ \tCollectionName: \"{collection_name}\", \tQuery:          qdrant.NewQuerySample(qdrant.Sample_Random), }) ```",
    "metadata": {
      "chunk_id": "6d57e05f2a5b-0022",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "filename": "_documentation_concepts_search_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Random Sampling"
      ],
      "heading_text": "Random Sampling",
      "token_count": 576,
      "char_count": 2285,
      "start_char": 68702,
      "end_char": 70987,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6970149253731344,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.124956",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 576,
      "document_id": "6d57e05f2a5b",
      "document_name": "_documentation_concepts_search_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "source_filename": "_documentation_concepts_search_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
      "hierarchy_path": "Random Sampling",
      "chunk_hash": "940bd88959970be9",
      "content_digest": "940bd88959970be9",
      "chunk_length": 2285,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "query",
          "sample",
          "random",
          "collection",
          "name",
          "import",
          "qdrantclient",
          "points",
          "new",
          "localhost",
          "from",
          "api",
          "6334",
          "for",
          "models",
          "sampled",
          "await",
          "build"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 23,
            "weight": 0.095436
          },
          {
            "term": "qdrant",
            "tf": 21,
            "weight": 0.087137
          },
          {
            "term": "query",
            "tf": 14,
            "weight": 0.058091
          },
          {
            "term": "sample",
            "tf": 13,
            "weight": 0.053942
          },
          {
            "term": "random",
            "tf": 10,
            "weight": 0.041494
          },
          {
            "term": "collection",
            "tf": 9,
            "weight": 0.037344
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.033195
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.033195
          },
          {
            "term": "qdrantclient",
            "tf": 7,
            "weight": 0.029046
          },
          {
            "term": "points",
            "tf": 6,
            "weight": 0.024896
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.020747
          },
          {
            "term": "localhost",
            "tf": 5,
            "weight": 0.020747
          },
          {
            "term": "from",
            "tf": 4,
            "weight": 0.016598
          },
          {
            "term": "api",
            "tf": 4,
            "weight": 0.016598
          },
          {
            "term": "6334",
            "tf": 4,
            "weight": 0.016598
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.012448
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.012448
          },
          {
            "term": "sampled",
            "tf": 3,
            "weight": 0.012448
          },
          {
            "term": "await",
            "tf": 3,
            "weight": 0.012448
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.012448
          }
        ],
        "unique_terms": 85,
        "total_terms": 241
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Random Sampling",
        "client",
        "collection",
        "import",
        "name",
        "points",
        "qdrant",
        "qdrantclient",
        "query",
        "random",
        "sample"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6970149253731344,
      "overall": 0.7323383084577114
    }
  }
]