[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "ba8362985fcb-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1033,
      "end_char": 3001,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.646032",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "ba8362985fcb-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3683,
      "end_char": 5671,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.655648",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "ba8362985fcb-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5673,
      "end_char": 5984,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.657540",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 83,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "ba8362985fcb-0006",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6361,
      "end_char": 8329,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.669143",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "ba8362985fcb-0008",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9011,
      "end_char": 10999,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.681268",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "# Vectors\n\nVectors (or embeddings) are the core concept of the Qdrant Vector Search engine. Vectors define the similarity between objects in the vector space.\n\nIf a pair of vectors are similar in vector space, it means that the objects they represent are similar in some way.\n\nFor example, if you have a collection of images, you can represent each image as a vector. If two images are similar, their vectors will be close to each other in the vector space.\n\nIn order to obtain a vector representation of an object, you need to apply a vectorization algorithm to the object. Usually, this algorithm is a neural network that converts the object into a fixed-size vector.\n\nThe neural network is usually [trained](https://qdrant.tech/articles/metric-learning-tips/) on a pairs or [triplets](https://qdrant.tech/articles/triplet-loss/) of similar and dissimilar objects, so it learns to recognize a specific type of similarity.\n\nBy using this property of vectors, you can explore your data in a number of ways; e.g. by searching for similar objects, clustering objects, and more.",
    "metadata": {
      "chunk_id": "ba8362985fcb-0010",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Vectors"
      ],
      "heading_text": "Vectors",
      "token_count": 230,
      "char_count": 1075,
      "start_char": 11441,
      "end_char": 12516,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6649999999999999,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.685641",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 230,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Vectors",
      "chunk_hash": "f5e945fff11ea807",
      "content_digest": "f5e945fff11ea807",
      "chunk_length": 1075,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "vector",
          "vectors",
          "objects",
          "similar",
          "are",
          "you",
          "qdrant",
          "space",
          "object",
          "similarity",
          "that",
          "represent",
          "for",
          "images",
          "can",
          "each",
          "algorithm",
          "usually",
          "this"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 9,
            "weight": 0.066667
          },
          {
            "term": "vector",
            "tf": 7,
            "weight": 0.051852
          },
          {
            "term": "vectors",
            "tf": 6,
            "weight": 0.044444
          },
          {
            "term": "objects",
            "tf": 5,
            "weight": 0.037037
          },
          {
            "term": "similar",
            "tf": 5,
            "weight": 0.037037
          },
          {
            "term": "are",
            "tf": 4,
            "weight": 0.02963
          },
          {
            "term": "you",
            "tf": 4,
            "weight": 0.02963
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.022222
          },
          {
            "term": "space",
            "tf": 3,
            "weight": 0.022222
          },
          {
            "term": "object",
            "tf": 3,
            "weight": 0.022222
          },
          {
            "term": "similarity",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "represent",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "images",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "each",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "algorithm",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "usually",
            "tf": 2,
            "weight": 0.014815
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.014815
          }
        ],
        "unique_terms": 80,
        "total_terms": 135
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Vectors",
        "are",
        "object",
        "objects",
        "qdrant",
        "similar",
        "space",
        "the",
        "vector",
        "vectors",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6649999999999999,
      "overall": 0.7549999999999999
    }
  },
  {
    "text": "### Dense Vectors  This is the most common type of vector. It is a simple list of numbers, it has a fixed length and each element of the list is a floating-point number. It looks like this: ```json // A piece of a real-world dense vector [     -0.013052909,     0.020387933,     -0.007869,     -0.11111383,     -0.030188112,     -0.0053388323,     0.0010654867,     0.072027855,     -0.04167721,     0.014839341,     -0.032948174,     -0.062975034,     -0.024837125,     .... ] ``` The majority of neural networks create dense vectors, so you can use them with Qdrant without any additional processing. Although compatible with most embedding models out there, Qdrant has been tested with the following [verified embedding providers](https://qdrant.tech/documentation/embeddings/).",
    "metadata": {
      "chunk_id": "ba8362985fcb-0012",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Dense Vectors"
      ],
      "heading_text": "Dense Vectors",
      "token_count": 222,
      "char_count": 781,
      "start_char": 12718,
      "end_char": 13499,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.518,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.688887",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 222,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Dense Vectors",
      "chunk_hash": "6fc471f3cb3b2034",
      "content_digest": "6fc471f3cb3b2034",
      "chunk_length": 781,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "dense",
          "with",
          "qdrant",
          "vectors",
          "this",
          "most",
          "vector",
          "list",
          "has",
          "embedding",
          "common",
          "type",
          "simple",
          "numbers",
          "fixed",
          "length",
          "and",
          "each",
          "element"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 4,
            "weight": 0.047619
          },
          {
            "term": "dense",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "most",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "list",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "has",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "embedding",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "common",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "numbers",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "fixed",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "length",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "each",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "element",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 68,
        "total_terms": 84
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Dense Vectors",
        "dense",
        "has",
        "list",
        "most",
        "qdrant",
        "the",
        "this",
        "vector",
        "vectors",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.518,
      "overall": 0.6726666666666666
    }
  },
  {
    "text": "### Multivectors  **Available as of v1.10.0**  Qdrant supports the storing of a variable amount of same-shaped dense vectors in a single point. This means that instead of a single dense vector, you can upload a matrix of dense vectors. The length of the matrix is fixed, but the number of vectors in the matrix can be different for each point. Multivectors look like this: ```json // A multivector of size 4 \"vector\": [     [-0.013,  0.020, -0.007, -0.111],     [-0.030, -0.055,  0.001,  0.072],     [-0.041,  0.014, -0.032, -0.062],     .... ] ``` There are two scenarios where multivectors are useful:  - **Multiple representation of the same object** - For example, you can store multiple embeddings for pictures of the same object, taken from different angles. This approach assumes that the payload is same for all vectors. - **Late interaction embeddings** - Some text embedding models can output multiple vectors for a single text. For example, a family of models such as ColBERT output a relatively small vector for each token in the text. In order to use multivectors, we need to specify a function that will be used to compare between matrices of vectors  Currently, Qdrant supports `max_sim` function, which is defined as a sum of maximum similarities between each pair of vectors in the matrices. $$ score = \\sum\\_{i=1}^{N} \\max\\_{j=1}^{M} \\text{Sim}(\\text{vectorA}\\_i, \\text{vectorB}\\_j) $$  Where $N$ is the number of vectors in the first matrix, $M$ is the number of vectors in the second matrix, and $\\text{Sim}$ is a similarity function, for example, cosine similarity. To use multivectors, create a collection with the following configuration: ```http PUT collections/{collection_name} {   \"vectors\": {     \"size\": 128,     \"distance\": \"Cosine\",     \"multivector_config\": {       \"comparator\": \"max_sim\"     }   } } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.create_collection(     collection_name=\"{collection_name}\",     vectors_config=models.VectorParams(         size=128,         distance=models.Distance.COSINE,         multivector_config=models.MultiVectorConfig(             comparator=models.MultiVectorComparator.MAX_SIM         ),     ), ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.createCollection(\"{collection_name}\", {   vectors: {     size: 128,     distance: \"Cosine\",     multivector_config: {       comparator: \"max_sim\"     }   }, }); ``` ```rust use qdrant_client::qdrant::{     CreateCollectionBuilder, Distance, VectorParamsBuilder,     MultiVectorComparator, MultiVectorConfigBuilder, }; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .create_collection(         CreateCollectionBuilder::new(\"{collection_name}\")             .vectors_config(                 VectorParamsBuilder::new(100, Distance::Cosine)                     .multivector_config(                         MultiVectorConfigBuilder::new(MultiVectorComparator::MaxSim)                     ),             ),     )     .await?; ``` ```java import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Collections.Distance; import io.qdrant.client.grpc.Collections.MultiVectorComparator; import io.qdrant.client.grpc.Collections.MultiVectorConfig; import io.qdrant.client.grpc.Collections.VectorParams;  QdrantClient client =   new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.createCollectionAsync(\"{collection_name}\",   VectorParams.newBuilder().setSize(128)   .setDistance(Distance.Cosine)   .setMultivectorConfig(MultiVectorConfig.newBuilder()     .setComparator(MultiVectorComparator.MaxSim)     .build())   .build()).get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.CreateCollectionAsync(   collectionName: \"{collection_name}\",   vectorsConfig: new VectorParams {     Size = 128,       Distance = Distance.Cosine,       MultivectorConfig = new() {         Comparator = MultiVectorComparator.MaxSim       }   } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.CreateCollection(context.Background(), &qdrant.CreateCollection{ \tCollectionName: \"{collection_name}\", \tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{ \t\tSize:     128, \t\tDistance: qdrant.Distance_Cosine, \t\tMultivectorConfig: &qdrant.MultiVectorConfig{ \t\t\tComparator: qdrant.MultiVectorComparator_MaxSim, \t\t}, \t}), }) ``` To insert a point with multivector: ```http PUT collections/{collection_name}/points {   \"points\": [     {       \"id\": 1,       \"vector\": [         [-0.013,  0.020, -0.007, -0.111, ...],         [-0.030, -0.055,  0.001,  0.072, ...],         [-0.041,  0.014, -0.032, -0.062, ...]       ]     }   ] } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.upsert(     collection_name=\"{collection_name}\",     points=[         models.PointStruct(             id=1,             vector=[                 [-0.013,  0.020, -0.007, -0.111],                 [-0.030, -0.055,  0.001,  0.072],                 [-0.041,  0.014, -0.032, -0.062]             ],         )     ], ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.upsert(\"{collection_name}\", {   points: [     {       id: 1,       vector: [         [-0.013,  0.020, -0.007, -0.111, ...],         [-0.030, -0.055,  0.001,  0.072, ...],         [-0.041,  0.014, -0.032, -0.062, ...]       ],     }   ] }); ``` ```rust use qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder, Vector}; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  let points = vec![     PointStruct::new(         1,         Vector::new_multi(vec![             vec![-0.013, 0.020, -0.007, -0.111],             vec![-0.030, -0.055, 0.001, 0.072],             vec![-0.041, 0.014, -0.032, -0.062],         ]),         Payload::new()     ) ];  client     .upsert_points(         UpsertPointsBuilder::new(\"{collection_name}\", points)     ).await?; ``` ```java import java.util.List;  import static io.qdrant.client.PointIdFactory.id; import static io.qdrant.client.VectorsFactory.vectors; import static io.qdrant.client.VectorFactory.multiVector;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.PointStruct;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client .upsertAsync(     \"{collection_name}\",     List.of(         PointStruct.newBuilder()             .setId(id(1))             .setVectors(vectors(multiVector(new float[][] {                 {-0.013f,  0.020f, -0.007f, -0.111f},                 {-0.030f, -0.055f,  0.001f,  0.072f},                 {-0.041f,  0.014f, -0.032f, -0.062f}             })))             .build()     )) .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.UpsertAsync(   collectionName: \"{collection_name}\",   points: new List <PointStruct> {     new() {       Id = 1,         Vectors = new float[][] {           [-0.013f, 0.020f, -0.007f, -0.111f],           [-0.030f, -0.05f, 0.001f, 0.072f],           [-0.041f, 0.014f, -0.032f, -0.062f ],         },     },   } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Upsert(context.Background(), &qdrant.UpsertPoints{ \tCollectionName: \"{collection_name}\", \tPoints: []*qdrant.PointStruct{ \t\t{ \t\t\tId: qdrant.NewIDNum(1), \t\t\tVectors: qdrant.NewVectorsMulti( \t\t\t\t[][]float32{ \t\t\t\t\t{-0.013, 0.020, -0.007, -0.111}, \t\t\t\t\t{-0.030, -0.055, 0.001, 0.072}, \t\t\t\t\t{-0.041, 0.014, -0.032, -0.062}}), \t\t}, \t}, }) ``` To search with multivector (available in `query` API): ```http POST collections/{collection_name}/points/query {   \"query\": [     [-0.013,  0.020, -0.007, -0.111, ...],     [-0.030, -0.055,  0.001,  0.072, ...],     [-0.041,  0.014, -0.032, -0.062, ...]   ] } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.query_points(     collection_name=\"{collection_name}\",     query=[         [-0.013,  0.020, -0.007, -0.111],         [-0.030, -0.055,  0.001,  0.072],         [-0.041,  0.014, -0.032, -0.062]     ], ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {   \"query\": [     [-0.013, 0.020, -0.007, -0.111],     [-0.030, -0.055, 0.001, 0.072],     [-0.041, 0.014, -0.032, -0.062]   ] }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{ QueryPointsBuilder, VectorInput };  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  let res = client.query(     QueryPointsBuilder::new(\"{collection_name}\")         .query(VectorInput::new_multi(             vec![                 vec![-0.013,  0.020, -0.007, -0.111],                 vec![-0.030, -0.055,  0.001,  0.072],                 vec![-0.041,  0.014, -0.032, -0.062],             ]         )) ).await?; ``` ```java import static io.qdrant.client.QueryFactory.nearest;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.QueryPoints;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(QueryPoints.newBuilder()     .setCollectionName(\"{collection_name}\")     .setQuery(nearest(new float[][] {         {-0.013f, 0.020f, -0.007f, -0.111f},          {-0.030f, -0.055f, 0.001f, 0.072f},          {-0.041f, 0.014f, -0.032f, -0.062f}     }))     .build()).get(); ``` ```csharp using Qdrant.Client;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(   collectionName: \"{collection_name}\",   query: new float[][] {     [-0.013f, 0.020f, -0.007f, -0.111f],     [-0.030f, -0.055f, 0.001 , 0.072f],     [-0.041f, 0.014f, -0.032f, -0.062f],   } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery: qdrant.NewQueryMulti( \t\t[][]float32{ \t\t\t{-0.013, 0.020, -0.007, -0.111}, \t\t\t{-0.030, -0.055, 0.001, 0.072}, \t\t\t{-0.041, 0.014, -0.032, -0.062}, \t\t}), }) ```",
    "metadata": {
      "chunk_id": "ba8362985fcb-0014",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Multivectors"
      ],
      "heading_text": "Multivectors",
      "token_count": 3356,
      "char_count": 10882,
      "start_char": 22808,
      "end_char": 33690,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6077598385469223,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.741104",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 3356,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Multivectors",
      "chunk_hash": "ca5cbf30ef6ad1fa",
      "content_digest": "ca5cbf30ef6ad1fa",
      "chunk_length": 10882,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "collection",
          "import",
          "new",
          "name",
          "qdrantclient",
          "localhost",
          "vectors",
          "the",
          "points",
          "001",
          "distance",
          "6334",
          "query",
          "013",
          "020",
          "007",
          "111",
          "030"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 72,
            "weight": 0.068966
          },
          {
            "term": "qdrant",
            "tf": 68,
            "weight": 0.065134
          },
          {
            "term": "collection",
            "tf": 27,
            "weight": 0.025862
          },
          {
            "term": "import",
            "tf": 26,
            "weight": 0.024904
          },
          {
            "term": "new",
            "tf": 26,
            "weight": 0.024904
          },
          {
            "term": "name",
            "tf": 24,
            "weight": 0.022989
          },
          {
            "term": "qdrantclient",
            "tf": 24,
            "weight": 0.022989
          },
          {
            "term": "localhost",
            "tf": 18,
            "weight": 0.017241
          },
          {
            "term": "vectors",
            "tf": 17,
            "weight": 0.016284
          },
          {
            "term": "the",
            "tf": 15,
            "weight": 0.014368
          },
          {
            "term": "points",
            "tf": 13,
            "weight": 0.012452
          },
          {
            "term": "001",
            "tf": 12,
            "weight": 0.011494
          },
          {
            "term": "distance",
            "tf": 12,
            "weight": 0.011494
          },
          {
            "term": "6334",
            "tf": 12,
            "weight": 0.011494
          },
          {
            "term": "query",
            "tf": 12,
            "weight": 0.011494
          },
          {
            "term": "013",
            "tf": 11,
            "weight": 0.010536
          },
          {
            "term": "020",
            "tf": 11,
            "weight": 0.010536
          },
          {
            "term": "007",
            "tf": 11,
            "weight": 0.010536
          },
          {
            "term": "111",
            "tf": 11,
            "weight": 0.010536
          },
          {
            "term": "030",
            "tf": 11,
            "weight": 0.010536
          }
        ],
        "unique_terms": 218,
        "total_terms": 1044
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Multivectors",
        "client",
        "collection",
        "import",
        "localhost",
        "name",
        "new",
        "qdrant",
        "qdrantclient",
        "the",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6077598385469223,
      "overall": 0.7025866128489741
    }
  },
  {
    "text": "## Quantization\n\nApart from changing the datatype of the original vectors, Qdrant can create quantized representations of vectors alongside the original ones. This quantized representation can be used to quickly select candidates for rescoring with the original vectors or even used directly for search.\n\nQuantization is applied in the background, during the optimization process.\n\nMore information about the quantization process can be found in the [Quantization](https://qdrant.tech/documentation/guides/quantization/) section.",
    "metadata": {
      "chunk_id": "ba8362985fcb-0017",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Quantization"
      ],
      "heading_text": "Quantization",
      "token_count": 99,
      "char_count": 529,
      "start_char": 56508,
      "end_char": 57037,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7004477611940298,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:16.819809",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 99,
      "document_id": "ba8362985fcb",
      "document_name": "_documentation_concepts_vectors_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_filename": "_documentation_concepts_vectors_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "hierarchy_path": "Quantization",
      "chunk_hash": "9ace86b1f02bb020",
      "content_digest": "9ace86b1f02bb020",
      "chunk_length": 529,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "quantization",
          "original",
          "vectors",
          "can",
          "qdrant",
          "quantized",
          "used",
          "for",
          "process",
          "apart",
          "from",
          "changing",
          "datatype",
          "create",
          "representations",
          "alongside",
          "ones",
          "this",
          "representation"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 8,
            "weight": 0.126984
          },
          {
            "term": "quantization",
            "tf": 5,
            "weight": 0.079365
          },
          {
            "term": "original",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "quantized",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "used",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "process",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "apart",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "changing",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "datatype",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "create",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "representations",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "alongside",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "ones",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "representation",
            "tf": 1,
            "weight": 0.015873
          }
        ],
        "unique_terms": 41,
        "total_terms": 63
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Quantization",
        "can",
        "for",
        "original",
        "process",
        "qdrant",
        "quantization",
        "quantized",
        "the",
        "used",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7004477611940298,
      "overall": 0.7668159203980099
    }
  }
]