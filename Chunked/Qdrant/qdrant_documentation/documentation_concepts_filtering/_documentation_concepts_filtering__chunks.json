[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1035,
      "end_char": 3003,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.388338",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3685,
      "end_char": 5673,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.398075",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5675,
      "end_char": 5986,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.399628",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 83,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0006",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6363,
      "end_char": 8331,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.407658",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0008",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9013,
      "end_char": 11001,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.415485",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "# Filtering\n\nWith Qdrant, you can set conditions when searching or retrieving points. For example, you can impose conditions on both the [payload](https://qdrant.tech/documentation/concepts/payload/) and the `id` of the point.\n\nSetting additional conditions is important when it is impossible to express all the features of the object in the embedding. Examples include a variety of business requirements: stock availability, user location, or desired price range.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0010",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Filtering"
      ],
      "heading_text": "Filtering",
      "token_count": 92,
      "char_count": 464,
      "start_char": 11445,
      "end_char": 11909,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.524375,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.418118",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 92,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Filtering",
      "chunk_hash": "1a31c59a53d55000",
      "content_digest": "1a31c59a53d55000",
      "chunk_length": 464,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "conditions",
          "qdrant",
          "you",
          "can",
          "when",
          "payload",
          "filtering",
          "with",
          "set",
          "searching",
          "retrieving",
          "points",
          "for",
          "example",
          "impose",
          "both",
          "https",
          "tech",
          "documentation"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 6,
            "weight": 0.107143
          },
          {
            "term": "conditions",
            "tf": 3,
            "weight": 0.053571
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "when",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "filtering",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "set",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "searching",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "retrieving",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "points",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "example",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "impose",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "both",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "tech",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "documentation",
            "tf": 1,
            "weight": 0.017857
          }
        ],
        "unique_terms": 44,
        "total_terms": 56
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Filtering",
        "can",
        "conditions",
        "filtering",
        "payload",
        "qdrant",
        "set",
        "the",
        "when",
        "with",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.524375,
      "overall": 0.7081249999999999
    }
  },
  {
    "text": "## Related Content  | [A Complete Guide to Filtering in Vector Search](https://qdrant.tech/articles/vector-search-filtering/) | Developer advice on proper usage and advanced practices. | | ------------------------------------------------------------------------------------------------------- | -------------------------------------------------------- |",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0011",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Related Content"
      ],
      "heading_text": "Related Content",
      "token_count": 45,
      "char_count": 353,
      "start_char": 11911,
      "end_char": 12264,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5344444444444444,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.418487",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 45,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Related Content",
      "chunk_hash": "23f9295954cc451d",
      "content_digest": "23f9295954cc451d",
      "chunk_length": 353,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "filtering",
          "vector",
          "search",
          "related",
          "content",
          "complete",
          "guide",
          "https",
          "qdrant",
          "tech",
          "articles",
          "developer",
          "advice",
          "proper",
          "usage",
          "and",
          "advanced",
          "practices"
        ],
        "term_weights": [
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.095238
          },
          {
            "term": "vector",
            "tf": 2,
            "weight": 0.095238
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.095238
          },
          {
            "term": "related",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "content",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "complete",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "guide",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "qdrant",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "tech",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "articles",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "developer",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "advice",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "proper",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "usage",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "advanced",
            "tf": 1,
            "weight": 0.047619
          },
          {
            "term": "practices",
            "tf": 1,
            "weight": 0.047619
          }
        ],
        "unique_terms": 18,
        "total_terms": 21
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Related Content",
        "complete",
        "content",
        "filtering",
        "guide",
        "https",
        "qdrant",
        "related",
        "search",
        "tech",
        "vector"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5344444444444444,
      "overall": 0.7114814814814814
    }
  },
  {
    "text": "### Must  Example: ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"must\": [             { \"key\": \"city\", \"match\": { \"value\": \"London\" } },             { \"key\": \"color\", \"match\": { \"value\": \"red\" } }         ]     }     ... } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must=[             models.FieldCondition(                 key=\"city\",                 match=models.MatchValue(value=\"London\"),             ),             models.FieldCondition(                 key=\"color\",                 match=models.MatchValue(value=\"red\"),             ),         ]     ), ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.scroll(\"{collection_name}\", {   filter: {     must: [       {         key: \"city\",         match: { value: \"London\" },       },       {         key: \"color\",         match: { value: \"red\" },       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder}; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([             Condition::matches(\"city\", \"london\".to_string()),             Condition::matches(\"color\", \"red\".to_string()),         ])),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.matchKeyword;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addAllMust(                         List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  // & operator combines two conditions in an AND conjunction(must) await client.ScrollAsync( \tcollectionName: \"{collection_name}\", \tfilter: MatchKeyword(\"city\", \"London\") & MatchKeyword(\"color\", \"red\") ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMust: []*qdrant.Condition{ \t\t\tqdrant.NewMatch(\"city\", \"London\"), \t\t\tqdrant.NewMatch(\"color\", \"red\"), \t\t}, \t}, }) ``` Filtered points would be: ```json [{ \"id\": 2, \"city\": \"London\", \"color\": \"red\" }] ``` When using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied. In this sense, `must` is equivalent to the operator `AND`.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0013",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Must"
      ],
      "heading_text": "Must",
      "token_count": 829,
      "char_count": 3283,
      "start_char": 12958,
      "end_char": 16241,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8932584269662922,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.428310",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 829,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Must",
      "chunk_hash": "5215bf77b5aa7213",
      "content_digest": "5215bf77b5aa7213",
      "chunk_length": 3283,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "filter",
          "must",
          "import",
          "collection",
          "name",
          "city",
          "london",
          "color",
          "red",
          "qdrantclient",
          "scroll",
          "key",
          "match",
          "value",
          "models",
          "localhost",
          "condition",
          "matchkeyword"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 24,
            "weight": 0.07947
          },
          {
            "term": "qdrant",
            "tf": 23,
            "weight": 0.076159
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.039735
          },
          {
            "term": "must",
            "tf": 10,
            "weight": 0.033113
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.029801
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "city",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "london",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "color",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "red",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.02649
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "match",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "value",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "models",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.019868
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.016556
          },
          {
            "term": "matchkeyword",
            "tf": 5,
            "weight": 0.016556
          }
        ],
        "unique_terms": 95,
        "total_terms": 302
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Must",
        "city",
        "client",
        "collection",
        "color",
        "filter",
        "import",
        "london",
        "must",
        "name",
        "qdrant"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8932584269662922,
      "overall": 0.8310861423220973
    }
  },
  {
    "text": "### Should  Example: ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"should\": [             { \"key\": \"city\", \"match\": { \"value\": \"London\" } },             { \"key\": \"color\", \"match\": { \"value\": \"red\" } }         ]     } } ``` ```python client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         should=[             models.FieldCondition(                 key=\"city\",                 match=models.MatchValue(value=\"London\"),             ),             models.FieldCondition(                 key=\"color\",                 match=models.MatchValue(value=\"red\"),             ),         ]     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     should: [       {         key: \"city\",         match: { value: \"London\" },       },       {         key: \"color\",         match: { value: \"red\" },       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder}; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::should([             Condition::matches(\"city\", \"london\".to_string()),             Condition::matches(\"color\", \"red\".to_string()),         ])),     )     .await?; ``` ```java import static io.qdrant.client.ConditionFactory.matchKeyword;  import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints; import java.util.List;  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addAllShould(                         List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  // | operator combines two conditions in an OR disjunction(should) await client.ScrollAsync( \tcollectionName: \"{collection_name}\", \tfilter: MatchKeyword(\"city\", \"London\") | MatchKeyword(\"color\", \"red\") ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tShould: []*qdrant.Condition{ \t\t\tqdrant.NewMatch(\"city\", \"London\"), \t\t\tqdrant.NewMatch(\"color\", \"red\"), \t\t}, \t}, }) ``` Filtered points would be: ```json [   { \"id\": 1, \"city\": \"London\", \"color\": \"green\" },   { \"id\": 2, \"city\": \"London\", \"color\": \"red\" },   { \"id\": 3, \"city\": \"London\", \"color\": \"blue\" },   { \"id\": 4, \"city\": \"Berlin\", \"color\": \"red\" } ] ``` When using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied. In this sense, `should` is equivalent to the operator `OR`.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0014",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Should"
      ],
      "heading_text": "Should",
      "token_count": 772,
      "char_count": 3037,
      "start_char": 16253,
      "end_char": 19290,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8883720930232559,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.441650",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 772,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Should",
      "chunk_hash": "3e8ee9f1befec2a3",
      "content_digest": "3e8ee9f1befec2a3",
      "chunk_length": 3037,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "filter",
          "city",
          "color",
          "should",
          "london",
          "red",
          "collection",
          "name",
          "scroll",
          "key",
          "match",
          "value",
          "models",
          "condition",
          "import",
          "matchkeyword",
          "points",
          "localhost"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.070896
          },
          {
            "term": "client",
            "tf": 17,
            "weight": 0.063433
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.044776
          },
          {
            "term": "city",
            "tf": 11,
            "weight": 0.041045
          },
          {
            "term": "color",
            "tf": 11,
            "weight": 0.041045
          },
          {
            "term": "should",
            "tf": 10,
            "weight": 0.037313
          },
          {
            "term": "london",
            "tf": 10,
            "weight": 0.037313
          },
          {
            "term": "red",
            "tf": 9,
            "weight": 0.033582
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.029851
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.029851
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.022388
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.022388
          },
          {
            "term": "match",
            "tf": 6,
            "weight": 0.022388
          },
          {
            "term": "value",
            "tf": 6,
            "weight": 0.022388
          },
          {
            "term": "models",
            "tf": 5,
            "weight": 0.018657
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.018657
          },
          {
            "term": "import",
            "tf": 5,
            "weight": 0.018657
          },
          {
            "term": "matchkeyword",
            "tf": 5,
            "weight": 0.018657
          },
          {
            "term": "points",
            "tf": 4,
            "weight": 0.014925
          },
          {
            "term": "localhost",
            "tf": 3,
            "weight": 0.011194
          }
        ],
        "unique_terms": 92,
        "total_terms": 268
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Should",
        "city",
        "client",
        "collection",
        "color",
        "filter",
        "london",
        "name",
        "qdrant",
        "red",
        "should"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8883720930232559,
      "overall": 0.8294573643410853
    }
  },
  {
    "text": "### Must Not  Example: ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"must_not\": [             { \"key\": \"city\", \"match\": { \"value\": \"London\" } },             { \"key\": \"color\", \"match\": { \"value\": \"red\" } }         ]     } } ``` ```python client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must_not=[             models.FieldCondition(key=\"city\", match=models.MatchValue(value=\"London\")),             models.FieldCondition(key=\"color\", match=models.MatchValue(value=\"red\")),         ]     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     must_not: [       {         key: \"city\",         match: { value: \"London\" },       },       {         key: \"color\",         match: { value: \"red\" },       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder}; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must_not([             Condition::matches(\"city\", \"london\".to_string()),             Condition::matches(\"color\", \"red\".to_string()),         ])),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.matchKeyword;  import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addAllMustNot(                         List.of(matchKeyword(\"city\", \"London\"), matchKeyword(\"color\", \"red\")))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  // The ! operator negates the condition(must not) await client.ScrollAsync( \tcollectionName: \"{collection_name}\", \tfilter: !(MatchKeyword(\"city\", \"London\") & MatchKeyword(\"color\", \"red\")) ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMustNot: []*qdrant.Condition{ \t\t\tqdrant.NewMatch(\"city\", \"London\"), \t\t\tqdrant.NewMatch(\"color\", \"red\"), \t\t}, \t}, }) ``` Filtered points would be: ```json [   { \"id\": 5, \"city\": \"Moscow\", \"color\": \"green\" },   { \"id\": 6, \"city\": \"Moscow\", \"color\": \"blue\" } ] ``` When using `must_not`, the clause becomes `true` if none of the conditions listed inside `must_not` is satisfied. In this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0015",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Must Not"
      ],
      "heading_text": "Must Not",
      "token_count": 744,
      "char_count": 2881,
      "start_char": 19302,
      "end_char": 22183,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9004098360655739,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.451773",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 744,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Must Not",
      "chunk_hash": "40d0fee0378af697",
      "content_digest": "40d0fee0378af697",
      "chunk_length": 2881,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "not",
          "filter",
          "must",
          "city",
          "color",
          "collection",
          "name",
          "london",
          "red",
          "scroll",
          "key",
          "match",
          "value",
          "models",
          "condition",
          "import",
          "matchkeyword",
          "the"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.069343
          },
          {
            "term": "client",
            "tf": 17,
            "weight": 0.062044
          },
          {
            "term": "not",
            "tf": 12,
            "weight": 0.043796
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.043796
          },
          {
            "term": "must",
            "tf": 9,
            "weight": 0.032847
          },
          {
            "term": "city",
            "tf": 9,
            "weight": 0.032847
          },
          {
            "term": "color",
            "tf": 9,
            "weight": 0.032847
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.029197
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.029197
          },
          {
            "term": "london",
            "tf": 7,
            "weight": 0.025547
          },
          {
            "term": "red",
            "tf": 7,
            "weight": 0.025547
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.021898
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.021898
          },
          {
            "term": "match",
            "tf": 6,
            "weight": 0.021898
          },
          {
            "term": "value",
            "tf": 6,
            "weight": 0.021898
          },
          {
            "term": "models",
            "tf": 5,
            "weight": 0.018248
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.018248
          },
          {
            "term": "import",
            "tf": 5,
            "weight": 0.018248
          },
          {
            "term": "matchkeyword",
            "tf": 5,
            "weight": 0.018248
          },
          {
            "term": "the",
            "tf": 5,
            "weight": 0.018248
          }
        ],
        "unique_terms": 93,
        "total_terms": 274
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Must Not",
        "city",
        "client",
        "collection",
        "color",
        "filter",
        "london",
        "must",
        "name",
        "not",
        "qdrant"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9004098360655739,
      "overall": 0.8334699453551911
    }
  },
  {
    "text": "### Clauses combination  It is also possible to use several clauses simultaneously: ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"must\": [             { \"key\": \"city\", \"match\": { \"value\": \"London\" } }         ],         \"must_not\": [             { \"key\": \"color\", \"match\": { \"value\": \"red\" } }         ]     } } ``` ```python client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must=[             models.FieldCondition(key=\"city\", match=models.MatchValue(value=\"London\")),         ],         must_not=[             models.FieldCondition(key=\"color\", match=models.MatchValue(value=\"red\")),         ],     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     must: [       {         key: \"city\",         match: { value: \"London\" },       },     ],     must_not: [       {         key: \"color\",         match: { value: \"red\" },       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};  client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter {             must: vec![Condition::matches(\"city\", \"London\".to_string())],             must_not: vec![Condition::matches(\"color\", \"red\".to_string())],             ..Default::default()         }),     )     .await?; ``` ```java import static io.qdrant.client.ConditionFactory.matchKeyword;  import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addMust(matchKeyword(\"city\", \"London\"))                     .addMustNot(matchKeyword(\"color\", \"red\"))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.ScrollAsync( \tcollectionName: \"{collection_name}\", \tfilter: MatchKeyword(\"city\", \"London\") & !MatchKeyword(\"color\", \"red\") ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMust: []*qdrant.Condition{ \t\t\tqdrant.NewMatch(\"city\", \"London\"), \t\t}, \t\tMustNot: []*qdrant.Condition{ \t\t\tqdrant.NewMatch(\"color\", \"red\"), \t\t}, \t}, }) ``` Filtered points would be: ```json [   { \"id\": 1, \"city\": \"London\", \"color\": \"green\" },   { \"id\": 3, \"city\": \"London\", \"color\": \"blue\" } ] ``` In this case, the conditions are combined by `AND`. Also, the conditions could be recursively nested. Example: ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"must_not\": [             {                 \"must\": [                     { \"key\": \"city\", \"match\": { \"value\": \"London\" } },                     { \"key\": \"color\", \"match\": { \"value\": \"red\" } }                 ]             }         ]     } } ``` ```python client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must_not=[             models.Filter(                 must=[                     models.FieldCondition(                         key=\"city\", match=models.MatchValue(value=\"London\")                     ),                     models.FieldCondition(                         key=\"color\", match=models.MatchValue(value=\"red\")                     ),                 ],             ),         ],     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     must_not: [       {         must: [           {             key: \"city\",             match: { value: \"London\" },           },           {             key: \"color\",             match: { value: \"red\" },           },         ],       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};  client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must_not([Filter::must(             [                 Condition::matches(\"city\", \"London\".to_string()),                 Condition::matches(\"color\", \"red\".to_string()),             ],         )         .into()])),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.filter; import static io.qdrant.client.ConditionFactory.matchKeyword;  import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addMustNot(                         filter(                             Filter.newBuilder()                                 .addAllMust(                                     List.of(                                         matchKeyword(\"city\", \"London\"),                                         matchKeyword(\"color\", \"red\")))                                 .build()))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.ScrollAsync( \tcollectionName: \"{collection_name}\", \tfilter: new Filter { MustNot = { MatchKeyword(\"city\", \"London\") & MatchKeyword(\"color\", \"red\") } } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMustNot: []*qdrant.Condition{ \t\t\tqdrant.NewFilterAsCondition(&qdrant.Filter{ \t\t\t\tMust: []*qdrant.Condition{ \t\t\t\t\tqdrant.NewMatch(\"city\", \"London\"), \t\t\t\t\tqdrant.NewMatch(\"color\", \"red\"), \t\t\t\t}, \t\t\t}), \t\t}, \t}, }) ``` Filtered points would be: ```json [   { \"id\": 1, \"city\": \"London\", \"color\": \"green\" },   { \"id\": 3, \"city\": \"London\", \"color\": \"blue\" },   { \"id\": 4, \"city\": \"Berlin\", \"color\": \"red\" },   { \"id\": 5, \"city\": \"Moscow\", \"color\": \"green\" },   { \"id\": 6, \"city\": \"Moscow\", \"color\": \"blue\" } ] ```",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0016",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Clauses combination"
      ],
      "heading_text": "Clauses combination",
      "token_count": 1545,
      "char_count": 6372,
      "start_char": 22195,
      "end_char": 28567,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6472505070993915,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.487499",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1545,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Clauses combination",
      "chunk_hash": "b6d1a6ffa6c3923b",
      "content_digest": "b6d1a6ffa6c3923b",
      "chunk_length": 6372,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "filter",
          "city",
          "color",
          "must",
          "london",
          "collection",
          "name",
          "red",
          "scroll",
          "key",
          "match",
          "value",
          "models",
          "condition",
          "import",
          "matchkeyword",
          "points",
          "not"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 38,
            "weight": 0.073077
          },
          {
            "term": "client",
            "tf": 32,
            "weight": 0.061538
          },
          {
            "term": "filter",
            "tf": 31,
            "weight": 0.059615
          },
          {
            "term": "city",
            "tf": 21,
            "weight": 0.040385
          },
          {
            "term": "color",
            "tf": 21,
            "weight": 0.040385
          },
          {
            "term": "must",
            "tf": 18,
            "weight": 0.034615
          },
          {
            "term": "london",
            "tf": 18,
            "weight": 0.034615
          },
          {
            "term": "collection",
            "tf": 16,
            "weight": 0.030769
          },
          {
            "term": "name",
            "tf": 16,
            "weight": 0.030769
          },
          {
            "term": "red",
            "tf": 15,
            "weight": 0.028846
          },
          {
            "term": "scroll",
            "tf": 12,
            "weight": 0.023077
          },
          {
            "term": "key",
            "tf": 12,
            "weight": 0.023077
          },
          {
            "term": "match",
            "tf": 12,
            "weight": 0.023077
          },
          {
            "term": "value",
            "tf": 12,
            "weight": 0.023077
          },
          {
            "term": "models",
            "tf": 11,
            "weight": 0.021154
          },
          {
            "term": "condition",
            "tf": 10,
            "weight": 0.019231
          },
          {
            "term": "import",
            "tf": 10,
            "weight": 0.019231
          },
          {
            "term": "matchkeyword",
            "tf": 10,
            "weight": 0.019231
          },
          {
            "term": "points",
            "tf": 8,
            "weight": 0.015385
          },
          {
            "term": "not",
            "tf": 8,
            "weight": 0.015385
          }
        ],
        "unique_terms": 96,
        "total_terms": 520
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Clauses combination",
        "city",
        "client",
        "collection",
        "color",
        "filter",
        "london",
        "must",
        "name",
        "qdrant",
        "red"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6472505070993915,
      "overall": 0.7157501690331305
    }
  },
  {
    "text": "### Match ```json {   \"key\": \"color\",   \"match\": {     \"value\": \"red\"   } } ``` ```python models.FieldCondition(     key=\"color\",     match=models.MatchValue(value=\"red\"), ) ``` ```typescript {     key: 'color',      match: {value: 'red'} } ``` ```rust Condition::matches(\"color\", \"red\".to_string()) ``` ```java matchKeyword(\"color\", \"red\"); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  MatchKeyword(\"color\", \"red\"); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewMatch(\"color\", \"red\") ``` For the other types, the match condition will look exactly the same, except for the type used: ```json {   \"key\": \"count\",   \"match\": {     \"value\": 0   } } ``` ```python models.FieldCondition(     key=\"count\",     match=models.MatchValue(value=0), ) ``` ```typescript {     key: 'count',     match: {value: 0}     } ``` ```rust Condition::matches(\"count\", 0) ``` ```java import static io.qdrant.client.ConditionFactory.match;  match(\"count\", 0); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  Match(\"count\", 0); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewMatchInt(\"count\", 0) ``` The simplest kind of condition is one that checks if the stored value equals the given one. If several values are stored, at least one of them should match the condition. You can apply it to [keyword](https://qdrant.tech/documentation/concepts/payload/#keyword), [integer](https://qdrant.tech/documentation/concepts/payload/#integer) and [bool](https://qdrant.tech/documentation/concepts/payload/#bool) payloads.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0018",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Match"
      ],
      "heading_text": "Match",
      "token_count": 415,
      "char_count": 1549,
      "start_char": 28804,
      "end_char": 30353,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5022070063694268,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.497460",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 415,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Match",
      "chunk_hash": "ff3bf2bd0dda75d4",
      "content_digest": "ff3bf2bd0dda75d4",
      "chunk_length": 1549,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "match",
          "qdrant",
          "the",
          "color",
          "value",
          "red",
          "count",
          "key",
          "condition",
          "client",
          "models",
          "static",
          "import",
          "one",
          "https",
          "tech",
          "documentation",
          "concepts",
          "payload",
          "json"
        ],
        "term_weights": [
          {
            "term": "match",
            "tf": 12,
            "weight": 0.068966
          },
          {
            "term": "qdrant",
            "tf": 12,
            "weight": 0.068966
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.045977
          },
          {
            "term": "color",
            "tf": 7,
            "weight": 0.04023
          },
          {
            "term": "value",
            "tf": 7,
            "weight": 0.04023
          },
          {
            "term": "red",
            "tf": 7,
            "weight": 0.04023
          },
          {
            "term": "count",
            "tf": 7,
            "weight": 0.04023
          },
          {
            "term": "key",
            "tf": 6,
            "weight": 0.034483
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.028736
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.028736
          },
          {
            "term": "models",
            "tf": 4,
            "weight": 0.022989
          },
          {
            "term": "static",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "one",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "concepts",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "payload",
            "tf": 3,
            "weight": 0.017241
          },
          {
            "term": "json",
            "tf": 2,
            "weight": 0.011494
          }
        ],
        "unique_terms": 69,
        "total_terms": 174
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Match",
        "client",
        "color",
        "condition",
        "count",
        "key",
        "match",
        "qdrant",
        "red",
        "the",
        "value"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5022070063694268,
      "overall": 0.7007356687898089
    }
  },
  {
    "text": "### Match Any  *Available as of v1.1.0*  In case you want to check if the stored value is one of multiple values, you can use the Match Any condition. Match Any works as a logical OR for the given values. It can also be described as a `IN` operator. You can apply it to [keyword](https://qdrant.tech/documentation/concepts/payload/#keyword) and [integer](https://qdrant.tech/documentation/concepts/payload/#integer) payloads. Example: ```json {   \"key\": \"color\",   \"match\": {     \"any\": [\"black\", \"yellow\"]   } } ``` ```python models.FieldCondition(     key=\"color\",     match=models.MatchAny(any=[\"black\", \"yellow\"]), ) ``` ```typescript {     key: 'color',     match: {any: ['black', 'yellow']}     } ``` ```rust Condition::matches(\"color\", vec![\"black\".to_string(), \"yellow\".to_string()]) ``` ```java import static io.qdrant.client.ConditionFactory.matchKeywords;  matchKeywords(\"color\", List.of(\"black\", \"yellow\")); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  Match(\"color\", [\"black\", \"yellow\"]); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewMatchKeywords(\"color\", \"black\", \"yellow\") ``` In this example, the condition will be satisfied if the stored value is either `black` or `yellow`. If the stored value is an array, it should have at least one value matching any of the given values. E.g. if the stored value is `[\"black\", \"green\"]`, the condition will be satisfied, because `\"black\"` is in `[\"black\", \"yellow\"]`.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0019",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Match Any"
      ],
      "heading_text": "Match Any",
      "token_count": 377,
      "char_count": 1457,
      "start_char": 30371,
      "end_char": 31828,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7032162790697674,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.505058",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 377,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Match Any",
      "chunk_hash": "b6c79dfe02b4f987",
      "content_digest": "b6c79dfe02b4f987",
      "chunk_length": 1457,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "black",
          "the",
          "yellow",
          "match",
          "any",
          "qdrant",
          "color",
          "value",
          "stored",
          "condition",
          "you",
          "values",
          "can",
          "key",
          "client",
          "one",
          "given",
          "keyword",
          "https",
          "tech"
        ],
        "term_weights": [
          {
            "term": "black",
            "tf": 11,
            "weight": 0.068323
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.055901
          },
          {
            "term": "yellow",
            "tf": 9,
            "weight": 0.055901
          },
          {
            "term": "match",
            "tf": 7,
            "weight": 0.043478
          },
          {
            "term": "any",
            "tf": 7,
            "weight": 0.043478
          },
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.043478
          },
          {
            "term": "color",
            "tf": 7,
            "weight": 0.043478
          },
          {
            "term": "value",
            "tf": 5,
            "weight": 0.031056
          },
          {
            "term": "stored",
            "tf": 4,
            "weight": 0.024845
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.024845
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "values",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "client",
            "tf": 3,
            "weight": 0.018634
          },
          {
            "term": "one",
            "tf": 2,
            "weight": 0.012422
          },
          {
            "term": "given",
            "tf": 2,
            "weight": 0.012422
          },
          {
            "term": "keyword",
            "tf": 2,
            "weight": 0.012422
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.012422
          },
          {
            "term": "tech",
            "tf": 2,
            "weight": 0.012422
          }
        ],
        "unique_terms": 74,
        "total_terms": 161
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Match Any",
        "any",
        "black",
        "color",
        "condition",
        "match",
        "qdrant",
        "stored",
        "the",
        "value",
        "yellow"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7032162790697674,
      "overall": 0.7677387596899224
    }
  },
  {
    "text": "### Match Except  *Available as of v1.2.0*  In case you want to check if the stored value is not one of multiple values, you can use the Match Except condition. Match Except works as a logical NOR for the given values. It can also be described as a `NOT IN` operator. You can apply it to [keyword](https://qdrant.tech/documentation/concepts/payload/#keyword) and [integer](https://qdrant.tech/documentation/concepts/payload/#integer) payloads. Example: ```json {   \"key\": \"color\",   \"match\": {     \"except\": [\"black\", \"yellow\"]   } } ``` ```python models.FieldCondition(     key=\"color\",     match=models.MatchExcept(**{\"except\": [\"black\", \"yellow\"]}), ) ``` ```typescript {     key: 'color',     match: {except: ['black', 'yellow']} } ``` ```rust use qdrant_client::qdrant::r#match::MatchValue;  Condition::matches(     \"color\",     !MatchValue::from(vec![\"black\".to_string(), \"yellow\".to_string()]), ) ``` ```java import static io.qdrant.client.ConditionFactory.matchExceptKeywords;  matchExceptKeywords(\"color\", List.of(\"black\", \"yellow\")); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  Match(\"color\", [\"black\", \"yellow\"]); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewMatchExcept(\"color\", \"black\", \"yellow\") ``` In this example, the condition will be satisfied if the stored value is neither `black` nor `yellow`. If the stored value is an array, it should have at least one value not matching any of the given values. E.g. if the stored value is `[\"black\", \"green\"]`, the condition will be satisfied, because `\"green\"` does not match `\"black\"` nor `\"yellow\"`.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0020",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Match Except"
      ],
      "heading_text": "Match Except",
      "token_count": 413,
      "char_count": 1597,
      "start_char": 31841,
      "end_char": 33438,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7134604395604396,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.512711",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 413,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Match Except",
      "chunk_hash": "beb0095c3fa7177e",
      "content_digest": "beb0095c3fa7177e",
      "chunk_length": 1597,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "black",
          "match",
          "the",
          "qdrant",
          "yellow",
          "color",
          "except",
          "value",
          "stored",
          "not",
          "condition",
          "client",
          "you",
          "values",
          "can",
          "nor",
          "key",
          "one",
          "use",
          "given"
        ],
        "term_weights": [
          {
            "term": "black",
            "tf": 10,
            "weight": 0.05618
          },
          {
            "term": "match",
            "tf": 9,
            "weight": 0.050562
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.050562
          },
          {
            "term": "qdrant",
            "tf": 9,
            "weight": 0.050562
          },
          {
            "term": "yellow",
            "tf": 9,
            "weight": 0.050562
          },
          {
            "term": "color",
            "tf": 7,
            "weight": 0.039326
          },
          {
            "term": "except",
            "tf": 6,
            "weight": 0.033708
          },
          {
            "term": "value",
            "tf": 5,
            "weight": 0.02809
          },
          {
            "term": "stored",
            "tf": 4,
            "weight": 0.022472
          },
          {
            "term": "not",
            "tf": 4,
            "weight": 0.022472
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.022472
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.022472
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "values",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "can",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "nor",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.016854
          },
          {
            "term": "one",
            "tf": 2,
            "weight": 0.011236
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.011236
          },
          {
            "term": "given",
            "tf": 2,
            "weight": 0.011236
          }
        ],
        "unique_terms": 80,
        "total_terms": 178
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Match Except",
        "black",
        "color",
        "except",
        "match",
        "not",
        "qdrant",
        "stored",
        "the",
        "value",
        "yellow"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7134604395604396,
      "overall": 0.7711534798534799
    }
  },
  {
    "text": "### Nested object filter  *Available as of v1.2.0*  By default, the conditions are taking into account the entire payload of a point. For instance, given two points with the following payload: ```json [   {     \"id\": 1,     \"dinosaur\": \"t-rex\",     \"diet\": [       { \"food\": \"leaves\", \"likes\": false},       { \"food\": \"meat\", \"likes\": true}     ]   },   {     \"id\": 2,     \"dinosaur\": \"diplodocus\",     \"diet\": [       { \"food\": \"leaves\", \"likes\": true},       { \"food\": \"meat\", \"likes\": false}     ]   } ] ``` The following query would match both points: ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"must\": [             {                 \"key\": \"diet[].food\",                   \"match\": {                     \"value\": \"meat\"                 }             },             {                 \"key\": \"diet[].likes\",                   \"match\": {                     \"value\": true                 }             }         ]     } } ``` ```python client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must=[             models.FieldCondition(                 key=\"diet[].food\", match=models.MatchValue(value=\"meat\")             ),             models.FieldCondition(                 key=\"diet[].likes\", match=models.MatchValue(value=True)             ),         ],     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     must: [       {         key: \"diet[].food\",         match: { value: \"meat\" },       },       {         key: \"diet[].likes\",         match: { value: true },       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};  client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([             Condition::matches(\"diet[].food\", \"meat\".to_string()),             Condition::matches(\"diet[].likes\", true),         ])),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.match; import static io.qdrant.client.ConditionFactory.matchKeyword;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addAllMust(                         List.of(matchKeyword(\"diet[].food\", \"meat\"), match(\"diet[].likes\", true)))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.ScrollAsync( \tcollectionName: \"{collection_name}\", \tfilter: MatchKeyword(\"diet[].food\", \"meat\") & Match(\"diet[].likes\", true) ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMust: []*qdrant.Condition{ \t\t\tqdrant.NewMatch(\"diet[].food\", \"meat\"), \t\t\tqdrant.NewMatchBool(\"diet[].likes\", true), \t\t}, \t}, }) ``` This happens because both points are matching the two conditions:  - the “t-rex” matches food=meat on `diet[1].food` and likes=true on `diet[1].likes` - the “diplodocus” matches food=meat on `diet[1].food` and likes=true on `diet[0].likes`  To retrieve only the points which are matching the conditions on an array element basis, that is the point with id 1 in this example, you would need to use a nested object filter. Nested object filters allow arrays of objects to be queried independently of each other. It is achieved by using the `nested` condition type formed by a payload key to focus on and a filter to apply. The key should point to an array of objects and can be used with or without the bracket notation (“data” or “data\\[]”). ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"must\": [{             \"nested\": {                 \"key\": \"diet\",                 \"filter\":{                     \"must\": [                         {                             \"key\": \"food\",                             \"match\": {                                 \"value\": \"meat\"                             }                         },                         {                             \"key\": \"likes\",                             \"match\": {                                 \"value\": true                             }                         }                     ]                 }             }         }]     } } ``` ```python client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must=[             models.NestedCondition(                 nested=models.Nested(                     key=\"diet\",                     filter=models.Filter(                         must=[                             models.FieldCondition(                                 key=\"food\", match=models.MatchValue(value=\"meat\")                             ),                             models.FieldCondition(                                 key=\"likes\", match=models.MatchValue(value=True)                             ),                         ]                     ),                 )             )         ],     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     must: [       {         nested: {           key: \"diet\",           filter: {             must: [               {                 key: \"food\",                 match: { value: \"meat\" },               },               {                 key: \"likes\",                 match: { value: true },               },             ],           },         },       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, NestedCondition, ScrollPointsBuilder};  client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([NestedCondition {             key: \"diet\".to_string(),             filter: Some(Filter::must([                 Condition::matches(\"food\", \"meat\".to_string()),                 Condition::matches(\"likes\", true),             ])),         }         .into()])),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.match; import static io.qdrant.client.ConditionFactory.matchKeyword; import static io.qdrant.client.ConditionFactory.nested;  import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addMust(                         nested(                             \"diet\",                             Filter.newBuilder()                                 .addAllMust(                                     List.of(                                         matchKeyword(\"food\", \"meat\"), match(\"likes\", true)))                                 .build()))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.ScrollAsync( \tcollectionName: \"{collection_name}\", \tfilter: Nested(\"diet\", MatchKeyword(\"food\", \"meat\") & Match(\"likes\", true)) ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMust: []*qdrant.Condition{ \t\t\tqdrant.NewNestedFilter(\"diet\", &qdrant.Filter{ \t\t\t\tMust: []*qdrant.Condition{ \t\t\t\t\tqdrant.NewMatch(\"food\", \"meat\"), \t\t\t\t\tqdrant.NewMatchBool(\"likes\", true), \t\t\t\t}, \t\t\t}), \t\t}, \t}, }) ``` The matching logic is modified to be applied at the level of an array element within the payload. Nested filters work in the same way as if the nested filter was applied to a single element of the array at a time. Parent document is considered to match the condition if at least one element of the array matches the nested filter. **Limitations**  The `has_id` condition is not supported within the nested object filter. If you need it, place it in an adjacent `must` clause. ```http POST /collections/{collection_name}/points/scroll {    \"filter\":{       \"must\":[          {             \"nested\":{                \"key\":\"diet\",                \"filter\":{                   \"must\":[                      {                         \"key\":\"food\",                         \"match\":{                            \"value\":\"meat\"                         }                      },                      {                         \"key\":\"likes\",                         \"match\":{                            \"value\":true                         }                      }                   ]                }             }          },          {             \"has_id\":[                1             ]          }       ]    } } ``` ```python client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must=[             models.NestedCondition(                 nested=models.Nested(                     key=\"diet\",                     filter=models.Filter(                         must=[                             models.FieldCondition(                                 key=\"food\", match=models.MatchValue(value=\"meat\")                             ),                             models.FieldCondition(                                 key=\"likes\", match=models.MatchValue(value=True)                             ),                         ]                     ),                 )             ),             models.HasIdCondition(has_id=[1]),         ],     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     must: [       {         nested: {           key: \"diet\",           filter: {             must: [               {                 key: \"food\",                 match: { value: \"meat\" },               },               {                 key: \"likes\",                 match: { value: true },               },             ],           },         },       },       {         has_id: [1],       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, NestedCondition, ScrollPointsBuilder};  client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\").filter(Filter::must([             NestedCondition {                 key: \"diet\".to_string(),                 filter: Some(Filter::must([                     Condition::matches(\"food\", \"meat\".to_string()),                     Condition::matches(\"likes\", true),                 ])),             }             .into(),             Condition::has_id([1]),         ])),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.hasId; import static io.qdrant.client.ConditionFactory.match; import static io.qdrant.client.ConditionFactory.matchKeyword; import static io.qdrant.client.ConditionFactory.nested; import static io.qdrant.client.PointIdFactory.id;  import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addMust(                         nested(                             \"diet\",                             Filter.newBuilder()                                 .addAllMust(                                     List.of(                                         matchKeyword(\"food\", \"meat\"), match(\"likes\", true)))                                 .build()))                     .addMust(hasId(id(1)))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.ScrollAsync( \tcollectionName: \"{collection_name}\", \tfilter: Nested(\"diet\", MatchKeyword(\"food\", \"meat\") & Match(\"likes\", true)) & HasId(1) ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMust: []*qdrant.Condition{ \t\t\tqdrant.NewNestedFilter(\"diet\", &qdrant.Filter{ \t\t\t\tMust: []*qdrant.Condition{ \t\t\t\t\tqdrant.NewMatch(\"food\", \"meat\"), \t\t\t\t\tqdrant.NewMatchBool(\"likes\", true), \t\t\t\t}, \t\t\t}), \t\t\tqdrant.NewHasID(qdrant.NewIDNum(1)), \t\t}, \t}, }) ```",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0022",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Nested object filter"
      ],
      "heading_text": "Nested object filter",
      "token_count": 2816,
      "char_count": 13080,
      "start_char": 42076,
      "end_char": 55156,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5868454258675079,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.591322",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 2816,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Nested object filter",
      "chunk_hash": "016ea266765a1540",
      "content_digest": "016ea266765a1540",
      "chunk_length": 13080,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "filter",
          "client",
          "diet",
          "food",
          "likes",
          "match",
          "key",
          "must",
          "meat",
          "true",
          "the",
          "collection",
          "name",
          "import",
          "nested",
          "models",
          "scroll",
          "value",
          "condition"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 65,
            "weight": 0.064293
          },
          {
            "term": "filter",
            "tf": 58,
            "weight": 0.057369
          },
          {
            "term": "client",
            "tf": 55,
            "weight": 0.054402
          },
          {
            "term": "diet",
            "tf": 34,
            "weight": 0.03363
          },
          {
            "term": "food",
            "tf": 29,
            "weight": 0.028684
          },
          {
            "term": "likes",
            "tf": 29,
            "weight": 0.028684
          },
          {
            "term": "match",
            "tf": 29,
            "weight": 0.028684
          },
          {
            "term": "key",
            "tf": 28,
            "weight": 0.027695
          },
          {
            "term": "must",
            "tf": 26,
            "weight": 0.025717
          },
          {
            "term": "meat",
            "tf": 25,
            "weight": 0.024728
          },
          {
            "term": "true",
            "tf": 25,
            "weight": 0.024728
          },
          {
            "term": "the",
            "tf": 24,
            "weight": 0.023739
          },
          {
            "term": "collection",
            "tf": 24,
            "weight": 0.023739
          },
          {
            "term": "name",
            "tf": 24,
            "weight": 0.023739
          },
          {
            "term": "import",
            "tf": 24,
            "weight": 0.023739
          },
          {
            "term": "nested",
            "tf": 22,
            "weight": 0.021761
          },
          {
            "term": "models",
            "tf": 22,
            "weight": 0.021761
          },
          {
            "term": "scroll",
            "tf": 18,
            "weight": 0.017804
          },
          {
            "term": "value",
            "tf": 18,
            "weight": 0.017804
          },
          {
            "term": "condition",
            "tf": 18,
            "weight": 0.017804
          }
        ],
        "unique_terms": 162,
        "total_terms": 1011
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Nested object filter",
        "client",
        "diet",
        "filter",
        "food",
        "key",
        "likes",
        "match",
        "meat",
        "must",
        "qdrant"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5868454258675079,
      "overall": 0.695615141955836
    }
  },
  {
    "text": "### Full Text Match  *Available as of v0.10.0*  A special case of the `match` condition is the `text` match condition. It allows you to search for a specific substring, token or phrase within the text field. Exact texts that will match the condition depend on full-text index configuration. Configuration is defined during the index creation and describe at [full-text index](https://qdrant.tech/documentation/concepts/indexing/#full-text-index). If there is no full-text index for the field, the condition will work as exact substring match. ```json {   \"key\": \"description\",   \"match\": {     \"text\": \"good cheap\"   } } ``` ```python models.FieldCondition(     key=\"description\",     match=models.MatchText(text=\"good cheap\"), ) ``` ```typescript {     key: 'description',     match: {text: 'good cheap'}     } ``` ```rust use qdrant_client::qdrant::Condition;  Condition::matches_text(\"description\", \"good cheap\") ``` ```java import static io.qdrant.client.ConditionFactory.matchText;  matchText(\"description\", \"good cheap\"); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  MatchText(\"description\", \"good cheap\"); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewMatchText(\"description\", \"good cheap\") ``` If the query has several words, then the condition will be satisfied only if all of them are present in the text.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0023",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Full Text Match"
      ],
      "heading_text": "Full Text Match",
      "token_count": 320,
      "char_count": 1348,
      "start_char": 55189,
      "end_char": 56537,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5029620253164557,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.599544",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 320,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Full Text Match",
      "chunk_hash": "5519a9e1b7d597d8",
      "content_digest": "5519a9e1b7d597d8",
      "chunk_length": 1348,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "text",
          "the",
          "match",
          "qdrant",
          "condition",
          "description",
          "good",
          "cheap",
          "full",
          "index",
          "matchtext",
          "client",
          "will",
          "key",
          "for",
          "substring",
          "field",
          "exact",
          "configuration",
          "models"
        ],
        "term_weights": [
          {
            "term": "text",
            "tf": 12,
            "weight": 0.075949
          },
          {
            "term": "the",
            "tf": 10,
            "weight": 0.063291
          },
          {
            "term": "match",
            "tf": 8,
            "weight": 0.050633
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.050633
          },
          {
            "term": "condition",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "description",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "good",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "cheap",
            "tf": 7,
            "weight": 0.044304
          },
          {
            "term": "full",
            "tf": 5,
            "weight": 0.031646
          },
          {
            "term": "index",
            "tf": 5,
            "weight": 0.031646
          },
          {
            "term": "matchtext",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.025316
          },
          {
            "term": "will",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.018987
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "substring",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "field",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "exact",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "configuration",
            "tf": 2,
            "weight": 0.012658
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.012658
          }
        ],
        "unique_terms": 74,
        "total_terms": 158
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Full Text Match",
        "cheap",
        "condition",
        "description",
        "full",
        "good",
        "index",
        "match",
        "qdrant",
        "text",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5029620253164557,
      "overall": 0.7009873417721518
    }
  },
  {
    "text": "### Phrase Match  *Available as of v1.15.0*  A match `phrase` condition also leverages [full-text index](https://qdrant.tech/documentation/concepts/indexing/#full-text-index), to perform exact phrase comparisons. It allows you to search for a specific token phrase within the text field. For example, the text `\"quick brown fox\"` will be matched by the query `\"brown fox\"`, but not by `\"fox brown\"`. The index must be configured with `phrase_matching` parameter set to `true`. If the index has phrase matching disabled, phrase conditions won't match anything. If there is no full-text index for the field, the condition will work as exact substring match. ```json {   \"key\": \"description\",   \"match\": {     \"phrase\": \"brown fox\"   } } ``` ```python models.FieldCondition(     key=\"description\",     match=models.MatchPhrase(phrase=\"brown fox\"), ) ``` ```typescript {     key: 'description',     match: {phrase: 'brown fox'} } ``` ```rust use qdrant_client::qdrant::Condition;  Condition::matches_phrase(\"description\", \"brown fox\") ``` ```java import static io.qdrant.client.ConditionFactory.matchPhrase;  matchPhrase(\"description\", \"brown fox\"); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  MatchPhrase(\"description\", \"brown fox\"); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewMatchPhrase(\"description\", \"brown fox\") ```",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0024",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Phrase Match"
      ],
      "heading_text": "Phrase Match",
      "token_count": 326,
      "char_count": 1354,
      "start_char": 56549,
      "end_char": 57903,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7076039215686275,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.603495",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 326,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Phrase Match",
      "chunk_hash": "1b005c9c3419727b",
      "content_digest": "1b005c9c3419727b",
      "chunk_length": 1354,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "phrase",
          "brown",
          "fox",
          "qdrant",
          "match",
          "the",
          "description",
          "text",
          "index",
          "condition",
          "matchphrase",
          "client",
          "full",
          "for",
          "key",
          "exact",
          "field",
          "will",
          "matching",
          "conditions"
        ],
        "term_weights": [
          {
            "term": "phrase",
            "tf": 11,
            "weight": 0.070064
          },
          {
            "term": "brown",
            "tf": 10,
            "weight": 0.063694
          },
          {
            "term": "fox",
            "tf": 10,
            "weight": 0.063694
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.050955
          },
          {
            "term": "match",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "description",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "text",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "index",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "matchphrase",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "full",
            "tf": 3,
            "weight": 0.019108
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.019108
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.019108
          },
          {
            "term": "exact",
            "tf": 2,
            "weight": 0.012739
          },
          {
            "term": "field",
            "tf": 2,
            "weight": 0.012739
          },
          {
            "term": "will",
            "tf": 2,
            "weight": 0.012739
          },
          {
            "term": "matching",
            "tf": 2,
            "weight": 0.012739
          },
          {
            "term": "conditions",
            "tf": 2,
            "weight": 0.012739
          }
        ],
        "unique_terms": 73,
        "total_terms": 157
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Phrase Match",
        "brown",
        "condition",
        "description",
        "fox",
        "index",
        "match",
        "phrase",
        "qdrant",
        "text",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7076039215686275,
      "overall": 0.7692013071895425
    }
  },
  {
    "text": "### Range ```json {   \"key\": \"price\",   \"range\": {     \"gt\": null,     \"gte\": 100.0,     \"lt\": null,     \"lte\": 450.0   } } ``` ```python models.FieldCondition(     key=\"price\",     range=models.Range(         gt=None,         gte=100.0,         lt=None,         lte=450.0,     ), ) ``` ```typescript {     key: 'price',     range: {         gt: null,         gte: 100.0,         lt: null,         lte: 450.0         }     } ``` ```rust use qdrant_client::qdrant::{Condition, Range};  Condition::range(     \"price\",     Range {         gt: None,         gte: Some(100.0),         lt: None,         lte: Some(450.0),     }, ) ``` ```java import static io.qdrant.client.ConditionFactory.range;  import io.qdrant.client.grpc.Points.Range;  range(\"price\", Range.newBuilder().setGte(100.0).setLte(450).build()); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  Range(\"price\", new Qdrant.Client.Grpc.Range { Gte = 100.0, Lte = 450 }); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewRange(\"price\", &qdrant.Range{ \tGte: qdrant.PtrOf(100.0), \tLte: qdrant.PtrOf(450.0), }) ``` The `range` condition sets the range of possible values for stored payload values. If several values are stored, at least one of them should match the condition. Comparisons that can be used:  - `gt` - greater than - `gte` - greater than or equal - `lt` - less than - `lte` - less than or equal  Can be applied to [float](https://qdrant.tech/documentation/concepts/payload/#float) and [integer](https://qdrant.tech/documentation/concepts/payload/#integer) payloads.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0025",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Range"
      ],
      "heading_text": "Range",
      "token_count": 467,
      "char_count": 1560,
      "start_char": 57915,
      "end_char": 59475,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5388951807228916,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.607552",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 467,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Range",
      "chunk_hash": "7c0681fe29cd19f7",
      "content_digest": "7c0681fe29cd19f7",
      "chunk_length": 1560,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "range",
          "qdrant",
          "price",
          "gte",
          "100",
          "lte",
          "450",
          "client",
          "null",
          "none",
          "condition",
          "than",
          "key",
          "import",
          "grpc",
          "the",
          "values",
          "payload",
          "models",
          "some"
        ],
        "term_weights": [
          {
            "term": "range",
            "tf": 17,
            "weight": 0.098837
          },
          {
            "term": "qdrant",
            "tf": 14,
            "weight": 0.081395
          },
          {
            "term": "price",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "gte",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "lte",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "450",
            "tf": 7,
            "weight": 0.040698
          },
          {
            "term": "client",
            "tf": 6,
            "weight": 0.034884
          },
          {
            "term": "null",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "none",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "than",
            "tf": 4,
            "weight": 0.023256
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "grpc",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "values",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "payload",
            "tf": 3,
            "weight": 0.017442
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.011628
          },
          {
            "term": "some",
            "tf": 2,
            "weight": 0.011628
          }
        ],
        "unique_terms": 69,
        "total_terms": 172
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "100",
        "450",
        "Range",
        "client",
        "gte",
        "lte",
        "none",
        "null",
        "price",
        "qdrant",
        "range"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5388951807228916,
      "overall": 0.6796317269076305
    }
  },
  {
    "text": "### Datetime Range  The datetime range is a unique range condition, used for [datetime](https://qdrant.tech/documentation/concepts/payload/#datetime) payloads, which supports RFC 3339 formats. You do not need to convert dates to UNIX timestaps. During comparison, timestamps are parsed and converted to UTC. *Available as of v1.8.0* ```json {   \"key\": \"date\",   \"range\": {     \"gt\": \"2023-02-08T10:49:00Z\",     \"gte\": null,     \"lt\": null,     \"lte\": \"2024-01-31 10:14:31Z\"   } } ``` ```python models.FieldCondition(     key=\"date\",     range=models.DatetimeRange(         gt=\"2023-02-08T10:49:00Z\",         gte=None,         lt=None,         lte=\"2024-01-31T10:14:31Z\",     ), ) ``` ```typescript {     key: 'date',     range: {         gt: '2023-02-08T10:49:00Z',         gte: null,         lt: null,         lte: '2024-01-31T10:14:31Z'     } } ``` ```rust use qdrant_client::qdrant::{Condition, DatetimeRange, Timestamp};  Condition::datetime_range(     \"date\",     DatetimeRange {         gt: Some(Timestamp::date_time(2023, 2, 8, 10, 49, 0).unwrap()),         gte: None,         lt: None,         lte: Some(Timestamp::date_time(2024, 1, 31, 10, 14, 31).unwrap()),     }, ) ``` ```java import static io.qdrant.client.ConditionFactory.datetimeRange;  import com.google.protobuf.Timestamp; import io.qdrant.client.grpc.Points.DatetimeRange; import java.time.Instant;  long gt = Instant.parse(\"2023-02-08T10:49:00Z\").getEpochSecond(); long lte = Instant.parse(\"2024-01-31T10:14:31Z\").getEpochSecond();  datetimeRange(\"date\",     DatetimeRange.newBuilder()         .setGt(Timestamp.newBuilder().setSeconds(gt))         .setLte(Timestamp.newBuilder().setSeconds(lte))         .build()); ``` ```csharp using Qdrant.Client.Grpc;  Conditions.DatetimeRange(     field: \"date\",     gt: new DateTime(2023, 2, 8, 10, 49, 0, DateTimeKind.Utc),     lte: new DateTime(2024, 1, 31, 10, 14, 31, DateTimeKind.Utc) ); ``` ```go import ( \t\"time\"  \t\"github.com/qdrant/go-client/qdrant\" \t\"google.golang.org/protobuf/types/known/timestamppb\" )  qdrant.NewDatetimeRange(\"date\", &qdrant.DatetimeRange{ \tGt:  timestamppb.New(time.Date(2023, 2, 8, 10, 49, 0, 0, time.UTC)), \tLte: timestamppb.New(time.Date(2024, 1, 31, 10, 14, 31, 0, time.UTC)), }) ```",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0026",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Datetime Range"
      ],
      "heading_text": "Datetime Range",
      "token_count": 734,
      "char_count": 2229,
      "start_char": 59486,
      "end_char": 61715,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7030303030303031,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.613069",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 734,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Datetime Range",
      "chunk_hash": "ca1bb4d55f0158d5",
      "content_digest": "ca1bb4d55f0158d5",
      "chunk_length": 2229,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "date",
          "qdrant",
          "datetimerange",
          "lte",
          "time",
          "datetime",
          "range",
          "2023",
          "2024",
          "timestamp",
          "utc",
          "client",
          "import",
          "08t10",
          "00z",
          "gte",
          "null",
          "31z",
          "none",
          "new"
        ],
        "term_weights": [
          {
            "term": "date",
            "tf": 11,
            "weight": 0.050228
          },
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.045662
          },
          {
            "term": "datetimerange",
            "tf": 9,
            "weight": 0.041096
          },
          {
            "term": "lte",
            "tf": 8,
            "weight": 0.03653
          },
          {
            "term": "time",
            "tf": 8,
            "weight": 0.03653
          },
          {
            "term": "datetime",
            "tf": 7,
            "weight": 0.031963
          },
          {
            "term": "range",
            "tf": 7,
            "weight": 0.031963
          },
          {
            "term": "2023",
            "tf": 7,
            "weight": 0.031963
          },
          {
            "term": "2024",
            "tf": 7,
            "weight": 0.031963
          },
          {
            "term": "timestamp",
            "tf": 6,
            "weight": 0.027397
          },
          {
            "term": "utc",
            "tf": 5,
            "weight": 0.022831
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.022831
          },
          {
            "term": "import",
            "tf": 5,
            "weight": 0.022831
          },
          {
            "term": "08t10",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "00z",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "gte",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "null",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "31z",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "none",
            "tf": 4,
            "weight": 0.018265
          },
          {
            "term": "new",
            "tf": 4,
            "weight": 0.018265
          }
        ],
        "unique_terms": 91,
        "total_terms": 219
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "2023",
        "2024",
        "Datetime Range",
        "date",
        "datetime",
        "datetimerange",
        "lte",
        "qdrant",
        "range",
        "time",
        "timestamp"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7030303030303031,
      "overall": 0.7343434343434344
    }
  },
  {
    "text": "### UUID Match  *Available as of v1.11.0*  Matching of UUID values works similarly to the regular `match` condition for strings. Functionally, it will work with `keyword` and `uuid` indexes exactly the same, but `uuid` index is more memory efficient. ```json {   \"key\": \"uuid\",   \"match\": {     \"value\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"   } } ``` ```python models.FieldCondition(     key=\"uuid\",     match=models.MatchValue(value=\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"), ) ``` ```typescript {     key: 'uuid',     match: {value: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'}     } ``` ```rust Condition::matches(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\".to_string()) ``` ```java matchKeyword(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  MatchKeyword(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewMatch(\"uuid\", \"f47ac10b-58cc-4372-a567-0e02b2c3d479\") ```",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0027",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "UUID Match"
      ],
      "heading_text": "UUID Match",
      "token_count": 362,
      "char_count": 989,
      "start_char": 61725,
      "end_char": 62714,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5527860465116279,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.617804",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 362,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "UUID Match",
      "chunk_hash": "a80366de2594c81d",
      "content_digest": "a80366de2594c81d",
      "chunk_length": 989,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "uuid",
          "f47ac10b",
          "58cc",
          "4372",
          "a567",
          "0e02b2c3d479",
          "match",
          "qdrant",
          "key",
          "value",
          "the",
          "condition",
          "models",
          "matchkeyword",
          "client",
          "available",
          "matching",
          "values",
          "works",
          "similarly"
        ],
        "term_weights": [
          {
            "term": "uuid",
            "tf": 11,
            "weight": 0.099099
          },
          {
            "term": "f47ac10b",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "58cc",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "4372",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "a567",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "0e02b2c3d479",
            "tf": 7,
            "weight": 0.063063
          },
          {
            "term": "match",
            "tf": 5,
            "weight": 0.045045
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.036036
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.027027
          },
          {
            "term": "value",
            "tf": 3,
            "weight": 0.027027
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "condition",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "matchkeyword",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "client",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "available",
            "tf": 1,
            "weight": 0.009009
          },
          {
            "term": "matching",
            "tf": 1,
            "weight": 0.009009
          },
          {
            "term": "values",
            "tf": 1,
            "weight": 0.009009
          },
          {
            "term": "works",
            "tf": 1,
            "weight": 0.009009
          },
          {
            "term": "similarly",
            "tf": 1,
            "weight": 0.009009
          }
        ],
        "unique_terms": 55,
        "total_terms": 111
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "0e02b2c3d479",
        "4372",
        "58cc",
        "UUID Match",
        "a567",
        "f47ac10b",
        "key",
        "match",
        "qdrant",
        "uuid",
        "value"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5527860465116279,
      "overall": 0.7175953488372092
    }
  },
  {
    "text": "#### Geo Bounding Box ```json {   \"key\": \"location\",   \"geo_bounding_box\": {     \"bottom_right\": {       \"lon\": 13.455868,       \"lat\": 52.495862     },     \"top_left\": {       \"lon\": 13.403683,       \"lat\": 52.520711     }   } } ``` ```python models.FieldCondition(     key=\"location\",     geo_bounding_box=models.GeoBoundingBox(         bottom_right=models.GeoPoint(             lon=13.455868,             lat=52.495862,         ),         top_left=models.GeoPoint(             lon=13.403683,             lat=52.520711,         ),     ), ) ``` ```typescript {     key: 'location',     geo_bounding_box: {         bottom_right: {             lon: 13.455868,             lat: 52.495862         },         top_left: {             lon: 13.403683,             lat: 52.520711         }     } } ``` ```rust use qdrant_client::qdrant::{Condition, GeoBoundingBox, GeoPoint};  Condition::geo_bounding_box(     \"location\",     GeoBoundingBox {         bottom_right: Some(GeoPoint {             lon: 13.455868,             lat: 52.495862,         }),         top_left: Some(GeoPoint {             lon: 13.403683,             lat: 52.520711,         }),     }, ) ``` ```java import static io.qdrant.client.ConditionFactory.geoBoundingBox;  geoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  GeoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewGeoBoundingBox(\"location\", 52.520711, 13.403683, 52.495862, 13.455868) ``` It matches with `location`s inside a rectangle with the coordinates of the upper left corner in `bottom_right` and the coordinates of the lower right corner in `top_left`.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0029",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Geo Bounding Box"
      ],
      "heading_text": "Geo Bounding Box",
      "token_count": 499,
      "char_count": 1743,
      "start_char": 62732,
      "end_char": 64475,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5168140939597315,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.622959",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 499,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Geo Bounding Box",
      "chunk_hash": "86ceb4d54ac2723a",
      "content_digest": "86ceb4d54ac2723a",
      "chunk_length": 1743,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "location",
          "lon",
          "lat",
          "455868",
          "495862",
          "403683",
          "520711",
          "qdrant",
          "right",
          "left",
          "geoboundingbox",
          "geo",
          "bounding",
          "box",
          "bottom",
          "top",
          "geopoint",
          "models",
          "client",
          "the"
        ],
        "term_weights": [
          {
            "term": "location",
            "tf": 8,
            "weight": 0.050955
          },
          {
            "term": "lon",
            "tf": 8,
            "weight": 0.050955
          },
          {
            "term": "lat",
            "tf": 8,
            "weight": 0.050955
          },
          {
            "term": "455868",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "495862",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "403683",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "520711",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.044586
          },
          {
            "term": "right",
            "tf": 6,
            "weight": 0.038217
          },
          {
            "term": "left",
            "tf": 6,
            "weight": 0.038217
          },
          {
            "term": "geoboundingbox",
            "tf": 6,
            "weight": 0.038217
          },
          {
            "term": "geo",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "bounding",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "box",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "bottom",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "top",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "geopoint",
            "tf": 5,
            "weight": 0.031847
          },
          {
            "term": "models",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.025478
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.025478
          }
        ],
        "unique_terms": 49,
        "total_terms": 157
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "403683",
        "455868",
        "495862",
        "520711",
        "Geo Bounding Box",
        "lat",
        "left",
        "location",
        "lon",
        "qdrant",
        "right"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5168140939597315,
      "overall": 0.6722713646532439
    }
  },
  {
    "text": "#### Geo Radius ```json {   \"key\": \"location\",   \"geo_radius\": {     \"center\": {       \"lon\": 13.403683,       \"lat\": 52.520711     },     \"radius\": 1000.0   } } ``` ```python models.FieldCondition(     key=\"location\",     geo_radius=models.GeoRadius(         center=models.GeoPoint(             lon=13.403683,             lat=52.520711,         ),         radius=1000.0,     ), ) ``` ```typescript {     key: 'location',     geo_radius: {         center: {             lon: 13.403683,             lat: 52.520711         },         radius: 1000.0     }     } ``` ```rust use qdrant_client::qdrant::{Condition, GeoPoint, GeoRadius};  Condition::geo_radius(     \"location\",     GeoRadius {         center: Some(GeoPoint {             lon: 13.403683,             lat: 52.520711,         }),         radius: 1000.0,     }, ) ``` ```java import static io.qdrant.client.ConditionFactory.geoRadius;  geoRadius(\"location\", 52.520711, 13.403683, 1000.0f); ``` ```csharp using static Qdrant.Client.Grpc.Conditions;  GeoRadius(\"location\", 52.520711, 13.403683, 1000.0f); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewGeoRadius(\"location\", 52.520711, 13.403683, 1000.0) ``` It matches with `location`s inside a circle with the `center` at the center and a radius of `radius` meters. If several values are stored, at least one of them should match the condition. These conditions can only be applied to payloads that match the [geo-data format](https://qdrant.tech/documentation/concepts/payload/#geo).",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0030",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Geo Radius"
      ],
      "heading_text": "Geo Radius",
      "token_count": 435,
      "char_count": 1508,
      "start_char": 64485,
      "end_char": 65993,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5311896551724138,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.628184",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 435,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Geo Radius",
      "chunk_hash": "bb61b436eda2cf54",
      "content_digest": "bb61b436eda2cf54",
      "chunk_length": 1508,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "radius",
          "location",
          "qdrant",
          "geo",
          "403683",
          "520711",
          "1000",
          "center",
          "georadius",
          "lon",
          "lat",
          "client",
          "the",
          "key",
          "models",
          "geopoint",
          "condition",
          "import",
          "static",
          "conditions"
        ],
        "term_weights": [
          {
            "term": "radius",
            "tf": 11,
            "weight": 0.075342
          },
          {
            "term": "location",
            "tf": 8,
            "weight": 0.054795
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.054795
          },
          {
            "term": "geo",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "403683",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "520711",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "1000",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "center",
            "tf": 6,
            "weight": 0.041096
          },
          {
            "term": "georadius",
            "tf": 6,
            "weight": 0.041096
          },
          {
            "term": "lon",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "lat",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "client",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "models",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "geopoint",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "condition",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "static",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "conditions",
            "tf": 2,
            "weight": 0.013699
          }
        ],
        "unique_terms": 63,
        "total_terms": 146
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "1000",
        "403683",
        "520711",
        "Geo Radius",
        "center",
        "geo",
        "georadius",
        "location",
        "lon",
        "qdrant",
        "radius"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5311896551724138,
      "overall": 0.6770632183908045
    }
  },
  {
    "text": "### Values count  In addition to the direct value comparison, it is also possible to filter by the amount of values. For example, given the data: ```json [   { \"id\": 1, \"name\": \"product A\", \"comments\": [\"Very good!\", \"Excellent\"] },   { \"id\": 2, \"name\": \"product B\", \"comments\": [\"meh\", \"expected more\", \"ok\"] } ] ``` We can perform the search only among the items with more than two comments: ```json {   \"key\": \"comments\",   \"values_count\": {     \"gt\": 2   } } ``` ```python models.FieldCondition(     key=\"comments\",     values_count=models.ValuesCount(gt=2), ) ``` ```typescript {     key: 'comments',     values_count: {gt: 2}     } ``` ```rust use qdrant_client::qdrant::{Condition, ValuesCount};  Condition::values_count(     \"comments\",     ValuesCount {         gt: Some(2),         ..Default::default()     }, ) ``` ```java import static io.qdrant.client.ConditionFactory.valuesCount;  import io.qdrant.client.grpc.Points.ValuesCount;  valuesCount(\"comments\", ValuesCount.newBuilder().setGt(2).build()); ``` ```csharp using Qdrant.Client.Grpc; using static Qdrant.Client.Grpc.Conditions;  ValuesCount(\"comments\", new ValuesCount { Gt = 2 }); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewValuesCount(\"comments\", &qdrant.ValuesCount{ \tGt: qdrant.PtrOf(uint64(2)), }) ``` The result would be: ```json [{ \"id\": 2, \"name\": \"product B\", \"comments\": [\"meh\", \"expected more\", \"ok\"] }] ``` If stored value is not an array - it is assumed that the amount of values is equals to 1.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0032",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Values count"
      ],
      "heading_text": "Values count",
      "token_count": 417,
      "char_count": 1500,
      "start_char": 73741,
      "end_char": 75241,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7239764044943819,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.657003",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 417,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Values count",
      "chunk_hash": "1fa37cc06483f142",
      "content_digest": "1fa37cc06483f142",
      "chunk_length": 1500,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "comments",
          "qdrant",
          "valuescount",
          "values",
          "the",
          "client",
          "count",
          "json",
          "name",
          "product",
          "more",
          "key",
          "import",
          "grpc",
          "value",
          "amount",
          "meh",
          "expected",
          "models",
          "condition"
        ],
        "term_weights": [
          {
            "term": "comments",
            "tf": 11,
            "weight": 0.075342
          },
          {
            "term": "qdrant",
            "tf": 11,
            "weight": 0.075342
          },
          {
            "term": "valuescount",
            "tf": 10,
            "weight": 0.068493
          },
          {
            "term": "values",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "client",
            "tf": 6,
            "weight": 0.041096
          },
          {
            "term": "count",
            "tf": 5,
            "weight": 0.034247
          },
          {
            "term": "json",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "name",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "product",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "more",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "grpc",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "value",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "amount",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "meh",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "expected",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "condition",
            "tf": 2,
            "weight": 0.013699
          }
        ],
        "unique_terms": 73,
        "total_terms": 146
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Values count",
        "client",
        "comments",
        "count",
        "json",
        "name",
        "product",
        "qdrant",
        "the",
        "values",
        "valuescount"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7239764044943819,
      "overall": 0.7746588014981274
    }
  },
  {
    "text": "### Is Empty  Sometimes it is also useful to filter out records that are missing some value. The `IsEmpty` condition may help you with that: ```json {   \"is_empty\": {     \"key\": \"reports\"   } } ``` ```python models.IsEmptyCondition(     is_empty=models.PayloadField(key=\"reports\"), ) ``` ```typescript {   is_empty: {     key: \"reports\"   } } ``` ```rust use qdrant_client::qdrant::Condition;  Condition::is_empty(\"reports\") ``` ```java import static io.qdrant.client.ConditionFactory.isEmpty;  isEmpty(\"reports\"); ``` ```csharp using Qdrant.Client.Grpc; using static Qdrant.Client.Grpc.Conditions;  IsEmpty(\"reports\"); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewIsEmpty(\"reports\") ``` This condition will match all records where the field `reports` either does not exist, or has `null` or `[]` value. The **IsEmpty** is often useful together with the logical negation **must\\_not**. In this case all non-empty values will be selected.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0033",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Is Empty"
      ],
      "heading_text": "Is Empty",
      "token_count": 240,
      "char_count": 957,
      "start_char": 75256,
      "end_char": 76213,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5069642857142856,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.661111",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 240,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Is Empty",
      "chunk_hash": "0ae613de08288dd2",
      "content_digest": "0ae613de08288dd2",
      "chunk_length": 957,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "reports",
          "qdrant",
          "empty",
          "isempty",
          "client",
          "the",
          "condition",
          "key",
          "useful",
          "records",
          "that",
          "value",
          "with",
          "models",
          "import",
          "static",
          "using",
          "grpc",
          "this",
          "will"
        ],
        "term_weights": [
          {
            "term": "reports",
            "tf": 8,
            "weight": 0.071429
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.071429
          },
          {
            "term": "empty",
            "tf": 6,
            "weight": 0.053571
          },
          {
            "term": "isempty",
            "tf": 5,
            "weight": 0.044643
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.044643
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.035714
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.035714
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.026786
          },
          {
            "term": "useful",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "records",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "value",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "static",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "grpc",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "will",
            "tf": 2,
            "weight": 0.017857
          }
        ],
        "unique_terms": 63,
        "total_terms": 112
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Is Empty",
        "client",
        "condition",
        "empty",
        "isempty",
        "key",
        "qdrant",
        "records",
        "reports",
        "the",
        "useful"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5069642857142856,
      "overall": 0.7023214285714285
    }
  },
  {
    "text": "### Is Null  It is not possible to test for `NULL` values with the **match** condition. We have to use `IsNull` condition instead: ```json {     \"is_null\": {         \"key\": \"reports\"     } } ``` ```python models.IsNullCondition(     is_null=models.PayloadField(key=\"reports\"), ) ``` ```typescript {   is_null: {     key: \"reports\"   } } ``` ```rust use qdrant_client::qdrant::Condition;  Condition::is_null(\"reports\") ``` ```java import static io.qdrant.client.ConditionFactory.isNull;  isNull(\"reports\"); ``` ```csharp using Qdrant.Client.Grpc; using static Qdrant.Client.Grpc.Conditions;  IsNull(\"reports\"); ``` ```go import \"github.com/qdrant/go-client/qdrant\"  qdrant.NewIsNull(\"reports\") ``` This condition will match all records where the field `reports` exists and has `NULL` value.",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0034",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Is Null"
      ],
      "heading_text": "Is Null",
      "token_count": 205,
      "char_count": 789,
      "start_char": 76224,
      "end_char": 77013,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5088235294117647,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.664506",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 205,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Is Null",
      "chunk_hash": "12f90b2195b838ed",
      "content_digest": "12f90b2195b838ed",
      "chunk_length": 789,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "reports",
          "qdrant",
          "null",
          "condition",
          "client",
          "isnull",
          "key",
          "the",
          "match",
          "use",
          "models",
          "import",
          "static",
          "using",
          "grpc",
          "not",
          "possible",
          "test",
          "for",
          "values"
        ],
        "term_weights": [
          {
            "term": "reports",
            "tf": 8,
            "weight": 0.091954
          },
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.091954
          },
          {
            "term": "null",
            "tf": 7,
            "weight": 0.08046
          },
          {
            "term": "condition",
            "tf": 5,
            "weight": 0.057471
          },
          {
            "term": "client",
            "tf": 5,
            "weight": 0.057471
          },
          {
            "term": "isnull",
            "tf": 4,
            "weight": 0.045977
          },
          {
            "term": "key",
            "tf": 3,
            "weight": 0.034483
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "match",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "static",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "grpc",
            "tf": 2,
            "weight": 0.022989
          },
          {
            "term": "not",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "possible",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "test",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011494
          },
          {
            "term": "values",
            "tf": 1,
            "weight": 0.011494
          }
        ],
        "unique_terms": 46,
        "total_terms": 87
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Is Null",
        "client",
        "condition",
        "isnull",
        "key",
        "match",
        "null",
        "qdrant",
        "reports",
        "the",
        "use"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5088235294117647,
      "overall": 0.7029411764705881
    }
  },
  {
    "text": "### Has id  This type of query is not related to payload, but can be very useful in some situations. For example, the user could mark some specific search results as irrelevant, or we want to search only among the specified points. ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"must\": [             { \"has_id\": [1,3,5,7,9,11] }         ]     }     ... } ``` ```python client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must=[             models.HasIdCondition(has_id=[1, 3, 5, 7, 9, 11]),         ],     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     must: [       {         has_id: [1, 3, 5, 7, 9, 11],       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder}; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;      client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\")             .filter(Filter::must([Condition::has_id([1, 3, 5, 7, 9, 11])])),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.hasId; import static io.qdrant.client.PointIdFactory.id;  import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addMust(hasId(List.of(id(1), id(3), id(5), id(7), id(9), id(11))))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.ScrollAsync(collectionName: \"{collection_name}\", filter: HasId([1, 3, 5, 7, 9, 11])); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMust: []*qdrant.Condition{ \t\t\tqdrant.NewHasID( \t\t\t\tqdrant.NewIDNum(1), \t\t\t\tqdrant.NewIDNum(3), \t\t\t\tqdrant.NewIDNum(5), \t\t\t\tqdrant.NewIDNum(7), \t\t\t\tqdrant.NewIDNum(9), \t\t\t\tqdrant.NewIDNum(11), \t\t\t), \t\t}, \t}, }) ``` Filtered points would be: ```json [   { \"id\": 1, \"city\": \"London\", \"color\": \"green\" },   { \"id\": 3, \"city\": \"London\", \"color\": \"blue\" },   { \"id\": 5, \"city\": \"Moscow\", \"color\": \"green\" } ] ```",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0035",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 35,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Has id"
      ],
      "heading_text": "Has id",
      "token_count": 753,
      "char_count": 2568,
      "start_char": 77023,
      "end_char": 79591,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9046610169491527,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.671712",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 753,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Has id",
      "chunk_hash": "cd21e87f07370dda",
      "content_digest": "cd21e87f07370dda",
      "chunk_length": 2568,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "filter",
          "collection",
          "name",
          "scroll",
          "import",
          "newidnum",
          "has",
          "points",
          "must",
          "condition",
          "localhost",
          "6334",
          "build",
          "static",
          "hasid",
          "grpc",
          "scrollpoints",
          "city"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 25,
            "weight": 0.110132
          },
          {
            "term": "client",
            "tf": 18,
            "weight": 0.079295
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.052863
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.035242
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.035242
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.026432
          },
          {
            "term": "import",
            "tf": 6,
            "weight": 0.026432
          },
          {
            "term": "newidnum",
            "tf": 6,
            "weight": 0.026432
          },
          {
            "term": "has",
            "tf": 5,
            "weight": 0.022026
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.022026
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.022026
          },
          {
            "term": "condition",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "localhost",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "6334",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "static",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "hasid",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "grpc",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "scrollpoints",
            "tf": 3,
            "weight": 0.013216
          },
          {
            "term": "city",
            "tf": 3,
            "weight": 0.013216
          }
        ],
        "unique_terms": 96,
        "total_terms": 227
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Has id",
        "client",
        "collection",
        "filter",
        "has",
        "import",
        "name",
        "newidnum",
        "points",
        "qdrant",
        "scroll"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9046610169491527,
      "overall": 0.8015536723163842
    }
  },
  {
    "text": "### Has vector  *Available as of v1.13.0*  This condition enables filtering by the presence of a given named vector on a point. For example, if we have two named vector in our collection. ```http PUT /collections/{collection_name} {     \"vectors\": {         \"image\": {             \"size\": 4,             \"distance\": \"Dot\"         },         \"text\": {             \"size\": 8,             \"distance\": \"Cosine\"         }     },     \"sparse_vectors\": {         \"sparse-image\": {},         \"sparse-text\": {},     }, } ``` Some points in the collection might have all vectors, some might have only a subset of them. If your collection does not have named vectors, use an empty (`\"\"`) name. This is how you can search for points which have the dense `image` vector defined: ```http POST /collections/{collection_name}/points/scroll {     \"filter\": {         \"must\": [             { \"has_vector\": \"image\" }         ]     } } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.scroll(     collection_name=\"{collection_name}\",     scroll_filter=models.Filter(         must=[             models.HasVectorCondition(has_vector=\"image\"),         ],     ), ) ``` ```typescript client.scroll(\"{collection_name}\", {   filter: {     must: [       {         has_vector: \"image\",       },     ],   }, }); ``` ```rust use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder}; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;      client     .scroll(         ScrollPointsBuilder::new(\"{collection_name}\")             .filter(Filter::must([Condition::has_vector(\"image\")])),     )     .await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.hasVector; import static io.qdrant.client.PointIdFactory.id;  import io.qdrant.client.grpc.Points.Filter; import io.qdrant.client.grpc.Points.ScrollPoints;  client     .scrollAsync(         ScrollPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setFilter(                 Filter.newBuilder()                     .addMust(hasVector(\"image\"))                     .build())             .build())     .get(); ``` ```csharp using Qdrant.Client; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.ScrollAsync(collectionName: \"{collection_name}\", filter: HasVector(\"image\")); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Scroll(context.Background(), &qdrant.ScrollPoints{ \tCollectionName: \"{collection_name}\", \tFilter: &qdrant.Filter{ \t\tMust: []*qdrant.Condition{ \t\t\tqdrant.NewHasVector(         \"image\", \t\t\t), \t\t}, \t}, }) ```",
    "metadata": {
      "chunk_id": "6ae0ae51683d-0036",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "filename": "_documentation_concepts_filtering_.md",
      "file_extension": ".md",
      "chunk_index": 36,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Has vector"
      ],
      "heading_text": "Has vector",
      "token_count": 690,
      "char_count": 2811,
      "start_char": 79602,
      "end_char": 82413,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8979757085020244,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.680059",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 690,
      "document_id": "6ae0ae51683d",
      "document_name": "_documentation_concepts_filtering_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "source_filename": "_documentation_concepts_filtering_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_filtering\\_documentation_concepts_filtering_.md",
      "hierarchy_path": "Has vector",
      "chunk_hash": "66f7aea497371bae",
      "content_digest": "66f7aea497371bae",
      "chunk_length": 2811,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "collection",
          "filter",
          "name",
          "image",
          "vector",
          "import",
          "scroll",
          "has",
          "have",
          "points",
          "must",
          "condition",
          "http",
          "vectors",
          "localhost",
          "the",
          "named",
          "sparse"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 20,
            "weight": 0.074349
          },
          {
            "term": "client",
            "tf": 20,
            "weight": 0.074349
          },
          {
            "term": "collection",
            "tf": 12,
            "weight": 0.04461
          },
          {
            "term": "filter",
            "tf": 12,
            "weight": 0.04461
          },
          {
            "term": "name",
            "tf": 10,
            "weight": 0.037175
          },
          {
            "term": "image",
            "tf": 10,
            "weight": 0.037175
          },
          {
            "term": "vector",
            "tf": 8,
            "weight": 0.02974
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.026022
          },
          {
            "term": "scroll",
            "tf": 6,
            "weight": 0.022305
          },
          {
            "term": "has",
            "tf": 5,
            "weight": 0.018587
          },
          {
            "term": "have",
            "tf": 5,
            "weight": 0.018587
          },
          {
            "term": "points",
            "tf": 5,
            "weight": 0.018587
          },
          {
            "term": "must",
            "tf": 5,
            "weight": 0.018587
          },
          {
            "term": "condition",
            "tf": 4,
            "weight": 0.01487
          },
          {
            "term": "http",
            "tf": 4,
            "weight": 0.01487
          },
          {
            "term": "vectors",
            "tf": 4,
            "weight": 0.01487
          },
          {
            "term": "localhost",
            "tf": 4,
            "weight": 0.01487
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.011152
          },
          {
            "term": "named",
            "tf": 3,
            "weight": 0.011152
          },
          {
            "term": "sparse",
            "tf": 3,
            "weight": 0.011152
          }
        ],
        "unique_terms": 102,
        "total_terms": 269
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Has vector",
        "client",
        "collection",
        "filter",
        "has",
        "image",
        "import",
        "name",
        "qdrant",
        "scroll",
        "vector"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8979757085020244,
      "overall": 0.8326585695006748
    }
  }
]