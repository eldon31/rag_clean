[
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0000",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 688,
      "end_char": 1361,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.339803",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 1363,
      "end_char": 7024,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.364766",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0002",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 7026,
      "end_char": 9373,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.371845",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 576,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.8358974358974359
    }
  },
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 9375,
      "end_char": 10048,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.374390",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 10050,
      "end_char": 15711,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.412717",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - 5 Minute RAG with Qdrant and DeepSeek",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0005",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 603,
      "char_count": 2444,
      "start_char": 15713,
      "end_char": 18157,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.89921875,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.425912",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 603,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "2116bd4c39a901de",
      "content_digest": "2116bd4c39a901de",
      "chunk_length": 2444,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "and",
          "system",
          "semantic",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 32,
            "weight": 0.109966
          },
          {
            "term": "documentation",
            "tf": 23,
            "weight": 0.079038
          },
          {
            "term": "https",
            "tf": 22,
            "weight": 0.075601
          },
          {
            "term": "tech",
            "tf": 22,
            "weight": 0.075601
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.04811
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.034364
          },
          {
            "term": "with",
            "tf": 10,
            "weight": 0.034364
          },
          {
            "term": "rag",
            "tf": 10,
            "weight": 0.034364
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.024055
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.020619
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017182
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.017182
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017182
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013746
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.013746
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010309
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010309
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010309
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010309
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.006873
          }
        ],
        "unique_terms": 98,
        "total_terms": 291
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.89921875,
      "overall": 0.8330729166666666
    }
  },
  {
    "text": "# 5 Minute RAG with Qdrant and DeepSeek  | Time: 5 min | Level: Beginner | Output: [GitHub](https://github.com/qdrant/examples/blob/master/rag-with-qdrant-deepseek/deepseek-qdrant.ipynb) |   | | ----------- | --------------- | --------------------------------------------------------------------------------------------------------------- | - |  This tutorial demonstrates how to build a **Retrieval-Augmented Generation (RAG)** pipeline using Qdrant as a vector storage solution and DeepSeek for semantic query enrichment. RAG pipelines enhance Large Language Model (LLM) responses by providing contextually relevant data.",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0006",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "5 Minute RAG with Qdrant and DeepSeek"
      ],
      "heading_text": "5 Minute RAG with Qdrant and DeepSeek",
      "token_count": 129,
      "char_count": 623,
      "start_char": 18159,
      "end_char": 18782,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7218181818181818,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.427503",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 129,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "5 Minute RAG with Qdrant and DeepSeek",
      "chunk_hash": "e9ed241924cf86f8",
      "content_digest": "e9ed241924cf86f8",
      "chunk_length": 623,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "deepseek",
          "with",
          "and",
          "github",
          "minute",
          "time",
          "min",
          "level",
          "beginner",
          "output",
          "https",
          "com",
          "examples",
          "blob",
          "master",
          "ipynb",
          "this",
          "tutorial"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 5,
            "weight": 0.084746
          },
          {
            "term": "rag",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "deepseek",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.033898
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.033898
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.033898
          },
          {
            "term": "minute",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "time",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "min",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "level",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "beginner",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "output",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "examples",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "blob",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "master",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "ipynb",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "tutorial",
            "tf": 1,
            "weight": 0.016949
          }
        ],
        "unique_terms": 46,
        "total_terms": 59
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "5 Minute RAG with Qdrant and DeepSeek",
        "and",
        "deepseek",
        "github",
        "level",
        "min",
        "minute",
        "qdrant",
        "rag",
        "time",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7218181818181818,
      "overall": 0.8072727272727271
    }
  },
  {
    "text": "## Overview\n\nIn this tutorial, we will:\n\n1. Take sample text and turn it into vectors with FastEmbed.\n2. Send the vectors to a Qdrant collection.\n3. Connect Qdrant and DeepSeek into a minimal RAG pipeline.\n4. Ask DeepSeek different questions and test answer accuracy.\n5. Enrich DeepSeek prompts with content retrieved from Qdrant.\n6. Evaluate answer accuracy before and after.",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0007",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Overview"
      ],
      "heading_text": "Overview",
      "token_count": 88,
      "char_count": 376,
      "start_char": 18784,
      "end_char": 19160,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5359016393442623,
      "chunking_strategy": "hierarchical_precise_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.428226",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 88,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Overview",
      "chunk_hash": "6067eacf1da14247",
      "content_digest": "6067eacf1da14247",
      "chunk_length": 376,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "and",
          "qdrant",
          "deepseek",
          "into",
          "vectors",
          "with",
          "answer",
          "accuracy",
          "overview",
          "this",
          "tutorial",
          "will",
          "take",
          "sample",
          "text",
          "turn",
          "fastembed",
          "send",
          "the",
          "collection"
        ],
        "term_weights": [
          {
            "term": "and",
            "tf": 4,
            "weight": 0.083333
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.0625
          },
          {
            "term": "deepseek",
            "tf": 3,
            "weight": 0.0625
          },
          {
            "term": "into",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "answer",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "accuracy",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "overview",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "tutorial",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "will",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "take",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "sample",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "text",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "turn",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "fastembed",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "send",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "collection",
            "tf": 1,
            "weight": 0.020833
          }
        ],
        "unique_terms": 36,
        "total_terms": 48
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Overview",
        "accuracy",
        "and",
        "answer",
        "deepseek",
        "into",
        "overview",
        "qdrant",
        "this",
        "vectors",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5359016393442623,
      "overall": 0.6786338797814208
    }
  },
  {
    "text": "## Setup Qdrant ```python pip install \"qdrant-client[fastembed]>=1.14.1\" ``` [Qdrant](https://qdrant.tech) will act as a knowledge base providing the context information for the prompts we’ll be sending to the LLM. You can get a free-forever Qdrant cloud instance at <http://cloud.qdrant.io>. Learn about setting up your instance from the [Quickstart](https://qdrant.tech/documentation/quickstart-cloud/). ```python QDRANT_URL = \"https://xyz-example.eu-central.aws.cloud.qdrant.io:6333\" QDRANT_API_KEY = \"<your-api-key>\" ```",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0010",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Setup Qdrant"
      ],
      "heading_text": "Setup Qdrant",
      "token_count": 143,
      "char_count": 524,
      "start_char": 19400,
      "end_char": 19924,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5409090909090909,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.432485",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 143,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Setup Qdrant",
      "chunk_hash": "b53f1cea64e0fdef",
      "content_digest": "b53f1cea64e0fdef",
      "chunk_length": 524,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "the",
          "cloud",
          "https",
          "python",
          "tech",
          "instance",
          "your",
          "quickstart",
          "api",
          "key",
          "setup",
          "pip",
          "install",
          "client",
          "fastembed",
          "will",
          "act",
          "knowledge",
          "base"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.147059
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.058824
          },
          {
            "term": "cloud",
            "tf": 4,
            "weight": 0.058824
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.044118
          },
          {
            "term": "python",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "tech",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "instance",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "your",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "quickstart",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "api",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "key",
            "tf": 2,
            "weight": 0.029412
          },
          {
            "term": "setup",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "pip",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "install",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "client",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "fastembed",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "will",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "act",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "knowledge",
            "tf": 1,
            "weight": 0.014706
          },
          {
            "term": "base",
            "tf": 1,
            "weight": 0.014706
          }
        ],
        "unique_terms": 44,
        "total_terms": 68
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Setup Qdrant",
        "api",
        "cloud",
        "https",
        "instance",
        "python",
        "qdrant",
        "quickstart",
        "tech",
        "the",
        "your"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5409090909090909,
      "overall": 0.6803030303030303
    }
  },
  {
    "text": "### Instantiating Qdrant Client ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY) ```",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0011",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Instantiating Qdrant Client"
      ],
      "heading_text": "Instantiating Qdrant Client",
      "token_count": 45,
      "char_count": 155,
      "start_char": 19930,
      "end_char": 20085,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.57,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.433246",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 45,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Instantiating Qdrant Client",
      "chunk_hash": "318545b7d9c83b91",
      "content_digest": "318545b7d9c83b91",
      "chunk_length": 155,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "qdrantclient",
          "url",
          "api",
          "key",
          "instantiating",
          "python",
          "from",
          "import",
          "models"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.2
          },
          {
            "term": "client",
            "tf": 3,
            "weight": 0.15
          },
          {
            "term": "qdrantclient",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "url",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "api",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "key",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "instantiating",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "python",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "import",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.05
          }
        ],
        "unique_terms": 11,
        "total_terms": 20
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Instantiating Qdrant Client",
        "api",
        "client",
        "from",
        "import",
        "instantiating",
        "key",
        "python",
        "qdrant",
        "qdrantclient",
        "url"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.57,
      "overall": 0.7566666666666667
    }
  },
  {
    "text": "### Building the knowledge base  Qdrant will use vector embeddings of our facts to enrich the original prompt with some context. Thus, we need to store the vector embeddings and the facts used to generate them. We’ll be using the [bge-base-en-v1.5](https://huggingface.co/BAAI/bge-small-en-v1.5) model via [FastEmbed](https://github.com/qdrant/fastembed/) - A lightweight, fast, Python library for embeddings generation. The Qdrant client provides a handy integration with FastEmbed that makes building a knowledge base very straighforward. First, we need to create a collection, so Qdrant would know what vectors it will be dealing with, and then, we just pass our raw documents wrapped into `models.Document` to compute and upload the embeddings. ```python collection_name = \"knowledge_base\" model_name = \"BAAI/bge-small-en-v1.5\" client.create_collection(     collection_name=collection_name,     vectors_config=models.VectorParams(size=384, distance=models.Distance.COSINE) ) ``` ```python documents = [     \"Qdrant is a vector database & vector similarity search engine. It deploys as an API service providing search for the nearest high-dimensional vectors. With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!\",     \"Docker helps developers build, share, and run applications anywhere — without tedious environment configuration or management.\",     \"PyTorch is a machine learning framework based on the Torch library, used for applications such as computer vision and natural language processing.\",     \"MySQL is an open-source relational database management system (RDBMS). A relational database organizes data into one or more data tables in which data may be related to each other; these relations help structure the data. SQL is a language that programmers use to create, modify and extract data from the relational database, as well as control user access to the database.\",     \"NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. NGINX is known for its high performance, stability, rich feature set, simple configuration, and low resource consumption.\",     \"FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints.\",     \"SentenceTransformers is a Python framework for state-of-the-art sentence, text and image embeddings. You can use this framework to compute sentence / text embeddings for more than 100 languages. These embeddings can then be compared e.g. with cosine-similarity to find sentences with a similar meaning. This can be useful for semantic textual similar, semantic search, or paraphrase mining.\",     \"The cron command-line utility is a job scheduler on Unix-like operating systems. Users who set up and maintain software environments use cron to schedule jobs (commands or shell scripts), also known as cron jobs, to run periodically at fixed times, dates, or intervals.\", ] client.upsert(     collection_name=collection_name,     points=[         models.PointStruct(             id=idx,             vector=models.Document(text=document, model=model_name),             payload={\"document\": document},         )         for idx, document in enumerate(documents)     ], ) ```",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0012",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Building the knowledge base"
      ],
      "heading_text": "Building the knowledge base",
      "token_count": 696,
      "char_count": 3343,
      "start_char": 20088,
      "end_char": 23431,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6931506849315068,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.446488",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 696,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Building the knowledge base",
      "chunk_hash": "e39f5c0cdf1b2c1c",
      "content_digest": "e39f5c0cdf1b2c1c",
      "chunk_length": 3343,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "and",
          "for",
          "embeddings",
          "with",
          "collection",
          "name",
          "qdrant",
          "python",
          "document",
          "vector",
          "models",
          "database",
          "data",
          "base",
          "use",
          "model",
          "high",
          "can",
          "framework"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 14,
            "weight": 0.034653
          },
          {
            "term": "and",
            "tf": 11,
            "weight": 0.027228
          },
          {
            "term": "for",
            "tf": 10,
            "weight": 0.024752
          },
          {
            "term": "embeddings",
            "tf": 8,
            "weight": 0.019802
          },
          {
            "term": "with",
            "tf": 7,
            "weight": 0.017327
          },
          {
            "term": "collection",
            "tf": 7,
            "weight": 0.017327
          },
          {
            "term": "name",
            "tf": 7,
            "weight": 0.017327
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.014851
          },
          {
            "term": "python",
            "tf": 6,
            "weight": 0.014851
          },
          {
            "term": "document",
            "tf": 6,
            "weight": 0.014851
          },
          {
            "term": "vector",
            "tf": 5,
            "weight": 0.012376
          },
          {
            "term": "models",
            "tf": 5,
            "weight": 0.012376
          },
          {
            "term": "database",
            "tf": 5,
            "weight": 0.012376
          },
          {
            "term": "data",
            "tf": 5,
            "weight": 0.012376
          },
          {
            "term": "base",
            "tf": 4,
            "weight": 0.009901
          },
          {
            "term": "use",
            "tf": 4,
            "weight": 0.009901
          },
          {
            "term": "model",
            "tf": 4,
            "weight": 0.009901
          },
          {
            "term": "high",
            "tf": 4,
            "weight": 0.009901
          },
          {
            "term": "can",
            "tf": 4,
            "weight": 0.009901
          },
          {
            "term": "framework",
            "tf": 4,
            "weight": 0.009901
          }
        ],
        "unique_terms": 230,
        "total_terms": 404
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Building the knowledge base",
        "and",
        "collection",
        "document",
        "embeddings",
        "for",
        "name",
        "python",
        "qdrant",
        "the",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6931506849315068,
      "overall": 0.7643835616438356
    }
  },
  {
    "text": "## Setup DeepSeek  RAG changes the way we interact with Large Language Models. We’re converting a knowledge-oriented task, in which the model may create a counterfactual answer, into a language-oriented task. The latter expects the model to extract meaningful information and generate an answer. LLMs, when implemented correctly, are supposed to be carrying out language-oriented tasks. The task starts with the original prompt sent by the user. The same prompt is then vectorized and used as a search query for the most relevant facts. Those facts are combined with the original prompt to build a longer prompt containing more information. But let’s start simply by asking our question directly. ```python prompt = \"\"\" What tools should I need to use to build a web service using vector embeddings for search? \"\"\" ``` Using the Deepseek API requires providing the API key. You can obtain it from the [DeepSeek platform](https://platform.deepseek.com/api_keys). Now we can finally call the completion API. ```python import requests import json",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0013",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Setup DeepSeek"
      ],
      "heading_text": "Setup DeepSeek",
      "token_count": 205,
      "char_count": 1043,
      "start_char": 23438,
      "end_char": 24481,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5085185185185185,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.452830",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 205,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Setup DeepSeek",
      "chunk_hash": "b834af3c455d1c1c",
      "content_digest": "b834af3c455d1c1c",
      "chunk_length": 1043,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "prompt",
          "deepseek",
          "api",
          "with",
          "language",
          "oriented",
          "task",
          "model",
          "answer",
          "information",
          "and",
          "are",
          "original",
          "search",
          "for",
          "facts",
          "build",
          "python",
          "using"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 14,
            "weight": 0.097902
          },
          {
            "term": "prompt",
            "tf": 5,
            "weight": 0.034965
          },
          {
            "term": "deepseek",
            "tf": 4,
            "weight": 0.027972
          },
          {
            "term": "api",
            "tf": 4,
            "weight": 0.027972
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.020979
          },
          {
            "term": "language",
            "tf": 3,
            "weight": 0.020979
          },
          {
            "term": "oriented",
            "tf": 3,
            "weight": 0.020979
          },
          {
            "term": "task",
            "tf": 3,
            "weight": 0.020979
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "answer",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "information",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "original",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "facts",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "build",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "python",
            "tf": 2,
            "weight": 0.013986
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.013986
          }
        ],
        "unique_terms": 97,
        "total_terms": 143
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Setup DeepSeek",
        "answer",
        "api",
        "deepseek",
        "language",
        "model",
        "oriented",
        "prompt",
        "task",
        "the",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5085185185185185,
      "overall": 0.7028395061728395
    }
  },
  {
    "text": "### Extending the prompt  Even though the original answer sounds credible, it didn’t answer our question correctly. Instead, it gave us a generic description of an application stack. To improve the results, enriching the original prompt with the descriptions of the tools available seems like one of the possibilities. Let’s use a semantic knowledge base to augment the prompt with the descriptions of different technologies! ```python results = client.query_points(     collection_name=collection_name,     query=models.Document(text=prompt, model=model_name),     limit=3, ) results ``` Here is the response: ```bash QueryResponse(points=[     ScoredPoint(id=0, version=0, score=0.67437416, payload={'document': 'Qdrant is a vector database & vector similarity search engine. It deploys as an API service providing search for the nearest high-dimensional vectors. With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!'}, vector=None, shard_key=None, order_value=None),      ScoredPoint(id=6, version=0, score=0.63144326, payload={'document': 'SentenceTransformers is a Python framework for state-of-the-art sentence, text and image embeddings. You can use this framework to compute sentence / text embeddings for more than 100 languages. These embeddings can then be compared e.g. with cosine-similarity to find sentences with a similar meaning. This can be useful for semantic textual similar, semantic search, or paraphrase mining.'}, vector=None, shard_key=None, order_value=None),      ScoredPoint(id=5, version=0, score=0.6064749, payload={'document': 'FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints.'}, vector=None, shard_key=None, order_value=None) ]) ``` We used the original prompt to perform a semantic search over the set of tool descriptions. Now we can use these descriptions to augment the prompt and create more context. ```python context = \"\\n\".join(r.payload['document'] for r in results.points) context ``` The response is: ```bash 'Qdrant is a vector database & vector similarity search engine. It deploys as an API service providing search for the nearest high-dimensional vectors. With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more!\\nFastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints.\\nPyTorch is a machine learning framework based on the Torch library, used for applications such as computer vision and natural language processing.' ``` Finally, let’s build a metaprompt, the combination of the assumed role of the LLM, the original question, and the results from our semantic search that will force our LLM to use the provided context. By doing this, we effectively convert the knowledge-oriented task into a language task and hopefully reduce the chances of hallucinations. It also should make the response sound more relevant. ```python metaprompt = f\"\"\" You are a software architect. Answer the following question using the provided context. If you can't find the answer, do not pretend you know it, but answer \"I don't know\". Question: {prompt.strip()}  Context:  {context.strip()}  Answer: \"\"\"",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0016",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Extending the prompt"
      ],
      "heading_text": "Extending the prompt",
      "token_count": 721,
      "char_count": 3382,
      "start_char": 29434,
      "end_char": 32816,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6552631578947368,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.467534",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 721,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Extending the prompt",
      "chunk_hash": "ff114ee5e2f0d79e",
      "content_digest": "ff114ee5e2f0d79e",
      "chunk_length": 3382,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "for",
          "none",
          "with",
          "python",
          "prompt",
          "vector",
          "search",
          "can",
          "and",
          "context",
          "answer",
          "results",
          "semantic",
          "document",
          "embeddings",
          "more",
          "framework",
          "original",
          "question"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 30,
            "weight": 0.071429
          },
          {
            "term": "for",
            "tf": 11,
            "weight": 0.02619
          },
          {
            "term": "none",
            "tf": 9,
            "weight": 0.021429
          },
          {
            "term": "with",
            "tf": 8,
            "weight": 0.019048
          },
          {
            "term": "python",
            "tf": 8,
            "weight": 0.019048
          },
          {
            "term": "prompt",
            "tf": 7,
            "weight": 0.016667
          },
          {
            "term": "vector",
            "tf": 7,
            "weight": 0.016667
          },
          {
            "term": "search",
            "tf": 7,
            "weight": 0.016667
          },
          {
            "term": "can",
            "tf": 7,
            "weight": 0.016667
          },
          {
            "term": "and",
            "tf": 7,
            "weight": 0.016667
          },
          {
            "term": "context",
            "tf": 7,
            "weight": 0.016667
          },
          {
            "term": "answer",
            "tf": 6,
            "weight": 0.014286
          },
          {
            "term": "results",
            "tf": 5,
            "weight": 0.011905
          },
          {
            "term": "semantic",
            "tf": 5,
            "weight": 0.011905
          },
          {
            "term": "document",
            "tf": 5,
            "weight": 0.011905
          },
          {
            "term": "embeddings",
            "tf": 5,
            "weight": 0.011905
          },
          {
            "term": "more",
            "tf": 5,
            "weight": 0.011905
          },
          {
            "term": "framework",
            "tf": 5,
            "weight": 0.011905
          },
          {
            "term": "original",
            "tf": 4,
            "weight": 0.009524
          },
          {
            "term": "question",
            "tf": 4,
            "weight": 0.009524
          }
        ],
        "unique_terms": 189,
        "total_terms": 420
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Extending the prompt",
        "and",
        "can",
        "for",
        "none",
        "prompt",
        "python",
        "search",
        "the",
        "vector",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6552631578947368,
      "overall": 0.7517543859649122
    }
  },
  {
    "text": "# Look at the full metaprompt print(metaprompt) ``` **Response:** ```bash You are a software architect. Answer the following question using the provided context. If you can't find the answer, do not pretend you know it, but answer \"I don't know\". Question: What tools should I need to use to build a web service using vector embeddings for search? Context:  Qdrant is a vector database & vector similarity search engine. It deploys as an API service providing search for the nearest high-dimensional vectors. With Qdrant, embeddings or neural network encoders can be turned into full-fledged applications for matching, searching, recommending, and much more! FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints. PyTorch is a machine learning framework based on the Torch library, used for applications such as computer vision and natural language processing. Answer: ``` Our current prompt is much longer, and we also used a couple of strategies to make the responses even better:  1. The LLM has the role of software architect. 2. We provide more context to answer the question. 3. If the context contains no meaningful information, the model shouldn’t make up an answer. Let’s find out if that works as expected. **Question:** ```python query_deepseek(metaprompt) ``` **Answer:** ```bash 'To build a web service using vector embeddings for search, you can use the following tools:\\n\\n1. **Qdrant**: As a vector database and similarity search engine, Qdrant will handle the storage and retrieval of high-dimensional vectors. It provides an API service for searching and matching vectors, making it ideal for applications that require vector-based search functionality.\\n\\n2. **FastAPI**: This web framework is perfect for building the API layer of your web service. It is fast, easy to use, and based on Python type hints, which makes it a great choice for developing the backend of your service. FastAPI will allow you to expose endpoints that interact with Qdrant for vector search operations.\\n\\n3. **PyTorch**: If you need to generate vector embeddings from your data (e.g., text, images), PyTorch can be used to create and train neural network models that produce these embeddings. PyTorch is a powerful machine learning framework that supports a wide range of applications, including natural language processing and computer vision.\\n\\n### Summary:\\n- **Qdrant** for vector storage and search.\\n- **FastAPI** for building the web service API.\\n- **PyTorch** for generating vector embeddings (if needed).\\n\\nThese tools together provide a robust stack for building a web service that leverages vector embeddings for search functionality.' ```",
    "metadata": {
      "chunk_id": "8bf5c7bfaab0-0017",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "filename": "_documentation_rag-deepseek_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Look at the full metaprompt"
      ],
      "heading_text": "Look at the full metaprompt",
      "token_count": 581,
      "char_count": 2727,
      "start_char": 32831,
      "end_char": 35558,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6634382566585957,
      "chunking_strategy": "hierarchical_precise_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:37.479024",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 581,
      "document_id": "8bf5c7bfaab0",
      "document_name": "_documentation_rag-deepseek_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "source_filename": "_documentation_rag-deepseek_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_rag-deepseek\\_documentation_rag-deepseek_.md",
      "hierarchy_path": "Look at the full metaprompt",
      "chunk_hash": "15b20b69ed0dfc7b",
      "content_digest": "15b20b69ed0dfc7b",
      "chunk_length": 2727,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "for",
          "vector",
          "and",
          "search",
          "service",
          "answer",
          "web",
          "embeddings",
          "you",
          "qdrant",
          "that",
          "pytorch",
          "question",
          "context",
          "can",
          "api",
          "applications",
          "fastapi",
          "framework"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 17,
            "weight": 0.049419
          },
          {
            "term": "for",
            "tf": 16,
            "weight": 0.046512
          },
          {
            "term": "vector",
            "tf": 11,
            "weight": 0.031977
          },
          {
            "term": "and",
            "tf": 10,
            "weight": 0.02907
          },
          {
            "term": "search",
            "tf": 9,
            "weight": 0.026163
          },
          {
            "term": "service",
            "tf": 8,
            "weight": 0.023256
          },
          {
            "term": "answer",
            "tf": 7,
            "weight": 0.020349
          },
          {
            "term": "web",
            "tf": 7,
            "weight": 0.020349
          },
          {
            "term": "embeddings",
            "tf": 7,
            "weight": 0.020349
          },
          {
            "term": "you",
            "tf": 6,
            "weight": 0.017442
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.017442
          },
          {
            "term": "that",
            "tf": 6,
            "weight": 0.017442
          },
          {
            "term": "pytorch",
            "tf": 5,
            "weight": 0.014535
          },
          {
            "term": "question",
            "tf": 4,
            "weight": 0.011628
          },
          {
            "term": "context",
            "tf": 4,
            "weight": 0.011628
          },
          {
            "term": "can",
            "tf": 4,
            "weight": 0.011628
          },
          {
            "term": "api",
            "tf": 4,
            "weight": 0.011628
          },
          {
            "term": "applications",
            "tf": 4,
            "weight": 0.011628
          },
          {
            "term": "fastapi",
            "tf": 4,
            "weight": 0.011628
          },
          {
            "term": "framework",
            "tf": 4,
            "weight": 0.011628
          }
        ],
        "unique_terms": 160,
        "total_terms": 344
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Look at the full metaprompt",
        "and",
        "answer",
        "embeddings",
        "for",
        "search",
        "service",
        "the",
        "vector",
        "web",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6634382566585957,
      "overall": 0.7544794188861985
    }
  }
]