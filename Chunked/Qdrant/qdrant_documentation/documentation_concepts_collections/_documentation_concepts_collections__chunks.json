[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "f51a571d7810-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1037,
      "end_char": 3005,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.768739",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "f51a571d7810-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3687,
      "end_char": 5675,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.779161",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "f51a571d7810-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5677,
      "end_char": 5988,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.781328",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 83,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "f51a571d7810-0006",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6365,
      "end_char": 8333,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.793313",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "f51a571d7810-0008",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9015,
      "end_char": 11003,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.804588",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "## Setting up multitenancy\n\n**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](https://qdrant.tech/documentation/tutorials/multiple-partitions/)\n\n**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise.",
    "metadata": {
      "chunk_id": "f51a571d7810-0011",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Setting up multitenancy"
      ],
      "heading_text": "Setting up multitenancy",
      "token_count": 155,
      "char_count": 748,
      "start_char": 12845,
      "end_char": 13593,
      "semantic_score": 0.7,
      "structural_score": 0.9999999999999999,
      "retrieval_quality": 0.718,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.809839",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 155,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Setting up multitenancy",
      "chunk_hash": "36adfe46b6373d41",
      "content_digest": "36adfe46b6373d41",
      "chunk_length": 748,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "you",
          "multitenancy",
          "collections",
          "should",
          "how",
          "create",
          "most",
          "this",
          "approach",
          "https",
          "users",
          "but",
          "multiple",
          "when",
          "need",
          "may",
          "setting",
          "many",
          "cases",
          "only"
        ],
        "term_weights": [
          {
            "term": "you",
            "tf": 6,
            "weight": 0.064516
          },
          {
            "term": "multitenancy",
            "tf": 3,
            "weight": 0.032258
          },
          {
            "term": "collections",
            "tf": 3,
            "weight": 0.032258
          },
          {
            "term": "should",
            "tf": 3,
            "weight": 0.032258
          },
          {
            "term": "how",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "most",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "approach",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "users",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "but",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "multiple",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "when",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "need",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "may",
            "tf": 2,
            "weight": 0.021505
          },
          {
            "term": "setting",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "many",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "cases",
            "tf": 1,
            "weight": 0.010753
          },
          {
            "term": "only",
            "tf": 1,
            "weight": 0.010753
          }
        ],
        "unique_terms": 70,
        "total_terms": 93
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Setting up multitenancy",
        "approach",
        "collections",
        "create",
        "how",
        "https",
        "most",
        "multitenancy",
        "should",
        "this",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.9999999999999999,
      "retrieval_quality": 0.718,
      "overall": 0.8059999999999999
    }
  },
  {
    "text": "## Create a collection ```http PUT /collections/{collection_name} {     \"vectors\": {       \"size\": 300,       \"distance\": \"Cosine\"     } } ``` ```bash curl -X PUT http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {       \"size\": 300,       \"distance\": \"Cosine\"     }    }' ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.create_collection(     collection_name=\"{collection_name}\",     vectors_config=models.VectorParams(size=100, distance=models.Distance.COSINE), ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.createCollection(\"{collection_name}\", {   vectors: { size: 100, distance: \"Cosine\" }, }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{CreateCollectionBuilder, VectorParamsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .create_collection(         CreateCollectionBuilder::new(\"{collection_name}\")             .vectors_config(VectorParamsBuilder::new(100, Distance::Cosine)),     )     .await?; ``` ```java import io.qdrant.client.grpc.Collections.Distance; import io.qdrant.client.grpc.Collections.VectorParams; import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient;  QdrantClient client = new QdrantClient(     QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.createCollectionAsync(\"{collection_name}\",         VectorParams.newBuilder().setDistance(Distance.Cosine).setSize(100).build()).get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.CreateCollectionAsync( \tcollectionName: \"{collection_name}\", \tvectorsConfig: new VectorParams { Size = 100, Distance = Distance.Cosine } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.CreateCollection(context.Background(), &qdrant.CreateCollection{ \tCollectionName: \"{collection_name}\", \tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{ \t\tSize:     100, \t\tDistance: qdrant.Distance_Cosine, \t}), }) ``` In addition to the required options, you can also specify custom values for the following collection options:  - `hnsw_config` - see [indexing](https://qdrant.tech/documentation/concepts/indexing/#vector-index) for details. - `wal_config` - Write-Ahead-Log related configuration. See more details about [WAL](https://qdrant.tech/documentation/concepts/storage/#versioning) - `optimizers_config` - see [optimizer](https://qdrant.tech/documentation/concepts/optimizer/) for details. - `shard_number` - which defines how many shards the collection should have. See [distributed deployment](https://qdrant.tech/documentation/guides/distributed_deployment/#sharding) section for details. - `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload. - `quantization_config` - see [quantization](https://qdrant.tech/documentation/guides/quantization/#setting-up-quantization-in-qdrant) for details. - `strict_mode_config` - see [strict mode](https://qdrant.tech/documentation/guides/administration/#strict-mode) for details. Default parameters for the optional collection parameters are defined in [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml). See [schema definitions](https://api.qdrant.tech/api-reference/collections/create-collection) and a [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml) for more information about collection and vector parameters. *Available as of v1.2.0*  Vectors all live in RAM for very quick access. The `on_disk` parameter can be set in the vector configuration. If true, all vectors will live on disk. This will enable the use of [memmaps](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage), which is suitable for ingesting a large amount of data.",
    "metadata": {
      "chunk_id": "f51a571d7810-0012",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Create a collection"
      ],
      "heading_text": "Create a collection",
      "token_count": 1054,
      "char_count": 4223,
      "start_char": 13595,
      "end_char": 17818,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8798319327731092,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.823478",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1054,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Create a collection",
      "chunk_hash": "8a9762c83583bf70",
      "content_digest": "8a9762c83583bf70",
      "chunk_length": 4223,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "collection",
          "distance",
          "config",
          "for",
          "https",
          "name",
          "cosine",
          "qdrantclient",
          "the",
          "tech",
          "vectors",
          "localhost",
          "import",
          "see",
          "documentation",
          "size",
          "100",
          "new"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 34,
            "weight": 0.07265
          },
          {
            "term": "client",
            "tf": 23,
            "weight": 0.049145
          },
          {
            "term": "collection",
            "tf": 17,
            "weight": 0.036325
          },
          {
            "term": "distance",
            "tf": 12,
            "weight": 0.025641
          },
          {
            "term": "config",
            "tf": 12,
            "weight": 0.025641
          },
          {
            "term": "for",
            "tf": 11,
            "weight": 0.023504
          },
          {
            "term": "https",
            "tf": 10,
            "weight": 0.021368
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.019231
          },
          {
            "term": "cosine",
            "tf": 8,
            "weight": 0.017094
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.017094
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.017094
          },
          {
            "term": "tech",
            "tf": 8,
            "weight": 0.017094
          },
          {
            "term": "vectors",
            "tf": 7,
            "weight": 0.014957
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.014957
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.014957
          },
          {
            "term": "see",
            "tf": 7,
            "weight": 0.014957
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.014957
          },
          {
            "term": "size",
            "tf": 6,
            "weight": 0.012821
          },
          {
            "term": "100",
            "tf": 6,
            "weight": 0.012821
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.012821
          }
        ],
        "unique_terms": 167,
        "total_terms": 468
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Create a collection",
        "client",
        "collection",
        "config",
        "cosine",
        "distance",
        "for",
        "https",
        "name",
        "qdrant",
        "qdrantclient"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8798319327731092,
      "overall": 0.8266106442577031
    }
  },
  {
    "text": "### Create collection from another collection  *Available as of v1.0.0*  It is possible to initialize a collection from another existing collection. This might be useful for experimenting quickly with different configurations for the same data set. Usage of the `init_from` can create unpredictable load on the qdrant cluster. It is not recommended to use `init_from` in performance-sensitive environments. Make sure the vectors have the same `size` and `distance` function when setting up the vectors configuration in the new collection. If you used the previous sample code, `\"size\": 300` and `\"distance\": \"Cosine\"`. ```http PUT /collections/{collection_name} {     \"vectors\": {       \"size\": 100,       \"distance\": \"Cosine\"     },     \"init_from\": {        \"collection\": \"{from_collection_name}\"     } } ``` ```bash curl -X PUT http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {       \"size\": 300,       \"distance\": \"Cosine\"     },     \"init_from\": {        \"collection\": {from_collection_name}     }   }' ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.create_collection(     collection_name=\"{collection_name}\",     vectors_config=models.VectorParams(size=100, distance=models.Distance.COSINE),     init_from=models.InitFrom(collection=\"{from_collection_name}\"), ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.createCollection(\"{collection_name}\", {   vectors: { size: 100, distance: \"Cosine\" },   init_from: { collection: \"{from_collection_name}\" }, }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .create_collection(         CreateCollectionBuilder::new(\"{collection_name}\")             .vectors_config(VectorParamsBuilder::new(100, Distance::Cosine))             .init_from_collection(\"{from_collection_name}\"),     )     .await?; ``` ```java import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Collections.CreateCollection; import io.qdrant.client.grpc.Collections.Distance; import io.qdrant.client.grpc.Collections.VectorParams; import io.qdrant.client.grpc.Collections.VectorsConfig;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .createCollectionAsync(         CreateCollection.newBuilder()             .setCollectionName(\"{collection_name}\")             .setVectorsConfig(                 VectorsConfig.newBuilder()                     .setParams(                         VectorParams.newBuilder()                             .setSize(100)                             .setDistance(Distance.Cosine)                             .build()))             .setInitFromCollection(\"{from_collection_name}\")             .build())     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.CreateCollectionAsync( \tcollectionName: \"{collection_name}\", \tvectorsConfig: new VectorParams { Size = 100, Distance = Distance.Cosine }, \tinitFromCollection: \"{from_collection_name}\" ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.CreateCollection(context.Background(), &qdrant.CreateCollection{ \tCollectionName: \"{collection_name}\", \tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{ \t\tSize:     100, \t\tDistance: qdrant.Distance_Cosine, \t}), \tInitFromCollection: qdrant.PtrOf(\"{from_collection_name}\"), }) ```",
    "metadata": {
      "chunk_id": "f51a571d7810-0013",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Create collection from another collection"
      ],
      "heading_text": "Create collection from another collection",
      "token_count": 919,
      "char_count": 3855,
      "start_char": 17832,
      "end_char": 21687,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6956521739130435,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.836012",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 919,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Create collection from another collection",
      "chunk_hash": "26bc9a3fff4c7f29",
      "content_digest": "26bc9a3fff4c7f29",
      "chunk_length": 3855,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "qdrant",
          "client",
          "from",
          "name",
          "distance",
          "cosine",
          "import",
          "the",
          "size",
          "qdrantclient",
          "init",
          "vectors",
          "new",
          "100",
          "localhost",
          "collections",
          "vectorparams",
          "createcollection",
          "grpc"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 29,
            "weight": 0.078167
          },
          {
            "term": "qdrant",
            "tf": 25,
            "weight": 0.067385
          },
          {
            "term": "client",
            "tf": 25,
            "weight": 0.067385
          },
          {
            "term": "from",
            "tf": 20,
            "weight": 0.053908
          },
          {
            "term": "name",
            "tf": 17,
            "weight": 0.045822
          },
          {
            "term": "distance",
            "tf": 15,
            "weight": 0.040431
          },
          {
            "term": "cosine",
            "tf": 9,
            "weight": 0.024259
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.024259
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.021563
          },
          {
            "term": "size",
            "tf": 8,
            "weight": 0.021563
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.021563
          },
          {
            "term": "init",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "vectors",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "new",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.018868
          },
          {
            "term": "collections",
            "tf": 6,
            "weight": 0.016173
          },
          {
            "term": "vectorparams",
            "tf": 5,
            "weight": 0.013477
          },
          {
            "term": "createcollection",
            "tf": 5,
            "weight": 0.013477
          },
          {
            "term": "grpc",
            "tf": 5,
            "weight": 0.013477
          }
        ],
        "unique_terms": 116,
        "total_terms": 371
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Create collection from another collection",
        "client",
        "collection",
        "cosine",
        "distance",
        "from",
        "import",
        "name",
        "qdrant",
        "size",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6956521739130435,
      "overall": 0.7652173913043478
    }
  },
  {
    "text": "### Collection with multiple vectors  *Available as of v0.10.0*  It is possible to have multiple vectors per record. This feature allows for multiple vector storages per collection. To distinguish vectors in one record, they should have a unique name defined when creating the collection. Each named vector in this mode has its distance and size: ```http PUT /collections/{collection_name} {     \"vectors\": {         \"image\": {             \"size\": 4,             \"distance\": \"Dot\"         },         \"text\": {             \"size\": 8,             \"distance\": \"Cosine\"         }     } } ``` ```bash curl -X PUT http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {         \"image\": {             \"size\": 4,             \"distance\": \"Dot\"         },         \"text\": {             \"size\": 8,             \"distance\": \"Cosine\"         }       }     }' ``` ```python from qdrant_client import QdrantClient, models   client = QdrantClient(url=\"http://localhost:6333\")  client.create_collection(     collection_name=\"{collection_name}\",     vectors_config={         \"image\": models.VectorParams(size=4, distance=models.Distance.DOT),         \"text\": models.VectorParams(size=8, distance=models.Distance.COSINE),     }, ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.createCollection(\"{collection_name}\", {   vectors: {     image: { size: 4, distance: \"Dot\" },     text: { size: 8, distance: \"Cosine\" },   }, }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{     CreateCollectionBuilder, Distance, VectorParamsBuilder, VectorsConfigBuilder, };  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  let mut vectors_config = VectorsConfigBuilder::default(); vectors_config     .add_named_vector_params(\"image\", VectorParamsBuilder::new(4, Distance::Dot).build()); vectors_config.add_named_vector_params(     \"text\",     VectorParamsBuilder::new(8, Distance::Cosine).build(), );  client     .create_collection(         CreateCollectionBuilder::new(\"{collection_name}\").vectors_config(vectors_config),     )     .await?; ``` ```java import java.util.Map;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Collections.Distance; import io.qdrant.client.grpc.Collections.VectorParams;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .createCollectionAsync(         \"{collection_name}\",         Map.of(             \"image\", VectorParams.newBuilder().setSize(4).setDistance(Distance.Dot).build(),             \"text\",                 VectorParams.newBuilder().setSize(8).setDistance(Distance.Cosine).build()))     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.CreateCollectionAsync( \tcollectionName: \"{collection_name}\", \tvectorsConfig: new VectorParamsMap \t{ \t\tMap = \t\t{ \t\t\t[\"image\"] = new VectorParams { Size = 4, Distance = Distance.Dot }, \t\t\t[\"text\"] = new VectorParams { Size = 8, Distance = Distance.Cosine }, \t\t} \t} ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.CreateCollection(context.Background(), &qdrant.CreateCollection{ \tCollectionName: \"{collection_name}\", \tVectorsConfig: qdrant.NewVectorsConfigMap( \t\tmap[string]*qdrant.VectorParams{ \t\t\t\"image\": { \t\t\t\tSize:     4, \t\t\t\tDistance: qdrant.Distance_Dot, \t\t\t}, \t\t\t\"text\": { \t\t\t\tSize:     8, \t\t\t\tDistance: qdrant.Distance_Cosine, \t\t\t}, \t\t}), }) ``` For rare use cases, it is possible to create a collection without any vector storage. *Available as of v1.1.1*  For each named vector you can optionally specify [`hnsw_config`](https://qdrant.tech/documentation/concepts/indexing/#vector-index) or [`quantization_config`](https://qdrant.tech/documentation/guides/quantization/#setting-up-quantization-in-qdrant) to deviate from the collection configuration. This can be useful to fine-tune search performance on a vector level. *Available as of v1.2.0*  Vectors all live in RAM for very quick access. On a per-vector basis you can set `on_disk` to true to store all vectors on disk at all times. This will enable the use of [memmaps](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage), which is suitable for ingesting a large amount of data.",
    "metadata": {
      "chunk_id": "f51a571d7810-0014",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Collection with multiple vectors"
      ],
      "heading_text": "Collection with multiple vectors",
      "token_count": 1173,
      "char_count": 4561,
      "start_char": 21700,
      "end_char": 26261,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.864423076923077,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.852697",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1173,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Collection with multiple vectors",
      "chunk_hash": "9216f4219bc909dd",
      "content_digest": "9216f4219bc909dd",
      "chunk_length": 4561,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "distance",
          "client",
          "collection",
          "vectors",
          "size",
          "name",
          "vector",
          "config",
          "new",
          "image",
          "dot",
          "text",
          "cosine",
          "import",
          "qdrantclient",
          "vectorparams",
          "localhost",
          "build",
          "for"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 26,
            "weight": 0.057522
          },
          {
            "term": "distance",
            "tf": 25,
            "weight": 0.05531
          },
          {
            "term": "client",
            "tf": 23,
            "weight": 0.050885
          },
          {
            "term": "collection",
            "tf": 16,
            "weight": 0.035398
          },
          {
            "term": "vectors",
            "tf": 14,
            "weight": 0.030973
          },
          {
            "term": "size",
            "tf": 13,
            "weight": 0.028761
          },
          {
            "term": "name",
            "tf": 10,
            "weight": 0.022124
          },
          {
            "term": "vector",
            "tf": 9,
            "weight": 0.019912
          },
          {
            "term": "config",
            "tf": 9,
            "weight": 0.019912
          },
          {
            "term": "new",
            "tf": 9,
            "weight": 0.019912
          },
          {
            "term": "image",
            "tf": 8,
            "weight": 0.017699
          },
          {
            "term": "dot",
            "tf": 8,
            "weight": 0.017699
          },
          {
            "term": "text",
            "tf": 8,
            "weight": 0.017699
          },
          {
            "term": "cosine",
            "tf": 8,
            "weight": 0.017699
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.017699
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.017699
          },
          {
            "term": "vectorparams",
            "tf": 8,
            "weight": 0.017699
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.015487
          },
          {
            "term": "build",
            "tf": 6,
            "weight": 0.013274
          },
          {
            "term": "for",
            "tf": 5,
            "weight": 0.011062
          }
        ],
        "unique_terms": 155,
        "total_terms": 452
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Collection with multiple vectors",
        "client",
        "collection",
        "config",
        "distance",
        "name",
        "new",
        "qdrant",
        "size",
        "vector",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.864423076923077,
      "overall": 0.8214743589743589
    }
  },
  {
    "text": "### Vector datatypes  *Available as of v1.9.0*  Some embedding providers may provide embeddings in a pre-quantized format. One of the most notable examples is the [Cohere int8 & binary embeddings](https://cohere.com/blog/int8-binary-embeddings). Qdrant has direct support for uint8 embeddings, which you can also use in combination with binary quantization. To create a collection with uint8 embeddings, you can use the following configuration: ```http PUT /collections/{collection_name} {     \"vectors\": {       \"size\": 1024,       \"distance\": \"Cosine\",       \"datatype\": \"uint8\"     } } ``` ```bash curl -X PUT http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {       \"size\": 1024,       \"distance\": \"Cosine\",       \"datatype\": \"uint8\"     }   }' ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.create_collection(     collection_name=\"{collection_name}\",     vectors_config=models.VectorParams(         size=1024,         distance=models.Distance.COSINE,         datatype=models.Datatype.UINT8,     ), ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.createCollection(\"{collection_name}\", {   vectors: {     image: { size: 1024, distance: \"Cosine\", datatype: \"uint8\" },   }, }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{     CreateCollectionBuilder, Datatype, Distance, VectorParamsBuilder, };  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client     .create_collection(         CreateCollectionBuilder::new(\"{collection_name}\").vectors_config(             VectorParamsBuilder::new(1024, Distance::Cosine).datatype(Datatype::Uint8),         ),     )     .await?; ``` ```java import io.qdrant.client.QdrantClient; import io.qdrant.client.grpc.Collections.Datatype; import io.qdrant.client.grpc.Collections.Distance; import io.qdrant.client.grpc.Collections.VectorParams;  QdrantClient client = new QdrantClient(     QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .createCollectionAsync(\"{collection_name}\",         VectorParams.newBuilder()             .setSize(1024)             .setDistance(Distance.Cosine)             .setDatatype(Datatype.Uint8)             .build())     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.CreateCollectionAsync(   collectionName: \"{collection_name}\",   vectorsConfig: new VectorParams {     Size = 1024, Distance = Distance.Cosine, Datatype = Datatype.Uint8   } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.CreateCollection(context.Background(), &qdrant.CreateCollection{ \tCollectionName: \"{collection_name}\", \tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{ \t\tSize:     1024, \t\tDistance: qdrant.Distance_Cosine, \t\tDatatype: qdrant.Datatype_Uint8.Enum(), \t}), }) ``` Vectors with `uint8` datatype are stored in a more compact format, which can save memory and improve search speed at the cost of some precision. If you choose to use the `uint8` datatype, elements of the vector will be stored as unsigned 8-bit integers, which can take values **from 0 to 255**.",
    "metadata": {
      "chunk_id": "f51a571d7810-0015",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Vector datatypes"
      ],
      "heading_text": "Vector datatypes",
      "token_count": 894,
      "char_count": 3447,
      "start_char": 26274,
      "end_char": 29721,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8938906752411575,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.865468",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 894,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Vector datatypes",
      "chunk_hash": "8262507868090f46",
      "content_digest": "8262507868090f46",
      "chunk_length": 3447,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "datatype",
          "distance",
          "uint8",
          "collection",
          "name",
          "1024",
          "cosine",
          "qdrantclient",
          "localhost",
          "import",
          "the",
          "vectors",
          "size",
          "new",
          "embeddings",
          "use",
          "collections",
          "vectorparams"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 23,
            "weight": 0.064972
          },
          {
            "term": "client",
            "tf": 23,
            "weight": 0.064972
          },
          {
            "term": "datatype",
            "tf": 16,
            "weight": 0.045198
          },
          {
            "term": "distance",
            "tf": 13,
            "weight": 0.036723
          },
          {
            "term": "uint8",
            "tf": 12,
            "weight": 0.033898
          },
          {
            "term": "collection",
            "tf": 12,
            "weight": 0.033898
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.025424
          },
          {
            "term": "1024",
            "tf": 8,
            "weight": 0.022599
          },
          {
            "term": "cosine",
            "tf": 8,
            "weight": 0.022599
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.022599
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.019774
          },
          {
            "term": "import",
            "tf": 7,
            "weight": 0.019774
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.016949
          },
          {
            "term": "vectors",
            "tf": 6,
            "weight": 0.016949
          },
          {
            "term": "size",
            "tf": 6,
            "weight": 0.016949
          },
          {
            "term": "new",
            "tf": 6,
            "weight": 0.016949
          },
          {
            "term": "embeddings",
            "tf": 5,
            "weight": 0.014124
          },
          {
            "term": "use",
            "tf": 5,
            "weight": 0.014124
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.014124
          },
          {
            "term": "vectorparams",
            "tf": 5,
            "weight": 0.014124
          }
        ],
        "unique_terms": 128,
        "total_terms": 354
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "1024",
        "Vector datatypes",
        "client",
        "collection",
        "cosine",
        "datatype",
        "distance",
        "name",
        "qdrant",
        "qdrantclient",
        "uint8"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8938906752411575,
      "overall": 0.8312968917470526
    }
  },
  {
    "text": "### Collection with sparse vectors  *Available as of v1.7.0*  Qdrant supports sparse vectors as a first-class citizen. Sparse vectors are useful for text search, where each word is represented as a separate dimension. Collections can contain sparse vectors as additional [named vectors](#collection-with-multiple-vectors.md) along side regular dense vectors in a single point. Unlike dense vectors, sparse vectors must be named. And additionally, sparse vectors and dense vectors must have different names within a collection. ```http PUT /collections/{collection_name} {     \"sparse_vectors\": {         \"text\": { }     } } ``` ```bash curl -X PUT http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"sparse_vectors\": {         \"text\": { }     }   }' ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.create_collection(     collection_name=\"{collection_name}\",     vectors_config={},     sparse_vectors_config={         \"text\": models.SparseVectorParams(),     }, ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.createCollection(\"{collection_name}\", {   sparse_vectors: {     text: { },   }, }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{     CreateCollectionBuilder, SparseVectorParamsBuilder, SparseVectorsConfigBuilder, };  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  let mut sparse_vector_config = SparseVectorsConfigBuilder::default();  sparse_vector_config.add_named_vector_params(\"text\", SparseVectorParamsBuilder::default());  client     .create_collection(         CreateCollectionBuilder::new(\"{collection_name}\")             .sparse_vectors_config(sparse_vector_config),     )     .await?; ``` ```java import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Collections.CreateCollection; import io.qdrant.client.grpc.Collections.SparseVectorConfig; import io.qdrant.client.grpc.Collections.SparseVectorParams;  QdrantClient client =     new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .createCollectionAsync(         CreateCollection.newBuilder()             .setCollectionName(\"{collection_name}\")             .setSparseVectorsConfig(                 SparseVectorConfig.newBuilder()                     .putMap(\"text\", SparseVectorParams.getDefaultInstance()))             .build())     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.CreateCollectionAsync( \tcollectionName: \"{collection_name}\", \tsparseVectorsConfig: (\"text\", new SparseVectorParams()) ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.CreateCollection(context.Background(), &qdrant.CreateCollection{ \tCollectionName: \"{collection_name}\", \tSparseVectorsConfig: qdrant.NewSparseVectorsConfig( \t\tmap[string]*qdrant.SparseVectorParams{ \t\t\t\"text\": {}, \t\t}), }) ``` Outside of a unique name, there are no required configuration parameters for sparse vectors. The distance function for sparse vectors is always `Dot` and does not need to be specified. However, there are optional parameters to tune the underlying [sparse vector index](https://qdrant.tech/documentation/concepts/indexing/#sparse-vector-index).",
    "metadata": {
      "chunk_id": "f51a571d7810-0016",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Collection with sparse vectors"
      ],
      "heading_text": "Collection with sparse vectors",
      "token_count": 830,
      "char_count": 3568,
      "start_char": 29733,
      "end_char": 33301,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.695608108108108,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.876613",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 830,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Collection with sparse vectors",
      "chunk_hash": "0823eb2a3c3f7f67",
      "content_digest": "0823eb2a3c3f7f67",
      "chunk_length": 3568,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "client",
          "qdrant",
          "vectors",
          "sparse",
          "collection",
          "name",
          "text",
          "import",
          "qdrantclient",
          "localhost",
          "config",
          "collections",
          "vector",
          "sparsevectorparams",
          "new",
          "createcollection",
          "http",
          "6334",
          "grpc",
          "are"
        ],
        "term_weights": [
          {
            "term": "client",
            "tf": 24,
            "weight": 0.069164
          },
          {
            "term": "qdrant",
            "tf": 23,
            "weight": 0.066282
          },
          {
            "term": "vectors",
            "tf": 19,
            "weight": 0.054755
          },
          {
            "term": "sparse",
            "tf": 18,
            "weight": 0.051873
          },
          {
            "term": "collection",
            "tf": 14,
            "weight": 0.040346
          },
          {
            "term": "name",
            "tf": 10,
            "weight": 0.028818
          },
          {
            "term": "text",
            "tf": 9,
            "weight": 0.025937
          },
          {
            "term": "import",
            "tf": 8,
            "weight": 0.023055
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.023055
          },
          {
            "term": "localhost",
            "tf": 7,
            "weight": 0.020173
          },
          {
            "term": "config",
            "tf": 7,
            "weight": 0.020173
          },
          {
            "term": "collections",
            "tf": 6,
            "weight": 0.017291
          },
          {
            "term": "vector",
            "tf": 6,
            "weight": 0.017291
          },
          {
            "term": "sparsevectorparams",
            "tf": 5,
            "weight": 0.014409
          },
          {
            "term": "new",
            "tf": 5,
            "weight": 0.014409
          },
          {
            "term": "createcollection",
            "tf": 5,
            "weight": 0.014409
          },
          {
            "term": "http",
            "tf": 4,
            "weight": 0.011527
          },
          {
            "term": "6334",
            "tf": 4,
            "weight": 0.011527
          },
          {
            "term": "grpc",
            "tf": 4,
            "weight": 0.011527
          },
          {
            "term": "are",
            "tf": 3,
            "weight": 0.008646
          }
        ],
        "unique_terms": 136,
        "total_terms": 347
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Collection with sparse vectors",
        "client",
        "collection",
        "import",
        "localhost",
        "name",
        "qdrant",
        "qdrantclient",
        "sparse",
        "text",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.695608108108108,
      "overall": 0.7652027027027026
    }
  },
  {
    "text": "### Update collection parameters  Dynamic parameter updates may be helpful, for example, for more efficient initial loading of vectors. For example, you can disable indexing during the upload process, and enable it immediately after the upload is finished. As a result, you will not waste extra computation resources on rebuilding the index. The following command enables indexing for segments that have more than 10000 kB of vectors stored: ```http PATCH /collections/{collection_name} {     \"optimizers_config\": {         \"indexing_threshold\": 10000     } } ``` ```bash curl -X PATCH http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"optimizers_config\": {         \"indexing_threshold\": 10000     }   }' ``` ```python client.update_collection(     collection_name=\"{collection_name}\",     optimizers_config=models.OptimizersConfigDiff(indexing_threshold=10000), ) ``` ```typescript client.updateCollection(\"{collection_name}\", {   optimizers_config: {     indexing_threshold: 10000,   }, }); ``` ```rust use qdrant_client::qdrant::{OptimizersConfigDiffBuilder, UpdateCollectionBuilder};  client     .update_collection(         UpdateCollectionBuilder::new(\"{collection_name}\").optimizers_config(             OptimizersConfigDiffBuilder::default().indexing_threshold(10000),         ),     )     .await?; ``` ```java import io.qdrant.client.grpc.Collections.OptimizersConfigDiff; import io.qdrant.client.grpc.Collections.UpdateCollection;  client.updateCollectionAsync(     UpdateCollection.newBuilder()         .setCollectionName(\"{collection_name}\")         .setOptimizersConfig(             OptimizersConfigDiff.newBuilder().setIndexingThreshold(10000).build())         .build()); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.UpdateCollectionAsync( \tcollectionName: \"{collection_name}\", \toptimizersConfig: new OptimizersConfigDiff { IndexingThreshold = 10000 } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.UpdateCollection(context.Background(), &qdrant.UpdateCollection{ \tCollectionName: \"{collection_name}\", \tOptimizersConfig: &qdrant.OptimizersConfigDiff{ \t\tIndexingThreshold: qdrant.PtrOf(uint64(10000)), \t}, }) ``` The following parameters can be updated:  - `optimizers_config` - see [optimizer](https://qdrant.tech/documentation/concepts/optimizer/) for details. - `hnsw_config` - see [indexing](https://qdrant.tech/documentation/concepts/indexing/#vector-index) for details. - `quantization_config` - see [quantization](https://qdrant.tech/documentation/guides/quantization/#setting-up-quantization-in-qdrant) for details. - `vectors_config` - vector-specific configuration, including individual `hnsw_config`, `quantization_config` and `on_disk` settings. - `params` - other collection parameters, including `write_consistency_factor` and `on_disk_payload`. - `strict_mode_config` - see [strict mode](https://qdrant.tech/documentation/guides/administration/#strict-mode) for details. Full API specification is available in [schema definitions](https://api.qdrant.tech/api-reference/collections/update-collection). Calls to this endpoint may be blocking as it waits for existing optimizers to finish. We recommended against using this in a production database as it may introduce huge overhead due to the rebuilding of the index.",
    "metadata": {
      "chunk_id": "f51a571d7810-0019",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Update collection parameters"
      ],
      "heading_text": "Update collection parameters",
      "token_count": 814,
      "char_count": 3507,
      "start_char": 34600,
      "end_char": 38107,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.897938144329897,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.890929",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 814,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Update collection parameters",
      "chunk_hash": "d811c7654ec38a55",
      "content_digest": "d811c7654ec38a55",
      "chunk_length": 3507,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "collection",
          "client",
          "config",
          "for",
          "indexing",
          "10000",
          "name",
          "the",
          "optimizers",
          "collections",
          "threshold",
          "optimizersconfigdiff",
          "updatecollection",
          "https",
          "tech",
          "quantization",
          "update",
          "see",
          "documentation"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 19,
            "weight": 0.054598
          },
          {
            "term": "collection",
            "tf": 14,
            "weight": 0.04023
          },
          {
            "term": "client",
            "tf": 14,
            "weight": 0.04023
          },
          {
            "term": "config",
            "tf": 13,
            "weight": 0.037356
          },
          {
            "term": "for",
            "tf": 9,
            "weight": 0.025862
          },
          {
            "term": "indexing",
            "tf": 9,
            "weight": 0.025862
          },
          {
            "term": "10000",
            "tf": 9,
            "weight": 0.025862
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.025862
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.020115
          },
          {
            "term": "optimizers",
            "tf": 7,
            "weight": 0.020115
          },
          {
            "term": "collections",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "threshold",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "optimizersconfigdiff",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "updatecollection",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "https",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "tech",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "quantization",
            "tf": 5,
            "weight": 0.014368
          },
          {
            "term": "update",
            "tf": 4,
            "weight": 0.011494
          },
          {
            "term": "see",
            "tf": 4,
            "weight": 0.011494
          },
          {
            "term": "documentation",
            "tf": 4,
            "weight": 0.011494
          }
        ],
        "unique_terms": 154,
        "total_terms": 348
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "10000",
        "Update collection parameters",
        "client",
        "collection",
        "config",
        "for",
        "indexing",
        "name",
        "optimizers",
        "qdrant",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.897938144329897,
      "overall": 0.8326460481099657
    }
  },
  {
    "text": "#### Update vector parameters  *Available as of v1.4.0*  To update vector parameters using the collection update API, you must always specify a vector name. If your collection does not have named vectors, use an empty (`\"\"`) name. Qdrant 1.4 adds support for updating more collection parameters at runtime. HNSW index, quantization and disk configurations can now be changed without recreating a collection. Segments (with index and quantized data) will automatically be rebuilt in the background to match updated parameters. To put vector data on disk for a collection that **does not have** named vectors, use `\"\"` as name: ```http PATCH /collections/{collection_name} {     \"vectors\": {         \"\": {             \"on_disk\": true         }     } } ``` ```bash curl -X PATCH http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {         \"\": {              \"on_disk\": true        }     }   }' ``` To put vector data on disk for a collection that **does have** named vectors:  Note: To create a vector name, follow the procedure from our [Points](https://qdrant.tech/documentation/concepts/points/#create-vector-name). ```http PATCH /collections/{collection_name} {     \"vectors\": {         \"my_vector\": {             \"on_disk\": true         }     } } ``` ```bash curl -X PATCH http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {         \"my_vector\": {             \"on_disk\": true        }     }   }' ``` In the following example the HNSW index and quantization parameters are updated, both for the whole collection, and for `my_vector` specifically: ```http PATCH /collections/{collection_name} {     \"vectors\": {         \"my_vector\": {             \"hnsw_config\": {                 \"m\": 32,                 \"ef_construct\": 123             },             \"quantization_config\": {                 \"product\": {                     \"compression\": \"x32\",                     \"always_ram\": true                 }             },             \"on_disk\": true         }     },     \"hnsw_config\": {         \"ef_construct\": 123     },     \"quantization_config\": {         \"scalar\": {             \"type\": \"int8\",             \"quantile\": 0.8,             \"always_ram\": false         }     } } ``` ```bash curl -X PATCH http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {         \"my_vector\": {             \"hnsw_config\": {                 \"m\": 32,                 \"ef_construct\": 123             },             \"quantization_config\": {                 \"product\": {                     \"compression\": \"x32\",                     \"always_ram\": true                 }             },             \"on_disk\": true         }     },     \"hnsw_config\": {         \"ef_construct\": 123     },     \"quantization_config\": {         \"scalar\": {             \"type\": \"int8\",             \"quantile\": 0.8,             \"always_ram\": false         }     } }' ``` ```python client.update_collection(     collection_name=\"{collection_name}\",     vectors_config={         \"my_vector\": models.VectorParamsDiff(             hnsw_config=models.HnswConfigDiff(                 m=32,                 ef_construct=123,             ),             quantization_config=models.ProductQuantization(                 product=models.ProductQuantizationConfig(                     compression=models.CompressionRatio.X32,                     always_ram=True,                 ),             ),             on_disk=True,         ),     },     hnsw_config=models.HnswConfigDiff(         ef_construct=123,     ),     quantization_config=models.ScalarQuantization(         scalar=models.ScalarQuantizationConfig(             type=models.ScalarType.INT8,             quantile=0.8,             always_ram=False,         ),     ), ) ``` ```typescript client.updateCollection(\"{collection_name}\", {   vectors: {     my_vector: {       hnsw_config: {         m: 32,         ef_construct: 123,       },       quantization_config: {         product: {           compression: \"x32\",           always_ram: true,         },       },       on_disk: true,     },   },   hnsw_config: {     ef_construct: 123,   },   quantization_config: {     scalar: {       type: \"int8\",       quantile: 0.8,       always_ram: true,     },   }, }); ``` ```rust use std::collections::HashMap;  use qdrant_client::qdrant::{     quantization_config_diff::Quantization, vectors_config_diff::Config, HnswConfigDiffBuilder,     QuantizationType, ScalarQuantizationBuilder, UpdateCollectionBuilder, VectorParamsDiffBuilder,     VectorParamsDiffMap, };  client     .update_collection(         UpdateCollectionBuilder::new(\"{collection_name}\")             .hnsw_config(HnswConfigDiffBuilder::default().ef_construct(123))             .vectors_config(Config::ParamsMap(VectorParamsDiffMap {                 map: HashMap::from([(                     (\"my_vector\".into()),                     VectorParamsDiffBuilder::default()                         .hnsw_config(HnswConfigDiffBuilder::default().m(32).ef_construct(123))                         .build(),                 )]),             }))             .quantization_config(Quantization::Scalar(                 ScalarQuantizationBuilder::default()                     .r#type(QuantizationType::Int8.into())                     .quantile(0.8)                     .always_ram(true)                     .build(),             )),     )     .await?; ``` ```java import io.qdrant.client.grpc.Collections.HnswConfigDiff; import io.qdrant.client.grpc.Collections.QuantizationConfigDiff; import io.qdrant.client.grpc.Collections.QuantizationType; import io.qdrant.client.grpc.Collections.ScalarQuantization; import io.qdrant.client.grpc.Collections.UpdateCollection; import io.qdrant.client.grpc.Collections.VectorParamsDiff; import io.qdrant.client.grpc.Collections.VectorParamsDiffMap; import io.qdrant.client.grpc.Collections.VectorsConfigDiff;  client     .updateCollectionAsync(         UpdateCollection.newBuilder()             .setCollectionName(\"{collection_name}\")             .setHnswConfig(HnswConfigDiff.newBuilder().setEfConstruct(123).build())             .setVectorsConfig(                 VectorsConfigDiff.newBuilder()                     .setParamsMap(                         VectorParamsDiffMap.newBuilder()                             .putMap(                                 \"my_vector\",                                 VectorParamsDiff.newBuilder()                                     .setHnswConfig(                                         HnswConfigDiff.newBuilder()                                             .setM(3)                                             .setEfConstruct(123)                                             .build())                                     .build())))             .setQuantizationConfig(                 QuantizationConfigDiff.newBuilder()                     .setScalar(                         ScalarQuantization.newBuilder()                             .setType(QuantizationType.Int8)                             .setQuantile(0.8f)                             .setAlwaysRam(true)                             .build()))             .build())     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.UpdateCollectionAsync( \tcollectionName: \"{collection_name}\", \thnswConfig: new HnswConfigDiff { EfConstruct = 123 }, \tvectorsConfig: new VectorParamsDiffMap \t{ \t\tMap = \t\t{ \t\t\t{ \t\t\t\t\"my_vector\", \t\t\t\tnew VectorParamsDiff \t\t\t\t{ \t\t\t\t\tHnswConfig = new HnswConfigDiff { M = 3, EfConstruct = 123 } \t\t\t\t} \t\t\t} \t\t} \t}, \tquantizationConfig: new QuantizationConfigDiff \t{ \t\tScalar = new ScalarQuantization \t\t{ \t\t\tType = QuantizationType.Int8, \t\t\tQuantile = 0.8f, \t\t\tAlwaysRam = true \t\t} \t} ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.UpdateCollection(context.Background(), &qdrant.UpdateCollection{ \tCollectionName: \"{collection_name}\", \tVectorsConfig: qdrant.NewVectorsConfigDiffMap( \t\tmap[string]*qdrant.VectorParamsDiff{ \t\t\t\"my_vector\": { \t\t\t\tHnswConfig: &qdrant.HnswConfigDiff{ \t\t\t\t\tM:           qdrant.PtrOf(uint64(3)), \t\t\t\t\tEfConstruct: qdrant.PtrOf(uint64(123)), \t\t\t\t}, \t\t\t}, \t\t}), \tQuantizationConfig: qdrant.NewQuantizationDiffScalar( \t\t&qdrant.ScalarQuantization{ \t\t\tType:      qdrant.QuantizationType_Int8, \t\t\tQuantile:  qdrant.PtrOf(float32(0.8)), \t\t\tAlwaysRam: qdrant.PtrOf(true), \t\t}), }) ```",
    "metadata": {
      "chunk_id": "f51a571d7810-0020",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Update vector parameters"
      ],
      "heading_text": "Update vector parameters",
      "token_count": 1973,
      "char_count": 8627,
      "start_char": 38121,
      "end_char": 46748,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6372545757071547,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.914413",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1973,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Update vector parameters",
      "chunk_hash": "2be096e8de25679b",
      "content_digest": "2be096e8de25679b",
      "chunk_length": 8627,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "config",
          "collection",
          "client",
          "vector",
          "name",
          "true",
          "collections",
          "123",
          "quantization",
          "vectors",
          "hnsw",
          "disk",
          "always",
          "type",
          "construct",
          "ram",
          "models",
          "import",
          "grpc"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 29,
            "weight": 0.046326
          },
          {
            "term": "config",
            "tf": 26,
            "weight": 0.041534
          },
          {
            "term": "collection",
            "tf": 22,
            "weight": 0.035144
          },
          {
            "term": "client",
            "tf": 20,
            "weight": 0.031949
          },
          {
            "term": "vector",
            "tf": 18,
            "weight": 0.028754
          },
          {
            "term": "name",
            "tf": 18,
            "weight": 0.028754
          },
          {
            "term": "true",
            "tf": 17,
            "weight": 0.027157
          },
          {
            "term": "collections",
            "tf": 15,
            "weight": 0.023962
          },
          {
            "term": "123",
            "tf": 15,
            "weight": 0.023962
          },
          {
            "term": "quantization",
            "tf": 14,
            "weight": 0.022364
          },
          {
            "term": "vectors",
            "tf": 13,
            "weight": 0.020767
          },
          {
            "term": "hnsw",
            "tf": 12,
            "weight": 0.019169
          },
          {
            "term": "disk",
            "tf": 11,
            "weight": 0.017572
          },
          {
            "term": "always",
            "tf": 10,
            "weight": 0.015974
          },
          {
            "term": "type",
            "tf": 10,
            "weight": 0.015974
          },
          {
            "term": "construct",
            "tf": 10,
            "weight": 0.015974
          },
          {
            "term": "ram",
            "tf": 9,
            "weight": 0.014377
          },
          {
            "term": "models",
            "tf": 9,
            "weight": 0.014377
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.014377
          },
          {
            "term": "grpc",
            "tf": 9,
            "weight": 0.014377
          }
        ],
        "unique_terms": 165,
        "total_terms": 626
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "123",
        "Update vector parameters",
        "client",
        "collection",
        "collections",
        "config",
        "name",
        "qdrant",
        "quantization",
        "true",
        "vector"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6372545757071547,
      "overall": 0.7457515252357182
    }
  },
  {
    "text": "## Collection info  Qdrant allows determining the configuration parameters of an existing collection to better understand how the points are distributed and indexed. ```http GET /collections/{collection_name} ``` ```bash curl -X GET http://localhost:6333/collections/{collection_name} ``` ```python client.get_collection(collection_name=\"{collection_name}\") ``` ```typescript client.getCollection(\"{collection_name}\"); ``` ```rust client.collection_info(\"{collection_name}\").await?; ``` ```java client.getCollectionInfoAsync(\"{collection_name}\").get(); ``` ```csharp await client.GetCollectionInfoAsync(\"{collection_name}\"); ``` ```go import \"context\"  client.GetCollectionInfo(context.Background(), \"{collection_name}\") ``` Expected result ```json {     \"result\": {         \"status\": \"green\",         \"optimizer_status\": \"ok\",         \"indexed_vectors_count\": 1024232,         \"points_count\": 1068786,         \"segments_count\": 31,         \"config\": {             \"params\": {                 \"vectors\": {                     \"size\": 384,                     \"distance\": \"Cosine\"                 },                 \"shard_number\": 1,                 \"replication_factor\": 1,                 \"write_consistency_factor\": 1,                 \"on_disk_payload\": false             },             \"hnsw_config\": {                 \"m\": 16,                 \"ef_construct\": 100,                 \"full_scan_threshold\": 10000,                 \"max_indexing_threads\": 0             },             \"optimizer_config\": {                 \"deleted_threshold\": 0.2,                 \"vacuum_min_vector_number\": 1000,                 \"default_segment_number\": 0,                 \"max_segment_size\": null,                 \"memmap_threshold\": null,                 \"indexing_threshold\": 20000,                 \"flush_interval_sec\": 5,                 \"max_optimization_threads\": 1             },             \"wal_config\": {                 \"wal_capacity_mb\": 32,                 \"wal_segments_ahead\": 0             }         },         \"payload_schema\": {}     },     \"status\": \"ok\",     \"time\": 0.00010143 } ``` If you insert the vectors into the collection, the `status` field may become `yellow` whilst it is optimizing. It will become `green` once all the points are successfully processed. The following color statuses are possible:  - 🟢 `green`: collection is ready - 🟡 `yellow`: collection is optimizing - ⚫ `grey`: collection is pending optimization ([help](#grey-collection-status.md)) - 🔴 `red`: an error occurred which the engine could not recover from",
    "metadata": {
      "chunk_id": "f51a571d7810-0021",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Collection info"
      ],
      "heading_text": "Collection info",
      "token_count": 549,
      "char_count": 2541,
      "start_char": 46766,
      "end_char": 49307,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7257281553398058,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.924820",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 549,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Collection info",
      "chunk_hash": "61b681851d60335e",
      "content_digest": "61b681851d60335e",
      "chunk_length": 2541,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "name",
          "the",
          "client",
          "status",
          "get",
          "config",
          "threshold",
          "points",
          "are",
          "green",
          "vectors",
          "count",
          "number",
          "max",
          "wal",
          "info",
          "indexed",
          "http",
          "collections"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 18,
            "weight": 0.084507
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.042254
          },
          {
            "term": "the",
            "tf": 8,
            "weight": 0.037559
          },
          {
            "term": "client",
            "tf": 6,
            "weight": 0.028169
          },
          {
            "term": "status",
            "tf": 5,
            "weight": 0.023474
          },
          {
            "term": "get",
            "tf": 4,
            "weight": 0.018779
          },
          {
            "term": "config",
            "tf": 4,
            "weight": 0.018779
          },
          {
            "term": "threshold",
            "tf": 4,
            "weight": 0.018779
          },
          {
            "term": "points",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "are",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "green",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "vectors",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "count",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "number",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "max",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "wal",
            "tf": 3,
            "weight": 0.014085
          },
          {
            "term": "info",
            "tf": 2,
            "weight": 0.00939
          },
          {
            "term": "indexed",
            "tf": 2,
            "weight": 0.00939
          },
          {
            "term": "http",
            "tf": 2,
            "weight": 0.00939
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.00939
          }
        ],
        "unique_terms": 125,
        "total_terms": 213
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Collection info",
        "are",
        "client",
        "collection",
        "config",
        "get",
        "name",
        "points",
        "status",
        "the",
        "threshold"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7257281553398058,
      "overall": 0.8085760517799351
    }
  },
  {
    "text": "### Grey collection status  *Available as of v1.9.0*  A collection may have the grey ⚫ status or show “optimizations pending, awaiting update operation” as optimization status. This state is normally caused by restarting a Qdrant instance while optimizations were ongoing. It means the collection has optimizations pending, but they are paused. You must send any update operation to trigger and start the optimizations again. For example: ```http PATCH /collections/{collection_name} {     \"optimizers_config\": {} } ``` ```bash curl -X PATCH http://localhost:6333/collections/{collection_name} \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"optimizers_config\": {}   }' ``` ```python client.update_collection(     collection_name=\"{collection_name}\",     optimizer_config=models.OptimizersConfigDiff(), ) ``` ```typescript client.updateCollection(\"{collection_name}\", {   optimizers_config: {}, }); ``` ```rust use qdrant_client::qdrant::{OptimizersConfigDiffBuilder, UpdateCollectionBuilder};  client     .update_collection(         UpdateCollectionBuilder::new(\"{collection_name}\")             .optimizers_config(OptimizersConfigDiffBuilder::default()),     )     .await?; ``` ```java import io.qdrant.client.grpc.Collections.OptimizersConfigDiff; import io.qdrant.client.grpc.Collections.UpdateCollection;  client.updateCollectionAsync(     UpdateCollection.newBuilder()         .setCollectionName(\"{collection_name}\")         .setOptimizersConfig(             OptimizersConfigDiff.getDefaultInstance())         .build()); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.UpdateCollectionAsync( \tcollectionName: \"{collection_name}\", \toptimizersConfig: new OptimizersConfigDiff { } ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.UpdateCollection(context.Background(), &qdrant.UpdateCollection{ \tCollectionName:   \"{collection_name}\", \tOptimizersConfig: &qdrant.OptimizersConfigDiff{}, }) ``` Alternatively you may use the `Trigger Optimizers` button in the [Qdrant Web UI](https://qdrant.tech/documentation/web-ui/). It is shown next to the grey collection status on the collection info page.",
    "metadata": {
      "chunk_id": "f51a571d7810-0022",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Grey collection status"
      ],
      "heading_text": "Grey collection status",
      "token_count": 537,
      "char_count": 2306,
      "start_char": 49321,
      "end_char": 51627,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9212121212121211,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.932917",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 537,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Grey collection status",
      "chunk_hash": "4d23cc3d0e4e72b8",
      "content_digest": "4d23cc3d0e4e72b8",
      "chunk_length": 2306,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "qdrant",
          "client",
          "name",
          "the",
          "config",
          "optimizers",
          "optimizersconfigdiff",
          "updatecollection",
          "status",
          "optimizations",
          "update",
          "collections",
          "grey",
          "localhost",
          "new",
          "import",
          "grpc",
          "may",
          "pending"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 16,
            "weight": 0.073733
          },
          {
            "term": "qdrant",
            "tf": 15,
            "weight": 0.069124
          },
          {
            "term": "client",
            "tf": 14,
            "weight": 0.064516
          },
          {
            "term": "name",
            "tf": 9,
            "weight": 0.041475
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.032258
          },
          {
            "term": "config",
            "tf": 6,
            "weight": 0.02765
          },
          {
            "term": "optimizers",
            "tf": 5,
            "weight": 0.023041
          },
          {
            "term": "optimizersconfigdiff",
            "tf": 5,
            "weight": 0.023041
          },
          {
            "term": "updatecollection",
            "tf": 5,
            "weight": 0.023041
          },
          {
            "term": "status",
            "tf": 4,
            "weight": 0.018433
          },
          {
            "term": "optimizations",
            "tf": 4,
            "weight": 0.018433
          },
          {
            "term": "update",
            "tf": 4,
            "weight": 0.018433
          },
          {
            "term": "collections",
            "tf": 4,
            "weight": 0.018433
          },
          {
            "term": "grey",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "localhost",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "new",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "import",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "grpc",
            "tf": 3,
            "weight": 0.013825
          },
          {
            "term": "may",
            "tf": 2,
            "weight": 0.009217
          },
          {
            "term": "pending",
            "tf": 2,
            "weight": 0.009217
          }
        ],
        "unique_terms": 104,
        "total_terms": 217
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Grey collection status",
        "client",
        "collection",
        "config",
        "name",
        "optimizers",
        "optimizersconfigdiff",
        "qdrant",
        "status",
        "the",
        "updatecollection"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9212121212121211,
      "overall": 0.8404040404040404
    }
  },
  {
    "text": "### Create alias ```http POST /collections/aliases {     \"actions\": [         {             \"create_alias\": {                 \"collection_name\": \"example_collection\",                 \"alias_name\": \"production_collection\"             }         }     ] } ``` ```bash curl -X POST http://localhost:6333/collections/aliases \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"actions\": [         {             \"create_alias\": {                 \"collection_name\": \"example_collection\",                 \"alias_name\": \"production_collection\"             }         }     ] }' ``` ```python client.update_collection_aliases(     change_aliases_operations=[         models.CreateAliasOperation(             create_alias=models.CreateAlias(                 collection_name=\"example_collection\", alias_name=\"production_collection\"             )         )     ] ) ``` ```typescript client.updateCollectionAliases({   actions: [     {       create_alias: {         collection_name: \"example_collection\",         alias_name: \"production_collection\",       },     },   ], }); ``` ```rust use qdrant_client::qdrant::CreateAliasBuilder;  client     .create_alias(CreateAliasBuilder::new(         \"example_collection\",         \"production_collection\",     ))     .await?; ``` ```java client.createAliasAsync(\"production_collection\", \"example_collection\").get(); ``` ```csharp await client.CreateAliasAsync(aliasName: \"production_collection\", collectionName: \"example_collection\"); ``` ```go import \"context\"  client.CreateAlias(context.Background(), \"production_collection\", \"example_collection\") ```",
    "metadata": {
      "chunk_id": "f51a571d7810-0026",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Create alias"
      ],
      "heading_text": "Create alias",
      "token_count": 320,
      "char_count": 1592,
      "start_char": 54576,
      "end_char": 56168,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6882330097087378,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.940208",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 320,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Create alias",
      "chunk_hash": "9ee392802f2d4cc5",
      "content_digest": "9ee392802f2d4cc5",
      "chunk_length": 1592,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "alias",
          "name",
          "example",
          "production",
          "client",
          "create",
          "aliases",
          "actions",
          "http",
          "post",
          "collections",
          "models",
          "createalias",
          "qdrant",
          "createaliasbuilder",
          "await",
          "createaliasasync",
          "context",
          "bash"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 21,
            "weight": 0.172131
          },
          {
            "term": "alias",
            "tf": 10,
            "weight": 0.081967
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.065574
          },
          {
            "term": "example",
            "tf": 8,
            "weight": 0.065574
          },
          {
            "term": "production",
            "tf": 8,
            "weight": 0.065574
          },
          {
            "term": "client",
            "tf": 7,
            "weight": 0.057377
          },
          {
            "term": "create",
            "tf": 6,
            "weight": 0.04918
          },
          {
            "term": "aliases",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "actions",
            "tf": 3,
            "weight": 0.02459
          },
          {
            "term": "http",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "post",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "createalias",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "createaliasbuilder",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "await",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "createaliasasync",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "context",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "bash",
            "tf": 1,
            "weight": 0.008197
          }
        ],
        "unique_terms": 46,
        "total_terms": 122
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Create alias",
        "actions",
        "alias",
        "aliases",
        "client",
        "collection",
        "create",
        "example",
        "http",
        "name",
        "production"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6882330097087378,
      "overall": 0.7960776699029125
    }
  },
  {
    "text": "### Switch collection  Multiple alias actions are performed atomically. For example, you can switch underlying collection with the following command: ```http POST /collections/aliases {     \"actions\": [         {             \"delete_alias\": {                 \"alias_name\": \"production_collection\"             }         },         {             \"create_alias\": {                 \"collection_name\": \"example_collection\",                 \"alias_name\": \"production_collection\"             }         }     ] } ``` ```bash curl -X POST http://localhost:6333/collections/aliases \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"actions\": [         {             \"delete_alias\": {                 \"alias_name\": \"production_collection\"             }         },         {             \"create_alias\": {                 \"collection_name\": \"example_collection\",                 \"alias_name\": \"production_collection\"             }         }     ] }' ``` ```python client.update_collection_aliases(     change_aliases_operations=[         models.DeleteAliasOperation(             delete_alias=models.DeleteAlias(alias_name=\"production_collection\")         ),         models.CreateAliasOperation(             create_alias=models.CreateAlias(                 collection_name=\"example_collection\", alias_name=\"production_collection\"             )         ),     ] ) ``` ```typescript client.updateCollectionAliases({   actions: [     {       delete_alias: {         alias_name: \"production_collection\",       },     },     {       create_alias: {         collection_name: \"example_collection\",         alias_name: \"production_collection\",       },     },   ], }); ``` ```rust use qdrant_client::qdrant::CreateAliasBuilder;  client.delete_alias(\"production_collection\").await?; client     .create_alias(CreateAliasBuilder::new(         \"example_collection\",         \"production_collection\",     ))     .await?; ``` ```java client.deleteAliasAsync(\"production_collection\").get(); client.createAliasAsync(\"production_collection\", \"example_collection\").get(); ``` ```csharp await client.DeleteAliasAsync(\"production_collection\"); await client.CreateAliasAsync(aliasName: \"production_collection\", collectionName: \"example_collection\"); ``` ```go import \"context\"  client.DeleteAlias(context.Background(), \"production_collection\") client.CreateAlias(context.Background(), \"production_collection\", \"example_collection\") ```",
    "metadata": {
      "chunk_id": "f51a571d7810-0028",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "filename": "_documentation_concepts_collections_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Switch collection"
      ],
      "heading_text": "Switch collection",
      "token_count": 462,
      "char_count": 2412,
      "start_char": 57331,
      "end_char": 59743,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7206,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:13.946943",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 462,
      "document_id": "f51a571d7810",
      "document_name": "_documentation_concepts_collections_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "source_filename": "_documentation_concepts_collections_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_collections\\_documentation_concepts_collections_.md",
      "hierarchy_path": "Switch collection",
      "chunk_hash": "2d4a48bf61e81ae0",
      "content_digest": "2d4a48bf61e81ae0",
      "chunk_length": 2412,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "alias",
          "production",
          "name",
          "client",
          "example",
          "delete",
          "create",
          "actions",
          "aliases",
          "models",
          "await",
          "context",
          "switch",
          "http",
          "post",
          "collections",
          "deletealias",
          "createalias",
          "qdrant"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 31,
            "weight": 0.164021
          },
          {
            "term": "alias",
            "tf": 19,
            "weight": 0.100529
          },
          {
            "term": "production",
            "tf": 16,
            "weight": 0.084656
          },
          {
            "term": "name",
            "tf": 12,
            "weight": 0.063492
          },
          {
            "term": "client",
            "tf": 11,
            "weight": 0.058201
          },
          {
            "term": "example",
            "tf": 9,
            "weight": 0.047619
          },
          {
            "term": "delete",
            "tf": 5,
            "weight": 0.026455
          },
          {
            "term": "create",
            "tf": 5,
            "weight": 0.026455
          },
          {
            "term": "actions",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "aliases",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "models",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "await",
            "tf": 4,
            "weight": 0.021164
          },
          {
            "term": "context",
            "tf": 3,
            "weight": 0.015873
          },
          {
            "term": "switch",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "http",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "post",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "deletealias",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "createalias",
            "tf": 2,
            "weight": 0.010582
          },
          {
            "term": "qdrant",
            "tf": 2,
            "weight": 0.010582
          }
        ],
        "unique_terms": 63,
        "total_terms": 189
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Switch collection",
        "actions",
        "alias",
        "aliases",
        "client",
        "collection",
        "create",
        "delete",
        "example",
        "name",
        "production"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7206,
      "overall": 0.7735333333333333
    }
  }
]