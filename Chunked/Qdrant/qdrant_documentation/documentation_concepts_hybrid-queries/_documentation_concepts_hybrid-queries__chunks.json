[
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 1040,
      "end_char": 3008,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.777204",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 3690,
      "end_char": 5678,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.785824",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 83,
      "char_count": 311,
      "start_char": 5680,
      "end_char": 5991,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.787287",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 83,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "f059a5deb61e367d",
      "content_digest": "f059a5deb61e367d",
      "chunk_length": 311,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "faq",
          "https",
          "tech",
          "documentation",
          "fundamentals",
          "database",
          "optimization",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 8,
            "weight": 0.228571
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "tech",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "documentation",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 14,
        "total_terms": 35
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "release",
        "support",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### User Manual  [Concepts](https://qdrant.tech/documentation/concepts/)  - [Collections](https://qdrant.tech/documentation/concepts/collections/) - [Points](https://qdrant.tech/documentation/concepts/points/) - [Vectors](https://qdrant.tech/documentation/concepts/vectors/) - [Payload](https://qdrant.tech/documentation/concepts/payload/) - [Search](https://qdrant.tech/documentation/concepts/search/) - [Explore](https://qdrant.tech/documentation/concepts/explore/) - [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/) - [Filtering](https://qdrant.tech/documentation/concepts/filtering/) - [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/) - [Storage](https://qdrant.tech/documentation/concepts/storage/) - [Indexing](https://qdrant.tech/documentation/concepts/indexing/) - [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)  [Guides](https://qdrant.tech/documentation/guides/installation/)  - [Installation](https://qdrant.tech/documentation/guides/installation/) - [Administration](https://qdrant.tech/documentation/guides/administration/) - [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/) - [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/) - [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/) - [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) - [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/) - [Quantization](https://qdrant.tech/documentation/guides/quantization/) - [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/) - [Configuration](https://qdrant.tech/documentation/guides/configuration/) - [Security](https://qdrant.tech/documentation/guides/security/) - [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/) - [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0006",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "User Manual"
      ],
      "heading_text": "User Manual",
      "token_count": 485,
      "char_count": 1968,
      "start_char": 6368,
      "end_char": 8336,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.795821",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 485,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "User Manual",
      "chunk_hash": "aa99483e94fddd20",
      "content_digest": "aa99483e94fddd20",
      "chunk_length": 1968,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "guides",
          "concepts",
          "installation",
          "collections",
          "points",
          "vectors",
          "payload",
          "search",
          "explore",
          "hybrid",
          "queries",
          "filtering",
          "optimizer",
          "storage",
          "indexing",
          "snapshots"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "qdrant",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "tech",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "documentation",
            "tf": 27,
            "weight": 0.131068
          },
          {
            "term": "guides",
            "tf": 15,
            "weight": 0.072816
          },
          {
            "term": "concepts",
            "tf": 14,
            "weight": 0.067961
          },
          {
            "term": "installation",
            "tf": 3,
            "weight": 0.014563
          },
          {
            "term": "collections",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "points",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "payload",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "search",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "explore",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "hybrid",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "filtering",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "optimizer",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "storage",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "indexing",
            "tf": 2,
            "weight": 0.009709
          },
          {
            "term": "snapshots",
            "tf": 2,
            "weight": 0.009709
          }
        ],
        "unique_terms": 45,
        "total_terms": 206
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "User Manual",
        "collections",
        "concepts",
        "documentation",
        "guides",
        "https",
        "installation",
        "points",
        "qdrant",
        "tech",
        "vectors"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.733,
      "overall": 0.7776666666666666
    }
  },
  {
    "text": "### Tutorials  [Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)  - [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/) - [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/) - [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/) - [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)  [Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)  - [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/) - [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/) - [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/) - [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/) - [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)  [Using the Database](https://qdrant.tech/documentation/database-tutorials/)  - [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/) - [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/) - [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/) - [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/) - [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/) - [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/) - [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0008",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Tutorials"
      ],
      "heading_text": "Tutorials",
      "token_count": 459,
      "char_count": 1988,
      "start_char": 9018,
      "end_char": 11006,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.805717",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 459,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Tutorials",
      "chunk_hash": "f480f0283a04b78a",
      "content_digest": "f480f0283a04b78a",
      "chunk_length": 1988,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "tutorials",
          "https",
          "tech",
          "documentation",
          "search",
          "database",
          "advanced",
          "beginner",
          "with",
          "hybrid",
          "retrieval",
          "build",
          "scale",
          "neural",
          "fastembed",
          "quality",
          "multivector",
          "representations",
          "using"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 22,
            "weight": 0.098655
          },
          {
            "term": "tutorials",
            "tf": 20,
            "weight": 0.089686
          },
          {
            "term": "https",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "tech",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "documentation",
            "tf": 19,
            "weight": 0.085202
          },
          {
            "term": "search",
            "tf": 14,
            "weight": 0.06278
          },
          {
            "term": "database",
            "tf": 9,
            "weight": 0.040359
          },
          {
            "term": "advanced",
            "tf": 7,
            "weight": 0.03139
          },
          {
            "term": "beginner",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.022422
          },
          {
            "term": "hybrid",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "retrieval",
            "tf": 4,
            "weight": 0.017937
          },
          {
            "term": "build",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "scale",
            "tf": 3,
            "weight": 0.013453
          },
          {
            "term": "neural",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "fastembed",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "quality",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "multivector",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "representations",
            "tf": 2,
            "weight": 0.008969
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.008969
          }
        ],
        "unique_terms": 64,
        "total_terms": 223
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Tutorials",
        "advanced",
        "beginner",
        "database",
        "documentation",
        "https",
        "qdrant",
        "search",
        "tech",
        "tutorials",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7480092783505154,
      "overall": 0.7826697594501718
    }
  },
  {
    "text": "### Support  [FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)  - [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/) - [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)  [Release Notes](https://github.com/qdrant/qdrant/releases)  - [Documentation](https://qdrant.tech/documentation/) - - [Concepts](https://qdrant.tech/documentation/concepts/) - - Hybrid Queries",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0009",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Support"
      ],
      "heading_text": "Support",
      "token_count": 116,
      "char_count": 445,
      "start_char": 11008,
      "end_char": 11453,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.808413",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 116,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Support",
      "chunk_hash": "8a18c30950aa61bf",
      "content_digest": "8a18c30950aa61bf",
      "chunk_length": 445,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "documentation",
          "tech",
          "faq",
          "fundamentals",
          "database",
          "optimization",
          "concepts",
          "support",
          "release",
          "notes",
          "github",
          "com",
          "releases",
          "hybrid",
          "queries"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.208333
          },
          {
            "term": "https",
            "tf": 6,
            "weight": 0.125
          },
          {
            "term": "documentation",
            "tf": 6,
            "weight": 0.125
          },
          {
            "term": "tech",
            "tf": 5,
            "weight": 0.104167
          },
          {
            "term": "faq",
            "tf": 4,
            "weight": 0.083333
          },
          {
            "term": "fundamentals",
            "tf": 3,
            "weight": 0.0625
          },
          {
            "term": "database",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "optimization",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "concepts",
            "tf": 2,
            "weight": 0.041667
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "release",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "notes",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "releases",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "hybrid",
            "tf": 1,
            "weight": 0.020833
          },
          {
            "term": "queries",
            "tf": 1,
            "weight": 0.020833
          }
        ],
        "unique_terms": 17,
        "total_terms": 48
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Support",
        "concepts",
        "database",
        "documentation",
        "faq",
        "fundamentals",
        "https",
        "optimization",
        "qdrant",
        "support",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5,
      "overall": 0.6999999999999998
    }
  },
  {
    "text": "## Hybrid Search  One of the most common problems when you have different representations of the same data is to combine the queried points for each representation into a single result. Fusing results from multiple queries  For example, in text search, it is often useful to combine dense and sparse vectors get the best of semantics, plus the best of matching specific words. Qdrant currently has two ways of combining the results from different queries:  - `rrf` - [Reciprocal Rank Fusion](https://plg.uwaterloo.ca/~gvcormac/cormacksigir09-rrf.pdf)    Considers the positions of results within each query, and boosts the ones that appear closer to the top in multiple of them. - `dbsf` - [Distribution-Based Score Fusion ](https://medium.com/plain-simple-software/distribution-based-score-fusion-dbsf-a-new-approach-to-vector-search-ranking-f87c37488b18)*(available as of v1.11.0)*    Normalizes the scores of the points in each query, using the mean +/- the 3rd standard deviation as limits, and then sums the scores of the same point across different queries. `dbsf` is stateless and calculates the normalization limits only based on the results of each query, not on all the scores that it has seen. Here is an example of Reciprocal Rank Fusion for a query containing two prefetches against different named vectors configured to respectively hold sparse and dense vectors. ```http POST /collections/{collection_name}/points/query {     \"prefetch\": [         {             \"query\": {                  \"indices\": [1, 42],    // <┐                 \"values\": [0.22, 0.8]  // <┴─sparse vector              },             \"using\": \"sparse\",             \"limit\": 20         },         {             \"query\": [0.01, 0.45, 0.67, ...], // <-- dense vector             \"using\": \"dense\",             \"limit\": 20         }     ],     \"query\": { \"fusion\": \"rrf\" }, // <--- reciprocal rank fusion     \"limit\": 10 } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.query_points(     collection_name=\"{collection_name}\",     prefetch=[         models.Prefetch(             query=models.SparseVector(indices=[1, 42], values=[0.22, 0.8]),             using=\"sparse\",             limit=20,         ),         models.Prefetch(             query=[0.01, 0.45, 0.67],  # <-- dense vector             using=\"dense\",             limit=20,         ),     ],     query=models.FusionQuery(fusion=models.Fusion.RRF), ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {     prefetch: [         {             query: {                 values: [0.22, 0.8],                 indices: [1, 42],             },             using: 'sparse',             limit: 20,         },         {             query: [0.01, 0.45, 0.67],             using: 'dense',             limit: 20,         },     ],     query: {         fusion: 'rrf',     }, }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{Fusion, PrefetchQueryBuilder, Query, QueryPointsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client.query(     QueryPointsBuilder::new(\"{collection_name}\")         .add_prefetch(PrefetchQueryBuilder::default()             .query(Query::new_nearest([(1, 0.22), (42, 0.8)].as_slice()))             .using(\"sparse\")             .limit(20u64)         )         .add_prefetch(PrefetchQueryBuilder::default()             .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))             .using(\"dense\")             .limit(20u64)         )         .query(Query::new_fusion(Fusion::Rrf)) ).await?; ``` ```java import static io.qdrant.client.QueryFactory.nearest;  import java.util.List;  import static io.qdrant.client.QueryFactory.fusion;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.Fusion; import io.qdrant.client.grpc.Points.PrefetchQuery; import io.qdrant.client.grpc.Points.QueryPoints;  QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client.queryAsync(     QueryPoints.newBuilder()     .setCollectionName(\"{collection_name}\")     .addPrefetch(PrefetchQuery.newBuilder()       .setQuery(nearest(List.of(0.22f, 0.8f), List.of(1, 42)))       .setUsing(\"sparse\")       .setLimit(20)       .build())     .addPrefetch(PrefetchQuery.newBuilder()       .setQuery(nearest(List.of(0.01f, 0.45f, 0.67f)))       .setUsing(\"dense\")       .setLimit(20)       .build())     .setQuery(fusion(Fusion.RRF))     .build())   .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(   collectionName: \"{collection_name}\",   prefetch: new List < PrefetchQuery > {     new() {       Query = new(float, uint)[] {           (0.22f, 1), (0.8f, 42),         },         Using = \"sparse\",         Limit = 20     },     new() {       Query = new float[] {           0.01f, 0.45f, 0.67f         },         Using = \"dense\",         Limit = 20     }   },   query: Fusion.Rrf ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tPrefetch: []*qdrant.PrefetchQuery{ \t\t{ \t\t\tQuery: qdrant.NewQuerySparse([]uint32{1, 42}, []float32{0.22, 0.8}), \t\t\tUsing: qdrant.PtrOf(\"sparse\"), \t\t}, \t\t{ \t\t\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.45, 0.67}), \t\t\tUsing: qdrant.PtrOf(\"dense\"), \t\t}, \t}, \tQuery: qdrant.NewQueryFusion(qdrant.Fusion_RRF), }) ```",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0011",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Hybrid Search"
      ],
      "heading_text": "Hybrid Search",
      "token_count": 1582,
      "char_count": 5729,
      "start_char": 12541,
      "end_char": 18270,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6961779886148007,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.826763",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1582,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Hybrid Search",
      "chunk_hash": "116e4e8e528ccfa8",
      "content_digest": "116e4e8e528ccfa8",
      "chunk_length": 5729,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "query",
          "qdrant",
          "client",
          "the",
          "fusion",
          "using",
          "new",
          "dense",
          "limit",
          "import",
          "sparse",
          "rrf",
          "prefetch",
          "collection",
          "name",
          "qdrantclient",
          "points",
          "models",
          "localhost",
          "from"
        ],
        "term_weights": [
          {
            "term": "query",
            "tf": 31,
            "weight": 0.057514
          },
          {
            "term": "qdrant",
            "tf": 29,
            "weight": 0.053803
          },
          {
            "term": "client",
            "tf": 26,
            "weight": 0.048237
          },
          {
            "term": "the",
            "tf": 18,
            "weight": 0.033395
          },
          {
            "term": "fusion",
            "tf": 18,
            "weight": 0.033395
          },
          {
            "term": "using",
            "tf": 15,
            "weight": 0.027829
          },
          {
            "term": "new",
            "tf": 13,
            "weight": 0.024119
          },
          {
            "term": "dense",
            "tf": 11,
            "weight": 0.020408
          },
          {
            "term": "limit",
            "tf": 11,
            "weight": 0.020408
          },
          {
            "term": "import",
            "tf": 11,
            "weight": 0.020408
          },
          {
            "term": "sparse",
            "tf": 10,
            "weight": 0.018553
          },
          {
            "term": "rrf",
            "tf": 9,
            "weight": 0.016698
          },
          {
            "term": "prefetch",
            "tf": 9,
            "weight": 0.016698
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.014842
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.014842
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.014842
          },
          {
            "term": "points",
            "tf": 7,
            "weight": 0.012987
          },
          {
            "term": "models",
            "tf": 6,
            "weight": 0.011132
          },
          {
            "term": "localhost",
            "tf": 6,
            "weight": 0.011132
          },
          {
            "term": "from",
            "tf": 5,
            "weight": 0.009276
          }
        ],
        "unique_terms": 188,
        "total_terms": 539
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Hybrid Search",
        "client",
        "dense",
        "fusion",
        "import",
        "limit",
        "new",
        "qdrant",
        "query",
        "the",
        "using"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6961779886148007,
      "overall": 0.7320593295382669
    }
  },
  {
    "text": "### Maximal Marginal Relevance (MMR)  *Available as of v1.15.0*  A useful algorithm to improve the diversity of the results is [Maximal Marginal Relevance (MMR)](https://www.cs.cmu.edu/~jgc/publication/The_Use_MMR_Diversity_Based_LTMIR_1998.pdf). It excels when the dataset has many redundant or very similar points for a query. MMR selects candidates iteratively, starting with the most relevant point (higher similarity to the query). For each next point, it selects the one that hasn’t been chosen yet which has the best combination of relevance and higher separation to the already selected points. $$ MMR = \\arg \\max\\_{D\\_i \\in R\\setminus S}\\[\\lambda sim(D\\_i, Q) - (1 - \\lambda)\\max\\_{D\\_j \\in S}sim(D\\_i, D\\_j)] $$  Where $R$ is the candidates set, $S$ is the selected set, $Q$ is the query vector, $sim$ is the similarity function, and $\\lambda = 1 - diversity$. This is implemented in Qdrant as a parameter of a nearest neighbors query. You define the vector to get the nearest candidates, and a `diversity` parameter which controls the balance between relevance (0.0) and diversity (1.0). ```http POST /collections/{collection_name}/points/query {   \"query\": {     \"nearest\": [0.01, 0.45, 0.67, ...], // search vector     \"mmr\": {       \"diversity\": 0.5, // 0.0 - relevance; 1.0 - diversity       \"candidates_limit\": 100 // num of candidates to preselect     }   },   \"limit\": 10 } ``` ```python from qdrant_client import QdrantClient, models  client = QdrantClient(url=\"http://localhost:6333\")  client.query_points(     collection_name=\"{collection_name}\",     query=models.NearestQuery(         nearest=[0.01, 0.45, 0.67], # search vector         mmr=models.Mmr(             diversity=0.5, # 0.0 - relevance; 1.0 - diversity             candidates_limit=100, # num of candidates to preselect         )     ),     limit=10, ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  client.query(\"{collection_name}\", {   query: {     nearest: [0.01, 0.45, 0.67, ...], // search vector     mmr: {       diversity: 0.5, // 0.0 - relevance; 1.0 - diversity       candidates_limit: 100 // num of candidates to preselect     }   },   limit: 10, }); ``` ```rust use qdrant_client::Qdrant; use qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  client.query(     QueryPointsBuilder::new(\"{collection_name}\")         .query(Query::new_nearest_with_mmr(             vec![0.01, 0.45, 0.67], // search vector             MmrBuilder::new()                 .diversity(0.5) // 0.0 - relevance; 1.0 - diversity                 .candidates_limit(100) // num of candidates to preselect         ))         .limit(10) ).await?; ``` ```java import static io.qdrant.client.QueryFactory.nearest; import static io.qdrant.client.VectorInputFactory.vectorInput;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.Mmr; import io.qdrant.client.grpc.Points.QueryPoints;  QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client     .queryAsync(         QueryPoints.newBuilder()             .setCollectionName(\"{collection_name}\")             .setQuery(                 nearest(                     vectorInput(0.01f, 0.45f, 0.67f), // <-- search vector                     Mmr.newBuilder()                         .setDiversity(0.5f) // 0.0 - relevance; 1.0 - diversity                         .setCandidatesLimit(100) // num of candidates to preselect                         .build()))             .setLimit(10)             .build())     .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(     collectionName: \"{collection_name}\",     query: (         new float[] { 0.01f, 0.45f, 0.67f },         new Mmr         {             Diversity = 0.5f,         // 0.0 - relevance; 1.0 - diversity             CandidatesLimit = 100     // Number of candidates to preselect         }     ),     limit: 10 ); ``` ```go import ( \t\"context\"  \t\"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{ \tHost: \"localhost\", \tPort: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{ \tCollectionName: \"{collection_name}\", \tQuery: qdrant.NewQueryMMR( \t\tqdrant.NewVectorInput(0.01, 0.45, 0.67), \t\t&qdrant.Mmr{ \t\t\tDiversity:       qdrant.PtrOf(float32(0.5)), // 0.0 - relevance; 1.0 - diversity \t\t\tCandidatesLimit: qdrant.PtrOf(uint32(100)),  // num of candidates to preselect \t\t}), \tLimit: qdrant.PtrOf(uint64(10)), }) ``` **Caveat:** Since MMR ranks one point at a time, the scores produced by MMR in Qdrant refer to the similarity to the query vector. This means that the response will not be ordered by score, but rather by the order of selection of MMR.",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0015",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Maximal Marginal Relevance (MMR)"
      ],
      "heading_text": "Maximal Marginal Relevance (MMR)",
      "token_count": 1395,
      "char_count": 4957,
      "start_char": 32766,
      "end_char": 37723,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6561797752808989,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.905442",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1395,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Maximal Marginal Relevance (MMR)",
      "chunk_hash": "3d0cfa1ff8ec3656",
      "content_digest": "3d0cfa1ff8ec3656",
      "chunk_length": 4957,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "the",
          "diversity",
          "query",
          "mmr",
          "candidates",
          "relevance",
          "limit",
          "import",
          "vector",
          "nearest",
          "collection",
          "name",
          "qdrantclient",
          "new",
          "100",
          "preselect",
          "points",
          "num"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 28,
            "weight": 0.059574
          },
          {
            "term": "client",
            "tf": 25,
            "weight": 0.053191
          },
          {
            "term": "the",
            "tf": 21,
            "weight": 0.044681
          },
          {
            "term": "diversity",
            "tf": 18,
            "weight": 0.038298
          },
          {
            "term": "query",
            "tf": 18,
            "weight": 0.038298
          },
          {
            "term": "mmr",
            "tf": 17,
            "weight": 0.03617
          },
          {
            "term": "candidates",
            "tf": 14,
            "weight": 0.029787
          },
          {
            "term": "relevance",
            "tf": 11,
            "weight": 0.023404
          },
          {
            "term": "limit",
            "tf": 10,
            "weight": 0.021277
          },
          {
            "term": "import",
            "tf": 9,
            "weight": 0.019149
          },
          {
            "term": "vector",
            "tf": 8,
            "weight": 0.017021
          },
          {
            "term": "nearest",
            "tf": 8,
            "weight": 0.017021
          },
          {
            "term": "collection",
            "tf": 8,
            "weight": 0.017021
          },
          {
            "term": "name",
            "tf": 8,
            "weight": 0.017021
          },
          {
            "term": "qdrantclient",
            "tf": 8,
            "weight": 0.017021
          },
          {
            "term": "new",
            "tf": 8,
            "weight": 0.017021
          },
          {
            "term": "100",
            "tf": 7,
            "weight": 0.014894
          },
          {
            "term": "preselect",
            "tf": 7,
            "weight": 0.014894
          },
          {
            "term": "points",
            "tf": 6,
            "weight": 0.012766
          },
          {
            "term": "num",
            "tf": 6,
            "weight": 0.012766
          }
        ],
        "unique_terms": 170,
        "total_terms": 470
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Maximal Marginal Relevance (MMR)",
        "candidates",
        "client",
        "diversity",
        "import",
        "limit",
        "mmr",
        "qdrant",
        "query",
        "relevance",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6561797752808989,
      "overall": 0.7187265917602996
    }
  },
  {
    "text": "## Score boosting  *Available as of v1.14.0*  When introducing vector search to specific applications, sometimes business logic needs to be considered for ranking the final list of results. A quick example is [our own documentation search bar](https://github.com/qdrant/page-search). It has vectors for every part of the documentation site. If one were to perform a search by “just” using the vectors, all kinds of elements would be equally considered good results. However, when searching for documentation, we can establish a hierarchy of importance:  `title > content > snippets`  One way to solve this is to weight the results based on the kind of element. For example, we can assign a higher weight to titles and content, and keep snippets unboosted. Pseudocode would be something like:  `score = score + (is_title * 0.5) + (is_content * 0.25)`  Query API can rescore points with custom formulas. They can be based on:  - Dynamic payload values - Conditions - Scores of prefetches  To express the formula, the syntax uses objects to identify each element. Taking the documentation example, the request would look like this: ```http POST /collections/{collection_name}/points/query {     \"prefetch\": {         \"query\": [0.2, 0.8, ...],  // <-- dense vector         \"limit\": 50     }     \"query\": {         \"formula\": {             \"sum\": [                 \"$score\",                 {                      \"mult\": [                          0.5,                         {                              \"key\": \"tag\",                             \"match\": { \"any\": [\"h1\", \"h2\", \"h3\", \"h4\"] }                          }                      ]                 },                 {                     \"mult\": [                         0.25,                         {                              \"key\": \"tag\",                             \"match\": { \"any\": [\"p\", \"li\"] }                          }                     ]                 }             ]         }     } } ``` ```python from qdrant_client import models   tag_boosted = client.query_points(     collection_name=\"{collection_name}\",     prefetch=models.Prefetch(         query=[0.2, 0.8, ...],  # <-- dense vector         limit=50     ),     query=models.FormulaQuery(         formula=models.SumExpression(sum=[             \"$score\",             models.MultExpression(mult=[0.5, models.FieldCondition(key=\"tag\", match=models.MatchAny(any=[\"h1\", \"h2\", \"h3\", \"h4\"]))]),             models.MultExpression(mult=[0.25, models.FieldCondition(key=\"tag\", match=models.MatchAny(any=[\"p\", \"li\"]))])         ]     )) ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  const tag_boosted = await client.query(collectionName, {   prefetch: {     query: [0.2, 0.8, 0.1, 0.9],     limit: 50   },   query: {     formula: {       sum: [         \"$score\",         {           mult: [ 0.5, { key: \"tag\", match: { any: [\"h1\", \"h2\", \"h3\", \"h4\"] }} ]         },         {           mult: [ 0.25, { key: \"tag\", match: { any: [\"p\", \"li\"] }} ]         }       ]     }   } }); ``` ```rust use qdrant_client::qdrant::{     Condition, Expression, FormulaBuilder, PrefetchQueryBuilder, QueryPointsBuilder, }; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  let _tag_boosted = client.query(     QueryPointsBuilder::new(\"{collection_name}\")         .add_prefetch(PrefetchQueryBuilder::default()             .query(vec![0.01, 0.45, 0.67])             .limit(100u64)         )         .query(FormulaBuilder::new(Expression::sum_with([             Expression::score(),             Expression::mult_with([                 Expression::constant(0.5),                 Expression::condition(Condition::matches(\"tag\", [\"h1\", \"h2\", \"h3\", \"h4\"])),             ]),             Expression::mult_with([                 Expression::constant(0.25),                 Expression::condition(Condition::matches(\"tag\", [\"p\", \"li\"])),             ]),         ])))         .limit(10)     ).await?; ``` ```java import java.util.List;  import static io.qdrant.client.ConditionFactory.matchKeywords; import static io.qdrant.client.ExpressionFactory.condition; import static io.qdrant.client.ExpressionFactory.constant; import static io.qdrant.client.ExpressionFactory.mult; import static io.qdrant.client.ExpressionFactory.sum; import static io.qdrant.client.ExpressionFactory.variable; import static io.qdrant.client.QueryFactory.formula; import static io.qdrant.client.QueryFactory.nearest;   import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.Formula; import io.qdrant.client.grpc.Points.MultExpression; import io.qdrant.client.grpc.Points.PrefetchQuery; import io.qdrant.client.grpc.Points.QueryPoints; import io.qdrant.client.grpc.Points.SumExpression;  QdrantClient client =   new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client   .queryAsync(     QueryPoints.newBuilder()       .setCollectionName(\"{collection_name}\")       .addPrefetch(         PrefetchQuery.newBuilder()           .setQuery(nearest(0.01f, 0.45f, 0.67f))           .setLimit(100)           .build())       .setQuery(         formula(           Formula.newBuilder()             .setExpression(               sum(                 SumExpression.newBuilder()                   .addSum(variable(\"$score\"))                   .addSum(                     mult(                       MultExpression.newBuilder()                         .addMult(constant(0.5f))                         .addMult(                           condition(                             matchKeywords(                               \"tag\",                               List.of(\"h1\", \"h2\", \"h3\", \"h4\"))))                         .build()))                   .addSum(mult(MultExpression.newBuilder()                   .addMult(constant(0.25f))                   .addMult(                     condition(                       matchKeywords(                         \"tag\",                         List.of(\"p\", \"li\"))))                   .build()))                   .build()))             .build()))       .build())   .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc; using static Qdrant.Client.Grpc.Conditions;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(   collectionName: \"{collection_name}\",   prefetch:   [     new PrefetchQuery { Query = new float[] { 0.01f, 0.45f, 0.67f }, Limit = 100 },   ],   query: new Formula   {     Expression = new SumExpression     {       Sum =       {         \"$score\",         new MultExpression         {           Mult = { 0.5f, Match(\"tag\", [\"h1\", \"h2\", \"h3\", \"h4\"]) },         },         new MultExpression { Mult = { 0.25f, Match(\"tag\", [\"p\", \"li\"]) } },       },     },   },   limit: 10 ); ``` ```go import (     \"context\"      \"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{     Host: \"localhost\",     Port: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{     CollectionName: \"{collection_name}\",     Prefetch: []*qdrant.PrefetchQuery{         {             Query: qdrant.NewQuery(0.01, 0.45, 0.67),         },     },     Query: qdrant.NewQueryFormula(&qdrant.Formula{         Expression: qdrant.NewExpressionSum(&qdrant.SumExpression{             Sum: []*qdrant.Expression{                 qdrant.NewExpressionVariable(\"$score\"),                 qdrant.NewExpressionMult(&qdrant.MultExpression{                     Mult: []*qdrant.Expression{                         qdrant.NewExpressionConstant(0.5),                         qdrant.NewExpressionCondition(qdrant.NewMatchKeywords(\"tag\", \"h1\", \"h2\", \"h3\", \"h4\")),                     },                 }),                 qdrant.NewExpressionMult(&qdrant.MultExpression{                     Mult: []*qdrant.Expression{                         qdrant.NewExpressionConstant(0.25),                         qdrant.NewExpressionCondition(qdrant.NewMatchKeywords(\"tag\", \"p\", \"li\")),                     },                 }),             },         }),     }), }) ``` There are multiple expressions available, check the [API docs for specific details](https://api.qdrant.tech/v-1-14-x/api-reference/search/query-points#request.body.query.Query%20Interface.Query.Formula%20Query.formula). - **constant** - A floating point number. e.g. `0.5`. - `\"$score\"` - Reference to the score of the point in the prefetch. This is the same as `\"$score[0]\"`. - `\"$score[0]\"`, `\"$score[1]\"`, `\"$score[2]\"`, … - When using multiple prefetches, you can reference specific prefetch with the index within the array of prefetches. - **payload key** - Any plain string will refer to a payload key. This uses the jsonpath format used in every other place, e.g. `key` or `key.subkey`. It will try to extract a number from the given key. - **condition** - A filtering condition. If the condition is met, it becomes `1.0`, otherwise `0.0`. - **mult** - Multiply an array of expressions. - **sum** - Sum an array of expressions. - **div** - Divide an expression by another expression. - **abs** - Absolute value of an expression. - **pow** - Raise an expression to the power of another expression. - **sqrt** - Square root of an expression. - **log10** - Base 10 logarithm of an expression. - **ln** - Natural logarithm of an expression. - **exp** - Exponential function of an expression (`e^x`). - **geo distance** - Haversine distance between two geographic points. Values need to be `{ \"lat\": 0.0, \"lon\": 0.0 }` objects. - **decay** - Apply a decay function to an expression, which clamps the output between 0 and 1. Available decay functions are **linear**, **exponential**, and **gaussian**. [See more](#boost-points-closer-to-user.md). - **datetime** - Parse a datetime string (see formats [here](https://qdrant.tech/documentation/concepts/payload/#datetime)), and use it as a POSIX timestamp, in seconds. - **datetime key** - Specify that a payload key contains a datetime string to be parsed into POSIX seconds. It is possible to define a default for when the variable (either from payload or prefetch score) is not found. This is given in the form of a mapping from variable to value. If there is no variable, and no defined default, a default value of `0.0` is used. **Considerations when using formula queries:**  - Formula queries can only be used as a rescoring step. - Formula results are always sorted in descending order (bigger is better). **For euclidean scores, make sure to negate them** to sort closest to farthest. - If a score or variable is not available, and there is no default value, it will return an error. - If a value is not a number (or the expected type), it will return an error. - To leverage payload indices, single-value arrays are considered the same as the inner value. For example: `[0.2]` is the same as `0.2`, but `[0.2, 0.7]` will be interpreted as `[0.2, 0.7]` - Multiplication and division are lazily evaluated, meaning that if a 0 is encountered, the rest of operations don’t execute (e.g. `0.0 * condition` won’t check the condition). - Payload variables used within the formula also benefit from having payload indices. Please try to always have a payload index set up for the variables used in the formula for better performance.",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0016",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Score boosting"
      ],
      "heading_text": "Score boosting",
      "token_count": 2735,
      "char_count": 11326,
      "start_char": 37736,
      "end_char": 49062,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.639736842105263,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.940700",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 2735,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Score boosting",
      "chunk_hash": "a3ca26287b7b9ee4",
      "content_digest": "a3ca26287b7b9ee4",
      "chunk_length": 11326,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "the",
          "expression",
          "query",
          "import",
          "score",
          "formula",
          "tag",
          "mult",
          "key",
          "condition",
          "points",
          "new",
          "for",
          "payload",
          "prefetch",
          "sum",
          "models",
          "multexpression"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 53,
            "weight": 0.054303
          },
          {
            "term": "client",
            "tf": 34,
            "weight": 0.034836
          },
          {
            "term": "the",
            "tf": 32,
            "weight": 0.032787
          },
          {
            "term": "expression",
            "tf": 24,
            "weight": 0.02459
          },
          {
            "term": "query",
            "tf": 22,
            "weight": 0.022541
          },
          {
            "term": "import",
            "tf": 19,
            "weight": 0.019467
          },
          {
            "term": "score",
            "tf": 18,
            "weight": 0.018443
          },
          {
            "term": "formula",
            "tf": 17,
            "weight": 0.017418
          },
          {
            "term": "tag",
            "tf": 17,
            "weight": 0.017418
          },
          {
            "term": "mult",
            "tf": 16,
            "weight": 0.016393
          },
          {
            "term": "key",
            "tf": 13,
            "weight": 0.01332
          },
          {
            "term": "condition",
            "tf": 13,
            "weight": 0.01332
          },
          {
            "term": "points",
            "tf": 11,
            "weight": 0.01127
          },
          {
            "term": "new",
            "tf": 11,
            "weight": 0.01127
          },
          {
            "term": "for",
            "tf": 10,
            "weight": 0.010246
          },
          {
            "term": "payload",
            "tf": 10,
            "weight": 0.010246
          },
          {
            "term": "prefetch",
            "tf": 10,
            "weight": 0.010246
          },
          {
            "term": "sum",
            "tf": 10,
            "weight": 0.010246
          },
          {
            "term": "models",
            "tf": 10,
            "weight": 0.010246
          },
          {
            "term": "multexpression",
            "tf": 9,
            "weight": 0.009221
          }
        ],
        "unique_terms": 342,
        "total_terms": 976
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Score boosting",
        "client",
        "expression",
        "formula",
        "import",
        "mult",
        "qdrant",
        "query",
        "score",
        "tag",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.639736842105263,
      "overall": 0.7132456140350877
    }
  },
  {
    "text": "### Boost points closer to user  Another example. Combine the score with how close the result is to a user. Considering each point has an associated geo location, we can calculate the distance between the point and the request’s location. Assuming we have cosine scores in the prefetch, we can use a helper function to clamp the geographical distance between 0 and 1, by using a decay function. Once clamped, we can sum the score and the distance together. Pseudocode:  `score = score + gauss_decay(distance)`  In this case we use a **gauss\\_decay** function. ```http POST /collections/{collection_name}/points/query {     \"prefetch\": { \"query\": [0.2, 0.8, ...], \"limit\": 50 },     \"query\": {         \"formula\": {             \"sum\": [                 \"$score\",                 {                     \"gauss_decay\": {                         \"x\": {                             \"geo_distance\": {                                 \"origin\": { \"lat\": 52.504043, \"lon\": 13.393236 }                                 \"to\": \"geo.location\"                             }                         },                         \"scale\": 5000 // 5km                     }                 }             ]         },         \"defaults\": { \"geo.location\": {\"lat\": 48.137154, \"lon\": 11.576124} }     } } ``` ```python from qdrant_client import models   geo_boosted = client.query_points(     collection_name=\"{collection_name}\",     prefetch=models.Prefetch(         query=[0.2, 0.8, ...],  # <-- dense vector         limit=50     ),     query=models.FormulaQuery(         formula=models.SumExpression(sum=[             \"$score\",             models.GaussDecayExpression(                 gauss_decay=models.DecayParamsExpression(                     x=models.GeoDistance(                         geo_distance=models.GeoDistanceParams(                             origin=models.GeoPoint(                                 lat=52.504043,                                 lon=13.393236                             ),  # Berlin                             to=\"geo.location\"                         )                     ),                     scale=5000  # 5km                 )             )         ]),         defaults={\"geo.location\": models.GeoPoint(lat=48.137154, lon=11.576124)}  # Munich     ) ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  const distance_boosted = await client.query(collectionName, {   prefetch: {     query: [0.2, 0.8, ...],     limit: 50   },   query: {     formula: {       sum: [         \"$score\",         {           gauss_decay: {             x: {               geo_distance: {                 origin: { lat: 52.504043, lon: 13.393236 }, // Berlin                 to: \"geo.location\"               }             },             scale: 5000 // 5km           }         }       ]     },     defaults: { \"geo.location\": { lat: 48.137154, lon: 11.576124 } } // Munich   } }); ``` ```rust use qdrant_client::qdrant::{     GeoPoint,  DecayParamsExpressionBuilder, Expression, FormulaBuilder, PrefetchQueryBuilder, QueryPointsBuilder, }; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  let _geo_boosted = client.query(     QueryPointsBuilder::new(\"{collection_name}\")             .add_prefetch(                 PrefetchQueryBuilder::default()                     .query(vec![0.01, 0.45, 0.67])                     .limit(100u64),             )             .query(                 FormulaBuilder::new(Expression::sum_with([                     Expression::score(),                     Expression::exp_decay(                         DecayParamsExpressionBuilder::new(Expression::geo_distance_with(                             // Berlin                             GeoPoint { lat: 52.504043, lon: 13.393236 },                             \"geo.location\",                         ))                         .scale(5_000.0),                     ),                 ]))                 // Munich                 .add_default(\"geo.location\", GeoPoint { lat: 48.137154, lon: 11.576124 }),             )             .limit(10),     )     .await?; ``` ```java import static io.qdrant.client.ExpressionFactory.expDecay; import static io.qdrant.client.ExpressionFactory.geoDistance; import static io.qdrant.client.ExpressionFactory.sum; import static io.qdrant.client.ExpressionFactory.variable; import static io.qdrant.client.PointIdFactory.id; import static io.qdrant.client.QueryFactory.formula; import static io.qdrant.client.QueryFactory.nearest; import static io.qdrant.client.ValueFactory.value;  import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.DecayParamsExpression; import io.qdrant.client.grpc.Points.Formula; import io.qdrant.client.grpc.Points.GeoDistance; import io.qdrant.client.grpc.Points.GeoPoint; import io.qdrant.client.grpc.Points.PrefetchQuery; import io.qdrant.client.grpc.Points.QueryPoints; import io.qdrant.client.grpc.Points.SumExpression;  QdrantClient client =   new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  client   .queryAsync(     QueryPoints.newBuilder()       .setCollectionName(\"{collection_name}\")       .addPrefetch(         PrefetchQuery.newBuilder()           .setQuery(nearest(0.01f, 0.45f, 0.67f))           .setLimit(100)           .build())       .setQuery(         formula(           Formula.newBuilder()             .setExpression(               sum(                 SumExpression.newBuilder()                   .addSum(variable(\"$score\"))                   .addSum(                     expDecay(                       DecayParamsExpression.newBuilder()                         .setX(                           geoDistance(                             GeoDistance.newBuilder()                               .setOrigin(                                 GeoPoint.newBuilder()                                   .setLat(52.504043)                                   .setLon(13.393236)                                   .build())                               .setTo(\"geo.location\")                               .build()))                         .setScale(5000)                         .build()))                   .build()))             .putDefaults(               \"geo.location\",               value(                 Map.of(                   \"lat\", value(48.137154),                   \"lon\", value(11.576124))))             .build()))       .build())   .get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc; using static Qdrant.Client.Grpc.Expression;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(     collectionName: \"{collection_name}\",     prefetch:     [         new PrefetchQuery { Query = new float[] { 0.01f, 0.45f, 0.67f }, Limit = 100 },     ],     query: new Formula     {         Expression = new SumExpression         {             Sum =             {                 \"$score\",                 FromExpDecay(                     new()                     {                         X = new GeoDistance                         {                             Origin = new GeoPoint { Lat = 52.504043, Lon = 13.393236 },                             To = \"geo.location\",                         },                         Scale = 5000,                     }                 ),             },         },         Defaults =         {             [\"geo.location\"] = new Dictionary<string, Value>             {                 [\"lat\"] = 48.137154,                 [\"lon\"] = 11.576124,             },         },     } ); ``` ```go import (     \"context\"      \"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{     Host: \"localhost\",     Port: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{     CollectionName: \"{collection_name}\",     Prefetch: []*qdrant.PrefetchQuery{         {             Query: qdrant.NewQuery(0.2, 0.8),         },     },     Query: qdrant.NewQueryFormula(&qdrant.Formula{         Expression: qdrant.NewExpressionSum(&qdrant.SumExpression{             Sum: []*qdrant.Expression{                 qdrant.NewExpressionVariable(\"$score\"),                 qdrant.NewExpressionExpDecay(&qdrant.DecayParamsExpression{                     X: qdrant.NewExpressionGeoDistance(&qdrant.GeoDistance{                         Origin: &qdrant.GeoPoint{                             Lat: 52.504043,                             Lon: 13.393236,                         },                         To: \"geo.location\",                     }),                 }),             },         }),         Defaults: qdrant.NewValueMap(map[string]any{             \"geo.location\": map[string]any{                 \"lat\": 48.137154,                 \"lon\": 11.576124,             },         }),     }), }) ```",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0017",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Boost points closer to user"
      ],
      "heading_text": "Boost points closer to user",
      "token_count": 1940,
      "char_count": 8862,
      "start_char": 49077,
      "end_char": 57939,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6506965174129352,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.957584",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1940,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Boost points closer to user",
      "chunk_hash": "020be3dfde37de01",
      "content_digest": "020be3dfde37de01",
      "chunk_length": 8862,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "client",
          "geo",
          "import",
          "query",
          "location",
          "new",
          "lat",
          "lon",
          "score",
          "points",
          "models",
          "the",
          "distance",
          "sum",
          "formula",
          "geopoint",
          "expression",
          "build",
          "static"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 46,
            "weight": 0.072785
          },
          {
            "term": "client",
            "tf": 36,
            "weight": 0.056962
          },
          {
            "term": "geo",
            "tf": 21,
            "weight": 0.033228
          },
          {
            "term": "import",
            "tf": 20,
            "weight": 0.031646
          },
          {
            "term": "query",
            "tf": 17,
            "weight": 0.026899
          },
          {
            "term": "location",
            "tf": 16,
            "weight": 0.025316
          },
          {
            "term": "new",
            "tf": 14,
            "weight": 0.022152
          },
          {
            "term": "lat",
            "tf": 13,
            "weight": 0.02057
          },
          {
            "term": "lon",
            "tf": 13,
            "weight": 0.02057
          },
          {
            "term": "score",
            "tf": 11,
            "weight": 0.017405
          },
          {
            "term": "points",
            "tf": 10,
            "weight": 0.015823
          },
          {
            "term": "models",
            "tf": 10,
            "weight": 0.015823
          },
          {
            "term": "the",
            "tf": 9,
            "weight": 0.014241
          },
          {
            "term": "distance",
            "tf": 9,
            "weight": 0.014241
          },
          {
            "term": "sum",
            "tf": 9,
            "weight": 0.014241
          },
          {
            "term": "formula",
            "tf": 9,
            "weight": 0.014241
          },
          {
            "term": "geopoint",
            "tf": 9,
            "weight": 0.014241
          },
          {
            "term": "expression",
            "tf": 9,
            "weight": 0.014241
          },
          {
            "term": "build",
            "tf": 9,
            "weight": 0.014241
          },
          {
            "term": "static",
            "tf": 9,
            "weight": 0.014241
          }
        ],
        "unique_terms": 167,
        "total_terms": 632
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Boost points closer to user",
        "client",
        "geo",
        "import",
        "lat",
        "location",
        "lon",
        "new",
        "qdrant",
        "query",
        "score"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6506965174129352,
      "overall": 0.7168988391376451
    }
  },
  {
    "text": "### Time-based score boosting  Or combine the score with the information on how “fresh” the result is. It’s applicable to (news) articles and in general many other different types of searches (think of the “newest” filter you use in applications). To implement time-based score boosting, you’ll need each point to have a datetime field in its payload, e.g., when the item was uploaded or last updated. Then we can calculate the time difference in seconds between this payload value and the current time, our `target`. With an exponential decay function, perfect for use cases with time, as freshness is a very quickly lost quality, we can convert this time difference into a value between 0 and 1, then add it to the original score to prioritise fresh results. `score = score + exp_decay(current_time - point_time)`  That’s how it will look for an application where, after 1 day, results start being only half-relevant (so get a score of 0.5): ```http POST /collections/{collection_name}/points/query {     \"prefetch\": {         \"query\": [0.2, 0.8, ...],  // <-- dense vector         \"limit\": 50     },     \"query\": {         \"formula\": {             \"sum\": [                 \"$score\", // the final score = score + exp_decay(target_time - x_time)                 {                     \"exp_decay\": {                         \"x\": {                             \"datetime_key\": \"update_time\" // payload key                         },                         \"target\": {                             \"datetime\": \"YYYY-MM-DDT00:00:00Z\" // current datetime                         },                         \"scale\": 86400, // 1 day in seconds                         \"midpoint\": 0.5 // if item's \"update_time\" is more than 1 day apart from current datetime, relevance score is less than 0.5                     }                 }             ]         }     } } ``` ```python from qdrant_client import models   time_boosted = client.query_points(     collection_name=\"{collection_name}\",     prefetch=models.Prefetch(         query=[0.2, 0.8, ...],  # <-- dense vector         limit=50     ),     query=models.FormulaQuery(         formula=models.SumExpression(             sum=[                 \"$score\", # the final score = score + exp_decay(target_time - x_time)                 models.ExpDecayExpression(                     exp_decay=models.DecayParamsExpression(                         x=models.DatetimeKeyExpression(                             datetime_key=\"upload_time\" # payload key                          ),                         target=models.DatetimeExpression(                             datetime=\"YYYY-MM-DDT00:00:00Z\" # current datetime                         ),                         scale=86400, # 1 day in seconds                         midpoint=0.5 # if item's \"update_time\" is more than 1 day apart from current datetime, relevance score is less than 0.5                     )                 )             ]         )     ) ) ``` ```typescript import { QdrantClient } from \"@qdrant/js-client-rest\";  const client = new QdrantClient({ host: \"localhost\", port: 6333 });  const time_boosted = await client.query(collectionName, {   prefetch: {     query: [0.2, 0.8, ...], // <-- dense vector     limit: 50   },    query: {       formula: {           sum: [ //  the final score = score + exp_decay(target_time - x_time)               \"$score\",               {                   exp_decay: {                       x: {                           datetime_key: \"update_time\" // payload key                       },                       target: {                           datetime: \"YYYY-MM-DDT00:00:00Z\" // current datetime                       },                       midpoint: 0.5,                       scale: 86400 // 1 day in seconds                   }               }           ]       }   } }); ``` ```rust use qdrant_client::qdrant::{     DecayParamsExpressionBuilder, Expression, FormulaBuilder, PrefetchQueryBuilder, QueryPointsBuilder, }; use qdrant_client::Qdrant;  let client = Qdrant::from_url(\"http://localhost:6334\").build()?;  let _geo_boosted = client.query(     QueryPointsBuilder::new(\"{collection_name}\")             .add_prefetch(                 PrefetchQueryBuilder::default()                     .query(vec![0.2, 0.8, .., ..]) // <-- dense vector                     .limit(50u64),             )             .query(                 FormulaBuilder::new(Expression::sum_with([ //  the final score = score + exp_decay(target_time - x_time)                     Expression::score(),                     Expression::exp_decay(                         DecayParamsExpressionBuilder::new(Expression::datetime_key(\"update_time\")) // payload key                             .target(Expression::datetime(\"YYYY-MM-DDT00:00:00Z\"))                             .midpoint(0.5)                             .scale(86400.0), // 1 day in seconds                     ),                 ]))             )     )     .await?; ``` ```java import io.qdrant.client.QdrantClient; import io.qdrant.client.QdrantGrpcClient; import io.qdrant.client.grpc.Points.DecayParamsExpression; import io.qdrant.client.grpc.Points.Formula; import io.qdrant.client.grpc.Points.PrefetchQuery; import io.qdrant.client.grpc.Points.QueryPoints; import io.qdrant.client.grpc.Points.ScoredPoint; import io.qdrant.client.grpc.Points.SumExpression; import java.util.List;  import static io.qdrant.client.ExpressionFactory.datetime; import static io.qdrant.client.ExpressionFactory.datetimeKey; import static io.qdrant.client.ExpressionFactory.expDecay; import static io.qdrant.client.ExpressionFactory.sum; import static io.qdrant.client.ExpressionFactory.variable; import static io.qdrant.client.QueryFactory.formula; import static io.qdrant.client.QueryFactory.nearest;  QdrantClient client =   new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());  List<ScoredPoint> time_boosted = client.queryAsync(     QueryPoints.newBuilder()         .setCollectionName({collection_name})         .addPrefetch(             PrefetchQuery.newBuilder()                 .setQuery(nearest(0.2f, 0.8f, .., ..))  // <-- dense vector                 .setLimit(50)                 .build())         .setQuery(             formula(                 Formula.newBuilder()                     .setExpression(                         sum( //  the final score = score + exp_decay(target_time - x_time)                             SumExpression.newBuilder()                                 .addSum(variable(\"$score\"))                                 .addSum(                                     expDecay(                                         DecayParamsExpression.newBuilder()                                             .setX(                                                 datetimeKey(\"update_time\"))  // payload key                                             .setTarget(                                                 datetime(\"YYYY-MM-DDT00:00:00Z\"))  // current datetime                                             .setMidpoint(0.5f)                                             .setScale(86400)  // 1 day in seconds                                             .build()))                                 .build()))                     .build()))         .build() ).get(); ``` ```csharp using Qdrant.Client; using Qdrant.Client.Grpc;  var client = new QdrantClient(\"localhost\", 6334);  await client.QueryAsync(     collectionName: \"{collection_name}\",     prefetch:     [         new PrefetchQuery { Query = new float[] { 0.2f, 0.8f, ..., .. }, Limit = 50 }, // <-- dense vector     ],     query: new Formula      {         Expression = new SumExpression         {             Sum = //  the final score = score + exp_decay(target_time - x_time)             {                 \"$score\",                 Expression.FromExpDecay(                     new()                     {                         X = Expression.FromDateTimeKey(\"update_time\"),  // payload key                         Target = Expression.FromDateTime(\"YYYY-MM-DDT00:00:00Z\"),  // current datetime                         Midpoint = 0.5f,                         Scale = 86400 // 1 day in seconds                     }                 )             }         }     } ); ``` ```go import (     \"context\"      \"github.com/qdrant/go-client/qdrant\" )  client, err := qdrant.NewClient(&qdrant.Config{     Host: \"localhost\",     Port: 6334, })  client.Query(context.Background(), &qdrant.QueryPoints{     CollectionName: \"{collection_name}\",     Prefetch: []*qdrant.PrefetchQuery{         {             Query: qdrant.NewQuery(0.2, 0.8, .., ...), // <-- dense vector             Limit: qdrant.PtrOf(uint64(50)),         },     },     Query: qdrant.NewQueryFormula(&qdrant.Formula{         Expression: qdrant.NewExpressionSum(&qdrant.SumExpression{             Sum: []*qdrant.Expression{ //  the final score = score + exp_decay(target_time - x_time)                 qdrant.NewExpressionVariable(\"$score\"),                  qdrant.NewExpressionExpDecay(&qdrant.DecayParamsExpression{                     X: qdrant.NewExpressionDatetimeKey(\"update_time\"), // payload key                     Target: qdrant.NewExpressionDatetime(\"YYYY-MM-DDT00:00:00Z\"), // current datetime                     Scale:  qdrant.PtrOf(float32(86400)), // 1 day in seconds                     Midpoint: qdrant.PtrOf(float32(0.5)),                 }),             },         }),     }), }) ``` For all decay functions, there are these parameters available  | Parameter  | Default | Description                                                                                                                                                                                       | | ---------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `x`        | N/A     | The value to decay                                                                                                                                                                                | | `target`   | 0.0     | The value at which the decay will be at its peak. For distances it is usually set at 0.0, but can be set to any value.                                                                            | | `scale`    | 1.0     | The value at which the decay function will be equal to `midpoint`. This is in terms of `x` units, for example, if `x` is in meters, `scale` of 5000 means 5km. Must be a non-zero positive number | | `midpoint` | 0.5     | Output is `midpoint` when `x` equals `scale`. Must be in the range (0.0, 1.0), exclusive                                                                                                          |  The formulas for each decay function are as follows:    | Decay Function    | Color  | Range    | Formula                                                                                                      | | ----------------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------ | | **`lin_decay`**   | green  | `[0, 1]` | $\\text{lin\\_decay}(x) = \\max\\left(0,\\ -\\frac{(1-m\\_{idpoint})}{s\\_{cale}}\\cdot {abs}(x-t\\_{arget})+1\\right)$ | | **`exp_decay`**   | red    | `(0, 1]` | $\\text{exp\\_decay}(x) = \\exp\\left(\\frac{\\ln(m\\_{idpoint})}{s\\_{cale}}\\cdot {abs}(x-t\\_{arget})\\right)$       | | **`gauss_decay`** | purple | `(0, 1]` | $\\text{gauss\\_decay}(x) = \\exp\\left(\\frac{\\ln(m\\_{idpoint})}{s\\_{cale}^{2}}\\cdot (x-t\\_{arget})^{2}\\right)$  |",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0018",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Time-based score boosting"
      ],
      "heading_text": "Time-based score boosting",
      "token_count": 2464,
      "char_count": 11644,
      "start_char": 57950,
      "end_char": 69594,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6252510460251045,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:14.988082",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 2464,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Time-based score boosting",
      "chunk_hash": "e007731d145c6829",
      "content_digest": "e007731d145c6829",
      "chunk_length": 11644,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "time",
          "client",
          "score",
          "decay",
          "the",
          "datetime",
          "import",
          "query",
          "exp",
          "target",
          "expression",
          "key",
          "new",
          "current",
          "day",
          "formula",
          "payload",
          "scale",
          "midpoint"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 44,
            "weight": 0.051044
          },
          {
            "term": "time",
            "tf": 34,
            "weight": 0.039443
          },
          {
            "term": "client",
            "tf": 33,
            "weight": 0.038283
          },
          {
            "term": "score",
            "tf": 30,
            "weight": 0.034803
          },
          {
            "term": "decay",
            "tf": 25,
            "weight": 0.029002
          },
          {
            "term": "the",
            "tf": 22,
            "weight": 0.025522
          },
          {
            "term": "datetime",
            "tf": 19,
            "weight": 0.022042
          },
          {
            "term": "import",
            "tf": 19,
            "weight": 0.022042
          },
          {
            "term": "query",
            "tf": 17,
            "weight": 0.019722
          },
          {
            "term": "exp",
            "tf": 16,
            "weight": 0.018561
          },
          {
            "term": "target",
            "tf": 15,
            "weight": 0.017401
          },
          {
            "term": "expression",
            "tf": 12,
            "weight": 0.013921
          },
          {
            "term": "key",
            "tf": 11,
            "weight": 0.012761
          },
          {
            "term": "new",
            "tf": 11,
            "weight": 0.012761
          },
          {
            "term": "current",
            "tf": 10,
            "weight": 0.011601
          },
          {
            "term": "day",
            "tf": 10,
            "weight": 0.011601
          },
          {
            "term": "formula",
            "tf": 10,
            "weight": 0.011601
          },
          {
            "term": "payload",
            "tf": 9,
            "weight": 0.010441
          },
          {
            "term": "scale",
            "tf": 9,
            "weight": 0.010441
          },
          {
            "term": "midpoint",
            "tf": 9,
            "weight": 0.010441
          }
        ],
        "unique_terms": 253,
        "total_terms": 862
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": true
      },
      "search_keywords": [
        "Time-based score boosting",
        "client",
        "datetime",
        "decay",
        "exp",
        "import",
        "qdrant",
        "query",
        "score",
        "the",
        "time"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6252510460251045,
      "overall": 0.7417503486750348
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Hybrid and Multi-Stage Queries](#hybrid-and-multi-stage-queries.md)    - [Hybrid Search](#hybrid-search.md)    - [Multi-stage queries](#multi-stage-queries.md)      - [Re-scoring examples](#re-scoring-examples.md)     - [Maximal Marginal Relevance (MMR)](#maximal-marginal-relevance-mmr.md)    - [Score boosting](#score-boosting.md)      - [Boost points closer to user](#boost-points-closer-to-user.md)     - [Time-based score boosting](#time-based-score-boosting.md)    - [Grouping](#grouping.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "aaa10e2b6e91-0020",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "filename": "_documentation_concepts_hybrid-queries_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 295,
      "char_count": 1063,
      "start_char": 72443,
      "end_char": 73506,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5237662337662338,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:15.000568",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 295,
      "document_id": "aaa10e2b6e91",
      "document_name": "_documentation_concepts_hybrid-queries_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "source_filename": "_documentation_concepts_hybrid-queries_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "57d14d507530b9bf",
      "content_digest": "57d14d507530b9bf",
      "chunk_length": 1063,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "page",
          "github",
          "qdrant",
          "landing",
          "hybrid",
          "queries",
          "https",
          "com",
          "multi",
          "stage",
          "score",
          "boosting",
          "this",
          "you",
          "edit",
          "tree",
          "master",
          "content",
          "documentation",
          "concepts"
        ],
        "term_weights": [
          {
            "term": "page",
            "tf": 7,
            "weight": 0.053435
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.053435
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "hybrid",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "queries",
            "tf": 6,
            "weight": 0.045802
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "multi",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "stage",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "score",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "boosting",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.022901
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "edit",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "tree",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "master",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "content",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "concepts",
            "tf": 2,
            "weight": 0.015267
          }
        ],
        "unique_terms": 52,
        "total_terms": 131
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "com",
        "github",
        "https",
        "hybrid",
        "landing",
        "multi",
        "page",
        "qdrant",
        "queries",
        "stage"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5237662337662338,
      "overall": 0.6745887445887445
    }
  }
]