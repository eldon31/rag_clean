[
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "6110346a4046-0000",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 660,
      "end_char": 1333,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.434253",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "6110346a4046-0001",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 1335,
      "end_char": 6996,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.461011",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)",
    "metadata": {
      "chunk_id": "6110346a4046-0002",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 576,
      "char_count": 2347,
      "start_char": 6998,
      "end_char": 9345,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.468205",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 576,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "59078d11dd9c9931",
      "content_digest": "59078d11dd9c9931",
      "chunk_length": 2347,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "https",
          "tech",
          "documentation",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 30,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "tech",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "documentation",
            "tf": 21,
            "weight": 0.075
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.05
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.032143
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.025
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.021429
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017857
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.014286
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010714
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.007143
          }
        ],
        "unique_terms": 96,
        "total_terms": 280
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9076923076923078,
      "overall": 0.8358974358974359
    }
  },
  {
    "text": "### Essentials  [Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)  [Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)  [Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)  [Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)  [Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)  [5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)  [Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)",
    "metadata": {
      "chunk_id": "6110346a4046-0003",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Essentials"
      ],
      "heading_text": "Essentials",
      "token_count": 189,
      "char_count": 673,
      "start_char": 9347,
      "end_char": 10020,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.470356",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 189,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Essentials",
      "chunk_hash": "a64044a3995d82e4",
      "content_digest": "a64044a3995d82e4",
      "chunk_length": 673,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "rag",
          "https",
          "tech",
          "documentation",
          "agentic",
          "with",
          "data",
          "ingestion",
          "beginners",
          "langgraph",
          "discord",
          "multimodal",
          "and",
          "deepseek",
          "n8n",
          "essentials",
          "for",
          "simple",
          "system"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 10,
            "weight": 0.119048
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.107143
          },
          {
            "term": "https",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "tech",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "documentation",
            "tf": 7,
            "weight": 0.083333
          },
          {
            "term": "agentic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "with",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "data",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "ingestion",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "beginners",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "langgraph",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "discord",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "multimodal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "deepseek",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "n8n",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "essentials",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "simple",
            "tf": 1,
            "weight": 0.011905
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.011905
          }
        ],
        "unique_terms": 31,
        "total_terms": 84
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Essentials",
        "agentic",
        "beginners",
        "data",
        "documentation",
        "https",
        "ingestion",
        "qdrant",
        "rag",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5053846153846153,
      "overall": 0.7017948717948718
    }
  },
  {
    "text": "### Integrations  [Data Management](https://qdrant.tech/documentation/data-management/)  - [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/) - [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/) - [Apache Spark](https://qdrant.tech/documentation/data-management/spark/) - [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/) - [cognee](https://qdrant.tech/documentation/data-management/cognee/) - [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/) - [DLT](https://qdrant.tech/documentation/data-management/dlt/) - [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/) - [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/) - [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)  [Embeddings](https://qdrant.tech/documentation/embeddings/)  - [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/) - [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/) - [Cohere](https://qdrant.tech/documentation/embeddings/cohere/) - [Gemini](https://qdrant.tech/documentation/embeddings/gemini/) - [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/) - [Mistral](https://qdrant.tech/documentation/embeddings/mistral/) - [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/) - [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/) - [Nomic](https://qdrant.tech/documentation/embeddings/nomic/) - [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/) - [Ollama](https://qdrant.tech/documentation/embeddings/ollama/) - [OpenAI](https://qdrant.tech/documentation/embeddings/openai/) - [Prem AI](https://qdrant.tech/documentation/embeddings/premai/) - [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/) - [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/) - [Upstage](https://qdrant.tech/documentation/embeddings/upstage/) - [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)  [Frameworks](https://qdrant.tech/documentation/frameworks/)  - [Autogen](https://qdrant.tech/documentation/frameworks/autogen/) - [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/) - [CamelAI](https://qdrant.tech/documentation/frameworks/camel/) - [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/) - [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/) - [Dagster](https://qdrant.tech/documentation/frameworks/dagster/) - [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/) - [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/) - [Feast](https://qdrant.tech/documentation/frameworks/feast/) - [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/) - [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/) - [Haystack](https://qdrant.tech/documentation/frameworks/haystack/) - [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/) - [Langchain](https://qdrant.tech/documentation/frameworks/langchain/) - [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/) - [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/) - [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/) - [Mastra](https://qdrant.tech/documentation/frameworks/mastra/) - [Mem0](https://qdrant.tech/documentation/frameworks/mem0/) - [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/) - [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/) - [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/) - [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/) - [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/) - [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/) - [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/) - [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/) - [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/) - [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/) - [txtai](https://qdrant.tech/documentation/frameworks/txtai/) - [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/) - [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/) - [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)  [Observability](https://qdrant.tech/documentation/observability/)  - [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/) - [OpenLIT](https://qdrant.tech/documentation/observability/openlit/) - [Datadog](https://qdrant.tech/documentation/observability/datadog/)  [Platforms](https://qdrant.tech/documentation/platforms/)  - [Apify](https://qdrant.tech/documentation/platforms/apify/) - [BuildShip](https://qdrant.tech/documentation/platforms/buildship/) - [Keboola](https://qdrant.tech/documentation/platforms/keboola/) - [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/) - [Make.com](https://qdrant.tech/documentation/platforms/make/) - [N8N](https://qdrant.tech/documentation/platforms/n8n/) - [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/) - [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/) - [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/) - [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/) - [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/) - [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)",
    "metadata": {
      "chunk_id": "6110346a4046-0004",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integrations"
      ],
      "heading_text": "Integrations",
      "token_count": 1498,
      "char_count": 5661,
      "start_char": 10022,
      "end_char": 15683,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.496884",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1498,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Integrations",
      "chunk_hash": "8a3f2e84e2a75ae9",
      "content_digest": "8a3f2e84e2a75ae9",
      "chunk_length": 5661,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "https",
          "qdrant",
          "tech",
          "documentation",
          "frameworks",
          "embeddings",
          "platforms",
          "data",
          "management",
          "observability",
          "airbyte",
          "apache",
          "airflow",
          "spark",
          "cocoindex",
          "cognee",
          "confluent",
          "dlt",
          "fluvio",
          "redpanda"
        ],
        "term_weights": [
          {
            "term": "https",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "qdrant",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "tech",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "documentation",
            "tf": 80,
            "weight": 0.133779
          },
          {
            "term": "frameworks",
            "tf": 35,
            "weight": 0.058528
          },
          {
            "term": "embeddings",
            "tf": 21,
            "weight": 0.035117
          },
          {
            "term": "platforms",
            "tf": 14,
            "weight": 0.023411
          },
          {
            "term": "data",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "management",
            "tf": 12,
            "weight": 0.020067
          },
          {
            "term": "observability",
            "tf": 5,
            "weight": 0.008361
          },
          {
            "term": "airbyte",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "apache",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "airflow",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "spark",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cocoindex",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "cognee",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "confluent",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "dlt",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "fluvio",
            "tf": 2,
            "weight": 0.003344
          },
          {
            "term": "redpanda",
            "tf": 2,
            "weight": 0.003344
          }
        ],
        "unique_terms": 113,
        "total_terms": 598
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integrations",
        "data",
        "documentation",
        "embeddings",
        "frameworks",
        "https",
        "management",
        "observability",
        "platforms",
        "qdrant",
        "tech"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6730769230769231,
      "overall": 0.7576923076923077
    }
  },
  {
    "text": "### Examples  [Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)  - [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/) - [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)  [Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)  - [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/) - [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/) - [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)  [Build Prototypes](https://qdrant.tech/documentation/examples/)  - [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/) - [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/) - [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/) - [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/) - [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/) - [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/) - [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/) - [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/) - [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/) - [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/) - [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/) - [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)  [Practice Datasets](https://qdrant.tech/documentation/datasets/)  - [Documentation](https://qdrant.tech/documentation/) - - [Frameworks](https://qdrant.tech/documentation/frameworks/) - - Langchain",
    "metadata": {
      "chunk_id": "6110346a4046-0005",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Examples"
      ],
      "heading_text": "Examples",
      "token_count": 608,
      "char_count": 2480,
      "start_char": 15685,
      "end_char": 18165,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.9016,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.521566",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 608,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Examples",
      "chunk_hash": "1bd59e648a5ffd36",
      "content_digest": "1bd59e648a5ffd36",
      "chunk_length": 2480,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "documentation",
          "https",
          "tech",
          "examples",
          "search",
          "with",
          "rag",
          "data",
          "chatbot",
          "send",
          "system",
          "semantic",
          "and",
          "cohere",
          "precision",
          "reranking",
          "dspy",
          "for",
          "automate"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 32,
            "weight": 0.109589
          },
          {
            "term": "documentation",
            "tf": 24,
            "weight": 0.082192
          },
          {
            "term": "https",
            "tf": 23,
            "weight": 0.078767
          },
          {
            "term": "tech",
            "tf": 23,
            "weight": 0.078767
          },
          {
            "term": "examples",
            "tf": 14,
            "weight": 0.047945
          },
          {
            "term": "search",
            "tf": 10,
            "weight": 0.034247
          },
          {
            "term": "with",
            "tf": 9,
            "weight": 0.030822
          },
          {
            "term": "rag",
            "tf": 9,
            "weight": 0.030822
          },
          {
            "term": "data",
            "tf": 7,
            "weight": 0.023973
          },
          {
            "term": "chatbot",
            "tf": 6,
            "weight": 0.020548
          },
          {
            "term": "send",
            "tf": 5,
            "weight": 0.017123
          },
          {
            "term": "system",
            "tf": 5,
            "weight": 0.017123
          },
          {
            "term": "semantic",
            "tf": 4,
            "weight": 0.013699
          },
          {
            "term": "and",
            "tf": 4,
            "weight": 0.013699
          },
          {
            "term": "cohere",
            "tf": 4,
            "weight": 0.013699
          },
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.010274
          },
          {
            "term": "reranking",
            "tf": 3,
            "weight": 0.010274
          },
          {
            "term": "dspy",
            "tf": 3,
            "weight": 0.010274
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.010274
          },
          {
            "term": "automate",
            "tf": 2,
            "weight": 0.006849
          }
        ],
        "unique_terms": 97,
        "total_terms": 292
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Examples",
        "chatbot",
        "data",
        "documentation",
        "examples",
        "https",
        "qdrant",
        "rag",
        "search",
        "tech",
        "with"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.9016,
      "overall": 0.8338666666666666
    }
  },
  {
    "text": "# Langchain  Langchain is a library that makes developing Large Language Model-based applications much easier. It unifies the interfaces to different libraries, including major embedding providers and Qdrant. Using Langchain, you can focus on the business value instead of writing the boilerplate. Langchain distributes the Qdrant integration as a partner package. It might be installed with pip: ```bash pip install langchain-qdrant ``` The integration supports searching for relevant documents usin dense/sparse and hybrid retrieval. Qdrant acts as a vector index that may store the embeddings with the documents used to generate them. There are various ways to use it, but calling `QdrantVectorStore.from_texts` or `QdrantVectorStore.from_documents` is probably the most straightforward way to get started: ```python from langchain_qdrant import QdrantVectorStore from langchain_openai import OpenAIEmbeddings  embeddings = OpenAIEmbeddings()  doc_store = QdrantVectorStore.from_texts(     texts, embeddings, url=\"<qdrant-url>\", api_key=\"<qdrant-api-key>\", collection_name=\"texts\" ) ```",
    "metadata": {
      "chunk_id": "6110346a4046-0006",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Langchain"
      ],
      "heading_text": "Langchain",
      "token_count": 234,
      "char_count": 1089,
      "start_char": 18167,
      "end_char": 19256,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5277777777777778,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.526256",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 234,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Langchain",
      "chunk_hash": "6a480920f7c08ef9",
      "content_digest": "6a480920f7c08ef9",
      "chunk_length": 1089,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "langchain",
          "qdrant",
          "from",
          "qdrantvectorstore",
          "texts",
          "documents",
          "embeddings",
          "that",
          "and",
          "integration",
          "with",
          "pip",
          "store",
          "import",
          "openaiembeddings",
          "url",
          "api",
          "key",
          "library"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 8,
            "weight": 0.061069
          },
          {
            "term": "langchain",
            "tf": 7,
            "weight": 0.053435
          },
          {
            "term": "qdrant",
            "tf": 7,
            "weight": 0.053435
          },
          {
            "term": "from",
            "tf": 5,
            "weight": 0.038168
          },
          {
            "term": "qdrantvectorstore",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "texts",
            "tf": 4,
            "weight": 0.030534
          },
          {
            "term": "documents",
            "tf": 3,
            "weight": 0.022901
          },
          {
            "term": "embeddings",
            "tf": 3,
            "weight": 0.022901
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "integration",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "pip",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "store",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "openaiembeddings",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "url",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "api",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "key",
            "tf": 2,
            "weight": 0.015267
          },
          {
            "term": "library",
            "tf": 1,
            "weight": 0.007634
          }
        ],
        "unique_terms": 87,
        "total_terms": 131
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Langchain",
        "and",
        "documents",
        "embeddings",
        "from",
        "langchain",
        "qdrant",
        "qdrantvectorstore",
        "texts",
        "that",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5277777777777778,
      "overall": 0.7092592592592593
    }
  },
  {
    "text": "## Using an existing collection  To get an instance of `langchain_qdrant.QdrantVectorStore` without loading any new documents or texts, you can use the `QdrantVectorStore.from_existing_collection()` method. ```python doc_store = QdrantVectorStore.from_existing_collection(     embeddings=embeddings,     collection_name=\"my_documents\",     url=\"<qdrant-url>\",     api_key=\"<qdrant-api-key>\", ) ```",
    "metadata": {
      "chunk_id": "6110346a4046-0007",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Using an existing collection"
      ],
      "heading_text": "Using an existing collection",
      "token_count": 94,
      "char_count": 397,
      "start_char": 19264,
      "end_char": 19661,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5811764705882353,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.527644",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 94,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Using an existing collection",
      "chunk_hash": "21cc573c9da7db7d",
      "content_digest": "21cc573c9da7db7d",
      "chunk_length": 397,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "collection",
          "existing",
          "qdrant",
          "qdrantvectorstore",
          "documents",
          "from",
          "embeddings",
          "url",
          "api",
          "key",
          "using",
          "get",
          "instance",
          "langchain",
          "without",
          "loading",
          "any",
          "new",
          "texts",
          "you"
        ],
        "term_weights": [
          {
            "term": "collection",
            "tf": 4,
            "weight": 0.093023
          },
          {
            "term": "existing",
            "tf": 3,
            "weight": 0.069767
          },
          {
            "term": "qdrant",
            "tf": 3,
            "weight": 0.069767
          },
          {
            "term": "qdrantvectorstore",
            "tf": 3,
            "weight": 0.069767
          },
          {
            "term": "documents",
            "tf": 2,
            "weight": 0.046512
          },
          {
            "term": "from",
            "tf": 2,
            "weight": 0.046512
          },
          {
            "term": "embeddings",
            "tf": 2,
            "weight": 0.046512
          },
          {
            "term": "url",
            "tf": 2,
            "weight": 0.046512
          },
          {
            "term": "api",
            "tf": 2,
            "weight": 0.046512
          },
          {
            "term": "key",
            "tf": 2,
            "weight": 0.046512
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "get",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "instance",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "langchain",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "without",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "loading",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "any",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "new",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "texts",
            "tf": 1,
            "weight": 0.023256
          },
          {
            "term": "you",
            "tf": 1,
            "weight": 0.023256
          }
        ],
        "unique_terms": 28,
        "total_terms": 43
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Using an existing collection",
        "api",
        "collection",
        "documents",
        "embeddings",
        "existing",
        "from",
        "key",
        "qdrant",
        "qdrantvectorstore",
        "url"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5811764705882353,
      "overall": 0.7270588235294118
    }
  },
  {
    "text": "### On-premise server deployment  No matter if you choose to launch QdrantVectorStore locally with [a Docker container](https://qdrant.tech/documentation/guides/installation/), or select a Kubernetes deployment with [the official Helm chart](https://github.com/qdrant/qdrant-helm), the way you’re going to connect to such an instance will be identical. You’ll need to provide a URL pointing to the service. ```python url = \"<---qdrant url here --->\" qdrant = QdrantVectorStore.from_documents(     docs,     embeddings,     url,     prefer_grpc=True,     collection_name=\"my_documents\", ) ```",
    "metadata": {
      "chunk_id": "6110346a4046-0011",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "On-premise server deployment"
      ],
      "heading_text": "On-premise server deployment",
      "token_count": 141,
      "char_count": 591,
      "start_char": 20625,
      "end_char": 21216,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5407462686567164,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.536649",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 141,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "On-premise server deployment",
      "chunk_hash": "ec81cbc726e0fd1c",
      "content_digest": "ec81cbc726e0fd1c",
      "chunk_length": 591,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "qdrant",
          "url",
          "you",
          "the",
          "deployment",
          "qdrantvectorstore",
          "with",
          "https",
          "helm",
          "documents",
          "premise",
          "server",
          "matter",
          "choose",
          "launch",
          "locally",
          "docker",
          "container",
          "tech",
          "documentation"
        ],
        "term_weights": [
          {
            "term": "qdrant",
            "tf": 5,
            "weight": 0.075758
          },
          {
            "term": "url",
            "tf": 4,
            "weight": 0.060606
          },
          {
            "term": "you",
            "tf": 3,
            "weight": 0.045455
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.045455
          },
          {
            "term": "deployment",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "qdrantvectorstore",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "helm",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "documents",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "premise",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "server",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "matter",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "choose",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "launch",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "locally",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "docker",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "container",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "tech",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "documentation",
            "tf": 1,
            "weight": 0.015152
          }
        ],
        "unique_terms": 49,
        "total_terms": 66
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "On-premise server deployment",
        "deployment",
        "documents",
        "helm",
        "https",
        "qdrant",
        "qdrantvectorstore",
        "the",
        "url",
        "with",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5407462686567164,
      "overall": 0.7135820895522388
    }
  },
  {
    "text": "### Sparse Vector Search  To search with only sparse vectors,  - The `retrieval_mode` parameter should be set to `RetrievalMode.SPARSE`. - An implementation of the [SparseEmbeddings interface](https://github.com/langchain-ai/langchain/blob/master/libs/partners/qdrant/langchain_qdrant/sparse_embeddings.py) using any sparse embeddings provider has to be provided as value to the `sparse_embedding` parameter. The `langchain-qdrant` package provides a [FastEmbed](https://github.com/qdrant/fastembed) based implementation out of the box. To use it, install the [FastEmbed package](https://github.com/qdrant/fastembed#-installation). ```python from langchain_qdrant import FastEmbedSparse, RetrievalMode  sparse_embeddings = FastEmbedSparse(model_name=\"Qdrant/BM25\")  qdrant = QdrantVectorStore.from_documents(     docs,     sparse_embedding=sparse_embeddings,     location=\":memory:\",     collection_name=\"my_documents\",     retrieval_mode=RetrievalMode.SPARSE, )  query = \"What did the president say about Ketanji Brown Jackson\" found_docs = qdrant.similarity_search(query) ```",
    "metadata": {
      "chunk_id": "6110346a4046-0014",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Sparse Vector Search"
      ],
      "heading_text": "Sparse Vector Search",
      "token_count": 257,
      "char_count": 1077,
      "start_char": 22102,
      "end_char": 23179,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.525483870967742,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.546973",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 257,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Sparse Vector Search",
      "chunk_hash": "b9f65a0c5e6997f6",
      "content_digest": "b9f65a0c5e6997f6",
      "chunk_length": 1077,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "sparse",
          "qdrant",
          "the",
          "langchain",
          "embeddings",
          "fastembed",
          "search",
          "retrievalmode",
          "https",
          "github",
          "com",
          "retrieval",
          "mode",
          "parameter",
          "implementation",
          "embedding",
          "package",
          "from",
          "fastembedsparse",
          "name"
        ],
        "term_weights": [
          {
            "term": "sparse",
            "tf": 10,
            "weight": 0.082645
          },
          {
            "term": "qdrant",
            "tf": 9,
            "weight": 0.07438
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.057851
          },
          {
            "term": "langchain",
            "tf": 5,
            "weight": 0.041322
          },
          {
            "term": "embeddings",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "fastembed",
            "tf": 4,
            "weight": 0.033058
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "retrievalmode",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "mode",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "parameter",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "implementation",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "embedding",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "package",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "from",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "fastembedsparse",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "name",
            "tf": 2,
            "weight": 0.016529
          }
        ],
        "unique_terms": 66,
        "total_terms": 121
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Sparse Vector Search",
        "embeddings",
        "fastembed",
        "github",
        "https",
        "langchain",
        "qdrant",
        "retrievalmode",
        "search",
        "sparse",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.525483870967742,
      "overall": 0.708494623655914
    }
  },
  {
    "text": "### Hybrid Vector Search  To perform a hybrid search using dense and sparse vectors with score fusion,  - The `retrieval_mode` parameter should be set to `RetrievalMode.HYBRID`. - A [dense embeddings](https://python.langchain.com/v0.2/docs/integrations/text_embedding/) value should be provided for the `embedding` parameter. - An implementation of the [SparseEmbeddings interface](https://github.com/langchain-ai/langchain/blob/master/libs/partners/qdrant/langchain_qdrant/sparse_embeddings.py) using any sparse embeddings provider has to be provided as value to the `sparse_embedding` parameter. ```python from langchain_qdrant import FastEmbedSparse, RetrievalMode  sparse_embeddings = FastEmbedSparse(model_name=\"Qdrant/bm25\")  qdrant = QdrantVectorStore.from_documents(     docs,     embedding=embeddings,     sparse_embedding=sparse_embeddings,     location=\":memory:\",     collection_name=\"my_documents\",     retrieval_mode=RetrievalMode.HYBRID, )  query = \"What did the president say about Ketanji Brown Jackson\" found_docs = qdrant.similarity_search(query) ``` Note that if you’ve added documents with HYBRID mode, you can switch to any retrieval mode when searching. Since both the dense and sparse vectors are available in the collection.",
    "metadata": {
      "chunk_id": "6110346a4046-0015",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Hybrid Vector Search"
      ],
      "heading_text": "Hybrid Vector Search",
      "token_count": 288,
      "char_count": 1249,
      "start_char": 23184,
      "end_char": 24433,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5101612903225806,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.552670",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 288,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Hybrid Vector Search",
      "chunk_hash": "19da4b41421528a2",
      "content_digest": "19da4b41421528a2",
      "chunk_length": 1249,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "sparse",
          "the",
          "embeddings",
          "qdrant",
          "hybrid",
          "langchain",
          "embedding",
          "mode",
          "search",
          "dense",
          "retrieval",
          "parameter",
          "retrievalmode",
          "docs",
          "documents",
          "using",
          "and",
          "vectors",
          "with",
          "should"
        ],
        "term_weights": [
          {
            "term": "sparse",
            "tf": 8,
            "weight": 0.054795
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.047945
          },
          {
            "term": "embeddings",
            "tf": 6,
            "weight": 0.041096
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.041096
          },
          {
            "term": "hybrid",
            "tf": 5,
            "weight": 0.034247
          },
          {
            "term": "langchain",
            "tf": 5,
            "weight": 0.034247
          },
          {
            "term": "embedding",
            "tf": 5,
            "weight": 0.034247
          },
          {
            "term": "mode",
            "tf": 4,
            "weight": 0.027397
          },
          {
            "term": "search",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "dense",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "retrieval",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "parameter",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "retrievalmode",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "docs",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "documents",
            "tf": 3,
            "weight": 0.020548
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "vectors",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.013699
          },
          {
            "term": "should",
            "tf": 2,
            "weight": 0.013699
          }
        ],
        "unique_terms": 77,
        "total_terms": 146
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Hybrid Vector Search",
        "dense",
        "embedding",
        "embeddings",
        "hybrid",
        "langchain",
        "mode",
        "qdrant",
        "search",
        "sparse",
        "the"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5101612903225806,
      "overall": 0.7033870967741934
    }
  },
  {
    "text": "## Next steps  If you’d like to know more about running Qdrant in a Langchain-based application, please read our article [Question Answering with Langchain and Qdrant without boilerplate](https://qdrant.tech/articles/langchain-integration/). Some more information might also be found in the [Langchain documentation](https://python.langchain.com/docs/integrations/vectorstores/qdrant). - [Source Code](https://github.com/langchain-ai/langchain/tree/master/libs%2Fpartners%2Fqdrant)",
    "metadata": {
      "chunk_id": "6110346a4046-0016",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Next steps"
      ],
      "heading_text": "Next steps",
      "token_count": 114,
      "char_count": 481,
      "start_char": 24437,
      "end_char": 24918,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5685714285714286,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.553807",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 114,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Next steps",
      "chunk_hash": "745b6f3f6c625ef9",
      "content_digest": "745b6f3f6c625ef9",
      "chunk_length": 481,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "langchain",
          "qdrant",
          "https",
          "more",
          "com",
          "next",
          "steps",
          "you",
          "like",
          "know",
          "about",
          "running",
          "based",
          "application",
          "please",
          "read",
          "our",
          "article",
          "question",
          "answering"
        ],
        "term_weights": [
          {
            "term": "langchain",
            "tf": 7,
            "weight": 0.118644
          },
          {
            "term": "qdrant",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.050847
          },
          {
            "term": "more",
            "tf": 2,
            "weight": 0.033898
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.033898
          },
          {
            "term": "next",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "steps",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "you",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "like",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "know",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "about",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "running",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "based",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "application",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "please",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "read",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "our",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "article",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "question",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "answering",
            "tf": 1,
            "weight": 0.016949
          }
        ],
        "unique_terms": 46,
        "total_terms": 59
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Next steps",
        "com",
        "https",
        "know",
        "langchain",
        "like",
        "more",
        "next",
        "qdrant",
        "steps",
        "you"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5685714285714286,
      "overall": 0.7228571428571429
    }
  },
  {
    "text": "##### Was this page useful? Yes No  Thank you for your feedback! 🙏  We are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/frameworks/langchain.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue. On this page:  - [Langchain](#langchain.md)    - [Using an existing collection](#using-an-existing-collection.md)    - [Local mode](#local-mode.md)      - [In-memory](#in-memory.md)     - [On-disk storage](#on-disk-storage.md)     - [On-premise server deployment](#on-premise-server-deployment.md)    - [Similarity search](#similarity-search.md)      - [Dense Vector Search](#dense-vector-search.md)     - [Sparse Vector Search](#sparse-vector-search.md)     - [Hybrid Vector Search](#hybrid-vector-search.md)    - [Next steps](#next-steps.md)  * [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/frameworks/langchain.md) * [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)",
    "metadata": {
      "chunk_id": "6110346a4046-0017",
      "source_file": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "filename": "_documentation_frameworks_langchain_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Was this page useful?"
      ],
      "heading_text": "Was this page useful?",
      "token_count": 291,
      "char_count": 1085,
      "start_char": 24921,
      "end_char": 26006,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.515,
      "chunking_strategy": "hierarchical_context_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:28.558619",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 291,
      "document_id": "6110346a4046",
      "document_name": "_documentation_frameworks_langchain_",
      "source_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "source_filename": "_documentation_frameworks_langchain_.md",
      "source_directory": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain",
      "relative_path": "Docs\\Qdrant\\qdrant_documentation\\documentation_frameworks_langchain\\_documentation_frameworks_langchain_.md",
      "hierarchy_path": "Was this page useful?",
      "chunk_hash": "be2216508ed71fe6",
      "content_digest": "be2216508ed71fe6",
      "chunk_length": 1085,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "search",
          "page",
          "github",
          "qdrant",
          "landing",
          "vector",
          "https",
          "com",
          "langchain",
          "this",
          "you",
          "edit",
          "tree",
          "master",
          "content",
          "documentation",
          "frameworks",
          "create",
          "issues",
          "new"
        ],
        "term_weights": [
          {
            "term": "search",
            "tf": 8,
            "weight": 0.064
          },
          {
            "term": "page",
            "tf": 7,
            "weight": 0.056
          },
          {
            "term": "github",
            "tf": 7,
            "weight": 0.056
          },
          {
            "term": "qdrant",
            "tf": 6,
            "weight": 0.048
          },
          {
            "term": "landing",
            "tf": 6,
            "weight": 0.048
          },
          {
            "term": "vector",
            "tf": 6,
            "weight": 0.048
          },
          {
            "term": "https",
            "tf": 4,
            "weight": 0.032
          },
          {
            "term": "com",
            "tf": 4,
            "weight": 0.032
          },
          {
            "term": "langchain",
            "tf": 4,
            "weight": 0.032
          },
          {
            "term": "this",
            "tf": 3,
            "weight": 0.024
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "edit",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "tree",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "master",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "content",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "documentation",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "frameworks",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "create",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "issues",
            "tf": 2,
            "weight": 0.016
          },
          {
            "term": "new",
            "tf": 2,
            "weight": 0.016
          }
        ],
        "unique_terms": 51,
        "total_terms": 125
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Was this page useful?",
        "com",
        "github",
        "https",
        "landing",
        "langchain",
        "page",
        "qdrant",
        "search",
        "this",
        "vector"
      ],
      "collection_name": "Qdrant"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.515,
      "overall": 0.6716666666666667
    }
  }
]