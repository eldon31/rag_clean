[
  {
    "text": "### Prediction Output\n\nThe `InformationRetrievalEvaluator` supports `write_predictions=True` to output retrieval results in JSONL format, enabling downstream analysis and fusion with other retrieval systems.",
    "metadata": {
      "chunk_id": "85c0197c6c23-0000",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Prediction Output"
      ],
      "heading_text": "Prediction Output",
      "token_count": 37,
      "char_count": 207,
      "start_char": 191,
      "end_char": 398,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5639130434782609,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.269250",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 37,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Prediction Output",
      "chunk_hash": "1dc94dfa5524f53a",
      "content_digest": "1dc94dfa5524f53a",
      "chunk_length": 207,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "output",
          "retrieval",
          "prediction",
          "the",
          "informationretrievalevaluator",
          "supports",
          "write",
          "predictions",
          "true",
          "results",
          "jsonl",
          "format",
          "enabling",
          "downstream",
          "analysis",
          "and",
          "fusion",
          "with",
          "other",
          "systems"
        ],
        "term_weights": [
          {
            "term": "output",
            "tf": 2,
            "weight": 0.090909
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.090909
          },
          {
            "term": "prediction",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "informationretrievalevaluator",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "supports",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "write",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "predictions",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "true",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "results",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "jsonl",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "format",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "enabling",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "downstream",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "analysis",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "fusion",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "other",
            "tf": 1,
            "weight": 0.045455
          },
          {
            "term": "systems",
            "tf": 1,
            "weight": 0.045455
          }
        ],
        "unique_terms": 20,
        "total_terms": 22
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Prediction Output",
        "informationretrievalevaluator",
        "output",
        "prediction",
        "predictions",
        "results",
        "retrieval",
        "supports",
        "the",
        "true",
        "write"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5639130434782609,
      "overall": 0.7546376811594202
    }
  },
  {
    "text": "### Embedding Optimization  Several evaluators support advanced embedding configurations: - **Precision Control**: `precision` parameter for quantized embeddings (`\"int8\"`, `\"binary\"`, etc.) - **Dimension Truncation**: `truncate_dim` for reduced-dimension evaluation - **Normalization**: Automatic normalization for certain precision modes  Sources: [sentence_transformers/evaluation/EmbeddingSimilarityEvaluator.py:171-176](), [sentence_transformers/evaluation/InformationRetrievalEvaluator.py:374-396]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0001",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Embedding Optimization"
      ],
      "heading_text": "Embedding Optimization",
      "token_count": 104,
      "char_count": 505,
      "start_char": 400,
      "end_char": 905,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5505263157894736,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.271556",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 104,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Embedding Optimization",
      "chunk_hash": "250df00d2c317485",
      "content_digest": "250df00d2c317485",
      "chunk_length": 505,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "precision",
          "for",
          "evaluation",
          "embedding",
          "dimension",
          "normalization",
          "sentence",
          "transformers",
          "optimization",
          "several",
          "evaluators",
          "support",
          "advanced",
          "configurations",
          "control",
          "parameter",
          "quantized",
          "embeddings",
          "int8",
          "binary"
        ],
        "term_weights": [
          {
            "term": "precision",
            "tf": 3,
            "weight": 0.065217
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.065217
          },
          {
            "term": "evaluation",
            "tf": 3,
            "weight": 0.065217
          },
          {
            "term": "embedding",
            "tf": 2,
            "weight": 0.043478
          },
          {
            "term": "dimension",
            "tf": 2,
            "weight": 0.043478
          },
          {
            "term": "normalization",
            "tf": 2,
            "weight": 0.043478
          },
          {
            "term": "sentence",
            "tf": 2,
            "weight": 0.043478
          },
          {
            "term": "transformers",
            "tf": 2,
            "weight": 0.043478
          },
          {
            "term": "optimization",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "several",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "evaluators",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "support",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "advanced",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "configurations",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "control",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "parameter",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "quantized",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "embeddings",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "int8",
            "tf": 1,
            "weight": 0.021739
          },
          {
            "term": "binary",
            "tf": 1,
            "weight": 0.021739
          }
        ],
        "unique_terms": 35,
        "total_terms": 46
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Embedding Optimization",
        "dimension",
        "embedding",
        "evaluation",
        "for",
        "normalization",
        "optimization",
        "precision",
        "sentence",
        "several",
        "transformers"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5505263157894736,
      "overall": 0.7501754385964912
    }
  },
  {
    "text": "# SentenceTransformer Evaluators\n\n\n\n\nThis document covers the evaluation system for `SentenceTransformer` models, including the base evaluator architecture and all available evaluator implementations. These evaluators are used during training to assess model performance on various downstream tasks, enabling automatic model selection and performance monitoring.\n\nFor evaluation of sparse encoder models, see [SparseEncoder Evaluators](#4.2). For cross-encoder evaluation, see [CrossEncoder Evaluators](#4.3). For comprehensive benchmark evaluation, see [NanoBEIR Evaluation](#4.4).",
    "metadata": {
      "chunk_id": "85c0197c6c23-0002",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "SentenceTransformer Evaluators"
      ],
      "heading_text": "SentenceTransformer Evaluators",
      "token_count": 108,
      "char_count": 582,
      "start_char": 907,
      "end_char": 1489,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5253846153846153,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.272445",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 108,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "SentenceTransformer Evaluators",
      "chunk_hash": "6002d8ba5756a4fc",
      "content_digest": "6002d8ba5756a4fc",
      "chunk_length": 582,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "evaluation",
          "evaluators",
          "for",
          "see",
          "sentencetransformer",
          "the",
          "models",
          "evaluator",
          "and",
          "model",
          "performance",
          "encoder",
          "this",
          "document",
          "covers",
          "system",
          "including",
          "base",
          "architecture",
          "all"
        ],
        "term_weights": [
          {
            "term": "evaluation",
            "tf": 5,
            "weight": 0.080645
          },
          {
            "term": "evaluators",
            "tf": 4,
            "weight": 0.064516
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.064516
          },
          {
            "term": "see",
            "tf": 3,
            "weight": 0.048387
          },
          {
            "term": "sentencetransformer",
            "tf": 2,
            "weight": 0.032258
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.032258
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.032258
          },
          {
            "term": "evaluator",
            "tf": 2,
            "weight": 0.032258
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.032258
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.032258
          },
          {
            "term": "performance",
            "tf": 2,
            "weight": 0.032258
          },
          {
            "term": "encoder",
            "tf": 2,
            "weight": 0.032258
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.016129
          },
          {
            "term": "document",
            "tf": 1,
            "weight": 0.016129
          },
          {
            "term": "covers",
            "tf": 1,
            "weight": 0.016129
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.016129
          },
          {
            "term": "including",
            "tf": 1,
            "weight": 0.016129
          },
          {
            "term": "base",
            "tf": 1,
            "weight": 0.016129
          },
          {
            "term": "architecture",
            "tf": 1,
            "weight": 0.016129
          },
          {
            "term": "all",
            "tf": 1,
            "weight": 0.016129
          }
        ],
        "unique_terms": 42,
        "total_terms": 62
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "SentenceTransformer Evaluators",
        "and",
        "evaluation",
        "evaluator",
        "evaluators",
        "for",
        "model",
        "models",
        "see",
        "sentencetransformer",
        "the"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5253846153846153,
      "overall": 0.7084615384615384
    }
  },
  {
    "text": "### Base Evaluator Structure ```mermaid classDiagram     class SentenceEvaluator {         +bool greater_is_better         +str primary_metric         +__call__(model, output_path, epoch, steps)         +prefix_name_to_metrics(metrics, name)         +store_metrics_in_model_card_data(model, metrics, epoch, steps)         +embed_inputs(model, sentences)         +get_config_dict()         +description : str     }          class InformationRetrievalEvaluator {         +dict queries         +dict corpus         +dict relevant_docs         +compute_metrices(model)         +compute_metrics(queries_result_list)     }          class EmbeddingSimilarityEvaluator {         +list sentences1         +list sentences2         +list scores         +compute_metrices(model)     }          class BinaryClassificationEvaluator {         +list sentences1         +list sentences2         +list labels         +find_best_acc_and_threshold()         +find_best_f1_and_threshold()     }          class RerankingEvaluator {         +list samples         +int at_k         +compute_metrices_batched(model)         +compute_metrices_individual(model)     }          class TripletEvaluator {         +list anchors         +list positives         +list negatives         +dict margin     }          class ParaphraseMiningEvaluator {         +dict sentences_map         +dict duplicates         +add_transitive_closure()     }          SentenceEvaluator <|-- InformationRetrievalEvaluator     SentenceEvaluator <|-- EmbeddingSimilarityEvaluator     SentenceEvaluator <|-- BinaryClassificationEvaluator     SentenceEvaluator <|-- RerankingEvaluator     SentenceEvaluator <|-- TripletEvaluator     SentenceEvaluator <|-- ParaphraseMiningEvaluator ``` **Sources:** [sentence_transformers/evaluation/SentenceEvaluator.py:13-121]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0004",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Base Evaluator Structure"
      ],
      "heading_text": "Base Evaluator Structure",
      "token_count": 360,
      "char_count": 1807,
      "start_char": 1689,
      "end_char": 3496,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6695384615384615,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.278901",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 360,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Base Evaluator Structure",
      "chunk_hash": "166d5181ebc5dd6d",
      "content_digest": "166d5181ebc5dd6d",
      "chunk_length": 1807,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "list",
          "sentenceevaluator",
          "model",
          "class",
          "dict",
          "metrics",
          "compute",
          "metrices",
          "str",
          "epoch",
          "steps",
          "name",
          "sentences",
          "informationretrievalevaluator",
          "queries",
          "embeddingsimilarityevaluator",
          "sentences1",
          "sentences2",
          "binaryclassificationevaluator",
          "find"
        ],
        "term_weights": [
          {
            "term": "list",
            "tf": 11,
            "weight": 0.07971
          },
          {
            "term": "sentenceevaluator",
            "tf": 8,
            "weight": 0.057971
          },
          {
            "term": "model",
            "tf": 8,
            "weight": 0.057971
          },
          {
            "term": "class",
            "tf": 7,
            "weight": 0.050725
          },
          {
            "term": "dict",
            "tf": 7,
            "weight": 0.050725
          },
          {
            "term": "metrics",
            "tf": 5,
            "weight": 0.036232
          },
          {
            "term": "compute",
            "tf": 5,
            "weight": 0.036232
          },
          {
            "term": "metrices",
            "tf": 4,
            "weight": 0.028986
          },
          {
            "term": "str",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "epoch",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "steps",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "name",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "sentences",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "informationretrievalevaluator",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "queries",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "embeddingsimilarityevaluator",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "sentences1",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "sentences2",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "binaryclassificationevaluator",
            "tf": 2,
            "weight": 0.014493
          },
          {
            "term": "find",
            "tf": 2,
            "weight": 0.014493
          }
        ],
        "unique_terms": 73,
        "total_terms": 138
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Base Evaluator Structure",
        "class",
        "compute",
        "dict",
        "epoch",
        "list",
        "metrices",
        "metrics",
        "model",
        "sentenceevaluator",
        "str"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6695384615384615,
      "overall": 0.7898461538461538
    }
  },
  {
    "text": "### Information Retrieval Evaluator  The `InformationRetrievalEvaluator` is designed for search and retrieval tasks, computing standard IR metrics across large corpora. ```mermaid graph TB     subgraph \"InformationRetrievalEvaluator\"         Queries[\"queries: Dict[str, str]\"]         Corpus[\"corpus: Dict[str, str]\"]         RelevantDocs[\"relevant_docs: Dict[str, Set[str]]\"]                  subgraph \"Metrics Computed\"             MRR[\"MRR@k (Mean Reciprocal Rank)\"]             NDCG[\"NDCG@k (Normalized DCG)\"]             MAP[\"MAP@k (Mean Average Precision)\"]             Accuracy[\"Accuracy@k\"]             PrecisionRecall[\"Precision@k / Recall@k\"]         end                  subgraph \"Configuration\"             ChunkSize[\"corpus_chunk_size: 50000\"]             BatchSize[\"batch_size: 32\"]             ScoreFunctions[\"score_functions: Dict\"]             Prompts[\"query_prompt / corpus_prompt\"]         end     end          Queries --> MRR     Corpus --> MRR     RelevantDocs --> MRR     ChunkSize --> MRR ``` Key features: - **Chunked Processing**: Handles large corpora via `corpus_chunk_size` parameter [sentence_transformers/evaluation/InformationRetrievalEvaluator.py:130]() - **Multiple Score Functions**: Supports different similarity functions via `score_functions` [sentence_transformers/evaluation/InformationRetrievalEvaluator.py:141]() - **Asymmetric Encoding**: Different prompts for queries vs documents [sentence_transformers/evaluation/InformationRetrievalEvaluator.py:143-146]() - **Prediction Export**: Optional JSONL output for downstream analysis [sentence_transformers/evaluation/InformationRetrievalEvaluator.py:147]()  **Sources:** [sentence_transformers/evaluation/InformationRetrievalEvaluator.py:23-568]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0007",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Information Retrieval Evaluator"
      ],
      "heading_text": "Information Retrieval Evaluator",
      "token_count": 381,
      "char_count": 1737,
      "start_char": 4260,
      "end_char": 5997,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5538161290322581,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.289536",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 381,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Information Retrieval Evaluator",
      "chunk_hash": "a9f7d034331b5290",
      "content_digest": "a9f7d034331b5290",
      "chunk_length": 1737,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "informationretrievalevaluator",
          "str",
          "corpus",
          "mrr",
          "sentence",
          "transformers",
          "evaluation",
          "queries",
          "dict",
          "functions",
          "for",
          "subgraph",
          "end",
          "size",
          "score",
          "retrieval",
          "metrics",
          "large",
          "corpora",
          "relevantdocs"
        ],
        "term_weights": [
          {
            "term": "informationretrievalevaluator",
            "tf": 7,
            "weight": 0.045455
          },
          {
            "term": "str",
            "tf": 6,
            "weight": 0.038961
          },
          {
            "term": "corpus",
            "tf": 6,
            "weight": 0.038961
          },
          {
            "term": "mrr",
            "tf": 6,
            "weight": 0.038961
          },
          {
            "term": "sentence",
            "tf": 5,
            "weight": 0.032468
          },
          {
            "term": "transformers",
            "tf": 5,
            "weight": 0.032468
          },
          {
            "term": "evaluation",
            "tf": 5,
            "weight": 0.032468
          },
          {
            "term": "queries",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "dict",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "functions",
            "tf": 4,
            "weight": 0.025974
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "subgraph",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "end",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "size",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "score",
            "tf": 3,
            "weight": 0.019481
          },
          {
            "term": "retrieval",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "metrics",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "large",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "corpora",
            "tf": 2,
            "weight": 0.012987
          },
          {
            "term": "relevantdocs",
            "tf": 2,
            "weight": 0.012987
          }
        ],
        "unique_terms": 86,
        "total_terms": 154
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Information Retrieval Evaluator",
        "corpus",
        "dict",
        "evaluation",
        "functions",
        "informationretrievalevaluator",
        "mrr",
        "queries",
        "sentence",
        "str",
        "transformers"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5538161290322581,
      "overall": 0.7512720430107526
    }
  },
  {
    "text": "### Embedding Similarity Evaluator  The `EmbeddingSimilarityEvaluator` measures correlation between predicted and ground-truth similarity scores. ```mermaid graph LR     subgraph \"Input Data\"         S1[\"sentences1: List[str]\"]         S2[\"sentences2: List[str]\"]         GoldScores[\"scores: List[float]\"]     end          subgraph \"Similarity Functions\"         Cosine[\"cosine: pairwise_cos_sim\"]         Dot[\"dot: pairwise_dot_score\"]         Euclidean[\"euclidean: pairwise_euclidean_sim\"]         Manhattan[\"manhattan: pairwise_manhattan_sim\"]     end          subgraph \"Correlation Metrics\"         Pearson[\"Pearson Correlation\"]         Spearman[\"Spearman Correlation\"]     end          S1 --> Cosine     S2 --> Cosine     Cosine --> Pearson     Cosine --> Spearman     GoldScores --> Pearson     GoldScores --> Spearman ``` Key features: - **Multiple Similarity Functions**: Supports cosine, dot product, Euclidean, and Manhattan distance [sentence_transformers/evaluation/EmbeddingSimilarityEvaluator.py:184-189]() - **Precision Support**: Handles quantized embeddings (int8, uint8, binary, ubinary) [sentence_transformers/evaluation/EmbeddingSimilarityEvaluator.py:93]() - **Automatic Deduplication**: Avoids re-encoding identical sentences [sentence_transformers/evaluation/EmbeddingSimilarityEvaluator.py:225-237]()  **Sources:** [sentence_transformers/evaluation/EmbeddingSimilarityEvaluator.py:27-272]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0008",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Embedding Similarity Evaluator"
      ],
      "heading_text": "Embedding Similarity Evaluator",
      "token_count": 323,
      "char_count": 1415,
      "start_char": 6001,
      "end_char": 7416,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5321941176470588,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.307912",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 323,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Embedding Similarity Evaluator",
      "chunk_hash": "f99bde3bbb1e5840",
      "content_digest": "f99bde3bbb1e5840",
      "chunk_length": 1415,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "cosine",
          "embeddingsimilarityevaluator",
          "similarity",
          "correlation",
          "pairwise",
          "dot",
          "euclidean",
          "manhattan",
          "pearson",
          "spearman",
          "sentence",
          "transformers",
          "evaluation",
          "subgraph",
          "list",
          "goldscores",
          "end",
          "sim",
          "and",
          "scores"
        ],
        "term_weights": [
          {
            "term": "cosine",
            "tf": 7,
            "weight": 0.056452
          },
          {
            "term": "embeddingsimilarityevaluator",
            "tf": 5,
            "weight": 0.040323
          },
          {
            "term": "similarity",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "correlation",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "pairwise",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "dot",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "euclidean",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "manhattan",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "pearson",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "spearman",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "sentence",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "transformers",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "evaluation",
            "tf": 4,
            "weight": 0.032258
          },
          {
            "term": "subgraph",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "list",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "goldscores",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "end",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "sim",
            "tf": 3,
            "weight": 0.024194
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.016129
          },
          {
            "term": "scores",
            "tf": 2,
            "weight": 0.016129
          }
        ],
        "unique_terms": 67,
        "total_terms": 124
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Embedding Similarity Evaluator",
        "correlation",
        "cosine",
        "dot",
        "embeddingsimilarityevaluator",
        "euclidean",
        "manhattan",
        "pairwise",
        "pearson",
        "similarity",
        "spearman"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5321941176470588,
      "overall": 0.7440647058823529
    }
  },
  {
    "text": "### Reranking Evaluator  The `RerankingEvaluator` evaluates models on reranking tasks with query-document relevance. ```mermaid graph TB     subgraph \"Sample Structure\"         Query[\"query: str\"]         Positive[\"positive: List[str]\"]         Negative[\"negative: List[str]\"]     end          subgraph \"Processing Modes\"         Batched[\"compute_metrices_batched()\"]         Individual[\"compute_metrices_individual()\"]     end          subgraph \"Ranking Metrics\"         MAP[\"Mean Average Precision\"]         MRR[\"MRR@k\"]         NDCG[\"NDCG@k\"]     end          Query --> Batched     Positive --> Batched     Negative --> Batched          Batched --> MAP     Batched --> MRR     Batched --> NDCG ``` Key features: - **Flexible Processing**: Choice between batched and individual encoding [sentence_transformers/evaluation/RerankingEvaluator.py:98]() - **Memory Optimization**: Batched mode for speed, individual mode for memory efficiency [sentence_transformers/evaluation/RerankingEvaluator.py:210-214]()  **Sources:** [sentence_transformers/evaluation/RerankingEvaluator.py:25-372]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0010",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Reranking Evaluator"
      ],
      "heading_text": "Reranking Evaluator",
      "token_count": 247,
      "char_count": 1086,
      "start_char": 8467,
      "end_char": 9553,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5141379310344827,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.319441",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 247,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Reranking Evaluator",
      "chunk_hash": "7438eba2636480c4",
      "content_digest": "7438eba2636480c4",
      "chunk_length": 1086,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "batched",
          "rerankingevaluator",
          "query",
          "individual",
          "subgraph",
          "str",
          "positive",
          "negative",
          "end",
          "mrr",
          "ndcg",
          "sentence",
          "transformers",
          "evaluation",
          "reranking",
          "list",
          "processing",
          "compute",
          "metrices",
          "map"
        ],
        "term_weights": [
          {
            "term": "batched",
            "tf": 10,
            "weight": 0.098039
          },
          {
            "term": "rerankingevaluator",
            "tf": 4,
            "weight": 0.039216
          },
          {
            "term": "query",
            "tf": 4,
            "weight": 0.039216
          },
          {
            "term": "individual",
            "tf": 4,
            "weight": 0.039216
          },
          {
            "term": "subgraph",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "str",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "positive",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "negative",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "end",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "mrr",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "ndcg",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "sentence",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "transformers",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "evaluation",
            "tf": 3,
            "weight": 0.029412
          },
          {
            "term": "reranking",
            "tf": 2,
            "weight": 0.019608
          },
          {
            "term": "list",
            "tf": 2,
            "weight": 0.019608
          },
          {
            "term": "processing",
            "tf": 2,
            "weight": 0.019608
          },
          {
            "term": "compute",
            "tf": 2,
            "weight": 0.019608
          },
          {
            "term": "metrices",
            "tf": 2,
            "weight": 0.019608
          },
          {
            "term": "map",
            "tf": 2,
            "weight": 0.019608
          }
        ],
        "unique_terms": 55,
        "total_terms": 102
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Reranking Evaluator",
        "batched",
        "end",
        "individual",
        "mrr",
        "negative",
        "positive",
        "query",
        "rerankingevaluator",
        "str",
        "subgraph"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5141379310344827,
      "overall": 0.7380459770114941
    }
  },
  {
    "text": "### Triplet Evaluator  Evaluates triplet ranking performance where positive examples should be closer than negative examples. ```mermaid graph LR     subgraph \"Triplet Components\"         Anchors[\"anchors: List[str]\"]         Positives[\"positives: List[str]\"]         Negatives[\"negatives: List[str]\"]     end          subgraph \"Margin Configuration\"         MarginDict[\"margin: Dict[str, float]\"]         DefaultMargin[\"default: 0.0 for all metrics\"]     end          subgraph \"Evaluation Logic\"         Condition[\"similarity(anchor, positive) > similarity(anchor, negative) + margin\"]         Accuracy[\"accuracy per similarity function\"]     end          Anchors --> Condition     Positives --> Condition     Negatives --> Condition     MarginDict --> Condition     Condition --> Accuracy ``` **Sources:** [sentence_transformers/evaluation/TripletEvaluator.py:26-271]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0012",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Triplet Evaluator"
      ],
      "heading_text": "Triplet Evaluator",
      "token_count": 182,
      "char_count": 871,
      "start_char": 9584,
      "end_char": 10455,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7291891891891892,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.324852",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 182,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Triplet Evaluator",
      "chunk_hash": "033d007d76131325",
      "content_digest": "033d007d76131325",
      "chunk_length": 871,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "condition",
          "str",
          "triplet",
          "subgraph",
          "anchors",
          "list",
          "positives",
          "negatives",
          "end",
          "margin",
          "similarity",
          "accuracy",
          "positive",
          "examples",
          "negative",
          "margindict",
          "evaluation",
          "anchor",
          "evaluator",
          "evaluates"
        ],
        "term_weights": [
          {
            "term": "condition",
            "tf": 6,
            "weight": 0.075949
          },
          {
            "term": "str",
            "tf": 4,
            "weight": 0.050633
          },
          {
            "term": "triplet",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "subgraph",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "anchors",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "list",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "positives",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "negatives",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "end",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "margin",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "similarity",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "accuracy",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "positive",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "examples",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "negative",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "margindict",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "evaluation",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "anchor",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "evaluator",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "evaluates",
            "tf": 1,
            "weight": 0.012658
          }
        ],
        "unique_terms": 45,
        "total_terms": 79
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Triplet Evaluator",
        "anchors",
        "condition",
        "end",
        "list",
        "margin",
        "negatives",
        "positives",
        "str",
        "subgraph",
        "triplet"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7291891891891892,
      "overall": 0.8097297297297296
    }
  },
  {
    "text": "### Paraphrase Mining Evaluator  Evaluates paraphrase detection performance by mining similar sentences from a corpus. Key features: - **Transitive Closure**: Optional transitive relationship enforcement [sentence_transformers/evaluation/ParaphraseMiningEvaluator.py:97]() - **Scalable Mining**: Uses `paraphrase_mining` utility for efficient processing [sentence_transformers/evaluation/ParaphraseMiningEvaluator.py:172-182]() - **F1 Optimization**: Finds optimal similarity threshold for paraphrase detection [sentence_transformers/evaluation/ParaphraseMiningEvaluator.py:187-212]()  **Sources:** [sentence_transformers/evaluation/ParaphraseMiningEvaluator.py:18-279]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0013",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Paraphrase Mining Evaluator"
      ],
      "heading_text": "Paraphrase Mining Evaluator",
      "token_count": 143,
      "char_count": 671,
      "start_char": 10459,
      "end_char": 11130,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.54625,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.328237",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 143,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Paraphrase Mining Evaluator",
      "chunk_hash": "bb37a0b232a76b93",
      "content_digest": "bb37a0b232a76b93",
      "chunk_length": 671,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "paraphrase",
          "mining",
          "sentence",
          "transformers",
          "evaluation",
          "paraphraseminingevaluator",
          "detection",
          "transitive",
          "for",
          "evaluator",
          "evaluates",
          "performance",
          "similar",
          "sentences",
          "from",
          "corpus",
          "key",
          "features",
          "closure",
          "optional"
        ],
        "term_weights": [
          {
            "term": "paraphrase",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "mining",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "sentence",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "transformers",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "evaluation",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "paraphraseminingevaluator",
            "tf": 4,
            "weight": 0.067797
          },
          {
            "term": "detection",
            "tf": 2,
            "weight": 0.033898
          },
          {
            "term": "transitive",
            "tf": 2,
            "weight": 0.033898
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.033898
          },
          {
            "term": "evaluator",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "evaluates",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "performance",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "similar",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "sentences",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "corpus",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "key",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "features",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "closure",
            "tf": 1,
            "weight": 0.016949
          },
          {
            "term": "optional",
            "tf": 1,
            "weight": 0.016949
          }
        ],
        "unique_terms": 38,
        "total_terms": 59
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Paraphrase Mining Evaluator",
        "detection",
        "evaluation",
        "evaluator",
        "for",
        "mining",
        "paraphrase",
        "paraphraseminingevaluator",
        "sentence",
        "transformers",
        "transitive"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.54625,
      "overall": 0.7154166666666666
    }
  },
  {
    "text": "# Standard evaluator call signature results = evaluator(     model=sentence_transformer_model,     output_path=\"./evaluation_results\",     epoch=current_epoch,     steps=current_step ) ```",
    "metadata": {
      "chunk_id": "85c0197c6c23-0018",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Standard evaluator call signature"
      ],
      "heading_text": "Standard evaluator call signature",
      "token_count": 35,
      "char_count": 188,
      "start_char": 11876,
      "end_char": 12064,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7899999999999999,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.330947",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 35,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Standard evaluator call signature",
      "chunk_hash": "085a3774f2baa84b",
      "content_digest": "085a3774f2baa84b",
      "chunk_length": 188,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "evaluator",
          "results",
          "model",
          "epoch",
          "current",
          "standard",
          "call",
          "signature",
          "sentence",
          "transformer",
          "output",
          "path",
          "evaluation",
          "steps",
          "step"
        ],
        "term_weights": [
          {
            "term": "evaluator",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "results",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "epoch",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "current",
            "tf": 2,
            "weight": 0.1
          },
          {
            "term": "standard",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "call",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "signature",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "sentence",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "transformer",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "output",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "path",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "evaluation",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "steps",
            "tf": 1,
            "weight": 0.05
          },
          {
            "term": "step",
            "tf": 1,
            "weight": 0.05
          }
        ],
        "unique_terms": 15,
        "total_terms": 20
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Standard evaluator call signature",
        "call",
        "current",
        "epoch",
        "evaluator",
        "model",
        "results",
        "sentence",
        "signature",
        "standard",
        "transformer"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7899999999999999,
      "overall": 0.7966666666666665
    }
  },
  {
    "text": "### Metric Organization ```mermaid graph TD     subgraph \"Metric Processing Pipeline\"         RawMetrics[\"evaluator.compute_metrices()\"]         PrefixedMetrics[\"evaluator.prefix_name_to_metrics()\"]         ModelCard[\"evaluator.store_metrics_in_model_card_data()\"]         CSVOutput[\"CSV file output (optional)\"]     end          subgraph \"Metric Structure\"         PrimaryMetric[\"evaluator.primary_metric\"]         AllMetrics[\"Dict[str, float] return value\"]         GreaterIsBetter[\"evaluator.greater_is_better\"]     end          RawMetrics --> PrefixedMetrics     PrefixedMetrics --> ModelCard     PrefixedMetrics --> CSVOutput     PrefixedMetrics --> AllMetrics     PrimaryMetric --> AllMetrics ``` **Sources:** [sentence_transformers/evaluation/SentenceEvaluator.py:57-75]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0019",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Metric Organization"
      ],
      "heading_text": "Metric Organization",
      "token_count": 164,
      "char_count": 779,
      "start_char": 12066,
      "end_char": 12845,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5182608695652174,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.338682",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 164,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Metric Organization",
      "chunk_hash": "b0130a498499670f",
      "content_digest": "b0130a498499670f",
      "chunk_length": 779,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "evaluator",
          "prefixedmetrics",
          "metric",
          "allmetrics",
          "subgraph",
          "rawmetrics",
          "metrics",
          "modelcard",
          "csvoutput",
          "end",
          "primarymetric",
          "organization",
          "mermaid",
          "graph",
          "processing",
          "pipeline",
          "compute",
          "metrices",
          "prefix",
          "name"
        ],
        "term_weights": [
          {
            "term": "evaluator",
            "tf": 5,
            "weight": 0.079365
          },
          {
            "term": "prefixedmetrics",
            "tf": 5,
            "weight": 0.079365
          },
          {
            "term": "metric",
            "tf": 4,
            "weight": 0.063492
          },
          {
            "term": "allmetrics",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "subgraph",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "rawmetrics",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "metrics",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "modelcard",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "csvoutput",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "end",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "primarymetric",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "organization",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "mermaid",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "graph",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "processing",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "pipeline",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "compute",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "metrices",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "prefix",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "name",
            "tf": 1,
            "weight": 0.015873
          }
        ],
        "unique_terms": 43,
        "total_terms": 63
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Metric Organization",
        "allmetrics",
        "csvoutput",
        "end",
        "evaluator",
        "metric",
        "metrics",
        "modelcard",
        "prefixedmetrics",
        "rawmetrics",
        "subgraph"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5182608695652174,
      "overall": 0.7060869565217391
    }
  },
  {
    "text": "## Integration with Training  Evaluators integrate seamlessly with the SentenceTransformer training system: ```mermaid sequenceDiagram     participant Trainer as \"SentenceTransformerTrainer\"     participant Evaluator as \"SentenceEvaluator\"     participant Model as \"SentenceTransformer\"     participant ModelCard as \"ModelCardData\"          Trainer->>Evaluator: __call__(model, output_path, epoch, steps)     Evaluator->>Model: encode(sentences, **kwargs)     Model-->>Evaluator: embeddings     Evaluator->>Evaluator: compute_metrices()     Evaluator->>Evaluator: prefix_name_to_metrics()     Evaluator->>ModelCard: store_metrics_in_model_card_data()     Evaluator-->>Trainer: metrics dict with primary_metric ``` The training system uses `evaluator.primary_metric` and `evaluator.greater_is_better` for: - **Model Selection**: Choosing best checkpoint when `load_best_model_at_end=True` - **Early Stopping**: Monitoring convergence based on evaluation metrics - **Logging**: Tracking primary metrics across training runs  **Sources:** [sentence_transformers/evaluation/SentenceEvaluator.py:26-75]()",
    "metadata": {
      "chunk_id": "85c0197c6c23-0021",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integration with Training"
      ],
      "heading_text": "Integration with Training",
      "token_count": 230,
      "char_count": 1099,
      "start_char": 13437,
      "end_char": 14536,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7313793103448275,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:49.345536",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 230,
      "document_id": "85c0197c6c23",
      "document_name": "Example_Multiple_similarity_functions_in_one_evaluation",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_filename": "Example_Multiple_similarity_functions_in_one_evaluation.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers\\Example_Multiple_similarity_functions_in_one_evaluation.md",
      "hierarchy_path": "Integration with Training",
      "chunk_hash": "60779f910dfeea11",
      "content_digest": "60779f910dfeea11",
      "chunk_length": 1099,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "evaluator",
          "model",
          "metrics",
          "training",
          "participant",
          "with",
          "trainer",
          "primary",
          "the",
          "sentencetransformer",
          "system",
          "sentenceevaluator",
          "modelcard",
          "metric",
          "best",
          "evaluation",
          "integration",
          "evaluators",
          "integrate",
          "seamlessly"
        ],
        "term_weights": [
          {
            "term": "evaluator",
            "tf": 12,
            "weight": 0.113208
          },
          {
            "term": "model",
            "tf": 7,
            "weight": 0.066038
          },
          {
            "term": "metrics",
            "tf": 5,
            "weight": 0.04717
          },
          {
            "term": "training",
            "tf": 4,
            "weight": 0.037736
          },
          {
            "term": "participant",
            "tf": 4,
            "weight": 0.037736
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.028302
          },
          {
            "term": "trainer",
            "tf": 3,
            "weight": 0.028302
          },
          {
            "term": "primary",
            "tf": 3,
            "weight": 0.028302
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "sentencetransformer",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "system",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "sentenceevaluator",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "modelcard",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "metric",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "best",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "evaluation",
            "tf": 2,
            "weight": 0.018868
          },
          {
            "term": "integration",
            "tf": 1,
            "weight": 0.009434
          },
          {
            "term": "evaluators",
            "tf": 1,
            "weight": 0.009434
          },
          {
            "term": "integrate",
            "tf": 1,
            "weight": 0.009434
          },
          {
            "term": "seamlessly",
            "tf": 1,
            "weight": 0.009434
          }
        ],
        "unique_terms": 65,
        "total_terms": 106
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integration with Training",
        "evaluator",
        "metrics",
        "model",
        "participant",
        "primary",
        "sentencetransformer",
        "the",
        "trainer",
        "training",
        "with"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7313793103448275,
      "overall": 0.8104597701149424
    }
  }
]