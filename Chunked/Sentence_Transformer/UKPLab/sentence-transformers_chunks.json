[
  {
    "text": "# sentence-transformers Documentation Index  This file contains links to all extracted documents. Please refer to the files below for detailed information. - [Introduction](sentence-transformers/Introduction.md) - [Overview](sentence-transformers/Overview.md) - [Core Model Types](sentence-transformers/Core_Model_Types.md) - [Basic encoding](sentence-transformers/Basic_encoding.md) - [Task-specific encoding with prompts](sentence-transformers/Task-specific_encoding_with_prompts.md) - [Returns machine 0.85 learning 0.72 algorithm 0.45 ...](sentence-transformers/Returns_machine_0.85_learning_0.72_algorithm_0.45_....md) - [Reranking pipeline](sentence-transformers/Reranking_pipeline.md) - [Score all pairs](sentence-transformers/Score_all_pairs.md) - [Or rank documents directly](sentence-transformers/Or_rank_documents_directly.md) - [Created via Router.for query document](sentence-transformers/Created_via_Router.for_query_document.md) - [Or manual configuration](sentence-transformers/Or_manual_configuration.md) - [Training arguments must specify router mapping](sentence-transformers/Training_arguments_must_specify_router_mapping.md) - [Default installation](sentence-transformers/Default_installation.md) - [Training setup](sentence-transformers/Training_setup.md) - [Development setup](sentence-transformers/Development_setup.md) - [Test basic model loading](sentence-transformers/Test_basic_model_loading.md) - [Test encoding](sentence-transformers/Test_encoding.md) - [Quickstart Guide](sentence-transformers/Quickstart_Guide.md) - [Query-optimized encoding](sentence-transformers/Query-optimized_encoding.md) - [Document-optimized encoding](sentence-transformers/Document-optimized_encoding.md) - [Specialized encoding for retrieval](sentence-transformers/Specialized_encoding_for_retrieval.md) - [Automatically rank documents by relevance](sentence-transformers/Automatically_rank_documents_by_relevance.md) - [Query How many people live in Berlin](sentence-transformers/Query_How_many_people_live_in_Berlin.md) - [- 0 8.61 Berlin had a population of 3520031 registered inhabitants...](sentence-transformers/-_0_8.61_Berlin_had_a_population_of_3520031_registered_inhabitants....md) - [- 2 6.35 In 2013 around 600000 Berliners were registered...](sentence-transformers/-_2_6.35_In_2013_around_600000_Berliners_were_registered....md) - [- 1 5.51 Berlin has a yearly total of about 135 million day visitors...](sentence-transformers/-_1_5.51_Berlin_has_a_yearly_total_of_about_135_million_day_visitors....md) - [Single loss](sentence-transformers/Single_loss.md) - [Multi-dataset losses](sentence-transformers/Multi-dataset_losses.md) - [Training arguments with router mapping](sentence-transformers/Training_arguments_with_router_mapping.md) - [SparseEncoder Training](sentence-transformers/SparseEncoder_Training.md) - [Training arguments for Router models](sentence-transformers/Training_arguments_for_Router_models.md) - [CrossEncoder Training](sentence-transformers/CrossEncoder_Training.md) - [Model with existing classification head](sentence-transformers/Model_with_existing_classification_head.md) - [Model without classification head will be added](sentence-transformers/Model_without_classification_head_will_be_added.md) - [CSR model training setup](sentence-transformers/CSR_model_training_setup.md) - [Loss Functions for CrossEncoder](sentence-transformers/Loss_Functions_for_CrossEncoder.md) - [Key computation from ListNetLoss.forward](sentence-transformers/Key_computation_from_ListNetLoss.forward.md) - [... populate matrices ...](sentence-transformers/..._populate_matrices_....md) - [Choose appropriate loss function](sentence-transformers/Choose_appropriate_loss_function.md) - [loss  losses.ListNetLossmodel   Alternative listwise approach](sentence-transformers/loss__losses.ListNetLossmodel___Alternative_listwise_approach.md) - [loss  losses.PListMLELossmodel   Position-aware MLE](sentence-transformers/loss__losses.PListMLELossmodel___Position-aware_MLE.md) - [Router module validation in trainer](sentence-transformers/Router_module_validation_in_trainer.md) - [Example Multiple similarity functions in one evaluation](sentence-transformers/Example_Multiple_similarity_functions_in_one_evaluation.md) - [SparseEncoder Evaluators](sentence-transformers/SparseEncoder_Evaluators.md) - [Example from SparseInformationRetrievalEvaluator](sentence-transformers/Example_from_SparseInformationRetrievalEvaluator.md) - [CrossEncoder Evaluators](sentence-transformers/CrossEncoder_Evaluators.md) - [Prepare samples with queries positives and negatives](sentence-transformers/Prepare_samples_with_queries_positives_and_negatives.md) - [NanoBEIR Evaluation](sentence-transformers/NanoBEIR_Evaluation.md) - [Basic usage with all datasets](sentence-transformers/Basic_usage_with_all_datasets.md) - [Subset of datasets with prompts](sentence-transformers/Subset_of_datasets_with_prompts.md) - [SparseEncoder - Sparse vector embeddings](sentence-transformers/SparseEncoder_-_Sparse_vector_embeddings.md) - [Check sparsity statistics](sentence-transformers/Check_sparsity_statistics.md) - [Load general purpose model](sentence-transformers/Load_general_purpose_model.md) - [Load with specific configuration](sentence-transformers/Load_with_specific_configuration.md) - [Model with prompt support](sentence-transformers/Model_with_prompt_support.md) - [Automatic prompt selection](sentence-transformers/Automatic_prompt_selection.md) - [Manual prompt specification](sentence-transformers/Manual_prompt_specification.md) - [SparseEncoder Models](sentence-transformers/SparseEncoder_Models.md) - [MSMARCO Models](sentence-transformers/MSMARCO_Models.md) - [Load cosine similarity optimized model](sentence-transformers/Load_cosine_similarity_optimized_model.md) - [Encode query and passage](sentence-transformers/Encode_query_and_passage.md) - [Calculate similarity choose based on model optimization](sentence-transformers/Calculate_similarity_choose_based_on_model_optimization.md) - [For large-scale retrieval](sentence-transformers/For_large-scale_retrieval.md) - [Efficient batch encoding](sentence-transformers/Efficient_batch_encoding.md) - [Compute similarity matrix](sentence-transformers/Compute_similarity_matrix.md) - [Semantic Search](sentence-transformers/Semantic_Search.md) - [Sparse Search Integration](sentence-transformers/Sparse_Search_Integration.md) - [Retrieve  Rerank Architecture](sentence-transformers/Retrieve__Rerank_Architecture.md) - [Semantic Textual Similarity](sentence-transformers/Semantic_Textual_Similarity.md) - [Multiple similarity functions evaluated together](sentence-transformers/Multiple_similarity_functions_evaluated_together.md) - [Multimodal Applications](sentence-transformers/Multimodal_Applications.md) - [Mixed input batch](sentence-transformers/Mixed_input_batch.md) - [Through SentenceTransformer](sentence-transformers/Through_SentenceTransformer.md) - [Direct CLIPModel construction](sentence-transformers/Direct_CLIPModel_construction.md) - [Advanced Topics](sentence-transformers/Advanced_Topics.md) - [Example of automatic statistics generation](sentence-transformers/Example_of_automatic_statistics_generation.md) - [From SparseEncoderModelCardData.register model](sentence-transformers/From_SparseEncoderModelCardData.register_model.md) - [Multi-Processing and Optimization](sentence-transformers/Multi-Processing_and_Optimization.md) - [Testing and Development](sentence-transformers/Testing_and_Development.md) - [Example test structure from test pretrained stsb.py](sentence-transformers/Example_test_structure_from_test_pretrained_stsb.py.md) - [Run all tests excluding slow tests](sentence-transformers/Run_all_tests_excluding_slow_tests.md) - [Run specific test categories](sentence-transformers/Run_specific_test_categories.md) - [Run tests for specific model type](sentence-transformers/Run_tests_for_specific_model_type.md) - [Run with coverage](sentence-transformers/Run_with_coverage.md)",
    "metadata": {
      "chunk_id": "3536e1678462-0000",
      "source_file": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers.md",
      "filename": "sentence-transformers.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "sentence-transformers Documentation Index"
      ],
      "heading_text": "sentence-transformers Documentation Index",
      "token_count": 1723,
      "char_count": 7983,
      "start_char": 0,
      "end_char": 7983,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6771559633027523,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:46.988350",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 1723,
      "document_id": "3536e1678462",
      "document_name": "sentence-transformers",
      "source_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers.md",
      "source_filename": "sentence-transformers.md",
      "source_directory": "Docs\\Sentence_Transformer\\UKPLab",
      "relative_path": "Docs\\Sentence_Transformer\\UKPLab\\sentence-transformers.md",
      "hierarchy_path": "sentence-transformers Documentation Index",
      "chunk_hash": "1f5ef17427ff70ad",
      "content_digest": "1f5ef17427ff70ad",
      "chunk_length": 7983,
      "payload_version": "1.3",
      "collection_hints": [
        "sentence_transformer"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "sentence",
          "transformers",
          "model",
          "with",
          "encoding",
          "training",
          "for",
          "similarity",
          "router",
          "test",
          "loss",
          "specific",
          "query",
          "sparseencoder",
          "from",
          "example",
          "and",
          "run",
          "all",
          "basic"
        ],
        "term_weights": [
          {
            "term": "sentence",
            "tf": 85,
            "weight": 0.104809
          },
          {
            "term": "transformers",
            "tf": 85,
            "weight": 0.104809
          },
          {
            "term": "model",
            "tf": 22,
            "weight": 0.027127
          },
          {
            "term": "with",
            "tf": 18,
            "weight": 0.022195
          },
          {
            "term": "encoding",
            "tf": 14,
            "weight": 0.017263
          },
          {
            "term": "training",
            "tf": 14,
            "weight": 0.017263
          },
          {
            "term": "for",
            "tf": 13,
            "weight": 0.01603
          },
          {
            "term": "similarity",
            "tf": 12,
            "weight": 0.014797
          },
          {
            "term": "router",
            "tf": 10,
            "weight": 0.01233
          },
          {
            "term": "test",
            "tf": 10,
            "weight": 0.01233
          },
          {
            "term": "loss",
            "tf": 10,
            "weight": 0.01233
          },
          {
            "term": "specific",
            "tf": 8,
            "weight": 0.009864
          },
          {
            "term": "query",
            "tf": 8,
            "weight": 0.009864
          },
          {
            "term": "sparseencoder",
            "tf": 8,
            "weight": 0.009864
          },
          {
            "term": "from",
            "tf": 8,
            "weight": 0.009864
          },
          {
            "term": "example",
            "tf": 8,
            "weight": 0.009864
          },
          {
            "term": "and",
            "tf": 8,
            "weight": 0.009864
          },
          {
            "term": "run",
            "tf": 8,
            "weight": 0.009864
          },
          {
            "term": "all",
            "tf": 7,
            "weight": 0.008631
          },
          {
            "term": "basic",
            "tf": 6,
            "weight": 0.007398
          }
        ],
        "unique_terms": 204,
        "total_terms": 811
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "encoding",
        "for",
        "model",
        "router",
        "sentence",
        "sentence-transformers Documentation Index",
        "similarity",
        "test",
        "training",
        "transformers",
        "with"
      ],
      "collection_name": "Sentence_Transformer"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6771559633027523,
      "overall": 0.7590519877675841
    }
  }
]