[
  {
    "text": "### Usage Example\n\n```\n```\n\nSources: [tests/test\\_networks.py115-119](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L115-L119) [tests/test\\_networks.py173-194](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L173-L194)",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Usage Example"
      ],
      "heading_text": "Usage Example",
      "token_count": 88,
      "char_count": 272,
      "start_char": 5822,
      "end_char": 6094,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.5525,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.557052",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "Usage Example",
      "chunk_hash": "2e1ed15694bbc9cb",
      "content_digest": "2e1ed15694bbc9cb",
      "chunk_length": 272,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "tests",
          "test",
          "networks",
          "pydantic",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "usage",
          "example",
          "sources",
          "py115",
          "119",
          "l115",
          "l119",
          "py173",
          "194",
          "l173",
          "l194"
        ],
        "term_weights": [
          {
            "term": "tests",
            "tf": 4,
            "weight": 0.108108
          },
          {
            "term": "test",
            "tf": 4,
            "weight": 0.108108
          },
          {
            "term": "networks",
            "tf": 4,
            "weight": 0.108108
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.108108
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "usage",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "example",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "py115",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "119",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "l115",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "l119",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "py173",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "194",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "l173",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "l194",
            "tf": 1,
            "weight": 0.027027
          }
        ],
        "unique_terms": 20,
        "total_terms": 37
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Usage Example",
        "blob",
        "com",
        "github",
        "https",
        "networks",
        "pydantic",
        "test",
        "tests",
        "usage"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.5525,
      "overall": 0.6174999999999999
    }
  },
  {
    "text": "## Database Connection Strings (DSNs)\n\nPydantic provides specialized types for validating and handling database connection strings (Data Source Names or DSNs), which are URLs that specify how to connect to a database.",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Database Connection Strings (DSNs)"
      ],
      "heading_text": "Database Connection Strings (DSNs)",
      "token_count": 42,
      "char_count": 217,
      "start_char": 6096,
      "end_char": 6313,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5525,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.557173",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "Database Connection Strings (DSNs)",
      "chunk_hash": "524a8f211a12e1d2",
      "content_digest": "524a8f211a12e1d2",
      "chunk_length": 217,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "database",
          "connection",
          "strings",
          "dsns",
          "pydantic",
          "provides",
          "specialized",
          "types",
          "for",
          "validating",
          "and",
          "handling",
          "data",
          "source",
          "names",
          "which",
          "are",
          "urls",
          "that",
          "specify"
        ],
        "term_weights": [
          {
            "term": "database",
            "tf": 3,
            "weight": 0.111111
          },
          {
            "term": "connection",
            "tf": 2,
            "weight": 0.074074
          },
          {
            "term": "strings",
            "tf": 2,
            "weight": 0.074074
          },
          {
            "term": "dsns",
            "tf": 2,
            "weight": 0.074074
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "specialized",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "types",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "validating",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "handling",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "data",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "source",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "names",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "which",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "urls",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.037037
          },
          {
            "term": "specify",
            "tf": 1,
            "weight": 0.037037
          }
        ],
        "unique_terms": 22,
        "total_terms": 27
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Database Connection Strings (DSNs)",
        "connection",
        "database",
        "dsns",
        "for",
        "provides",
        "pydantic",
        "specialized",
        "strings",
        "types",
        "validating"
      ]
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5525,
      "overall": 0.7508333333333334
    }
  },
  {
    "text": "### DSN Example\n\n```\n```\n\nSources: [tests/test\\_networks.py482-494](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L482-L494) [tests/test\\_networks.py700-731](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L700-L731)",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "DSN Example"
      ],
      "heading_text": "DSN Example",
      "token_count": 89,
      "char_count": 270,
      "start_char": 7777,
      "end_char": 8047,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.5525,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.558172",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "DSN Example",
      "chunk_hash": "7f3da902039ea664",
      "content_digest": "7f3da902039ea664",
      "chunk_length": 270,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "tests",
          "test",
          "networks",
          "pydantic",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "dsn",
          "example",
          "sources",
          "py482",
          "494",
          "l482",
          "l494",
          "py700",
          "731",
          "l700",
          "l731"
        ],
        "term_weights": [
          {
            "term": "tests",
            "tf": 4,
            "weight": 0.108108
          },
          {
            "term": "test",
            "tf": 4,
            "weight": 0.108108
          },
          {
            "term": "networks",
            "tf": 4,
            "weight": 0.108108
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.108108
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "dsn",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "example",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "py482",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "494",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "l482",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "l494",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "py700",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "731",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "l700",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "l731",
            "tf": 1,
            "weight": 0.027027
          }
        ],
        "unique_terms": 20,
        "total_terms": 37
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "DSN Example",
        "blob",
        "com",
        "dsn",
        "github",
        "https",
        "networks",
        "pydantic",
        "test",
        "tests"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.5525,
      "overall": 0.6174999999999999
    }
  },
  {
    "text": "### Email Types Example\n\n```\n```\n\nNote: If the `email_validator` package is not installed, an error will be raised when these types are used.",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Email Types Example"
      ],
      "heading_text": "Email Types Example",
      "token_count": 33,
      "char_count": 141,
      "start_char": 8702,
      "end_char": 8843,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.565,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.558566",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "Email Types Example",
      "chunk_hash": "cb0684ca48e6242d",
      "content_digest": "cb0684ca48e6242d",
      "chunk_length": 141,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "email",
          "types",
          "example",
          "note",
          "the",
          "validator",
          "package",
          "not",
          "installed",
          "error",
          "will",
          "raised",
          "when",
          "these",
          "are",
          "used"
        ],
        "term_weights": [
          {
            "term": "email",
            "tf": 2,
            "weight": 0.111111
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.111111
          },
          {
            "term": "example",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "note",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "validator",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "package",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "not",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "installed",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "error",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "will",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "raised",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "when",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "these",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.055556
          },
          {
            "term": "used",
            "tf": 1,
            "weight": 0.055556
          }
        ],
        "unique_terms": 16,
        "total_terms": 18
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Email Types Example",
        "email",
        "error",
        "example",
        "installed",
        "not",
        "note",
        "package",
        "the",
        "types",
        "validator"
      ]
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.565,
      "overall": 0.7549999999999999
    }
  },
  {
    "text": "## IP Address Types\n\nPydantic provides types for validating IP addresses, network interfaces, and networks.\n\n```\n```\n\nThese types leverage Python's standard `ipaddress` module and provide proper validation during model instantiation.",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0012",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "IP Address Types"
      ],
      "heading_text": "IP Address Types",
      "token_count": 44,
      "char_count": 233,
      "start_char": 8845,
      "end_char": 9078,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5416129032258065,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.558670",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "IP Address Types",
      "chunk_hash": "9ba3a905ee4b9f5b",
      "content_digest": "9ba3a905ee4b9f5b",
      "chunk_length": 233,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "types",
          "and",
          "address",
          "pydantic",
          "provides",
          "for",
          "validating",
          "addresses",
          "network",
          "interfaces",
          "networks",
          "these",
          "leverage",
          "python",
          "standard",
          "ipaddress",
          "module",
          "provide",
          "proper",
          "validation"
        ],
        "term_weights": [
          {
            "term": "types",
            "tf": 3,
            "weight": 0.115385
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.076923
          },
          {
            "term": "address",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "validating",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "addresses",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "network",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "interfaces",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "networks",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "these",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "leverage",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "python",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "standard",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "ipaddress",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "module",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "provide",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "proper",
            "tf": 1,
            "weight": 0.038462
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.038462
          }
        ],
        "unique_terms": 23,
        "total_terms": 26
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "IP Address Types",
        "address",
        "addresses",
        "and",
        "for",
        "interfaces",
        "network",
        "provides",
        "pydantic",
        "types",
        "validating"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5416129032258065,
      "overall": 0.7138709677419355
    }
  },
  {
    "text": "## Implementation Details",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Implementation Details"
      ],
      "heading_text": "Implementation Details",
      "token_count": 3,
      "char_count": 25,
      "start_char": 10592,
      "end_char": 10617,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.559691",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "Implementation Details",
      "chunk_hash": "812a10c977ea5550",
      "content_digest": "812a10c977ea5550",
      "chunk_length": 25,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "implementation",
          "details"
        ],
        "term_weights": [
          {
            "term": "implementation",
            "tf": 1,
            "weight": 0.5
          },
          {
            "term": "details",
            "tf": 1,
            "weight": 0.5
          }
        ],
        "unique_terms": 2,
        "total_terms": 2
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Implementation Details",
        "details",
        "implementation"
      ]
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "overall": 0.7633333333333333
    }
  },
  {
    "text": "### URL Validation Process\n\nURL validation and processing in Pydantic follows these steps:\n\n1. Parse the URL string into components\n2. Validate the scheme against allowed schemes\n3. Apply length constraints\n4. Convert international domain names to punycode\n5. Apply default values for missing components\n6. Construct a validated URL object with accessible properties",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "URL Validation Process"
      ],
      "heading_text": "URL Validation Process",
      "token_count": 71,
      "char_count": 366,
      "start_char": 10619,
      "end_char": 10985,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.7511111111111111,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.559847",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "URL Validation Process",
      "chunk_hash": "3107a1da9b0eb44c",
      "content_digest": "3107a1da9b0eb44c",
      "chunk_length": 366,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "url",
          "validation",
          "the",
          "components",
          "apply",
          "process",
          "and",
          "processing",
          "pydantic",
          "follows",
          "these",
          "steps",
          "parse",
          "string",
          "into",
          "validate",
          "scheme",
          "against",
          "allowed",
          "schemes"
        ],
        "term_weights": [
          {
            "term": "url",
            "tf": 4,
            "weight": 0.090909
          },
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.045455
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.045455
          },
          {
            "term": "components",
            "tf": 2,
            "weight": 0.045455
          },
          {
            "term": "apply",
            "tf": 2,
            "weight": 0.045455
          },
          {
            "term": "process",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "processing",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "follows",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "these",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "steps",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "parse",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "string",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "into",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "validate",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "scheme",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "against",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "allowed",
            "tf": 1,
            "weight": 0.022727
          },
          {
            "term": "schemes",
            "tf": 1,
            "weight": 0.022727
          }
        ],
        "unique_terms": 37,
        "total_terms": 44
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "URL Validation Process",
        "and",
        "apply",
        "components",
        "follows",
        "process",
        "processing",
        "pydantic",
        "the",
        "url",
        "validation"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.7511111111111111,
      "overall": 0.6837037037037037
    }
  },
  {
    "text": "### Database DSN Customization  Each DSN type comes with pre-configured constraints for its respective database system:  - Allowed schemes specific to the database - Default ports (e.g., 5432 for PostgreSQL, 6379 for Redis) - Default hosts (often \"localhost\") - Default paths where applicable (e.g., \"/0\" for Redis databases)  This makes it easier to handle database connection strings with minimal configuration. Sources: [pydantic/networks.py690-826](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L690-L826)",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Database DSN Customization"
      ],
      "heading_text": "Database DSN Customization",
      "token_count": 130,
      "char_count": 535,
      "start_char": 11277,
      "end_char": 11812,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5174193548387097,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.560211",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "Database DSN Customization",
      "chunk_hash": "84272b41886bc994",
      "content_digest": "84272b41886bc994",
      "chunk_length": 535,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "database",
          "for",
          "pydantic",
          "default",
          "dsn",
          "with",
          "redis",
          "networks",
          "customization",
          "each",
          "type",
          "comes",
          "pre",
          "configured",
          "constraints",
          "its",
          "respective",
          "system",
          "allowed",
          "schemes"
        ],
        "term_weights": [
          {
            "term": "database",
            "tf": 4,
            "weight": 0.060606
          },
          {
            "term": "for",
            "tf": 4,
            "weight": 0.060606
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.060606
          },
          {
            "term": "default",
            "tf": 3,
            "weight": 0.045455
          },
          {
            "term": "dsn",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "redis",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "networks",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "customization",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "each",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "comes",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "pre",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "configured",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "constraints",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "its",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "respective",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "allowed",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "schemes",
            "tf": 1,
            "weight": 0.015152
          }
        ],
        "unique_terms": 51,
        "total_terms": 66
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Database DSN Customization",
        "customization",
        "database",
        "default",
        "dsn",
        "each",
        "for",
        "networks",
        "pydantic",
        "redis",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5174193548387097,
      "overall": 0.7058064516129031
    }
  },
  {
    "text": "## Best Practices\n\n1. **Choose the most specific type**: Use the most specific URL type for your use case (e.g., `HttpUrl` rather than `AnyUrl` for HTTP endpoints).\n\n2. **Handle connection credentials securely**: For DSNs with credentials, consider using environment variables or secure storage.\n\n3. **Default fallbacks**: Use `UrlConstraints` to provide sensible defaults for missing URL components.\n\n4. **Validation at boundaries**: Validate network inputs at application boundaries to ensure they are properly formed.\n\n5. **Consider the optional dependencies**: Install `email_validator` package when using email validation types.\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0020",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Best Practices"
      ],
      "heading_text": "Best Practices",
      "token_count": 146,
      "char_count": 733,
      "start_char": 11815,
      "end_char": 12548,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5395049504950494,
      "chunking_strategy": "hierarchical_balanced_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.560602",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "Best Practices",
      "chunk_hash": "b47c286ad5d9f0de",
      "content_digest": "b47c286ad5d9f0de",
      "chunk_length": 733,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "for",
          "the",
          "use",
          "most",
          "specific",
          "type",
          "url",
          "credentials",
          "consider",
          "using",
          "validation",
          "boundaries",
          "email",
          "refresh",
          "this",
          "wiki",
          "best",
          "practices",
          "choose",
          "your"
        ],
        "term_weights": [
          {
            "term": "for",
            "tf": 4,
            "weight": 0.045455
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.034091
          },
          {
            "term": "use",
            "tf": 3,
            "weight": 0.034091
          },
          {
            "term": "most",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "specific",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "type",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "url",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "credentials",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "consider",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "boundaries",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "email",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "refresh",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "wiki",
            "tf": 2,
            "weight": 0.022727
          },
          {
            "term": "best",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "practices",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "choose",
            "tf": 1,
            "weight": 0.011364
          },
          {
            "term": "your",
            "tf": 1,
            "weight": 0.011364
          }
        ],
        "unique_terms": 68,
        "total_terms": 88
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Best Practices",
        "consider",
        "credentials",
        "for",
        "most",
        "specific",
        "the",
        "type",
        "url",
        "use",
        "using"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5395049504950494,
      "overall": 0.7131683168316831
    }
  },
  {
    "text": "### On this page  - [Network Types](#network-types.md) - [Core Network Types Overview](#core-network-types-overview.md) - [URL Types Architecture](#url-types-architecture.md) - [Common URL Types](#common-url-types.md) - [URL Components and Properties](#url-components-and-properties.md) - [Usage Example](#usage-example.md) - [Database Connection Strings (DSNs)](#database-connection-strings-dsns.md) - [Supported DSN Types](#supported-dsn-types.md) - [DSN Example](#dsn-example.md) - [Multi-Host Support](#multi-host-support.md) - [Email Validation Types](#email-validation-types.md) - [Email Types Example](#email-types-example.md) - [IP Address Types](#ip-address-types.md) - [IP Address Types Categories](#ip-address-types-categories.md) - [Customization with UrlConstraints](#customization-with-urlconstraints.md) - [UrlConstraints Parameters](#urlconstraints-parameters.md) - [Implementation Details](#implementation-details.md) - [URL Validation Process](#url-validation-process.md) - [International Domain Name Support](#international-domain-name-support.md) - [Database DSN Customization](#database-dsn-customization.md) - [Best Practices](#best-practices.md)",
    "metadata": {
      "chunk_id": "12c7bb0d77ba-0021",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "filename": "_pydantic_pydantic_3.2-network-types.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "On this page"
      ],
      "heading_text": "On this page",
      "token_count": 278,
      "char_count": 1168,
      "start_char": 12550,
      "end_char": 13718,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6818604651162791,
      "chunking_strategy": "hierarchical_balanced_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T07:48:19.561010",
      "document_id": "12c7bb0d77ba",
      "document_name": "_pydantic_pydantic_3.2-network-types",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "source_filename": "_pydantic_pydantic_3.2-network-types.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.2-network-types.md",
      "hierarchy_path": "On this page",
      "chunk_hash": "fe5d46cb9de7215f",
      "content_digest": "fe5d46cb9de7215f",
      "chunk_length": 1168,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "types",
          "url",
          "example",
          "dsn",
          "network",
          "database",
          "support",
          "email",
          "validation",
          "address",
          "customization",
          "urlconstraints",
          "core",
          "overview",
          "architecture",
          "common",
          "components",
          "and",
          "properties",
          "usage"
        ],
        "term_weights": [
          {
            "term": "types",
            "tf": 18,
            "weight": 0.147541
          },
          {
            "term": "url",
            "tf": 8,
            "weight": 0.065574
          },
          {
            "term": "example",
            "tf": 6,
            "weight": 0.04918
          },
          {
            "term": "dsn",
            "tf": 6,
            "weight": 0.04918
          },
          {
            "term": "network",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "database",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "support",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "email",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "validation",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "address",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "customization",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "urlconstraints",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "core",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "overview",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "architecture",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "common",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "components",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "properties",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "usage",
            "tf": 2,
            "weight": 0.016393
          }
        ],
        "unique_terms": 39,
        "total_terms": 122
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "On this page",
        "address",
        "database",
        "dsn",
        "email",
        "example",
        "network",
        "support",
        "types",
        "url",
        "validation"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6818604651162791,
      "overall": 0.7272868217054264
    }
  }
]