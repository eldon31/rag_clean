[
  {
    "text": "## Core Concepts  TypeAdapter wraps a Python type with Pydantic's validation and serialization functionality. It creates a core schema for the type, and uses this schema to validate input data and serialize output data. ``` ``` Sources: [pydantic/type\\_adapter.py69-107](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L69-L107)  - Container types (list, dict, tuple, etc.) - Pydantic models - dataclasses - TypedDict - Generic types - Custom types ``` ``` Sources: [pydantic/type\\_adapter.py195-234](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L195-L234)\"] ValidateMethod --> |\"Input is invalid\"| ValidationError\\[\"ValidationError\"] ``` subgraph \"Validation Parameters\"         Params[\"Parameters:         - strict         - context         - from_attributes         - by_alias         - by_name         - experimental_allow_partial\"]     end          Params --> ValidateMethod end ``` ``` Sources: <FileRef file-url=\"https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L381-L430\" min=381 max=430 file-path=\"pydantic/type_adapter.py\">Hii</FileRef>\"]         end                  Params --> SerializeMethod     end ``` Sources: [pydantic/type\\_adapter.py532-586](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L532-L586) schema = adapter.json\\_schema() ``` The `json_schema` method has parameters to control schema generation:  - `by_alias`: Whether to use alias names for field names - `ref_template`: The format string for generating $ref strings - `schema_generator`: The generator class for creating the schema - `mode`: The mode to use for schema generation (validation or serialization)  Sources: <FileRef file-url=\"https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L647-L678\" min=647 max=678 file-path=\"pydantic/type_adapter.py\">Hii</FileRef>\"] --> |\"1. Initial creation\"| CS[\"Mock CoreSchema\"]         CS --> |\"2. Type needs resolution\"| RebuildMethod[\"rebuild()\"]         RebuildMethod --> |\"3. Resolves forward references\"| FinalCS[\"Final CoreSchema\"]         FinalCS --> VS[\"SchemaValidator\"]         FinalCS --> SS[\"SchemaSerializer\"]     end ``` When using forward references, you may need to call `rebuild` explicitly to resolve them: ``` ``` Sources: [pydantic/type\\_adapter.py335-379](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L335-L379))",
    "metadata": {
      "chunk_id": "6c3999b340fc-0001",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Core Concepts"
      ],
      "heading_text": "Core Concepts",
      "token_count": 612,
      "char_count": 2427,
      "start_char": 4353,
      "end_char": 6780,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6910377358490567,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.868791",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 612,
      "document_id": "6c3999b340fc",
      "document_name": "_pydantic_pydantic_3.3-typeadapter",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "source_filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "hierarchy_path": "Core Concepts",
      "chunk_hash": "193959c3ed4abdfc",
      "content_digest": "193959c3ed4abdfc",
      "chunk_length": 2427,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "type",
          "adapter",
          "schema",
          "the",
          "sources",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "for",
          "end",
          "fileref",
          "file",
          "validation",
          "and",
          "types",
          "parameters",
          "params"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 26,
            "weight": 0.093863
          },
          {
            "term": "type",
            "tf": 15,
            "weight": 0.054152
          },
          {
            "term": "adapter",
            "tf": 13,
            "weight": 0.046931
          },
          {
            "term": "schema",
            "tf": 9,
            "weight": 0.032491
          },
          {
            "term": "the",
            "tf": 6,
            "weight": 0.021661
          },
          {
            "term": "sources",
            "tf": 6,
            "weight": 0.021661
          },
          {
            "term": "https",
            "tf": 6,
            "weight": 0.021661
          },
          {
            "term": "github",
            "tf": 6,
            "weight": 0.021661
          },
          {
            "term": "com",
            "tf": 6,
            "weight": 0.021661
          },
          {
            "term": "blob",
            "tf": 6,
            "weight": 0.021661
          },
          {
            "term": "76ef0b08",
            "tf": 6,
            "weight": 0.021661
          },
          {
            "term": "for",
            "tf": 5,
            "weight": 0.018051
          },
          {
            "term": "end",
            "tf": 5,
            "weight": 0.018051
          },
          {
            "term": "fileref",
            "tf": 4,
            "weight": 0.01444
          },
          {
            "term": "file",
            "tf": 4,
            "weight": 0.01444
          },
          {
            "term": "validation",
            "tf": 3,
            "weight": 0.01083
          },
          {
            "term": "and",
            "tf": 3,
            "weight": 0.01083
          },
          {
            "term": "types",
            "tf": 3,
            "weight": 0.01083
          },
          {
            "term": "parameters",
            "tf": 3,
            "weight": 0.01083
          },
          {
            "term": "params",
            "tf": 3,
            "weight": 0.01083
          }
        ],
        "unique_terms": 132,
        "total_terms": 277
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Core Concepts",
        "adapter",
        "blob",
        "com",
        "github",
        "https",
        "pydantic",
        "schema",
        "sources",
        "the",
        "type"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6910377358490567,
      "overall": 0.7636792452830189
    }
  },
  {
    "text": "# This will fail due to strict validation  try: int\\_list\\_adapter.validate\\_python(\\[\"1\", \"2\"]) except Exception as e: print(f\"Validation failed: {e}\") ``` However, you cannot provide a configuration when the type you're using has its own config that cannot be overridden (e.g., `BaseModel`, `TypedDict`, and `dataclass`). Sources: <FileRef file-url=\"https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L198-L210\" min=198 max=210 file-path=\"pydantic/type_adapter.py\">Hii</FileRef>)",
    "metadata": {
      "chunk_id": "6c3999b340fc-0002",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "This will fail due to strict validation"
      ],
      "heading_text": "This will fail due to strict validation",
      "token_count": 138,
      "char_count": 506,
      "start_char": 6799,
      "end_char": 7305,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5838775510204082,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.871997",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 138,
      "document_id": "6c3999b340fc",
      "document_name": "_pydantic_pydantic_3.3-typeadapter",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "source_filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "hierarchy_path": "This will fail due to strict validation",
      "chunk_hash": "6cd6294b89ecdd48",
      "content_digest": "6cd6294b89ecdd48",
      "chunk_length": 506,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "adapter",
          "type",
          "validation",
          "you",
          "cannot",
          "fileref",
          "file",
          "this",
          "will",
          "fail",
          "due",
          "strict",
          "try",
          "int",
          "list",
          "validate",
          "python",
          "except",
          "exception"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.061538
          },
          {
            "term": "adapter",
            "tf": 3,
            "weight": 0.046154
          },
          {
            "term": "type",
            "tf": 3,
            "weight": 0.046154
          },
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "you",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "cannot",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "fileref",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "file",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "will",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "fail",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "due",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "strict",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "try",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "int",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "list",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "validate",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "python",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "except",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "exception",
            "tf": 1,
            "weight": 0.015385
          }
        ],
        "unique_terms": 53,
        "total_terms": 65
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "This will fail due to strict validation",
        "adapter",
        "cannot",
        "file",
        "fileref",
        "pydantic",
        "this",
        "type",
        "validation",
        "will",
        "you"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5838775510204082,
      "overall": 0.7279591836734692
    }
  },
  {
    "text": "### Pydantic Models ``` ```",
    "metadata": {
      "chunk_id": "6c3999b340fc-0005",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Pydantic Models"
      ],
      "heading_text": "Pydantic Models",
      "token_count": 7,
      "char_count": 27,
      "start_char": 7984,
      "end_char": 8011,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.53,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.874853",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 7,
      "document_id": "6c3999b340fc",
      "document_name": "_pydantic_pydantic_3.3-typeadapter",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "source_filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "hierarchy_path": "Pydantic Models",
      "chunk_hash": "4037e74d8140ef36",
      "content_digest": "4037e74d8140ef36",
      "chunk_length": 27,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "models"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.5
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.5
          }
        ],
        "unique_terms": 2,
        "total_terms": 2
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Pydantic Models",
        "models",
        "pydantic"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.53,
      "overall": 0.7433333333333333
    }
  },
  {
    "text": "### Generic Types ``` ``` Sources: [tests/test\\_type\\_adapter.py42-65](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L42-L65)  try: int\\_list\\_adapter.validate\\_python(\\[\"1\", \"not\\_an\\_int\"]) except ValidationError as e: print(f\"Validation errors: {e.errors()}\") ``` ValidationError provides detailed information about what failed, where the error occurred, and why. Sources: <FileRef file-url=\"https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L194-L254\" min=194 max=254 file-path=\"tests/test_type_adapter.py\">Hii</FileRef> -> bool:     \"\"\"Returns whether the type has config.\"\"\"     type_ = _typing_extra.annotated_type(type_) or type_     try:         return issubclass(type_, BaseModel) or is_dataclass(type_) or is_typeddict(type_)     except TypeError:         # type is not a class         return False ``` Sources: \\[pydantic/type\\_adapter.py:58-66]\\(",
    "metadata": {
      "chunk_id": "6c3999b340fc-0009",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Generic Types"
      ],
      "heading_text": "Generic Types",
      "token_count": 242,
      "char_count": 919,
      "start_char": 8090,
      "end_char": 9009,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5308450704225353,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.877953",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 242,
      "document_id": "6c3999b340fc",
      "document_name": "_pydantic_pydantic_3.3-typeadapter",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "source_filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "hierarchy_path": "Generic Types",
      "chunk_hash": "dffebc33fc018b93",
      "content_digest": "dffebc33fc018b93",
      "chunk_length": 919,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "type",
          "adapter",
          "pydantic",
          "tests",
          "test",
          "sources",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "try",
          "int",
          "not",
          "except",
          "validationerror",
          "errors",
          "the",
          "fileref",
          "file"
        ],
        "term_weights": [
          {
            "term": "type",
            "tf": 14,
            "weight": 0.126126
          },
          {
            "term": "adapter",
            "tf": 6,
            "weight": 0.054054
          },
          {
            "term": "pydantic",
            "tf": 5,
            "weight": 0.045045
          },
          {
            "term": "tests",
            "tf": 4,
            "weight": 0.036036
          },
          {
            "term": "test",
            "tf": 4,
            "weight": 0.036036
          },
          {
            "term": "sources",
            "tf": 3,
            "weight": 0.027027
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "try",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "int",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "not",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "except",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "validationerror",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "errors",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "fileref",
            "tf": 2,
            "weight": 0.018018
          },
          {
            "term": "file",
            "tf": 2,
            "weight": 0.018018
          }
        ],
        "unique_terms": 66,
        "total_terms": 111
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Generic Types",
        "adapter",
        "blob",
        "com",
        "github",
        "https",
        "pydantic",
        "sources",
        "test",
        "tests",
        "type"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5308450704225353,
      "overall": 0.7102816901408451
    }
  },
  {
    "text": "## Technical Implementation Details\n\nTypeAdapter uses a combination of:\n\n1. Core schema generation via `GenerateSchema`\n2. Validation via `SchemaValidator` or `PluggableSchemaValidator`\n3. Serialization via `SchemaSerializer`\n4. Namespace resolution for type resolution\n5. Mock objects for deferred building\n\nIt also has special handling for generic types, forward references, and namespace management to ensure types are correctly resolved.\n\nSources: \\[pydantic/type\\_adapter.py:246-316]\\(, \\[pydantic/\\_internal/\\_namespace\\_utils.py:143-293]\\(, \\[pydantic/\\_internal/\\_mock\\_val\\_ser.py:21-149]\\(",
    "metadata": {
      "chunk_id": "6c3999b340fc-0010",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Technical Implementation Details"
      ],
      "heading_text": "Technical Implementation Details",
      "token_count": 145,
      "char_count": 599,
      "start_char": 9017,
      "end_char": 9616,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.56,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.879317",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 145,
      "document_id": "6c3999b340fc",
      "document_name": "_pydantic_pydantic_3.3-typeadapter",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "source_filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "hierarchy_path": "Technical Implementation Details",
      "chunk_hash": "e543ffbd0d6c48af",
      "content_digest": "e543ffbd0d6c48af",
      "chunk_length": 599,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "via",
          "namespace",
          "for",
          "pydantic",
          "resolution",
          "type",
          "mock",
          "types",
          "internal",
          "technical",
          "implementation",
          "details",
          "typeadapter",
          "uses",
          "combination",
          "core",
          "schema",
          "generation",
          "generateschema",
          "validation"
        ],
        "term_weights": [
          {
            "term": "via",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "namespace",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "pydantic",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "resolution",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "type",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "mock",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "technical",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "implementation",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "details",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "typeadapter",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "uses",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "combination",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "core",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "schema",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "generation",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "generateschema",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.015873
          }
        ],
        "unique_terms": 50,
        "total_terms": 63
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Technical Implementation Details",
        "for",
        "internal",
        "mock",
        "namespace",
        "pydantic",
        "resolution",
        "technical",
        "type",
        "types",
        "via"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.56,
      "overall": 0.62
    }
  },
  {
    "text": "## Summary  TypeAdapter is a powerful component that brings Pydantic's validation and serialization capabilities to any Python type. It's particularly useful for:  1. Validating simple types like integers and strings with Pydantic's conversion logic 2. Validating complex types like lists and dictionaries with nested validation 3. Working with non-model types like dataclasses and TypedDict 4. Applying validation to arbitrary types in a consistent way 5. Generating JSON schemas for arbitrary types 6. Serializing instances of arbitrary types consistently  By wrapping a type in a TypeAdapter, you can leverage Pydantic's robust validation and serialization features without having to create a full model class. ``` ``` Dismiss  Refresh this wiki  This wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "chunk_id": "6c3999b340fc-0011",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Summary"
      ],
      "heading_text": "Summary",
      "token_count": 163,
      "char_count": 820,
      "start_char": 9618,
      "end_char": 10438,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.505,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.883132",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 163,
      "document_id": "6c3999b340fc",
      "document_name": "_pydantic_pydantic_3.3-typeadapter",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "source_filename": "_pydantic_pydantic_3.3-typeadapter.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.3-typeadapter.md",
      "hierarchy_path": "Summary",
      "chunk_hash": "3f6b06e37186d0d3",
      "content_digest": "3f6b06e37186d0d3",
      "chunk_length": 820,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "types",
          "and",
          "validation",
          "pydantic",
          "like",
          "with",
          "arbitrary",
          "typeadapter",
          "serialization",
          "type",
          "for",
          "validating",
          "model",
          "refresh",
          "this",
          "wiki",
          "summary",
          "powerful",
          "component",
          "that"
        ],
        "term_weights": [
          {
            "term": "types",
            "tf": 6,
            "weight": 0.0625
          },
          {
            "term": "and",
            "tf": 5,
            "weight": 0.052083
          },
          {
            "term": "validation",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "pydantic",
            "tf": 3,
            "weight": 0.03125
          },
          {
            "term": "like",
            "tf": 3,
            "weight": 0.03125
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.03125
          },
          {
            "term": "arbitrary",
            "tf": 3,
            "weight": 0.03125
          },
          {
            "term": "typeadapter",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "serialization",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "type",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "validating",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "refresh",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "wiki",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "summary",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "powerful",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "component",
            "tf": 1,
            "weight": 0.010417
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.010417
          }
        ],
        "unique_terms": 67,
        "total_terms": 96
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Summary",
        "and",
        "arbitrary",
        "like",
        "pydantic",
        "serialization",
        "type",
        "typeadapter",
        "types",
        "validation",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.505,
      "overall": 0.7016666666666667
    }
  }
]