[
  {
    "text": "### Special Cases",
    "metadata": {
      "chunk_id": "841f46e47b40-0009",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Special Cases"
      ],
      "heading_text": "Special Cases",
      "token_count": 3,
      "char_count": 17,
      "start_char": 0,
      "end_char": 17,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.39,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:27.744062",
      "document_id": "841f46e47b40",
      "document_name": "_pydantic_pydantic_4.3-json-conversion",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "source_filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "hierarchy_path": "Special Cases",
      "chunk_hash": "f729f5d5da46d617",
      "content_digest": "f729f5d5da46d617",
      "chunk_length": 17,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "special",
          "cases"
        ],
        "term_weights": [
          {
            "term": "special",
            "tf": 1,
            "weight": 0.5
          },
          {
            "term": "cases",
            "tf": 1,
            "weight": 0.5
          }
        ],
        "unique_terms": 2,
        "total_terms": 2
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Special Cases",
        "cases",
        "special"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.39,
      "overall": 0.6966666666666667
    }
  },
  {
    "text": "### Built-in Type Serialization  | Python Type                       | JSON Representation        | Example                                  | | --------------------------------- | -------------------------- | ---------------------------------------- | | `str`                             | string                     | `\"text\"`                                 | | `int`/`float`                     | number                     | `123`, `3.14`                            | | `bool`                            | boolean                    | `true`, `false`                          | | `None`                            | null                       | `null`                                   | | `list`/`tuple`/`set`              | array                      | `[1, 2, 3]`                              | | `dict`                            | object                     | `{\"key\": \"value\"}`                       | | `UUID`                            | string                     | `\"ebcdab58-6eb8-46fb-a190-d07a33e9eac8\"` | | `datetime`                        | string (ISO 8601)          | `\"2032-01-01T01:01:00\"`                  | | `date`                            | string (ISO 8601)          | `\"2032-01-01\"`                           | | `time`                            | string (ISO 8601)          | `\"12:34:56\"`                             | | `timedelta`                       | string (ISO 8601 duration) | `\"P12DT34.000056S\"`                      | | `bytes`                           | string (UTF-8)             | `\"this is bytes\"`                        | | `Decimal`                         | string                     | `\"12.34\"`                                | | `Enum`                            | string/number              | `\"bar\"`                                  | | `Pattern`                         | string                     | `\"^regex$\"`                              | | `SecretStr`/`SecretBytes`         | string (masked)            | `\"**********\"`                           | | `IPv4Address`/`IPv6Address`       | string                     | `\"192.168.0.1\"`                          | | `Path`/`FilePath`/`DirectoryPath` | string                     | `\"/path/to/file\"`                        |  Sources: [tests/test\\_json.py61-91](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L61-L91) [tests/test\\_json.py107-120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L107-L120)",
    "metadata": {
      "chunk_id": "841f46e47b40-0008",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Built-in Type Serialization"
      ],
      "heading_text": "Built-in Type Serialization",
      "token_count": 509,
      "char_count": 2458,
      "start_char": 0,
      "end_char": 2458,
      "semantic_score": 0.3578857183456421,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6275449101796406,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:27.743502",
      "document_id": "841f46e47b40",
      "document_name": "_pydantic_pydantic_4.3-json-conversion",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "source_filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "hierarchy_path": "Built-in Type Serialization",
      "chunk_hash": "daeb391c3103f56a",
      "content_digest": "daeb391c3103f56a",
      "chunk_length": 2458,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "string",
          "json",
          "iso",
          "8601",
          "tests",
          "test",
          "pydantic",
          "type",
          "number",
          "null",
          "2032",
          "bytes",
          "path",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "built",
          "serialization"
        ],
        "term_weights": [
          {
            "term": "string",
            "tf": 13,
            "weight": 0.106557
          },
          {
            "term": "json",
            "tf": 5,
            "weight": 0.040984
          },
          {
            "term": "iso",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "8601",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "tests",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "test",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.032787
          },
          {
            "term": "type",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "number",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "null",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "2032",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "bytes",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "path",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.016393
          },
          {
            "term": "built",
            "tf": 1,
            "weight": 0.008197
          },
          {
            "term": "serialization",
            "tf": 1,
            "weight": 0.008197
          }
        ],
        "unique_terms": 80,
        "total_terms": 122
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "8601",
        "Built-in Type Serialization",
        "iso",
        "json",
        "null",
        "number",
        "pydantic",
        "string",
        "test",
        "tests",
        "type"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.3578857183456421,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6275449101796406,
      "overall": 0.6284768761750942
    }
  },
  {
    "text": "## Integration with Standard JSON Module  Pydantic provides a compatibility function for use with the standard `json` module: ``` ``` This allows serializing models and other Pydantic types using the standard `json` module. Sources: [tests/test\\_json.py120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L120-L120) [tests/test\\_json.py278-288](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L278-L288)",
    "metadata": {
      "chunk_id": "841f46e47b40-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Integration with Standard JSON Module"
      ],
      "heading_text": "Integration with Standard JSON Module",
      "token_count": 119,
      "char_count": 448,
      "start_char": 0,
      "end_char": 448,
      "semantic_score": 0.41746416687965393,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5316666666666666,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:27.746007",
      "document_id": "841f46e47b40",
      "document_name": "_pydantic_pydantic_4.3-json-conversion",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "source_filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "hierarchy_path": "Integration with Standard JSON Module",
      "chunk_hash": "6ea882124dfdef22",
      "content_digest": "6ea882124dfdef22",
      "chunk_length": 448,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "json",
          "pydantic",
          "tests",
          "test",
          "standard",
          "module",
          "with",
          "the",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "l120",
          "integration",
          "provides",
          "compatibility",
          "function",
          "for",
          "use"
        ],
        "term_weights": [
          {
            "term": "json",
            "tf": 7,
            "weight": 0.111111
          },
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.095238
          },
          {
            "term": "tests",
            "tf": 4,
            "weight": 0.063492
          },
          {
            "term": "test",
            "tf": 4,
            "weight": 0.063492
          },
          {
            "term": "standard",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "module",
            "tf": 3,
            "weight": 0.047619
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "l120",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "integration",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "compatibility",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "function",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.015873
          }
        ],
        "unique_terms": 34,
        "total_terms": 63
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Integration with Standard JSON Module",
        "github",
        "https",
        "json",
        "module",
        "pydantic",
        "standard",
        "test",
        "tests",
        "the",
        "with"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.41746416687965393,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5316666666666666,
      "overall": 0.6163769445154402
    }
  },
  {
    "text": "### JSON Encoders  You can use the `json_encoders` configuration option to customize serialization for specific types: ``` ``` JSON encoders are applied when serializing to JSON, not when creating Python dictionaries. Sources: [tests/test\\_json.py400-414](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L400-L414) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439) [tests/test\\_json.py480-488](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L480-L488)",
    "metadata": {
      "chunk_id": "841f46e47b40-0014",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "JSON Encoders"
      ],
      "heading_text": "JSON Encoders",
      "token_count": 155,
      "char_count": 556,
      "start_char": 0,
      "end_char": 556,
      "semantic_score": 0.39552170038223267,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:27.745518",
      "document_id": "841f46e47b40",
      "document_name": "_pydantic_pydantic_4.3-json-conversion",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "source_filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "hierarchy_path": "JSON Encoders",
      "chunk_hash": "fb6d18d2b1e3cf9a",
      "content_digest": "fb6d18d2b1e3cf9a",
      "chunk_length": 556,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "json",
          "tests",
          "test",
          "pydantic",
          "encoders",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "when",
          "you",
          "can",
          "use",
          "the",
          "configuration",
          "option",
          "customize",
          "serialization",
          "for"
        ],
        "term_weights": [
          {
            "term": "json",
            "tf": 10,
            "weight": 0.126582
          },
          {
            "term": "tests",
            "tf": 6,
            "weight": 0.075949
          },
          {
            "term": "test",
            "tf": 6,
            "weight": 0.075949
          },
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.075949
          },
          {
            "term": "encoders",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "blob",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "76ef0b08",
            "tf": 3,
            "weight": 0.037975
          },
          {
            "term": "when",
            "tf": 2,
            "weight": 0.025316
          },
          {
            "term": "you",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "can",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "configuration",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "option",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "customize",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "serialization",
            "tf": 1,
            "weight": 0.012658
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.012658
          }
        ],
        "unique_terms": 42,
        "total_terms": 79
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "JSON Encoders",
        "blob",
        "com",
        "encoders",
        "github",
        "https",
        "json",
        "pydantic",
        "test",
        "tests"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.39552170038223267,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "overall": 0.6142215191750299
    }
  },
  {
    "text": "## Inheritance and JSON Serialization  In class inheritance, field serializers from parent classes are used, unless the child class provides its own serializer for the same field: ``` ``` Note that `json_encoders` configurations are not inherited; child models must define their own. Sources: [tests/test\\_json.py254-268](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L254-L268) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439)",
    "metadata": {
      "chunk_id": "841f46e47b40-0017",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Inheritance and JSON Serialization"
      ],
      "heading_text": "Inheritance and JSON Serialization",
      "token_count": 129,
      "char_count": 512,
      "start_char": 0,
      "end_char": 512,
      "semantic_score": 0.3439967632293701,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5566666666666666,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:27.746316",
      "document_id": "841f46e47b40",
      "document_name": "_pydantic_pydantic_4.3-json-conversion",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "source_filename": "_pydantic_pydantic_4.3-json-conversion.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "hierarchy_path": "Inheritance and JSON Serialization",
      "chunk_hash": "1d9b65469b16f1bd",
      "content_digest": "1d9b65469b16f1bd",
      "chunk_length": 512,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "json",
          "tests",
          "test",
          "pydantic",
          "inheritance",
          "class",
          "field",
          "are",
          "the",
          "child",
          "own",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "and",
          "serialization",
          "serializers",
          "from"
        ],
        "term_weights": [
          {
            "term": "json",
            "tf": 6,
            "weight": 0.081081
          },
          {
            "term": "tests",
            "tf": 4,
            "weight": 0.054054
          },
          {
            "term": "test",
            "tf": 4,
            "weight": 0.054054
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.054054
          },
          {
            "term": "inheritance",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "class",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "field",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "child",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "own",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.027027
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.013514
          },
          {
            "term": "serialization",
            "tf": 1,
            "weight": 0.013514
          },
          {
            "term": "serializers",
            "tf": 1,
            "weight": 0.013514
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.013514
          }
        ],
        "unique_terms": 48,
        "total_terms": 74
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Inheritance and JSON Serialization",
        "are",
        "child",
        "class",
        "field",
        "inheritance",
        "json",
        "pydantic",
        "test",
        "tests",
        "the"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.3439967632293701,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5566666666666666,
      "overall": 0.6002211432986789
    }
  }
]