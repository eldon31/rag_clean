[
  {
    "text": "### Primitive Types  For primitive types like strings, integers, and floats, the schema generation is relatively straightforward, with additions for constraints like minimum/maximum values or string patterns.",
    "metadata": {
      "chunk_id": "4a081ef2d5b3-0006",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Primitive Types"
      ],
      "heading_text": "Primitive Types",
      "token_count": 35,
      "char_count": 208,
      "start_char": 0,
      "end_char": 208,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.3455555555555555,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:45.962637",
      "document_id": "4a081ef2d5b3",
      "document_name": "_pydantic_pydantic_5.1-core-schema-generation",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "hierarchy_path": "Primitive Types",
      "chunk_hash": "89977f39bf907cde",
      "content_digest": "89977f39bf907cde",
      "chunk_length": 208,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "primitive",
          "types",
          "for",
          "like",
          "strings",
          "integers",
          "and",
          "floats",
          "the",
          "schema",
          "generation",
          "relatively",
          "straightforward",
          "with",
          "additions",
          "constraints",
          "minimum",
          "maximum",
          "values",
          "string"
        ],
        "term_weights": [
          {
            "term": "primitive",
            "tf": 2,
            "weight": 0.08
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.08
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.08
          },
          {
            "term": "like",
            "tf": 2,
            "weight": 0.08
          },
          {
            "term": "strings",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "integers",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "floats",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "schema",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "generation",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "relatively",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "straightforward",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "additions",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "constraints",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "minimum",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "maximum",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "values",
            "tf": 1,
            "weight": 0.04
          },
          {
            "term": "string",
            "tf": 1,
            "weight": 0.04
          }
        ],
        "unique_terms": 21,
        "total_terms": 25
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Primitive Types",
        "and",
        "floats",
        "for",
        "integers",
        "like",
        "primitive",
        "schema",
        "strings",
        "the",
        "types"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.3455555555555555,
      "overall": 0.6818518518518518
    }
  },
  {
    "text": "## Type-Specific Schema Generation  Different Python types require specialized schema generation logic. Here are some key schema generation methods:",
    "metadata": {
      "chunk_id": "4a081ef2d5b3-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Type-Specific Schema Generation"
      ],
      "heading_text": "Type-Specific Schema Generation",
      "token_count": 24,
      "char_count": 148,
      "start_char": 0,
      "end_char": 148,
      "semantic_score": 0.6110789775848389,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5268421052631579,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:45.962389",
      "document_id": "4a081ef2d5b3",
      "document_name": "_pydantic_pydantic_5.1-core-schema-generation",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "hierarchy_path": "Type-Specific Schema Generation",
      "chunk_hash": "1fcfe2d0c94fa947",
      "content_digest": "1fcfe2d0c94fa947",
      "chunk_length": 148,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "schema",
          "generation",
          "type",
          "specific",
          "different",
          "python",
          "types",
          "require",
          "specialized",
          "logic",
          "here",
          "are",
          "some",
          "key",
          "methods"
        ],
        "term_weights": [
          {
            "term": "schema",
            "tf": 3,
            "weight": 0.157895
          },
          {
            "term": "generation",
            "tf": 3,
            "weight": 0.157895
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "specific",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "different",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "python",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "types",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "require",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "specialized",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "logic",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "here",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "some",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "key",
            "tf": 1,
            "weight": 0.052632
          },
          {
            "term": "methods",
            "tf": 1,
            "weight": 0.052632
          }
        ],
        "unique_terms": 15,
        "total_terms": 19
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Type-Specific Schema Generation",
        "different",
        "generation",
        "logic",
        "python",
        "require",
        "schema",
        "specialized",
        "specific",
        "type",
        "types"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.6110789775848389,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5268421052631579,
      "overall": 0.6793070276159989
    }
  },
  {
    "text": "## Schema Generation Process  The schema generation process follows several steps to convert Python types into a complete core schema: ``` ``` Sources:  - [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) - [pydantic/\\_internal/\\_generate\\_schema.py843-889](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L843-L889) - [pydantic/\\_internal/\\_generate\\_schema.py718-843](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L718-L843)",
    "metadata": {
      "chunk_id": "4a081ef2d5b3-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Schema Generation Process"
      ],
      "heading_text": "Schema Generation Process",
      "token_count": 177,
      "char_count": 614,
      "start_char": 0,
      "end_char": 614,
      "semantic_score": 0.3971993327140808,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7279310344827586,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:45.960456",
      "document_id": "4a081ef2d5b3",
      "document_name": "_pydantic_pydantic_5.1-core-schema-generation",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "hierarchy_path": "Schema Generation Process",
      "chunk_hash": "304f171db03c4f43",
      "content_digest": "304f171db03c4f43",
      "chunk_length": 614,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "schema",
          "internal",
          "generate",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "generation",
          "process",
          "l843",
          "the",
          "follows",
          "several",
          "steps",
          "convert",
          "python",
          "types",
          "into"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 12,
            "weight": 0.16
          },
          {
            "term": "schema",
            "tf": 9,
            "weight": 0.12
          },
          {
            "term": "internal",
            "tf": 6,
            "weight": 0.08
          },
          {
            "term": "generate",
            "tf": 6,
            "weight": 0.08
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.04
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.04
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.04
          },
          {
            "term": "blob",
            "tf": 3,
            "weight": 0.04
          },
          {
            "term": "76ef0b08",
            "tf": 3,
            "weight": 0.04
          },
          {
            "term": "generation",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "process",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "l843",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "follows",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "several",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "steps",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "convert",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "python",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "types",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "into",
            "tf": 1,
            "weight": 0.013333
          }
        ],
        "unique_terms": 33,
        "total_terms": 75
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Schema Generation Process",
        "blob",
        "com",
        "generate",
        "generation",
        "github",
        "https",
        "internal",
        "pydantic",
        "schema"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.3971993327140808,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7279310344827586,
      "overall": 0.6750434557322799
    }
  },
  {
    "text": "## Metadata Processing  Type annotations can include metadata that affects schema generation. This is particularly relevant for `Annotated` types and field constraints. ``` ``` Metadata can come from various sources:  - Field constraints (min\\_length, max\\_length, etc.) - Validators (before, after, wrap validators) - Field descriptions and examples - Custom schema transformations  Sources:  - [pydantic/\\_internal/\\_known\\_annotated\\_metadata.py168-329](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_known_annotated_metadata.py#L168-L329) - [tests/test\\_annotated.py28-134](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_annotated.py#L28-L134)",
    "metadata": {
      "chunk_id": "4a081ef2d5b3-0011",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Metadata Processing"
      ],
      "heading_text": "Metadata Processing",
      "token_count": 172,
      "char_count": 686,
      "start_char": 0,
      "end_char": 686,
      "semantic_score": 0.3145219683647156,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.715,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:45.968711",
      "document_id": "4a081ef2d5b3",
      "document_name": "_pydantic_pydantic_5.1-core-schema-generation",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "hierarchy_path": "Metadata Processing",
      "chunk_hash": "052f8dbfc7466cc7",
      "content_digest": "052f8dbfc7466cc7",
      "chunk_length": 686,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "metadata",
          "annotated",
          "field",
          "can",
          "schema",
          "and",
          "constraints",
          "sources",
          "length",
          "validators",
          "internal",
          "known",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "tests",
          "test"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.071429
          },
          {
            "term": "metadata",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "annotated",
            "tf": 5,
            "weight": 0.059524
          },
          {
            "term": "field",
            "tf": 3,
            "weight": 0.035714
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "schema",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "constraints",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "sources",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "length",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "validators",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "known",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.02381
          },
          {
            "term": "test",
            "tf": 2,
            "weight": 0.02381
          }
        ],
        "unique_terms": 53,
        "total_terms": 84
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Metadata Processing",
        "and",
        "annotated",
        "can",
        "constraints",
        "field",
        "length",
        "metadata",
        "pydantic",
        "schema",
        "sources"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.3145219683647156,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.715,
      "overall": 0.6431739894549051
    }
  },
  {
    "text": "## The GenerateSchema Class  The `GenerateSchema` class is the central component responsible for transforming Python types into core schemas. It provides methods for handling different Python types and constructing appropriate schema representations. ``` ``` The `generate_schema` method is the main entry point that dispatches to type-specific handlers based on the input object. The class also maintains state such as a stack of models being processed (to handle recursive references) and definitions being generated. Sources:  - [pydantic/\\_internal/\\_generate\\_schema.py318-342](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L318-L342) - [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) - [pydantic/\\_internal/\\_generate\\_schema.py366-377](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L366-L377)",
    "metadata": {
      "chunk_id": "4a081ef2d5b3-0002",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "The GenerateSchema Class"
      ],
      "heading_text": "The GenerateSchema Class",
      "token_count": 242,
      "char_count": 991,
      "start_char": 0,
      "end_char": 991,
      "semantic_score": 0.44727087020874023,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.52625,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:02:45.959220",
      "document_id": "4a081ef2d5b3",
      "document_name": "_pydantic_pydantic_5.1-core-schema-generation",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_filename": "_pydantic_pydantic_5.1-core-schema-generation.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_5.1-core-schema-generation.md",
      "hierarchy_path": "The GenerateSchema Class",
      "chunk_hash": "7471ec3f0765345b",
      "content_digest": "7471ec3f0765345b",
      "chunk_length": 991,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "schema",
          "the",
          "generate",
          "internal",
          "class",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "generateschema",
          "for",
          "python",
          "types",
          "and",
          "being",
          "central",
          "component",
          "responsible"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 12,
            "weight": 0.099174
          },
          {
            "term": "schema",
            "tf": 8,
            "weight": 0.066116
          },
          {
            "term": "the",
            "tf": 7,
            "weight": 0.057851
          },
          {
            "term": "generate",
            "tf": 7,
            "weight": 0.057851
          },
          {
            "term": "internal",
            "tf": 6,
            "weight": 0.049587
          },
          {
            "term": "class",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "blob",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "76ef0b08",
            "tf": 3,
            "weight": 0.024793
          },
          {
            "term": "generateschema",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "python",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "being",
            "tf": 2,
            "weight": 0.016529
          },
          {
            "term": "central",
            "tf": 1,
            "weight": 0.008264
          },
          {
            "term": "component",
            "tf": 1,
            "weight": 0.008264
          },
          {
            "term": "responsible",
            "tf": 1,
            "weight": 0.008264
          }
        ],
        "unique_terms": 68,
        "total_terms": 121
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "The GenerateSchema Class",
        "blob",
        "class",
        "com",
        "generate",
        "github",
        "https",
        "internal",
        "pydantic",
        "schema",
        "the"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.44727087020874023,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.52625,
      "overall": 0.6245069567362468
    }
  }
]