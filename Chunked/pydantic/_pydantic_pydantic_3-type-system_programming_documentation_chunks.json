[
  {
    "text": "# Using constrained type function from pydantic import BaseModel, conint  class Model(BaseModel):     value: conint(gt=0, lt=100)",
    "metadata": {
      "chunk_id": "0dd44dadd088-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Using constrained type function"
      ],
      "heading_text": "Using constrained type function",
      "token_count": 33,
      "char_count": 129,
      "start_char": 0,
      "end_char": 129,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:01:23.354513",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Using constrained type function",
      "chunk_hash": "75b587eb96cbccdf",
      "content_digest": "75b587eb96cbccdf",
      "chunk_length": 129,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "basemodel",
          "conint",
          "using",
          "constrained",
          "type",
          "function",
          "from",
          "pydantic",
          "import",
          "class",
          "model",
          "value",
          "100"
        ],
        "term_weights": [
          {
            "term": "basemodel",
            "tf": 2,
            "weight": 0.133333
          },
          {
            "term": "conint",
            "tf": 2,
            "weight": 0.133333
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "constrained",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "function",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "import",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "class",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "value",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "100",
            "tf": 1,
            "weight": 0.066667
          }
        ],
        "unique_terms": 13,
        "total_terms": 15
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Using constrained type function",
        "basemodel",
        "class",
        "conint",
        "constrained",
        "from",
        "function",
        "import",
        "pydantic",
        "type",
        "using"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "overall": 0.7633333333333333
    }
  },
  {
    "text": "# Using Annotated with Field from typing import Annotated from pydantic import BaseModel, Field  class Model(BaseModel):     value: Annotated[int, Field(gt=0, lt=100)] ``` The latter approach using `Annotated` is recommended for better support with static analysis tools.",
    "metadata": {
      "chunk_id": "0dd44dadd088-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Using Annotated with Field"
      ],
      "heading_text": "Using Annotated with Field",
      "token_count": 60,
      "char_count": 271,
      "start_char": 0,
      "end_char": 271,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5385714285714286,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:01:23.354843",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Using Annotated with Field",
      "chunk_hash": "fe00c3caee85bf72",
      "content_digest": "fe00c3caee85bf72",
      "chunk_length": 271,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "annotated",
          "field",
          "using",
          "with",
          "from",
          "import",
          "basemodel",
          "typing",
          "pydantic",
          "class",
          "model",
          "value",
          "int",
          "100",
          "the",
          "latter",
          "approach",
          "recommended",
          "for",
          "better"
        ],
        "term_weights": [
          {
            "term": "annotated",
            "tf": 4,
            "weight": 0.117647
          },
          {
            "term": "field",
            "tf": 3,
            "weight": 0.088235
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "from",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "basemodel",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "typing",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "class",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "value",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "int",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "100",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "latter",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "approach",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "recommended",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "better",
            "tf": 1,
            "weight": 0.029412
          }
        ],
        "unique_terms": 24,
        "total_terms": 34
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Using Annotated with Field",
        "annotated",
        "basemodel",
        "class",
        "field",
        "from",
        "import",
        "pydantic",
        "typing",
        "using",
        "with"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5385714285714286,
      "overall": 0.7461904761904762
    }
  },
  {
    "text": "# Type System  Relevant source files  - [pydantic/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/errors.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/errors.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [pydantic/validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validators.py) - [tests/test\\_networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py)  Pydantic's type system provides specialized types for data validation, offers constrainable versions of standard Python types, and implements network-related and other utility types. This document explains the architecture and components of Pydantic's type system, how to use built-in types, and how to extend the system with custom types. For information about validation and serialization using these types, see [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md). For details about the schema generation process, see [Schema Generation](pydantic/pydantic/5-schema-generation.md).",
    "metadata": {
      "chunk_id": "0dd44dadd088-0000",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Type System"
      ],
      "heading_text": "Type System",
      "token_count": 757,
      "char_count": 2641,
      "start_char": 0,
      "end_char": 2641,
      "semantic_score": 0.38987302780151367,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.8964601769911504,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:01:23.351179",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Type System",
      "chunk_hash": "09df5b633b95cf96",
      "content_digest": "09df5b633b95cf96",
      "chunk_length": 2641,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "types",
          "tests",
          "test",
          "type",
          "and",
          "validate",
          "call",
          "schema",
          "system",
          "init",
          "functional",
          "validators",
          "networks",
          "plugin"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 68,
            "weight": 0.21519
          },
          {
            "term": "https",
            "tf": 18,
            "weight": 0.056962
          },
          {
            "term": "github",
            "tf": 18,
            "weight": 0.056962
          },
          {
            "term": "com",
            "tf": 18,
            "weight": 0.056962
          },
          {
            "term": "blob",
            "tf": 18,
            "weight": 0.056962
          },
          {
            "term": "76ef0b08",
            "tf": 18,
            "weight": 0.056962
          },
          {
            "term": "types",
            "tf": 10,
            "weight": 0.031646
          },
          {
            "term": "tests",
            "tf": 10,
            "weight": 0.031646
          },
          {
            "term": "test",
            "tf": 10,
            "weight": 0.031646
          },
          {
            "term": "type",
            "tf": 7,
            "weight": 0.022152
          },
          {
            "term": "and",
            "tf": 7,
            "weight": 0.022152
          },
          {
            "term": "validate",
            "tf": 6,
            "weight": 0.018987
          },
          {
            "term": "call",
            "tf": 6,
            "weight": 0.018987
          },
          {
            "term": "schema",
            "tf": 5,
            "weight": 0.015823
          },
          {
            "term": "system",
            "tf": 4,
            "weight": 0.012658
          },
          {
            "term": "init",
            "tf": 4,
            "weight": 0.012658
          },
          {
            "term": "functional",
            "tf": 4,
            "weight": 0.012658
          },
          {
            "term": "validators",
            "tf": 4,
            "weight": 0.012658
          },
          {
            "term": "networks",
            "tf": 4,
            "weight": 0.012658
          },
          {
            "term": "plugin",
            "tf": 4,
            "weight": 0.012658
          }
        ],
        "unique_terms": 68,
        "total_terms": 316
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Type System",
        "blob",
        "com",
        "github",
        "https",
        "pydantic",
        "test",
        "tests",
        "type",
        "types"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.38987302780151367,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.8964601769911504,
      "overall": 0.728777734930888
    }
  },
  {
    "text": "## Core Type Concepts",
    "metadata": {
      "chunk_id": "0dd44dadd088-0002",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Core Type Concepts"
      ],
      "heading_text": "Core Type Concepts",
      "token_count": 4,
      "char_count": 21,
      "start_char": 0,
      "end_char": 21,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.39,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:01:23.353211",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Core Type Concepts",
      "chunk_hash": "badf944fae525749",
      "content_digest": "badf944fae525749",
      "chunk_length": 21,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "core",
          "type",
          "concepts"
        ],
        "term_weights": [
          {
            "term": "core",
            "tf": 1,
            "weight": 0.333333
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.333333
          },
          {
            "term": "concepts",
            "tf": 1,
            "weight": 0.333333
          }
        ],
        "unique_terms": 3,
        "total_terms": 3
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Core Type Concepts",
        "concepts",
        "core",
        "type"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.39,
      "overall": 0.6966666666666667
    }
  },
  {
    "text": "## Constrained Types",
    "metadata": {
      "chunk_id": "0dd44dadd088-0007",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Constrained Types"
      ],
      "heading_text": "Constrained Types",
      "token_count": 4,
      "char_count": 20,
      "start_char": 0,
      "end_char": 20,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.39,
      "chunking_strategy": "hybrid_adaptive",
      "content_type": "hierarchical_section",
      "embedding_model": "nomic-ai/CodeRankEmbed",
      "processing_timestamp": "2025-10-19T15:01:23.355421",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Constrained Types",
      "chunk_hash": "8763d54eb5914b74",
      "content_digest": "8763d54eb5914b74",
      "chunk_length": 20,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "constrained",
          "types"
        ],
        "term_weights": [
          {
            "term": "constrained",
            "tf": 1,
            "weight": 0.5
          },
          {
            "term": "types",
            "tf": 1,
            "weight": 0.5
          }
        ],
        "unique_terms": 2,
        "total_terms": 2
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Constrained Types",
        "constrained",
        "types"
      ],
      "quality_fallback": true,
      "quality_notes": "Promoted via relaxed thresholds"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.39,
      "overall": 0.6966666666666667
    }
  }
]