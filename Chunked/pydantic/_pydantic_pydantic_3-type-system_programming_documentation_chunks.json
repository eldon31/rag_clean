[
  {
    "text": "## Type System Architecture\n\nPydantic's type system extends Python's built-in type system to provide additional validation capabilities. It consists of several key components:\n\n```\n```\n\nSources: [pydantic/types.py1-110](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L1-L110), [pydantic/networks.py1-67](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L1-L67)",
    "metadata": {
      "chunk_id": "0dd44dadd088-0001",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Type System Architecture"
      ],
      "heading_text": "Type System Architecture",
      "token_count": 115,
      "char_count": 405,
      "start_char": 5054,
      "end_char": 5459,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.5364285714285714,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:35.467832",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Type System Architecture",
      "chunk_hash": "fb1a64776bc8c711",
      "content_digest": "fb1a64776bc8c711",
      "chunk_length": 405,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "type",
          "system",
          "types",
          "py1",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "networks",
          "architecture",
          "extends",
          "python",
          "built",
          "provide",
          "additional",
          "validation",
          "capabilities",
          "consists"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 9,
            "weight": 0.191489
          },
          {
            "term": "type",
            "tf": 3,
            "weight": 0.06383
          },
          {
            "term": "system",
            "tf": 3,
            "weight": 0.06383
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "py1",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "networks",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "architecture",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "extends",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "python",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "built",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "provide",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "additional",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "capabilities",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "consists",
            "tf": 1,
            "weight": 0.021277
          }
        ],
        "unique_terms": 27,
        "total_terms": 47
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Type System Architecture",
        "blob",
        "com",
        "github",
        "https",
        "py1",
        "pydantic",
        "system",
        "type",
        "types"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.5364285714285714,
      "overall": 0.6121428571428571
    }
  },
  {
    "text": "### Constrained Types and Annotations\n\nPydantic supports two approaches for adding constraints to types:\n\n1. **Constrained Type Functions**: Functions like `conint()`, `constr()`, etc.\n2. **Annotated with Field Constraints**: Using Python's `Annotated` with field constraints\n\n```\n```\n\nSources: [pydantic/types.py111-146](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L111-L146) [pydantic/types.py147-219](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L147-L219) [pydantic/types.py661-685](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L661-L685)\n\nThe two approaches serve the same purpose with different syntax:\n\n```",
    "metadata": {
      "chunk_id": "0dd44dadd088-0003",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Constrained Types and Annotations"
      ],
      "heading_text": "Constrained Types and Annotations",
      "token_count": 193,
      "char_count": 686,
      "start_char": 5484,
      "end_char": 6170,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.5370588235294117,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:35.467832",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Constrained Types and Annotations",
      "chunk_hash": "d714383e751e5653",
      "content_digest": "d714383e751e5653",
      "chunk_length": 686,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "types",
          "constraints",
          "with",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "constrained",
          "two",
          "approaches",
          "functions",
          "annotated",
          "field",
          "the",
          "and",
          "annotations",
          "supports",
          "for"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 13,
            "weight": 0.151163
          },
          {
            "term": "types",
            "tf": 8,
            "weight": 0.093023
          },
          {
            "term": "constraints",
            "tf": 3,
            "weight": 0.034884
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.034884
          },
          {
            "term": "https",
            "tf": 3,
            "weight": 0.034884
          },
          {
            "term": "github",
            "tf": 3,
            "weight": 0.034884
          },
          {
            "term": "com",
            "tf": 3,
            "weight": 0.034884
          },
          {
            "term": "blob",
            "tf": 3,
            "weight": 0.034884
          },
          {
            "term": "76ef0b08",
            "tf": 3,
            "weight": 0.034884
          },
          {
            "term": "constrained",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "two",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "approaches",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "functions",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "annotated",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "field",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.023256
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "annotations",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "supports",
            "tf": 1,
            "weight": 0.011628
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.011628
          }
        ],
        "unique_terms": 46,
        "total_terms": 86
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Constrained Types and Annotations",
        "blob",
        "com",
        "constrained",
        "constraints",
        "github",
        "https",
        "pydantic",
        "types",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.5370588235294117,
      "overall": 0.6123529411764705
    }
  },
  {
    "text": "# Using constrained type function\nfrom pydantic import BaseModel, conint\n\nclass Model(BaseModel):\n    value: conint(gt=0, lt=100)",
    "metadata": {
      "chunk_id": "0dd44dadd088-0004",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Using constrained type function"
      ],
      "heading_text": "Using constrained type function",
      "token_count": 34,
      "char_count": 129,
      "start_char": 6171,
      "end_char": 6300,
      "semantic_score": 0.8,
      "structural_score": 0.7,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:35.467832",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Using constrained type function",
      "chunk_hash": "28ed52ed6111a51c",
      "content_digest": "28ed52ed6111a51c",
      "chunk_length": 129,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "basemodel",
          "conint",
          "using",
          "constrained",
          "type",
          "function",
          "from",
          "pydantic",
          "import",
          "class",
          "model",
          "value",
          "100"
        ],
        "term_weights": [
          {
            "term": "basemodel",
            "tf": 2,
            "weight": 0.133333
          },
          {
            "term": "conint",
            "tf": 2,
            "weight": 0.133333
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "constrained",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "function",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "import",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "class",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "value",
            "tf": 1,
            "weight": 0.066667
          },
          {
            "term": "100",
            "tf": 1,
            "weight": 0.066667
          }
        ],
        "unique_terms": 13,
        "total_terms": 15
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Using constrained type function",
        "basemodel",
        "class",
        "conint",
        "constrained",
        "from",
        "function",
        "import",
        "pydantic",
        "type",
        "using"
      ]
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.7,
      "retrieval_quality": 0.59,
      "overall": 0.6966666666666667
    }
  },
  {
    "text": "# Using Annotated with Field\nfrom typing import Annotated\nfrom pydantic import BaseModel, Field\n\nclass Model(BaseModel):\n    value: Annotated[int, Field(gt=0, lt=100)]\n```\n\nThe latter approach using `Annotated` is recommended for better support with static analysis tools.",
    "metadata": {
      "chunk_id": "0dd44dadd088-0005",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Using Annotated with Field"
      ],
      "heading_text": "Using Annotated with Field",
      "token_count": 63,
      "char_count": 272,
      "start_char": 6302,
      "end_char": 6574,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5385714285714286,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:35.467832",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Using Annotated with Field",
      "chunk_hash": "070b3fcf6680eb69",
      "content_digest": "070b3fcf6680eb69",
      "chunk_length": 272,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "annotated",
          "field",
          "using",
          "with",
          "from",
          "import",
          "basemodel",
          "typing",
          "pydantic",
          "class",
          "model",
          "value",
          "int",
          "100",
          "the",
          "latter",
          "approach",
          "recommended",
          "for",
          "better"
        ],
        "term_weights": [
          {
            "term": "annotated",
            "tf": 4,
            "weight": 0.117647
          },
          {
            "term": "field",
            "tf": 3,
            "weight": 0.088235
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "from",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "import",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "basemodel",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "typing",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "class",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "value",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "int",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "100",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "latter",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "approach",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "recommended",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "better",
            "tf": 1,
            "weight": 0.029412
          }
        ],
        "unique_terms": 24,
        "total_terms": 34
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Using Annotated with Field",
        "annotated",
        "basemodel",
        "class",
        "field",
        "from",
        "import",
        "pydantic",
        "typing",
        "using",
        "with"
      ]
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5385714285714286,
      "overall": 0.7461904761904762
    }
  },
  {
    "text": "## Type Adapter\n\nThe `TypeAdapter` class provides a way to use Pydantic's validation system outside of models:\n\n```\n```\n\nSources: [pydantic/\\_\\_init\\_\\_.py380](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L380-L380)\n\nThe TypeAdapter makes it easy to apply Pydantic validation to standalone types:\n\n```\n```",
    "metadata": {
      "chunk_id": "0dd44dadd088-0016",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Type Adapter"
      ],
      "heading_text": "Type Adapter",
      "token_count": 94,
      "char_count": 332,
      "start_char": 11858,
      "end_char": 12190,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.53,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:35.472441",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Type Adapter",
      "chunk_hash": "1f5a736595be754c",
      "content_digest": "1f5a736595be754c",
      "chunk_length": 332,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "the",
          "typeadapter",
          "validation",
          "init",
          "l380",
          "type",
          "adapter",
          "class",
          "provides",
          "way",
          "use",
          "system",
          "outside",
          "models",
          "sources",
          "py380",
          "https",
          "github",
          "com"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.162162
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "typeadapter",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "init",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "l380",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "adapter",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "class",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "way",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "outside",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "py380",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.027027
          }
        ],
        "unique_terms": 27,
        "total_terms": 37
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Type Adapter",
        "adapter",
        "class",
        "init",
        "l380",
        "provides",
        "pydantic",
        "the",
        "type",
        "typeadapter",
        "validation"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.53,
      "overall": 0.6433333333333333
    }
  },
  {
    "text": "## Creating Custom Types\n\nPydantic allows for creation of custom types by implementing `__get_pydantic_core_schema__` method:\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_validators.py66-127](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validators.py#L66-L127)",
    "metadata": {
      "chunk_id": "0dd44dadd088-0018",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Creating Custom Types"
      ],
      "heading_text": "Creating Custom Types",
      "token_count": 80,
      "char_count": 283,
      "start_char": 12562,
      "end_char": 12845,
      "semantic_score": 0.7,
      "structural_score": 0.7,
      "retrieval_quality": 0.5426315789473684,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:35.472441",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Creating Custom Types",
      "chunk_hash": "acae9b89c2e406d5",
      "content_digest": "acae9b89c2e406d5",
      "chunk_length": 283,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "custom",
          "types",
          "internal",
          "validators",
          "creating",
          "allows",
          "for",
          "creation",
          "implementing",
          "get",
          "core",
          "schema",
          "method",
          "sources",
          "py66",
          "127",
          "https",
          "github",
          "com"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.181818
          },
          {
            "term": "custom",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "validators",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "creating",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "allows",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "creation",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "implementing",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "get",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "core",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "schema",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "method",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "py66",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "127",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.030303
          }
        ],
        "unique_terms": 24,
        "total_terms": 33
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Creating Custom Types",
        "allows",
        "creating",
        "creation",
        "custom",
        "for",
        "implementing",
        "internal",
        "pydantic",
        "types",
        "validators"
      ]
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.7,
      "retrieval_quality": 0.5426315789473684,
      "overall": 0.6475438596491228
    }
  },
  {
    "text": "## Internal Validation Process\n\nThe type system works with Pydantic's validation engine:\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_core\\_utils.py43-66](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_utils.py#L43-L66) [pydantic/\\_internal/\\_validators.py66-127](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validators.py#L66-L127)",
    "metadata": {
      "chunk_id": "0dd44dadd088-0019",
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "filename": "_pydantic_pydantic_3-type-system.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Internal Validation Process"
      ],
      "heading_text": "Internal Validation Process",
      "token_count": 118,
      "char_count": 384,
      "start_char": 12847,
      "end_char": 13231,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.5547058823529412,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "processing_timestamp": "2025-10-20T04:38:35.472441",
      "document_id": "0dd44dadd088",
      "document_name": "_pydantic_pydantic_3-type-system",
      "source_path": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "source_filename": "_pydantic_pydantic_3-type-system.md",
      "source_directory": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3-type-system.md",
      "hierarchy_path": "Internal Validation Process",
      "chunk_hash": "34163ada63c9328f",
      "content_digest": "34163ada63c9328f",
      "chunk_length": 384,
      "payload_version": "1.3",
      "collection_hints": [
        "qdrant_ecosystem"
      ],
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "internal",
          "validation",
          "core",
          "utils",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "l66",
          "validators",
          "process",
          "the",
          "type",
          "system",
          "works",
          "with",
          "engine",
          "sources"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 9,
            "weight": 0.191489
          },
          {
            "term": "internal",
            "tf": 5,
            "weight": 0.106383
          },
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "core",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "utils",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "l66",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "validators",
            "tf": 2,
            "weight": 0.042553
          },
          {
            "term": "process",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "works",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "engine",
            "tf": 1,
            "weight": 0.021277
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.021277
          }
        ],
        "unique_terms": 25,
        "total_terms": 47
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Internal Validation Process",
        "blob",
        "com",
        "core",
        "github",
        "https",
        "internal",
        "pydantic",
        "utils",
        "validation"
      ]
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.5547058823529412,
      "overall": 0.618235294117647
    }
  }
]