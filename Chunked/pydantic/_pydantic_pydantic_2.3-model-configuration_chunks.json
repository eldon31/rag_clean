[
  {
    "text": "## Overview  In Pydantic, model configuration is primarily managed through the `ConfigDict` class, which provides a centralized way to control various aspects of model behavior. Configuration options influence everything from how strictly types are validated to how extra fields are handled and how data is serialized. ``` ``` Sources: [pydantic/config.py36-1113](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L36-L1113)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0001",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Overview"
      ],
      "heading_text": "Overview",
      "token_count": 100,
      "char_count": 444,
      "start_char": 3485,
      "end_char": 3929,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.542,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.579304",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 100,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Overview",
      "chunk_hash": "328ba0a970c0bc46",
      "content_digest": "328ba0a970c0bc46",
      "chunk_length": 444,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "how",
          "model",
          "configuration",
          "are",
          "config",
          "overview",
          "primarily",
          "managed",
          "through",
          "the",
          "configdict",
          "class",
          "which",
          "provides",
          "centralized",
          "way",
          "control",
          "various",
          "aspects"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 5,
            "weight": 0.092593
          },
          {
            "term": "how",
            "tf": 3,
            "weight": 0.055556
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.037037
          },
          {
            "term": "configuration",
            "tf": 2,
            "weight": 0.037037
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.037037
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.037037
          },
          {
            "term": "overview",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "primarily",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "managed",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "through",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "configdict",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "class",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "which",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "centralized",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "way",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "control",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "various",
            "tf": 1,
            "weight": 0.018519
          },
          {
            "term": "aspects",
            "tf": 1,
            "weight": 0.018519
          }
        ],
        "unique_terms": 44,
        "total_terms": 54
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Overview",
        "are",
        "config",
        "configuration",
        "how",
        "managed",
        "model",
        "overview",
        "primarily",
        "pydantic",
        "through"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.542,
      "overall": 0.714
    }
  },
  {
    "text": "## Defining Configuration\n\nThere are multiple ways to specify configuration for models in Pydantic:",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0002",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Defining Configuration"
      ],
      "heading_text": "Defining Configuration",
      "token_count": 19,
      "char_count": 99,
      "start_char": 3933,
      "end_char": 4032,
      "semantic_score": 0.8,
      "structural_score": 0.7,
      "retrieval_quality": 0.5685714285714286,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.579852",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 19,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Defining Configuration",
      "chunk_hash": "5c8b8bd4657eba9f",
      "content_digest": "5c8b8bd4657eba9f",
      "chunk_length": 99,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "configuration",
          "defining",
          "there",
          "are",
          "multiple",
          "ways",
          "specify",
          "for",
          "models",
          "pydantic"
        ],
        "term_weights": [
          {
            "term": "configuration",
            "tf": 2,
            "weight": 0.181818
          },
          {
            "term": "defining",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "there",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "multiple",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "ways",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "specify",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.090909
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.090909
          }
        ],
        "unique_terms": 10,
        "total_terms": 11
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Defining Configuration",
        "are",
        "configuration",
        "defining",
        "for",
        "models",
        "multiple",
        "pydantic",
        "specify",
        "there",
        "ways"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.7,
      "retrieval_quality": 0.5685714285714286,
      "overall": 0.6895238095238095
    }
  },
  {
    "text": "### Using `model_config`  The recommended and most common approach is to use the `model_config` class variable with `ConfigDict`: ``` ```",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0003",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Using `model_config`"
      ],
      "heading_text": "Using `model_config`",
      "token_count": 30,
      "char_count": 137,
      "start_char": 4034,
      "end_char": 4171,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.545,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.580740",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 30,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Using `model_config`",
      "chunk_hash": "f99fc1049125d5c2",
      "content_digest": "f99fc1049125d5c2",
      "chunk_length": 137,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "model",
          "config",
          "the",
          "using",
          "recommended",
          "and",
          "most",
          "common",
          "approach",
          "use",
          "class",
          "variable",
          "with",
          "configdict"
        ],
        "term_weights": [
          {
            "term": "model",
            "tf": 2,
            "weight": 0.117647
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.117647
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.117647
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "recommended",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "most",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "common",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "approach",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "class",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "variable",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.058824
          },
          {
            "term": "configdict",
            "tf": 1,
            "weight": 0.058824
          }
        ],
        "unique_terms": 14,
        "total_terms": 17
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Using `model_config`",
        "and",
        "approach",
        "common",
        "config",
        "model",
        "most",
        "recommended",
        "the",
        "use",
        "using"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.545,
      "overall": 0.7483333333333334
    }
  },
  {
    "text": "### Configuration Inheritance  When a model inherits from another model, its configuration is merged with the parent's configuration: ``` ``` Sources: [tests/test\\_config.py491-519](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_config.py#L491-L519)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0004",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Configuration Inheritance"
      ],
      "heading_text": "Configuration Inheritance",
      "token_count": 64,
      "char_count": 264,
      "start_char": 4174,
      "end_char": 4438,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.581897",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 64,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Configuration Inheritance",
      "chunk_hash": "29264dc174ef4e83",
      "content_digest": "29264dc174ef4e83",
      "chunk_length": 264,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "configuration",
          "model",
          "tests",
          "test",
          "config",
          "pydantic",
          "inheritance",
          "when",
          "inherits",
          "from",
          "another",
          "its",
          "merged",
          "with",
          "the",
          "parent",
          "sources",
          "py491",
          "519",
          "https"
        ],
        "term_weights": [
          {
            "term": "configuration",
            "tf": 3,
            "weight": 0.090909
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "test",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "pydantic",
            "tf": 2,
            "weight": 0.060606
          },
          {
            "term": "inheritance",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "when",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "inherits",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "from",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "another",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "its",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "merged",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "parent",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "py491",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "519",
            "tf": 1,
            "weight": 0.030303
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.030303
          }
        ],
        "unique_terms": 26,
        "total_terms": 33
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Configuration Inheritance",
        "config",
        "configuration",
        "from",
        "inheritance",
        "inherits",
        "model",
        "pydantic",
        "test",
        "tests",
        "when"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5627272727272727,
      "overall": 0.7209090909090908
    }
  },
  {
    "text": "### With `with_config` Decorator  For non-BaseModel types like TypedDict and dataclasses, you can use the `with_config` decorator: ``` ``` Sources: [pydantic/config.py1144-1210](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L1144-L1210)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0006",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "With `with_config` Decorator"
      ],
      "heading_text": "With `with_config` Decorator",
      "token_count": 78,
      "char_count": 260,
      "start_char": 4696,
      "end_char": 4956,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5614285714285714,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.584113",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 78,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "With `with_config` Decorator",
      "chunk_hash": "1ced06974ac761e1",
      "content_digest": "1ced06974ac761e1",
      "chunk_length": 260,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "config",
          "pydantic",
          "with",
          "decorator",
          "for",
          "non",
          "basemodel",
          "types",
          "like",
          "typeddict",
          "and",
          "dataclasses",
          "you",
          "can",
          "use",
          "the",
          "sources",
          "py1144",
          "1210",
          "https"
        ],
        "term_weights": [
          {
            "term": "config",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "with",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "decorator",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "non",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "basemodel",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "types",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "like",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "typeddict",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "dataclasses",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "you",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "can",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "py1144",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "1210",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 26,
        "total_terms": 35
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "With `with_config` Decorator",
        "basemodel",
        "config",
        "decorator",
        "for",
        "like",
        "non",
        "pydantic",
        "typeddict",
        "types",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5614285714285714,
      "overall": 0.7204761904761904
    }
  },
  {
    "text": "## Configuration Processing Flow  When a model is created, its configuration is processed through several steps: ``` ``` Sources: [pydantic/\\_internal/\\_config.py94-228](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L94-L228)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0007",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Configuration Processing Flow"
      ],
      "heading_text": "Configuration Processing Flow",
      "token_count": 69,
      "char_count": 260,
      "start_char": 4960,
      "end_char": 5220,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.745,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.585235",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 69,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Configuration Processing Flow",
      "chunk_hash": "e16c197cb47b5850",
      "content_digest": "e16c197cb47b5850",
      "chunk_length": 260,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "configuration",
          "internal",
          "config",
          "processing",
          "flow",
          "when",
          "model",
          "created",
          "its",
          "processed",
          "through",
          "several",
          "steps",
          "sources",
          "py94",
          "228",
          "https",
          "github",
          "com"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.133333
          },
          {
            "term": "configuration",
            "tf": 2,
            "weight": 0.066667
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.066667
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.066667
          },
          {
            "term": "processing",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "flow",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "when",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "created",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "its",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "processed",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "through",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "several",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "steps",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "py94",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "228",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.033333
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.033333
          }
        ],
        "unique_terms": 24,
        "total_terms": 30
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Configuration Processing Flow",
        "config",
        "configuration",
        "created",
        "flow",
        "internal",
        "its",
        "model",
        "processing",
        "pydantic",
        "when"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.745,
      "overall": 0.7816666666666666
    }
  },
  {
    "text": "## Major Configuration Options\n\nPydantic offers many configuration options that affect different aspects of model behavior.",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0008",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Major Configuration Options"
      ],
      "heading_text": "Major Configuration Options",
      "token_count": 20,
      "char_count": 123,
      "start_char": 5224,
      "end_char": 5347,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5525,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.585583",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 20,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Major Configuration Options",
      "chunk_hash": "29686c6574bc11fb",
      "content_digest": "29686c6574bc11fb",
      "chunk_length": 123,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "configuration",
          "options",
          "major",
          "pydantic",
          "offers",
          "many",
          "that",
          "affect",
          "different",
          "aspects",
          "model",
          "behavior"
        ],
        "term_weights": [
          {
            "term": "configuration",
            "tf": 2,
            "weight": 0.142857
          },
          {
            "term": "options",
            "tf": 2,
            "weight": 0.142857
          },
          {
            "term": "major",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "offers",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "many",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "affect",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "different",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "aspects",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.071429
          },
          {
            "term": "behavior",
            "tf": 1,
            "weight": 0.071429
          }
        ],
        "unique_terms": 12,
        "total_terms": 14
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Major Configuration Options",
        "affect",
        "aspects",
        "configuration",
        "different",
        "major",
        "many",
        "offers",
        "options",
        "pydantic",
        "that"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5525,
      "overall": 0.7508333333333334
    }
  },
  {
    "text": "### Serialization  These options control how models are serialized:  | Option               | Default     | Description                             | | -------------------- | ----------- | --------------------------------------- | | `serialize_by_alias` | `False`     | Serialize using field aliases           | | `use_enum_values`    | `False`     | Use enum values instead of enum members | | `ser_json_bytes`     | `'utf8'`    | Encoding for bytes in JSON              | | `ser_json_timedelta` | `'iso8601'` | Format for timedeltas in JSON           | | `ser_json_inf_nan`   | `'null'`    | How to serialize infinity and NaN       |  Sources: [pydantic/config.py592-628](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L592-L628) [pydantic/config.py1114-1138](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L1114-L1138)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0012",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Serialization"
      ],
      "heading_text": "Serialization",
      "token_count": 220,
      "char_count": 867,
      "start_char": 8176,
      "end_char": 9043,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6671084337349397,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.590433",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 220,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Serialization",
      "chunk_hash": "bce62b6ee87be6ec",
      "content_digest": "bce62b6ee87be6ec",
      "chunk_length": 867,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "json",
          "config",
          "serialize",
          "enum",
          "ser",
          "how",
          "false",
          "use",
          "values",
          "bytes",
          "for",
          "nan",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "serialization",
          "these"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 8,
            "weight": 0.094118
          },
          {
            "term": "json",
            "tf": 5,
            "weight": 0.058824
          },
          {
            "term": "config",
            "tf": 4,
            "weight": 0.047059
          },
          {
            "term": "serialize",
            "tf": 3,
            "weight": 0.035294
          },
          {
            "term": "enum",
            "tf": 3,
            "weight": 0.035294
          },
          {
            "term": "ser",
            "tf": 3,
            "weight": 0.035294
          },
          {
            "term": "how",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "false",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "values",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "bytes",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "nan",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.023529
          },
          {
            "term": "serialization",
            "tf": 1,
            "weight": 0.011765
          },
          {
            "term": "these",
            "tf": 1,
            "weight": 0.011765
          }
        ],
        "unique_terms": 53,
        "total_terms": 85
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Serialization",
        "config",
        "enum",
        "false",
        "how",
        "json",
        "pydantic",
        "ser",
        "serialize",
        "use",
        "values"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6671084337349397,
      "overall": 0.7890361445783132
    }
  },
  {
    "text": "## Config Integration with the Pydantic Core  The configuration system interacts with Pydantic's core components to control validation and serialization behavior: ``` ``` Sources: [pydantic/\\_internal/\\_config.py158-228](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L158-L228)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0014",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Config Integration with the Pydantic Core"
      ],
      "heading_text": "Config Integration with the Pydantic Core",
      "token_count": 78,
      "char_count": 312,
      "start_char": 9852,
      "end_char": 10164,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.542,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.593227",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 78,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Config Integration with the Pydantic Core",
      "chunk_hash": "4be725e8892c712c",
      "content_digest": "4be725e8892c712c",
      "chunk_length": 312,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "config",
          "with",
          "the",
          "core",
          "internal",
          "integration",
          "configuration",
          "system",
          "interacts",
          "components",
          "control",
          "validation",
          "and",
          "serialization",
          "behavior",
          "sources",
          "py158",
          "228",
          "https"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.162162
          },
          {
            "term": "config",
            "tf": 3,
            "weight": 0.081081
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "core",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.054054
          },
          {
            "term": "integration",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "configuration",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "system",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "interacts",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "components",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "control",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "serialization",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "behavior",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "py158",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "228",
            "tf": 1,
            "weight": 0.027027
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.027027
          }
        ],
        "unique_terms": 26,
        "total_terms": 37
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Config Integration with the Pydantic Core",
        "config",
        "configuration",
        "core",
        "integration",
        "interacts",
        "internal",
        "pydantic",
        "system",
        "the",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.542,
      "overall": 0.714
    }
  },
  {
    "text": "## Common Configuration Use Cases",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0015",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Common Configuration Use Cases"
      ],
      "heading_text": "Common Configuration Use Cases",
      "token_count": 5,
      "char_count": 33,
      "start_char": 10168,
      "end_char": 10201,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.593545",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 5,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Common Configuration Use Cases",
      "chunk_hash": "64b1224af7e11964",
      "content_digest": "64b1224af7e11964",
      "chunk_length": 33,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "common",
          "configuration",
          "use",
          "cases"
        ],
        "term_weights": [
          {
            "term": "common",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "configuration",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "cases",
            "tf": 1,
            "weight": 0.25
          }
        ],
        "unique_terms": 4,
        "total_terms": 4
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Common Configuration Use Cases",
        "cases",
        "common",
        "configuration",
        "use"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "overall": 0.7633333333333333
    }
  },
  {
    "text": "### Handling Extra Fields  The `extra` option controls how Pydantic handles fields not declared in the model: ``` ``` Sources: [pydantic/config.py63-156](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L63-L156)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0016",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Handling Extra Fields"
      ],
      "heading_text": "Handling Extra Fields",
      "token_count": 65,
      "char_count": 233,
      "start_char": 10203,
      "end_char": 10436,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.594621",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 65,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Handling Extra Fields",
      "chunk_hash": "a978f4604b4abfa1",
      "content_digest": "a978f4604b4abfa1",
      "chunk_length": 233,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "extra",
          "fields",
          "the",
          "config",
          "handling",
          "option",
          "controls",
          "how",
          "handles",
          "not",
          "declared",
          "model",
          "sources",
          "py63",
          "156",
          "https",
          "github",
          "com",
          "blob"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 5,
            "weight": 0.16129
          },
          {
            "term": "extra",
            "tf": 2,
            "weight": 0.064516
          },
          {
            "term": "fields",
            "tf": 2,
            "weight": 0.064516
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.064516
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.064516
          },
          {
            "term": "handling",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "option",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "controls",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "how",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "handles",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "not",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "declared",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "py63",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "156",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.032258
          },
          {
            "term": "blob",
            "tf": 1,
            "weight": 0.032258
          }
        ],
        "unique_terms": 23,
        "total_terms": 31
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Handling Extra Fields",
        "config",
        "controls",
        "extra",
        "fields",
        "handles",
        "handling",
        "how",
        "option",
        "pydantic",
        "the"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "overall": 0.6823809523809524
    }
  },
  {
    "text": "### Frozen Models  Create immutable models with `frozen=True`: ``` ``` Sources: [pydantic/config.py158-166](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L158-L166)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0019",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Frozen Models"
      ],
      "heading_text": "Frozen Models",
      "token_count": 55,
      "char_count": 188,
      "start_char": 10859,
      "end_char": 11047,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.54,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.597431",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 55,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Frozen Models",
      "chunk_hash": "bd8b03a46d16ace5",
      "content_digest": "bd8b03a46d16ace5",
      "chunk_length": 188,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "frozen",
          "models",
          "config",
          "create",
          "immutable",
          "with",
          "true",
          "sources",
          "py158",
          "166",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "l158",
          "l166"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.166667
          },
          {
            "term": "frozen",
            "tf": 2,
            "weight": 0.083333
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.083333
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.083333
          },
          {
            "term": "create",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "immutable",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "true",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "py158",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "166",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "blob",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "76ef0b08",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "l158",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "l166",
            "tf": 1,
            "weight": 0.041667
          }
        ],
        "unique_terms": 18,
        "total_terms": 24
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Frozen Models",
        "config",
        "create",
        "frozen",
        "immutable",
        "models",
        "py158",
        "pydantic",
        "sources",
        "true",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.54,
      "overall": 0.68
    }
  },
  {
    "text": "## Working with Deferred Schema Building  For large model hierarchies, you can improve startup performance with `defer_build=True`: ``` ``` Sources: [pydantic/config.py775-784](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L775-L784)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0021",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Working with Deferred Schema Building"
      ],
      "heading_text": "Working with Deferred Schema Building",
      "token_count": 67,
      "char_count": 257,
      "start_char": 11273,
      "end_char": 11530,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5614285714285714,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.599287",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 67,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Working with Deferred Schema Building",
      "chunk_hash": "7675eb20f746957a",
      "content_digest": "7675eb20f746957a",
      "chunk_length": 257,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "with",
          "config",
          "working",
          "deferred",
          "schema",
          "building",
          "for",
          "large",
          "model",
          "hierarchies",
          "you",
          "can",
          "improve",
          "startup",
          "performance",
          "defer",
          "build",
          "true",
          "sources"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.117647
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "working",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "deferred",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "schema",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "building",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "large",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "hierarchies",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "you",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "can",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "improve",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "startup",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "performance",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "defer",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "build",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "true",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.029412
          }
        ],
        "unique_terms": 29,
        "total_terms": 34
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Working with Deferred Schema Building",
        "building",
        "config",
        "deferred",
        "for",
        "large",
        "model",
        "pydantic",
        "schema",
        "with",
        "working"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5614285714285714,
      "overall": 0.7204761904761904
    }
  },
  {
    "text": "## Advanced Configuration Use Cases",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0022",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Advanced Configuration Use Cases"
      ],
      "heading_text": "Advanced Configuration Use Cases",
      "token_count": 5,
      "char_count": 35,
      "start_char": 11534,
      "end_char": 11569,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.599558",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 5,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Advanced Configuration Use Cases",
      "chunk_hash": "c4ca34cd3e92a938",
      "content_digest": "c4ca34cd3e92a938",
      "chunk_length": 35,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "advanced",
          "configuration",
          "use",
          "cases"
        ],
        "term_weights": [
          {
            "term": "advanced",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "configuration",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "use",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "cases",
            "tf": 1,
            "weight": 0.25
          }
        ],
        "unique_terms": 4,
        "total_terms": 4
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Advanced Configuration Use Cases",
        "advanced",
        "cases",
        "configuration",
        "use"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "overall": 0.7633333333333333
    }
  },
  {
    "text": "### Custom Alias Generation  Generate aliases automatically with a function: ``` ``` Sources: [pydantic/config.py361-418](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L361-L418)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0023",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Custom Alias Generation"
      ],
      "heading_text": "Custom Alias Generation",
      "token_count": 54,
      "char_count": 202,
      "start_char": 11571,
      "end_char": 11773,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5685714285714286,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.600317",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 54,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Custom Alias Generation",
      "chunk_hash": "719399beff5d5fc5",
      "content_digest": "719399beff5d5fc5",
      "chunk_length": 202,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "config",
          "custom",
          "alias",
          "generation",
          "generate",
          "aliases",
          "automatically",
          "with",
          "function",
          "sources",
          "py361",
          "418",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "l361",
          "l418"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.166667
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.083333
          },
          {
            "term": "custom",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "alias",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "generation",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "generate",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "aliases",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "automatically",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "function",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "py361",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "418",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "blob",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "76ef0b08",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "l361",
            "tf": 1,
            "weight": 0.041667
          },
          {
            "term": "l418",
            "tf": 1,
            "weight": 0.041667
          }
        ],
        "unique_terms": 20,
        "total_terms": 24
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Custom Alias Generation",
        "alias",
        "aliases",
        "automatically",
        "config",
        "custom",
        "function",
        "generate",
        "generation",
        "pydantic",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5685714285714286,
      "overall": 0.6895238095238095
    }
  },
  {
    "text": "## Best Practices  1. **Be consistent with configuration** across related models to prevent surprising behavior 2. **Document your configuration choices** in your codebase 3. **Consider validation strictness** based on your application's requirements 4. **Use `defer_build=True`** for large model hierarchies that aren't immediately used 5. **Choose appropriate `extra` handling** based on your API contract requirements 6. **Prefer `model_config`** over the deprecated class-based `Config` approach  Sources: [pydantic/\\_internal/\\_config.py31-32](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L31-L32)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0025",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Best Practices"
      ],
      "heading_text": "Best Practices",
      "token_count": 156,
      "char_count": 638,
      "start_char": 11975,
      "end_char": 12613,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7623076923076922,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.604099",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 156,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Best Practices",
      "chunk_hash": "510a28f6fecd75b4",
      "content_digest": "510a28f6fecd75b4",
      "chunk_length": 638,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "your",
          "config",
          "pydantic",
          "based",
          "configuration",
          "requirements",
          "model",
          "internal",
          "best",
          "practices",
          "consistent",
          "with",
          "across",
          "related",
          "models",
          "prevent",
          "surprising",
          "behavior",
          "document",
          "choices"
        ],
        "term_weights": [
          {
            "term": "your",
            "tf": 4,
            "weight": 0.055556
          },
          {
            "term": "config",
            "tf": 4,
            "weight": 0.055556
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.055556
          },
          {
            "term": "based",
            "tf": 3,
            "weight": 0.041667
          },
          {
            "term": "configuration",
            "tf": 2,
            "weight": 0.027778
          },
          {
            "term": "requirements",
            "tf": 2,
            "weight": 0.027778
          },
          {
            "term": "model",
            "tf": 2,
            "weight": 0.027778
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.027778
          },
          {
            "term": "best",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "practices",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "consistent",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "across",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "related",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "prevent",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "surprising",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "behavior",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "document",
            "tf": 1,
            "weight": 0.013889
          },
          {
            "term": "choices",
            "tf": 1,
            "weight": 0.013889
          }
        ],
        "unique_terms": 57,
        "total_terms": 72
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Best Practices",
        "based",
        "best",
        "config",
        "configuration",
        "internal",
        "model",
        "practices",
        "pydantic",
        "requirements",
        "your"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7623076923076922,
      "overall": 0.7874358974358974
    }
  },
  {
    "text": "## Configuration Defaults  All configuration options have sensible defaults that are used when not explicitly set: ``` ``` Sources: [pydantic/\\_internal/\\_config.py261-307](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L261-L307)  The full list of configuration options and their default values can be found in the `config_defaults` dictionary in [pydantic/\\_internal/\\_config.py261-307](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L261-L307)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0026",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Configuration Defaults"
      ],
      "heading_text": "Configuration Defaults",
      "token_count": 136,
      "char_count": 514,
      "start_char": 12615,
      "end_char": 13129,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5284615384615384,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.606181",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 136,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Configuration Defaults",
      "chunk_hash": "405391b5f6981b10",
      "content_digest": "405391b5f6981b10",
      "chunk_length": 514,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "config",
          "internal",
          "configuration",
          "defaults",
          "options",
          "py261",
          "307",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "l261",
          "l307",
          "the",
          "all",
          "have",
          "sensible",
          "that"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 8,
            "weight": 0.123077
          },
          {
            "term": "config",
            "tf": 5,
            "weight": 0.076923
          },
          {
            "term": "internal",
            "tf": 4,
            "weight": 0.061538
          },
          {
            "term": "configuration",
            "tf": 3,
            "weight": 0.046154
          },
          {
            "term": "defaults",
            "tf": 3,
            "weight": 0.046154
          },
          {
            "term": "options",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "py261",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "307",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "l261",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "l307",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "all",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "have",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "sensible",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.015385
          }
        ],
        "unique_terms": 36,
        "total_terms": 65
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "307",
        "Configuration Defaults",
        "config",
        "configuration",
        "defaults",
        "github",
        "https",
        "internal",
        "options",
        "py261",
        "pydantic"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5284615384615384,
      "overall": 0.7094871794871794
    }
  },
  {
    "text": "## Configuring Non-BaseModel Types\n\nIn addition to configuring `BaseModel` subclasses, you can also apply Pydantic configurations to other types:",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0027",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Configuring Non-BaseModel Types"
      ],
      "heading_text": "Configuring Non-BaseModel Types",
      "token_count": 31,
      "char_count": 145,
      "start_char": 13133,
      "end_char": 13278,
      "semantic_score": 0.8,
      "structural_score": 0.7,
      "retrieval_quality": 0.5584210526315789,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.606625",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 31,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Configuring Non-BaseModel Types",
      "chunk_hash": "6c0871148fbc1a7a",
      "content_digest": "6c0871148fbc1a7a",
      "chunk_length": 145,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "configuring",
          "basemodel",
          "types",
          "non",
          "addition",
          "subclasses",
          "you",
          "can",
          "also",
          "apply",
          "pydantic",
          "configurations",
          "other"
        ],
        "term_weights": [
          {
            "term": "configuring",
            "tf": 2,
            "weight": 0.125
          },
          {
            "term": "basemodel",
            "tf": 2,
            "weight": 0.125
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.125
          },
          {
            "term": "non",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "addition",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "subclasses",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "you",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "can",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "also",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "apply",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "configurations",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "other",
            "tf": 1,
            "weight": 0.0625
          }
        ],
        "unique_terms": 13,
        "total_terms": 16
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Configuring Non-BaseModel Types",
        "addition",
        "also",
        "apply",
        "basemodel",
        "can",
        "configuring",
        "non",
        "subclasses",
        "types",
        "you"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.7,
      "retrieval_quality": 0.5584210526315789,
      "overall": 0.686140350877193
    }
  },
  {
    "text": "### Dataclasses ``` ``` Sources: [tests/test\\_config.py738-760](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_config.py#L738-L760)  By effectively using Pydantic's configuration system, you can fine-tune validation, serialization, and schema generation to meet your application's specific requirements. Dismiss  Refresh this wiki  This wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0029",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Dataclasses"
      ],
      "heading_text": "Dataclasses",
      "token_count": 97,
      "char_count": 417,
      "start_char": 13427,
      "end_char": 13844,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5542857142857143,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.608600",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 97,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "Dataclasses",
      "chunk_hash": "93c69e4c03de6376",
      "content_digest": "93c69e4c03de6376",
      "chunk_length": 417,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "tests",
          "test",
          "config",
          "refresh",
          "this",
          "wiki",
          "dataclasses",
          "sources",
          "py738",
          "760",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "l738",
          "l760",
          "effectively",
          "using"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 3,
            "weight": 0.057692
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "test",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "refresh",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "wiki",
            "tf": 2,
            "weight": 0.038462
          },
          {
            "term": "dataclasses",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "py738",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "760",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "blob",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "76ef0b08",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "l738",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "l760",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "effectively",
            "tf": 1,
            "weight": 0.019231
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.019231
          }
        ],
        "unique_terms": 44,
        "total_terms": 52
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Dataclasses",
        "config",
        "dataclasses",
        "py738",
        "pydantic",
        "refresh",
        "sources",
        "test",
        "tests",
        "this",
        "wiki"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5542857142857143,
      "overall": 0.718095238095238
    }
  },
  {
    "text": "### On this page  - [Model Configuration](#model-configuration.md) - [Overview](#overview.md) - [Defining Configuration](#defining-configuration.md) - [Using \\`model\\_config\\`](#using-model_config.md) - [Configuration Inheritance](#configuration-inheritance.md) - [Class Initialization Arguments](#class-initialization-arguments.md) - [With \\`with\\_config\\` Decorator](#with-with_config-decorator.md) - [Configuration Processing Flow](#configuration-processing-flow.md) - [Major Configuration Options](#major-configuration-options.md) - [Validation Behavior](#validation-behavior.md) - [Field and Alias Handling](#field-and-alias-handling.md) - [String Processing](#string-processing.md) - [Serialization](#serialization.md) - [Performance Options](#performance-options.md) - [Config Integration with the Pydantic Core](#config-integration-with-the-pydantic-core.md) - [Common Configuration Use Cases](#common-configuration-use-cases.md) - [Handling Extra Fields](#handling-extra-fields.md) - [Strict Validation](#strict-validation.md) - [Alias Handling](#alias-handling.md) - [Frozen Models](#frozen-models.md) - [Validation on Assignment](#validation-on-assignment.md) - [Working with Deferred Schema Building](#working-with-deferred-schema-building.md) - [Advanced Configuration Use Cases](#advanced-configuration-use-cases.md) - [Custom Alias Generation](#custom-alias-generation.md) - [Custom JSON Encoding](#custom-json-encoding.md) - [Best Practices](#best-practices.md) - [Configuration Defaults](#configuration-defaults.md) - [Configuring Non-BaseModel Types](#configuring-non-basemodel-types.md) - [TypedDict](#typeddict.md) - [Dataclasses](#dataclasses.md)",
    "metadata": {
      "chunk_id": "a61a84c17fc4-0030",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "On this page"
      ],
      "heading_text": "On this page",
      "token_count": 399,
      "char_count": 1667,
      "start_char": 13849,
      "end_char": 15516,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.7152357142857143,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:06.611418",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 399,
      "document_id": "a61a84c17fc4",
      "document_name": "_pydantic_pydantic_2.3-model-configuration",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "source_filename": "_pydantic_pydantic_2.3-model-configuration.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_2.3-model-configuration.md",
      "hierarchy_path": "On this page",
      "chunk_hash": "094cfab3dfb6fb06",
      "content_digest": "094cfab3dfb6fb06",
      "chunk_length": 1667,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "configuration",
          "with",
          "config",
          "validation",
          "alias",
          "handling",
          "model",
          "processing",
          "options",
          "use",
          "cases",
          "custom",
          "overview",
          "defining",
          "using",
          "inheritance",
          "class",
          "initialization",
          "arguments",
          "decorator"
        ],
        "term_weights": [
          {
            "term": "configuration",
            "tf": 16,
            "weight": 0.098765
          },
          {
            "term": "with",
            "tf": 8,
            "weight": 0.049383
          },
          {
            "term": "config",
            "tf": 6,
            "weight": 0.037037
          },
          {
            "term": "validation",
            "tf": 6,
            "weight": 0.037037
          },
          {
            "term": "alias",
            "tf": 6,
            "weight": 0.037037
          },
          {
            "term": "handling",
            "tf": 6,
            "weight": 0.037037
          },
          {
            "term": "model",
            "tf": 4,
            "weight": 0.024691
          },
          {
            "term": "processing",
            "tf": 4,
            "weight": 0.024691
          },
          {
            "term": "options",
            "tf": 4,
            "weight": 0.024691
          },
          {
            "term": "use",
            "tf": 4,
            "weight": 0.024691
          },
          {
            "term": "cases",
            "tf": 4,
            "weight": 0.024691
          },
          {
            "term": "custom",
            "tf": 4,
            "weight": 0.024691
          },
          {
            "term": "overview",
            "tf": 2,
            "weight": 0.012346
          },
          {
            "term": "defining",
            "tf": 2,
            "weight": 0.012346
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.012346
          },
          {
            "term": "inheritance",
            "tf": 2,
            "weight": 0.012346
          },
          {
            "term": "class",
            "tf": 2,
            "weight": 0.012346
          },
          {
            "term": "initialization",
            "tf": 2,
            "weight": 0.012346
          },
          {
            "term": "arguments",
            "tf": 2,
            "weight": 0.012346
          },
          {
            "term": "decorator",
            "tf": 2,
            "weight": 0.012346
          }
        ],
        "unique_terms": 58,
        "total_terms": 162
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "On this page",
        "alias",
        "config",
        "configuration",
        "handling",
        "model",
        "options",
        "processing",
        "use",
        "validation",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.7152357142857143,
      "overall": 0.7384119047619048
    }
  }
]