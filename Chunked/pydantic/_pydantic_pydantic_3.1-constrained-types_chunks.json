[
  {
    "text": "## Constrained Types Overview  Constrained types are a key part of Pydantic's validation system. They extend basic Python types with additional validation requirements that are checked during model instantiation. ``` ``` Sources: [pydantic/types.py149-832](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L149-L832) [pydantic/types.py836-904](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L836-L904)  The constrained types in Pydantic come in two forms:  1. **Constraint Functions**: Functions like `constr()`, `conint()` that return a constrained version of a type 2. **Predefined Constrained Types**: Ready-to-use types like `PositiveInt`, `StrictStr`, etc. Since Pydantic v2, the recommended approach is to use Python's `Annotated` type with field constraints rather than the legacy constraint functions.",
    "metadata": {
      "chunk_id": "7a4d0645ad52-0001",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Constrained Types Overview"
      ],
      "heading_text": "Constrained Types Overview",
      "token_count": 212,
      "char_count": 851,
      "start_char": 3716,
      "end_char": 4567,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5158426966292134,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:12.212995",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 212,
      "document_id": "7a4d0645ad52",
      "document_name": "_pydantic_pydantic_3.1-constrained-types",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "source_filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "hierarchy_path": "Constrained Types Overview",
      "chunk_hash": "21cb9f4682e8dace",
      "content_digest": "21cb9f4682e8dace",
      "chunk_length": 851,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "types",
          "constrained",
          "the",
          "functions",
          "are",
          "validation",
          "python",
          "with",
          "that",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "constraint",
          "like",
          "type",
          "use",
          "overview"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 11,
            "weight": 0.106796
          },
          {
            "term": "types",
            "tf": 10,
            "weight": 0.097087
          },
          {
            "term": "constrained",
            "tf": 5,
            "weight": 0.048544
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "functions",
            "tf": 3,
            "weight": 0.029126
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "python",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "that",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "constraint",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "like",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "type",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "use",
            "tf": 2,
            "weight": 0.019417
          },
          {
            "term": "overview",
            "tf": 1,
            "weight": 0.009709
          }
        ],
        "unique_terms": 62,
        "total_terms": 103
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Constrained Types Overview",
        "are",
        "constrained",
        "functions",
        "pydantic",
        "python",
        "that",
        "the",
        "types",
        "validation",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5158426966292134,
      "overall": 0.7052808988764044
    }
  },
  {
    "text": "### Bytes Constraints  The `conbytes` function creates a constrained bytes type with parameters:  - `min_length`: Minimum length in bytes - `max_length`: Maximum length in bytes - `strict`: When True, input must be an actual bytes object",
    "metadata": {
      "chunk_id": "7a4d0645ad52-0007",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Bytes Constraints"
      ],
      "heading_text": "Bytes Constraints",
      "token_count": 51,
      "char_count": 237,
      "start_char": 8711,
      "end_char": 8948,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5233333333333333,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:12.226007",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 51,
      "document_id": "7a4d0645ad52",
      "document_name": "_pydantic_pydantic_3.1-constrained-types",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "source_filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "hierarchy_path": "Bytes Constraints",
      "chunk_hash": "0f27bb5696830bc2",
      "content_digest": "0f27bb5696830bc2",
      "chunk_length": 237,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "bytes",
          "length",
          "constraints",
          "the",
          "conbytes",
          "function",
          "creates",
          "constrained",
          "type",
          "with",
          "parameters",
          "min",
          "minimum",
          "max",
          "maximum",
          "strict",
          "when",
          "true",
          "input",
          "must"
        ],
        "term_weights": [
          {
            "term": "bytes",
            "tf": 5,
            "weight": 0.172414
          },
          {
            "term": "length",
            "tf": 4,
            "weight": 0.137931
          },
          {
            "term": "constraints",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "conbytes",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "function",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "creates",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "constrained",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "parameters",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "min",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "minimum",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "max",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "maximum",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "strict",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "when",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "true",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "input",
            "tf": 1,
            "weight": 0.034483
          },
          {
            "term": "must",
            "tf": 1,
            "weight": 0.034483
          }
        ],
        "unique_terms": 22,
        "total_terms": 29
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Bytes Constraints",
        "bytes",
        "conbytes",
        "constrained",
        "constraints",
        "creates",
        "function",
        "length",
        "the",
        "type",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5233333333333333,
      "overall": 0.741111111111111
    }
  },
  {
    "text": "### Using Constrained Types in Models ``` ```",
    "metadata": {
      "chunk_id": "7a4d0645ad52-0011",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Using Constrained Types in Models"
      ],
      "heading_text": "Using Constrained Types in Models",
      "token_count": 9,
      "char_count": 45,
      "start_char": 9461,
      "end_char": 9506,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5525,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:12.227471",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 9,
      "document_id": "7a4d0645ad52",
      "document_name": "_pydantic_pydantic_3.1-constrained-types",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "source_filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "hierarchy_path": "Using Constrained Types in Models",
      "chunk_hash": "e68deb650f9acc0a",
      "content_digest": "e68deb650f9acc0a",
      "chunk_length": 45,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "using",
          "constrained",
          "types",
          "models"
        ],
        "term_weights": [
          {
            "term": "using",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "constrained",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "types",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.25
          }
        ],
        "unique_terms": 4,
        "total_terms": 4
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Using Constrained Types in Models",
        "constrained",
        "models",
        "types",
        "using"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5525,
      "overall": 0.7508333333333334
    }
  },
  {
    "text": "## Best Practices",
    "metadata": {
      "chunk_id": "7a4d0645ad52-0014",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Best Practices"
      ],
      "heading_text": "Best Practices",
      "token_count": 3,
      "char_count": 17,
      "start_char": 10351,
      "end_char": 10368,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:12.229765",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 3,
      "document_id": "7a4d0645ad52",
      "document_name": "_pydantic_pydantic_3.1-constrained-types",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "source_filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "hierarchy_path": "Best Practices",
      "chunk_hash": "031679ed4ce8dee6",
      "content_digest": "031679ed4ce8dee6",
      "chunk_length": 17,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "best",
          "practices"
        ],
        "term_weights": [
          {
            "term": "best",
            "tf": 1,
            "weight": 0.5
          },
          {
            "term": "practices",
            "tf": 1,
            "weight": 0.5
          }
        ],
        "unique_terms": 2,
        "total_terms": 2
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Best Practices",
        "best",
        "practices"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "overall": 0.7633333333333333
    }
  },
  {
    "text": "### Prefer Annotated over Constraint Functions  Pydantic recommends using `Annotated` with constraints rather than the legacy constraint functions: ``` ``` The `conX` functions will be deprecated in Pydantic 3.0 in favor of the `Annotated` approach, which provides better static type checking and IDE support.",
    "metadata": {
      "chunk_id": "7a4d0645ad52-0015",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Prefer Annotated over Constraint Functions"
      ],
      "heading_text": "Prefer Annotated over Constraint Functions",
      "token_count": 65,
      "char_count": 309,
      "start_char": 10370,
      "end_char": 10679,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5354545454545454,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:12.230722",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 65,
      "document_id": "7a4d0645ad52",
      "document_name": "_pydantic_pydantic_3.1-constrained-types",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "source_filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "hierarchy_path": "Prefer Annotated over Constraint Functions",
      "chunk_hash": "041f66447c60c0ee",
      "content_digest": "041f66447c60c0ee",
      "chunk_length": 309,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "annotated",
          "functions",
          "the",
          "constraint",
          "pydantic",
          "prefer",
          "over",
          "recommends",
          "using",
          "with",
          "constraints",
          "rather",
          "than",
          "legacy",
          "conx",
          "will",
          "deprecated",
          "favor",
          "approach",
          "which"
        ],
        "term_weights": [
          {
            "term": "annotated",
            "tf": 3,
            "weight": 0.083333
          },
          {
            "term": "functions",
            "tf": 3,
            "weight": 0.083333
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.083333
          },
          {
            "term": "constraint",
            "tf": 2,
            "weight": 0.055556
          },
          {
            "term": "pydantic",
            "tf": 2,
            "weight": 0.055556
          },
          {
            "term": "prefer",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "over",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "recommends",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "constraints",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "rather",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "than",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "legacy",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "conx",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "will",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "deprecated",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "favor",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "approach",
            "tf": 1,
            "weight": 0.027778
          },
          {
            "term": "which",
            "tf": 1,
            "weight": 0.027778
          }
        ],
        "unique_terms": 28,
        "total_terms": 36
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Prefer Annotated over Constraint Functions",
        "annotated",
        "constraint",
        "functions",
        "over",
        "prefer",
        "pydantic",
        "recommends",
        "the",
        "using",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5354545454545454,
      "overall": 0.7451515151515151
    }
  },
  {
    "text": "## Testing Constrained Types  When testing models with constrained types, it's important to test both valid and invalid inputs to ensure constraints are applied correctly: ``` ``` Sources: [tests/test\\_types.py741-821](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py#L741-L821) [tests/test\\_types.py246-347](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py#L246-L347)",
    "metadata": {
      "chunk_id": "7a4d0645ad52-0017",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Testing Constrained Types"
      ],
      "heading_text": "Testing Constrained Types",
      "token_count": 108,
      "char_count": 412,
      "start_char": 10840,
      "end_char": 11252,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.55,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:12.232539",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 108,
      "document_id": "7a4d0645ad52",
      "document_name": "_pydantic_pydantic_3.1-constrained-types",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "source_filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "hierarchy_path": "Testing Constrained Types",
      "chunk_hash": "42d331df0c51b635",
      "content_digest": "42d331df0c51b635",
      "chunk_length": 412,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "types",
          "test",
          "tests",
          "pydantic",
          "testing",
          "constrained",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "when",
          "models",
          "with",
          "important",
          "both",
          "valid",
          "and",
          "invalid",
          "inputs"
        ],
        "term_weights": [
          {
            "term": "types",
            "tf": 6,
            "weight": 0.107143
          },
          {
            "term": "test",
            "tf": 5,
            "weight": 0.089286
          },
          {
            "term": "tests",
            "tf": 4,
            "weight": 0.071429
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.071429
          },
          {
            "term": "testing",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "constrained",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.035714
          },
          {
            "term": "when",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "important",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "both",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "valid",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "invalid",
            "tf": 1,
            "weight": 0.017857
          },
          {
            "term": "inputs",
            "tf": 1,
            "weight": 0.017857
          }
        ],
        "unique_terms": 34,
        "total_terms": 56
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Testing Constrained Types",
        "blob",
        "com",
        "constrained",
        "github",
        "https",
        "pydantic",
        "test",
        "testing",
        "tests",
        "types"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.55,
      "overall": 0.6833333333333332
    }
  },
  {
    "text": "## Related Features  Constrained types work well with other Pydantic features:  - **Field validators**: Apply custom validation logic beyond built-in constraints - **Type adapters**: Use constrained types with `TypeAdapter` for validation outside of models - **JSON Schema**: Constrained types generate appropriate JSON schema representations  For more information on related features, see:  - [Field System](pydantic/pydantic/2.2-field-system.md) for details on field configuration and validators - [Type Adapter](pydantic/pydantic/3.3-typeadapter.md) for using constrained types outside of models - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) for how constraints appear in JSON schemas  Dismiss  Refresh this wiki  This wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "chunk_id": "7a4d0645ad52-0018",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Related Features"
      ],
      "heading_text": "Related Features",
      "token_count": 175,
      "char_count": 817,
      "start_char": 11256,
      "end_char": 12073,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5042857142857142,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "list_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:12.233060",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 175,
      "document_id": "7a4d0645ad52",
      "document_name": "_pydantic_pydantic_3.1-constrained-types",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "source_filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "hierarchy_path": "Related Features",
      "chunk_hash": "2f75076f79d32aa2",
      "content_digest": "2f75076f79d32aa2",
      "chunk_length": 817,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "for",
          "json",
          "constrained",
          "types",
          "field",
          "schema",
          "features",
          "related",
          "with",
          "validators",
          "validation",
          "constraints",
          "type",
          "typeadapter",
          "outside",
          "models",
          "system",
          "generation",
          "refresh"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 7,
            "weight": 0.072917
          },
          {
            "term": "for",
            "tf": 5,
            "weight": 0.052083
          },
          {
            "term": "json",
            "tf": 5,
            "weight": 0.052083
          },
          {
            "term": "constrained",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "types",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "field",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "schema",
            "tf": 4,
            "weight": 0.041667
          },
          {
            "term": "features",
            "tf": 3,
            "weight": 0.03125
          },
          {
            "term": "related",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "with",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "validators",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "constraints",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "type",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "typeadapter",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "outside",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "system",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "generation",
            "tf": 2,
            "weight": 0.020833
          },
          {
            "term": "refresh",
            "tf": 2,
            "weight": 0.020833
          }
        ],
        "unique_terms": 54,
        "total_terms": 96
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Related Features",
        "constrained",
        "features",
        "field",
        "for",
        "json",
        "pydantic",
        "related",
        "schema",
        "types",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5042857142857142,
      "overall": 0.7014285714285714
    }
  },
  {
    "text": "### On this page  - [Constrained Types](#constrained-types.md) - [Constrained Types Overview](#constrained-types-overview.md) - [Numeric Constrained Types](#numeric-constrained-types.md) - [Integer Constraints](#integer-constraints.md) - [Float Constraints](#float-constraints.md) - [String Constrained Types](#string-constrained-types.md) - [Collection Constrained Types](#collection-constrained-types.md) - [Bytes Constraints](#bytes-constraints.md) - [List Constraints](#list-constraints.md) - [Set and FrozenSet Constraints](#set-and-frozenset-constraints.md) - [Usage Patterns](#usage-patterns.md) - [Using Constrained Types in Models](#using-constrained-types-in-models.md) - [Modern Approach with Annotated](#modern-approach-with-annotated.md) - [Integration with Schema Generation](#integration-with-schema-generation.md) - [Best Practices](#best-practices.md) - [Prefer Annotated over Constraint Functions](#prefer-annotated-over-constraint-functions.md) - [Common Use Cases](#common-use-cases.md) - [Testing Constrained Types](#testing-constrained-types.md) - [Related Features](#related-features.md)",
    "metadata": {
      "chunk_id": "7a4d0645ad52-0019",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "On this page"
      ],
      "heading_text": "On this page",
      "token_count": 270,
      "char_count": 1110,
      "start_char": 12075,
      "end_char": 13185,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.6950632911392405,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1536,
      "processing_timestamp": "2025-10-20T16:07:12.234665",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 270,
      "document_id": "7a4d0645ad52",
      "document_name": "_pydantic_pydantic_3.1-constrained-types",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "source_filename": "_pydantic_pydantic_3.1-constrained-types.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_3.1-constrained-types.md",
      "hierarchy_path": "On this page",
      "chunk_hash": "49fcf2dee108daab",
      "content_digest": "49fcf2dee108daab",
      "chunk_length": 1110,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1536,
      "matryoshka_dimension": 1536,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "constrained",
          "types",
          "constraints",
          "with",
          "annotated",
          "overview",
          "numeric",
          "integer",
          "float",
          "string",
          "collection",
          "bytes",
          "list",
          "set",
          "and",
          "frozenset",
          "usage",
          "patterns",
          "using",
          "models"
        ],
        "term_weights": [
          {
            "term": "constrained",
            "tf": 14,
            "weight": 0.125
          },
          {
            "term": "types",
            "tf": 14,
            "weight": 0.125
          },
          {
            "term": "constraints",
            "tf": 10,
            "weight": 0.089286
          },
          {
            "term": "with",
            "tf": 4,
            "weight": 0.035714
          },
          {
            "term": "annotated",
            "tf": 4,
            "weight": 0.035714
          },
          {
            "term": "overview",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "numeric",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "integer",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "float",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "string",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "collection",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "bytes",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "list",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "set",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "frozenset",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "usage",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "patterns",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.017857
          },
          {
            "term": "models",
            "tf": 2,
            "weight": 0.017857
          }
        ],
        "unique_terms": 39,
        "total_terms": 112
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "On this page",
        "annotated",
        "constrained",
        "constraints",
        "float",
        "integer",
        "numeric",
        "overview",
        "string",
        "types",
        "with"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.6950632911392405,
      "overall": 0.7316877637130802
    }
  }
]