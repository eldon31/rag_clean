[
  {
    "text": "### Creating Pydantic Dataclasses  The `@pydantic.dataclasses.dataclass` decorator wraps the standard library `dataclasses.dataclass` and adds validation: ``` ``` The decorator creates a custom `__init__` that validates input using a `__pydantic_validator__` attribute. The actual dataclass creation happens via `dataclasses.dataclass()` after field processing. Sources: [pydantic/dataclasses.py98-250](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L98-L250) [pydantic/\\_internal/\\_dataclasses.py85-190](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L190)",
    "metadata": {
      "chunk_id": "85af407c530e-0002",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Creating Pydantic Dataclasses"
      ],
      "heading_text": "Creating Pydantic Dataclasses",
      "token_count": 168,
      "char_count": 628,
      "start_char": 5362,
      "end_char": 5990,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5481395348837209,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.438548",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 168,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Creating Pydantic Dataclasses",
      "chunk_hash": "3802fb31884b6c00",
      "content_digest": "3802fb31884b6c00",
      "chunk_length": 628,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "dataclasses",
          "the",
          "dataclass",
          "decorator",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "internal",
          "creating",
          "wraps",
          "standard",
          "library",
          "and",
          "adds",
          "validation",
          "creates",
          "custom"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 11,
            "weight": 0.150685
          },
          {
            "term": "dataclasses",
            "tf": 8,
            "weight": 0.109589
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.054795
          },
          {
            "term": "dataclass",
            "tf": 4,
            "weight": 0.054795
          },
          {
            "term": "decorator",
            "tf": 2,
            "weight": 0.027397
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.027397
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.027397
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.027397
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.027397
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.027397
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.027397
          },
          {
            "term": "creating",
            "tf": 1,
            "weight": 0.013699
          },
          {
            "term": "wraps",
            "tf": 1,
            "weight": 0.013699
          },
          {
            "term": "standard",
            "tf": 1,
            "weight": 0.013699
          },
          {
            "term": "library",
            "tf": 1,
            "weight": 0.013699
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.013699
          },
          {
            "term": "adds",
            "tf": 1,
            "weight": 0.013699
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.013699
          },
          {
            "term": "creates",
            "tf": 1,
            "weight": 0.013699
          },
          {
            "term": "custom",
            "tf": 1,
            "weight": 0.013699
          }
        ],
        "unique_terms": 43,
        "total_terms": 73
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Creating Pydantic Dataclasses",
        "blob",
        "com",
        "dataclass",
        "dataclasses",
        "decorator",
        "github",
        "https",
        "pydantic",
        "the"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5481395348837209,
      "overall": 0.6827131782945736
    }
  },
  {
    "text": "### Configuration Options  Dataclass configuration is provided via the `config` parameter, which accepts a `ConfigDict`:  | Configuration             | Description                                                            | | ------------------------- | ---------------------------------------------------------------------- | | `validate_assignment`     | When `True`, validates field values on assignment after initialization | | `frozen`                  | Creates immutable dataclass instances                                  | | `str_max_length`          | Maximum string length for all string fields                            | | `arbitrary_types_allowed` | Allows arbitrary types that don't have Pydantic validation             |  The `frozen` parameter can be set on both the decorator and in config. The decorator value takes precedence. Sources: [pydantic/dataclasses.py99-221](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L99-L221) [tests/test\\_dataclasses.py108-130](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L108-L130)",
    "metadata": {
      "chunk_id": "85af407c530e-0003",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Configuration Options"
      ],
      "heading_text": "Configuration Options",
      "token_count": 214,
      "char_count": 1099,
      "start_char": 5995,
      "end_char": 7094,
      "semantic_score": 0.7999999999999999,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "table_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.439754",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 214,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Configuration Options",
      "chunk_hash": "b4a80c334548e19e",
      "content_digest": "b4a80c334548e19e",
      "chunk_length": 1099,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "the",
          "dataclasses",
          "configuration",
          "dataclass",
          "config",
          "parameter",
          "assignment",
          "frozen",
          "length",
          "string",
          "arbitrary",
          "types",
          "decorator",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "tests"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 7,
            "weight": 0.071429
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.040816
          },
          {
            "term": "dataclasses",
            "tf": 4,
            "weight": 0.040816
          },
          {
            "term": "configuration",
            "tf": 3,
            "weight": 0.030612
          },
          {
            "term": "dataclass",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "config",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "parameter",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "assignment",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "frozen",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "length",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "string",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "arbitrary",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "types",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "decorator",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.020408
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.020408
          }
        ],
        "unique_terms": 67,
        "total_terms": 98
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Configuration Options",
        "assignment",
        "config",
        "configuration",
        "dataclass",
        "dataclasses",
        "frozen",
        "length",
        "parameter",
        "pydantic",
        "the"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7999999999999999,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5,
      "overall": 0.7333333333333333
    }
  },
  {
    "text": "### Converting Standard Dataclasses  Existing standard library dataclasses can be wrapped to add validation without modifying the original class: ``` ``` When wrapping a standard dataclass, Pydantic creates a new subclass (not modifying the original) and processes it through the same field collection and schema generation pipeline as regular Pydantic dataclasses. Sources: [pydantic/dataclasses.py194-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L194-L206) [tests/test\\_dataclasses.py807-840](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L807-L840)",
    "metadata": {
      "chunk_id": "85af407c530e-0004",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Converting Standard Dataclasses"
      ],
      "heading_text": "Converting Standard Dataclasses",
      "token_count": 147,
      "char_count": 617,
      "start_char": 7097,
      "end_char": 7714,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5344444444444444,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.442006",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 147,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Converting Standard Dataclasses",
      "chunk_hash": "8574d6b784e433c7",
      "content_digest": "8574d6b784e433c7",
      "chunk_length": 617,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "dataclasses",
          "standard",
          "the",
          "modifying",
          "original",
          "and",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "tests",
          "test",
          "converting",
          "existing",
          "library",
          "can",
          "wrapped",
          "add"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 8,
            "weight": 0.106667
          },
          {
            "term": "dataclasses",
            "tf": 7,
            "weight": 0.093333
          },
          {
            "term": "standard",
            "tf": 3,
            "weight": 0.04
          },
          {
            "term": "the",
            "tf": 3,
            "weight": 0.04
          },
          {
            "term": "modifying",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "original",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "test",
            "tf": 2,
            "weight": 0.026667
          },
          {
            "term": "converting",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "existing",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "library",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "can",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "wrapped",
            "tf": 1,
            "weight": 0.013333
          },
          {
            "term": "add",
            "tf": 1,
            "weight": 0.013333
          }
        ],
        "unique_terms": 48,
        "total_terms": 75
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Converting Standard Dataclasses",
        "and",
        "com",
        "dataclasses",
        "github",
        "https",
        "modifying",
        "original",
        "pydantic",
        "standard",
        "the"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5344444444444444,
      "overall": 0.7114814814814814
    }
  },
  {
    "text": "### Field Collection\n\nPydantic dataclasses collect fields using `collect_dataclass_fields()`, which:\n\n1. Iterates through the dataclass MRO (Method Resolution Order) in reverse\n2. Processes `__dataclass_fields__` from each dataclass in the hierarchy\n3. Evaluates field annotations using the namespace resolver\n4. Creates `FieldInfo` instances for each field\n5. Applies typevars mapping for generic dataclasses\n\nThe process respects both `dataclasses.field()` and `pydantic.Field()` for defining field metadata.\n\nSources: [pydantic/\\_internal/\\_fields.py460-539](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L460-L539) [pydantic/\\_internal/\\_dataclasses.py65-83](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L65-L83)",
    "metadata": {
      "chunk_id": "85af407c530e-0005",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Field Collection"
      ],
      "heading_text": "Field Collection",
      "token_count": 208,
      "char_count": 792,
      "start_char": 7719,
      "end_char": 8511,
      "semantic_score": 0.6,
      "structural_score": 0.7,
      "retrieval_quality": 0.5309090909090909,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.443114",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 208,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Field Collection",
      "chunk_hash": "0d7b8c1a12ced9b1",
      "content_digest": "0d7b8c1a12ced9b1",
      "chunk_length": 792,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "field",
          "dataclasses",
          "fields",
          "dataclass",
          "the",
          "internal",
          "for",
          "collect",
          "using",
          "each",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "collection",
          "which",
          "iterates",
          "through"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 10,
            "weight": 0.106383
          },
          {
            "term": "field",
            "tf": 6,
            "weight": 0.06383
          },
          {
            "term": "dataclasses",
            "tf": 5,
            "weight": 0.053191
          },
          {
            "term": "fields",
            "tf": 5,
            "weight": 0.053191
          },
          {
            "term": "dataclass",
            "tf": 4,
            "weight": 0.042553
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.042553
          },
          {
            "term": "internal",
            "tf": 4,
            "weight": 0.042553
          },
          {
            "term": "for",
            "tf": 3,
            "weight": 0.031915
          },
          {
            "term": "collect",
            "tf": 2,
            "weight": 0.021277
          },
          {
            "term": "using",
            "tf": 2,
            "weight": 0.021277
          },
          {
            "term": "each",
            "tf": 2,
            "weight": 0.021277
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.021277
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.021277
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.021277
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.021277
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.021277
          },
          {
            "term": "collection",
            "tf": 1,
            "weight": 0.010638
          },
          {
            "term": "which",
            "tf": 1,
            "weight": 0.010638
          },
          {
            "term": "iterates",
            "tf": 1,
            "weight": 0.010638
          },
          {
            "term": "through",
            "tf": 1,
            "weight": 0.010638
          }
        ],
        "unique_terms": 53,
        "total_terms": 94
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Field Collection",
        "collect",
        "dataclass",
        "dataclasses",
        "field",
        "fields",
        "for",
        "internal",
        "pydantic",
        "the",
        "using"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.7,
      "retrieval_quality": 0.5309090909090909,
      "overall": 0.6103030303030302
    }
  },
  {
    "text": "#### Post-Init Processing  The `__post_init__` method is called after validation completes, allowing for derived field computation: ``` ``` Sources: [tests/test\\_dataclasses.py689-702](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L689-L702)",
    "metadata": {
      "chunk_id": "85af407c530e-0008",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Post-Init Processing"
      ],
      "heading_text": "Post-Init Processing",
      "token_count": 69,
      "char_count": 272,
      "start_char": 8883,
      "end_char": 9155,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.575,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.445390",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 69,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Post-Init Processing",
      "chunk_hash": "e1899653828c875b",
      "content_digest": "e1899653828c875b",
      "chunk_length": 272,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "post",
          "init",
          "tests",
          "test",
          "dataclasses",
          "pydantic",
          "processing",
          "the",
          "method",
          "called",
          "after",
          "validation",
          "completes",
          "allowing",
          "for",
          "derived",
          "field",
          "computation",
          "sources",
          "py689"
        ],
        "term_weights": [
          {
            "term": "post",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "init",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "test",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "dataclasses",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "pydantic",
            "tf": 2,
            "weight": 0.058824
          },
          {
            "term": "processing",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "method",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "called",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "after",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "completes",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "allowing",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "derived",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "field",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "computation",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.029412
          },
          {
            "term": "py689",
            "tf": 1,
            "weight": 0.029412
          }
        ],
        "unique_terms": 28,
        "total_terms": 34
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Post-Init Processing",
        "called",
        "dataclasses",
        "init",
        "method",
        "post",
        "processing",
        "pydantic",
        "test",
        "tests",
        "the"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.575,
      "overall": 0.725
    }
  },
  {
    "text": "#### Validate Assignment  When `validate_assignment=True`, field assignments after initialization are validated: ``` ``` The implementation wraps `__setattr__` with validation logic that calls `__pydantic_validator__.validate_assignment()`. Sources: [pydantic/dataclasses.py251-268](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L251-L268) [tests/test\\_dataclasses.py120-149](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L120-L149)",
    "metadata": {
      "chunk_id": "85af407c530e-0009",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Validate Assignment"
      ],
      "heading_text": "Validate Assignment",
      "token_count": 124,
      "char_count": 492,
      "start_char": 9159,
      "end_char": 9651,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5784615384615385,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.446346",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 124,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Validate Assignment",
      "chunk_hash": "7cdc42681e2831b6",
      "content_digest": "7cdc42681e2831b6",
      "chunk_length": 492,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "dataclasses",
          "validate",
          "assignment",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "tests",
          "test",
          "when",
          "true",
          "field",
          "assignments",
          "after",
          "initialization",
          "are",
          "validated",
          "the"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 7,
            "weight": 0.12069
          },
          {
            "term": "dataclasses",
            "tf": 4,
            "weight": 0.068966
          },
          {
            "term": "validate",
            "tf": 3,
            "weight": 0.051724
          },
          {
            "term": "assignment",
            "tf": 3,
            "weight": 0.051724
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.034483
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.034483
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.034483
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.034483
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.034483
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.034483
          },
          {
            "term": "test",
            "tf": 2,
            "weight": 0.034483
          },
          {
            "term": "when",
            "tf": 1,
            "weight": 0.017241
          },
          {
            "term": "true",
            "tf": 1,
            "weight": 0.017241
          },
          {
            "term": "field",
            "tf": 1,
            "weight": 0.017241
          },
          {
            "term": "assignments",
            "tf": 1,
            "weight": 0.017241
          },
          {
            "term": "after",
            "tf": 1,
            "weight": 0.017241
          },
          {
            "term": "initialization",
            "tf": 1,
            "weight": 0.017241
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.017241
          },
          {
            "term": "validated",
            "tf": 1,
            "weight": 0.017241
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.017241
          }
        ],
        "unique_terms": 38,
        "total_terms": 58
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Validate Assignment",
        "assignment",
        "blob",
        "com",
        "dataclasses",
        "github",
        "https",
        "pydantic",
        "tests",
        "validate"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5784615384615385,
      "overall": 0.6928205128205128
    }
  },
  {
    "text": "## Function Validation  The `@validate_call` decorator validates function arguments and optionally return values against type annotations. ``` ```",
    "metadata": {
      "chunk_id": "85af407c530e-0011",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Function Validation"
      ],
      "heading_text": "Function Validation",
      "token_count": 24,
      "char_count": 146,
      "start_char": 10297,
      "end_char": 10443,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5566666666666666,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.447326",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 24,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Function Validation",
      "chunk_hash": "d6f72d1989b59ad3",
      "content_digest": "d6f72d1989b59ad3",
      "chunk_length": 146,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "function",
          "validation",
          "the",
          "validate",
          "call",
          "decorator",
          "validates",
          "arguments",
          "and",
          "optionally",
          "return",
          "values",
          "against",
          "type",
          "annotations"
        ],
        "term_weights": [
          {
            "term": "function",
            "tf": 2,
            "weight": 0.125
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "validate",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "call",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "decorator",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "validates",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "arguments",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "optionally",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "return",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "values",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "against",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "type",
            "tf": 1,
            "weight": 0.0625
          },
          {
            "term": "annotations",
            "tf": 1,
            "weight": 0.0625
          }
        ],
        "unique_terms": 15,
        "total_terms": 16
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Function Validation",
        "and",
        "arguments",
        "call",
        "decorator",
        "function",
        "optionally",
        "the",
        "validate",
        "validates",
        "validation"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5566666666666666,
      "overall": 0.7522222222222222
    }
  },
  {
    "text": "### The `@validate_call` Decorator  The decorator creates a `ValidateCallWrapper` that intercepts function calls: ``` ``` The wrapper validates arguments using `ArgsKwargs` and converts them to match the function signature. Sources: [pydantic/validate\\_call\\_decorator.py57-116](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L57-L116) [pydantic/\\_internal/\\_validate\\_call.py49-90](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L49-L90)",
    "metadata": {
      "chunk_id": "85af407c530e-0012",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "The `@validate_call` Decorator"
      ],
      "heading_text": "The `@validate_call` Decorator",
      "token_count": 144,
      "char_count": 519,
      "start_char": 10446,
      "end_char": 10965,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.53375,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.448370",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 144,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "The `@validate_call` Decorator",
      "chunk_hash": "89bd633033c777a1",
      "content_digest": "89bd633033c777a1",
      "chunk_length": 519,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "validate",
          "call",
          "the",
          "decorator",
          "function",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "internal",
          "creates",
          "validatecallwrapper",
          "that",
          "intercepts",
          "calls",
          "wrapper",
          "validates",
          "arguments"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 8,
            "weight": 0.126984
          },
          {
            "term": "validate",
            "tf": 5,
            "weight": 0.079365
          },
          {
            "term": "call",
            "tf": 5,
            "weight": 0.079365
          },
          {
            "term": "the",
            "tf": 4,
            "weight": 0.063492
          },
          {
            "term": "decorator",
            "tf": 4,
            "weight": 0.063492
          },
          {
            "term": "function",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.031746
          },
          {
            "term": "creates",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "validatecallwrapper",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "intercepts",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "calls",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "wrapper",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "validates",
            "tf": 1,
            "weight": 0.015873
          },
          {
            "term": "arguments",
            "tf": 1,
            "weight": 0.015873
          }
        ],
        "unique_terms": 35,
        "total_terms": 63
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "The `@validate_call` Decorator",
        "blob",
        "call",
        "com",
        "decorator",
        "function",
        "github",
        "https",
        "pydantic",
        "the",
        "validate"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.53375,
      "overall": 0.71125
    }
  },
  {
    "text": "### Function Schema Generation  Schema generation for functions happens in `GenerateSchema.validate_call_schema()`:  1. Extracts function signature via `inspect.signature()` 2. Processes each parameter to create argument schemas 3. Handles special parameter types (VAR\\_POSITIONAL, VAR\\_KEYWORD) 4. Creates an `arguments_schema` for validation 5. Optionally creates a return schema if `validate_return=True`  The generated schema validates arguments as an `ArgsKwargs` structure that gets unpacked to call the function. Sources: [pydantic/\\_internal/\\_generate\\_schema.py1547-1651](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L1547-L1651)",
    "metadata": {
      "chunk_id": "85af407c530e-0014",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Function Schema Generation"
      ],
      "heading_text": "Function Schema Generation",
      "token_count": 163,
      "char_count": 684,
      "start_char": 11976,
      "end_char": 12660,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5384375,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.452557",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 163,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Function Schema Generation",
      "chunk_hash": "7d6d9dc3d0236c23",
      "content_digest": "7d6d9dc3d0236c23",
      "chunk_length": 684,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "schema",
          "pydantic",
          "function",
          "generation",
          "for",
          "validate",
          "call",
          "signature",
          "parameter",
          "var",
          "creates",
          "arguments",
          "return",
          "the",
          "internal",
          "generate",
          "functions",
          "happens",
          "generateschema",
          "extracts"
        ],
        "term_weights": [
          {
            "term": "schema",
            "tf": 8,
            "weight": 0.103896
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.051948
          },
          {
            "term": "function",
            "tf": 3,
            "weight": 0.038961
          },
          {
            "term": "generation",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "for",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "validate",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "call",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "signature",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "parameter",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "var",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "creates",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "arguments",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "return",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "internal",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "generate",
            "tf": 2,
            "weight": 0.025974
          },
          {
            "term": "functions",
            "tf": 1,
            "weight": 0.012987
          },
          {
            "term": "happens",
            "tf": 1,
            "weight": 0.012987
          },
          {
            "term": "generateschema",
            "tf": 1,
            "weight": 0.012987
          },
          {
            "term": "extracts",
            "tf": 1,
            "weight": 0.012987
          }
        ],
        "unique_terms": 52,
        "total_terms": 77
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Function Schema Generation",
        "call",
        "for",
        "function",
        "generation",
        "parameter",
        "pydantic",
        "schema",
        "signature",
        "validate",
        "var"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5384375,
      "overall": 0.6794791666666667
    }
  },
  {
    "text": "### Configuration  Configuration is passed via the `config` parameter: ``` ``` The configuration affects both argument and return value validation. Sources: [pydantic/validate\\_call\\_decorator.py57-116](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L57-L116) [tests/test\\_validate\\_call.py618-641](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L618-L641)",
    "metadata": {
      "chunk_id": "85af407c530e-0016",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Configuration"
      ],
      "heading_text": "Configuration",
      "token_count": 114,
      "char_count": 428,
      "start_char": 13156,
      "end_char": 13584,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5378260869565217,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.454627",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 114,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Configuration",
      "chunk_hash": "dfb4fb72feeffab3",
      "content_digest": "dfb4fb72feeffab3",
      "chunk_length": 428,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "validate",
          "call",
          "configuration",
          "the",
          "decorator",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "tests",
          "test",
          "passed",
          "via",
          "config",
          "parameter",
          "affects",
          "both",
          "argument"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.109091
          },
          {
            "term": "validate",
            "tf": 4,
            "weight": 0.072727
          },
          {
            "term": "call",
            "tf": 4,
            "weight": 0.072727
          },
          {
            "term": "configuration",
            "tf": 3,
            "weight": 0.054545
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "decorator",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "test",
            "tf": 2,
            "weight": 0.036364
          },
          {
            "term": "passed",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "via",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "config",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "parameter",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "affects",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "both",
            "tf": 1,
            "weight": 0.018182
          },
          {
            "term": "argument",
            "tf": 1,
            "weight": 0.018182
          }
        ],
        "unique_terms": 33,
        "total_terms": 55
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Configuration",
        "blob",
        "call",
        "com",
        "configuration",
        "decorator",
        "github",
        "https",
        "pydantic",
        "the",
        "validate"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5378260869565217,
      "overall": 0.6792753623188407
    }
  },
  {
    "text": "### Supported Function Types  The decorator supports:  - Regular functions - Async functions - Methods (instance, class, static) - Lambda functions - `functools.partial` objects  It does not support:  - Built-in functions (e.g., `breakpoint`) - Classes (use on `__init__` or `__new__` instead) - Non-callable objects  Sources: [pydantic/validate\\_call\\_decorator.py24-95](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L24-L95) [tests/test\\_validate\\_call.py42-97](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L42-L97)",
    "metadata": {
      "chunk_id": "85af407c530e-0017",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Supported Function Types"
      ],
      "heading_text": "Supported Function Types",
      "token_count": 168,
      "char_count": 592,
      "start_char": 13589,
      "end_char": 14181,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5197872340425532,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.456226",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 168,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Supported Function Types",
      "chunk_hash": "1dfd0b2b30ea0b81",
      "content_digest": "1dfd0b2b30ea0b81",
      "chunk_length": 592,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "functions",
          "validate",
          "call",
          "decorator",
          "objects",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "tests",
          "test",
          "supported",
          "function",
          "types",
          "the",
          "supports",
          "regular",
          "async"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.085714
          },
          {
            "term": "functions",
            "tf": 4,
            "weight": 0.057143
          },
          {
            "term": "validate",
            "tf": 4,
            "weight": 0.057143
          },
          {
            "term": "call",
            "tf": 4,
            "weight": 0.057143
          },
          {
            "term": "decorator",
            "tf": 3,
            "weight": 0.042857
          },
          {
            "term": "objects",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "tests",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "test",
            "tf": 2,
            "weight": 0.028571
          },
          {
            "term": "supported",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "function",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "types",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "the",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "supports",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "regular",
            "tf": 1,
            "weight": 0.014286
          },
          {
            "term": "async",
            "tf": 1,
            "weight": 0.014286
          }
        ],
        "unique_terms": 46,
        "total_terms": 70
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Supported Function Types",
        "blob",
        "call",
        "com",
        "decorator",
        "functions",
        "github",
        "https",
        "objects",
        "pydantic",
        "validate"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5197872340425532,
      "overall": 0.706595744680851
    }
  },
  {
    "text": "## RootModel and Computed Fields",
    "metadata": {
      "chunk_id": "85af407c530e-0018",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "RootModel and Computed Fields"
      ],
      "heading_text": "RootModel and Computed Fields",
      "token_count": 7,
      "char_count": 32,
      "start_char": 14183,
      "end_char": 14215,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "chunking_strategy": "hybrid_adaptive_semchunk",
      "content_type": "prose_section",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.456503",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 7,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "RootModel and Computed Fields",
      "chunk_hash": "52880ee6f71681e0",
      "content_digest": "52880ee6f71681e0",
      "chunk_length": 32,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "rootmodel",
          "and",
          "computed",
          "fields"
        ],
        "term_weights": [
          {
            "term": "rootmodel",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "computed",
            "tf": 1,
            "weight": 0.25
          },
          {
            "term": "fields",
            "tf": 1,
            "weight": 0.25
          }
        ],
        "unique_terms": 4,
        "total_terms": 4
      },
      "modal_hint": "prose",
      "content_flags": {
        "has_code_block": false,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "RootModel and Computed Fields",
        "and",
        "computed",
        "fields",
        "rootmodel"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.59,
      "overall": 0.7633333333333333
    }
  },
  {
    "text": "### RootModel  The `RootModel` class validates a single root-level value rather than multiple fields. It's a `BaseModel` subclass with a single field named `root`. **RootModel Validation Flow** ``` ``` The `RootModel` class:  - Sets `__pydantic_root_model__ = True` - Has a single field `root: RootModelRootType` - Does not support `model_config['extra']` - Accepts either positional or keyword arguments in `__init__`  Sources: [pydantic/root\\_model.py32-86](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L86)",
    "metadata": {
      "chunk_id": "85af407c530e-0019",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "RootModel"
      ],
      "heading_text": "RootModel",
      "token_count": 148,
      "char_count": 542,
      "start_char": 14217,
      "end_char": 14759,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.53,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.458320",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 148,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "RootModel",
      "chunk_hash": "1a42c6cc6c79d41e",
      "content_digest": "1a42c6cc6c79d41e",
      "chunk_length": 542,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "root",
          "pydantic",
          "rootmodel",
          "model",
          "single",
          "the",
          "class",
          "field",
          "validates",
          "level",
          "value",
          "rather",
          "than",
          "multiple",
          "fields",
          "basemodel",
          "subclass",
          "with",
          "named",
          "validation"
        ],
        "term_weights": [
          {
            "term": "root",
            "tf": 6,
            "weight": 0.092308
          },
          {
            "term": "pydantic",
            "tf": 5,
            "weight": 0.076923
          },
          {
            "term": "rootmodel",
            "tf": 4,
            "weight": 0.061538
          },
          {
            "term": "model",
            "tf": 4,
            "weight": 0.061538
          },
          {
            "term": "single",
            "tf": 3,
            "weight": 0.046154
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "class",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "field",
            "tf": 2,
            "weight": 0.030769
          },
          {
            "term": "validates",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "level",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "value",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "rather",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "than",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "multiple",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "fields",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "basemodel",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "subclass",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "named",
            "tf": 1,
            "weight": 0.015385
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.015385
          }
        ],
        "unique_terms": 45,
        "total_terms": 65
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "RootModel",
        "class",
        "field",
        "level",
        "model",
        "pydantic",
        "root",
        "rootmodel",
        "single",
        "the",
        "validates"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.53,
      "overall": 0.71
    }
  },
  {
    "text": "#### Creating RootModels ``` ``` The root type is specified as a generic parameter. The model validates that the input matches the root type. Sources: [pydantic/root\\_model.py32-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L69)",
    "metadata": {
      "chunk_id": "85af407c530e-0020",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Creating RootModels"
      ],
      "heading_text": "Creating RootModels",
      "token_count": 70,
      "char_count": 264,
      "start_char": 14764,
      "end_char": 15028,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5323076923076923,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.459275",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 70,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Creating RootModels",
      "chunk_hash": "5eae4cb00923d5c5",
      "content_digest": "5eae4cb00923d5c5",
      "chunk_length": 264,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "the",
          "root",
          "pydantic",
          "model",
          "type",
          "creating",
          "rootmodels",
          "specified",
          "generic",
          "parameter",
          "validates",
          "that",
          "input",
          "matches",
          "sources",
          "py32",
          "https",
          "github",
          "com",
          "blob"
        ],
        "term_weights": [
          {
            "term": "the",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "root",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.114286
          },
          {
            "term": "model",
            "tf": 3,
            "weight": 0.085714
          },
          {
            "term": "type",
            "tf": 2,
            "weight": 0.057143
          },
          {
            "term": "creating",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "rootmodels",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "specified",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "generic",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "parameter",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "validates",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "input",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "matches",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "py32",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "https",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "github",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "com",
            "tf": 1,
            "weight": 0.028571
          },
          {
            "term": "blob",
            "tf": 1,
            "weight": 0.028571
          }
        ],
        "unique_terms": 23,
        "total_terms": 35
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Creating RootModels",
        "creating",
        "generic",
        "model",
        "parameter",
        "pydantic",
        "root",
        "rootmodels",
        "specified",
        "the",
        "type"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5323076923076923,
      "overall": 0.6774358974358975
    }
  },
  {
    "text": "### Computed Fields  The `@computed_field` decorator creates dynamic properties that appear in serialization but are not part of the model's validated fields. **Computed Field Lifecycle** ``` ``` Computed fields:  - Are evaluated during serialization, not validation - Appear in `model_dump()` and `model_dump_json()` output - Can be cached with `@cached_property` - Support custom serializers via `@field_serializer`  Sources: [pydantic/fields.py745-894](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L745-L894)",
    "metadata": {
      "chunk_id": "85af407c530e-0022",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Computed Fields"
      ],
      "heading_text": "Computed Fields",
      "token_count": 128,
      "char_count": 536,
      "start_char": 15480,
      "end_char": 16016,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5373684210526316,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.463642",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 128,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Computed Fields",
      "chunk_hash": "9250dcae74a4fdbc",
      "content_digest": "9250dcae74a4fdbc",
      "chunk_length": 536,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "fields",
          "computed",
          "pydantic",
          "field",
          "model",
          "the",
          "appear",
          "serialization",
          "are",
          "not",
          "dump",
          "cached",
          "decorator",
          "creates",
          "dynamic",
          "properties",
          "that",
          "but",
          "part",
          "validated"
        ],
        "term_weights": [
          {
            "term": "fields",
            "tf": 5,
            "weight": 0.075758
          },
          {
            "term": "computed",
            "tf": 4,
            "weight": 0.060606
          },
          {
            "term": "pydantic",
            "tf": 4,
            "weight": 0.060606
          },
          {
            "term": "field",
            "tf": 3,
            "weight": 0.045455
          },
          {
            "term": "model",
            "tf": 3,
            "weight": 0.045455
          },
          {
            "term": "the",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "appear",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "serialization",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "are",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "not",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "dump",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "cached",
            "tf": 2,
            "weight": 0.030303
          },
          {
            "term": "decorator",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "creates",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "dynamic",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "properties",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "but",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "part",
            "tf": 1,
            "weight": 0.015152
          },
          {
            "term": "validated",
            "tf": 1,
            "weight": 0.015152
          }
        ],
        "unique_terms": 45,
        "total_terms": 66
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Computed Fields",
        "appear",
        "are",
        "computed",
        "field",
        "fields",
        "model",
        "not",
        "pydantic",
        "serialization",
        "the"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5373684210526316,
      "overall": 0.7124561403508771
    }
  },
  {
    "text": "## Plugin System  Pydantic provides a plugin system that allows you to customize validation, serialization, and other behaviors. This is particularly useful for integrating Pydantic with other libraries or adding custom validation logic. ``` ```",
    "metadata": {
      "chunk_id": "85af407c530e-0026",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Plugin System"
      ],
      "heading_text": "Plugin System",
      "token_count": 44,
      "char_count": 245,
      "start_char": 16887,
      "end_char": 17132,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.468503",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 44,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Plugin System",
      "chunk_hash": "f46fcc3e1cfb8674",
      "content_digest": "f46fcc3e1cfb8674",
      "chunk_length": 245,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "plugin",
          "system",
          "pydantic",
          "validation",
          "other",
          "provides",
          "that",
          "allows",
          "you",
          "customize",
          "serialization",
          "and",
          "behaviors",
          "this",
          "particularly",
          "useful",
          "for",
          "integrating",
          "with",
          "libraries"
        ],
        "term_weights": [
          {
            "term": "plugin",
            "tf": 2,
            "weight": 0.071429
          },
          {
            "term": "system",
            "tf": 2,
            "weight": 0.071429
          },
          {
            "term": "pydantic",
            "tf": 2,
            "weight": 0.071429
          },
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.071429
          },
          {
            "term": "other",
            "tf": 2,
            "weight": 0.071429
          },
          {
            "term": "provides",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "that",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "allows",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "you",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "customize",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "serialization",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "behaviors",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "this",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "particularly",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "useful",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "integrating",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "with",
            "tf": 1,
            "weight": 0.035714
          },
          {
            "term": "libraries",
            "tf": 1,
            "weight": 0.035714
          }
        ],
        "unique_terms": 23,
        "total_terms": 28
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Plugin System",
        "allows",
        "customize",
        "other",
        "plugin",
        "provides",
        "pydantic",
        "system",
        "that",
        "validation",
        "you"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "overall": 0.7157142857142856
    }
  },
  {
    "text": "### Validation Handlers  Plugins can provide handlers for different validation methods: ``` ```",
    "metadata": {
      "chunk_id": "85af407c530e-0028",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Validation Handlers"
      ],
      "heading_text": "Validation Handlers",
      "token_count": 15,
      "char_count": 95,
      "start_char": 17167,
      "end_char": 17262,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5207692307692308,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.469147",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 15,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Validation Handlers",
      "chunk_hash": "89cd8aa92f23000a",
      "content_digest": "89cd8aa92f23000a",
      "chunk_length": 95,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "validation",
          "handlers",
          "plugins",
          "can",
          "provide",
          "for",
          "different",
          "methods"
        ],
        "term_weights": [
          {
            "term": "validation",
            "tf": 2,
            "weight": 0.2
          },
          {
            "term": "handlers",
            "tf": 2,
            "weight": 0.2
          },
          {
            "term": "plugins",
            "tf": 1,
            "weight": 0.1
          },
          {
            "term": "can",
            "tf": 1,
            "weight": 0.1
          },
          {
            "term": "provide",
            "tf": 1,
            "weight": 0.1
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.1
          },
          {
            "term": "different",
            "tf": 1,
            "weight": 0.1
          },
          {
            "term": "methods",
            "tf": 1,
            "weight": 0.1
          }
        ],
        "unique_terms": 8,
        "total_terms": 10
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "Validation Handlers",
        "can",
        "different",
        "for",
        "handlers",
        "methods",
        "plugins",
        "provide",
        "validation"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5207692307692308,
      "overall": 0.7402564102564102
    }
  },
  {
    "text": "### Using Plugins  Plugins are configured through model config: ``` ``` Sources: [pydantic/plugin/\\_\\_init\\_\\_.py38-71](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L38-L71) [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py)",
    "metadata": {
      "chunk_id": "85af407c530e-0029",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "Using Plugins"
      ],
      "heading_text": "Using Plugins",
      "token_count": 101,
      "char_count": 337,
      "start_char": 17265,
      "end_char": 17602,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.470167",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 101,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "Using Plugins",
      "chunk_hash": "cd2287d0fe0afa30",
      "content_digest": "cd2287d0fe0afa30",
      "chunk_length": 337,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "plugin",
          "plugins",
          "init",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "schema",
          "validator",
          "using",
          "are",
          "configured",
          "through",
          "model",
          "config",
          "sources",
          "py38",
          "l38"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 8,
            "weight": 0.2
          },
          {
            "term": "plugin",
            "tf": 4,
            "weight": 0.1
          },
          {
            "term": "plugins",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "init",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "schema",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "validator",
            "tf": 2,
            "weight": 0.05
          },
          {
            "term": "using",
            "tf": 1,
            "weight": 0.025
          },
          {
            "term": "are",
            "tf": 1,
            "weight": 0.025
          },
          {
            "term": "configured",
            "tf": 1,
            "weight": 0.025
          },
          {
            "term": "through",
            "tf": 1,
            "weight": 0.025
          },
          {
            "term": "model",
            "tf": 1,
            "weight": 0.025
          },
          {
            "term": "config",
            "tf": 1,
            "weight": 0.025
          },
          {
            "term": "sources",
            "tf": 1,
            "weight": 0.025
          },
          {
            "term": "py38",
            "tf": 1,
            "weight": 0.025
          },
          {
            "term": "l38",
            "tf": 1,
            "weight": 0.025
          }
        ],
        "unique_terms": 21,
        "total_terms": 40
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "76ef0b08",
        "Using Plugins",
        "blob",
        "com",
        "github",
        "https",
        "init",
        "plugin",
        "plugins",
        "pydantic",
        "schema"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5471428571428572,
      "overall": 0.6823809523809524
    }
  },
  {
    "text": "### FastAPI Integration  FastAPI leverages Pydantic models for request validation and OpenAPI schema generation: ``` ```",
    "metadata": {
      "chunk_id": "85af407c530e-0031",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "FastAPI Integration"
      ],
      "heading_text": "FastAPI Integration",
      "token_count": 24,
      "char_count": 120,
      "start_char": 17747,
      "end_char": 17867,
      "semantic_score": 0.8,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5525,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.470964",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 24,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "FastAPI Integration",
      "chunk_hash": "1ea22d8a40be95c8",
      "content_digest": "1ea22d8a40be95c8",
      "chunk_length": 120,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "fastapi",
          "integration",
          "leverages",
          "pydantic",
          "models",
          "for",
          "request",
          "validation",
          "and",
          "openapi",
          "schema",
          "generation"
        ],
        "term_weights": [
          {
            "term": "fastapi",
            "tf": 2,
            "weight": 0.153846
          },
          {
            "term": "integration",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "leverages",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "pydantic",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "models",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "for",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "request",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "validation",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "and",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "openapi",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "schema",
            "tf": 1,
            "weight": 0.076923
          },
          {
            "term": "generation",
            "tf": 1,
            "weight": 0.076923
          }
        ],
        "unique_terms": 12,
        "total_terms": 13
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "FastAPI Integration",
        "and",
        "fastapi",
        "for",
        "integration",
        "leverages",
        "models",
        "openapi",
        "pydantic",
        "request",
        "validation"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.8,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5525,
      "overall": 0.7508333333333334
    }
  },
  {
    "text": "### ORM Integration  Pydantic models can work with ORMs using `from_attributes`: ``` ``` These integrations showcase Pydantic's versatility and how it can be used as a validation layer in various Python applications and frameworks. Sources: [tests/test\\_type\\_adapter.py385-430](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L385-L430) [tests/test\\_validate\\_call.py385-430](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L385-L430)  Dismiss  Refresh this wiki  This wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "chunk_id": "85af407c530e-0033",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "ORM Integration"
      ],
      "heading_text": "ORM Integration",
      "token_count": 151,
      "char_count": 596,
      "start_char": 17948,
      "end_char": 18544,
      "semantic_score": 0.7,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5560377358490566,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.473085",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 151,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "ORM Integration",
      "chunk_hash": "c8de94381f5335ec",
      "content_digest": "c8de94381f5335ec",
      "chunk_length": 596,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "pydantic",
          "tests",
          "test",
          "can",
          "and",
          "type",
          "adapter",
          "py385",
          "430",
          "https",
          "github",
          "com",
          "blob",
          "76ef0b08",
          "l385",
          "l430",
          "validate",
          "call",
          "refresh",
          "this"
        ],
        "term_weights": [
          {
            "term": "pydantic",
            "tf": 6,
            "weight": 0.075
          },
          {
            "term": "tests",
            "tf": 4,
            "weight": 0.05
          },
          {
            "term": "test",
            "tf": 4,
            "weight": 0.05
          },
          {
            "term": "can",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "and",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "type",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "adapter",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "py385",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "430",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "https",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "github",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "com",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "blob",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "76ef0b08",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "l385",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "l430",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "validate",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "call",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "refresh",
            "tf": 2,
            "weight": 0.025
          },
          {
            "term": "this",
            "tf": 2,
            "weight": 0.025
          }
        ],
        "unique_terms": 51,
        "total_terms": 80
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "430",
        "ORM Integration",
        "adapter",
        "and",
        "can",
        "https",
        "py385",
        "pydantic",
        "test",
        "tests",
        "type"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.7,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5560377358490566,
      "overall": 0.7186792452830187
    }
  },
  {
    "text": "### On this page  - [Advanced Features](#advanced-features.md) - [Dataclass Support](#dataclass-support.md) - [Creating Pydantic Dataclasses](#creating-pydantic-dataclasses.md) - [Configuration Options](#configuration-options.md) - [Converting Standard Dataclasses](#converting-standard-dataclasses.md) - [Field Collection](#field-collection.md) - [Dataclass-Specific Features](#dataclass-specific-features.md) - [InitVar Support](#initvar-support.md) - [Post-Init Processing](#post-init-processing.md) - [Validate Assignment](#validate-assignment.md) - [Schema Generation](#schema-generation.md) - [Function Validation](#function-validation.md) - [The \\`@validate\\_call\\` Decorator](#the-validate_call-decorator.md) - [ValidateCallWrapper Implementation](#validatecallwrapper-implementation.md) - [Function Schema Generation](#function-schema-generation.md) - [Validating Return Values](#validating-return-values.md) - [Configuration](#configuration.md) - [Supported Function Types](#supported-function-types.md) - [RootModel and Computed Fields](#rootmodel-and-computed-fields.md) - [RootModel](#rootmodel.md) - [Creating RootModels](#creating-rootmodels.md) - [Serialization](#serialization.md) - [Computed Fields](#computed-fields.md) - [Basic Usage](#basic-usage.md) - [JSON Schema](#json-schema.md) - [Return Type Annotation](#return-type-annotation.md) - [Plugin System](#plugin-system.md) - [Creating a Plugin](#creating-a-plugin.md) - [Validation Handlers](#validation-handlers.md) - [Using Plugins](#using-plugins.md) - [Integration with Other Libraries](#integration-with-other-libraries.md) - [FastAPI Integration](#fastapi-integration.md) - [Dataframe Validation](#dataframe-validation.md) - [ORM Integration](#orm-integration.md)",
    "metadata": {
      "chunk_id": "85af407c530e-0034",
      "source_file": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "filename": "_pydantic_pydantic_6-advanced-features.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "document_level": 1,
      "parent_chunk_id": null,
      "child_chunk_ids": [],
      "section_path": [
        "On this page"
      ],
      "heading_text": "On this page",
      "token_count": 423,
      "char_count": 1743,
      "start_char": 18549,
      "end_char": 20292,
      "semantic_score": 0.6,
      "structural_score": 0.8999999999999999,
      "retrieval_quality": 0.5329869565217391,
      "chunking_strategy": "hybrid_adaptive_structural",
      "content_type": "code_block",
      "embedding_model": "jina-code-embeddings-1.5b",
      "embedding_dimension": 1024,
      "processing_timestamp": "2025-10-20T18:30:07.476575",
      "model_aware_chunking": true,
      "within_token_limit": true,
      "estimated_tokens": 423,
      "document_id": "85af407c530e",
      "document_name": "_pydantic_pydantic_6-advanced-features",
      "source_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "source_filename": "_pydantic_pydantic_6-advanced-features.md",
      "source_directory": "Docs\\pydantic",
      "relative_path": "Docs\\pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "hierarchy_path": "On this page",
      "chunk_hash": "7349afc9dc69d07d",
      "content_digest": "7349afc9dc69d07d",
      "chunk_length": 1743,
      "payload_version": "1.3",
      "collection_hints": [
        "pydantic"
      ],
      "target_model": "jina-code-embeddings-1.5b",
      "chunker_version": "v5_unified",
      "chunk_size_tokens": 26214,
      "chunk_overlap_tokens": 2621,
      "chunk_size_chars": 104856,
      "chunk_overlap_chars": 10484,
      "safety_margin": 0.8,
      "model_hf_id": "jinaai/jina-code-embeddings-1.5b",
      "model_max_tokens": 32768,
      "model_vector_dim": 1024,
      "recommended_batch_size": 16,
      "backend": "pytorch",
      "memory_efficient": true,
      "query_prefix": "Encode this code snippet for semantic retrieval: ",
      "sparse_features": {
        "version": "1.0",
        "weighting": "tf-normalized",
        "top_terms": [
          "creating",
          "schema",
          "function",
          "validation",
          "integration",
          "features",
          "dataclass",
          "support",
          "dataclasses",
          "configuration",
          "validate",
          "generation",
          "return",
          "rootmodel",
          "computed",
          "fields",
          "plugin",
          "advanced",
          "pydantic",
          "options"
        ],
        "term_weights": [
          {
            "term": "creating",
            "tf": 6,
            "weight": 0.0375
          },
          {
            "term": "schema",
            "tf": 6,
            "weight": 0.0375
          },
          {
            "term": "function",
            "tf": 6,
            "weight": 0.0375
          },
          {
            "term": "validation",
            "tf": 6,
            "weight": 0.0375
          },
          {
            "term": "integration",
            "tf": 6,
            "weight": 0.0375
          },
          {
            "term": "features",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "dataclass",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "support",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "dataclasses",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "configuration",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "validate",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "generation",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "return",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "rootmodel",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "computed",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "fields",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "plugin",
            "tf": 4,
            "weight": 0.025
          },
          {
            "term": "advanced",
            "tf": 2,
            "weight": 0.0125
          },
          {
            "term": "pydantic",
            "tf": 2,
            "weight": 0.0125
          },
          {
            "term": "options",
            "tf": 2,
            "weight": 0.0125
          }
        ],
        "unique_terms": 59,
        "total_terms": 160
      },
      "modal_hint": "code",
      "content_flags": {
        "has_code_block": true,
        "has_table": false,
        "has_list": false,
        "has_json": false,
        "has_formula": false
      },
      "search_keywords": [
        "On this page",
        "configuration",
        "creating",
        "dataclass",
        "dataclasses",
        "features",
        "function",
        "integration",
        "schema",
        "support",
        "validation"
      ],
      "collection_name": "pydantic"
    },
    "advanced_scores": {
      "semantic": 0.6,
      "structural": 0.8999999999999999,
      "retrieval_quality": 0.5329869565217391,
      "overall": 0.6776623188405798
    }
  }
]