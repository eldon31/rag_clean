[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "universal-file-to-knowledge"
version = "0.1.0"
description = "Universal File-to-Knowledge Converter - Turn any file into LLM-ready knowledge"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "LLM Knowledge Creator Team"}
]
keywords = ["rag", "knowledge-graph", "embeddings", "vector-database", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    # Core framework
    "pydantic>=2.0",
    "pydantic-ai>=0.7.4",
    "pydantic-settings>=2.0.0",
    
    # Document processing (CRITICAL - Docling for multi-format support)
    "docling[vlm]>=2.55.0",
    "transformers>=4.30.0",  # Required for Docling HybridChunker tokenizer
    
    # Code graph analysis (replaces Graphiti for code-specific knowledge graphs)

    
    # MCP Server framework
    "mcp>=0.9.0",
    
    # API framework
    "fastapi>=0.115.13",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "sse-starlette>=1.6.5",
    
    # Vector database (Qdrant only - production-ready with quantization)
    "qdrant-client>=1.7.0",
    
    # Embeddings & Reranking (sentence-transformers for both)
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",  # Required for sentence-transformers
    
    # ONNX Runtime for 2-4x faster CPU inference (optional optimization)
    "optimum[onnxruntime]>=1.14.0",
    "onnxruntime>=1.16.0",
    
    # LLM providers
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    
    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "black>=23.0.0",
    
    # Type stubs
    "types-click",
    "types-requests",
]

[project.scripts]
ufk = "src.cli.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-v",
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "W",   # pycodestyle warnings
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = []

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["S101"]      # Allow assert in tests

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "docling.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
