[
  "## Overview FastMCP provides three primary mechanisms for server composition: - **Mounting** - Live delegation to child servers with automatic prefix handling - **Importing** - Static copying of components from other servers - **Proxying** - Transparent forwarding to remote MCP-compliant servers All composition methods support automatic prefixing of component names to avoid conflicts and provide clear namespacing.",
  "# Server Composition and Proxying Relevant source files - [src/fastmcp/\\_\\_init\\_\\_.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py) - [src/fastmcp/client/client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py) - [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) - [src/fastmcp/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/mcp_config.py) - [src/fastmcp/server/proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py) - [src/fastmcp/server/server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py) - [src/fastmcp/settings.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py) - [src/fastmcp/utilities/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/mcp_config.py) - [tests/client/test\\_client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_client.py) - [tests/client/test\\_stdio.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_stdio.py) - [tests/server/test\\_import\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py) - [tests/server/test\\_mount.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py) - [tests/server/test\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py) Server composition and proxying enables FastMCP servers to combine functionality from multiple other servers, either through live delegation (mounting) or static copying (importing). This system allows complex applications to be built by composing smaller, focused servers while maintaining clean separation of concerns. For information about the core FastMCP server architecture, see [2](jlowin/fastmcp/2-fastmcp-server-core.md). For details about component management and registration, see [2.1](jlowin/fastmcp/2.1-component-system-architecture.md).",
  "### Custom CDN Implementation To use alternative CDNs, applications must disable default documentation endpoints and create custom path operations. ``` ``` **Custom CDN Setup Flow** Sources: [docs\\_src/custom\\_docs\\_ui/tutorial001.py8](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L8-L8) [docs\\_src/custom\\_docs\\_ui/tutorial001.py11-19](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L11-L19) [docs\\_src/custom\\_docs\\_ui/tutorial001.py27-33](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L27-L33)",
  "# Dependency Injection Relevant source files - [docs/en/docs/alternatives.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/alternatives.md) - [docs/en/docs/tutorial/body.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/body.md) - [docs/en/docs/tutorial/dependencies/classes-as-dependencies.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md) - [docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md) - [docs/en/docs/tutorial/dependencies/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/index.md) - [docs/en/docs/tutorial/dependencies/sub-dependencies.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/sub-dependencies.md) - [docs/en/docs/tutorial/path-params-numeric-validations.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/path-params-numeric-validations.md) - [docs/en/docs/tutorial/query-params-str-validations.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/constants.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/constants.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_get\\_request\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_get_request_body.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) This document covers FastAPI's dependency injection system, which provides automatic resolution and injection of dependencies into path operation functions. The system analyzes function signatures to identify dependencies, validates parameters, and manages the lifecycle of dependency instances including caching and cleanup.",
  "# Background Tasks Relevant source files - [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs/en/docs/tutorial/background-tasks.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md) - [docs/en/docs/tutorial/extra-data-types.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/extra-data-types.md) - [docs/en/docs/tutorial/handling-errors.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md) - [docs/en/docs/tutorial/security/first-steps.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/first-steps.md) - [docs/en/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/oauth2-jwt.md) - [docs/en/docs/tutorial/security/simple-oauth2.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/simple-oauth2.md) - [docs/en/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md) - [docs/ja/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/tutorial/security/oauth2-jwt.md) - [docs/pt/docs/tutorial/cookie-param-models.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/tutorial/cookie-param-models.md) - [docs/zh/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/tutorial/sql-databases.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py) This document covers FastAPI's background task system, which allows executing functions after an HTTP response has been sent to the client. This system is useful for operations like sending emails, processing files, or logging that don't need to block the response.",
  "# Overview The Model Context Protocol (MCP) Python SDK is a comprehensive framework for building servers and clients that enable Large Language Models to access external tools, data, and services in a standardized way. This SDK implements the complete MCP specification, providing both high-level developer-friendly APIs and low-level protocol implementations. The SDK enables developers to create MCP servers that expose resources (data), tools (functions), and prompts (templates) to LLM applications, as well as MCP clients that can discover and interact with these servers. For detailed implementation guidance on building servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For client development, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). For protocol-level details, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md).",
  "## System Architecture The MCP Python SDK is organized into several distinct layers, each serving specific roles in the protocol implementation: ``` ``` **Sources:** [README.md1-1770](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1-L1770) [src/mcp/server/lowlevel/server.py1-727](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L727) [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349)",
  "## System Architecture The MCP Python SDK is organized into several distinct layers, each serving specific roles in the protocol implementation: ``` ``` **Sources:** [README.md1-1770](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1-L1770) [src/mcp/server/lowlevel/server.py1-727](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L727) [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349)",
  "### Standard Installation The recommended installation includes commonly used dependencies: ``` ``` This installation includes: - `uvicorn` - ASGI server for development and production - `fastapi-cli` - Command-line interface for FastAPI applications - `httpx` - HTTP client for testing - `jinja2` - Template engine support - `python-multipart` - Form parsing capabilities",
  "### Settings Structure The `Settings` class provides configuration via environment variables prefixed with `FASTMCP_`: - `FASTMCP_LOG_LEVEL`: Logging configuration - `FASTMCP_SERVER_AUTH`: Authentication provider class path - `FASTMCP_INCLUDE_TAGS`/`FASTMCP_EXCLUDE_TAGS`: Component filtering - `FASTMCP_HOST`/`FASTMCP_PORT`: HTTP server configuration",
  "# Security Components Relevant source files - [docs/en/docs/tutorial/background-tasks.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md) - [docs/en/docs/tutorial/extra-data-types.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/extra-data-types.md) - [docs/en/docs/tutorial/handling-errors.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md) - [docs/en/docs/tutorial/security/first-steps.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/first-steps.md) - [docs/en/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/oauth2-jwt.md) - [docs/en/docs/tutorial/security/simple-oauth2.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/simple-oauth2.md) - [docs/en/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md) - [docs/ja/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/tutorial/security/oauth2-jwt.md) - [docs/pt/docs/tutorial/cookie-param-models.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/tutorial/cookie-param-models.md) - [docs/zh/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/tutorial/sql-databases.md) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) This document covers FastAPI's security infrastructure, including authentication schemes (OAuth2, HTTP Basic/Bearer, API Key, OpenID Connect), security dependencies, and permission scopes. For broader API documentation concepts, see [API Documentation System](fastapi/fastapi/3-api-documentation-system.md). For error handling in security contexts, see [Error Handling](fastapi/fastapi/2.7-error-handling.md).",
  "# Overview The Model Context Protocol (MCP) Python SDK is a comprehensive framework for building servers and clients that enable Large Language Models to access external tools, data, and services in a standardized way. This SDK implements the complete MCP specification, providing both high-level developer-friendly APIs and low-level protocol implementations. The SDK enables developers to create MCP servers that expose resources (data), tools (functions), and prompts (templates) to LLM applications, as well as MCP clients that can discover and interact with these servers. For detailed implementation guidance on building servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For client development, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). For protocol-level details, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md).",
  "## System Architecture The MCP Python SDK is organized into several distinct layers, each serving specific roles in the protocol implementation: ``` ``` **Sources:** [README.md1-1770](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1-L1770) [src/mcp/server/lowlevel/server.py1-727](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L727) [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349)",
  "## System Architecture The MCP Python SDK is organized into several distinct layers, each serving specific roles in the protocol implementation: ``` ``` **Sources:** [README.md1-1770](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1-L1770) [src/mcp/server/lowlevel/server.py1-727](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L727) [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349)",
  "### GitHub App Integration The Marvin Context Protocol system relies on a GitHub App for authentication: - **App ID**: Stored as `MARVIN_APP_ID` secret - **Private Key**: Stored as `MARVIN_APP_PRIVATE_KEY` secret - **Token Generation**: Uses `actions/create-github-app-token@v2` - **Permissions**: Comprehensive access to contents, issues, pull-requests, discussions, and actions",
  "### Update Card System The updates system provides visual summaries of releases through structured cards: ``` ``` **Sources:** [docs/updates.mdx8-22](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx#L8-L22) [docs/updates.mdx54-68](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx#L54-L68)",
  "### Settings Structure The `Settings` class provides configuration via environment variables prefixed with `FASTMCP_`: - `FASTMCP_LOG_LEVEL`: Logging configuration - `FASTMCP_SERVER_AUTH`: Authentication provider class path - `FASTMCP_INCLUDE_TAGS`/`FASTMCP_EXCLUDE_TAGS`: Component filtering - `FASTMCP_HOST`/`FASTMCP_PORT`: HTTP server configuration",
  "## ClientSession Class Structure The `ClientSession` class extends `BaseSession` with client-specific functionality and type parameters: ``` ``` Sources: [src/mcp/client/session.py101-109](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L101-L109) [src/mcp/shared/session.py159-167](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L159-L167) [src/mcp/shared/session.py52-67](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L52-L67)",
  "## Session Architecture Overview The client session architecture consists of layered components that handle different aspects of MCP communication: ``` ``` Sources: [src/mcp/client/session.py101-434](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L101-L434) [src/mcp/shared/session.py159-471](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L159-L471)",
  "# ClientSession Core Relevant source files - [src/mcp/client/\\_\\_main\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/__main__.py) - [src/mcp/client/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py) - [src/mcp/shared/memory.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/memory.py) - [src/mcp/shared/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py) - [tests/client/test\\_logging\\_callback.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_logging_callback.py) - [tests/client/test\\_session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_session.py) The `ClientSession` class provides the high-level client interface for communicating with MCP servers. It manages the complete lifecycle of client-server communication, including session initialization, protocol negotiation, request/response handling, and server-initiated callbacks. This document covers the core session management architecture and message handling system. For transport-specific client implementations, see [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md). For OAuth authentication in client sessions, see [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md).",
  "## Server-Initiated Request Handling The client handles four types of server-initiated requests through configurable callback functions: ``` ``` The `_received_request` method [src/mcp/client/session.py388-417](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L388-L417) routes server requests to appropriate callbacks: - **Sampling Requests**: Handle `CreateMessageRequest` for LLM message generation - **Elicitation Requests**: Handle `ElicitRequest` for information extraction - **List Roots Requests**: Handle `ListRootsRequest` for file system roots - **Ping Requests**: Built-in handler returns `EmptyResult` Each callback receives a `RequestContext` with session reference and request metadata. Sources: [src/mcp/client/session.py388-417](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L388-L417) [src/mcp/client/session.py21-96](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L21-L96)",
  "## Request/Response Management The session manages request/response pairs using a stream-based approach with timeout handling: | Component | Purpose | Key Methods | | --------------------- | ---------------------------------- | ---------------------------------------- | | `send_request` | Send request and wait for response | Type-safe request/response matching | | `_response_streams` | Track pending requests | Maps request ID to response stream | | `_progress_callbacks` | Handle progress updates | Maps progress token to callback function | | `RequestResponder` | Manage server-initiated requests | Context manager for request lifecycle | ``` ``` The `send_request` method [src/mcp/shared/session.py220-294](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L220-L294) provides: - **Type Safety**: Generic type parameters ensure request/response type matching - **Progress Support**: Automatic progress token injection and callback registration - **Timeout Management**: Request-specific and session-level timeout support - **Error Handling**: Converts `JSONRPCError` responses to `McpError` exceptions Sources: [src/mcp/shared/session.py220-294](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L220-L294) [src/mcp/shared/session.py331-436](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L331-L436)",
  "### Build Configuration ``` ``` **Build System Configuration** The build system is configured in [pyproject.toml1-3](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L1-L3) specifying PDM as the backend. The `pdm.backend` handles all packaging operations, from source distribution to wheel creation. **Dynamic Versioning** Version management is handled dynamically through [pyproject.toml127-128](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L127-L128) extracting the version from [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) This ensures the package version stays synchronized with the codebase version without manual updates. **Source Distribution Includes** The build includes additional directories beyond the core package [pyproject.toml132-139](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L132-L139): - `tests/` - Test suite for distribution validation - `docs_src/` - Documentation source examples - `scripts/` - Development and utility scripts - `requirements*.txt` - Dependency specifications - `docs/en/docs/img/favicon.png` - Required for testing Sources: [pyproject.toml1-139](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L1-L139)",
  "### Testing and Coverage Configuration ``` ``` **Pytest Configuration** Test execution is configured for strict validation [pyproject.toml163-170](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L163-L170): - Strict configuration prevents typos in pytest options - Strict markers require all test markers to be registered - Documentation source is excluded from test discovery - XFail strict mode prevents accidentally passing expected failures **Coverage Tracking** Comprehensive coverage configuration [pyproject.toml189-210](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L189-L210) enables: - Parallel test execution with data aggregation - Source tracking across `fastapi`, `tests`, and `docs_src` - Dynamic context tracking per test function - HTML reports with test context display **Warning Filters** Extensive warning filters [pyproject.toml171-187](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L171-L187) handle known issues: - Framework deprecation warnings (Starlette, SQLAlchemy) - Library compatibility warnings (passlib, trio) - Python version-specific warnings Sources: [pyproject.toml163-210](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L163-L210)",
  "### Server Components Architecture ``` ``` **Sources:** [src/mcp/server/auth/routes.py68-146](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L68-L146) [src/mcp/server/auth/handlers/](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/) [src/mcp/server/auth/middleware/client\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/middleware/client_auth.py) [src/mcp/server/auth/settings.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/settings.py)",
  "## OAuth 2.0 Server Implementation The server-side authentication system provides a complete OAuth 2.0 authorization server implementation that MCP servers can use to authenticate clients. The system is built around the `create_auth_routes()` function and handler classes.",
  "### Resource Parameter Support The SDK implements RFC 8707 resource indicators for enhanced security: ``` ``` The resource parameter helps prevent token confusion attacks by explicitly identifying the intended resource server. **Sources:** [src/mcp/client/auth.py159-177](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L159-L177) [src/mcp/client/auth.py377-379](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L377-L379) [src/mcp/client/auth.py431-433](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L431-L433) Dismiss Refresh this wiki Enter email to refresh",
  "### Content Categories and Structure The system organizes external resources into three main categories: | Category | Purpose | Data Fields | | -------- | -------------------------------- | ---------------------------------------- | | Articles | Blog posts, tutorials, guides | `author`, `author_link`, `link`, `title` | | Podcasts | Audio content about FastAPI | `author`, `author_link`, `link`, `title` | | Talks | Conference presentations, videos | `author`, `author_link`, `link`, `title` | Each content item contains standardized metadata fields that enable consistent rendering and attribution across all languages.",
  "# Deployment and Production Considerations Relevant source files - [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py)",
  "### Union Types and Message Routing Protocol messages use Pydantic `RootModel` unions for type-safe message routing: ``` ``` **Sources:** [src/mcp/types.py1248-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1248-L1349) [src/mcp/server/lowlevel/server.py152-156](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L152-L156)",
  "### On this page - [Protocol Types & JSON-RPC](#protocol-types-json-rpc.md) - [JSON-RPC Message Foundation](#json-rpc-message-foundation.md) - [Core JSON-RPC Types](#core-json-rpc-types.md) - [Message Structure and Metadata](#message-structure-and-metadata.md) - [MCP Protocol Type Hierarchy](#mcp-protocol-type-hierarchy.md) - [Protocol Message Categories](#protocol-message-categories.md) - [Core Entity Types](#core-entity-types.md) - [Message Flow Patterns](#message-flow-patterns.md) - [Request/Response Cycles](#requestresponse-cycles.md) - [Server Message Handling](#server-message-handling.md) - [Type System Integration](#type-system-integration.md) - [Protocol Version Management](#protocol-version-management.md) - [Union Types and Message Routing](#union-types-and-message-routing.md) - [Structured Output and Validation](#structured-output-and-validation.md)",
  "### Tool Call Protocol The client implements a JSON-based tool calling protocol: ``` ``` The system message instructs the LLM on tool usage patterns and response formatting, ensuring consistent tool invocation and natural language result processing. Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py283-321](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L283-L321) [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py341-361](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L341-L361)",
  "## Purpose and Architecture The Contributors and Experts Management system automatically identifies and recognizes community members across multiple contribution categories: - **FastAPI Experts**: Users who help answer questions in GitHub Discussions - **Contributors**: Users who create merged Pull Requests - **Translators**: Contributors who submit translation Pull Requests - **Translation Reviewers**: Users who review and approve translations - **Sponsors**: Financial supporters through GitHub Sponsors The system operates through automated data collection scripts that query GitHub APIs, process contribution data, and generate YAML files consumed by documentation pages.",
  "### File Organization and Path Mapping The translation system maintains a structured file organization where English documentation in `docs/en/docs/` maps to translated versions in `docs/{lang}/docs/`. Two key functions handle this mapping: | Function | Purpose | Input | Output | | ---------------------- | ------------------------- | -------------------------------------- | -------------------------------------- | | `generate_lang_path()` | English → Translated path | `docs/en/docs/tutorial/first-steps.md` | `docs/es/docs/tutorial/first-steps.md` | | `generate_en_path()` | Translated → English path | `docs/es/docs/tutorial/first-steps.md` | `docs/en/docs/tutorial/first-steps.md` | The `non_translated_sections` tuple [scripts/translate.py14-23](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L14-L23) excludes specific content types like API reference, release notes, and management documentation from automatic translation. Sources: [scripts/translate.py76-94](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L76-L94) [scripts/translate.py14-23](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L14-L23)",
  "### Type Annotation Processing The system handles complex type annotations including unions, forward references, and `Annotated` types: | Type Pattern | Example | Processing | | ----------------- | ---------------------------------------- | ------------------------------------- | | Direct Type | `ctx: Context` | Direct match via `issubclass_safe()` | | Union Type | `ctx: Context \\| None` | Check each union member | | Annotated Type | `ctx: Annotated[Context, \"description\"]` | Extract base type from first argument | | Forward Reference | `ctx: \"Context\"` | Resolve via `get_type_hints()` | **Sources:** [src/fastmcp/utilities/types.py120-128](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L120-L128) [src/fastmcp/utilities/types.py54-117](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L54-L117)",
  "# Context System and Dependencies Relevant source files - [examples/get\\_file.py](https://github.com/jlowin/fastmcp/blob/66221ed3/examples/get_file.py) - [src/fastmcp/server/context.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py) - [src/fastmcp/utilities/types.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py) - [tests/server/test\\_context.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_context.py) - [tests/utilities/test\\_types.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/test_types.py) This section covers the Context object system and dependency injection mechanisms in FastMCP. The `Context` class provides tools and resources with access to MCP protocol capabilities like logging, sampling, and resource reading, while the dependency injection system automatically provides these capabilities to user functions based on type annotations. For information about how components (tools, resources, prompts) are created and managed, see [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md). For details about server composition and mounting, see [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md).",
  "## Dependency Injection System FastMCP uses type annotation-based dependency injection to automatically provide `Context` objects and other dependencies to user functions. ``` ``` **Sources:** [src/fastmcp/utilities/types.py152-176](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L152-L176) [src/fastmcp/utilities/types.py130-149](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L130-L149)",
  "# OpenAPI Schema Generation Relevant source files - [docs/de/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/how-to/custom-docs-ui-assets.md) - [docs/en/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md) - [docs/es/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/how-to/custom-docs-ui-assets.md) - [docs/pt/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/how-to/custom-docs-ui-assets.md) - [docs\\_src/custom\\_docs\\_ui/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) - [tests/test\\_local\\_docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_local_docs.py) - [tests/test\\_tutorial/test\\_custom\\_docs\\_ui/test\\_tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py) This document covers FastAPI's automatic OpenAPI specification generation system. It explains how FastAPI introspects route definitions, parameters, dependencies, and security requirements to produce a complete OpenAPI 3.1.0 schema. For information about customizing the documentation UI that consumes this schema, see [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md).",
  "### On this page - [Middleware System](#middleware-system.md) - [Core Middleware Architecture](#core-middleware-architecture.md) - [Middleware Pipeline Flow](#middleware-pipeline-flow.md) - [Core Middleware Components](#core-middleware-components.md) - [Built-in Middleware Types](#built-in-middleware-types.md) - [Logging Middleware](#logging-middleware.md) - [Timing and Performance Middleware](#timing-and-performance-middleware.md) - [Error Handling and Retry Middleware](#error-handling-and-retry-middleware.md) - [Rate Limiting Middleware](#rate-limiting-middleware.md) - [Custom Middleware Development](#custom-middleware-development.md) - [Middleware Hook Methods](#middleware-hook-methods.md) - [Custom Middleware Example Pattern](#custom-middleware-example-pattern.md) - [Integration with FastMCP Server](#integration-with-fastmcp-server.md) - [Middleware Registration and Execution](#middleware-registration-and-execution.md) - [Middleware Configuration Patterns](#middleware-configuration-patterns.md) - [Common Middleware Stack Configuration](#common-middleware-stack-configuration.md)",
  "### Common Configuration Pattern Both scripts use `BaseSettings` from Pydantic for configuration management: - `github_repository`: Target repository identifier - `github_token`: Authentication token for API access - Event-specific parameters (commit SHA, PR number, etc.)",
  "### Standard Installation The recommended installation includes commonly used dependencies: ``` ``` This installation includes: - `uvicorn` - ASGI server for development and production - `fastapi-cli` - Command-line interface for FastAPI applications - `httpx` - HTTP client for testing - `jinja2` - Template engine support - `python-multipart` - Form parsing capabilities",
  "# Code Quality and Pre-commit Relevant source files - [.pre-commit-config.yaml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml) - [requirements-tests.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt) - [requirements.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements.txt) - [scripts/format.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh) - [scripts/lint.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh) - [scripts/test-cov-html.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test-cov-html.sh) - [scripts/test.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test.sh) - [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py) - [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py) - [tests/test\\_typing\\_python39.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_typing_python39.py) - [tests/test\\_union\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_body.py) - [tests/test\\_union\\_inherited\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py) - [tests/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py) This document covers the code quality infrastructure and pre-commit hook system used in the FastAPI repository. It details the configuration and usage of linting, formatting, type checking, and automated quality gates that ensure code consistency and reliability.",
  "### Notification Methods | Method | Purpose | Message Type | | ------------------------------ | ---------------------- | --------------------------------- | | `send_log_message()` | Server logging | `LoggingMessageNotification` | | `send_resource_updated()` | Resource change events | `ResourceUpdatedNotification` | | `send_progress_notification()` | Operation progress | `ProgressNotification` | | `send_resource_list_changed()` | Resource list updates | `ResourceListChangedNotification` | | `send_tool_list_changed()` | Tool list updates | `ToolListChangedNotification` | | `send_prompt_list_changed()` | Prompt list updates | `PromptListChangedNotification` |",
  "### Initialization State Flow ``` ``` The ServerSession enforces a strict initialization protocol where most requests are blocked until the initialization handshake completes, with ping requests being the only exception. Sources: [src/mcp/server/session.py58-62](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L58-L62) [src/mcp/server/session.py167-179](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L167-L179) [tests/server/test\\_session.py219-283](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_session.py#L219-L283)",
  "## Message Processing Architecture The server's main `run()` method establishes a session and processes incoming messages through a task group, ensuring proper error handling and response delivery. ``` ``` Sources: [src/mcp/server/lowlevel/server.py598-636](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L598-L636) [src/mcp/server/lowlevel/server.py637-655](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L637-L655) [src/mcp/server/lowlevel/server.py656-713](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L656-L713)",
  "## Server Class Overview The `Server` class in [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) provides a decorator-based framework for implementing MCP servers with direct control over protocol message handling. Unlike FastMCP's automatic introspection, the low-level server requires explicit handler registration and manual schema definition. ``` ``` Sources: [src/mcp/server/lowlevel/server.py133-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L133-L158) [src/mcp/server/lowlevel/server.py152-155](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L152-L155) [src/mcp/types.py82-103](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L82-L103) The `Server` class is generic over two type parameters: `LifespanResultT` for lifespan context data and `RequestT` for request-specific data. It maintains separate dictionaries for request handlers and notification handlers, automatically routing incoming messages based on their type.",
  "# Low-Level Server Implementation Relevant source files - [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [src/mcp/server/\\_\\_init\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/__init__.py) - [src/mcp/server/\\_\\_main\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/__main__.py) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py) This document covers the low-level `Server` class that provides direct access to the MCP protocol implementation. This is the foundation layer that handles raw MCP requests and notifications with minimal abstraction. For high-level server development using decorators and automatic schema generation, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For details on session management and client connections, see [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md).",
  "## Capabilities Discovery The server automatically generates `ServerCapabilities` based on registered handlers, allowing clients to discover available functionality without manual configuration. ``` ``` Sources: [src/mcp/server/lowlevel/server.py188-229](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L188-L229) [src/mcp/types.py317-332](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L317-L332) [src/mcp/server/lowlevel/server.py159-186](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L159-L186) The `NotificationOptions` class controls whether the server supports change notifications for prompts, resources, and tools, which are reflected in the generated capabilities. Dismiss Refresh this wiki Enter email to refresh",
  "## Tool Management and Validation The server implements sophisticated tool management including input/output validation and result processing. Tools are cached to avoid repeated calls to `list_tools()` and support both structured and unstructured content output. | Feature | Implementation | Purpose | | --------------------- | ------------------------------ | -------------------------------------------------- | | Tool Caching | `_tool_cache: dict[str, Tool]` | Avoid repeated tool list requests | | Input Validation | `jsonschema.validate()` | Validate arguments against `inputSchema` | | Output Validation | `jsonschema.validate()` | Validate structured results against `outputSchema` | | Content Normalization | `CombinationContent` handling | Support both structured and unstructured outputs | ``` ``` Sources: [src/mcp/server/lowlevel/server.py465-547](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L465-L547) [src/mcp/server/lowlevel/server.py99-102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L99-L102) [src/mcp/server/lowlevel/server.py449-463](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L449-L463) The `call_tool()` decorator accepts a `validate_input` parameter to control input validation. Output validation is automatically performed when `outputSchema` is defined in the tool definition.",
  "### Environment Variables FastMCP supports several environment variables for configuration: | Variable | Purpose | Default | | -------------------------------- | ---------------------------- | ------- | | `FASTMCP_TEST_MODE` | Enable test mode | `0` | | `FASTMCP_LOG_LEVEL` | Set logging level | `INFO` | | `FASTMCP_ENABLE_RICH_TRACEBACKS` | Enable rich error formatting | `1` |",
  "## Core Components The documentation system centers around three primary HTML generation functions that create complete documentation interfaces with embedded JavaScript and CSS. ``` ``` **Core Function Architecture** Each documentation interface is generated by a dedicated function that assembles HTML with proper asset references and configuration.",
  "# API Documentation System Relevant source files - [docs/de/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/how-to/custom-docs-ui-assets.md) - [docs/en/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md) - [docs/es/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/how-to/custom-docs-ui-assets.md) - [docs/pt/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/how-to/custom-docs-ui-assets.md) - [docs\\_src/custom\\_docs\\_ui/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py) - [fastapi/openapi/docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py) - [tests/test\\_local\\_docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_local_docs.py) - [tests/test\\_tutorial/test\\_custom\\_docs\\_ui/test\\_tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py)",
  "### Custom Documentation Endpoints Applications requiring asset customization must disable automatic endpoints and create custom path operations that call the HTML generation functions with appropriate parameters. ``` ``` Sources: [docs\\_src/custom\\_docs\\_ui/tutorial001.py8-39](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L8-L39)",
  "## Testing and Validation The documentation system includes comprehensive testing to ensure proper HTML generation, asset URL inclusion, and configuration parameter handling. Test coverage includes: - Default CDN URL inclusion in generated HTML - Custom URL parameter handling - OAuth2 redirect functionality - Google Fonts configuration for ReDoc - Static file serving integration Sources: [tests/test\\_local\\_docs.py1-68](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_local_docs.py#L1-L68) [tests/test\\_tutorial/test\\_custom\\_docs\\_ui/test\\_tutorial001.py1-43](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py#L1-L43) Dismiss Refresh this wiki Enter email to refresh",
  "### Custom CDN Configuration Applications can specify alternative CDN URLs by passing custom `swagger_js_url`, `swagger_css_url`, and `redoc_js_url` parameters to the generation functions. This supports scenarios where default CDNs are blocked or alternative sources are preferred. Sources: [docs/en/docs/how-to/custom-docs-ui-assets.md9-58](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md#L9-L58) [docs\\_src/custom\\_docs\\_ui/tutorial001.py11-33](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L11-L33)",
  "# modelcontextprotocol_python-sdk - Documentation Index - [/modelcontextprotocol/python-sdk](./_modelcontextprotocol_python-sdk.md) - [/modelcontextprotocol/python-sdk/1-overview](./_modelcontextprotocol_python-sdk_1-overview.md) - [/modelcontextprotocol/python-sdk/2-fastmcp-server-framework](./_modelcontextprotocol_python-sdk_2-fastmcp-server-framework.md) - [/modelcontextprotocol/python-sdk/1.1-installation-and-dependencies](./_modelcontextprotocol_python-sdk_1.1-installation-and-dependencies.md) - [/modelcontextprotocol/python-sdk/1.2-key-concepts](./_modelcontextprotocol_python-sdk_1.2-key-concepts.md) - [/modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture](./_modelcontextprotocol_python-sdk_2.1-fastmcp-server-architecture.md) - [/modelcontextprotocol/python-sdk/2.2-tool-management](./_modelcontextprotocol_python-sdk_2.2-tool-management.md) - [/modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output](./_modelcontextprotocol_python-sdk_2.4-function-introspection-and-structured-output.md) - [/modelcontextprotocol/python-sdk/3-client-framework](./_modelcontextprotocol_python-sdk_3-client-framework.md) - [/modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management](./_modelcontextprotocol_python-sdk_2.3-resource-and-prompt-management.md) - [/modelcontextprotocol/python-sdk/3.1-clientsession-core](./_modelcontextprotocol_python-sdk_3.1-clientsession-core.md) - [/modelcontextprotocol/python-sdk/3.3-client-authentication](./_modelcontextprotocol_python-sdk_3.3-client-authentication.md) - [/modelcontextprotocol/python-sdk/4-protocol-and-message-system](./_modelcontextprotocol_python-sdk_4-protocol-and-message-system.md) - [/modelcontextprotocol/python-sdk/3.2-client-transports](./_modelcontextprotocol_python-sdk_3.2-client-transports.md) - [/modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc](./_modelcontextprotocol_python-sdk_4.1-protocol-types-and-json-rpc.md) - [/modelcontextprotocol/python-sdk/4.2-session-management](./_modelcontextprotocol_python-sdk_4.2-session-management.md) - [/modelcontextprotocol/python-sdk/5.2-server-sent-events-(sse)-transport](./_modelcontextprotocol_python-sdk_5.2-server-sent-events-(sse)-transport.md) - [/modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting](./_modelcontextprotocol_python-sdk_4.3-context-and-progress-reporting.md) - [/modelcontextprotocol/python-sdk/5.1-streamablehttp-transport](./_modelcontextprotocol_python-sdk_5.1-streamablehttp-transport.md) - [/modelcontextprotocol/python-sdk/5-transport-layer](./_modelcontextprotocol_python-sdk_5-transport-layer.md) - [/modelcontextprotocol/python-sdk/5.3-stdio-transport](./_modelcontextprotocol_python-sdk_5.3-stdio-transport.md) - [/modelcontextprotocol/python-sdk/5.4-transport-security](./_modelcontextprotocol_python-sdk_5.4-transport-security.md) - [/modelcontextprotocol/python-sdk/6-low-level-server-implementation](./_modelcontextprotocol_python-sdk_6-low-level-server-implementation.md) - [/modelcontextprotocol/python-sdk/6.1-low-level-server-architecture](./_modelcontextprotocol_python-sdk_6.1-low-level-server-architecture.md) - [/modelcontextprotocol/python-sdk/6.2-serversession-implementation](./_modelcontextprotocol_python-sdk_6.2-serversession-implementation.md) - [/modelcontextprotocol/python-sdk/7-authentication-and-security](./_modelcontextprotocol_python-sdk_7-authentication-and-security.md) - [/modelcontextprotocol/python-sdk/8-development-tools-and-cli](./_modelcontextprotocol_python-sdk_8-development-tools-and-cli.md) - [/modelcontextprotocol/python-sdk/8.2-development-environment](./_modelcontextprotocol_python-sdk_8.2-development-environment.md) - [/modelcontextprotocol/python-sdk/7.1-oauth-2.0-system](./_modelcontextprotocol_python-sdk_7.1-oauth-2.0-system.md) - [/modelcontextprotocol/python-sdk/8.1-mcp-cli-commands](./_modelcontextprotocol_python-sdk_8.1-mcp-cli-commands.md) - [/modelcontextprotocol/python-sdk/8.3-claude-desktop-integration](./_modelcontextprotocol_python-sdk_8.3-claude-desktop-integration.md) - [/modelcontextprotocol/python-sdk/9-examples-and-tutorials](./_modelcontextprotocol_python-sdk_9-examples-and-tutorials.md) - [/modelcontextprotocol/python-sdk/9.1-server-examples](./_modelcontextprotocol_python-sdk_9.1-server-examples.md) - [/modelcontextprotocol/python-sdk/9.2-client-examples](./_modelcontextprotocol_python-sdk_9.2-client-examples.md)",
  "## Transport Integration Architecture FastMCP integrates with multiple transport protocols by generating transport-specific ASGI applications that wrap the core MCP server functionality. ``` ``` **Sources:** [src/mcp/server/fastmcp/server.py687-725](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L687-L725) [src/mcp/server/fastmcp/server.py752-884](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L752-L884) [src/mcp/server/fastmcp/server.py885-984](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L885-L984)",
  "## Context Injection System FastMCP provides automatic context injection that gives functions access to request-specific information and MCP capabilities. ``` ``` **Sources:** [src/mcp/server/fastmcp/utilities/context\\_injection.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/context_injection.py) [src/mcp/shared/context.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/context.py)",
  "## Core Architecture Overview FastMCP implements a layered architecture that wraps the low-level MCP server with higher-level abstractions and automatic introspection capabilities. ``` ``` **Sources:** [src/mcp/server/fastmcp/server.py122-206](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L122-L206) [src/mcp/server/fastmcp/utilities/func\\_metadata.py62-67](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L62-L67)",
  "# FastMCP Server Architecture Relevant source files - [src/mcp/server/fastmcp/\\_\\_init\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/__init__.py) - [src/mcp/server/fastmcp/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py) - [src/mcp/server/fastmcp/utilities/func\\_metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py) - [src/mcp/server/fastmcp/utilities/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/types.py) - [tests/server/fastmcp/test\\_func\\_metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_func_metadata.py) - [tests/server/fastmcp/test\\_server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_server.py) This document explains the internal architecture of the FastMCP server framework, including its core components, managers, function introspection system, and transport integration. FastMCP provides a high-level, decorator-based interface for building MCP servers that automatically handles schema generation, validation, and protocol compliance. For information about using FastMCP decorators and APIs, see [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) and [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md). For details about the underlying protocol implementation, see [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md).",
  "### Formatting Workflow The `scripts/format.sh` script performs automatic code formatting: ``` ``` This two-step process first applies automatic fixes for linting violations, then formats the code according to style guidelines. Sources: [scripts/format.sh4-5](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh#L4-L5)",
  "# Development Tools & CLI Relevant source files - [examples/fastmcp/unicode\\_example.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/fastmcp/unicode_example.py) - [src/mcp/cli/claude.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py) - [src/mcp/cli/cli.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py) - [tests/client/test\\_config.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_config.py) - [tests/issues/test\\_100\\_tool\\_listing.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_100_tool_listing.py) The MCP Python SDK includes a comprehensive command-line interface (CLI) that streamlines the development workflow for MCP servers. The CLI provides commands for running servers, integrating with development tools, and deploying to client applications like Claude Desktop. For information about the underlying server frameworks, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For details about transport implementations, see [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md).",
  "### CLI Command Structure ``` ``` **Sources:** [src/mcp/cli/cli.py34-39](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L34-L39) [src/mcp/cli/cli.py211-488](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L211-L488) [src/mcp/cli/claude.py44-148](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L44-L148)",
  "# OAuth 2.0 System Relevant source files - [examples/clients/simple-auth-client/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-auth-client/README.md) - [examples/clients/simple-auth-client/mcp\\_simple\\_auth\\_client/main.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-auth-client/mcp_simple_auth_client/main.py) - [examples/servers/simple-auth/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-auth/README.md) - [examples/servers/simple-auth/mcp\\_simple\\_auth/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-auth/mcp_simple_auth/server.py) - [src/mcp/client/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py) - [src/mcp/server/auth/handlers/register.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/register.py) - [src/mcp/server/auth/routes.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py) - [src/mcp/shared/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py) - [tests/client/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py) - [tests/shared/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_auth.py) This document covers the comprehensive OAuth 2.0 authentication and authorization implementation in the MCP Python SDK. The OAuth 2.0 system provides secure authentication for both client and server components, implementing RFC 6749 (OAuth 2.0), RFC 7636 (PKCE), RFC 8414 (Authorization Server Metadata), and RFC 9728 (Protected Resource Metadata). For information about client transport integration, see [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md). For server-side transport security, see [Transport Security](#5.5.md).",
  "### Function-to-Component Creation Flow ``` ``` **Sources**: [src/fastmcp/tools/tool.py354-491](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool.py#L354-L491) [src/fastmcp/resources/resource.py168-219](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource.py#L168-L219) [src/fastmcp/prompts/prompt.py156-262](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt.py#L156-L262) [src/fastmcp/resources/template.py214-313](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/template.py#L214-L313)",
  "# Component System Architecture Relevant source files - [docs/patterns/tool-transformation.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/patterns/tool-transformation.mdx) - [src/fastmcp/prompts/prompt.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt.py) - [src/fastmcp/prompts/prompt\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py) - [src/fastmcp/resources/resource.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource.py) - [src/fastmcp/resources/resource\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py) - [src/fastmcp/resources/template.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/template.py) - [src/fastmcp/resources/types.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/types.py) - [src/fastmcp/tools/tool.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool.py) - [src/fastmcp/tools/tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py) - [src/fastmcp/tools/tool\\_transform.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_transform.py) - [src/fastmcp/utilities/components.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/components.py) - [tests/prompts/test\\_prompt.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/prompts/test_prompt.py) - [tests/prompts/test\\_prompt\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/prompts/test_prompt_manager.py) - [tests/resources/test\\_function\\_resources.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/resources/test_function_resources.py) - [tests/resources/test\\_resource\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/resources/test_resource_manager.py) - [tests/resources/test\\_resource\\_template.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/resources/test_resource_template.py) - [tests/resources/test\\_resources.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/resources/test_resources.py) - [tests/server/test\\_server\\_interactions.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server_interactions.py) - [tests/tools/test\\_tool.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/tools/test_tool.py) - [tests/tools/test\\_tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/tools/test_tool_manager.py) - [tests/tools/test\\_tool\\_transform.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/tools/test_tool_transform.py) This document covers the FastMCP component system, which provides a unified framework for managing Tools, Resources, Prompts, and Resource Templates. It explains how these components are created, registered, managed, and composed within FastMCP servers. For information about server composition and mounting mechanisms, see [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md). For details about dependency injection and the Context system, see [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md).",
  "# Settings Management Relevant source files - [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py) FastAPI's settings management system provides type-safe configuration handling through Pydantic's `BaseSettings` class. The system automatically reads environment variables, validates configuration values, and integrates with FastAPI's dependency injection system for clean application architecture.",
  "# fastapi_fastapi - Documentation Index - [/fastapi/fastapi](./_fastapi_fastapi.md) - [/fastapi/fastapi/1-fastapi-overview](./_fastapi_fastapi_1-fastapi-overview.md) - [/fastapi/fastapi/2.1-application-and-routing-system](./_fastapi_fastapi_2.1-application-and-routing-system.md) - [/fastapi/fastapi/2-core-architecture](./_fastapi_fastapi_2-core-architecture.md) - [/fastapi/fastapi/2.3-parameter-validation-and-handling](./_fastapi_fastapi_2.3-parameter-validation-and-handling.md) - [/fastapi/fastapi/2.2-dependency-injection](./_fastapi_fastapi_2.2-dependency-injection.md) - [/fastapi/fastapi/2.5-security-components](./_fastapi_fastapi_2.5-security-components.md) - [/fastapi/fastapi/3-api-documentation-system](./_fastapi_fastapi_3-api-documentation-system.md) - [/fastapi/fastapi/2.6-settings-management](./_fastapi_fastapi_2.6-settings-management.md) - [/fastapi/fastapi/2.7-error-handling](./_fastapi_fastapi_2.7-error-handling.md) - [/fastapi/fastapi/2.4-response-handling](./_fastapi_fastapi_2.4-response-handling.md) - [/fastapi/fastapi/3.1-openapi-schema-generation](./_fastapi_fastapi_3.1-openapi-schema-generation.md) - [/fastapi/fastapi/3.2-customizing-api-documentation-ui](./_fastapi_fastapi_3.2-customizing-api-documentation-ui.md) - [/fastapi/fastapi/4.1-asynchronous-support](./_fastapi_fastapi_4.1-asynchronous-support.md) - [/fastapi/fastapi/4-advanced-features](./_fastapi_fastapi_4-advanced-features.md) - [/fastapi/fastapi/4.2-database-integration](./_fastapi_fastapi_4.2-database-integration.md) - [/fastapi/fastapi/4.3-background-tasks](./_fastapi_fastapi_4.3-background-tasks.md) - [/fastapi/fastapi/5-testing-infrastructure](./_fastapi_fastapi_5-testing-infrastructure.md) - [/fastapi/fastapi/5.1-test-framework-and-tools](./_fastapi_fastapi_5.1-test-framework-and-tools.md) - [/fastapi/fastapi/4.4-deployment-and-production-considerations](./_fastapi_fastapi_4.4-deployment-and-production-considerations.md) - [/fastapi/fastapi/6-project-infrastructure](./_fastapi_fastapi_6-project-infrastructure.md) - [/fastapi/fastapi/5.2-code-quality-and-pre-commit](./_fastapi_fastapi_5.2-code-quality-and-pre-commit.md) - [/fastapi/fastapi/6.2-cicd-pipeline](./_fastapi_fastapi_6.2-cicd-pipeline.md) - [/fastapi/fastapi/6.3-development-workflow](./_fastapi_fastapi_6.3-development-workflow.md) - [/fastapi/fastapi/6.1-documentation-system](./_fastapi_fastapi_6.1-documentation-system.md) - [/fastapi/fastapi/7.1-contributors-and-experts-management](./_fastapi_fastapi_7.1-contributors-and-experts-management.md) - [/fastapi/fastapi/7-community-ecosystem](./_fastapi_fastapi_7-community-ecosystem.md) - [/fastapi/fastapi/7.2-translation-management](./_fastapi_fastapi_7.2-translation-management.md) - [/fastapi/fastapi/7.3-external-resources-and-sponsorship](./_fastapi_fastapi_7.3-external-resources-and-sponsorship.md) - [/fastapi/fastapi/7.4-community-automation](./_fastapi_fastapi_7.4-community-automation.md)",
  "## ClientSession Architecture The `ClientSession` class serves as the primary interface for MCP client applications, built on top of the `BaseSession` foundation for session management and message handling. ``` ``` **Sources:** [src/mcp/client/session.py101-136](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L101-L136) [src/mcp/shared/session.py159-200](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L159-L200)",
  "### Progress Callback Integration ``` ``` **Sources:** [src/mcp/shared/session.py242-253](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L242-L253) [src/mcp/shared/session.py389-399](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L389-L399)",
  "## Core Protocol Operations MCP defines several categories of protocol operations, each with specific request-response patterns and capabilities. ``` ``` **Sources:** [src/mcp/types.py345-365](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L345-L365) [src/mcp/types.py419-554](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L419-L554) [src/mcp/types.py815-922](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L815-L922) [src/mcp/types.py630-802](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L630-L802) [src/mcp/types.py1061-1081](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1061-L1081)",
  "## Protocol Message Hierarchy MCP defines a structured hierarchy of message types that inherit from the JSON-RPC foundation, creating type-safe request and response patterns. ``` ``` **Sources:** [src/mcp/types.py82-122](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L82-L122) [src/mcp/types.py335-365](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L335-L365) [src/mcp/types.py815-922](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L815-L922) Each protocol operation follows this pattern: 1. **Request class**: Defines the method name and parameter structure 2. **Parameter class**: Strongly-typed parameters extending `RequestParams` 3. **Result class**: Response structure extending `Result` 4. **Specialized handling**: Pagination, metadata, and protocol-specific features",
  "## Protocol Versioning and Capabilities MCP uses semantic versioning and capability negotiation to ensure compatibility between clients and servers with different feature sets. ``` ``` **Sources:** [src/mcp/types.py26-34](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L26-L34) [src/mcp/types.py265-332](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L265-L332) [src/mcp/types.py335-365](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L335-L365) Capability negotiation enables: - **Protocol versioning**: Semantic version strings for compatibility checking - **Feature detection**: Clients and servers declare supported capabilities - **Graceful degradation**: Optional features can be disabled if not supported - **Extension points**: Experimental capabilities for new features",
  "### On this page - [Protocol & Message System](#protocol-message-system.md) - [JSON-RPC Foundation](#json-rpc-foundation.md) - [Protocol Message Hierarchy](#protocol-message-hierarchy.md) - [Core Protocol Operations](#core-protocol-operations.md) - [Message Processing Architecture](#message-processing-architecture.md) - [Content and Structured Output System](#content-and-structured-output-system.md) - [Protocol Versioning and Capabilities](#protocol-versioning-and-capabilities.md) - [Error Handling and Status Codes](#error-handling-and-status-codes.md)",
  "## Content and Structured Output System MCP supports both unstructured content and structured data in responses, enabling rich tool outputs and backward compatibility. ``` ``` **Sources:** [src/mcp/types.py688-782](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L688-L782) [src/mcp/types.py914-922](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L914-L922) [src/mcp/server/lowlevel/server.py100-102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L100-L102) The content system supports: - **Unstructured content**: Human-readable content blocks (text, images, audio, resources) - **Structured content**: Machine-readable JSON data with optional schema validation - **Combination output**: Both structured and unstructured content in the same response - **Schema validation**: Optional `outputSchema` validation for structured content",
  "# Claude Desktop Integration Relevant source files - [examples/fastmcp/unicode\\_example.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/fastmcp/unicode_example.py) - [src/mcp/cli/claude.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py) - [src/mcp/cli/cli.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py) - [tests/client/test\\_config.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_config.py) - [tests/issues/test\\_100\\_tool\\_listing.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_100_tool_listing.py) This document covers the integration of MCP servers with the Claude Desktop application. The integration allows MCP servers built with the Python SDK to be automatically discovered and used by Claude Desktop through configuration file management and standardized execution commands. For information about building MCP servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For CLI development tools, see [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md).",
  "## Integration Architecture The Claude Desktop integration operates through a configuration-based approach where MCP servers are registered in Claude Desktop's configuration file and executed via standardized `uv run` commands. ``` ``` **Claude Desktop Integration Architecture** Sources: [src/mcp/cli/claude.py44-148](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L44-L148) [src/mcp/cli/cli.py362-488](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L362-L488)",
  "### On this page - [Claude Desktop Integration](#claude-desktop-integration.md) - [Integration Architecture](#integration-architecture.md) - [Installation Process](#installation-process.md) - [Configuration File Structure](#configuration-file-structure.md) - [Platform-Specific Configuration Paths](#platform-specific-configuration-paths.md) - [Environment Variables and Dependencies](#environment-variables-and-dependencies.md) - [UV Command Generation](#uv-command-generation.md)",
  "## Environment Variables and Dependencies The configuration system supports environment variables and automatic dependency management for MCP servers. Environment variables are preserved across updates and can be loaded from files or command line arguments. ``` ``` **Environment and Dependency Management** The system handles environment variables with the following precedence: 1. New command-line variables override existing ones 2. Existing variables are preserved if not explicitly updated 3. Variables from `.env` files are loaded using the `python-dotenv` library Dependency management includes: - Automatic inclusion of `mcp[cli]` package - Server-specific dependencies from `server.dependencies` attribute - Additional packages specified via `--with` flags - Editable package installations via `--with-editable` Sources: [src/mcp/cli/claude.py92-99](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L92-L99) [src/mcp/cli/cli.py452-456](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L452-L456) [src/mcp/cli/cli.py104-115](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L104-L115) [src/mcp/cli/cli.py458-476](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L458-L476)",
  "## Platform-Specific Configuration Paths The system automatically detects Claude Desktop's configuration directory based on the operating system platform using standardized application data locations. ``` ``` **Platform-Specific Configuration Paths** | Platform | Configuration Path | Environment Variable | | -------- | ----------------------------------------------- | -------------------- | | Windows | `%USERPROFILE%\\AppData\\Roaming\\Claude` | - | | macOS | `~/Library/Application Support/Claude` | - | | Linux | `$XDG_CONFIG_HOME/Claude` or `~/.config/Claude` | `XDG_CONFIG_HOME` | Sources: [src/mcp/cli/claude.py17-30](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L17-L30)",
  "## Test Organization Structure Tests are organized by feature area with consistent naming conventions and import patterns. The test suite covers core functionality, tutorial examples, and edge cases across different Python and Pydantic versions. **Test File Categories** - **Core functionality tests**: `tests/test_*.py` - **Tutorial tests**: `tests/test_tutorial/*/test_*.py` - **Version-specific tests**: Files with `_py39`, `_py310`, `_an` suffixes - **Pydantic compatibility**: Files with `_pv1` suffixes Each test file follows the pattern of importing required dependencies, creating a FastAPI app and TestClient, and implementing test functions with descriptive names and comprehensive assertions. Sources: [tests/test\\_union\\_inherited\\_body.py1-8](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L1-L8) [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py1-13](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py#L1-L13) [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py1-14](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py#L1-L14) Dismiss Refresh this wiki Enter email to refresh",
  "## Test Patterns and Utilities FastAPI tests follow consistent patterns for HTTP testing, OpenAPI schema validation, and cross-version compatibility. **Common Testing Patterns** ``` ``` Key testing utilities include: - **TestClient**: HTTP client for simulating requests [tests/test\\_union\\_inherited\\_body.py24](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L24-L24) - **dirty-equals**: Flexible assertion matching [tests/test\\_union\\_inherited\\_body.py89-98](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L89-L98) - **inline-snapshot**: Snapshot testing for OpenAPI schemas [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py71-73](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py#L71-L73) - **Parametrized fixtures**: Version compatibility testing [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py17-36](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py#L17-L36) Sources: [tests/test\\_union\\_inherited\\_body.py1-137](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L1-L137) [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py1-482](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py#L1-L482) [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py1-244](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py#L1-L244)",
  "## Version Compatibility Testing The testing infrastructure includes sophisticated version compatibility utilities to ensure FastAPI works across different Python and Pydantic versions. **Version Compatibility System** ``` ``` The `tests/utils.py` module provides version-specific testing utilities: - `needs_py39`: Skips tests requiring Python 3.9+ - `needs_py310`: Skips tests requiring Python 3.10+ - `needs_pydanticv1`: Skips tests requiring Pydantic v1 - `needs_pydanticv2`: Skips tests requiring Pydantic v2 - `pydantic_snapshot()`: Provides version-specific snapshot testing Sources: [tests/utils.py7-34](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py#L7-L34)",
  "# Testing Infrastructure Relevant source files - [.pre-commit-config.yaml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml) - [requirements-tests.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt) - [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py) - [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py) - [tests/test\\_typing\\_python39.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_typing_python39.py) - [tests/test\\_union\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_body.py) - [tests/test\\_union\\_inherited\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py) - [tests/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py) This document covers FastAPI's comprehensive testing infrastructure, including the test framework setup, code quality tools, and automated quality assurance processes. The testing infrastructure ensures code reliability through automated testing, linting, type checking, and pre-commit validation hooks. For information about specific test framework usage patterns and TestClient implementation, see [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md). For details about linting, formatting, and pre-commit hook configuration, see [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md).",
  "## Overview FastAPI's testing infrastructure is built around `pytest` as the primary testing framework, with `TestClient` providing HTTP request simulation capabilities. The system includes comprehensive code quality tools, version compatibility testing, and automated validation through pre-commit hooks. **Testing Framework Architecture** ``` ``` Sources: [requirements-tests.txt1-17](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L1-L17) [tests/utils.py1-35](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py#L1-L35)",
  "## FastAPI Application Class The `FastAPI` class serves as the main application entry point, inheriting from Starlette's `Starlette` class while adding FastAPI-specific functionality including automatic API documentation, dependency injection, and enhanced routing capabilities.",
  "# Application and Routing System Relevant source files - [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py) This document covers FastAPI's application and routing system, including the core `FastAPI` application class, route organization through `APIRouter`, individual route handling via `APIRoute` and `APIWebSocketRoute`, and the request processing pipeline. For information about dependency injection mechanics, see [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md). For details about parameter validation and handling, see [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md).",
  "## Overview of Example Categories The MCP Python SDK includes several reference implementations that demonstrate core functionality: | Example Type | Purpose | Key Components | | ------------------- | ---------------------------- | ---------------------------------------------- | | **Resource Server** | Expose data and content | `list_resources()`, `read_resource()` handlers | | **Tool Server** | Provide executable functions | `list_tools()`, `call_tool()` handlers | | **Prompt Server** | Offer prompt templates | `list_prompts()`, `get_prompt()` handlers | All examples support multiple transport protocols (stdio, SSE) and follow consistent patterns using the low-level `Server` class from `mcp.server.lowlevel`.",
  "## Integration with Transport Layer The Server integrates with various transport mechanisms through the `ServerSession` and stream-based communication. ``` ``` **Server Run Method** The `run` method at [src/mcp/server/lowlevel/server.py598-635](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L598-L635) orchestrates the server lifecycle: 1. **Lifespan Management**: Enters the async context manager for startup/shutdown 2. **Session Creation**: Creates `ServerSession` with provided streams and options 3. **Message Processing**: Iterates over incoming messages and spawns handlers 4. **Graceful Shutdown**: Ensures proper cleanup of resources **Transport Examples** The example servers demonstrate different transport integrations: - **stdio**: Direct process communication via stdin/stdout - **SSE**: HTTP Server-Sent Events with Starlette ASGI integration - **HTTP**: Full bidirectional HTTP with session management Sources: [src/mcp/server/lowlevel/server.py598-635](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L598-L635) [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py60-91](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L60-L91) [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py60-91](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L60-L91) [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py79-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L79-L110) Dismiss Refresh this wiki Enter email to refresh",
  "## Handler Registration System The Server class uses a decorator-based system to register handlers for different MCP request types. Each decorator corresponds to a specific MCP protocol message type. ``` ``` **Handler Registration Process** Each decorator method follows a consistent pattern: 1. Creates a wrapper function that adapts the user function to the expected signature 2. Stores the wrapper in `request_handlers` with the request type as key 3. Returns the original function unchanged For example, the `list_tools` decorator at [src/mcp/server/lowlevel/server.py409-437](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L409-L437) registers handlers for `types.ListToolsRequest` and manages the tool cache. Sources: [src/mcp/server/lowlevel/server.py238-596](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L238-L596)",
  "# Low-Level Server Architecture Relevant source files - [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py) - [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py) - [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py) This document covers the low-level `Server` class implementation in the MCP Python SDK, which provides the foundational layer for building MCP servers. This class handles protocol message dispatching, request validation, and the core server lifecycle without the convenience abstractions provided by FastMCP. For high-level server development using decorators and automatic schema generation, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For details about session management and client communication, see [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md).",
  "### On this page - [Low-Level Server Architecture](#low-level-server-architecture.md) - [Server Class Overview](#server-class-overview.md) - [Handler Registration System](#handler-registration-system.md) - [Request Processing Architecture](#request-processing-architecture.md) - [Tool System Architecture](#tool-system-architecture.md) - [Context Management](#context-management.md) - [Integration with Transport Layer](#integration-with-transport-layer.md)",
  "## Context Management The Server uses Python's `contextvars` module to provide request-scoped context accessible throughout the request processing pipeline. ``` ``` **Request Context Structure** The `RequestContext` is created in `_handle_request` at [src/mcp/server/lowlevel/server.py677-684](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L677-L684) with: - Request ID and metadata from the message - `ServerSession` instance for client communication - Lifespan context from the server's lifespan manager - Optional request-specific data **Context Access** Handlers can access the current request context via the `request_context` property at [src/mcp/server/lowlevel/server.py232-236](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L232-L236) which retrieves the context variable or raises `LookupError` if called outside a request. Sources: [src/mcp/server/lowlevel/server.py105](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L105-L105) [src/mcp/shared/context.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/context.py) [src/mcp/server/lowlevel/server.py677-702](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L677-L702)",
  "### Transport Comparison | Transport | Use Case | Pros | Cons | | -------------- | --------------------------------------- | ---------------------------------------- | ----------------------------- | | StreamableHTTP | Web services, production deployments | Session management, resumption, scalable | Complex, requires HTTP server | | SSE | Real-time applications, event-driven | Simple, real-time events | Limited to web contexts | | STDIO | CLI tools, development, local processes | Direct process control, simple setup | Process management complexity |",
  "### Starlette Foundation FastAPI builds on Starlette's ASGI foundation, inheriting: - ASGI application protocol implementation - Basic routing and middleware support - Request/Response objects - Exception handling framework - WebSocket support The `FastAPI` class extends `Starlette` while the `APIRouter` class extends `starlette.routing.Router`.",
  "### Starlette Foundation FastAPI builds on Starlette's ASGI foundation, inheriting: - ASGI application protocol implementation - Basic routing and middleware support - Request/Response objects - Exception handling framework - WebSocket support The `FastAPI` class extends `Starlette` while the `APIRouter` class extends `starlette.routing.Router`.",
  "# Core Architecture Relevant source files - [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py) FastAPI's core architecture consists of several interconnected systems that work together to process HTTP requests, validate data, inject dependencies, and generate responses. This page provides an overview of these core components and their relationships. For detailed information about specific subsystems, see the dedicated pages: [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md), [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md), [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md), [Response Handling](fastapi/fastapi/2.4-response-handling.md), [Security Components](fastapi/fastapi/2.5-security-components.md), [Settings Management](fastapi/fastapi/2.6-settings-management.md), and [Error Handling](fastapi/fastapi/2.7-error-handling.md).",
  "# Error Handling Relevant source files - [docs/en/docs/tutorial/background-tasks.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md) - [docs/en/docs/tutorial/extra-data-types.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/extra-data-types.md) - [docs/en/docs/tutorial/handling-errors.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md) - [docs/en/docs/tutorial/security/first-steps.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/first-steps.md) - [docs/en/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/oauth2-jwt.md) - [docs/en/docs/tutorial/security/simple-oauth2.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/simple-oauth2.md) - [docs/en/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md) - [docs/ja/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/tutorial/security/oauth2-jwt.md) - [docs/pt/docs/tutorial/cookie-param-models.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/tutorial/cookie-param-models.md) - [docs/zh/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/tutorial/sql-databases.md) - [fastapi/exception\\_handlers.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exception_handlers.py) - [fastapi/exceptions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py) - [tests/test\\_multi\\_body\\_errors.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_multi_body_errors.py) - [tests/test\\_multi\\_query\\_errors.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_multi_query_errors.py) - [tests/test\\_put\\_no\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_put_no_body.py) - [tests/test\\_tutorial/test\\_handling\\_errors/test\\_tutorial003.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_handling_errors/test_tutorial003.py) - [tests/test\\_tutorial/test\\_handling\\_errors/test\\_tutorial004.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_handling_errors/test_tutorial004.py) - [tests/test\\_tutorial/test\\_handling\\_errors/test\\_tutorial005.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_handling_errors/test_tutorial005.py) - [tests/test\\_tutorial/test\\_handling\\_errors/test\\_tutorial006.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_handling_errors/test_tutorial006.py) - [tests/test\\_ws\\_router.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_ws_router.py) FastAPI implements a comprehensive exception hierarchy and handler system that manages errors from request validation, application logic, and WebSocket connections. The system centers around specific exception classes and handler functions that process different error types while maintaining automatic OpenAPI documentation integration.",
  "### Exception Handler Inheritance and Reuse ``` ``` **Exception Handler Reuse Pattern** Sources: [docs/en/docs/tutorial/handling-errors.md249-256](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L249-L256) FastAPI provides importable default exception handlers from `fastapi.exception_handlers` that can be reused within custom exception handling logic. This allows developers to add custom processing (like logging) while maintaining standard error response formats.",
  "# Response Handling Relevant source files - [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py) This document covers how FastAPI processes and serializes responses from path operation functions into HTTP responses. It explains the default response behavior, serialization pipeline, response model validation, and custom response classes. For information about request handling and parameter validation, see [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md). For error handling mechanisms, see [Error Handling](fastapi/fastapi/2.7-error-handling.md).",
  "### Response Class Hierarchy FastAPI supports various response classes that inherit from Starlette's `Response`: | Response Class | Media Type | Use Case | | ------------------- | ------------------ | ------------------------------------- | | `JSONResponse` | `application/json` | Default, automatic JSON serialization | | `ORJSONResponse` | `application/json` | High-performance JSON with `orjson` | | `HTMLResponse` | `text/html` | HTML content | | `PlainTextResponse` | `text/plain` | Plain text responses | | `RedirectResponse` | N/A | HTTP redirects | | `FileResponse` | Based on file | File downloads | | `StreamingResponse` | Custom | Streaming content |",
  "### StreamableHTTPServerTransport The `StreamableHTTPServerTransport` class handles individual HTTP connections with support for both SSE streaming and JSON responses: **Operating Modes:** - **SSE Mode** (default): Responses are streamed via Server-Sent Events - **JSON Mode**: Single JSON responses for each request (controlled by `is_json_response_enabled`) **HTTP Method Handling:** - `POST` - Processes JSON-RPC messages via `_handle_post_request()` - `GET` - Establishes SSE streams for server-initiated messages via `_handle_get_request()` - `DELETE` - Terminates sessions explicitly via `_handle_delete_request()` **Key Features:** - Session ID validation using `SESSION_ID_PATTERN` - Request stream management with `_request_streams` dictionary - Event storage integration via `EventStore` interface - Security validation through `TransportSecurityMiddleware` - Memory stream cleanup with `_clean_up_memory_streams()`",
  "### Request Context The `Context` object provides access to MCP capabilities and request metadata within tool and resource functions. ``` ``` **Context and Session Architecture** The context system enables: - **Logging**: Send log messages to clients via `LoggingMessageNotification` - **Progress**: Report operation progress via `ProgressNotification` - **Resource Access**: Read other resources via `ReadResourceRequest` - **User Interaction**: Request additional information via `ElicitRequest` - **LLM Sampling**: Generate text via `CreateMessageRequest`"
]