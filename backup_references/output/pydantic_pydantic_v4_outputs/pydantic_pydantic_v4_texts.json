[
  "Field System | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Field System Relevant source files - [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) - [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) - [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) - [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) - [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py)",
  "The Pydantic Field System provides the foundation for defining, validating, and customizing fields within Pydantic models. This page explains how fields are defined, their internal representation, and how they interact with the model validation and serialization processes. For information about validators that operate on fields, see [Validators](pydantic/pydantic/4.1-validators.md). For model configuration options affecting fields, see [Model Configuration](pydantic/pydantic/2.3-model-configuration.md). ## Overview The Field System consists of several key components: 1. **Field Definition**: How fields are declared in model classes using type annotations and the `Field()` function 2. **FieldInfo**: The internal class that stores field metadata and configuration 3. **Field Processing**: How declared fields are processed during model creation 4. **Field Lifecycle**: How fields behave during validation, access, and serialization ``` ``` Sources: [pydantic/fields.py99-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L99-L206) [pydantic/main.py203-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L203-L206) ## Defining Fields Fields in Pydantic models are defined through type annotations, with optional default values and field customizations. ### Basic Field Definition The simplest way to define a field is with a type annotation: ``` ``` Fields without default values are **required** fields, while fields with default values are **optional**. Sources: [tests/test\\_main.py56-65](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L56-L65) [tests/test\\_main.py519-533](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L519-L533) ### Field Customization with Field() For more advanced field configuration, use the `Field()` function: ``` ``` The `Field()` function accepts numerous parameters to customize field behavior, including: - **default**: Default value for the field - **default\\_factory**: Callable that returns a default value - **alias**: Alternative name for the field during parsing - **validation\\_alias**: Alias used during validation - **serialization\\_alias**: Alias used during serialization - **title**, **description**: Documentation metadata - **examples**: Example values for documentation - **exclude**: Whether to exclude in serialization - **Validation constraints**: gt, ge, lt, le, multiple\\_of, min\\_length, max\\_length, pattern, etc. Sources: [pydantic/fields.py209-290](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L209-L290) [tests/test\\_main.py154-166](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L154-L166) ## Field Information (FieldInfo) The `FieldInfo` class is the internal representation of field metadata in Pydantic. Each field defined in a model is represented by a `FieldInfo` instance. ``` ``` Sources: [pydantic/fields.py99-187](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L99-L187) [pydantic/fields.py589-673](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L589-L673) ### Key FieldInfo Attributes - **annotation**: The field's type annotation - **default**: The default value for the field - **default\\_factory**: Callable that returns a default value - **alias**: Alternative name for the field (used for both validation and serialization) - **validation\\_alias/serialization\\_alias**: Specific aliases for validation and serialization - **metadata**: List of constraints and validation rules ### Accessing Field Information Model fields can be accessed through the `model_fields` class attribute: ``` ``` Sources: [pydantic/main.py266-286](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L266-L286) [tests/test\\_main.py110-112](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L110-L112) ## Field Processing Flow When a Pydantic model is defined, the fields go through a processing flow to collect and validate field definitions. ``` ```",
  "Sources: [pydantic/\\_internal/\\_model\\_construction.py363-455](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L363-L455) [pydantic/\\_internal/\\_model\\_construction.py221-224](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L221-L224) ### Field Collection Process 1. During model class creation, the `ModelMetaclass` processes class attributes 2. Type annotations from `__annotations__` are analyzed 3. Attributes with type annotations become model fields 4. `Field()` instances are processed to collect metadata 5. Other attributes without annotations are checked for possible field intent (with warnings) 6. Fields are stored in the class's `__pydantic_fields__` attribute Sources: [pydantic/\\_internal/\\_model\\_construction.py80-258](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L258) [pydantic/fields.py291-366](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L291-L366) ## Field Types and Validation Pydantic supports a wide range of field types, each with appropriate validation: | Type Category | Examples | Validation Behavior | | ----------------- | ---------------------------------- | --------------------------------------------------------- | | Simple Types | `int`, `float`, `str`, `bool` | Type coercion and standard validation | | Collection Types | `list`, `set`, `tuple`, `dict` | Item-by-item validation with inner type checking | | Complex Types | `datetime`, `UUID`, custom classes | Type-specific validation logic | | Union Types | `Union[str, int]`, `Optional[str]` | Try each type in sequence | | Constrained Types | `conint`, `constr` | Apply additional constraints | | Custom Types | User-defined classes | Validate using schema from `__get_pydantic_core_schema__` | Fields can have validators defined at several levels: - Standard type validation - Constraints defined in `Field()` - Model-level validators (see [Validators](pydantic/pydantic/4.1-validators.md)) Sources: [tests/test\\_edge\\_cases.py62-176](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py#L62-L176) [tests/test\\_edge\\_cases.py177-295](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py#L177-L295) ## Field Lifecycle Fields in Pydantic go through a complete lifecycle from definition to usage: ``` ``` Sources: [pydantic/main.py243-261](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L243-L261) [pydantic/main.py421-477](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L421-L477) ### Model Instantiation During model instantiation, Pydantic: 1. Takes input data and matches it to field names or aliases 2. Validates each field's value against its expected type and constraints 3. Stores successfully validated values in the model instance ### Field Access Once a model is instantiated, fields can be accessed as normal attributes: ``` ``` ### Serialization When a model is serialized (e.g., via `model_dump()` or `model_dump_json()`), fields are: 1. Converted to their serialized form (based on field type and serializers) 2. Included/excluded based on field configuration and serialization options 3. Named according to serialization aliases if defined Sources: [pydantic/main.py421-533](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L421-L533) [tests/test\\_json.py151-188](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L151-L188) ## Advanced Field Features ### Field Aliases Aliases provide alternative names for fields, useful for mapping to external data formats: ``` ``` - **alias**: Used for both validation and serialization - **validation\\_alias**: Used only during validation (parsing input) - **serialization\\_alias**: Used only during serialization (output) Aliases can be simple strings or complex paths using dot notation (for nested data) or AliasPath objects.",
  "Sources: [pydantic/fields.py231-235](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L231-L235) [tests/test\\_main.py499-506](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L499-L506) ### Default Values and Factories Fields can have static default values or dynamic defaults via factory functions: ``` ``` When a default factory is provided: - It's called when a field value isn't provided - It can optionally use already validated data if the factory accepts a parameter Sources: [pydantic/fields.py226-230](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L226-L230) [pydantic/fields.py609-645](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L609-L645) ### Field Constraints Fields can have various constraints applied directly in the `Field()` function: ``` ``` These constraints are stored in the field's metadata and applied during validation. Sources: [pydantic/fields.py191-207](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L191-L207) [tests/test\\_edge\\_cases.py616-631](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py#L616-L631) ### Frozen Fields Individual fields can be marked as immutable with `frozen=True`: ``` ``` Attempts to modify a frozen field will raise a ValidationError. Sources: [pydantic/fields.py247](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L247-L247) [tests/test\\_main.py591-611](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L591-L611) ### Private Attributes Private attributes are defined using underscore-prefixed names and aren't included in validation or serialization processes: ``` ``` For more control, the `PrivateAttr` class can be used: ``` ``` Sources: [tests/test\\_create\\_model.py64-72](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py#L64-L72) [pydantic/fields.py437-441](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L437-L441) ## Integration with Model System The Field System integrates deeply with Pydantic's model system: ``` ``` Sources: [pydantic/\\_internal/\\_model\\_construction.py80-258](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L258) [pydantic/main.py243-405](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L243-L405) ### Fields and Validation During validation: 1. Input data is matched to fields by name or aliases 2. Each field's value is validated against its type and constraints 3. Default values are applied for missing fields 4. Validated values are stored in the model instance ### Fields and Serialization During serialization: 1. Field values are retrieved from the model instance 2. Values are converted according to their serialization rules 3. Fields are included/excluded based on configuration and options 4. Field names are mapped to aliases if specified ## Practical Examples ### Complete Example with Various Field Types ``` ``` ### Example with Aliases ``` ``` ## Conclusion The Field System is a fundamental part of Pydantic that enables type annotations to be transformed into powerful validation, documentation, and serialization tools. By leveraging the features of the Field System, you can create robust data models with precise validation rules and customized serialization behavior. Key takeaways: - Fields are defined using type annotations and the `Field()` function - Each field has a corresponding `FieldInfo` object storing its metadata - Fields support various validation constraints, aliases, and customization options - The Field System integrates with Pydantic's validation and serialization processes Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Field System](#field-system.md) - [Overview](#overview.md) - [Defining Fields](#defining-fields.md) - [Basic Field Definition](#basic-field-definition.md) - [Field Customization with Field()](#field-customization-with-field.md) - [Field Information (FieldInfo)](#field-information-fieldinfo.md) - [Key FieldInfo Attributes](#key-fieldinfo-attributes.md) - [Accessing Field Information](#accessing-field-information.md) - [Field Processing Flow](#field-processing-flow.md) - [Field Collection Process](#field-collection-process.md) - [Field Types and Validation](#field-types-and-validation.md) - [Field Lifecycle](#field-lifecycle.md) - [Model Instantiation](#model-instantiation.md) - [Field Access](#field-access.md) - [Serialization](#serialization.md) - [Advanced Field Features](#advanced-field-features.md) - [Field Aliases](#field-aliases.md) - [Default Values and Factories](#default-values-and-factories.md) - [Field Constraints](#field-constraints.md) - [Frozen Fields](#frozen-fields.md) - [Private Attributes](#private-attributes.md) - [Integration with Model System](#integration-with-model-system.md) - [Fields and Validation](#fields-and-validation.md) - [Fields and Serialization](#fields-and-serialization.md) - [Practical Examples](#practical-examples.md) - [Complete Example with Various Field Types](#complete-example-with-various-field-types.md) - [Example with Aliases](#example-with-aliases.md) - [Conclusion](#conclusion.md)",
  "Constrained Types | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Constrained Types Relevant source files - [pydantic/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py) - [pydantic/errors.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/errors.py) - [pydantic/networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py) - [pydantic/types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py) - [pydantic/validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validators.py) - [tests/test\\_networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py) - [tests/test\\_types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py)",
  "Constrained Types in Pydantic provide a way to define additional restrictions on basic Python types, such as strings, integers, floats, and collections. These types ensure that values not only match the expected type but also comply with specific constraints like minimum/maximum values, string patterns, or collection lengths. This page explains the various constrained types available in Pydantic, how they are implemented, and how to use them effectively. For information about custom types and validators, see [Type System](pydantic/pydantic/3-type-system.md). ## Constrained Types Overview Constrained types are a key part of Pydantic's validation system. They extend basic Python types with additional validation requirements that are checked during model instantiation. ``` ``` Sources: [pydantic/types.py149-832](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L149-L832) [pydantic/types.py836-904](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L836-L904) The constrained types in Pydantic come in two forms: 1. **Constraint Functions**: Functions like `constr()`, `conint()` that return a constrained version of a type 2. **Predefined Constrained Types**: Ready-to-use types like `PositiveInt`, `StrictStr`, etc. Since Pydantic v2, the recommended approach is to use Python's `Annotated` type with field constraints rather than the legacy constraint functions. ## Numeric Constrained Types Pydantic provides constrained types for integers, floats, and decimals with various validation rules. ### Integer Constraints ``` ``` Sources: [pydantic/types.py151-235](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L151-L235) [pydantic/types.py238-363](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L238-L363) The `conint` function creates a constrained integer type with the following parameters: - `strict`: When True, input must be an actual integer (not float or string) - `gt`: Greater than (exclusive lower bound) - `ge`: Greater than or equal (inclusive lower bound) - `lt`: Less than (exclusive upper bound) - `le`: Less than or equal (inclusive upper bound) - `multiple_of`: Input must be a multiple of this value Pydantic also provides several predefined integer constrained types: | Type | Description | Implementation | | ---------------- | -------------------------------- | --------------------------------------- | | `PositiveInt` | Integer > 0 | `Annotated[int, annotated_types.Gt(0)]` | | `NegativeInt` | Integer < 0 | `Annotated[int, annotated_types.Lt(0)]` | | `NonNegativeInt` | Integer ≥ 0 | `Annotated[int, annotated_types.Ge(0)]` | | `NonPositiveInt` | Integer ≤ 0 | `Annotated[int, annotated_types.Le(0)]` | | `StrictInt` | Integer validated in strict mode | `Annotated[int, Strict()]` | ### Float Constraints ``` ``` Sources: [pydantic/types.py411-497](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L411-L497) [pydantic/types.py500-645](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L500-L645) The `confloat` function creates a constrained float type with the same parameters as `conint`, plus: - `allow_inf_nan`: When True, allows infinity and NaN values Predefined float constrained types include: | Type | Description | Implementation | | ------------------ | ------------------------------ | ----------------------------------------- | | `PositiveFloat` | Float > 0 | `Annotated[float, annotated_types.Gt(0)]` | | `NegativeFloat` | Float < 0 | `Annotated[float, annotated_types.Lt(0)]` | | `NonNegativeFloat` | Float ≥ 0 | `Annotated[float, annotated_types.Ge(0)]` | | `NonPositiveFloat` | Float ≤ 0 | `Annotated[float, annotated_types.Le(0)]` | | `StrictFloat` | Float validated in strict mode | `Annotated[float, Strict(True)]` | | `FiniteFloat` | Float that must be finite | `Annotated[float, AllowInfNan(False)]` | ## String Constrained Types Pydantic provides string constraints through the `constr` function and `StringConstraints` class. ``` ```",
  "Sources: [pydantic/types.py693-829](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L693-L829) [pydantic/types.py831-832](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L831-L832) The `constr` function creates a constrained string type with the following parameters: - `strip_whitespace`: When True, strips leading and trailing whitespace - `to_upper`: When True, converts the string to uppercase - `to_lower`: When True, converts the string to lowercase - `strict`: When True, input must be an actual string - `min_length`: Minimum string length - `max_length`: Maximum string length - `pattern`: Regex pattern that the string must match In Pydantic v2, the recommended approach is to use `Annotated` with `StringConstraints` instead of `constr`: ``` ``` ## Collection Constrained Types Pydantic provides constrained types for various collection types: lists, sets, frozensets, and bytes. ``` ``` Sources: [pydantic/types.py663-684](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L663-L684) [pydantic/types.py839-904](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L839-L904) ### Bytes Constraints The `conbytes` function creates a constrained bytes type with parameters: - `min_length`: Minimum length in bytes - `max_length`: Maximum length in bytes - `strict`: When True, input must be an actual bytes object ### List Constraints The `conlist` function creates a constrained list type with parameters: - `item_type`: The type of items in the list - `min_length`: Minimum number of items - `max_length`: Maximum number of items ### Set and FrozenSet Constraints The `conset` and `confrozenset` functions create constrained set and frozenset types with similar parameters: - `item_type`: The type of items in the set - `min_length`: Minimum number of items - `max_length`: Maximum number of items ## Usage Patterns ### Using Constrained Types in Models ``` ``` ### Modern Approach with Annotated ``` ``` ## Integration with Schema Generation Constrained types automatically generate appropriate schema information that is used for validation and JSON Schema generation. ``` ``` Sources: [pydantic/types.py151-235](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L151-L235) [pydantic/types.py411-497](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L411-L497) [pydantic/types.py750-828](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L750-L828) When a constrained type is used in a Pydantic model: 1. The constraint is transformed into an `Annotated` type during schema generation 2. The Pydantic validation engine uses these constraints to validate inputs 3. JSON Schema generation includes the constraints in the resulting schema ## Best Practices ### Prefer Annotated over Constraint Functions Pydantic recommends using `Annotated` with constraints rather than the legacy constraint functions: ``` ``` The `conX` functions will be deprecated in Pydantic 3.0 in favor of the `Annotated` approach, which provides better static type checking and IDE support. ### Common Use Cases 1. **Validation with Transformation**: ``` ``` 2. **Numeric Ranges**: ``` ``` 3. **Pattern Matching**: ``` ``` ## Testing Constrained Types When testing models with constrained types, it's important to test both valid and invalid inputs to ensure constraints are applied correctly: ``` ``` Sources: [tests/test\\_types.py741-821](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py#L741-L821) [tests/test\\_types.py246-347](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py#L246-L347) ## Related Features Constrained types work well with other Pydantic features: - **Field validators**: Apply custom validation logic beyond built-in constraints - **Type adapters**: Use constrained types with `TypeAdapter` for validation outside of models - **JSON Schema**: Constrained types generate appropriate JSON schema representations For more information on related features, see:",
  "- [Field System](pydantic/pydantic/2.2-field-system.md) for details on field configuration and validators - [Type Adapter](pydantic/pydantic/3.3-typeadapter.md) for using constrained types outside of models - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) for how constraints appear in JSON schemas Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Constrained Types](#constrained-types.md) - [Constrained Types Overview](#constrained-types-overview.md) - [Numeric Constrained Types](#numeric-constrained-types.md) - [Integer Constraints](#integer-constraints.md) - [Float Constraints](#float-constraints.md) - [String Constrained Types](#string-constrained-types.md) - [Collection Constrained Types](#collection-constrained-types.md) - [Bytes Constraints](#bytes-constraints.md) - [List Constraints](#list-constraints.md) - [Set and FrozenSet Constraints](#set-and-frozenset-constraints.md) - [Usage Patterns](#usage-patterns.md) - [Using Constrained Types in Models](#using-constrained-types-in-models.md) - [Modern Approach with Annotated](#modern-approach-with-annotated.md) - [Integration with Schema Generation](#integration-with-schema-generation.md) - [Best Practices](#best-practices.md) - [Prefer Annotated over Constraint Functions](#prefer-annotated-over-constraint-functions.md) - [Common Use Cases](#common-use-cases.md) - [Testing Constrained Types](#testing-constrained-types.md) - [Related Features](#related-features.md)",
  "RootModel and Computed Fields | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # RootModel and Computed Fields Relevant source files",
  "- [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py) - [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_serialize.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) - [tests/test\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py) This page documents two distinct but complementary features: **RootModel** for validating root-level values, and **Computed Fields** for adding dynamic, read-only properties to models that appear during serialization. For basic model functionality, see [BaseModel](pydantic/pydantic/2.1-basemodel.md). For field configuration and metadata, see [Field System](pydantic/pydantic/2.2-field-system.md). For serialization customization, see [Serializers](pydantic/pydantic/4.2-serializers.md). --- ## Overview **RootModel** enables validation of types that don't naturally fit into Pydantic's field-based structure. Instead of defining multiple fields, a RootModel wraps a single root value of any type (primitives, collections, custom types, etc.). **Computed Fields** are dynamic properties decorated with `@computed_field` that are calculated on-access and automatically included in serialization output. Unlike regular properties, computed fields appear in `model_dump()`, `model_dump_json()`, and JSON schema generation. --- ## RootModel ### Purpose and Design RootModel provides a way to validate and serialize root-level values that are not traditional models with named fields. This is useful for: - Wrapping primitive types with validation logic - Validating collection types (lists, dicts) at the root level - Creating type aliases with custom validation - Building discriminated union handlers - Parsing configuration formats where the entire structure is a single type **Sources:** [pydantic/root\\_model.py1-155](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L1-L155) ### Core Architecture ``` ``` **Sources:** [pydantic/root\\_model.py32-155](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L155) [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) ### Basic Usage",
  "The `root` field contains the validated value. RootModel can be instantiated with either a positional argument or keyword arguments: ``` ``` **Sources:** [pydantic/root\\_model.py60-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L60-L69) [tests/test\\_root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_root_model.py) ### Key Characteristics | Characteristic | Behavior | Rationale | | ------------------ | ---------------------------------------------------- | ------------------------------------------ | | Single field | Only `root` field exists | RootModel represents a single value | | Extra fields | Not supported (`model_config['extra']` raises error) | Would conflict with root-level validation | | Private attributes | Set to `None` | Root models don't support `_private` attrs | | Initialization | Accepts positional or keyword args | Flexible instantiation patterns | | Validation | Applied to `root` value | Standard validation pipeline | | Serialization | Returns root value directly in `model_dump()` | Not wrapped in a dict | **Sources:** [pydantic/root\\_model.py52-58](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L52-L58) [pydantic/root\\_model.py60-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L60-L69) ### Initialization Flow ``` ``` **Sources:** [pydantic/root\\_model.py60-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L60-L69) [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) ### Construction and Copying RootModel provides special methods for construction and copying: **model\\_construct**: Creates instances without validation ``` ``` **Copy operations**: Shallow and deep copy support via `__copy__` and `__deepcopy__` **Pickle support**: Via `__getstate__` and `__setstate__` for serialization **Sources:** [pydantic/root\\_model.py72-114](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L72-L114) [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py) ### Serialization Behavior Unlike regular models, RootModel's `model_dump()` returns the root value directly, not a dictionary: ``` ``` This behavior is controlled by the model's serialization schema and differs from BaseModel to match the semantic meaning of a \"root\" value. **Sources:** [pydantic/root\\_model.py116-144](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L116-L144) [tests/test\\_root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_root_model.py) --- ## Computed Fields ### Purpose and Design Computed fields are dynamic properties that: 1. Are calculated on-access (not stored in `__dict__`) 2. Automatically appear in serialization (`model_dump()`, `model_dump_json()`) 3. Generate JSON schema with `readOnly: true` 4. Can have custom serializers applied 5. Support property setters and deleters They bridge the gap between regular properties (not serialized) and model fields (stored and validated). **Sources:** [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66) ### Core Components ``` ``` **Sources:** [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) [pydantic/\\_internal/\\_decorators.py427](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L427-L427) [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py) ### Basic Usage The `@computed_field` decorator can be used directly or with the `@property` decorator: ``` ```",
  "**Sources:** [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66) ### Field Metadata and Configuration Computed fields support the same metadata as regular fields: | Parameter | Type | Purpose | Example | | ------------------- | ------ | --------------------------------------- | ------------------------------- | | `title` | `str` | JSON schema title | `title='Area'` | | `description` | `str` | Documentation | `description='Calculated area'` | | `examples` | `list` | Example values | `examples=[100, 200]` | | `json_schema_extra` | `dict` | Additional JSON schema properties | `json_schema_extra={'foo': 42}` | | `alias` | `str` | Serialization alias | `alias='the_area'` | | `repr` | `bool` | Include in `__repr__` (default: `True`) | `repr=False` | | `return_type` | `type` | Override inferred return type | `return_type=float` | **Sources:** [tests/test\\_computed\\_fields.py68-121](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L68-L121) [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) ### Computed Field Lifecycle ``` ``` **Sources:** [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) ### Property Setters and Deleters Computed fields can have setters and deleters like regular properties: ``` ``` **Sources:** [tests/test\\_computed\\_fields.py123-176](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L123-L176) ### Serialization Customization Computed fields can be customized with `@field_serializer`: ``` ``` **Sources:** [tests/test\\_computed\\_fields.py123-150](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L123-L150) [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) ### Cached Properties Computed fields work with `functools.cached_property` for performance: ``` ``` **Sources:** [tests/test\\_computed\\_fields.py178-214](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L178-L214) ### JSON Schema Generation Computed fields appear in JSON schema with `readOnly: true`: ``` ``` The `readOnly` flag indicates that the field is computed during serialization and cannot be provided during validation. **Sources:** [tests/test\\_computed\\_fields.py68-121](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L68-L121) [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py) ### Include/Exclude Behavior Computed fields respect include/exclude parameters in serialization: ``` ``` **Sources:** [tests/test\\_computed\\_fields.py287-309](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L287-L309) [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) --- ## Storage and Access Patterns ### Field vs Computed Field Comparison ``` ```",
  "| Feature | Regular Field | Computed Field | Regular Property | | -------------------- | ------------- | -------------- | ---------------- | | Validated at init | ✓ | ✗ | ✗ | | Stored in `__dict__` | ✓ | ✗ | ✗ | | In `model_dump()` | ✓ | ✓ | ✗ | | In JSON schema | ✓ | ✓ (readOnly) | ✗ | | Can have setter | ✗ | ✓ | ✓ | | Cached by default | ✓ | ✗ | ✗ | | Computed on access | ✗ | ✓ | ✓ | **Sources:** [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66) [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) --- ## Integration with Validation and Serialization ### Computed Fields in Validation Pipeline Computed fields are **not** part of the validation pipeline. They are only evaluated during serialization or when accessed as properties. ``` ``` **Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py) ### Decorator Processing Flow ``` ``` **Sources:** [pydantic/\\_internal/\\_decorators.py427](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L427-L427) [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) --- ## Code Entity Reference ### RootModel Implementation | Class/Function | Location | Purpose | | ----------------------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------------------- | | `RootModel` | [pydantic/root\\_model.py32](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L32) | Main RootModel class definition | | `RootModel.__init__` | [pydantic/root\\_model.py60-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L60-L69) | Initialize with root value | | `RootModel.model_construct` | [pydantic/root\\_model.py72-86](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L72-L86) | Construct without validation | | `RootModel.__init_subclass__` | [pydantic/root\\_model.py52-58](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L52-L58) | Check extra config not set | | `_RootModelMetaclass` | [pydantic/root\\_model.py25](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L25-L25) | Metaclass for RootModel | **Sources:** [pydantic/root\\_model.py1-155](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L1-L155) ### Computed Field Implementation",
  "| Class/Function | Location | Purpose | | -------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- | | `@computed_field` | [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) | Decorator for computed fields | | `ComputedFieldInfo` | [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) | Metadata container for computed fields | | `DecoratorInfos.computed_fields` | [pydantic/\\_internal/\\_decorators.py427](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L427-L427) | Storage in decorator info | | `model_computed_fields` | [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) | ClassVar dict of computed fields | **Sources:** [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py) ### Schema Generation | Function | Location | Purpose | | --------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------- | | `computed_field_schema()` | [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) | Generate schema for computed field | | `_computed_field_common_schema()` | [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) | Common schema logic | **Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [RootModel and Computed Fields](#rootmodel-and-computed-fields.md) - [Overview](#overview.md) - [RootModel](#rootmodel.md) - [Purpose and Design](#purpose-and-design.md) - [Core Architecture](#core-architecture.md) - [Basic Usage](#basic-usage.md) - [Key Characteristics](#key-characteristics.md) - [Initialization Flow](#initialization-flow.md) - [Construction and Copying](#construction-and-copying.md) - [Serialization Behavior](#serialization-behavior.md) - [Computed Fields](#computed-fields.md) - [Purpose and Design](#purpose-and-design-1.md) - [Core Components](#core-components.md) - [Basic Usage](#basic-usage-1.md) - [Field Metadata and Configuration](#field-metadata-and-configuration.md) - [Computed Field Lifecycle](#computed-field-lifecycle.md) - [Property Setters and Deleters](#property-setters-and-deleters.md) - [Serialization Customization](#serialization-customization.md) - [Cached Properties](#cached-properties.md) - [JSON Schema Generation](#json-schema-generation.md) - [Include/Exclude Behavior](#includeexclude-behavior.md) - [Storage and Access Patterns](#storage-and-access-patterns.md) - [Field vs Computed Field Comparison](#field-vs-computed-field-comparison.md) - [Integration with Validation and Serialization](#integration-with-validation-and-serialization.md) - [Computed Fields in Validation Pipeline](#computed-fields-in-validation-pipeline.md) - [Decorator Processing Flow](#decorator-processing-flow.md) - [Code Entity Reference](#code-entity-reference.md) - [RootModel Implementation](#rootmodel-implementation.md) - [Computed Field Implementation](#computed-field-implementation.md) - [Schema Generation](#schema-generation.md)",
  "Schema Generation | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Schema Generation Relevant source files - [pydantic/\\_internal/\\_core\\_metadata.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_metadata.py) - [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) - [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py) - [pyproject.toml](https://github.com/pydantic/pydantic/blob/76ef0b08/pyproject.toml) - [tests/test\\_datetime.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_datetime.py) - [tests/test\\_json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py) Schema generation is the process that converts Python types and annotations into Pydantic's internal schema representation and JSON Schema. This page focuses on how Pydantic transforms type annotations into both core schemas (used internally for validation and serialization) and JSON schemas (for external documentation and compatibility).",
  "For information about how to use JSON Schema with Pydantic models, see the relevant documentation section. ## Schema Generation Architecture Pydantic's schema generation involves two main phases: core schema generation and JSON schema generation. The core schema is an internal representation used for validation and serialization, while the JSON schema follows the standard JSON Schema specification for external use. ``` ``` Sources: [pydantic/\\_internal/\\_generate\\_schema.py318-319](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L318-L319) [pydantic/json\\_schema.py216-249](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L216-L249) ## Core Schema Generation The core schema generation is handled by the `GenerateSchema` class, which converts Python types to pydantic-core schemas. It's a comprehensive system that supports a wide variety of Python types and provides the foundation for Pydantic's validation and serialization capabilities. ``` ``` Sources: [pydantic/\\_internal/\\_generate\\_schema.py318-343](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L318-L343) [pydantic/\\_internal/\\_generate\\_schema.py679-702](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L702) ### Type Matching and Schema Mapping The core schema generation uses a type matching system to map Python types to appropriate schema generation methods. The `match_type` method contains the primary mapping logic: ``` ``` Sources: [pydantic/\\_internal/\\_generate\\_schema.py991-1042](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L991-L1042) ### Schema Generation Process The main entry point for generating a core schema is the `generate_schema` method. The process involves: 1. Checking if the type implements `__get_pydantic_core_schema__` for custom handling 2. Resolving forward references and type variables 3. Mapping the type to an appropriate schema generation method 4. Recursively processing nested types 5. Adding metadata and customizations to the schema Sources: [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) ## JSON Schema Generation Once the core schema is created, it can be converted to a JSON Schema using the `GenerateJsonSchema` class. This transformation enables compatibility with external tools and provides a standardized format for documentation. ``` ``` Sources: [pydantic/json\\_schema.py216-426](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L216-L426) ### JSON Schema Modes The JSON schema generation supports two modes: - **Validation**: Defines the schema for input validation, including constraints and requirements - **Serialization**: Defines the schema for output serialization, potentially with different rules ``` ``` Sources: [pydantic/json\\_schema.py79-87](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L79-L87) [pydantic/json\\_schema.py378-425](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L378-L425) ### JSON Schema Type Handlers Similar to the core schema generation, the JSON schema generation maps different core schema types to appropriate JSON schema handlers: ``` ``` Sources: [pydantic/json\\_schema.py427-566](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L427-L566) ## Custom Schema Generation Both the core schema generation and JSON schema generation support customization through various mechanisms: ### Custom Core Schema Generation Custom types can define how they're converted to core schemas by implementing the `__get_pydantic_core_schema__` method: ``` ``` Sources: [pydantic/\\_internal/\\_generate\\_schema.py850-890](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L850-L890) ### Custom JSON Schema Generation Similarly, custom types can define their JSON Schema representation by using core schema metadata or implementing custom hooks: ``` ```",
  "Sources: [pydantic/\\_internal/\\_core\\_metadata.py13-45](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_metadata.py#L13-L45) [pydantic/json\\_schema.py504-565](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L504-L565) ## Schema Reference Handling Both schema generation systems handle references to avoid duplicating schemas for the same types. The core schema uses a definition registry, while JSON Schema uses standard `$ref` references: ``` ``` The reference handling ensures efficient schema representation and prevents circular references from causing infinite recursion. Sources: [pydantic/\\_internal/\\_generate\\_schema.py723-736](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L723-L736) [pydantic/json\\_schema.py140-214](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L140-L214) ## Working with Schema Generation Schema generation is typically handled automatically by Pydantic, but understanding its mechanisms helps when: 1. Implementing custom types with specific validation or serialization behavior 2. Creating advanced validation rules that combine multiple types 3. Working with tools that consume JSON Schema (like API documentation tools) 4. Debugging validation and serialization issues To directly access the schema generation functionality: - **Core Schema**: Use `model.__pydantic_core_schema__` to access the core schema of a model - **JSON Schema**: Use `model.model_json_schema()` to generate a JSON schema for a model Sources: [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) [pydantic/json\\_schema.py378-425](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L378-L425) ## Schema Validation and Serialization The generated schemas are used for both validation and serialization: | Purpose | Schema Type | Description | | -------------- | ----------- | ------------------------------------------------------------- | | Validation | Core Schema | Used to create validators that check incoming data | | Serialization | Core Schema | Used to create serializers that convert data to output format | | Documentation | JSON Schema | Provides standardized documentation of the data model | | External Tools | JSON Schema | Enables integration with tools that understand JSON Schema | Sources: [pydantic/\\_internal/\\_generate\\_schema.py318-319](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L318-L319) [pydantic/json\\_schema.py79-87](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L79-L87) Schema generation is a fundamental part of Pydantic's functionality, serving as the bridge between Python's type system and the validation, serialization, and documentation capabilities that make Pydantic powerful. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Schema Generation](#schema-generation.md) - [Schema Generation Architecture](#schema-generation-architecture.md) - [Core Schema Generation](#core-schema-generation.md) - [Type Matching and Schema Mapping](#type-matching-and-schema-mapping.md) - [Schema Generation Process](#schema-generation-process.md) - [JSON Schema Generation](#json-schema-generation.md) - [JSON Schema Modes](#json-schema-modes.md) - [JSON Schema Type Handlers](#json-schema-type-handlers.md) - [Custom Schema Generation](#custom-schema-generation.md) - [Custom Core Schema Generation](#custom-core-schema-generation.md) - [Custom JSON Schema Generation](#custom-json-schema-generation.md) - [Schema Reference Handling](#schema-reference-handling.md) - [Working with Schema Generation](#working-with-schema-generation.md) - [Schema Validation and Serialization](#schema-validation-and-serialization.md)",
  "Serializers | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Serializers Relevant source files",
  "- [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py) - [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_serialize.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) - [tests/test\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py) Pydantic's serialization system converts model instances into serializable formats such as Python dictionaries or JSON strings. This page explains how serializers work in Pydantic, including field serializers, model serializers, and functional serializers. For information about validators (which handle input data validation), see [Validators](pydantic/pydantic/4.1-validators.md). ## Overview of the Serialization System In Pydantic, serialization is the process of converting a model instance into a simplified representation suitable for storage or transmission. While validation transforms input data into model instances, serialization converts model instances back into primitive data types. ``` ``` Sources: - [tests/test\\_serialize.py1-29](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L1-L29) - [pydantic/functional\\_serializers.py1-20](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L1-L20) ## Core Serialization Components Pydantic offers several components for customizing serialization behavior: ``` ``` Sources: - [pydantic/functional\\_serializers.py18-165](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L18-L165) - [pydantic/\\_internal/\\_decorators.py90-130](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L90-L130) ### Serialization Modes Serializers can operate in two modes: 1. **Plain mode**: The serializer receives the value and returns a transformed value 2. **Wrap mode**: The serializer receives the value and a handler function, allowing for more complex transformations Additionally, serializers can be configured to run in specific scenarios using the `when_used` parameter:",
  "| `when_used` value | Python serialization | JSON serialization | When value is None | | -------------------- | -------------------- | ------------------ | ------------------ | | `\"always\"` (default) | Yes | Yes | Yes | | `\"json\"` | No | Yes | Yes | | `\"unless-none\"` | Yes | Yes | No | | `\"json-unless-none\"` | No | Yes | No | Sources: - [tests/test\\_serialize.py82-197](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L82-L197) - [pydantic/functional\\_serializers.py45-52](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L45-L52) ## Field Serializers Field serializers allow you to customize the serialization of individual model fields. They can be applied using the `@field_serializer` decorator. ``` ``` ### Using the field\\_serializer Decorator The `@field_serializer` decorator is used to define custom serialization logic for specific fields: ``` ``` The decorator accepts the following parameters: - `field`: Field name(s) to which the serializer should be applied - `mode`: Serialization mode (`\"plain\"` or `\"wrap\"`) - `when_used`: When the serializer should be applied (`\"always\"`, `\"json\"`, `\"unless-none\"`, or `\"json-unless-none\"`) - `return_type`: The return type of the serializer function (optional) Sources: - [tests/test\\_serialize.py148-197](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L148-L197) - [tests/test\\_serialize.py225-271](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L225-L271) - [pydantic/\\_internal/\\_decorators.py90-111](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L90-L111) ### Field Serializer Signature Field serializers can have several valid function signatures: ``` ``` The `info` parameter provides context about the serialization process, including the field name and serialization mode. Sources: - [tests/test\\_serialize.py225-271](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L225-L271) - [pydantic/\\_internal/\\_decorators.py90-111](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L90-L111) ## Functional Serializers Functional serializers are used with the `Annotated` type to define custom serialization logic for specific types. This allows you to reuse serialization logic across multiple models. ``` ``` Pydantic provides two main types of functional serializers: 1. **PlainSerializer**: Applies a transformation function directly to the value 2. **WrapSerializer**: Provides both the value and a handler function for more complex transformations ### PlainSerializer ``` ``` The `PlainSerializer` class accepts: - `func`: The serializer function - `return_type`: The return type of the serializer (optional) - `when_used`: When the serializer should be applied (optional) Sources: - [tests/test\\_serialize.py82-102](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L82-L102) - [pydantic/functional\\_serializers.py18-86](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L18-L86) ### WrapSerializer ``` ``` The `WrapSerializer` class accepts: - `func`: The serializer function (which receives both a value and a handler) - `return_type`: The return type of the serializer (optional) - `when_used`: When the serializer should be applied (optional) Sources: - [tests/test\\_serialize.py104-129](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L104-L129) - [pydantic/functional\\_serializers.py89-247](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L89-L247) ## Model Serializers Model serializers allow you to customize the serialization of an entire model. This is useful when you need complete control over the serialization process. ``` ``` ### Using the model\\_serializer Decorator The `@model_serializer` decorator is used to define custom serialization logic for an entire model: ``` ``` The decorator accepts:",
  "- `mode`: Serialization mode (`\"plain\"` or `\"wrap\"`) - `when_used`: When the serializer should be applied - `return_type`: The return type of the serializer function (optional) Sources: - [tests/test\\_serialize.py374-464](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L374-L464) - [pydantic/\\_internal/\\_decorators.py113-130](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L113-L130) ### Model Serializer Modes Model serializers can operate in two modes: 1. **Plain mode**: The serializer has complete control over the serialization process ``` ``` 2. **Wrap mode**: The serializer receives the standard serialized output and can modify it ``` ``` In wrap mode, the handler function performs the standard serialization, allowing you to modify the result before returning it. Sources: - [tests/test\\_serialize.py374-422](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L374-L422) - [tests/test\\_serialize.py423-464](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L423-L464) ## Serialization Process The serialization process in Pydantic involves converting model instances to Python dictionaries or JSON strings. This is handled by the `model_dump()` and `model_dump_json()` methods. ``` ``` ### Core Serialization Methods Pydantic models provide two main methods for serialization: 1. **model\\_dump()**: Converts a model instance to a Python dictionary 2. **model\\_dump\\_json()**: Converts a model instance to a JSON string These methods accept various parameters: - `mode`: Serialization mode (`\"python\"` or `\"json\"`) - `include`: Fields to include in the output - `exclude`: Fields to exclude from the output - `by_alias`: Whether to use field aliases - `exclude_unset`: Whether to exclude unset fields - `exclude_defaults`: Whether to exclude fields with default values - `exclude_none`: Whether to exclude None values - `round_trip`: Whether to preserve exact types for round-trip conversions Sources: - [tests/test\\_serialize.py33-79](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L33-L79) - [pydantic/type\\_adapter.py376-535](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L376-L535) ### Serialization in TypeAdapter The `TypeAdapter` class provides similar serialization functionality for arbitrary types: - `dump_python()`: Serializes a value to a Python object - `dump_json()`: Serializes a value to a JSON string These methods have similar parameters to the model serialization methods. Sources: - [pydantic/type\\_adapter.py519-584](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L519-L584) ### Serialization with Computed Fields Computed fields (defined using the `@computed_field` decorator) are included in serialization by default: ``` ``` When serializing a `Rectangle` instance, the `area` field will be included in the output. Sources: - [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66) ## Advanced Serialization Techniques ### Conditional Serialization You can conditionally apply serializers based on the serialization mode: ``` ``` In this example, the serializer is only applied when serializing to JSON. Sources: - [tests/test\\_serialize.py171-182](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L171-L182) ### Serialization in Dataclasses Pydantic's dataclasses support the same serialization features as models: ``` ``` Sources: - [pydantic/dataclasses.py170-180](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L170-L180) - [tests/test\\_dataclasses.py1220-1272](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L1220-L1272) ### Root Model Serialization `RootModel` instances are serialized to their root value rather than a dictionary: ``` ``` Sources:",
  "- [pydantic/root\\_model.py119-146](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L119-L146) ## Integration with pydantic-core Pydantic uses `pydantic-core` for the actual serialization logic. The `SchemaSerializer` class from `pydantic-core` handles the serialization process. ``` ``` During model definition, Pydantic generates a serialization schema that incorporates all custom serializers. This schema is then used by `pydantic-core` to perform the actual serialization. Sources: - [pydantic/\\_internal/\\_schema\\_generation\\_shared.py1-142](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_schema_generation_shared.py#L1-L142) - [pydantic/\\_internal/\\_mock\\_val\\_ser.py1-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_mock_val_ser.py#L1-L69) ### Deferred Building and Mocking Pydantic supports deferred building of serializers. When `defer_build=True` is set in the config, Pydantic creates mock serializers that are replaced with real serializers when needed. This allows for forward references and circular dependencies in models: ``` ``` Sources: - [pydantic/\\_internal/\\_mock\\_val\\_ser.py70-110](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_mock_val_ser.py#L70-L110) - [pydantic/\\_internal/\\_dataclasses.py128-134](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L128-L134) ## Best Practices for Serializers 1. **Choose the right serializer type**: - Use field serializers for customizing individual fields - Use model serializers for complex model-level serialization - Use functional serializers for reusable serialization logic 2. **Respect the serialization mode**: - Use the `info.mode` parameter to adjust behavior based on the serialization mode - Use `when_used` to apply serializers only in specific scenarios 3. **Be mindful of performance**: - Use plain serializers for simple transformations - Use wrap serializers when you need to modify the default serialization behavior 4. **Handle None values appropriately**: - Use `when_used='unless-none'` to skip serialization of None values - Explicitly handle None values in your serializers to avoid errors 5. **Provide return types**: - Specify the `return_type` parameter to ensure correct JSON schema generation - Use type annotations in your serializer functions for better IDE support Sources: - [tests/test\\_serialize.py171-197](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L171-L197) - [pydantic/functional\\_serializers.py18-52](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L18-L52) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Serializers](#serializers.md) - [Overview of the Serialization System](#overview-of-the-serialization-system.md) - [Core Serialization Components](#core-serialization-components.md) - [Serialization Modes](#serialization-modes.md) - [Field Serializers](#field-serializers.md) - [Using the field\\_serializer Decorator](#using-the-field_serializer-decorator.md) - [Field Serializer Signature](#field-serializer-signature.md) - [Functional Serializers](#functional-serializers.md) - [PlainSerializer](#plainserializer.md) - [WrapSerializer](#wrapserializer.md) - [Model Serializers](#model-serializers.md) - [Using the model\\_serializer Decorator](#using-the-model_serializer-decorator.md) - [Model Serializer Modes](#model-serializer-modes.md) - [Serialization Process](#serialization-process.md) - [Core Serialization Methods](#core-serialization-methods.md) - [Serialization in TypeAdapter](#serialization-in-typeadapter.md) - [Serialization with Computed Fields](#serialization-with-computed-fields.md) - [Advanced Serialization Techniques](#advanced-serialization-techniques.md) - [Conditional Serialization](#conditional-serialization.md) - [Serialization in Dataclasses](#serialization-in-dataclasses.md) - [Root Model Serialization](#root-model-serialization.md) - [Integration with pydantic-core](#integration-with-pydantic-core.md) - [Deferred Building and Mocking](#deferred-building-and-mocking.md) - [Best Practices for Serializers](#best-practices-for-serializers.md)",
  "Validation and Serialization | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Validation and Serialization Relevant source files",
  "- [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py) - [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_serialize.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) - [tests/test\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py) This page provides an overview of Pydantic's validation and serialization architecture, explaining how data is validated when creating models and serialized when outputting data. For information on schema generation, see [Schema Generation](pydantic/pydantic/5-schema-generation.md). ## Overview At the core of Pydantic's functionality are two fundamental processes: 1. **Validation**: Converting and validating input data against model schema definitions 2. **Serialization**: Converting validated models into standard formats like Python dictionaries and JSON These processes work together to ensure that data flowing into and out of your application is consistent, type-safe, and properly formatted. ``` ``` Sources: [pydantic/functional\\_validators.py27-323](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py#L27-L323) [pydantic/functional\\_serializers.py19-89](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L19-L89) ## Validation Architecture Validation ensures that input data conforms to the defined model schema. Pydantic leverages a layered architecture that processes data through several validation stages. ### Core Validation Components ``` ``` Sources: [pydantic/functional\\_validators.py27-156](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py#L27-L156) [pydantic/\\_internal/\\_decorators.py30-154](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L30-L154) ### Validator Types and Functions Pydantic offers several types of validators that can be applied at different stages of the validation process: 1. **Field Validators**: Apply to specific fields using the `@field_validator` decorator 2. **Model Validators**: Apply to the entire model using the `@model_validator` decorator 3. **Functional Validators**: Used with `Annotated` types to apply validation to specific types The functional validators include:",
  "- **BeforeValidator**: Executes before the standard validation - **AfterValidator**: Executes after the standard validation - **PlainValidator**: Replaces the standard validation - **WrapValidator**: Wraps around the standard validation, providing access to both the input and the standard validation function ``` ``` Sources: [pydantic/functional\\_validators.py70-327](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py#L70-L327) [tests/test\\_validators.py51-156](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L51-L156) ### Validation Process When validating data, Pydantic follows this general process: 1. Apply any `BeforeValidator` or `WrapValidator` functions 2. Perform standard type coercion and validation 3. Apply any `AfterValidator` functions 4. Apply model-level validators 5. Construct the validated model This pipeline allows for powerful and flexible validation at different stages. ``` ``` Sources: [tests/test\\_validators.py87-156](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L87-L156) [tests/test\\_validators.py192-300](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L192-L300) ## Serialization Architecture Serialization converts validated Pydantic models into Python dictionaries, JSON, or other formats. Like validation, serialization uses a modular architecture. ### Core Serialization Components ``` ``` Sources: [pydantic/functional\\_serializers.py19-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L19-L195) [tests/test\\_serialize.py33-109](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L33-L109) ### Serializer Types Pydantic offers several types of serializers: 1. **Field Serializers**: Customize serialization for specific fields using the `@field_serializer` decorator 2. **Model Serializers**: Customize serialization for the entire model using the `@model_serializer` decorator 3. **Functional Serializers**: Used with `Annotated` types to apply serialization to specific types The functional serializers include: - **PlainSerializer**: Directly determines the serialized output - **WrapSerializer**: Wraps around the standard serialization, providing access to both the input and the standard serialization function ``` ``` Sources: [pydantic/functional\\_serializers.py19-89](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L19-L89) [pydantic/functional\\_serializers.py89-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L89-L195) ### Serialization Process When serializing data, Pydantic follows this general process: 1. Determine the serialization mode (Python, JSON) 2. Apply field-specific serializers 3. Apply model-level serializers 4. Convert to the target format (dict, JSON string) This pipeline allows for customizable serialization at different levels. ``` ``` Sources: [tests/test\\_serialize.py82-109](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L82-L109) [tests/test\\_serialize.py148-198](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L148-L198) ## TypeAdapter Integration The `TypeAdapter` class extends validation and serialization capabilities to arbitrary Python types, not just Pydantic models. ``` ``` TypeAdapter leverages the same core validation and serialization mechanisms as Pydantic models, but applies them to arbitrary types: ``` ``` Sources: [pydantic/type\\_adapter.py69-476](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L69-L476) [tests/test\\_type\\_adapter.py42-112](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L42-L112) ## Validation and Serialization with Dataclasses Pydantic's validation and serialization also work with dataclasses through the `@pydantic.dataclasses.dataclass` decorator. ``` ``` The dataclass implementation uses the same validation and serialization mechanism as regular Pydantic models: ``` ```",
  "Sources: [pydantic/dataclasses.py98-282](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L98-L282) [pydantic/\\_internal/\\_dataclasses.py64-112](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L64-L112) [tests/test\\_dataclasses.py62-147](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L62-L147) ## Common Validation and Serialization Scenarios ### Field-Level Validation ``` ``` ### Model-Level Validation ``` ``` ### Custom Serialization ``` ``` Sources: [tests/test\\_validators.py192-216](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L192-L216) [tests/test\\_serialize.py148-170](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L148-L170) ## Using Annotated for Validation and Serialization Pydantic supports using the `Annotated` type to attach validators and serializers directly to type annotations: ``` ``` This approach allows for reusable validation and serialization logic that can be applied to multiple fields across different models. Sources: [tests/test\\_validators.py51-87](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L51-L87) [tests/test\\_serialize.py82-96](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L82-L96) ## Validation and Serialization Modes Both validation and serialization offer different modes: ### Validation Modes: - **Standard**: Regular field-by-field validation - **Strict**: Enforces exact type matches without coercion ### Serialization Modes: - **python**: Serializes to Python native types (dict, list, etc.) - **json**: Serializes to JSON-compatible Python types - **json string**: Directly serializes to a JSON string ``` ``` Sources: [tests/test\\_serialize.py82-109](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L82-L109) [tests/test\\_serialize.py171-197](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L171-L197) ## Conclusion Pydantic's validation and serialization systems provide a robust foundation for ensuring data quality and consistency. The architecture allows for customization at various levels, from field-specific validators to model-wide serializers. These systems work together to provide a seamless flow from raw input data to validated models and then to serialized output. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Validation and Serialization](#validation-and-serialization.md) - [Overview](#overview.md) - [Validation Architecture](#validation-architecture.md) - [Core Validation Components](#core-validation-components.md) - [Validator Types and Functions](#validator-types-and-functions.md) - [Validation Process](#validation-process.md) - [Serialization Architecture](#serialization-architecture.md) - [Core Serialization Components](#core-serialization-components.md) - [Serializer Types](#serializer-types.md) - [Serialization Process](#serialization-process.md) - [TypeAdapter Integration](#typeadapter-integration.md) - [Validation and Serialization with Dataclasses](#validation-and-serialization-with-dataclasses.md) - [Common Validation and Serialization Scenarios](#common-validation-and-serialization-scenarios.md) - [Field-Level Validation](#field-level-validation.md) - [Model-Level Validation](#model-level-validation.md) - [Custom Serialization](#custom-serialization.md) - [Using Annotated for Validation and Serialization](#using-annotated-for-validation-and-serialization.md) - [Validation and Serialization Modes](#validation-and-serialization-modes.md) - [Validation Modes:](#validation-modes.md) - [Serialization Modes:](#serialization-modes.md) - [Conclusion](#conclusion.md)",
  "pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Overview Relevant source files",
  "- [.pre-commit-config.yaml](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml) - [CITATION.cff](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff) - [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md) - [docs/concepts/config.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md) - [docs/concepts/dataclasses.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md) - [docs/concepts/json.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json.md) - [docs/concepts/json\\_schema.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md) - [docs/concepts/models.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md) - [docs/concepts/performance.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md) - [docs/concepts/serialization.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md) - [docs/concepts/validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md) - [docs/contributing.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md) - [docs/examples/custom\\_validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/examples/custom_validators.md) - [docs/integrations/aws\\_lambda.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/aws_lambda.md) - [docs/integrations/llms.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/llms.md) - [docs/migration.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md) - [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) - [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) - [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) - [pydantic/version.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py) - [release/README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/release/README.md) - [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) - [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py) - [uv.lock](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock) This document provides a high-level introduction to Pydantic's architecture, core concepts, and design philosophy. It explains what Pydantic is, its relationship with pydantic-core, and how the major systems interact. For detailed information about specific subsystems, see: - Model system details: [Core Model System](pydantic/pydantic/2-core-model-system.md) - Type system details: [Type System](pydantic/pydantic/3-type-system.md) - Validation and serialization: [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - Schema generation: [Schema Generation](pydantic/pydantic/5-schema-generation.md) ## What is Pydantic",
  "Pydantic is a data validation library for Python that uses Python type hints to validate, parse, and serialize data. It provides runtime type checking and data conversion, ensuring that data conforms to specified types and constraints. The library's primary goal is to guarantee that the output data structure precisely conforms to the applied type hints, rather than simply checking input validity. This means Pydantic can coerce input data (e.g., converting string `\"123\"` to integer `123`) while ensuring the resulting instance meets all type requirements. **Sources:** [pydantic/main.py1-70](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L70) [docs/concepts/models.md1-52](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md#L1-L52) ## Core Architecture Pydantic's architecture consists of three main layers: user-facing APIs, schema generation, and the validation/serialization engine. ### System Overview ``` ``` **Sources:** [pydantic/main.py1-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L238) [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) ### User-Facing APIs Pydantic provides four primary entry points for validation: | API | Purpose | Primary Use Case | | ---------------- | ------------------------------ | ------------------------------------------------------ | | `BaseModel` | Class-based models with fields | Domain models, API schemas, configuration | | `TypeAdapter` | Validate arbitrary types | One-off validation, generic types, non-model scenarios | | `@dataclass` | Enhanced dataclasses | Dataclass-style models with validation | | `@validate_call` | Function argument validation | Validating function inputs and outputs | All four APIs converge on the same schema generation and validation pipeline, ensuring consistent behavior across different usage patterns. **Sources:** [pydantic/main.py118-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L238) [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py) [pydantic/decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py) ### Pydantic-Core Integration Pydantic's performance-critical validation and serialization logic is implemented in `pydantic-core`, a separate Rust library. The relationship is strictly versioned: ``` ``` The version compatibility is enforced at import time: - **Current Pydantic version:** `2.12.0b1+dev` [pydantic/version.py11](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L11) - **Required pydantic-core version:** `2.40.1` [pydantic/version.py22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L22-L22) - **Compatibility check:** `_ensure_pydantic_core_version()` [pydantic/version.py82-98](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L82-L98) **Sources:** [pydantic/version.py1-114](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L1-L114) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) ## Main Workflows ### Validation Pipeline The validation process transforms raw input data into validated model instances through multiple stages: ``` ``` Key validation entry points:",
  "- `BaseModel.__init__(self, **data)` [pydantic/main.py240-257](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L257) - `BaseModel.model_validate(cls, obj)` [pydantic/main.py653-699](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L653-L699) - `BaseModel.model_validate_json(cls, json_data)` [pydantic/main.py702-743](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L702-L743) - `TypeAdapter.validate_python(obj)` and `TypeAdapter.validate_json(json_data)` The actual validation is delegated to `SchemaValidator` from pydantic-core: - Stored in `cls.__pydantic_validator__` [pydantic/main.py197-198](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L197-L198) - Called via `validate_python()`, `validate_json()`, or `validate_strings()` methods **Sources:** [pydantic/main.py240-781](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L781) [docs/concepts/validators.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md#L1-L50) ### Serialization Pipeline Serialization converts validated model instances into dictionaries or JSON strings: ``` ``` Key serialization methods: - `model_dump(mode='python'|'json')` [pydantic/main.py418-474](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L474) - `model_dump_json()` [pydantic/main.py476-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L476-L534) The serialization is handled by `SchemaSerializer` from pydantic-core: - Stored in `cls.__pydantic_serializer__` [pydantic/main.py194-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L194-L195) - Called via `to_python()` or `to_json()` methods **Sources:** [pydantic/main.py418-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L534) [docs/concepts/serialization.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md#L1-L50) ### Schema Generation Flow Schema generation is a two-stage process: first generating CoreSchema for validation, then optionally generating JSON Schema for documentation: ``` ``` The schema generation process: 1. **Type Analysis:** Python type annotations are analyzed using `GenerateSchema` class [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) 2. **CoreSchema Creation:** Types are converted to CoreSchema format understood by pydantic-core 3. **Validator/Serializer Creation:** CoreSchema is used to build `SchemaValidator` and `SchemaSerializer` instances 4. **JSON Schema Generation:** Optionally, CoreSchema is converted to JSON Schema for API documentation **Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py) [docs/concepts/json\\_schema.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md#L1-L50) ## Field and Configuration System ### Field Definition Fields are defined using `FieldInfo` instances, which store metadata and constraints: ``` ``` Fields can be defined in three ways:",
  "1. Bare annotation: `field_name: int` [pydantic/fields.py295-351](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L295-L351) 2. With default: `field_name: int = 10` [pydantic/fields.py354-447](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L354-L447) 3. Using `Field()`: `field_name: int = Field(default=10, gt=0)` [pydantic/fields.py267-292](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L267-L292) **Sources:** [pydantic/fields.py98-733](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L98-L733) [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py) ### Configuration Hierarchy Configuration can be specified at multiple levels: | Level | Syntax | Priority | | ----- | -------------------------------- | -------- | | Model | `model_config = ConfigDict(...)` | Lowest | | Field | `Field(frozen=True, ...)` | Medium | | Type | `Annotated[int, Strict()]` | Highest | Configuration is processed by `ConfigWrapper` [pydantic/\\_internal/\\_config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py) and merged during schema generation. **Sources:** [pydantic/config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py) [pydantic/\\_internal/\\_config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py) [docs/concepts/config.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md#L1-L50) ## Model Lifecycle The lifecycle of a Pydantic model class from definition to usage: ``` ``` Key lifecycle steps: 1. **Metaclass invocation:** `ModelMetaclass.__new__()` [pydantic/\\_internal/\\_model\\_construction.py80-276](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L276) 2. **Namespace inspection:** `inspect_namespace()` identifies fields vs class vars [pydantic/\\_internal/\\_model\\_construction.py520-642](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L520-L642) 3. **Field collection:** `set_model_fields()` creates `FieldInfo` instances [pydantic/\\_internal/\\_model\\_construction.py299-331](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L299-L331) 4. **Schema generation:** `complete_model_class()` builds validation/serialization schemas [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) 5. **Completion:** Model marked as complete in `__pydantic_complete__` [pydantic/main.py167-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L167-L168) Models can be rebuilt after definition using `model_rebuild()` [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) if forward references need resolution.",
  "**Sources:** [pydantic/\\_internal/\\_model\\_construction.py79-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L277) [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) ## Class Attributes Reference Every `BaseModel` subclass has these key class attributes: | Attribute | Type | Description | | ------------------------------ | ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------- | | `model_config` | `ConfigDict` | Configuration dictionary [pydantic/main.py153-156](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L153-L156) | | `__pydantic_core_schema__` | `CoreSchema` | Core validation schema [pydantic/main.py170-171](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L170-L171) | | `__pydantic_validator__` | `SchemaValidator` | Validation engine instance [pydantic/main.py197-198](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L197-L198) | | `__pydantic_serializer__` | `SchemaSerializer` | Serialization engine instance [pydantic/main.py194-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L194-L195) | | `__pydantic_fields__` | `dict[str, FieldInfo]` | Field definitions [pydantic/main.py200-203](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L200-L203) | | `__pydantic_computed_fields__` | `dict[str, ComputedFieldInfo]` | Computed field definitions [pydantic/main.py208-209](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L208-L209) | | `__pydantic_decorators__` | `DecoratorInfos` | Validator/serializer decorators [pydantic/main.py177-179](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L177-L179) | | `__pydantic_complete__` | `bool` | Whether model building is complete [pydantic/main.py167-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L167-L168) | **Sources:** [pydantic/main.py118-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L238) ## Instance Attributes Reference Every `BaseModel` instance has these instance attributes: | Attribute | Type | Description | | ------------------------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ | | `__dict__` | `dict[str, Any]` | Field values storage | | `__pydantic_fields_set__` | `set[str]` | Fields explicitly set during init [pydantic/main.py214-215](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L214-L215) | | `__pydantic_extra__` | `dict[str, Any] \\| None` | Extra fields when `extra='allow'` [pydantic/main.py211-212](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L212) | | `__pydantic_private__` | `dict[str, Any] \\| None` | Private attribute values [pydantic/main.py217-218](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L217-L218) | **Sources:** [pydantic/main.py211-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L238) ## Project Structure The Pydantic codebase is organized into several key directories:",
  "``` pydantic/ ├── main.py # BaseModel implementation ├── fields.py # FieldInfo and Field() function ├── config.py # ConfigDict definition ├── types.py # Custom types (URL, Email, etc.) ├── type_adapter.py # TypeAdapter implementation ├── dataclasses.py # Enhanced dataclass support ├── json_schema.py # JSON Schema generation ├── functional_validators.py # Validator decorators ├── functional_serializers.py # Serializer decorators └── _internal/ ├── _model_construction.py # ModelMetaclass ├── _generate_schema.py # GenerateSchema class ├── _fields.py # Field collection logic ├── _decorators.py # Decorator processing ├── _config.py # ConfigWrapper └── _namespace_utils.py # Type resolution ``` **Sources:** [pydantic/main.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L1) [pydantic/fields.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L1-L1) [pydantic/\\_internal/\\_model\\_construction.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L1-L1) ## Migration from V1 Pydantic V2 represents a major rewrite with significant API changes. The key differences: | V1 API | V2 API | Notes | | ---------------- | ------------------------- | -------------------- | | `parse_obj()` | `model_validate()` | Method renamed | | `parse_raw()` | `model_validate_json()` | Specialized for JSON | | `dict()` | `model_dump()` | Method renamed | | `json()` | `model_dump_json()` | Method renamed | | `__fields__` | `model_fields` | Now a property | | `__validators__` | `__pydantic_decorators__` | Structure changed | A V1 compatibility layer is available through `pydantic.v1` imports for gradual migration. **Sources:** [docs/migration.md1-150](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L1-L150) [pydantic/\\_migration.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_migration.py) ## Performance Considerations Pydantic V2's performance characteristics: 1. **Rust-based validation:** Core validation logic runs in Rust for significant speedup 2. **Schema caching:** Validators and serializers are cached on the class [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) 3. **JSON parsing:** `model_validate_json()` is faster than `model_validate(json.loads())` [docs/concepts/performance.md5-16](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md#L5-L16) 4. **Deferred building:** Models can defer schema generation with `defer_build=True` config **Sources:** [docs/concepts/performance.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md#L1-L50) [pydantic/\\_internal/\\_model\\_construction.py247-258](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L247-L258) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Overview](#overview.md) - [What is Pydantic](#what-is-pydantic.md) - [Core Architecture](#core-architecture.md) - [System Overview](#system-overview.md) - [User-Facing APIs](#user-facing-apis.md) - [Pydantic-Core Integration](#pydantic-core-integration.md) - [Main Workflows](#main-workflows.md) - [Validation Pipeline](#validation-pipeline.md) - [Serialization Pipeline](#serialization-pipeline.md) - [Schema Generation Flow](#schema-generation-flow.md) - [Field and Configuration System](#field-and-configuration-system.md) - [Field Definition](#field-definition.md) - [Configuration Hierarchy](#configuration-hierarchy.md) - [Model Lifecycle](#model-lifecycle.md) - [Class Attributes Reference](#class-attributes-reference.md) - [Instance Attributes Reference](#instance-attributes-reference.md) - [Project Structure](#project-structure.md) - [Migration from V1](#migration-from-v1.md) - [Performance Considerations](#performance-considerations.md)",
  "Validators | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Validators Relevant source files",
  "- [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py) - [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_serialize.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) - [tests/test\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py) Validators in Pydantic are powerful tools for customizing validation logic beyond simple type checking. They allow you to validate and transform data during model creation or when field values change, ensuring data meets specific requirements, enforcing business rules, and modifying values as needed. For information about serializers, which handle converting data out of Pydantic models, see [Serializers](pydantic/pydantic/4.2-serializers.md). ## Validation Pipeline The Pydantic validation process follows a structured pipeline to transform raw input data into validated model instances: ``` ``` Sources: - [tests/test\\_validators.py312-384](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L312-L384) - [tests/test\\_validators.py192-215](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L192-L215) ## Field Validators Field validators work on individual fields and are defined with the `@field_validator` decorator. They can validate or transform field values before or after standard validation. ### Basic Usage ``` ``` When validators raise an error, Pydantic will include this in the `ValidationError` with contextual information about which field failed and why. Sources: - [tests/test\\_validators.py192-215](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L192-L215) ### Validator Modes Field validators can operate in different modes that determine when they run in the validation pipeline: - `mode='before'`: Runs before type coercion, useful for custom parsing or transforming raw input data - `mode='after'`: Runs after type coercion (default), for validating properly typed values - `mode='plain'`: Similar to 'after' but with a simpler function signature - `mode='wrap'`: Advanced mode that wraps around standard validation, giving access to both pre- and post-validation values ``` ``` Sources:",
  "- [tests/test\\_validators.py313-329](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L313-L329) - [pydantic/\\_internal/\\_decorators.py518-552](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L518-L552) ### Multi-field Validators Validators can be applied to multiple fields at once: ``` ``` The `info` parameter provides context about the current validation, including the field being validated and model data. Sources: - [tests/test\\_validators.py486-518](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L486-L518) ### Wildcard Validators Use `'*'` to apply a validator to all fields: ``` ``` Sources: - [tests/test\\_validators.py860-869](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L860-L869) - [tests/test\\_validators.py728-759](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L728-L759) ### Validator Information Validators can accept a `ValidationInfo` parameter to access additional context: ``` ``` Sources: - [tests/test\\_validators.py462-483](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L462-L483) - [tests/test\\_validators.py394-406](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L394-L406) ## Model Validators Model validators validate entire models, enabling validation logic that depends on multiple fields: ``` ``` Model validators can run in three modes: - `mode='before'`: Runs before field validation, useful for pre-processing raw input data - `mode='after'`: Runs after field validation (default), for validating the model as a whole - `mode='wrap'`: Wraps the validation process, giving full control over the validation pipeline Sources: - [pydantic/\\_internal/\\_decorators.py141-143](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L141-L143) ## Functional Validators Functional validators are used with `Annotated` types and provide a reusable way to apply validation logic: ``` ``` ### Types of Functional Validators - **BeforeValidator**: Runs before standard validation, useful for pre-processing input - **AfterValidator**: Runs after standard validation, for additional checks on typed data - **PlainValidator**: Direct validator without standard validation - **WrapValidator**: Gives full control over the validation process ### Examples ``` ``` Sources: - [tests/test\\_validators.py51-166](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L51-L166) ## Root Validators (Deprecated) The `@root_validator` decorator from Pydantic v1 has been deprecated in favor of `@model_validator`. Root validators still work but will emit deprecation warnings. ``` ``` Sources: - [tests/test\\_validators.py1046-1083](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L1046-L1083) - [pydantic/\\_internal/\\_decorators.py76-88](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L76-L88) ## Validator Inheritance Validators are inherited when subclassing models. If a subclass defines a validator with the same name as a parent class validator, the subclass validator overrides the parent's. ``` ``` Sources: - [tests/test\\_validators.py820-927](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L820-L927) - [tests/test\\_validators.py995-1037](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L995-L1037) ## Advanced Usage ### Validating Collections For validating each item in collections, the classic approach of using `each_item=True` with the `@validator` decorator is deprecated. Instead, use validator functions directly with the collection's item type: ``` ``` Sources: - [tests/test\\_validators.py1086-1126](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L1086-L1126) ### Validation on Assignment",
  "By default, validators only run during model initialization. To run them when values are assigned, set `validate_assignment=True` in model config: ``` ``` Sources: - [tests/test\\_validators.py387-483](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L387-L483) ### Validators with Default Values To validate default values, use `validate_default=True` in the field: ``` ``` Sources: - [tests/test\\_validators.py637-653](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L637-L653) - [tests/test\\_validators.py678-695](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L678-L695) ## Core Internals Internally, validators are processed by the Pydantic Core engine, which converts them into a validation schema: ``` ``` Field validators and model validators are stored in specialized container classes (`DecoratorInfos`) during model creation and used to build the final validation schema. Sources: - [pydantic/\\_internal/\\_decorators.py412-515](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L412-L515) - [pydantic/\\_internal/\\_core\\_utils.py16-42](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_utils.py#L16-L42) ## Combining Validators with Constrained Types Validators can be combined with constrained types from `annotated_types` for powerful, reusable validation: ``` ``` Sources: - [pydantic/\\_internal/\\_known\\_annotated\\_metadata.py168-347](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_known_annotated_metadata.py#L168-L347) - [tests/test\\_annotated.py51-62](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_annotated.py#L51-L62) ## Best Practices 1. Use `@field_validator` for field-specific validation 2. Use `@model_validator` for validations that involve multiple fields 3. Use functional validators with `Annotated` for reusable validation logic 4. Always use `@classmethod` when defining class-based validators 5. Return the value from validators to pass it to the next validator in the pipeline 6. Use `ValidationInfo` to access contextual information during validation By combining these validator types, you can build complex validation rules while keeping your code modular and maintainable. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Validators](#validators.md) - [Validation Pipeline](#validation-pipeline.md) - [Field Validators](#field-validators.md) - [Basic Usage](#basic-usage.md) - [Validator Modes](#validator-modes.md) - [Multi-field Validators](#multi-field-validators.md) - [Wildcard Validators](#wildcard-validators.md) - [Validator Information](#validator-information.md) - [Model Validators](#model-validators.md) - [Functional Validators](#functional-validators.md) - [Types of Functional Validators](#types-of-functional-validators.md) - [Examples](#examples.md) - [Root Validators (Deprecated)](#root-validators-deprecated.md) - [Validator Inheritance](#validator-inheritance.md) - [Advanced Usage](#advanced-usage.md) - [Validating Collections](#validating-collections.md) - [Validation on Assignment](#validation-on-assignment.md) - [Validators with Default Values](#validators-with-default-values.md) - [Core Internals](#core-internals.md) - [Combining Validators with Constrained Types](#combining-validators-with-constrained-types.md) - [Best Practices](#best-practices.md)",
  "Development and Deployment | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Development and Deployment Relevant source files",
  "- [.github/labels/default\\_pass.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/labels/default_pass.yml) - [.github/labels/first\\_pass.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/labels/first_pass.yml) - [.github/workflows/ci.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml) - [.github/workflows/codspeed.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/codspeed.yml) - [.github/workflows/dependencies-check.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/dependencies-check.yml) - [.github/workflows/docs-update.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml) - [.github/workflows/integration.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/integration.yml) - [.github/workflows/labeler.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/labeler.yml) - [.github/workflows/third-party.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml) - [.github/workflows/update-pydantic-people.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/update-pydantic-people.yml) - [.github/workflows/upload-previews.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/upload-previews.yml) - [CITATION.cff](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff) - [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md) - [README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/README.md) - [build-docs.sh](https://github.com/pydantic/pydantic/blob/76ef0b08/build-docs.sh) - [docs/extra/tweaks.css](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/extra/tweaks.css) - [docs/index.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/index.md) - [docs/install.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/install.md) - [docs/theme/main.html](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/theme/main.html) - [docs/why.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/why.md) - [mkdocs.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml) - [pydantic/version.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py) - [tests/conftest.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py) - [uv.lock](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock) This document describes the development infrastructure, testing framework, continuous integration/deployment pipeline, and release processes for Pydantic. It covers how the codebase is tested, versioned, documented, and deployed to users. For information about the core model system and validation logic, see [Core Model System](pydantic/pydantic/2-core-model-system.md). For schema generation internals, see [Schema Generation](pydantic/pydantic/5-schema-generation.md). ## Overview Pydantic's development and deployment infrastructure encompasses: - **Version Management**: Strict version compatibility checks between `pydantic` and `pydantic-core` - **Testing Framework**: Comprehensive test suite with pytest fixtures and utilities - **CI/CD Pipeline**: GitHub Actions workflows for linting, testing, and deployment - **Documentation System**: MkDocs-based documentation with versioning via mike - **Release Process**: Automated PyPI publishing with trusted publishing and changelog generation The infrastructure ensures quality through multi-platform testing, third-party integration testing, and automated version compatibility validation. ## Version Management and Compatibility ### Version Constants and Checking",
  "Pydantic maintains strict version compatibility between the pure Python package (`pydantic`) and the Rust-based validation core (`pydantic-core`). ``` ``` **Sources**: [pydantic/version.py11](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L11) [pydantic/version.py22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L22-L22) [pydantic/version.py77-99](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L77-L99) | Component | Description | Location | | ----------------------------------- | ------------------------------------ | ---------------------------------------------------------------------------------------------------------- | | `VERSION` | Current Pydantic version string | [pydantic/version.py11](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L11) | | `_COMPATIBLE_PYDANTIC_CORE_VERSION` | Required pydantic-core version | [pydantic/version.py22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L22-L22) | | `check_pydantic_core_version()` | Validates core version match | [pydantic/version.py77-79](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L77-L79) | | `_ensure_pydantic_core_version()` | Raises SystemError on mismatch | [pydantic/version.py82-98](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L82-L98) | | `version_info()` | Returns detailed version information | [pydantic/version.py33-74](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L33-L74) | The version check occurs at import time and raises a `SystemError` if the installed `pydantic-core` version doesn't match the expected version, unless Pydantic is installed in editable mode (development). ### Version Information Utility The `version_info()` function provides comprehensive environment information: ``` ``` Returns information including: - Pydantic version - pydantic-core version and build profile - Python version and platform - Related package versions (FastAPI, mypy, pyright, etc.) - Git commit hash (if in git repository) **Sources**: [pydantic/version.py33-74](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L33-L74) ## Testing Infrastructure ### Test Organization and Fixtures ``` ``` **Sources**: [tests/conftest.py1-203](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L1-L203) ### Key Testing Fixtures | Fixture | Purpose | Lines | | ----------------------- | ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- | | `create_module` | Dynamically creates and imports Python modules for testing | [tests/conftest.py65-102](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L65-L102) | | `subprocess_run_code` | Executes code in a subprocess and captures output | [tests/conftest.py106-118](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L106-L118) | | `generate_schema_calls` | Tracks GenerateSchema.generate\\_schema call counts | [tests/conftest.py145-160](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L145-L160) | | `validate_json_schemas` | Auto-validates generated JSON schemas against Draft 2020-12 spec | [tests/conftest.py164-181](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L164-L181) | | `disable_error_urls` | Disables error URLs in output (for stable docs) | [tests/conftest.py57-61](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L57-L61) | ### Module Creation Fixture The `create_module` fixture enables dynamic module creation for testing: ``` ``` This fixture:",
  "1. Extracts source code from functions or uses provided strings 2. Creates temporary Python files with unique names 3. Imports modules with optional assertion rewriting 4. Returns executable module objects for testing **Sources**: [tests/conftest.py65-102](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L65-L102) [tests/conftest.py30-43](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L30-L43) [tests/conftest.py46-54](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L46-L54) ### Thread Safety Markers Tests using certain fixtures are automatically marked as `thread_unsafe`: - `generate_schema_calls` - Monkeypatches Pydantic code - `benchmark` - Cannot be reused across threads - `tmp_path`/`tmpdir` - Duplicate paths/dirs - `copy_method` - Uses `pytest.warns()` - `reset_plugins` - Monkeypatching **Sources**: [tests/conftest.py184-202](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L184-L202) ## CI/CD Pipeline ### Main CI Workflow ``` ``` **Sources**: [.github/workflows/ci.yml1-436](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L1-L436) ### CI Jobs Breakdown | Job | Purpose | Triggers | Matrix | | ------------------------------- | ----------------------------------- | ------------------------ | ------------------------ | | `lint` | Pre-commit hooks, ruff, type checks | All pushes/PRs | Python 3.9-3.14 | | `docs-build` | Validate documentation builds | All pushes/PRs | Single Python 3.12 | | `test` | Core test suite | All pushes/PRs | 4 OS × 8 Python versions | | `test-memray` | Memory profiling tests | All pushes/PRs | Python 3.12 | | `test-mypy` | Mypy plugin tests | All pushes/PRs | Python 3.13 | | `test-plugin` | Pydantic plugin system tests | All pushes/PRs | Python 3.12 | | `test-typechecking-integration` | Pyright/mypy integration | All pushes/PRs | Python 3.12 | | `coverage-combine` | Aggregate coverage | After tests | N/A | | `coverage-pr-comment` | Post coverage to PRs | After coverage-combine | N/A | | `release` | Publish to PyPI | Tags only | N/A | | `send-tweet` | Announce release | After successful release | N/A | **Sources**: [.github/workflows/ci.yml17-435](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L17-L435) ### Test Matrix Configuration The main test job runs across multiple platforms and Python versions: ``` ``` Additional PyPy versions tested on Ubuntu only: - `pypy3.9` - `pypy3.10` - `pypy3.11` **Sources**: [.github/workflows/ci.yml86-111](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L86-L111) ### Coverage Workflow ``` ``` **Sources**: [.github/workflows/ci.yml238-303](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L238-L303) Coverage files are: 1. Generated in each test job with unique filenames 2. Downloaded and combined using `coverage combine` 3. Uploaded as artifacts 4. Used to generate PR comments with coverage percentage ### Release Process ``` ``` **Sources**: [.github/workflows/ci.yml352-384](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L352-L384) The release job: 1. Waits for all CI checks to pass 2. Validates version in `pydantic/version.py` matches git tag 3. Builds distribution using `python -m build` 4. Publishes to PyPI using trusted publishing (OIDC)",
  "**Sources**: [.github/workflows/ci.yml352-384](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L352-L384) ## Third-Party Integration Testing ``` ``` **Sources**: [.github/workflows/third-party.yml1-506](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml#L1-L506) ### Third-Party Test Strategy Each third-party test: 1. Checks out the external project's repository 2. Checks out Pydantic from current branch to `pydantic-latest` path 3. Installs project dependencies 4. Uninstalls locked Pydantic version 5. Installs Pydantic from `pydantic-latest` path in editable mode 6. Runs the project's test suite Example pattern: ``` ``` **Sources**: [.github/workflows/third-party.yml48-73](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml#L48-L73) ### Tested Projects | Project | Repository | Python Versions | Special Requirements | | --------------------- | ------------------------------------------ | --------------- | ----------------------------- | | FastAPI | `fastapi/fastapi` | 3.9-3.13 | PYTHONPATH includes docs\\_src | | SQLModel | `fastapi/sqlmodel` | 3.9-3.13 | None | | Beanie | `BeanieODM/beanie` | 3.13 only | MongoDB service | | openapi-python-client | `openapi-generators/openapi-python-client` | 3.9-3.13 | PDM package manager | | Pandera | `unionai-oss/pandera` | 3.9-3.12 | Multiple extra dependencies | | ODMantic | `sydney-runkle/odmantic` | 3.9-3.11 | MongoDB service | | Polar | `polarsource/polar` | 3.9-3.13 | PostgreSQL, MinIO, Node.js | | BentoML | `bentoml/BentoML` | 3.9, 3.11-3.12 | PDM package manager | | Semantic Kernel | `microsoft/semantic-kernel` | 3.10-3.12 | Poetry package manager | **Sources**: [.github/workflows/third-party.yml35-506](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml#L35-L506) ## Documentation System ### MkDocs Configuration ``` ``` **Sources**: [mkdocs.yml1-338](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L1-L338) [build-docs.sh1-26](https://github.com/pydantic/pydantic/blob/76ef0b08/build-docs.sh#L1-L26) [.github/workflows/docs-update.yml1-113](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L1-L113) ### Documentation Structure",
  "| Component | Purpose | Configuration | | ------------ | --------------------------------------- | ----------------------------------------------------------------------------------------------------- | | Theme | Material for MkDocs with custom styling | [mkdocs.yml6-47](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L6-L47) | | Navigation | Hierarchical documentation structure | [mkdocs.yml90-191](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L90-L191) | | Mike | Documentation versioning | [mkdocs.yml220-222](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L220-L222) | | mkdocstrings | API documentation from docstrings | [mkdocs.yml248-264](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L248-L264) | | llmstxt | LLM-friendly documentation export | [mkdocs.yml224-241](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L224-L241) | | Algolia | Search integration | Custom JS in [mkdocs.yml81-83](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L81-L83) | **Sources**: [mkdocs.yml1-338](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L1-L338) ### Documentation Build Process ``` ``` **Sources**: [.github/workflows/docs-update.yml56-113](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L56-L113) ### Documentation Deployment The `docs-update.yml` workflow: 1. Triggers on pushes to `main`, `docs-update` branch, or tags 2. Runs lint and test jobs first 3. Checks out `docs-site` branch (orphan branch for built docs) 4. Builds documentation using `mike` for versioning 5. Deploys to `docs-site` branch: - `dev` version from `main` branch - `X.Y` and `latest` versions from tags 6. Uploads to Algolia for search indexing **Sources**: [.github/workflows/docs-update.yml1-113](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L1-L113) ### Build Script Symlinks The build process creates symlinks to provide better source locations in documentation: ``` ``` This results in documentation source links like: - `pydantic_core/core_schema.py` - Instead of: `.venv/lib/python3.10/site-packages/pydantic_core/core_schema.py` **Sources**: [build-docs.sh15-22](https://github.com/pydantic/pydantic/blob/76ef0b08/build-docs.sh#L15-L22) [.github/workflows/docs-update.yml84-88](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L84-L88) ## Dependency Management ### UV Lock File and Synchronization Pydantic uses `uv` for dependency management with a lock file: - Lock file: `uv.lock` (1+ revision) - Sync command: `uv sync` with various groups - Frozen mode: `UV_FROZEN=true` in CI to prevent updates **Sources**: [uv.lock1-3](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock#L1-L3) [.github/workflows/ci.yml13](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L13-L13) ### Dependency Groups | Group | Purpose | Usage | | --------------- | ------------------------------- | ------------------------ | | `linting` | Pre-commit, ruff, type checkers | CI lint job | | `docs` | MkDocs, material theme, plugins | Documentation builds | | `docs-upload` | Algolia upload tools | Documentation deployment | | `testing-extra` | pytest, memray, coverage | Full test suite | | `typechecking` | mypy, pyright, type stubs | Type checking tests | | `all` | All development dependencies | Local development |",
  "**Sources**: [.github/workflows/ci.yml34](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L34-L34) [.github/workflows/docs-update.yml75](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L75-L75) ### Dependency Version Testing ``` ``` **Sources**: [.github/workflows/dependencies-check.yml1-54](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/dependencies-check.yml#L1-L54) The `dependencies-check.yml` workflow: 1. Runs on a schedule (Wednesday and Saturday) 2. Uses `samuelcolvin/list-python-dependencies` to find first and last versions of each dependency 3. Tests Pydantic with both minimum and maximum dependency versions 4. Ensures compatibility across the supported version range **Sources**: [.github/workflows/dependencies-check.yml1-54](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/dependencies-check.yml#L1-L54) ### Pydantic Family Integration ``` ``` **Sources**: [.github/workflows/integration.yml1-40](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/integration.yml#L1-L40) The integration workflow tests Pydantic with related packages: - `pydantic-settings`: Settings management library - `pydantic-extra-types`: Additional type implementations Both use the `make` targets which likely checkout and test these repositories with the current Pydantic code. **Sources**: [.github/workflows/integration.yml1-40](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/integration.yml#L1-L40) ## Additional CI Workflows ### Performance Benchmarking (CodSpeed) ``` ``` **Sources**: [.github/workflows/codspeed.yml1-83](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/codspeed.yml#L1-L83) The CodSpeed workflow: 1. Resolves the `pydantic-core` version from `pyproject.toml` 2. Checks out `pydantic-core` at that version 3. Builds `pydantic-core` with PGO (Profile-Guided Optimization) and debug symbols 4. Runs benchmarks using CodSpeed for performance tracking **Sources**: [.github/workflows/codspeed.yml1-83](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/codspeed.yml#L1-L83) ### Coverage Upload (Smokeshow) ``` ``` **Sources**: [.github/workflows/upload-previews.yml1-37](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/upload-previews.yml#L1-L37) The upload-previews workflow: 1. Triggers after CI workflow completion 2. Downloads coverage HTML artifacts 3. Uploads to Smokeshow for preview hosting 4. Posts coverage percentage to PR as GitHub status with threshold of 91% **Sources**: [.github/workflows/upload-previews.yml1-37](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/upload-previews.yml#L1-L37) ### Automated Labeling ``` ``` **Sources**: [.github/workflows/labeler.yml1-27](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/labeler.yml#L1-L27) Label configurations: - `first_pass.yml`: Labels based on branch name patterns (fix, feature, docs, change, performance, packaging) - `default_pass.yml`: Adds `relnotes-fix` if no labels were applied This ensures all PRs are properly categorized for changelog generation. **Sources**: [.github/workflows/labeler.yml1-27](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/labeler.yml#L1-L27) [.github/labels/first\\_pass.yml1-18](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/labels/first_pass.yml#L1-L18) [.github/labels/default\\_pass.yml1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/labels/default_pass.yml#L1-L5) ## Summary Pydantic's development and deployment infrastructure provides:",
  "1. **Rigorous Version Control**: Strict compatibility checking between `pydantic` and `pydantic-core` 2. **Comprehensive Testing**: Multi-platform test matrix, third-party integration tests, and specialized testing for memory, type checking, and plugins 3. **Automated CI/CD**: GitHub Actions workflows handle linting, testing, coverage tracking, and deployment 4. **Documentation Excellence**: Versioned documentation with MkDocs, automated deployment, and LLM-friendly exports 5. **Quality Assurance**: Dependency version testing, performance benchmarking, and automated labeling for release notes The infrastructure ensures that Pydantic maintains high quality standards while supporting a wide range of Python versions, platforms, and downstream packages. **Sources**: [pydantic/version.py1-114](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L1-L114) [.github/workflows/ci.yml1-436](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L1-L436) [.github/workflows/third-party.yml1-506](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml#L1-L506) [mkdocs.yml1-338](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L1-L338) [.github/workflows/docs-update.yml1-113](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L1-L113) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Development and Deployment](#development-and-deployment.md) - [Overview](#overview.md) - [Version Management and Compatibility](#version-management-and-compatibility.md) - [Version Constants and Checking](#version-constants-and-checking.md) - [Version Information Utility](#version-information-utility.md) - [Testing Infrastructure](#testing-infrastructure.md) - [Test Organization and Fixtures](#test-organization-and-fixtures.md) - [Key Testing Fixtures](#key-testing-fixtures.md) - [Module Creation Fixture](#module-creation-fixture.md) - [Thread Safety Markers](#thread-safety-markers.md) - [CI/CD Pipeline](#cicd-pipeline.md) - [Main CI Workflow](#main-ci-workflow.md) - [CI Jobs Breakdown](#ci-jobs-breakdown.md) - [Test Matrix Configuration](#test-matrix-configuration.md) - [Coverage Workflow](#coverage-workflow.md) - [Release Process](#release-process.md) - [Third-Party Integration Testing](#third-party-integration-testing.md) - [Third-Party Test Strategy](#third-party-test-strategy.md) - [Tested Projects](#tested-projects.md) - [Documentation System](#documentation-system.md) - [MkDocs Configuration](#mkdocs-configuration.md) - [Documentation Structure](#documentation-structure.md) - [Documentation Build Process](#documentation-build-process.md) - [Documentation Deployment](#documentation-deployment.md) - [Build Script Symlinks](#build-script-symlinks.md) - [Dependency Management](#dependency-management.md) - [UV Lock File and Synchronization](#uv-lock-file-and-synchronization.md) - [Dependency Groups](#dependency-groups.md) - [Dependency Version Testing](#dependency-version-testing.md) - [Pydantic Family Integration](#pydantic-family-integration.md) - [Additional CI Workflows](#additional-ci-workflows.md) - [Performance Benchmarking (CodSpeed)](#performance-benchmarking-codspeed.md) - [Coverage Upload (Smokeshow)](#coverage-upload-smokeshow.md) - [Automated Labeling](#automated-labeling.md) - [Summary](#summary.md)",
  "JSON Conversion | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # JSON Conversion Relevant source files - [pydantic/json.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json.py) - [tests/test\\_json.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py) ## Purpose and Scope This document details how Pydantic handles the conversion of Python objects to and from JSON. It covers both the serialization (Python → JSON) and deserialization (JSON → Python) processes, including the core architecture, built-in serialization behavior for various data types, and customization options. For information about validators, see [Validators](pydantic/pydantic/4.1-validators.md). For information about the broader serialization system including Python dict serialization, see [Serializers](pydantic/pydantic/4.2-serializers.md). ## Serialization and Deserialization Architecture ``` ```",
  "Sources: [tests/test\\_json.py92-94](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L92-L94) [tests/test\\_json.py134-137](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L134-L137) [tests/test\\_json.py234-236](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L234-L236) ## JSON Serialization Methods Pydantic provides two primary ways to serialize objects to JSON: 1. `BaseModel.model_dump_json()` - For serializing model instances 2. `TypeAdapter.dump_json()` - For serializing arbitrary types ``` ``` Sources: [tests/test\\_json.py134-137](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L134-L137) [tests/test\\_json.py92-94](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L92-L94) ### BaseModel Serialization The `model_dump_json()` method converts a model instance to a JSON string: ``` ``` The method accepts the same parameters as `model_dump()`, plus JSON-specific parameters: | Parameter | Type | Description | | ------------------ | ---------- | ------------------------------------ | | `indent` | `int` | Number of spaces for indentation | | `exclude` | `set[str]` | Fields to exclude | | `include` | `set[str]` | Fields to include (excluding others) | | `by_alias` | `bool` | Whether to use field aliases | | `exclude_unset` | `bool` | Exclude fields not explicitly set | | `exclude_defaults` | `bool` | Exclude fields with default values | | `exclude_none` | `bool` | Exclude None fields | Sources: [tests/test\\_json.py134-137](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L134-L137) [tests/test\\_json.py226](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L226-L226) [tests/test\\_json.py368-369](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L368-L369) ### TypeAdapter Serialization The `TypeAdapter` class provides a way to serialize arbitrary types to JSON: ``` ``` Sources: [tests/test\\_json.py92-94](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L92-L94) ## JSON Deserialization Methods Pydantic provides corresponding methods for deserializing JSON: 1. `BaseModel.model_validate_json()` - For deserializing to model instances 2. `TypeAdapter.validate_json()` - For deserializing to arbitrary types ``` ``` Sources: [tests/test\\_json.py234-236](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L234-L236) [tests/test\\_json.py251](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L251-L251) ## Type Handling in JSON Serialization Pydantic provides special handling for various Python types when serializing to JSON: ``` ``` Sources: [tests/test\\_json.py61-91](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L61-L91) ### Built-in Type Serialization",
  "| Python Type | JSON Representation | Example | | --------------------------------- | -------------------------- | ---------------------------------------- | | `str` | string | `\"text\"` | | `int`/`float` | number | `123`, `3.14` | | `bool` | boolean | `true`, `false` | | `None` | null | `null` | | `list`/`tuple`/`set` | array | `[1, 2, 3]` | | `dict` | object | `{\"key\": \"value\"}` | | `UUID` | string | `\"ebcdab58-6eb8-46fb-a190-d07a33e9eac8\"` | | `datetime` | string (ISO 8601) | `\"2032-01-01T01:01:00\"` | | `date` | string (ISO 8601) | `\"2032-01-01\"` | | `time` | string (ISO 8601) | `\"12:34:56\"` | | `timedelta` | string (ISO 8601 duration) | `\"P12DT34.000056S\"` | | `bytes` | string (UTF-8) | `\"this is bytes\"` | | `Decimal` | string | `\"12.34\"` | | `Enum` | string/number | `\"bar\"` | | `Pattern` | string | `\"^regex$\"` | | `SecretStr`/`SecretBytes` | string (masked) | `\"**********\"` | | `IPv4Address`/`IPv6Address` | string | `\"192.168.0.1\"` | | `Path`/`FilePath`/`DirectoryPath` | string | `\"/path/to/file\"` | Sources: [tests/test\\_json.py61-91](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L61-L91) [tests/test\\_json.py107-120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L107-L120) ### Special Cases #### Infinity and NaN By default, `float('inf')`, `float('-inf')`, and `float('nan')` values raise errors in JSON serialization. You can configure how they are handled: ``` ``` With this configuration, these values become `\"Infinity\"`, `\"-Infinity\"`, and `\"NaN\"` in JSON. Sources: [tests/test\\_json.py508-538](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L508-L538) #### Bytes You can configure how bytes are serialized to JSON: ``` ``` Options: - `'utf8'` (default): Decode bytes as UTF-8 - `'base64'`: Encode bytes as base64 - `'hex'`: Encode bytes as hexadecimal Sources: [tests/test\\_json.py541-576](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L541-L576) ## Customizing JSON Serialization Pydantic offers multiple ways to customize how types are serialized to JSON. ``` ``` Sources: [tests/test\\_json.py212-226](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L212-L226) [tests/test\\_json.py400-414](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L400-L414) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439) ### Field Serializers Field serializers allow customizing serialization for specific fields in a model: ``` ``` The `when_used` parameter can be: - `'always'` (default): Apply the serializer for all serializations - `'json'`: Apply only when serializing to JSON - `'unless-none'`: Apply only for non-None values Sources: [tests/test\\_json.py212-226](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L212-L226) [tests/test\\_json.py292-332](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L292-L332) ### JSON Encoders You can use the `json_encoders` configuration option to customize serialization for specific types: ``` ```",
  "JSON encoders are applied when serializing to JSON, not when creating Python dictionaries. Sources: [tests/test\\_json.py400-414](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L400-L414) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439) [tests/test\\_json.py480-488](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L480-L488) ### Annotated Serializers You can attach serializers to specific type annotations using `Annotated` and `PlainSerializer`: ``` ``` Sources: [tests/test\\_json.py442-450](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L442-L450) ## Integration with Standard JSON Module Pydantic provides a compatibility function for use with the standard `json` module: ``` ``` This allows serializing models and other Pydantic types using the standard `json` module. Sources: [tests/test\\_json.py120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L120-L120) [tests/test\\_json.py278-288](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L278-L288) ## Inheritance and JSON Serialization In class inheritance, field serializers from parent classes are used, unless the child class provides its own serializer for the same field: ``` ``` Note that `json_encoders` configurations are not inherited; child models must define their own. Sources: [tests/test\\_json.py254-268](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L254-L268) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439) ## JSON Schema and Conversion For information about generating JSON Schema from Pydantic models, see [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md). Sources: [tests/test\\_json.py372-397](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L372-L397) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [JSON Conversion](#json-conversion.md) - [Purpose and Scope](#purpose-and-scope.md) - [Serialization and Deserialization Architecture](#serialization-and-deserialization-architecture.md) - [JSON Serialization Methods](#json-serialization-methods.md) - [BaseModel Serialization](#basemodel-serialization.md) - [TypeAdapter Serialization](#typeadapter-serialization.md) - [JSON Deserialization Methods](#json-deserialization-methods.md) - [Type Handling in JSON Serialization](#type-handling-in-json-serialization.md) - [Built-in Type Serialization](#built-in-type-serialization.md) - [Special Cases](#special-cases.md) - [Infinity and NaN](#infinity-and-nan.md) - [Bytes](#bytes.md) - [Customizing JSON Serialization](#customizing-json-serialization.md) - [Field Serializers](#field-serializers.md) - [JSON Encoders](#json-encoders.md) - [Annotated Serializers](#annotated-serializers.md) - [Integration with Standard JSON Module](#integration-with-standard-json-module.md) - [Inheritance and JSON Serialization](#inheritance-and-json-serialization.md) - [JSON Schema and Conversion](#json-schema-and-conversion.md)",
  "TypeAdapter | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Type Adapter Relevant source files",
  "- [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) TypeAdapter is a flexible component in Pydantic that allows you to apply validation and serialization to arbitrary Python types, not just Pydantic models. It bridges the gap between Python types and Pydantic's validation system, enabling you to use Pydantic's powerful data validation and conversion capabilities with standard Python types, dataclasses, TypedDict, and more. For information about validating model fields, see [Field System](pydantic/pydantic/2.2-field-system.md). For information about customizing validation through validators, see [Validators](pydantic/pydantic/4.1-validators.md). ## Core Concepts TypeAdapter wraps a Python type with Pydantic's validation and serialization functionality. It creates a core schema for the type, and uses this schema to validate input data and serialize output data. ``` ``` Sources: [pydantic/type\\_adapter.py69-107](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L69-L107) - Container types (list, dict, tuple, etc.) - Pydantic models - dataclasses - TypedDict - Generic types - Custom types ``` ``` Sources: [pydantic/type\\_adapter.py195-234](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L195-L234)\"] ValidateMethod --> |\"Input is invalid\"| ValidationError\\[\"ValidationError\"] ``` subgraph \"Validation Parameters\" Params[\"Parameters: - strict - context - from_attributes - by_alias - by_name - experimental_allow_partial\"] end Params --> ValidateMethod end ``` ``` Sources: <FileRef file-url=\"https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L381-L430\" min=381 max=430 file-path=\"pydantic/type_adapter.py\">Hii</FileRef>\"] end Params --> SerializeMethod end ``` Sources: [pydantic/type\\_adapter.py532-586](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L532-L586) schema = adapter.json\\_schema() ``` The `json_schema` method has parameters to control schema generation: - `by_alias`: Whether to use alias names for field names - `ref_template`: The format string for generating $ref strings - `schema_generator`: The generator class for creating the schema - `mode`: The mode to use for schema generation (validation or serialization)",
  "Sources: <FileRef file-url=\"https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L647-L678\" min=647 max=678 file-path=\"pydantic/type_adapter.py\">Hii</FileRef>\"] --> |\"1. Initial creation\"| CS[\"Mock CoreSchema\"] CS --> |\"2. Type needs resolution\"| RebuildMethod[\"rebuild()\"] RebuildMethod --> |\"3. Resolves forward references\"| FinalCS[\"Final CoreSchema\"] FinalCS --> VS[\"SchemaValidator\"] FinalCS --> SS[\"SchemaSerializer\"] end ``` When using forward references, you may need to call `rebuild` explicitly to resolve them: ``` ``` Sources: [pydantic/type\\_adapter.py335-379](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L335-L379)) # This will fail due to strict validation try: int\\_list\\_adapter.validate\\_python(\\[\"1\", \"2\"]) except Exception as e: print(f\"Validation failed: {e}\") ``` However, you cannot provide a configuration when the type you're using has its own config that cannot be overridden (e.g., `BaseModel`, `TypedDict`, and `dataclass`). Sources: <FileRef file-url=\"https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L198-L210\" min=198 max=210 file-path=\"pydantic/type_adapter.py\">Hii</FileRef>) # Later, when SomeType is fully defined: adapter.rebuild() ``` When `defer_build` is `True`, TypeAdapter sets mock objects for the core schema, validator, and serializer. These mocks will attempt to rebuild the schema when accessed. Sources: [pydantic/type\\_adapter.py317-331](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L317-L331) float\\_adapter = TypeAdapter(float) str\\_adapter = TypeAdapter(str) bool\\_adapter = TypeAdapter(bool) ```` ### Container Types ```python list_adapter = TypeAdapter(list[int]) dict_adapter = TypeAdapter(dict[str, int]) tuple_adapter = TypeAdapter(tuple[str, int]) set_adapter = TypeAdapter(set[int]) ```` ### Pydantic Models ``` ``` ### Dataclasses ``` ``` ### TypedDict ``` ``` ### Union Types ``` ``` ### Generic Types ``` ``` Sources: [tests/test\\_type\\_adapter.py42-65](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L42-L65) try: int\\_list\\_adapter.validate\\_python(\\[\"1\", \"not\\_an\\_int\"]) except ValidationError as e: print(f\"Validation errors: {e.errors()}\") ``` ValidationError provides detailed information about what failed, where the error occurred, and why. Sources: <FileRef file-url=\"https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L194-L254\" min=194 max=254 file-path=\"tests/test_type_adapter.py\">Hii</FileRef> -> bool: \"\"\"Returns whether the type has config.\"\"\" type_ = _typing_extra.annotated_type(type_) or type_ try: return issubclass(type_, BaseModel) or is_dataclass(type_) or is_typeddict(type_) except TypeError: # type is not a class return False ``` Sources: \\[pydantic/type\\_adapter.py:58-66]\\( ## Technical Implementation Details TypeAdapter uses a combination of: 1. Core schema generation via `GenerateSchema` 2. Validation via `SchemaValidator` or `PluggableSchemaValidator` 3. Serialization via `SchemaSerializer` 4. Namespace resolution for type resolution 5. Mock objects for deferred building It also has special handling for generic types, forward references, and namespace management to ensure types are correctly resolved. Sources: \\[pydantic/type\\_adapter.py:246-316]\\(, \\[pydantic/\\_internal/\\_namespace\\_utils.py:143-293]\\(, \\[pydantic/\\_internal/\\_mock\\_val\\_ser.py:21-149]\\( ## Summary TypeAdapter is a powerful component that brings Pydantic's validation and serialization capabilities to any Python type. It's particularly useful for:",
  "1. Validating simple types like integers and strings with Pydantic's conversion logic 2. Validating complex types like lists and dictionaries with nested validation 3. Working with non-model types like dataclasses and TypedDict 4. Applying validation to arbitrary types in a consistent way 5. Generating JSON schemas for arbitrary types 6. Serializing instances of arbitrary types consistently By wrapping a type in a TypeAdapter, you can leverage Pydantic's robust validation and serialization features without having to create a full model class. ``` ``` Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Type Adapter](#type-adapter.md) - [Core Concepts](#core-concepts.md) - [Instantiating a TypeAdapter](#instantiating-a-typeadapter.md) - [Validation Methods](#validation-methods.md) - [Serialization Methods](#serialization-methods.md) - [JSON Schema Generation](#json-schema-generation.md) - [Type Resolution and Forward References](#type-resolution-and-forward-references.md) - [Integration with Pydantic Systems](#integration-with-pydantic-systems.md) - [Configuration](#configuration.md) - [Deferred Building](#deferred-building.md) - [Working with Different Types](#working-with-different-types.md) - [Primitive Types](#primitive-types.md) - [Container Types](#container-types.md) - [Pydantic Models](#pydantic-models.md) - [Dataclasses](#dataclasses.md) - [TypedDict](#typeddict.md) - [Union Types](#union-types.md) - [Generic Types](#generic-types.md) - [Error Handling](#error-handling.md) - [Type Detection](#type-detection.md) - [Technical Implementation Details](#technical-implementation-details.md) - [Summary](#summary.md)",
  "Core Schema Generation | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Core Schema Generation Relevant source files - [pydantic/\\_internal/\\_core\\_metadata.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_metadata.py) - [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) - [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py) - [pyproject.toml](https://github.com/pydantic/pydantic/blob/76ef0b08/pyproject.toml) - [tests/test\\_datetime.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_datetime.py) - [tests/test\\_json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py)",
  "Core Schema Generation is the foundational system in Pydantic that converts Python type annotations into schema representations that can be used for validation, serialization, and documentation. This process is essential for Pydantic's type validation capabilities and forms the bridge between Python's type system and Pydantic's runtime validation logic. For information about how these schemas are then converted to JSON Schema, see [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md). ## Overview At its heart, Core Schema Generation takes Python type annotations and transforms them into a structured schema representation that pydantic-core (Pydantic's underlying validation engine written in Rust) can understand and use for validation. This transformation enables Pydantic to perform efficient validation while maintaining Python's type hinting semantics. ``` ``` Sources: - [pydantic/\\_internal/\\_generate\\_schema.py318-342](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L318-L342) - [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) ## The GenerateSchema Class The `GenerateSchema` class is the central component responsible for transforming Python types into core schemas. It provides methods for handling different Python types and constructing appropriate schema representations. ``` ``` The `generate_schema` method is the main entry point that dispatches to type-specific handlers based on the input object. The class also maintains state such as a stack of models being processed (to handle recursive references) and definitions being generated. Sources: - [pydantic/\\_internal/\\_generate\\_schema.py318-342](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L318-L342) - [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) - [pydantic/\\_internal/\\_generate\\_schema.py366-377](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L366-L377) ## Schema Generation Process The schema generation process follows several steps to convert Python types into a complete core schema: ``` ``` Sources: - [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) - [pydantic/\\_internal/\\_generate\\_schema.py843-889](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L843-L889) - [pydantic/\\_internal/\\_generate\\_schema.py718-843](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L718-L843) ## Core Schema Types Pydantic uses a variety of schema types to represent different Python types and validation rules. These schemas form a hierarchy with specialized validations for each type. ``` ``` Sources: - [pydantic/\\_internal/\\_generate\\_schema.py366-419](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L366-L419) - [pydantic/\\_internal/\\_generate\\_schema.py449-482](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L449-L482) - [pydantic/\\_internal/\\_generate\\_schema.py565-602](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L565-L602) ## Type-Specific Schema Generation Different Python types require specialized schema generation logic. Here are some key schema generation methods: ### Primitive Types For primitive types like strings, integers, and floats, the schema generation is relatively straightforward, with additions for constraints like minimum/maximum values or string patterns. ### Container Types For container types like lists, dictionaries, and sets, the schema generation recursively processes the contained types: ``` ``` Sources: - [pydantic/\\_internal/\\_generate\\_schema.py366-377](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L366-L377) ### Special Types",
  "Special types like IP addresses, paths, and fractions have custom schema generation logic: ``` ``` Sources: - [pydantic/\\_internal/\\_generate\\_schema.py450-481](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L450-L481) - [pydantic/\\_internal/\\_generate\\_schema.py482-539](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L482-L539) - [pydantic/\\_internal/\\_generate\\_schema.py604-619](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L604-L619) ### Models For Pydantic models, the schema generation process is more complex, involving: 1. Collecting field information 2. Processing validators and serializers 3. Handling inheritance and generics 4. Creating the appropriate model schema ``` ``` Sources: - [pydantic/\\_internal/\\_generate\\_schema.py718-842](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L718-L842) ## Handling Discriminated Unions Pydantic supports discriminated unions, which are unions of models that can be distinguished by a \"discriminator\" field. This enables more efficient validation and better error messages. ``` ``` Sources: - [pydantic/\\_internal/\\_discriminated\\_union.py34-68](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_discriminated_union.py#L34-L68) - [pydantic/\\_internal/\\_discriminated\\_union.py140-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_discriminated_union.py#L140-L168) - [tests/test\\_discriminated\\_union.py94-141](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_discriminated_union.py#L94-L141) ## Metadata Processing Type annotations can include metadata that affects schema generation. This is particularly relevant for `Annotated` types and field constraints. ``` ``` Metadata can come from various sources: - Field constraints (min\\_length, max\\_length, etc.) - Validators (before, after, wrap validators) - Field descriptions and examples - Custom schema transformations Sources: - [pydantic/\\_internal/\\_known\\_annotated\\_metadata.py168-329](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_known_annotated_metadata.py#L168-L329) - [tests/test\\_annotated.py28-134](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_annotated.py#L28-L134) ## Reference Handling Core schema generation deals with references between types, which is especially important for recursive or self-referential models. ``` ``` Sources: - [pydantic/\\_internal/\\_core\\_utils.py67-102](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_utils.py#L67-L102) - [pydantic/\\_internal/\\_generate\\_schema.py722-736](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L722-L736) - [tests/test\\_internal.py23-139](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_internal.py#L23-L139) ## Schema Cleaning and Finalization Before the schema is used, it undergoes cleaning and finalization processes: 1. Resolving definition references 2. Validating the schema structure 3. Removing unnecessary complexities 4. Optimizing for performance ``` ``` Sources: - [pydantic/\\_internal/\\_generate\\_schema.py664-666](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L664-L666) - [pydantic/\\_internal/\\_core\\_utils.py112-115](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_utils.py#L112-L115) ## Integration with JSON Schema Generation",
  "Once a core schema is generated, it can be used to create a JSON Schema representation. This is a separate process handled by the `GenerateJsonSchema` class and is covered in [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md). ``` ``` Sources: - [pydantic/json\\_schema.py216-426](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L216-L426) - [pydantic/\\_internal/\\_generate\\_schema.py706-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L706-L716) ## Customizing Core Schema Generation Types can customize their core schema generation by implementing the `__get_pydantic_core_schema__` method, which allows for complete control over how a type is validated and serialized. ``` ``` Sources: - [tests/test\\_annotated.py198-249](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_annotated.py#L198-L249) - [pydantic/\\_internal/\\_generate\\_schema.py843-889](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L843-L889) ## Conclusion Core Schema Generation is the fundamental process that enables Pydantic's validation capabilities. By converting Python types into a structured schema representation, it creates a bridge between Python's static type system and runtime validation logic. This system is highly extensible, allowing for custom validation rules, serialization behaviors, and schema transformations. The generated core schemas are used throughout Pydantic for validation, serialization, and documentation generation, making this system central to Pydantic's functionality. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Core Schema Generation](#core-schema-generation.md) - [Overview](#overview.md) - [The GenerateSchema Class](#the-generateschema-class.md) - [Schema Generation Process](#schema-generation-process.md) - [Core Schema Types](#core-schema-types.md) - [Type-Specific Schema Generation](#type-specific-schema-generation.md) - [Primitive Types](#primitive-types.md) - [Container Types](#container-types.md) - [Special Types](#special-types.md) - [Models](#models.md) - [Handling Discriminated Unions](#handling-discriminated-unions.md) - [Metadata Processing](#metadata-processing.md) - [Reference Handling](#reference-handling.md) - [Schema Cleaning and Finalization](#schema-cleaning-and-finalization.md) - [Integration with JSON Schema Generation](#integration-with-json-schema-generation.md) - [Customizing Core Schema Generation](#customizing-core-schema-generation.md) - [Conclusion](#conclusion.md)",
  "Backported Modules | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Backported Modules Relevant source files - [pydantic/decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py) - [pydantic/env\\_settings.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/env_settings.py) - [pydantic/schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py) - [pydantic/typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/typing.py) - [pydantic/utils.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py) - [tests/test\\_utils.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py) ## Purpose and Scope",
  "This document covers the V1 compatibility layer provided by Pydantic V2 through backported modules. These modules (`pydantic.schema`, `pydantic.utils`, `pydantic.typing`, `pydantic.env_settings`, and `pydantic.decorator`) serve as migration shims that redirect imports from their V1 locations to appropriate V2 equivalents while issuing deprecation warnings. For information about broader migration strategies and API changes between V1 and V2, see [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md). --- ## Overview Pydantic V2 reorganized its internal structure significantly compared to V1. To ease the transition for users with existing codebases, several commonly-imported V1 modules were preserved as \"backported modules\" that use the `getattr_migration` mechanism to provide backwards compatibility. **Sources:** [pydantic/schema.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py#L1-L5) [pydantic/utils.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L1-L5) [pydantic/typing.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/typing.py#L1-L5) --- ## Migration Architecture The backported modules use a dynamic attribute resolution mechanism to intercept imports and redirect them to their new V2 locations. ### Import Resolution Flow ``` ``` **How it Works:** 1. User imports from a V1 module location (e.g., `from pydantic.schema import schema_of`) 2. Python invokes `__getattr__` on the module 3. `getattr_migration` function intercepts the attribute lookup 4. A deprecation warning is issued 5. The attribute is resolved from its new V2 location and returned **Sources:** [pydantic/schema.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py#L1-L5) [pydantic/utils.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L1-L5) --- ## Backported Module List All backported modules follow the same pattern: they import `getattr_migration` and assign it as their module-level `__getattr__` function. ### Module Mapping | V1 Module | Status | Common Use Cases in V1 | | ----------------------- | ---------- | ------------------------------------------------- | | `pydantic.schema` | Backported | Schema generation utilities | | `pydantic.utils` | Backported | General utility functions | | `pydantic.typing` | Backported | Type annotation utilities | | `pydantic.env_settings` | Backported | Environment-based settings (now separate library) | | `pydantic.decorator` | Backported | Decorator utilities for validation | **Sources:** [pydantic/schema.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py#L1-L1) [pydantic/utils.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L1-L1) [pydantic/typing.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/typing.py#L1-L1) [pydantic/env\\_settings.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/env_settings.py#L1-L1) [pydantic/decorator.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py#L1-L1) --- ## Implementation Pattern Each backported module uses an identical implementation pattern: ``` ``` ### Code Structure All five backported modules follow this template: ``` ``` **Key Components:** - **Module docstring**: Identifies the module as a V1 backport - **`getattr_migration` import**: Brings in the migration function from `pydantic._migration` - **`__getattr__` assignment**: Python's special module-level attribute that is called when an attribute is not found through normal lookup",
  "**Sources:** [pydantic/schema.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py#L1-L5) [pydantic/utils.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L1-L5) [pydantic/typing.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/typing.py#L1-L5) [pydantic/env\\_settings.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/env_settings.py#L1-L5) [pydantic/decorator.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py#L1-L5) --- ## Specific Backported Modules ### pydantic.schema The `schema` module in V1 contained utilities for generating JSON schemas from Pydantic models. In V2, this functionality has been reorganized. **File Location:** [pydantic/schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py) **V1 Usage Example:** ``` ``` **Sources:** [pydantic/schema.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py#L1-L5) --- ### pydantic.utils The `utils` module in V1 contained various utility functions. In V2, these utilities have been moved to internal modules or replaced with new implementations. **File Location:** [pydantic/utils.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py) **V1 Usage Example:** ``` ``` **Note:** Test utilities like `import_string` are now located in `pydantic._internal._validators`. **Sources:** [pydantic/utils.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L1-L5) [tests/test\\_utils.py35-47](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py#L35-L47) --- ### pydantic.typing The `typing` module in V1 contained type-related utilities. In V2, typing utilities have been reorganized into `pydantic._internal._typing_extra`. **File Location:** [pydantic/typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/typing.py) **V1 Usage Example:** ``` ``` **Sources:** [pydantic/typing.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/typing.py#L1-L5) --- ### pydantic.env\\_settings The `env_settings` module provided the `BaseSettings` class for environment-based configuration in V1. In V2, this functionality has been moved to a separate package: `pydantic-settings`. **File Location:** [pydantic/env\\_settings.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/env_settings.py) **Migration Path:** ``` ``` **Sources:** [pydantic/env\\_settings.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/env_settings.py#L1-L5) --- ### pydantic.decorator The `decorator` module in V1 contained decorator utilities. In V2, the `@validate_call` decorator and related functionality are available directly from the main `pydantic` module. **File Location:** [pydantic/decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py) **V1 Usage Example:** ``` ``` **Sources:** [pydantic/decorator.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py#L1-L5) --- ## getattr\\_migration Mechanism The `getattr_migration` function is the core of the backport system. It creates a custom `__getattr__` handler for a module that:",
  "1. **Intercepts attribute access** when an attribute is not found in the module 2. **Issues deprecation warnings** to inform users that the import location is deprecated 3. **Resolves the new location** of the requested attribute in V2's structure 4. **Returns the attribute** from its new location ### Attribute Resolution Process ``` ``` **Sources:** [pydantic/schema.py3-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py#L3-L5) [pydantic/utils.py3-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L3-L5) --- ## Usage Behavior ### Import Compatibility When code attempts to import from a backported module location: ``` ``` **Runtime Behavior:** 1. Python loads the backport module (e.g., `pydantic/utils.py`) 2. `some_utility` is not in the module's `__dict__` 3. Python calls `__getattr__('some_utility')` 4. `getattr_migration` is invoked 5. A `DeprecationWarning` is issued 6. The function resolves the new location 7. The attribute from the new location is returned **Sources:** [pydantic/utils.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L1-L5) --- ### Deprecation Warnings The backport system issues deprecation warnings to encourage migration to V2 patterns. These warnings: - Identify the deprecated import path - Suggest the new V2 import location - Provide context for migration This approach allows existing code to continue working while guiding users toward V2 best practices. **Sources:** [pydantic/schema.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py#L1-L1) [pydantic/utils.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L1-L1) --- ## Migration Recommendations ### Short-term Strategy For immediate V2 compatibility: 1. **Accept the warnings**: The backported modules allow code to run without immediate changes 2. **Plan migration**: Use deprecation warnings as a guide for what needs updating 3. **Prioritize changes**: Focus on frequently-used imports first ### Long-term Strategy For sustainable V2 code: 1. **Remove backport dependencies**: Update imports to use V2 locations 2. **Install separate packages**: For `env_settings`, migrate to `pydantic-settings` 3. **Update to V2 APIs**: Use new V2 methods and patterns (see [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)) 4. **Test thoroughly**: Ensure behavior matches expectations after migration **Sources:** [pydantic/env\\_settings.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/env_settings.py#L1-L5) --- ## Testing Considerations The test suite validates utility functions that were historically part of these backported modules: ### Utility Function Tests The test file `tests/test_utils.py` covers various utilities that were part of the V1 `utils` module:",
  "- **`import_string`**: Dynamic module/attribute importing ([tests/test\\_utils.py35-46](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py#L35-L46)) - **`display_as_type`**: Type representation formatting ([tests/test\\_utils.py60-102](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py#L60-L102)) - **`lenient_issubclass`**: Safe subclass checking ([tests/test\\_utils.py105-120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py#L105-L120)) - **`unique_list`**: Deduplication utilities ([tests/test\\_utils.py123-133](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py#L123-L133)) - **`ValueItems`**: Include/exclude logic for nested data ([tests/test\\_utils.py136-246](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py#L136-L246)) - **Alias generators**: `to_camel`, `to_pascal`, `to_snake` ([tests/test\\_utils.py445-523](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py#L445-L523)) These utilities demonstrate the types of functions that were available through `pydantic.utils` in V1 and are now accessible through internal modules in V2. **Sources:** [tests/test\\_utils.py1-528](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py#L1-L528) --- ## Summary The backported modules provide a compatibility layer that: - **Enables gradual migration** from Pydantic V1 to V2 - **Maintains backwards compatibility** for existing import paths - **Issues clear warnings** to guide users toward V2 patterns - **Uses a consistent mechanism** across all five modules (`schema`, `utils`, `typing`, `env_settings`, `decorator`) All backported modules rely on the `getattr_migration` function to intercept attribute access and redirect to new V2 locations, making the transition smoother for users with large existing codebases. **Sources:** [pydantic/schema.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py#L1-L5) [pydantic/utils.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py#L1-L5) [pydantic/typing.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/typing.py#L1-L5) [pydantic/env\\_settings.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/env_settings.py#L1-L5) [pydantic/decorator.py1-5](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py#L1-L5) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Backported Modules](#backported-modules.md) - [Purpose and Scope](#purpose-and-scope.md) - [Overview](#overview.md) - [Migration Architecture](#migration-architecture.md) - [Import Resolution Flow](#import-resolution-flow.md) - [Backported Module List](#backported-module-list.md) - [Module Mapping](#module-mapping.md) - [Implementation Pattern](#implementation-pattern.md) - [Code Structure](#code-structure.md) - [Specific Backported Modules](#specific-backported-modules.md) - [pydantic.schema](#pydanticschema.md) - [pydantic.utils](#pydanticutils.md) - [pydantic.typing](#pydantictyping.md) - [pydantic.env\\_settings](#pydanticenv_settings.md) - [pydantic.decorator](#pydanticdecorator.md) - [getattr\\_migration Mechanism](#getattr_migration-mechanism.md) - [Attribute Resolution Process](#attribute-resolution-process.md) - [Usage Behavior](#usage-behavior.md) - [Import Compatibility](#import-compatibility.md) - [Deprecation Warnings](#deprecation-warnings.md) - [Migration Recommendations](#migration-recommendations.md) - [Short-term Strategy](#short-term-strategy.md) - [Long-term Strategy](#long-term-strategy.md) - [Testing Considerations](#testing-considerations.md) - [Utility Function Tests](#utility-function-tests.md) - [Summary](#summary.md)",
  "Migration and Compatibility | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Backward Compatibility and Migration Relevant source files",
  "- [.pre-commit-config.yaml](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml) - [docs/concepts/config.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md) - [docs/concepts/dataclasses.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md) - [docs/concepts/json.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json.md) - [docs/concepts/json\\_schema.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md) - [docs/concepts/models.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md) - [docs/concepts/performance.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md) - [docs/concepts/serialization.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md) - [docs/concepts/validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md) - [docs/contributing.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md) - [docs/examples/custom\\_validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/examples/custom_validators.md) - [docs/integrations/aws\\_lambda.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/aws_lambda.md) - [docs/integrations/llms.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/llms.md) - [docs/migration.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md) - [pydantic/schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/schema.py) - [pydantic/typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/typing.py) - [pydantic/utils.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/utils.py) - [release/README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/release/README.md) - [tests/test\\_utils.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_utils.py) This document explains Pydantic's approach to backward compatibility and provides guidance for migrating from Pydantic V1 to V2. It covers compatibility mechanisms, migration tools, common migration patterns, and best practices for handling Pydantic version transitions smoothly. For information on specific deprecated features, see [Deprecated Features](pydantic/pydantic/8.2-backported-modules.md). ## Overview Pydantic V2 introduces significant architectural changes and improvements over V1, including performance enhancements, new features, and API refinements. While these changes introduced breaking changes, Pydantic provides several mechanisms to ease the transition between versions. ``` ``` Sources: [docs/migration.md1-78](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L1-L78) ## Installations and Versions ### Installing Pydantic V2 Pydantic V2 is the current production release and can be installed with: ``` ``` ### Using Pydantic V1 If you need to use Pydantic V1 for any reason, you can install it with: ``` ``` Alternatively, if you are using Pydantic V2 but need access to V1 features, you can use the `pydantic.v1` namespace: ``` ``` Sources: [docs/migration.md10-76](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L10-L76) ## Compatibility Mechanisms Pydantic implements several mechanisms to ensure backward compatibility: ``` ``` Sources: [docs/migration.md79-124](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L79-L124) [tests/test\\_deprecated.py35-111](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_deprecated.py#L35-L111)",
  "### Using the `pydantic.v1` Namespace Starting from `pydantic>=1.10.17`, the `pydantic.v1` namespace can be used to access V1 functionality even when using V2. This allows for gradual migration: ``` ``` Sources: [docs/migration.md78-124](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L78-L124) ### Deprecation Warnings Pydantic V2 issues deprecation warnings for features that have been renamed or removed. These warnings provide guidance on the recommended replacements: ``` ``` In tests, the deprecation warnings are being handled explicitly: ``` ``` Sources: [tests/test\\_deprecated.py27-50](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_deprecated.py#L27-L50) [tests/test\\_deprecated.py277-296](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_deprecated.py#L277-L296) ## Migration Tool To help automate the migration process, Pydantic provides a code transformation tool called `bump-pydantic`. ### Installation and Usage ``` ``` This tool attempts to automatically transform your code to use V2 patterns and APIs. Sources: [docs/migration.md25-47](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L25-L47) ## Key Breaking Changes and Migration Paths ### Model API Changes The following table shows the most important method/attribute name changes in `BaseModel`: | Pydantic V1 | Pydantic V2 | | ------------------------ | ------------------------ | | `__fields__` | `model_fields` | | `__private_attributes__` | `__pydantic_private__` | | `__validators__` | `__pydantic_validator__` | | `construct()` | `model_construct()` | | `copy()` | `model_copy()` | | `dict()` | `model_dump()` | | `json_schema()` | `model_json_schema()` | | `json()` | `model_dump_json()` | | `parse_obj()` | `model_validate()` | | `parse_raw()` | `model_validate_json()` | | `update_forward_refs()` | `model_rebuild()` | Many V1 methods are retained with deprecation warnings to ease migration. Sources: [docs/migration.md126-169](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L126-L169) [tests/test\\_deprecated.py319-346](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_deprecated.py#L319-L346) ### Config Changes Configuration in V2 uses a dictionary called `model_config` instead of a nested `Config` class: ``` ``` Many config settings have been renamed or removed in V2. Sources: [docs/migration.md321-357](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L321-L357) [docs/concepts/config.md1-85](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md#L1-L85) ### Validator Changes V2 replaces the decorators `@validator` and `@root_validator` with `@field_validator` and `@model_validator`, which provide new features and improvements: ``` ``` The decorator `@validate_arguments` has been renamed to `@validate_call`. Sources: [docs/migration.md359-403](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L359-L403) [docs/concepts/validators.md1-161](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md#L1-L161) ### Generic Models `GenericModel` has been removed. Instead, create generic models by adding `Generic` as a parent class to a `BaseModel`: ``` ``` Sources: [docs/migration.md256-275](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L256-L275) ### Type System Changes V2 introduces `TypeAdapter` to replace V1's `parse_obj_as` and related functions: ``` ```",
  "Sources: [docs/migration.md730-768](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L730-L768) [docs/concepts/type\\_adapter.md1-16](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/type_adapter.md#L1-L16) ### Custom Types The way custom types are defined has changed in V2: ``` ``` For custom types, replace: - `__get_validators__` with `__get_pydantic_core_schema__` - `__modify_schema__` with `__get_pydantic_json_schema__` V2 also supports `typing.Annotated` to add validation logic to existing types. Sources: [docs/migration.md771-792](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L771-L792) [docs/concepts/types.md65-138](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/types.md#L65-L138) ### Required, Optional, and Nullable Fields V2 changes how optional and required fields work: | State | Field Definition | | ---------------------------------------------- | --------------------------- | | Required, cannot be `None` | `f1: str` | | Not required, cannot be `None`, has default | `f2: str = 'abc'` | | Required, can be `None` | `f3: Optional[str]` | | Not required, can be `None`, default is `None` | `f4: Optional[str] = None` | | Not required, can be `None`, has default | `f5: Optional[str] = 'abc'` | A field annotated as `Optional[T]` will be required but allow `None` values, unlike in V1 where it implicitly had a default of `None`. Sources: [docs/migration.md647-696](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L647-L696) ## Forward Compatibility Techniques When writing code that needs to work with both V1 and V2, consider these approaches: ### Compatible Import Pattern ``` ``` ### Feature Detection ``` ``` Sources: [docs/migration.md78-124](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L78-L124) ## Common Migration Issues and Solutions ### Equality Behavior The `__eq__` method has changed for models in V2: - Models can only be equal to other `BaseModel` instances - They must have the same type, field values, extra values, and private attribute values - Models are no longer equal to dicts containing their data ### Input Type Preservation V2 no longer preserves input types for generic collections, except for subclasses of `BaseModel` and dataclasses: ``` ``` Sources: [docs/migration.md498-615](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L498-L615) ### Default Value Validation In V2, validators marked with `always=True` will cause standard type validation to be applied to default values: ``` ``` Sources: [docs/migration.md372-396](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L372-L396) ## Best Practices 1. **Update incrementally**: Start by installing V2 and using the `pydantic.v1` namespace for incompatible code. 2. **Address deprecation warnings**: Run your tests with deprecation warnings enabled to catch and fix deprecated usage. 3. **Use type annotations**: Proper type annotations will help tools and error messages guide you during migration. 4. **Test thoroughly**: Ensure your tests cover edge cases as V2's validation behavior differs in some subtle ways. 5. **Use modern Python features**: Prefer modern Python typing features like `list[int]` over `List[int]`. ## Conclusion Migrating from Pydantic V1 to V2 involves several significant changes, but the provided compatibility mechanisms, migration tools, and incremental migration paths make the transition manageable. By understanding the key changes and following the recommended migration patterns, you can successfully update your code to take advantage of the improvements in Pydantic V2. Sources: [docs/migration.md1-10](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L1-L10) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Backward Compatibility and Migration](#backward-compatibility-and-migration.md) - [Overview](#overview.md) - [Installations and Versions](#installations-and-versions.md) - [Installing Pydantic V2](#installing-pydantic-v2.md) - [Using Pydantic V1](#using-pydantic-v1.md) - [Compatibility Mechanisms](#compatibility-mechanisms.md) - [Using the \\`pydantic.v1\\` Namespace](#using-the-pydanticv1-namespace.md) - [Deprecation Warnings](#deprecation-warnings.md) - [Migration Tool](#migration-tool.md) - [Installation and Usage](#installation-and-usage.md) - [Key Breaking Changes and Migration Paths](#key-breaking-changes-and-migration-paths.md) - [Model API Changes](#model-api-changes.md) - [Config Changes](#config-changes.md) - [Validator Changes](#validator-changes.md) - [Generic Models](#generic-models.md) - [Type System Changes](#type-system-changes.md) - [Custom Types](#custom-types.md) - [Required, Optional, and Nullable Fields](#required-optional-and-nullable-fields.md) - [Forward Compatibility Techniques](#forward-compatibility-techniques.md) - [Compatible Import Pattern](#compatible-import-pattern.md) - [Feature Detection](#feature-detection.md) - [Common Migration Issues and Solutions](#common-migration-issues-and-solutions.md) - [Equality Behavior](#equality-behavior.md) - [Input Type Preservation](#input-type-preservation.md) - [Default Value Validation](#default-value-validation.md) - [Best Practices](#best-practices.md) - [Conclusion](#conclusion.md)",
  "Dataclass Support | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Dataclass Support Relevant source files",
  "- [pydantic/\\_internal/\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py) - [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py) - [pydantic/\\_internal/\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generics.py) - [pydantic/\\_internal/\\_typing\\_extra.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_typing_extra.py) - [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py) - [pydantic/generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/generics.py) - [tests/test\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py) - [tests/test\\_forward\\_ref.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_forward_ref.py) - [tests/test\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_generics.py) - [tests/test\\_typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_typing.py) ## Purpose and Scope This page documents Pydantic's enhanced dataclass functionality, which provides validation capabilities to Python dataclasses through the `@pydantic.dataclasses.dataclass` decorator. Pydantic dataclasses integrate seamlessly with the standard library `dataclasses` module while adding runtime validation, serialization, and schema generation. For information about Pydantic's core model system, see [BaseModel](pydantic/pydantic/2.1-basemodel.md). For general field configuration, see [Field System](pydantic/pydantic/2.2-field-system.md). For validation logic, see [Validators](pydantic/pydantic/4.1-validators.md). ## Decorator API and Core Types ### The `dataclass` Decorator The `@pydantic.dataclasses.dataclass` decorator wraps standard Python dataclasses with Pydantic validation. It accepts all standard dataclass parameters plus Pydantic-specific configuration. ``` ``` **Sources:** [pydantic/dataclasses.py98-313](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L98-L313) ### Decorator Parameters | Parameter | Type | Default | Description | | ------------------ | ---------------------------- | ------- | ---------------------------------------------------- | | `init` | `Literal[False]` | `False` | Must be `False`; Pydantic provides custom `__init__` | | `repr` | `bool` | `True` | Include field in `__repr__` | | `eq` | `bool` | `True` | Generate `__eq__` method | | `order` | `bool` | `False` | Generate comparison methods | | `unsafe_hash` | `bool` | `False` | Generate `__hash__` method | | `frozen` | `bool \\| None` | `None` | Make dataclass immutable | | `config` | `ConfigDict \\| type \\| None` | `None` | Pydantic configuration | | `validate_on_init` | `bool \\| None` | `None` | Deprecated; always validates | | `kw_only` | `bool` | `False` | Require keyword-only arguments (Python 3.10+) | | `slots` | `bool` | `False` | Use `__slots__` (Python 3.10+) | **Sources:** [pydantic/dataclasses.py29-96](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L29-L96) ### PydanticDataclass Protocol Once decorated, a class gains the `PydanticDataclass` protocol attributes: ``` ``` **Sources:** [pydantic/\\_internal/\\_dataclasses.py40-63](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L40-L63)",
  "## Dataclass Creation and Lifecycle ### Creation Flow ``` ``` **Sources:** [pydantic/dataclasses.py153-313](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L153-L313) [pydantic/\\_internal/\\_dataclasses.py85-190](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L190) ### The `create_dataclass` Function The internal `create_dataclass` function orchestrates the transformation: 1. **Validation**: Ensures class is not already a `BaseModel` ([pydantic/dataclasses.py164-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L164-L168)) 2. **Configuration**: Merges decorator config with `__pydantic_config__` attribute ([pydantic/dataclasses.py184-187](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L184-L187)) 3. **Vanilla Handling**: Subclasses stdlib dataclasses to add validation ([pydantic/dataclasses.py194-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L194-L206)) 4. **Field Conversion**: Wraps `Field()` calls with `dataclasses.field()` ([pydantic/dataclasses.py228-234](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L228-L234)) 5. **Stdlib Application**: Applies `@dataclasses.dataclass` decorator ([pydantic/dataclasses.py239-249](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L239-L249)) 6. **Completion**: Builds schema and validators ([pydantic/dataclasses.py310](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L310-L310)) **Sources:** [pydantic/dataclasses.py153-313](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L153-L313) ### Field Patching System The `patch_base_fields` context manager temporarily modifies parent dataclass fields: ``` ``` This ensures that `kw_only` and `repr` attributes from `Field()` are recognized by the stdlib `@dataclass` decorator during class construction. **Sources:** [pydantic/\\_internal/\\_dataclasses.py229-315](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L229-L315) ## Field Collection ### Dataclass Field Collection Field collection for dataclasses differs from models because fields are already processed by stdlib: ``` ``` **Sources:** [pydantic/\\_internal/\\_fields.py460-524](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L460-L524) ### Field Collection Process The `collect_dataclass_fields` function: 1. Iterates through `__mro__` in reverse to respect inheritance 2. Accesses `__dataclass_fields__` from each base 3. Evaluates type annotations using namespace resolver 4. Filters out `ClassVar` annotations 5. Handles `InitVar` types specially 6. Creates `FieldInfo` instances from dataclass field metadata **Sources:** [pydantic/\\_internal/\\_fields.py460-524](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L460-L524) ### FieldInfo from Dataclass Field ``` ``` **Sources:** [pydantic/\\_internal/\\_fields.py508-524](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L508-L524) ## Integration with Standard Library Dataclasses ### Converting Vanilla Dataclasses Pydantic can enhance existing stdlib dataclasses: ``` ``` When converting, Pydantic: 1. Subclasses the original to avoid mutation 2. Preserves generics by including `Generic[*params]` in bases 3. Maintains original `__doc__` (if not default) 4. Forwards frozen/order/etc parameters",
  "**Sources:** [pydantic/dataclasses.py194-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L194-L206) [tests/test\\_dataclasses.py807-840](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L807-L840) ### Inheritance from Vanilla Dataclasses ``` ``` **Sources:** [tests/test\\_dataclasses.py941-958](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L941-L958) [pydantic/\\_internal/\\_fields.py488-499](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L488-L499) ### Field Compatibility Both `dataclasses.field()` and `pydantic.Field()` work in Pydantic dataclasses: | Feature | `dataclasses.field()` | `pydantic.Field()` | | ---------------------- | --------------------- | ------------------ | | `default` | ✓ | ✓ | | `default_factory` | ✓ | ✓ | | `init` | ✓ | ✓ | | `repr` | ✓ | ✓ | | `kw_only` | ✓ | ✓ | | `metadata` | ✓ | ✓ | | Validation constraints | ✗ | ✓ | | Alias | ✗ | ✓ | | JSON schema metadata | ✗ | ✓ | **Sources:** [tests/test\\_dataclasses.py573-591](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L573-L591) [pydantic/dataclasses.py228-234](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L228-L234) ## Validation and Initialization ### Custom `__init__` Injection Pydantic replaces the dataclass `__init__` with validation logic: ``` ``` **Sources:** [pydantic/\\_internal/\\_dataclasses.py118-122](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L118-L122) ### Validation Modes ``` ``` **Sources:** [pydantic/\\_internal/\\_dataclasses.py118-122](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L118-L122) [tests/test\\_dataclasses.py270-283](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L270-L283) ### Validate Assignment With `validate_assignment=True`, field assignments are validated: ``` ``` **Sources:** [pydantic/dataclasses.py251-268](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L251-L268) [tests/test\\_dataclasses.py120-130](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L120-L130) ## Dataclass Completion ### The `complete_dataclass` Function This function builds the schema and creates validators/serializers: ``` ``` **Sources:** [pydantic/\\_internal/\\_dataclasses.py85-190](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L190) ### Deferred Building When `defer_build=True` in config: 1. Mock validator/serializer are installed 2. Schema building is skipped 3. `__pydantic_complete__ = False` 4. First validation attempt triggers rebuild **Sources:** [pydantic/\\_internal/\\_dataclasses.py130-132](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L130-L132) ### Rebuilding Dataclasses The `rebuild_dataclass` function handles forward reference resolution: ``` ``` **Sources:** [pydantic/dataclasses.py340-398](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L340-L398) ## Advanced Features ### InitVar Support `InitVar` fields are passed to `__init__` but not stored: ``` ```",
  "**Sources:** [tests/test\\_dataclasses.py673-702](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L673-L702) ### `__post_init__` Hook Called after validation completes: 1. All fields are validated and set 2. `__post_init__(*initvars)` is called 3. Can modify fields (unless frozen) 4. Can perform additional validation 5. `InitVar` parameters are passed as arguments **Sources:** [tests/test\\_dataclasses.py270-283](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L270-L283) [tests/test\\_dataclasses.py380-396](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L380-L396) ### Frozen Dataclasses ``` ``` The `frozen` parameter can be set via decorator or config. Decorator takes priority. **Sources:** [pydantic/dataclasses.py209-220](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L209-L220) [tests/test\\_dataclasses.py108-118](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L108-L118) ### Computed Fields Computed fields work in dataclasses: ``` ``` - Not included in validation schema - Included in serialization schema - Appear in `model_dump()` output **Sources:** [tests/test\\_dataclasses.py1285-1328](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L1285-L1328) ## Schema Generation ### Core Schema Generation Dataclasses use the `dataclass_schema` core schema type: ``` ``` **Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) (referenced but not in provided files) ### JSON Schema Generation JSON schemas for dataclasses: | Mode | Schema Representation | | --------------- | -------------------------------- | | `validation` | Object with required fields | | `serialization` | Object including computed fields | Nested dataclasses become `$ref` definitions. **Sources:** [tests/test\\_dataclasses.py607-645](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L607-L645) [tests/test\\_dataclasses.py648-670](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L648-L670) ## Utility Functions ### `is_pydantic_dataclass` Type guard to check if a class is a Pydantic dataclass: ``` ``` Checks both the Pydantic marker and stdlib dataclass status. **Sources:** [pydantic/dataclasses.py401-413](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L401-L413) ### `is_stdlib_dataclass` Internal function to identify stdlib-only dataclasses: ``` ``` Used during dataclass creation to detect vanilla dataclasses for subclassing. **Sources:** [pydantic/\\_internal/\\_dataclasses.py193-205](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L193-L205) ### `set_dataclass_mocks` Installs placeholder validator/serializer when building is deferred: ``` ``` **Sources:** [pydantic/\\_internal/\\_dataclasses.py131](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L131-L131) ## Configuration and ConfigDict Dataclasses support the same `ConfigDict` as models: | Config Option | Effect in Dataclasses | | ------------------------- | --------------------------------------------------------- | | `validate_assignment` | Enable validation on field assignment | | `frozen` | Make dataclass immutable (alternative to decorator param) | | `arbitrary_types_allowed` | Allow non-Pydantic types | | `str_max_length` | String length validation | | `extra` | Handling of extra attributes during assignment | | `revalidate_instances` | Revalidate dataclass instances |",
  "**Sources:** [tests/test\\_dataclasses.py120-149](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L120-L149) [tests/test\\_dataclasses.py515-540](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L515-L540) ### Config Priority 1. Decorator `config` parameter (highest) 2. Class `__pydantic_config__` attribute 3. Default Pydantic config (lowest) Warnings are issued if both decorator and attribute are specified. **Sources:** [pydantic/dataclasses.py175-181](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L175-L181) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Dataclass Support](#dataclass-support.md) - [Purpose and Scope](#purpose-and-scope.md) - [Decorator API and Core Types](#decorator-api-and-core-types.md) - [The \\`dataclass\\` Decorator](#the-dataclass-decorator.md) - [Decorator Parameters](#decorator-parameters.md) - [PydanticDataclass Protocol](#pydanticdataclass-protocol.md) - [Dataclass Creation and Lifecycle](#dataclass-creation-and-lifecycle.md) - [Creation Flow](#creation-flow.md) - [The \\`create\\_dataclass\\` Function](#the-create_dataclass-function.md) - [Field Patching System](#field-patching-system.md) - [Field Collection](#field-collection.md) - [Dataclass Field Collection](#dataclass-field-collection.md) - [Field Collection Process](#field-collection-process.md) - [FieldInfo from Dataclass Field](#fieldinfo-from-dataclass-field.md) - [Integration with Standard Library Dataclasses](#integration-with-standard-library-dataclasses.md) - [Converting Vanilla Dataclasses](#converting-vanilla-dataclasses.md) - [Inheritance from Vanilla Dataclasses](#inheritance-from-vanilla-dataclasses.md) - [Field Compatibility](#field-compatibility.md) - [Validation and Initialization](#validation-and-initialization.md) - [Custom \\`\\_\\_init\\_\\_\\` Injection](#custom-__init__-injection.md) - [Validation Modes](#validation-modes.md) - [Validate Assignment](#validate-assignment.md) - [Dataclass Completion](#dataclass-completion.md) - [The \\`complete\\_dataclass\\` Function](#the-complete_dataclass-function.md) - [Deferred Building](#deferred-building.md) - [Rebuilding Dataclasses](#rebuilding-dataclasses.md) - [Advanced Features](#advanced-features.md) - [InitVar Support](#initvar-support.md) - [\\`\\_\\_post\\_init\\_\\_\\` Hook](#__post_init__-hook.md) - [Frozen Dataclasses](#frozen-dataclasses.md) - [Computed Fields](#computed-fields.md) - [Schema Generation](#schema-generation.md) - [Core Schema Generation](#core-schema-generation.md) - [JSON Schema Generation](#json-schema-generation.md) - [Utility Functions](#utility-functions.md) - [\\`is\\_pydantic\\_dataclass\\`](#is_pydantic_dataclass.md) - [\\`is\\_stdlib\\_dataclass\\`](#is_stdlib_dataclass.md) - [\\`set\\_dataclass\\_mocks\\`](#set_dataclass_mocks.md) - [Configuration and ConfigDict](#configuration-and-configdict.md) - [Config Priority](#config-priority.md)",
  "JSON Schema Generation | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # JSON Schema Generation Relevant source files - [pydantic/\\_internal/\\_core\\_metadata.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_metadata.py) - [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) - [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py) - [pyproject.toml](https://github.com/pydantic/pydantic/blob/76ef0b08/pyproject.toml) - [tests/test\\_datetime.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_datetime.py) - [tests/test\\_json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py)",
  "This document explains how Pydantic generates JSON Schema from models and types. JSON Schema is a vocabulary that allows you to annotate and validate JSON documents, which is useful for API documentation, client code generation, and validation in different environments. For information about internal core schema generation, see [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md). ## Overview Pydantic provides built-in JSON Schema generation capabilities for its models and types. The generated JSON Schema documents describe the expected structure, types, constraints, and other metadata for validation and serialization purposes. ``` ``` Sources: [pydantic/json\\_schema.py216-427](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L216-L427) ## Architecture The JSON Schema generation system centers around the `GenerateJsonSchema` class, which handles the entire process of converting Pydantic core schemas into standard JSON Schema documents. ``` ``` Sources: [pydantic/json\\_schema.py216-390](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L216-L390) ### Key Components 1. **GenerateJsonSchema**: The main class responsible for converting core schemas to JSON Schema documents 2. **Reference Management System**: Handles schema references to avoid duplication and circular dependencies 3. **Schema Mode Handling**: Supports both 'validation' and 'serialization' modes 4. **Type Mapping**: Converts Pydantic types to their JSON Schema equivalents ### JSON Schema Generation Flow ``` ``` Sources: [pydantic/json\\_schema.py378-425](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L378-L425) ## Reference System The JSON Schema generator uses a sophisticated reference system to handle complex type references, avoid duplication, and manage circular dependencies. ``` ``` Sources: [pydantic/json\\_schema.py119-139](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L119-L139) [pydantic/json\\_schema.py258-264](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L258-L264) When Pydantic encounters the same type multiple times (such as a model used in different places), it creates a schema definition and uses references to avoid duplication: 1. **CoreRef**: Internal identifier for a core schema 2. **DefsRef**: Name of the type in the definitions dictionary 3. **JsonRef**: JSON Schema `$ref` value (e.g., `#/$defs/User`) ### Reference Template By default, references use the format `#/$defs/{model}`, but this can be customized with the `ref_template` parameter: ``` ``` Sources: [pydantic/json\\_schema.py116-117](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L116-L117) [tests/test\\_json\\_schema.py143-178](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L143-L178) ## Schema Modes Pydantic supports two modes for JSON Schema generation: | Mode | Description | Use Case | | --------------- | ---------------------------- | ------------------------------------------- | | `validation` | Schema for input validation | Describes what input data should look like | | `serialization` | Schema for serialized output | Describes what model.model\\_dump() produces | The modes are important because some types have different representations for validation vs. serialization: ``` ``` Sources: [pydantic/json\\_schema.py79-87](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L79-L87) [tests/test\\_json\\_schema.py524-542](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L524-L542) ## Customizing JSON Schema Generation Pydantic offers several ways to customize the generated JSON Schema: ### Model Configuration Use the `model_config` with `json_schema_extra` to add custom attributes to the schema: ``` ``` Sources: [tests/test\\_json\\_schema.py448-457](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L448-L457) ### Field Customization Fields support various JSON Schema attributes directly: ``` ``` Sources: [tests/test\\_json\\_schema.py226-245](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L226-L245)",
  "### Type-Level Customization Custom types can implement `__get_pydantic_json_schema__` to control their schema representation: ``` ``` Sources: [tests/test\\_json\\_schema.py292-330](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L292-L330) ## Common JSON Schema Features ### Field Aliases When using field aliases, schemas can be generated by alias or by attribute name: ``` ``` Sources: [tests/test\\_json\\_schema.py125-142](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L125-L142) [tests/test\\_json\\_schema.py253-259](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L253-L259) ### Nested Models When a model contains other models, those models are included in the `$defs` section and referenced: ``` ``` Sources: [tests/test\\_json\\_schema.py195-223](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L195-L223) [tests/test\\_json\\_schema.py546-565](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L546-L565) ### Enums Enum classes are represented with their possible values: ``` ``` Sources: [tests/test\\_json\\_schema.py261-289](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L261-L289) ## Integration with Core Schema Generation JSON Schema generation works in tandem with core schema generation: ``` ``` During core schema generation, metadata can be attached for later use in JSON Schema generation: 1. `pydantic_js_functions`: For defining custom JSON Schema handlers 2. `pydantic_js_updates`: For adding or updating JSON Schema properties 3. `pydantic_js_extra`: For adding complete JSON Schema objects Sources: [pydantic/\\_internal/\\_core\\_metadata.py13-46](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_metadata.py#L13-L46) [pydantic/\\_internal/\\_generate\\_schema.py668-713](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L668-L713) ## API Reference Here are the main functions and classes for JSON Schema generation: | Name | Description | | ------------------------------- | -------------------------------------------- | | `BaseModel.model_json_schema()` | Generate JSON Schema for a model | | `TypeAdapter.json_schema()` | Generate JSON Schema for any type | | `models_json_schema()` | Generate JSON Schema for multiple models | | `GenerateJsonSchema` | Class for customizing JSON Schema generation | Sources: [pydantic/json\\_schema.py216-224](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L216-L224) [tests/test\\_json\\_schema.py669-670](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py#L669-L670) ## Advanced Features ### Schema Dialect By default, Pydantic uses the JSON Schema draft 2020-12 dialect, but this can be customized by extending `GenerateJsonSchema`: ``` ``` Sources: [pydantic/json\\_schema.py250-251](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L250-L251) ### Warning Management The JSON Schema generator can emit warnings for issues like non-serializable defaults or skipped discriminators: ``` ``` Sources: [pydantic/json\\_schema.py101-106](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L101-L106) [pydantic/json\\_schema.py252-254](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L252-L254) ### Advanced Reference Management For complex schemas with many references, Pydantic attempts to simplify reference names by removing redundancy while avoiding collisions: ``` ``` Sources: [pydantic/json\\_schema.py135-186](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L135-L186) ## Performance Considerations For models with many related types, JSON Schema generation may be expensive. Consider:",
  "1. Caching generated schemas when appropriate 2. Only generating schemas when needed, not during startup 3. Using `TypeAdapter` for simpler types that don't need full model capabilities Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [JSON Schema Generation](#json-schema-generation.md) - [Overview](#overview.md) - [Architecture](#architecture.md) - [Key Components](#key-components.md) - [JSON Schema Generation Flow](#json-schema-generation-flow.md) - [Reference System](#reference-system.md) - [Reference Template](#reference-template.md) - [Schema Modes](#schema-modes.md) - [Customizing JSON Schema Generation](#customizing-json-schema-generation.md) - [Model Configuration](#model-configuration.md) - [Field Customization](#field-customization.md) - [Type-Level Customization](#type-level-customization.md) - [Common JSON Schema Features](#common-json-schema-features.md) - [Field Aliases](#field-aliases.md) - [Nested Models](#nested-models.md) - [Enums](#enums.md) - [Integration with Core Schema Generation](#integration-with-core-schema-generation.md) - [API Reference](#api-reference.md) - [Advanced Features](#advanced-features.md) - [Schema Dialect](#schema-dialect.md) - [Warning Management](#warning-management.md) - [Advanced Reference Management](#advanced-reference-management.md) - [Performance Considerations](#performance-considerations.md)",
  "BaseModel | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # BaseModel Relevant source files - [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) - [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) - [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) - [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) - [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py)",
  "BaseModel is the cornerstone of Pydantic's data validation system. It provides a declarative way to define data models with type annotations, enabling automatic validation, serialization, and documentation of data structures. This page covers the core functionality, architecture, and usage patterns of the BaseModel class. For information about model configuration options, see [Model Configuration](pydantic/pydantic/2.3-model-configuration.md). For details on how fields work within models, see [Field System](pydantic/pydantic/2.2-field-system.md). ## Purpose and Functionality BaseModel serves as the foundation for creating validated data models in Pydantic. Key functionality includes: - Validation of input data against defined types - Automatic type coercion where possible - JSON serialization and deserialization - Schema generation for documentation - Data manipulation utilities - Configuration customization Models are defined by creating classes that inherit from BaseModel, with fields specified using Python type annotations. Sources: [pydantic/main.py121-152](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L121-L152) ## BaseModel Architecture **BaseModel Class Structure** ``` ``` BaseModel is implemented with `ModelMetaclass` (defined in [pydantic/\\_internal/\\_model\\_construction.py79](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L79)) as its metaclass. During class definition, `ModelMetaclass.__new__` processes type annotations, collects field information from the class and its bases, generates core schemas, and creates the `SchemaValidator` and `SchemaSerializer` instances from pydantic-core. Sources: - [pydantic/main.py118-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L238) - [pydantic/\\_internal/\\_model\\_construction.py79-276](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L276) ## Model Lifecycle **Model Definition and Instantiation Flow** ``` ``` ### Model Definition Phase When a class inheriting from `BaseModel` is defined, `ModelMetaclass.__new__` is invoked: 1. **Field Collection** ([pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#LNaN-LNaN)): Annotations are inspected and converted to `FieldInfo` objects stored in `__pydantic_fields__` 2. **Schema Generation** ([pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#LNaN-LNaN)): A `CoreSchema` is generated from field definitions and decorators 3. **Validator/Serializer Creation**: `SchemaValidator` and `SchemaSerializer` instances from pydantic-core are created from the core schema 4. **Class Attributes Set**: `__pydantic_validator__`, `__pydantic_serializer__`, and `__pydantic_core_schema__` are assigned to the class ### Model Instantiation Phase When instantiating a model with `MyModel(**data)`:",
  "1. ****init** Entry** ([pydantic/main.py240](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L240)): `BaseModel.__init__` receives keyword arguments as `**data` 2. **Validation** ([pydantic/main.py250](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L250-L250)): Calls `self.__pydantic_validator__.validate_python(data, self_instance=self)` 3. **Rust Validation**: pydantic-core (Rust) validates and coerces data according to the core schema 4. **Instance Attributes**: The validated data is set on `__dict__`, `__pydantic_fields_set__` is populated with explicitly provided fields 5. **Post-Init** ([pydantic/main.py369-370](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L369-L370)): If `__pydantic_post_init__` is set, `model_post_init(context)` is called 6. **Private Attributes** ([pydantic/\\_internal/\\_model\\_construction.py354-369](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L354-L369)): `__pydantic_private__` is initialized with default values Sources: - [pydantic/main.py240-260](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L260) - [pydantic/\\_internal/\\_model\\_construction.py80-258](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L258) - [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#LNaN-LNaN) - [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#LNaN-LNaN) ## Core Instance Attributes BaseModel instances maintain several internal attributes for validation and serialization: ### Class-Level Attributes | Attribute | Type | Description | | ------------------------------ | ------------------------------ | ------------------------------------------------------ | | `__pydantic_fields__` | `Dict[str, FieldInfo]` | Field definitions (name → FieldInfo) | | `__pydantic_computed_fields__` | `Dict[str, ComputedFieldInfo]` | Computed field definitions | | `__pydantic_decorators__` | `DecoratorInfos` | Collected validator/serializer decorators | | `__pydantic_validator__` | `SchemaValidator` | pydantic-core validator instance | | `__pydantic_serializer__` | `SchemaSerializer` | pydantic-core serializer instance | | `__pydantic_core_schema__` | `CoreSchema` | Generated core schema | | `__pydantic_complete__` | `bool` | Whether model building is complete | | `__pydantic_custom_init__` | `bool` | Whether `__init__` was overridden | | `__pydantic_post_init__` | `str \\| None` | Name of post-init method ('model\\_post\\_init' or None) | | `__class_vars__` | `Set[str]` | Class variable names | | `__private_attributes__` | `Dict[str, ModelPrivateAttr]` | Private attribute metadata | ### Instance-Level Attributes | Attribute | Type | Description | | ------------------------- | ------------------------ | ------------------------------------------- | | `__dict__` | `Dict[str, Any]` | Regular field values | | `__pydantic_fields_set__` | `Set[str]` | Fields explicitly set during initialization | | `__pydantic_extra__` | `Dict[str, Any] \\| None` | Extra fields (when `extra='allow'`) | | `__pydantic_private__` | `Dict[str, Any] \\| None` | Private attribute values | ### Properties",
  "| Property | Returns | Description | | ----------------------- | ------------------------------ | ------------------------------------------------------- | | `model_fields` | `Dict[str, FieldInfo]` | Alias for `__pydantic_fields__` (class method) | | `model_computed_fields` | `Dict[str, ComputedFieldInfo]` | Alias for `__pydantic_computed_fields__` (class method) | | `model_fields_set` | `Set[str]` | Fields explicitly set (instance property) | | `model_extra` | `Dict[str, Any] \\| None` | Extra fields dict (instance property) | Sources: - [pydantic/main.py153-219](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L153-L219) - [pydantic/main.py262-302](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L262-L302) ## Validation Methods **Validation Method Flow** ``` ``` ### **init** (Primary Validation) The primary validation method is model instantiation via `__init__`: ``` ``` **Implementation**: [pydantic/main.py240-260](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L260) - Receives `**data` as keyword arguments - Calls `self.__pydantic_validator__.validate_python(data, self_instance=self)` - Returns the validated instance or raises `ValidationError` ### model\\_validate Validates a Python object (typically a dict) and returns a model instance: ``` ``` **Implementation**: [pydantic/main.py652-699](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L652-L699) **Parameters**: - `obj`: The object to validate (dict, model instance, object with attributes) - `strict`: Enforce strict type checking without coercion - `extra`: Override model config for extra field handling ('ignore', 'allow', 'forbid') - `from_attributes`: Extract data from object attributes instead of dict keys - `context`: Additional context passed to validators - `by_alias`: Use field aliases for input matching - `by_name`: Use field names for input matching (cannot both be False with `by_alias`) ### model\\_validate\\_json Validates JSON data directly without intermediate Python dict: ``` ``` **Implementation**: [pydantic/main.py701-743](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L701-L743) **Parameters**: Same as `model_validate`, plus: - `json_data`: String, bytes, or bytearray containing JSON **Note**: Uses pydantic-core's native JSON parser for better performance than `json.loads()` + `model_validate()` ### model\\_validate\\_strings Validates data where values are strings that need parsing: ``` ``` **Implementation**: [pydantic/main.py745-781](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L745-L781) Useful for parsing query parameters or form data where all values are strings. Sources: - [pydantic/main.py240-260](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L260) - [pydantic/main.py652-781](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L652-L781) ## Serialization Methods **Serialization Flow** ``` ``` ### model\\_dump Serializes the model to a Python dictionary. **Implementation**: [pydantic/main.py418-474](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L474) ``` ``` **Key Parameters**:",
  "| Parameter | Type | Description | | ------------------ | ---------------------- | ------------------------------------------------------------------------- | | `mode` | `'python'` \\| `'json'` | Output mode: Python objects or JSON-serializable types | | `include` | `IncEx` | Fields to include (set, dict with nesting) | | `exclude` | `IncEx` | Fields to exclude (set, dict with nesting) | | `by_alias` | `bool` | Use field aliases as dict keys | | `exclude_unset` | `bool` | Exclude fields not explicitly set during initialization | | `exclude_defaults` | `bool` | Exclude fields with default values | | `exclude_none` | `bool` | Exclude fields with `None` values | | `round_trip` | `bool` | Enable round-trip serialization for special types | | `warnings` | `bool \\| str` | Handle serialization errors: `True`/`'warn'`, `False`/`'none'`, `'error'` | | `serialize_as_any` | `bool` | Use duck-typing serialization | **Calls**: `self.__pydantic_serializer__.to_python(self, **options)` [pydantic/main.py460-474](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L460-L474) ### model\\_dump\\_json Serializes the model directly to a JSON string using pydantic-core's native JSON serializer. **Implementation**: [pydantic/main.py476-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L476-L534) ``` ``` **Additional Parameters**: | Parameter | Type | Description | | -------------- | ------------- | --------------------------------- | | `indent` | `int \\| None` | JSON indentation (None = compact) | | `ensure_ascii` | `bool` | Escape non-ASCII characters | **Calls**: `self.__pydantic_serializer__.to_json(self, **options).decode()` [pydantic/main.py519-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L519-L534) **Performance**: More efficient than `json.dumps(model.model_dump())` because it serializes directly to JSON without intermediate Python dict. Sources: - [pydantic/main.py418-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L534) - [tests/test\\_serialize.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py) ## Model Construction and Copying ### model\\_construct Creates a model instance bypassing validation. Useful for trusted or pre-validated data. **Implementation**: [pydantic/main.py304-382](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L304-L382) ``` ``` **Behavior**: 1. Creates instance with `cls.__new__(cls)` (no `__init__`) 2. Processes field aliases (both `alias` and `validation_alias`) 3. Sets default values for missing fields via `field.get_default(call_default_factory=True)` 4. Directly sets `__dict__`, `__pydantic_fields_set__`, `__pydantic_extra__` 5. Calls `model_post_init(None)` if defined 6. Initializes `__pydantic_private__` with defaults **Key Parameters**: - `_fields_set`: Optional set of field names to mark as explicitly set. If `None`, uses all provided field names. - `**values`: Field values and extra fields (if `extra='allow'`) **Notes**: - Respects `model_config.extra` setting for handling extra fields - With `extra='allow'`, extra values go to `__pydantic_extra__` - With `extra='ignore'` or `extra='forbid'`, extra values are ignored (no error in construct) - Default factory functions are called - Validators are NOT executed Sources: - [pydantic/main.py304-382](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L304-L382) - [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py) ### model\\_copy Creates a shallow or deep copy of a model instance with optional updates.",
  "**Implementation**: [pydantic/main.py384-416](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L384-L416) ``` ``` **Parameters**: - `update`: Dictionary of field updates to apply (not validated) - `deep`: If `True`, performs deep copy; otherwise shallow copy **Behavior**: 1. Calls `self.__deepcopy__()` or `self.__copy__()` based on `deep` parameter 2. If `update` provided: - For models with `extra='allow'`: Updates regular fields in `__dict__` and extra fields in `__pydantic_extra__` - Otherwise: Updates `__dict__` directly 3. Updates `__pydantic_fields_set__` with keys from `update` **Warning**: The copied instance's `__dict__` is copied, which may include unexpected items like cached property values. Sources: - [pydantic/main.py384-416](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L384-L416) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) ## Schema Generation BaseModel provides methods for generating JSON schemas: ``` ``` This can be used for: - Documentation - Integration with other tools - Client-side validation - Code generation Sources: - [pydantic/main.py535-557](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L535-L557) ## Field Access and Modification ### **setattr** Behavior BaseModel customizes `__setattr__` to support validation, frozen fields, and private attributes. **Implementation**: [pydantic/main.py815-908](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L815-L908) ****setattr** Routing Table** (`__pydantic_setattr_handlers__`): ``` ``` **Flow**: 1. `__setattr__` looks up the attribute name in `__pydantic_setattr_handlers__` 2. Calls the appropriate handler function 3. For unknown attributes: checks if extra allowed, private attr, or raises error ### Field Assignment **Without validate\\_assignment** (default): ``` ``` **With validate\\_assignment=True**: ``` ``` Calls `__pydantic_validator__.validate_assignment(self, name, value)` [pydantic/main.py111](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L111-L111) ### Frozen Fields **Model-level frozen**: ``` ``` **Field-level frozen**: ``` ``` Frozen check: [pydantic/main.py81-91](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L81-L91) ### Field Tracking with model\\_fields\\_set The `model_fields_set` property returns fields explicitly set during initialization: ``` ``` **Implementation**: [pydantic/main.py293-301](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L293-L301) Sources: - [pydantic/main.py81-115](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L81-L115) - [pydantic/main.py815-908](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L815-L908) - [tests/test\\_main.py535-610](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L535-L610) ## Extra Fields Handling The `extra` config controls how fields not defined in the model are handled. ### Configuration Options | Value | Behavior | | ---------- | ------------------------------------------------------------------------ | | `'ignore'` | Extra fields are silently ignored (default) | | `'allow'` | Extra fields stored in `__pydantic_extra__` and accessible as attributes | | `'forbid'` | Extra fields raise `ValidationError` with type `'extra_forbidden'` | ### extra='allow' ``` ``` **Attribute Access**: Extra fields are accessible via `__getattr__` [pydantic/main.py910-924](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L910-L924)",
  "**Serialization**: Extra fields are included in `model_dump()` output [pydantic/main.py211-212](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L212) **Assignment After Init**: ``` ``` ### extra='forbid' ``` ``` ### extra='ignore' ``` ``` Sources: - [pydantic/main.py211-212](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L212) - [pydantic/main.py910-924](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L910-L924) - [tests/test\\_main.py266-414](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L266-L414) ## validate\\_assignment Configuration When `validate_assignment=True`, field assignments are validated after model initialization. **Configuration**: ``` ``` **Behavior**: ``` ``` **Implementation**: [pydantic/main.py111](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L111-L111) - Calls `__pydantic_validator__.validate_assignment(model, name, value)` - Runs full validation pipeline (field validators, type coercion, constraints) - Updates `__dict__[name]` and adds `name` to `__pydantic_fields_set__` **Performance Note**: Adds validation overhead to every field assignment. Only use when runtime data integrity is required. Sources: - [pydantic/main.py111](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L111-L111) - [tests/test\\_main.py754-803](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L754-L803) ## Private Attributes Private attributes (prefix `_`) are not validated or serialized. They are managed separately from regular fields. ### Defining Private Attributes **With PrivateAttr**: ``` ``` **With annotation only**: ``` ``` **Implicit** (unannotated): ``` ``` ### Storage and Access Private attributes are stored in `__pydantic_private__` dict: ``` ``` **Initialization**: [pydantic/\\_internal/\\_model\\_construction.py354-369](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L354-L369) - `__pydantic_private__` is initialized in `init_private_attributes()` - Called from wrapped `model_post_init()` if private attrs exist - Default values are set from `__private_attributes__` metadata ### Characteristics | Aspect | Behavior | | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | **Validation** | None - not validated on init or assignment | | **Serialization** | Excluded from `model_dump()` and `model_dump_json()` | | **model\\_construct** | Can be set via `**values` after model\\_post\\_init [pydantic/main.py371-375](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L371-L375) | | **Naming** | Must start with single `_` (not `__` dunder) | | **Access** | Normal Python attribute access | Sources: - [pydantic/main.py217](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L217-L217) - [pydantic/\\_internal/\\_model\\_construction.py354-369](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L354-L369) - [pydantic/\\_internal/\\_model\\_construction.py418-517](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L418-L517) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py) ## Computed Fields Computed fields are properties included in model serialization, defined with the `@computed_field` decorator. ### Definition ``` ``` ### Characteristics",
  "| Aspect | Behavior | | ----------------- | --------------------------------------------------------- | | **Validation** | Not validated on input; computed from other fields | | **Serialization** | Included in `model_dump()` and `model_dump_json()` output | | **Schema** | Included in JSON schema as read-only property | | **Access** | Read-only property access (unless setter defined) | | **Storage** | Stored in `__pydantic_computed_fields__` class attribute | ### Serialization ``` ``` ### With cached\\_property ``` ``` **Note**: Cached values are stored in `__dict__`, not `__pydantic_private__` Sources: - [pydantic/main.py208-209](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L208-L209) - [pydantic/main.py243-245](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L243-L245) - [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66) ## Model Rebuilding The `model_rebuild()` class method regenerates a model's schema when forward references couldn't be resolved initially. ### When to Use Forward references that can't be resolved during class definition: ``` ``` ### Implementation **Method signature**: [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) ``` ``` **Parameters**: - `force`: Rebuild even if `__pydantic_complete__=True` - `raise_errors`: Raise exceptions on schema generation errors - `_parent_namespace_depth`: Frame depth for namespace resolution - `_types_namespace`: Explicit namespace for type resolution **Returns**: - `None`: Schema was already complete and rebuild skipped - `True`: Rebuild succeeded - `False`: Rebuild failed (only when `raise_errors=False`) ### Rebuild Process 1. **Check Completion**: If `__pydantic_complete__=True` and `force=False`, returns `None` 2. **Clear Schema Artifacts**: Deletes `__pydantic_core_schema__`, `__pydantic_validator__`, `__pydantic_serializer__` 3. **Resolve Namespace**: Gets parent frame namespace for type resolution 4. **Complete Model**: Calls `complete_model_class()` to regenerate schema **Note**: Not thread-safe. Concurrent rebuilds can cause issues with shared validator/serializer instances. Sources: - [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) - [pydantic/\\_internal/\\_model\\_construction.py619-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L619-L650) ## Dynamic Model Creation The `create_model()` function creates BaseModel subclasses at runtime. **Function signature**: [pydantic/main.py1083-1228](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1083-L1228) ``` ``` ### Field Definition Formats | Format | Description | Example | | ----------------- | ------------------------- | ------------------------------- | | `(type, default)` | Type with default value | `field1=(str, 'default')` | | `(type, ...)` | Required field | `field2=(int, ...)` | | `type` | Required, annotation-only | `field3=str` | | `FieldInfo` | From Field() function | `field4=Field(default=0, gt=0)` | ### Special Parameters | Parameter | Description | | ---------------- | --------------------------------------------------- | | `__config__` | ConfigDict for model configuration | | `__base__` | Base class or tuple of base classes | | `__module__` | Set `__module__` attribute (affects pickling, repr) | | `__validators__` | Validators dict (V1-style, deprecated) | | `__cls_kwargs__` | Kwargs passed to ModelMetaclass | | `__doc__` | Docstring for the model class | ### Usage Examples **With inheritance**: ``` ``` **With validators** (V2 style): ``` ``` Sources:",
  "- [pydantic/main.py1083-1228](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1083-L1228) - [tests/test\\_create\\_model.py20-124](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py#L20-L124) ## Customization Hooks ### Custom **init** Override `__init__` to customize pre-validation behavior: ``` ``` **Note**: `__pydantic_custom_init__` class attribute is set to `True` when `__init__` is overridden [pydantic/\\_internal/\\_model\\_construction.py165](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L165-L165) ### model\\_post\\_init Hook called after validation and instance creation: ``` ``` **Signature**: [pydantic/main.py587-590](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L587-L590) ``` ``` **Parameters**: - `__context`: Context passed from validators or `None` **When called**: - After `__pydantic_validator__.validate_python()` completes - Before `__init__` returns - Also called from `model_construct()` with `context=None` **Special behavior**: - If private attributes exist, ModelMetaclass wraps `model_post_init` to initialize `__pydantic_private__` first [pydantic/\\_internal/\\_model\\_construction.py133-147](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L133-L147) ### **pydantic\\_init\\_subclass** Hook for subclass customization: ``` ``` **Called from**: [pydantic/\\_internal/\\_model\\_construction.py266](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L266-L266) Sources: - [pydantic/main.py587-590](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L587-L590) - [pydantic/\\_internal/\\_model\\_construction.py133-147](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L133-L147) - [pydantic/\\_internal/\\_model\\_construction.py165-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L165-L168) - [pydantic/\\_internal/\\_model\\_construction.py266](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L266-L266) ## Integration with Validators BaseModel works closely with Pydantic validators to allow field-level and model-level validation: ``` ``` This topic is covered in depth in the Validators documentation. Sources: - [tests/test\\_validators.py192-215](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L192-L215) ## Usage Examples ### Basic Model Definition ``` ``` ### Validation from Different Sources ``` ``` ### Serialization Patterns ``` ``` ### Model Construction and Copying ``` ``` ### Working with Extra Fields ``` ``` Sources: - [tests/test\\_main.py56-115](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L56-L115) - [tests/test\\_edge\\_cases.py62-124](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py#L62-L124) ## Error Handling When validation fails, BaseModel raises a `ValidationError` with detailed information: ``` ``` Error information includes: - Error type - Error location (field) - Error message - Invalid input value - Context-specific details Sources: - [tests/test\\_main.py87-103](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L87-L103) ## Performance Considerations - Use `model_construct` for trusted data to skip validation - Consider `frozen=True` for immutable models (enables hashing) - Use `exclude_unset=True` when serializing to minimize output - Be mindful of deep validation in complex nested models Sources:",
  "- [tests/test\\_construction.py15-35](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py#L15-L35) - [tests/test\\_main.py613-643](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py#L613-L643) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [BaseModel](#basemodel.md) - [Purpose and Functionality](#purpose-and-functionality.md) - [BaseModel Architecture](#basemodel-architecture.md) - [Model Lifecycle](#model-lifecycle.md) - [Model Definition Phase](#model-definition-phase.md) - [Model Instantiation Phase](#model-instantiation-phase.md) - [Core Instance Attributes](#core-instance-attributes.md) - [Class-Level Attributes](#class-level-attributes.md) - [Instance-Level Attributes](#instance-level-attributes.md) - [Properties](#properties.md) - [Validation Methods](#validation-methods.md) - [\\_\\_init\\_\\_ (Primary Validation)](#__init__-primary-validation.md) - [model\\_validate](#model_validate.md) - [model\\_validate\\_json](#model_validate_json.md) - [model\\_validate\\_strings](#model_validate_strings.md) - [Serialization Methods](#serialization-methods.md) - [model\\_dump](#model_dump.md) - [model\\_dump\\_json](#model_dump_json.md) - [Model Construction and Copying](#model-construction-and-copying.md) - [model\\_construct](#model_construct.md) - [model\\_copy](#model_copy.md) - [Schema Generation](#schema-generation.md) - [Field Access and Modification](#field-access-and-modification.md) - [\\_\\_setattr\\_\\_ Behavior](#__setattr__-behavior.md) - [Field Assignment](#field-assignment.md) - [Frozen Fields](#frozen-fields.md) - [Field Tracking with model\\_fields\\_set](#field-tracking-with-model_fields_set.md) - [Extra Fields Handling](#extra-fields-handling.md) - [Configuration Options](#configuration-options.md) - [extra='allow'](#extraallow.md) - [extra='forbid'](#extraforbid.md) - [extra='ignore'](#extraignore.md) - [validate\\_assignment Configuration](#validate_assignment-configuration.md) - [Private Attributes](#private-attributes.md) - [Defining Private Attributes](#defining-private-attributes.md) - [Storage and Access](#storage-and-access.md) - [Characteristics](#characteristics.md) - [Computed Fields](#computed-fields.md) - [Definition](#definition.md) - [Characteristics](#characteristics-1.md) - [Serialization](#serialization.md) - [With cached\\_property](#with-cached_property.md) - [Model Rebuilding](#model-rebuilding.md) - [When to Use](#when-to-use.md) - [Implementation](#implementation.md) - [Rebuild Process](#rebuild-process.md) - [Dynamic Model Creation](#dynamic-model-creation.md) - [Field Definition Formats](#field-definition-formats.md) - [Special Parameters](#special-parameters.md) - [Usage Examples](#usage-examples.md) - [Customization Hooks](#customization-hooks.md) - [Custom \\_\\_init\\_\\_](#custom-__init__.md) - [model\\_post\\_init](#model_post_init.md) - [\\_\\_pydantic\\_init\\_subclass\\_\\_](#__pydantic_init_subclass__.md) - [Integration with Validators](#integration-with-validators.md) - [Usage Examples](#usage-examples-1.md) - [Basic Model Definition](#basic-model-definition.md) - [Validation from Different Sources](#validation-from-different-sources.md) - [Serialization Patterns](#serialization-patterns.md) - [Model Construction and Copying](#model-construction-and-copying-1.md) - [Working with Extra Fields](#working-with-extra-fields.md) - [Error Handling](#error-handling.md) - [Performance Considerations](#performance-considerations.md)",
  "# pydantic_pydantic - Documentation Index - [/pydantic/pydantic](./_pydantic_pydantic.md) - [/pydantic/pydantic/2.2-field-system](./_pydantic_pydantic_2.2-field-system.md) - [/pydantic/pydantic/2.3-model-configuration](./_pydantic_pydantic_2.3-model-configuration.md) - [/pydantic/pydantic/2-core-model-system](./_pydantic_pydantic_2-core-model-system.md) - [/pydantic/pydantic/2.1-basemodel](./_pydantic_pydantic_2.1-basemodel.md) - [/pydantic/pydantic/1-overview](./_pydantic_pydantic_1-overview.md) - [/pydantic/pydantic/3-type-system](./_pydantic_pydantic_3-type-system.md) - [/pydantic/pydantic/3.3-typeadapter](./_pydantic_pydantic_3.3-typeadapter.md) - [/pydantic/pydantic/3.1-constrained-types](./_pydantic_pydantic_3.1-constrained-types.md) - [/pydantic/pydantic/3.4-generics-and-forward-references](./_pydantic_pydantic_3.4-generics-and-forward-references.md) - [/pydantic/pydantic/3.2-network-types](./_pydantic_pydantic_3.2-network-types.md) - [/pydantic/pydantic/4-validation-and-serialization](./_pydantic_pydantic_4-validation-and-serialization.md) - [/pydantic/pydantic/4.1-validators](./_pydantic_pydantic_4.1-validators.md) - [/pydantic/pydantic/4.2-serializers](./_pydantic_pydantic_4.2-serializers.md) - [/pydantic/pydantic/4.3-json-conversion](./_pydantic_pydantic_4.3-json-conversion.md) - [/pydantic/pydantic/5.1-core-schema-generation](./_pydantic_pydantic_5.1-core-schema-generation.md) - [/pydantic/pydantic/5-schema-generation](./_pydantic_pydantic_5-schema-generation.md) - [/pydantic/pydantic/5.2-json-schema-generation](./_pydantic_pydantic_5.2-json-schema-generation.md) - [/pydantic/pydantic/6-advanced-features](./_pydantic_pydantic_6-advanced-features.md) - [/pydantic/pydantic/6.1-dataclass-support](./_pydantic_pydantic_6.1-dataclass-support.md) - [/pydantic/pydantic/6.3-rootmodel-and-computed-fields](./_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md) - [/pydantic/pydantic/6.4-plugin-system](./_pydantic_pydantic_6.4-plugin-system.md) - [/pydantic/pydantic/6.2-function-validation](./_pydantic_pydantic_6.2-function-validation.md) - [/pydantic/pydantic/7.1-testing-framework](./_pydantic_pydantic_7.1-testing-framework.md) - [/pydantic/pydantic/7-development-and-deployment](./_pydantic_pydantic_7-development-and-deployment.md) - [/pydantic/pydantic/7.2-cicd-pipeline](./_pydantic_pydantic_7.2-cicd-pipeline.md) - [/pydantic/pydantic/7.3-documentation-system](./_pydantic_pydantic_7.3-documentation-system.md) - [/pydantic/pydantic/8-migration-and-compatibility](./_pydantic_pydantic_8-migration-and-compatibility.md) - [/pydantic/pydantic/8.1-v1-to-v2-migration](./_pydantic_pydantic_8.1-v1-to-v2-migration.md) - [/pydantic/pydantic/7.4-versioning-and-dependencies](./_pydantic_pydantic_7.4-versioning-and-dependencies.md) - [/pydantic/pydantic/8.2-backported-modules](./_pydantic_pydantic_8.2-backported-modules.md)",
  "Type System | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Type System Relevant source files",
  "- [pydantic/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/errors.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/errors.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [pydantic/validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validators.py) - [tests/test\\_networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) Pydantic's type system provides specialized types for data validation, offers constrainable versions of standard Python types, and implements network-related and other utility types. This document explains the architecture and components of Pydantic's type system, how to use built-in types, and how to extend the system with custom types. For information about validation and serialization using these types, see [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md). For details about the schema generation process, see [Schema Generation](pydantic/pydantic/5-schema-generation.md). ## Type System Architecture Pydantic's type system extends Python's built-in type system to provide additional validation capabilities. It consists of several key components: ``` ``` Sources: [pydantic/types.py1-110](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L1-L110), [pydantic/networks.py1-67](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L1-L67) ## Core Type Concepts ### Constrained Types and Annotations Pydantic supports two approaches for adding constraints to types: 1. **Constrained Type Functions**: Functions like `conint()`, `constr()`, etc. 2. **Annotated with Field Constraints**: Using Python's `Annotated` with field constraints ``` ```",
  "Sources: [pydantic/types.py111-146](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L111-L146) [pydantic/types.py147-219](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L147-L219) [pydantic/types.py661-685](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L661-L685) The two approaches serve the same purpose with different syntax: ``` # Using constrained type function from pydantic import BaseModel, conint class Model(BaseModel): value: conint(gt=0, lt=100) # Using Annotated with Field from typing import Annotated from pydantic import BaseModel, Field class Model(BaseModel): value: Annotated[int, Field(gt=0, lt=100)] ``` The latter approach using `Annotated` is recommended for better support with static analysis tools. ### Strict Mode Pydantic allows enforcing strict type checking using the `Strict` class: ``` ``` Sources: [pydantic/types.py113-146](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L113-L146) ## Constrained Types ### Numeric Types Pydantic provides constrained versions of numeric types with validation rules: | Type | Description | Constraints | | ------------------ | -------------------------------- | -------------------------------------------------------- | | `conint()` | Constrained integer | `gt`, `ge`, `lt`, `le`, `multiple_of` | | `PositiveInt` | Integer > 0 | Equivalent to `Annotated[int, Gt(0)]` | | `NegativeInt` | Integer < 0 | Equivalent to `Annotated[int, Lt(0)]` | | `NonNegativeInt` | Integer >= 0 | Equivalent to `Annotated[int, Ge(0)]` | | `NonPositiveInt` | Integer <= 0 | Equivalent to `Annotated[int, Le(0)]` | | `confloat()` | Constrained float | `gt`, `ge`, `lt`, `le`, `multiple_of`, `allow_inf_nan` | | `PositiveFloat` | Float > 0 | Equivalent to `Annotated[float, Gt(0)]` | | `NegativeFloat` | Float < 0 | Equivalent to `Annotated[float, Lt(0)]` | | `NonNegativeFloat` | Float >= 0 | Equivalent to `Annotated[float, Ge(0)]` | | `NonPositiveFloat` | Float <= 0 | Equivalent to `Annotated[float, Le(0)]` | | `FiniteFloat` | Float that is not `inf` or `nan` | Equivalent to `Annotated[float, AllowInfNan(False)]` | | `condecimal()` | Constrained decimal | Similar to `confloat()` + `max_digits`, `decimal_places` | Sources: [pydantic/types.py147-362](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L147-L362) [pydantic/types.py386-645](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L386-L645) ### String Types Pydantic offers string constraints through `constr()` and `StringConstraints`: ``` ``` Sources: [pydantic/types.py690-828](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L690-L828) Similar constraints exist for bytes with `conbytes()`. ### Collection Types Pydantic provides constrained collection types: | Type | Description | Constraints | | ---------------- | --------------------- | --------------------------------------- | | `conlist()` | Constrained list | `item_type`, `min_length`, `max_length` | | `conset()` | Constrained set | `item_type`, `min_length`, `max_length` | | `confrozenset()` | Constrained frozenset | `item_type`, `min_length`, `max_length` | Sources: [pydantic/types.py836-903](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L836-L903) ## Network Types Pydantic includes a rich set of network-related types defined in `networks.py`: ``` ```",
  "Sources: [pydantic/networks.py70-526](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L70-L526) [pydantic/networks.py534-669](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L534-L669) Network types provide specialized validation: - URL types validate and normalize URLs with various schemes - Email types validate email addresses - IP types validate IPv4 and IPv6 addresses, networks, and interfaces These network types can be directly used in models: ``` ``` ## Special Types ### Path Types Path-related types provide validation for file system paths: | Type | Description | | --------------- | ----------------------------------------- | | `FilePath` | Path that points to an existing file | | `DirectoryPath` | Path that points to an existing directory | | `NewPath` | Path that does not currently exist | | `SocketPath` | Path pointing to a Unix socket | Sources: [pydantic/\\_\\_init\\_\\_.py73-77](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L73-L77) [pydantic/\\_\\_init\\_\\_.py357-359](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L357-L359) ### Secret Types Secret types provide special handling for sensitive data: | Type | Description | | ------------- | -------------------------------------- | | `SecretStr` | String that hides its contents in repr | | `SecretBytes` | Bytes that hides its contents in repr | | `Secret` | Generic version of secret types | Sources: [pydantic/\\_\\_init\\_\\_.py78-80](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L78-L80) [pydantic/\\_\\_init\\_\\_.py348-350](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L348-L350) ### ImportString Type `ImportString` provides a way to import Python objects from strings: ``` ``` Sources: [pydantic/types.py906-1028](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L906-L1028) ## Type Adapter The `TypeAdapter` class provides a way to use Pydantic's validation system outside of models: ``` ``` Sources: [pydantic/\\_\\_init\\_\\_.py380](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L380-L380) The TypeAdapter makes it easy to apply Pydantic validation to standalone types: ``` ``` ## Working with Annotated Types Pydantic provides special handling for Python's `Annotated` type: ``` ``` Sources: [pydantic/\\_internal/\\_known\\_annotated\\_metadata.py1-42](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_known_annotated_metadata.py#L1-L42) `Annotated` provides a clean way to combine type information with metadata: ``` ``` ## Creating Custom Types Pydantic allows for creation of custom types by implementing `__get_pydantic_core_schema__` method: ``` ``` Sources: [pydantic/\\_internal/\\_validators.py66-127](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validators.py#L66-L127) ## Internal Validation Process The type system works with Pydantic's validation engine: ``` ``` Sources: [pydantic/\\_internal/\\_core\\_utils.py43-66](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_utils.py#L43-L66) [pydantic/\\_internal/\\_validators.py66-127](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validators.py#L66-L127) ## Constraints Reference",
  "| Type Category | Available Constraints | | ------------- | ------------------------------------------------------------------------------------------- | | String | `min_length`, `max_length`, `pattern`, `strip_whitespace`, `to_lower`, `to_upper`, `strict` | | Bytes | `min_length`, `max_length`, `strict` | | List | `min_length`, `max_length`, `strict`, `fail_fast` | | Set | `min_length`, `max_length`, `strict`, `fail_fast` | | Dict | `min_length`, `max_length`, `strict` | | Float | `gt`, `ge`, `lt`, `le`, `multiple_of`, `allow_inf_nan`, `strict` | | Integer | `gt`, `ge`, `lt`, `le`, `multiple_of`, `strict` | | Decimal | `gt`, `ge`, `lt`, `le`, `multiple_of`, `max_digits`, `decimal_places`, `strict` | Sources: [pydantic/\\_internal/\\_known\\_annotated\\_metadata.py18-64](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_known_annotated_metadata.py#L18-L64) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Type System](#type-system.md) - [Type System Architecture](#type-system-architecture.md) - [Core Type Concepts](#core-type-concepts.md) - [Constrained Types and Annotations](#constrained-types-and-annotations.md) - [Strict Mode](#strict-mode.md) - [Constrained Types](#constrained-types.md) - [Numeric Types](#numeric-types.md) - [String Types](#string-types.md) - [Collection Types](#collection-types.md) - [Network Types](#network-types.md) - [Special Types](#special-types.md) - [Path Types](#path-types.md) - [Secret Types](#secret-types.md) - [ImportString Type](#importstring-type.md) - [Type Adapter](#type-adapter.md) - [Working with Annotated Types](#working-with-annotated-types.md) - [Creating Custom Types](#creating-custom-types.md) - [Internal Validation Process](#internal-validation-process.md) - [Constraints Reference](#constraints-reference.md)",
  "Network Types | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Network Types Relevant source files - [pydantic/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py) - [pydantic/errors.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/errors.py) - [pydantic/networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py) - [pydantic/types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py) - [pydantic/validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validators.py) - [tests/test\\_networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py) - [tests/test\\_types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py)",
  "This page documents the network-related types in Pydantic, which provide specialized validation and handling for network data formats such as URLs, email addresses, IP addresses, and database connection strings. These types help ensure that network-related data is properly validated and structured for use in your applications. ## Core Network Types Overview Pydantic offers several categories of network types that handle different types of network-related data: ``` ``` Sources: [pydantic/networks.py1-67](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L1-L67)(showing exported types), [pydantic/\\_\\_init\\_\\_.py120-144](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L120-L144) ## URL Types Architecture URL types in Pydantic are built on a hierarchical architecture with two base classes: `_BaseUrl` for single-host URLs and `_BaseMultiHostUrl` for URLs that can contain multiple hosts (commonly used in database connection strings). ``` ``` Sources: [pydantic/networks.py70-532](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L70-L532) ## Common URL Types Pydantic provides several specialized URL types for different protocols: | Type | Description | Constraints | | ----------------- | -------------------------------------- | --------------------------------------------- | | `AnyUrl` | Base type for all URLs | Any scheme allowed, TLD and host not required | | `HttpUrl` | HTTP/HTTPS URLs | Only http/https schemes, max length 2083 | | `AnyHttpUrl` | HTTP/HTTPS URLs with fewer constraints | Only http/https schemes | | `FileUrl` | File URLs | Only file scheme | | `FtpUrl` | FTP URLs | Only ftp scheme | | `WebsocketUrl` | WebSocket URLs | Only ws/wss schemes, max length 2083 | | `AnyWebsocketUrl` | WebSocket URLs with fewer constraints | Only ws/wss schemes | Sources: [pydantic/networks.py534-688](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L534-L688) ### URL Components and Properties All URL types provide access to standard URL components: ``` ``` Sources: [pydantic/networks.py124-226](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L124-L226) [pydantic/networks.py351-426](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L351-L426) ### Usage Example ``` ``` Sources: [tests/test\\_networks.py115-119](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L115-L119) [tests/test\\_networks.py173-194](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L173-L194) ## Database Connection Strings (DSNs) Pydantic provides specialized types for validating and handling database connection strings (Data Source Names or DSNs), which are URLs that specify how to connect to a database. ### Supported DSN Types | Type | Description | Allowed Schemes | | --------------- | --------------------------- | ------------------------------------------------ | | `PostgresDsn` | PostgreSQL connections | postgres, postgresql, postgresql+asyncpg, etc. | | `CockroachDsn` | CockroachDB connections | cockroachdb, cockroachdb+psycopg2, etc. | | `MySQLDsn` | MySQL connections | mysql, mysql+mysqlconnector, mysql+pymysql, etc. | | `MariaDBDsn` | MariaDB connections | mariadb, mariadb+mariadbconnector, etc. | | `ClickHouseDsn` | ClickHouse connections | clickhouse, clickhouse+http, etc. | | `SnowflakeDsn` | Snowflake connections | snowflake | | `MongoDsn` | MongoDB connections | mongodb | | `RedisDsn` | Redis connections | redis, rediss | | `AmqpDsn` | AMQP (RabbitMQ) connections | amqp, amqps | | `KafkaDsn` | Kafka connections | kafka | | `NatsDsn` | NATS connections | nats, tls, ws |",
  "Sources: [pydantic/networks.py690-826](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L690-L826) ### DSN Example ``` ``` Sources: [tests/test\\_networks.py482-494](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L482-L494) [tests/test\\_networks.py700-731](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L700-L731) ### Multi-Host Support Some DSN types support connecting to multiple hosts, which is useful for database clusters: ``` ``` Sources: [pydantic/networks.py389-406](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L389-L406) [tests/test\\_networks.py628-647](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L628-L647) ## Email Validation Types Pydantic provides specialized types for validating email addresses. These types depend on the optional `email_validator` package. ``` ``` Sources: [pydantic/networks.py31-39](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L31-L39) ### Email Types Example ``` ``` Note: If the `email_validator` package is not installed, an error will be raised when these types are used. ## IP Address Types Pydantic provides types for validating IP addresses, network interfaces, and networks. ``` ``` These types leverage Python's standard `ipaddress` module and provide proper validation during model instantiation. ### IP Address Types Categories | Type | Description | Example | | ----------------- | ------------------------------------- | ---------------------- | | `IPvAnyAddress` | Either IPv4 or IPv6 address | \"192.168.1.1\" or \"::1\" | | `IPvAnyInterface` | IP interface with network information | \"192.168.1.1/24\" | | `IPvAnyNetwork` | IP network | \"192.168.0.0/24\" | Sources: [pydantic/networks.py52-54](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L52-L54) ## Customization with UrlConstraints The `UrlConstraints` class allows you to customize URL validation with specific constraints. ``` ``` ### UrlConstraints Parameters | Parameter | Description | Default | | ----------------- | ----------------------------- | ------- | | `max_length` | Maximum URL length | `None` | | `allowed_schemes` | List of allowed schemes | `None` | | `host_required` | Whether host is required | `None` | | `default_host` | Default host if none provided | `None` | | `default_port` | Default port if none provided | `None` | | `default_path` | Default path if none provided | `None` | Sources: [pydantic/networks.py70-120](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L70-L120) [tests/test\\_networks.py823-841](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L823-L841) ## Implementation Details ### URL Validation Process URL validation and processing in Pydantic follows these steps: 1. Parse the URL string into components 2. Validate the scheme against allowed schemes 3. Apply length constraints 4. Convert international domain names to punycode 5. Apply default values for missing components 6. Construct a validated URL object with accessible properties ### International Domain Name Support Pydantic's URL types support internationalized domain names (IDNs) by automatically converting them to punycode: ``` ``` Sources: [tests/test\\_networks.py330-337](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py#L330-L337) ### Database DSN Customization Each DSN type comes with pre-configured constraints for its respective database system: - Allowed schemes specific to the database - Default ports (e.g., 5432 for PostgreSQL, 6379 for Redis) - Default hosts (often \"localhost\") - Default paths where applicable (e.g., \"/0\" for Redis databases) This makes it easier to handle database connection strings with minimal configuration.",
  "Sources: [pydantic/networks.py690-826](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L690-L826) ## Best Practices 1. **Choose the most specific type**: Use the most specific URL type for your use case (e.g., `HttpUrl` rather than `AnyUrl` for HTTP endpoints). 2. **Handle connection credentials securely**: For DSNs with credentials, consider using environment variables or secure storage. 3. **Default fallbacks**: Use `UrlConstraints` to provide sensible defaults for missing URL components. 4. **Validation at boundaries**: Validate network inputs at application boundaries to ensure they are properly formed. 5. **Consider the optional dependencies**: Install `email_validator` package when using email validation types. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Network Types](#network-types.md) - [Core Network Types Overview](#core-network-types-overview.md) - [URL Types Architecture](#url-types-architecture.md) - [Common URL Types](#common-url-types.md) - [URL Components and Properties](#url-components-and-properties.md) - [Usage Example](#usage-example.md) - [Database Connection Strings (DSNs)](#database-connection-strings-dsns.md) - [Supported DSN Types](#supported-dsn-types.md) - [DSN Example](#dsn-example.md) - [Multi-Host Support](#multi-host-support.md) - [Email Validation Types](#email-validation-types.md) - [Email Types Example](#email-types-example.md) - [IP Address Types](#ip-address-types.md) - [IP Address Types Categories](#ip-address-types-categories.md) - [Customization with UrlConstraints](#customization-with-urlconstraints.md) - [UrlConstraints Parameters](#urlconstraints-parameters.md) - [Implementation Details](#implementation-details.md) - [URL Validation Process](#url-validation-process.md) - [International Domain Name Support](#international-domain-name-support.md) - [Database DSN Customization](#database-dsn-customization.md) - [Best Practices](#best-practices.md)",
  "Versioning and Dependencies | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Versioning and Dependencies Relevant source files - [CITATION.cff](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff) - [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md) - [pydantic/version.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py) - [uv.lock](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock) This document covers Pydantic's version management system, dependency compatibility checking, and version information utilities. It focuses on the tight coupling between `pydantic` and `pydantic-core`, the version enforcement mechanisms, and tools for debugging version-related issues. For information about the overall development infrastructure and CI/CD, see [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md). For release automation and documentation deployment, see [Documentation System](pydantic/pydantic/7.3-documentation-system.md). ## Overview",
  "Pydantic enforces strict version compatibility between the pure Python `pydantic` package and the Rust-based `pydantic-core` package. This ensures that the schema generation logic in Python remains synchronized with the validation engine in Rust. The version management system includes: - A single source of truth for the current version - Runtime checks to prevent version mismatches - Utilities for debugging version information - Special handling for development environments Sources: [pydantic/version.py1-114](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L1-L114) ## Version Constants ### VERSION Constant The `VERSION` constant in [pydantic/version.py11](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L11) holds the current version string and serves as the single source of truth for Pydantic's version: ``` ``` This string follows the [PEP 440](https://peps.python.org/pep-0440/) version specifier format, supporting: - Release versions: `2.11.0` - Pre-release versions: `2.12.0b1` (beta), `2.12.0a1` (alpha) - Development versions: `2.12.0b1+dev` The version constant is also synchronized with [CITATION.cff47](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff#L47-L47) for academic citations. Sources: [pydantic/version.py11-19](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L19) [CITATION.cff47](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff#L47-L47) ### Compatible Pydantic-Core Version The `_COMPATIBLE_PYDANTIC_CORE_VERSION` constant defines the exact `pydantic-core` version required: ``` ``` This constant must be kept in sync with the dependency constraint in `pyproject.toml`. Sources: [pydantic/version.py21-22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L21-L22) ## Version Compatibility System ``` ``` Sources: [pydantic/version.py77-99](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L77-L99) ### Runtime Version Checking The `check_pydantic_core_version()` function performs a simple equality check: ``` ``` This function is called by `_ensure_pydantic_core_version()` during module initialization to prevent Pydantic from loading with an incompatible `pydantic-core` version. Sources: [pydantic/version.py77-79](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L77-L79) ### Error Handling and Editable Installs The `_ensure_pydantic_core_version()` function raises a `SystemError` if versions don't match, except for editable installs in development: | Condition | Python Version | Behavior | | ------------------------------ | -------------- | ----------------------------- | | Versions match | Any | Load successfully | | Editable install | 3.13+ | Skip check, load successfully | | Version mismatch | < 3.13 | Raise `SystemError` | | Version mismatch, not editable | 3.13+ | Raise `SystemError` | The editable install detection uses Python 3.13's `origin.dir_info.editable` property from `importlib.metadata.distribution()`. Sources: [pydantic/version.py82-99](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L82-L99) ## Version Information Utilities ### version\\_short() Returns the `major.minor` portion of the version string: ``` ``` Sources: [pydantic/version.py25-30](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L25-L30) ### version\\_info() The `version_info()` function collects comprehensive version information for debugging: ``` ``` Sources: [pydantic/version.py33-74](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L33-L74) The function searches for related packages in the environment: ``` ``` Output format example:",
  "``` pydantic version: 2.12.0b1+dev pydantic-core version: 2.40.1 pydantic-core build: release python version: 3.11.5 platform: Linux-5.15.0-86-generic-x86_64 related packages: fastapi-0.104.1 mypy-1.17.0 ... commit: abc123def456 ``` Sources: [pydantic/version.py44-74](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L44-L74) ## Mypy Version Parsing The `parse_mypy_version()` utility parses mypy version strings, handling development versions: ``` ``` This function is used by the mypy plugin to handle version-specific behavior. Sources: [pydantic/version.py101-114](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L101-L114) ## Dependency Management ### Core Dependencies ``` ``` Sources: [pydantic/version.py21-22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L21-L22) [uv.lock1-4](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock#L1-L4) ### Version Update Process When updating `pydantic-core`: 1. **Update `_COMPATIBLE_PYDANTIC_CORE_VERSION`** in [pydantic/version.py22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L22-L22) 2. **Update dependency constraint** in `pyproject.toml` 3. **Lock dependencies** with `uv lock` 4. **Update HISTORY.md** with the version bump note Example from [HISTORY.md15](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md#L15-L15): ``` ``` Sources: [pydantic/version.py21-22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L21-L22) [HISTORY.md15](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md#L15-L15) ### Related Package Ecosystem The version info system tracks these related packages: | Package | Purpose | | ---------------------- | -------------------------- | | `email-validator` | Email validation support | | `fastapi` | Web framework integration | | `mypy` | Static type checking | | `pydantic-extra-types` | Additional type validators | | `pydantic-settings` | Settings management | | `pyright` | Static type checking | | `typing_extensions` | Backported typing features | Sources: [pydantic/version.py44-52](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L44-L52) ## Development Workflow ### Version Checking During Development ``` ``` Sources: [pydantic/version.py82-99](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L82-L99) ### Git Revision Tracking The `version_info()` function attempts to determine the current git commit: ``` ``` This helps identify the exact code version during development and debugging. Sources: [pydantic/version.py60-63](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L60-L63) ## Release Version Management ### Version Evolution The [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md) file documents version progression: ``` ``` Sources: [HISTORY.md1-125](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md#L1-L125) ### Pydantic-Core Synchronization Each Pydantic release is paired with a specific pydantic-core version:",
  "| Pydantic Version | Pydantic-Core Version | Release Date | | ---------------- | --------------------- | ------------ | | v2.12.0b1 | v2.40.1 | 2025-10-03 | | v2.12.0a1 | v2.35.1 | 2025-07-26 | | v2.11.0 | v2.33.0 | 2025-03-27 | | v2.10.0 | v2.27.0 | 2024-11-20 | Sources: [HISTORY.md15](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md#L15-L15) [HISTORY.md101](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md#L101-L101) [HISTORY.md234](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md#L234-L234) [HISTORY.md641](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md#L641-L641) ### Version Bump Process Based on [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md) version bumps include: 1. **Update VERSION constant** in [pydantic/version.py11](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L11) 2. **Update CITATION.cff** with new version and date [CITATION.cff47-48](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff#L47-L48) 3. **Bump pydantic-core dependency** [pydantic/version.py22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L22-L22) 4. **Document changes** in HISTORY.md 5. **Create GitHub release** Sources: [pydantic/version.py11](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L11) [CITATION.cff47-48](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff#L47-L48) [HISTORY.md1-125](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md#L1-L125) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Versioning and Dependencies](#versioning-and-dependencies.md) - [Overview](#overview.md) - [Version Constants](#version-constants.md) - [VERSION Constant](#version-constant.md) - [Compatible Pydantic-Core Version](#compatible-pydantic-core-version.md) - [Version Compatibility System](#version-compatibility-system.md) - [Runtime Version Checking](#runtime-version-checking.md) - [Error Handling and Editable Installs](#error-handling-and-editable-installs.md) - [Version Information Utilities](#version-information-utilities.md) - [version\\_short()](#version_short.md) - [version\\_info()](#version_info.md) - [Mypy Version Parsing](#mypy-version-parsing.md) - [Dependency Management](#dependency-management.md) - [Core Dependencies](#core-dependencies.md) - [Version Update Process](#version-update-process.md) - [Related Package Ecosystem](#related-package-ecosystem.md) - [Development Workflow](#development-workflow.md) - [Version Checking During Development](#version-checking-during-development.md) - [Git Revision Tracking](#git-revision-tracking.md) - [Release Version Management](#release-version-management.md) - [Version Evolution](#version-evolution.md) - [Pydantic-Core Synchronization](#pydantic-core-synchronization.md) - [Version Bump Process](#version-bump-process.md)",
  "Advanced Features | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Advanced Features Relevant source files",
  "- [pydantic/\\_internal/\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py) - [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py) - [pydantic/\\_internal/\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generics.py) - [pydantic/\\_internal/\\_typing\\_extra.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_typing_extra.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/generics.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py) - [tests/test\\_forward\\_ref.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_forward_ref.py) - [tests/test\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_generics.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_typing.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) This page documents advanced Pydantic features that extend beyond basic models. We cover enhanced dataclasses, function validation, root models with computed fields, and the plugin system for customizing validation behavior. ## Dataclass Support Pydantic provides the `@pydantic.dataclasses.dataclass` decorator that enhances Python's standard dataclasses with validation capabilities while maintaining compatibility with the standard library's `dataclasses` module. ``` ``` ### Creating Pydantic Dataclasses The `@pydantic.dataclasses.dataclass` decorator wraps the standard library `dataclasses.dataclass` and adds validation: ``` ``` The decorator creates a custom `__init__` that validates input using a `__pydantic_validator__` attribute. The actual dataclass creation happens via `dataclasses.dataclass()` after field processing. Sources: [pydantic/dataclasses.py98-250](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L98-L250) [pydantic/\\_internal/\\_dataclasses.py85-190](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L190) ### Configuration Options",
  "Dataclass configuration is provided via the `config` parameter, which accepts a `ConfigDict`: | Configuration | Description | | ------------------------- | ---------------------------------------------------------------------- | | `validate_assignment` | When `True`, validates field values on assignment after initialization | | `frozen` | Creates immutable dataclass instances | | `str_max_length` | Maximum string length for all string fields | | `arbitrary_types_allowed` | Allows arbitrary types that don't have Pydantic validation | The `frozen` parameter can be set on both the decorator and in config. The decorator value takes precedence. Sources: [pydantic/dataclasses.py99-221](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L99-L221) [tests/test\\_dataclasses.py108-130](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L108-L130) ### Converting Standard Dataclasses Existing standard library dataclasses can be wrapped to add validation without modifying the original class: ``` ``` When wrapping a standard dataclass, Pydantic creates a new subclass (not modifying the original) and processes it through the same field collection and schema generation pipeline as regular Pydantic dataclasses. Sources: [pydantic/dataclasses.py194-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L194-L206) [tests/test\\_dataclasses.py807-840](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L807-L840) ### Field Collection Pydantic dataclasses collect fields using `collect_dataclass_fields()`, which: 1. Iterates through the dataclass MRO (Method Resolution Order) in reverse 2. Processes `__dataclass_fields__` from each dataclass in the hierarchy 3. Evaluates field annotations using the namespace resolver 4. Creates `FieldInfo` instances for each field 5. Applies typevars mapping for generic dataclasses The process respects both `dataclasses.field()` and `pydantic.Field()` for defining field metadata. Sources: [pydantic/\\_internal/\\_fields.py460-539](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L460-L539) [pydantic/\\_internal/\\_dataclasses.py65-83](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L65-L83) ### Dataclass-Specific Features #### InitVar Support Pydantic dataclasses support `dataclasses.InitVar` for initialization-only fields: ``` ``` InitVar fields are validated during initialization but are not stored on the instance. Sources: [tests/test\\_dataclasses.py673-687](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L673-L687) #### Post-Init Processing The `__post_init__` method is called after validation completes, allowing for derived field computation: ``` ``` Sources: [tests/test\\_dataclasses.py689-702](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L689-L702) #### Validate Assignment When `validate_assignment=True`, field assignments after initialization are validated: ``` ``` The implementation wraps `__setattr__` with validation logic that calls `__pydantic_validator__.validate_assignment()`. Sources: [pydantic/dataclasses.py251-268](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L251-L268) [tests/test\\_dataclasses.py120-149](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L120-L149) ### Schema Generation Dataclass schemas are built by `complete_dataclass()`, which: 1. Collects fields via `set_dataclass_fields()` 2. Creates a `GenerateSchema` instance with the config wrapper 3. Generates the core schema 4. Creates `SchemaValidator` and `SchemaSerializer` instances 5. Sets completion attributes like `__pydantic_complete__` If schema generation fails (e.g., due to undefined forward references), mock validators are set and `__pydantic_complete__` remains `False`. Sources: [pydantic/\\_internal/\\_dataclasses.py85-191](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L191) ## Function Validation",
  "The `@validate_call` decorator validates function arguments and optionally return values against type annotations. ``` ``` ### The `@validate_call` Decorator The decorator creates a `ValidateCallWrapper` that intercepts function calls: ``` ``` The wrapper validates arguments using `ArgsKwargs` and converts them to match the function signature. Sources: [pydantic/validate\\_call\\_decorator.py57-116](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L57-L116) [pydantic/\\_internal/\\_validate\\_call.py49-90](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L49-L90) ### ValidateCallWrapper Implementation The `ValidateCallWrapper` class implements the validation logic: | Attribute | Purpose | | ------------------------------- | --------------------------------------------- | | `function` | The original function being wrapped | | `validate_return` | Whether to validate return values | | `__pydantic_validator__` | SchemaValidator for arguments | | `__return_pydantic_validator__` | SchemaValidator for return value (if enabled) | The wrapper: 1. Creates a schema from the function signature 2. Validates input as `ArgsKwargs` containing positional and keyword arguments 3. Calls the original function with validated arguments 4. Optionally validates the return value Sources: [pydantic/\\_internal/\\_validate\\_call.py49-125](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L49-L125) ### Function Schema Generation Schema generation for functions happens in `GenerateSchema.validate_call_schema()`: 1. Extracts function signature via `inspect.signature()` 2. Processes each parameter to create argument schemas 3. Handles special parameter types (VAR\\_POSITIONAL, VAR\\_KEYWORD) 4. Creates an `arguments_schema` for validation 5. Optionally creates a return schema if `validate_return=True` The generated schema validates arguments as an `ArgsKwargs` structure that gets unpacked to call the function. Sources: [pydantic/\\_internal/\\_generate\\_schema.py1547-1651](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L1547-L1651) ### Validating Return Values Enable return value validation with `validate_return=True`: ``` ``` Return validation uses a separate `__return_pydantic_validator__` created from the return type annotation. Sources: [pydantic/\\_internal/\\_validate\\_call.py91-125](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L91-L125) [tests/test\\_validate\\_call.py547-575](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L547-L575) ### Configuration Configuration is passed via the `config` parameter: ``` ``` The configuration affects both argument and return value validation. Sources: [pydantic/validate\\_call\\_decorator.py57-116](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L57-L116) [tests/test\\_validate\\_call.py618-641](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L618-L641) ### Supported Function Types The decorator supports: - Regular functions - Async functions - Methods (instance, class, static) - Lambda functions - `functools.partial` objects It does not support: - Built-in functions (e.g., `breakpoint`) - Classes (use on `__init__` or `__new__` instead) - Non-callable objects Sources: [pydantic/validate\\_call\\_decorator.py24-95](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L24-L95) [tests/test\\_validate\\_call.py42-97](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L42-L97) ## RootModel and Computed Fields ### RootModel The `RootModel` class validates a single root-level value rather than multiple fields. It's a `BaseModel` subclass with a single field named `root`. **RootModel Validation Flow** ``` ``` The `RootModel` class:",
  "- Sets `__pydantic_root_model__ = True` - Has a single field `root: RootModelRootType` - Does not support `model_config['extra']` - Accepts either positional or keyword arguments in `__init__` Sources: [pydantic/root\\_model.py32-86](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L86) #### Creating RootModels ``` ``` The root type is specified as a generic parameter. The model validates that the input matches the root type. Sources: [pydantic/root\\_model.py32-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L69) #### Serialization RootModel serialization methods return the root value directly: | Method | Returns | | ------------------- | ----------------------------- | | `model_dump()` | Python representation of root | | `model_dump_json()` | JSON string of root | ``` ``` Sources: [pydantic/root\\_model.py109-158](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L109-L158) ### Computed Fields The `@computed_field` decorator creates dynamic properties that appear in serialization but are not part of the model's validated fields. **Computed Field Lifecycle** ``` ``` Computed fields: - Are evaluated during serialization, not validation - Appear in `model_dump()` and `model_dump_json()` output - Can be cached with `@cached_property` - Support custom serializers via `@field_serializer` Sources: [pydantic/fields.py745-894](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L745-L894) #### Basic Usage ``` ``` The `@computed_field` decorator must be applied to a `@property`. The computed value is included in serialization output. Sources: [pydantic/fields.py745-810](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L745-L810) #### JSON Schema Computed fields appear in JSON schema with `readOnly: true` in serialization mode: ``` ``` Sources: [tests/test\\_dataclasses.py1285-1329](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L1285-L1329) #### Return Type Annotation Computed fields require return type annotations. The annotation determines the schema used for serialization: ``` ``` Without a return type annotation, Pydantic cannot generate the correct schema. Sources: [pydantic/fields.py745-810](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L745-L810) ## Plugin System Pydantic provides a plugin system that allows you to customize validation, serialization, and other behaviors. This is particularly useful for integrating Pydantic with other libraries or adding custom validation logic. ``` ``` ### Creating a Plugin ``` ``` ### Validation Handlers Plugins can provide handlers for different validation methods: ``` ``` ### Using Plugins Plugins are configured through model config: ``` ``` Sources: [pydantic/plugin/\\_\\_init\\_\\_.py38-71](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L38-L71) [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) ## Integration with Other Libraries Pydantic integrates well with many Python libraries and frameworks. Here are some common integrations: ### FastAPI Integration FastAPI leverages Pydantic models for request validation and OpenAPI schema generation: ``` ``` ### Dataframe Validation Using TypeAdapter with pandas DataFrames: ``` ``` ### ORM Integration Pydantic models can work with ORMs using `from_attributes`: ``` ``` These integrations showcase Pydantic's versatility and how it can be used as a validation layer in various Python applications and frameworks. Sources: [tests/test\\_type\\_adapter.py385-430](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L385-L430) [tests/test\\_validate\\_call.py385-430](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L385-L430) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Advanced Features](#advanced-features.md) - [Dataclass Support](#dataclass-support.md) - [Creating Pydantic Dataclasses](#creating-pydantic-dataclasses.md) - [Configuration Options](#configuration-options.md) - [Converting Standard Dataclasses](#converting-standard-dataclasses.md) - [Field Collection](#field-collection.md) - [Dataclass-Specific Features](#dataclass-specific-features.md) - [InitVar Support](#initvar-support.md) - [Post-Init Processing](#post-init-processing.md) - [Validate Assignment](#validate-assignment.md) - [Schema Generation](#schema-generation.md) - [Function Validation](#function-validation.md) - [The \\`@validate\\_call\\` Decorator](#the-validate_call-decorator.md) - [ValidateCallWrapper Implementation](#validatecallwrapper-implementation.md) - [Function Schema Generation](#function-schema-generation.md) - [Validating Return Values](#validating-return-values.md) - [Configuration](#configuration.md) - [Supported Function Types](#supported-function-types.md) - [RootModel and Computed Fields](#rootmodel-and-computed-fields.md) - [RootModel](#rootmodel.md) - [Creating RootModels](#creating-rootmodels.md) - [Serialization](#serialization.md) - [Computed Fields](#computed-fields.md) - [Basic Usage](#basic-usage.md) - [JSON Schema](#json-schema.md) - [Return Type Annotation](#return-type-annotation.md) - [Plugin System](#plugin-system.md) - [Creating a Plugin](#creating-a-plugin.md) - [Validation Handlers](#validation-handlers.md) - [Using Plugins](#using-plugins.md) - [Integration with Other Libraries](#integration-with-other-libraries.md) - [FastAPI Integration](#fastapi-integration.md) - [Dataframe Validation](#dataframe-validation.md) - [ORM Integration](#orm-integration.md)",
  "Plugin System | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Plugin System Relevant source files",
  "- [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) This document describes Pydantic's plugin system, which allows external code to hook into the validation lifecycle through event handlers. Plugins can observe validation inputs, outputs, errors, and exceptions for all validation methods (`validate_python`, `validate_json`, `validate_strings`). For information about custom validators and serializers at the field or model level, see [Validators](pydantic/pydantic/4.1-validators.md) and [Serializers](pydantic/pydantic/4.2-serializers.md). For type-level customization hooks, see [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md). ## Overview The plugin system provides a way to instrument Pydantic's validation process without modifying models or types. Plugins implement the `PydanticPluginProtocol` and receive callbacks at key points during validation: - **on\\_enter**: Before validation begins - **on\\_success**: After successful validation - **on\\_error**: When validation fails - **on\\_exception**: When an unexpected exception occurs Plugins are invoked automatically whenever a `SchemaValidator` is created for BaseModels, TypeAdapters, dataclasses, `validate_call`, or `create_model`. **Sources:** [pydantic/plugin/\\_\\_init\\_\\_.py1-194](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L1-L194) ## Plugin Protocol ### PydanticPluginProtocol ``` ``` Plugins must implement a single method that returns event handlers for each of the three validation modes: | Parameter | Type | Description | | ------------------ | -------------------- | ------------------------------------------------------------------------------------------ | | `schema` | `CoreSchema` | The pydantic-core schema for validation | | `schema_type` | `Any` | The original Python type (e.g., model class) | | `schema_type_path` | `SchemaTypePath` | Module and name where the type was defined | | `schema_kind` | `SchemaKind` | One of: `'BaseModel'`, `'TypeAdapter'`, `'dataclass'`, `'create_model'`, `'validate_call'` | | `config` | `CoreConfig \\| None` | Core configuration for the validator | | `plugin_settings` | `dict[str, object]` | Settings passed via `plugin_settings` in model config | **Sources:** [pydantic/plugin/\\_\\_init\\_\\_.py40-73](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L40-L73) ### SchemaTypePath and SchemaKind ``` ``` The `SchemaTypePath` identifies where a schema was created, useful for filtering which schemas a plugin should observe. The `SchemaKind` indicates what API created the schema.",
  "**Sources:** [pydantic/plugin/\\_\\_init\\_\\_.py30-37](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L30-L37) ## Event Handler Protocols ### Handler Lifecycle ``` ``` Each handler protocol defines four callback methods. All methods have default no-op implementations, so plugins only need to implement the callbacks they care about. **Sources:** [pydantic/plugin/\\_schema\\_validator.py96-126](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py#L96-L126) ### ValidatePythonHandlerProtocol Handles events for `validate_python()` calls: ``` ``` The `self_instance` parameter is populated when validation occurs during model `__init__`, allowing plugins to observe the model instance being initialized. **Sources:** [pydantic/plugin/\\_\\_init\\_\\_.py110-138](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L110-L138) ### ValidateJsonHandlerProtocol Handles events for `validate_json()` calls with JSON string/bytes input: ``` ``` **Sources:** [pydantic/plugin/\\_\\_init\\_\\_.py140-166](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L140-L166) ### ValidateStringsHandlerProtocol Handles events for `validate_strings()` calls: ``` ``` **Sources:** [pydantic/plugin/\\_\\_init\\_\\_.py171-193](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L171-L193) ## PluggableSchemaValidator ### Architecture ``` ``` The `PluggableSchemaValidator` wraps a standard `SchemaValidator` and intercepts its validation methods. When plugins are registered, `create_schema_validator()` returns a `PluggableSchemaValidator` instead of a plain `SchemaValidator`. **Sources:** [pydantic/plugin/\\_schema\\_validator.py22-52](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py#L22-L52) [pydantic/plugin/\\_schema\\_validator.py54-94](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py#L54-L94) ### Wrapper Construction The `build_wrapper()` function creates wrapper methods that invoke event handlers: | Step | Action | | -------------------- | ------------------------------------------------------------------------ | | 1. Filter handlers | Only include handlers with custom (non-protocol) implementations | | 2. Extract callbacks | Collect all `on_enter`, `on_success`, `on_error`, `on_exception` methods | | 3. Wrap function | Create wrapper that calls handlers at appropriate points | ``` ``` The `filter_handlers()` function checks if a method is implemented by the plugin (not inherited from the protocol) by checking if `handler.__module__ == 'pydantic.plugin'`. **Sources:** [pydantic/plugin/\\_schema\\_validator.py96-141](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py#L96-L141) ## Plugin Registration ### Integration Points ``` ``` All schema validation entry points use `create_schema_validator()` to construct validators: | Entry Point | Schema Kind | Location | | ---------------------- | ----------------- | ------------------------------------------ | | BaseModel | `'BaseModel'` | Model metaclass during class creation | | TypeAdapter | `'TypeAdapter'` | `TypeAdapter._init_core_attrs()` | | @dataclasses.dataclass | `'dataclass'` | Dataclass wrapper initialization | | @validate\\_call | `'validate_call'` | `ValidateCallWrapper._create_validators()` | | create\\_model() | `'create_model'` | Dynamic model creation | **Sources:** [pydantic/type\\_adapter.py321-330](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L321-L330) [pydantic/\\_internal/\\_validate\\_call.py91-104](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L91-L104) ### Plugin Settings Models can pass settings to plugins via the `plugin_settings` configuration: ``` ```",
  "These settings are passed to `PydanticPluginProtocol.new_schema_validator()` as the `plugin_settings` parameter, allowing plugins to customize behavior per schema. **Sources:** [tests/test\\_plugins.py68-76](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py#L68-L76) ## Usage Examples ### Basic Logging Plugin ``` ``` **Sources:** [tests/test\\_plugins.py126-165](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py#L126-L165) ### Stateful Plugin with Cleanup Plugins can maintain state across validation calls: ``` ``` All three lifecycle methods (`on_success`, `on_error`, `on_exception`) are called to ensure proper cleanup regardless of validation outcome. **Sources:** [tests/test\\_plugins.py217-272](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py#L217-L272) ### Multi-Method Plugin Plugins can handle all three validation methods: ``` ``` Each handler receives method-specific parameters in `on_enter()`. For example, `ValidateJsonHandlerProtocol.on_enter()` receives `input: str | bytes | bytearray` while `ValidatePythonHandlerProtocol.on_enter()` receives `input: Any`. **Sources:** [tests/test\\_plugins.py274-336](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py#L274-L336) ### Filtering by Schema Kind Plugins can choose which schemas to observe based on `schema_kind`: ``` ``` **Sources:** [tests/test\\_plugins.py338-355](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py#L338-L355) ### Filtering by Module Path Plugins can filter based on where types are defined: ``` ``` **Sources:** [tests/test\\_plugins.py357-408](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py#L357-L408) ## Implementation Details ### Handler Method Filtering The `filter_handlers()` function prevents calling protocol default methods: ``` ``` This allows plugins to only implement the callbacks they need without performance overhead from no-op protocol defaults. **Sources:** [pydantic/plugin/\\_schema\\_validator.py128-141](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py#L128-L141) ### Attribute Proxying `PluggableSchemaValidator` proxies all other attributes to the wrapped `SchemaValidator`: ``` ``` This ensures that `PluggableSchemaValidator` behaves identically to `SchemaValidator` for attributes like `title`, `get_default_value()`, etc. **Sources:** [pydantic/plugin/\\_schema\\_validator.py92-93](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py#L92-L93) ### Performance Considerations When no plugins are installed, `create_schema_validator()` returns a plain `SchemaValidator` with zero overhead. The plugin system only activates when plugins are registered via the plugin loader. **Sources:** [pydantic/plugin/\\_schema\\_validator.py22-51](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py#L22-L51) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Plugin System](#plugin-system.md) - [Overview](#overview.md) - [Plugin Protocol](#plugin-protocol.md) - [PydanticPluginProtocol](#pydanticpluginprotocol.md) - [SchemaTypePath and SchemaKind](#schematypepath-and-schemakind.md) - [Event Handler Protocols](#event-handler-protocols.md) - [Handler Lifecycle](#handler-lifecycle.md) - [ValidatePythonHandlerProtocol](#validatepythonhandlerprotocol.md) - [ValidateJsonHandlerProtocol](#validatejsonhandlerprotocol.md) - [ValidateStringsHandlerProtocol](#validatestringshandlerprotocol.md) - [PluggableSchemaValidator](#pluggableschemavalidator.md) - [Architecture](#architecture.md) - [Wrapper Construction](#wrapper-construction.md) - [Plugin Registration](#plugin-registration.md) - [Integration Points](#integration-points.md) - [Plugin Settings](#plugin-settings.md) - [Usage Examples](#usage-examples.md) - [Basic Logging Plugin](#basic-logging-plugin.md) - [Stateful Plugin with Cleanup](#stateful-plugin-with-cleanup.md) - [Multi-Method Plugin](#multi-method-plugin.md) - [Filtering by Schema Kind](#filtering-by-schema-kind.md) - [Filtering by Module Path](#filtering-by-module-path.md) - [Implementation Details](#implementation-details.md) - [Handler Method Filtering](#handler-method-filtering.md) - [Attribute Proxying](#attribute-proxying.md) - [Performance Considerations](#performance-considerations.md)",
  "pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Overview Relevant source files",
  "- [.pre-commit-config.yaml](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml) - [CITATION.cff](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff) - [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md) - [docs/concepts/config.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md) - [docs/concepts/dataclasses.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md) - [docs/concepts/json.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json.md) - [docs/concepts/json\\_schema.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md) - [docs/concepts/models.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md) - [docs/concepts/performance.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md) - [docs/concepts/serialization.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md) - [docs/concepts/validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md) - [docs/contributing.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md) - [docs/examples/custom\\_validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/examples/custom_validators.md) - [docs/integrations/aws\\_lambda.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/aws_lambda.md) - [docs/integrations/llms.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/llms.md) - [docs/migration.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md) - [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) - [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) - [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) - [pydantic/version.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py) - [release/README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/release/README.md) - [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) - [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py) - [uv.lock](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock) This document provides a high-level introduction to Pydantic's architecture, core concepts, and design philosophy. It explains what Pydantic is, its relationship with pydantic-core, and how the major systems interact. For detailed information about specific subsystems, see: - Model system details: [Core Model System](pydantic/pydantic/2-core-model-system.md) - Type system details: [Type System](pydantic/pydantic/3-type-system.md) - Validation and serialization: [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - Schema generation: [Schema Generation](pydantic/pydantic/5-schema-generation.md) ## What is Pydantic",
  "Pydantic is a data validation library for Python that uses Python type hints to validate, parse, and serialize data. It provides runtime type checking and data conversion, ensuring that data conforms to specified types and constraints. The library's primary goal is to guarantee that the output data structure precisely conforms to the applied type hints, rather than simply checking input validity. This means Pydantic can coerce input data (e.g., converting string `\"123\"` to integer `123`) while ensuring the resulting instance meets all type requirements. **Sources:** [pydantic/main.py1-70](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L70) [docs/concepts/models.md1-52](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md#L1-L52) ## Core Architecture Pydantic's architecture consists of three main layers: user-facing APIs, schema generation, and the validation/serialization engine. ### System Overview ``` ``` **Sources:** [pydantic/main.py1-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L238) [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) ### User-Facing APIs Pydantic provides four primary entry points for validation: | API | Purpose | Primary Use Case | | ---------------- | ------------------------------ | ------------------------------------------------------ | | `BaseModel` | Class-based models with fields | Domain models, API schemas, configuration | | `TypeAdapter` | Validate arbitrary types | One-off validation, generic types, non-model scenarios | | `@dataclass` | Enhanced dataclasses | Dataclass-style models with validation | | `@validate_call` | Function argument validation | Validating function inputs and outputs | All four APIs converge on the same schema generation and validation pipeline, ensuring consistent behavior across different usage patterns. **Sources:** [pydantic/main.py118-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L238) [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py) [pydantic/decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py) ### Pydantic-Core Integration Pydantic's performance-critical validation and serialization logic is implemented in `pydantic-core`, a separate Rust library. The relationship is strictly versioned: ``` ``` The version compatibility is enforced at import time: - **Current Pydantic version:** `2.12.0b1+dev` [pydantic/version.py11](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L11) - **Required pydantic-core version:** `2.40.1` [pydantic/version.py22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L22-L22) - **Compatibility check:** `_ensure_pydantic_core_version()` [pydantic/version.py82-98](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L82-L98) **Sources:** [pydantic/version.py1-114](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L1-L114) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) ## Main Workflows ### Validation Pipeline The validation process transforms raw input data into validated model instances through multiple stages: ``` ``` Key validation entry points:",
  "- `BaseModel.__init__(self, **data)` [pydantic/main.py240-257](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L257) - `BaseModel.model_validate(cls, obj)` [pydantic/main.py653-699](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L653-L699) - `BaseModel.model_validate_json(cls, json_data)` [pydantic/main.py702-743](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L702-L743) - `TypeAdapter.validate_python(obj)` and `TypeAdapter.validate_json(json_data)` The actual validation is delegated to `SchemaValidator` from pydantic-core: - Stored in `cls.__pydantic_validator__` [pydantic/main.py197-198](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L197-L198) - Called via `validate_python()`, `validate_json()`, or `validate_strings()` methods **Sources:** [pydantic/main.py240-781](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L781) [docs/concepts/validators.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md#L1-L50) ### Serialization Pipeline Serialization converts validated model instances into dictionaries or JSON strings: ``` ``` Key serialization methods: - `model_dump(mode='python'|'json')` [pydantic/main.py418-474](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L474) - `model_dump_json()` [pydantic/main.py476-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L476-L534) The serialization is handled by `SchemaSerializer` from pydantic-core: - Stored in `cls.__pydantic_serializer__` [pydantic/main.py194-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L194-L195) - Called via `to_python()` or `to_json()` methods **Sources:** [pydantic/main.py418-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L534) [docs/concepts/serialization.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md#L1-L50) ### Schema Generation Flow Schema generation is a two-stage process: first generating CoreSchema for validation, then optionally generating JSON Schema for documentation: ``` ``` The schema generation process: 1. **Type Analysis:** Python type annotations are analyzed using `GenerateSchema` class [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) 2. **CoreSchema Creation:** Types are converted to CoreSchema format understood by pydantic-core 3. **Validator/Serializer Creation:** CoreSchema is used to build `SchemaValidator` and `SchemaSerializer` instances 4. **JSON Schema Generation:** Optionally, CoreSchema is converted to JSON Schema for API documentation **Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py) [docs/concepts/json\\_schema.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md#L1-L50) ## Field and Configuration System ### Field Definition Fields are defined using `FieldInfo` instances, which store metadata and constraints: ``` ``` Fields can be defined in three ways:",
  "1. Bare annotation: `field_name: int` [pydantic/fields.py295-351](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L295-L351) 2. With default: `field_name: int = 10` [pydantic/fields.py354-447](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L354-L447) 3. Using `Field()`: `field_name: int = Field(default=10, gt=0)` [pydantic/fields.py267-292](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L267-L292) **Sources:** [pydantic/fields.py98-733](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L98-L733) [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py) ### Configuration Hierarchy Configuration can be specified at multiple levels: | Level | Syntax | Priority | | ----- | -------------------------------- | -------- | | Model | `model_config = ConfigDict(...)` | Lowest | | Field | `Field(frozen=True, ...)` | Medium | | Type | `Annotated[int, Strict()]` | Highest | Configuration is processed by `ConfigWrapper` [pydantic/\\_internal/\\_config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py) and merged during schema generation. **Sources:** [pydantic/config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py) [pydantic/\\_internal/\\_config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py) [docs/concepts/config.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md#L1-L50) ## Model Lifecycle The lifecycle of a Pydantic model class from definition to usage: ``` ``` Key lifecycle steps: 1. **Metaclass invocation:** `ModelMetaclass.__new__()` [pydantic/\\_internal/\\_model\\_construction.py80-276](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L276) 2. **Namespace inspection:** `inspect_namespace()` identifies fields vs class vars [pydantic/\\_internal/\\_model\\_construction.py520-642](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L520-L642) 3. **Field collection:** `set_model_fields()` creates `FieldInfo` instances [pydantic/\\_internal/\\_model\\_construction.py299-331](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L299-L331) 4. **Schema generation:** `complete_model_class()` builds validation/serialization schemas [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) 5. **Completion:** Model marked as complete in `__pydantic_complete__` [pydantic/main.py167-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L167-L168) Models can be rebuilt after definition using `model_rebuild()` [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) if forward references need resolution.",
  "**Sources:** [pydantic/\\_internal/\\_model\\_construction.py79-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L277) [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) ## Class Attributes Reference Every `BaseModel` subclass has these key class attributes: | Attribute | Type | Description | | ------------------------------ | ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------- | | `model_config` | `ConfigDict` | Configuration dictionary [pydantic/main.py153-156](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L153-L156) | | `__pydantic_core_schema__` | `CoreSchema` | Core validation schema [pydantic/main.py170-171](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L170-L171) | | `__pydantic_validator__` | `SchemaValidator` | Validation engine instance [pydantic/main.py197-198](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L197-L198) | | `__pydantic_serializer__` | `SchemaSerializer` | Serialization engine instance [pydantic/main.py194-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L194-L195) | | `__pydantic_fields__` | `dict[str, FieldInfo]` | Field definitions [pydantic/main.py200-203](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L200-L203) | | `__pydantic_computed_fields__` | `dict[str, ComputedFieldInfo]` | Computed field definitions [pydantic/main.py208-209](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L208-L209) | | `__pydantic_decorators__` | `DecoratorInfos` | Validator/serializer decorators [pydantic/main.py177-179](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L177-L179) | | `__pydantic_complete__` | `bool` | Whether model building is complete [pydantic/main.py167-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L167-L168) | **Sources:** [pydantic/main.py118-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L238) ## Instance Attributes Reference Every `BaseModel` instance has these instance attributes: | Attribute | Type | Description | | ------------------------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ | | `__dict__` | `dict[str, Any]` | Field values storage | | `__pydantic_fields_set__` | `set[str]` | Fields explicitly set during init [pydantic/main.py214-215](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L214-L215) | | `__pydantic_extra__` | `dict[str, Any] \\| None` | Extra fields when `extra='allow'` [pydantic/main.py211-212](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L212) | | `__pydantic_private__` | `dict[str, Any] \\| None` | Private attribute values [pydantic/main.py217-218](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L217-L218) | **Sources:** [pydantic/main.py211-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L238) ## Project Structure The Pydantic codebase is organized into several key directories:",
  "``` pydantic/ ├── main.py # BaseModel implementation ├── fields.py # FieldInfo and Field() function ├── config.py # ConfigDict definition ├── types.py # Custom types (URL, Email, etc.) ├── type_adapter.py # TypeAdapter implementation ├── dataclasses.py # Enhanced dataclass support ├── json_schema.py # JSON Schema generation ├── functional_validators.py # Validator decorators ├── functional_serializers.py # Serializer decorators └── _internal/ ├── _model_construction.py # ModelMetaclass ├── _generate_schema.py # GenerateSchema class ├── _fields.py # Field collection logic ├── _decorators.py # Decorator processing ├── _config.py # ConfigWrapper └── _namespace_utils.py # Type resolution ``` **Sources:** [pydantic/main.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L1) [pydantic/fields.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L1-L1) [pydantic/\\_internal/\\_model\\_construction.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L1-L1) ## Migration from V1 Pydantic V2 represents a major rewrite with significant API changes. The key differences: | V1 API | V2 API | Notes | | ---------------- | ------------------------- | -------------------- | | `parse_obj()` | `model_validate()` | Method renamed | | `parse_raw()` | `model_validate_json()` | Specialized for JSON | | `dict()` | `model_dump()` | Method renamed | | `json()` | `model_dump_json()` | Method renamed | | `__fields__` | `model_fields` | Now a property | | `__validators__` | `__pydantic_decorators__` | Structure changed | A V1 compatibility layer is available through `pydantic.v1` imports for gradual migration. **Sources:** [docs/migration.md1-150](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L1-L150) [pydantic/\\_migration.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_migration.py) ## Performance Considerations Pydantic V2's performance characteristics: 1. **Rust-based validation:** Core validation logic runs in Rust for significant speedup 2. **Schema caching:** Validators and serializers are cached on the class [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) 3. **JSON parsing:** `model_validate_json()` is faster than `model_validate(json.loads())` [docs/concepts/performance.md5-16](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md#L5-L16) 4. **Deferred building:** Models can defer schema generation with `defer_build=True` config **Sources:** [docs/concepts/performance.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md#L1-L50) [pydantic/\\_internal/\\_model\\_construction.py247-258](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L247-L258) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Overview](#overview.md) - [What is Pydantic](#what-is-pydantic.md) - [Core Architecture](#core-architecture.md) - [System Overview](#system-overview.md) - [User-Facing APIs](#user-facing-apis.md) - [Pydantic-Core Integration](#pydantic-core-integration.md) - [Main Workflows](#main-workflows.md) - [Validation Pipeline](#validation-pipeline.md) - [Serialization Pipeline](#serialization-pipeline.md) - [Schema Generation Flow](#schema-generation-flow.md) - [Field and Configuration System](#field-and-configuration-system.md) - [Field Definition](#field-definition.md) - [Configuration Hierarchy](#configuration-hierarchy.md) - [Model Lifecycle](#model-lifecycle.md) - [Class Attributes Reference](#class-attributes-reference.md) - [Instance Attributes Reference](#instance-attributes-reference.md) - [Project Structure](#project-structure.md) - [Migration from V1](#migration-from-v1.md) - [Performance Considerations](#performance-considerations.md)",
  "Function Validation | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Function Validation Relevant source files",
  "- [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) ## Overview Function validation in Pydantic enables automatic validation of function arguments and return values using the `@validate_call` decorator. This system extends Pydantic's validation capabilities beyond models to regular Python functions, methods, and lambdas by transforming function signatures into validation schemas and wrapping function calls with validation logic. For field-level validation within models, see [Validators](pydantic/pydantic/4.1-validators.md). For model-level validation, see [Model Configuration](pydantic/pydantic/2.3-model-configuration.md). **Sources:** [pydantic/validate\\_call\\_decorator.py1-117](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L1-L117) ## Decorator Interface The `@validate_call` decorator is the primary entry point for function validation. It can be applied either as a bare decorator or with configuration options: ``` ``` ### Decorator Parameters | Parameter | Type | Description | | ----------------- | ------------------ | ---------------------------------------------------------------- | | `func` | Callable or None | The function to validate (when used as bare decorator) | | `config` | ConfigDict or None | Configuration dictionary for validation behavior | | `validate_return` | bool | Whether to validate the function's return value (default: False) | The decorator supports various callable types defined in `VALIDATE_CALL_SUPPORTED_TYPES`: - Regular functions - Methods (instance, class, static) - Lambda functions - `functools.partial` objects **Sources:** [pydantic/validate\\_call\\_decorator.py72-117](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L72-L117) [tests/test\\_validate\\_call.py28-59](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L28-L59) ## Validation Flow Architecture ``` ``` **Sources:** [pydantic/validate\\_call\\_decorator.py24-70](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L24-L70) [pydantic/\\_internal/\\_validate\\_call.py49-141](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L49-L141) ## ValidateCallWrapper Implementation The `ValidateCallWrapper` class handles the core logic of function validation. It wraps the original function and intercepts all calls to perform validation. ### Core Components ``` ``` ### Initialization Process The wrapper is initialized in `__init__` with the following steps:",
  "1. **Extract function metadata**: Store the function, extract its module and qualname 2. **Create namespace resolver**: Build `NsResolver` to handle forward references in type annotations 3. **Configure wrapper**: Create `ConfigWrapper` from provided config 4. **Conditional schema building**: If `defer_build` is not enabled, immediately create validators; otherwise defer until first call **Sources:** [pydantic/\\_internal/\\_validate\\_call.py65-90](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L65-L90) ### Validator Creation The `_create_validators` method generates schemas and validators: ``` ``` **Sources:** [pydantic/\\_internal/\\_validate\\_call.py91-131](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L91-L131) ### Call Interception When the wrapped function is called, the `__call__` method: 1. **Lazy validation setup**: If validators weren't created during initialization (deferred build), create them now 2. **Package arguments**: Wrap positional and keyword arguments in `ArgsKwargs` object 3. **Validate arguments**: Pass through `__pydantic_validator__` 4. **Execute function**: Call the validated function with validated args 5. **Validate return** (optional): Pass return value through `__return_pydantic_validator__` if configured **Sources:** [pydantic/\\_internal/\\_validate\\_call.py132-141](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L132-L141) ## Function Schema Generation Function signatures are transformed into pydantic-core schemas through the `GenerateSchema` class. This enables the same validation logic used for models to work with functions. ### Argument Types and Schema Mapping | Argument Kind | Schema Type | Example | | ----------------------------- | --------------------------------------------- | ----------------------------------------- | | Positional-only (`/`) | `arguments_schema` with positional parameters | `def f(a, /, b): ...` | | Keyword-only (`*`) | `arguments_schema` with keyword parameters | `def f(*, a, b): ...` | | Variable positional (`*args`) | `arguments_schema` with var\\_args\\_schema | `def f(*args): ...` | | Variable keyword (`**kwargs`) | `arguments_schema` with var\\_kwargs\\_schema | `def f(**kwargs): ...` | | Mixed | Combined `arguments_schema` | `def f(a, /, b, *args, c, **kwargs): ...` | ### Special Handling: TypedDict Unpacking When using `Unpack[TypedDict]` for `**kwargs`, the decorator validates kwargs against the TypedDict schema: ``` ``` The implementation checks for overlaps between regular parameters and TypedDict keys, raising `PydanticUserError` if positional-or-keyword parameters conflict with TypedDict keys. **Sources:** [tests/test\\_validate\\_call.py286-417](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L286-L417) ## Function Type Validation The `_check_function_type` function validates that the decorated object is a supported callable type: ``` ``` **Sources:** [pydantic/validate\\_call\\_decorator.py24-70](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L24-L70) ## Advanced Features ### Return Value Validation When `validate_return=True`, the decorator validates the function's return value against its return type annotation: ``` ``` The implementation creates a separate validator for the return type and wraps the result in an appropriate handler (async or sync). **Sources:** [pydantic/\\_internal/\\_validate\\_call.py105-128](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L105-L128) ### Async Function Support The wrapper detects coroutine functions using `inspect.iscoroutinefunction` and creates appropriate wrappers: - For regular functions: Direct validation wrapper - For async functions: Async wrapper that awaits the coroutine before/after validation The `update_wrapper_attributes` function ensures the wrapper preserves the async nature of the original function. **Sources:** [pydantic/\\_internal/\\_validate\\_call.py28-46](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L28-L46) ### Configuration Options All `ConfigDict` options are supported: ``` ```",
  "**Sources:** [tests/test\\_validate\\_call.py730-776](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L730-L776) ### Field-Level Annotations Function parameters support Pydantic's `Field` and `Annotated` for additional validation: ``` ``` **Sources:** [tests/test\\_validate\\_call.py419-436](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L419-L436) [tests/test\\_validate\\_call.py778-796](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L778-L796) ## Integration with Plugin System The `validate_call` decorator integrates with Pydantic's plugin system through the `create_schema_validator` function. When plugins are installed, they receive notifications about function validation: ``` ``` Plugins receive: - `schema_kind='validate_call'` - `schema_type`: The original function - `schema_type_path`: Module and qualname of the function **Sources:** [pydantic/\\_internal/\\_validate\\_call.py96-104](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L96-L104) [tests/test\\_plugins.py410-447](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py#L410-L447) ## JSON Schema Generation Functions decorated with `@validate_call` can generate JSON schemas through `TypeAdapter`: ``` ``` The schema generation handles: - Positional-only arguments → array schema with `prefixItems` - Keyword-only arguments → object schema with `properties` - Mixed argument types → raises `PydanticInvalidForJsonSchema` - Variable arguments (`*args`) → array schema with `items` - Variable keyword arguments (`**kwargs`) → object schema with `additionalProperties` **Sources:** [tests/test\\_validate\\_call.py626-707](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L626-L707) ## Error Handling and Validation Errors Validation errors from `@validate_call` decorated functions follow the same structure as model validation errors: ``` ``` Common error types: - `missing_argument`: Required argument not provided - `unexpected_positional_argument`: Too many positional args - `unexpected_keyword_argument`: Unknown keyword arg - `multiple_argument_values`: Argument provided both positionally and by keyword - `missing_positional_only_argument`: Positional-only arg passed as keyword - `missing_keyword_only_argument`: Keyword-only arg passed positionally **Sources:** [tests/test\\_validate\\_call.py152-201](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L152-L201) ## Wrapper Attribute Preservation The `update_wrapper_attributes` function ensures the decorated function preserves key attributes: ``` ``` For `partial` objects, special handling generates names like `partial(func_name)`. **Sources:** [pydantic/\\_internal/\\_validate\\_call.py18-46](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L18-L46) [tests/test\\_validate\\_call.py28-53](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L28-L53) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Function Validation](#function-validation.md) - [Overview](#overview.md) - [Decorator Interface](#decorator-interface.md) - [Decorator Parameters](#decorator-parameters.md) - [Validation Flow Architecture](#validation-flow-architecture.md) - [ValidateCallWrapper Implementation](#validatecallwrapper-implementation.md) - [Core Components](#core-components.md) - [Initialization Process](#initialization-process.md) - [Validator Creation](#validator-creation.md) - [Call Interception](#call-interception.md) - [Function Schema Generation](#function-schema-generation.md) - [Argument Types and Schema Mapping](#argument-types-and-schema-mapping.md) - [Special Handling: TypedDict Unpacking](#special-handling-typeddict-unpacking.md) - [Function Type Validation](#function-type-validation.md) - [Advanced Features](#advanced-features.md) - [Return Value Validation](#return-value-validation.md) - [Async Function Support](#async-function-support.md) - [Configuration Options](#configuration-options.md) - [Field-Level Annotations](#field-level-annotations.md) - [Integration with Plugin System](#integration-with-plugin-system.md) - [JSON Schema Generation](#json-schema-generation.md) - [Error Handling and Validation Errors](#error-handling-and-validation-errors.md) - [Wrapper Attribute Preservation](#wrapper-attribute-preservation.md)",
  "Testing Framework | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Testing Framework Relevant source files - [tests/conftest.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py) ## Purpose and Scope This document covers Pydantic's testing infrastructure, including pytest configuration, test fixtures, module creation utilities, and validation helpers. The framework provides tools for dynamic module creation, JSON schema validation, schema generation monitoring, and thread safety management across the test suite. For information about CI/CD pipelines and automation, see [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md). For documentation building and testing, see [Documentation System](pydantic/pydantic/7.3-documentation-system.md). --- ## Test Configuration Architecture The testing framework is built on pytest and configured through `tests/conftest.py`. The configuration system provides command-line options, session-wide settings, and automatic test collection hooks. ``` ```",
  "**Sources:** [tests/conftest.py25-28](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L25-L28) [tests/conftest.py57-62](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L57-L62) [tests/conftest.py198-203](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L198-L203) ### Command-Line Options The framework defines custom pytest options through the `pytest_addoption` hook: | Option | Purpose | Usage | | --------------- | ------------------------------- | ---------------------- | | `--test-mypy` | Enable mypy type checking tests | `pytest --test-mypy` | | `--update-mypy` | Update mypy test baselines | `pytest --update-mypy` | **Sources:** [tests/conftest.py25-28](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L25-L28) ### Session-Wide Configuration The `disable_error_urls` fixture runs once per test session and sets an environment variable to prevent Pydantic from including documentation URLs in error messages during tests. This prevents version-specific URLs from appearing in test outputs that would need frequent updating. **Sources:** [tests/conftest.py57-62](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L57-L62) --- ## Test Fixtures Pydantic's test suite provides several specialized fixtures for common testing patterns. These fixtures handle module creation, subprocess execution, schema generation monitoring, and JSON schema validation. ``` ``` **Sources:** [tests/conftest.py64-182](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L64-L182) ### Fixture Catalog | Fixture | Scope | Purpose | | ----------------------- | -------- | ---------------------------------------------- | | `disable_error_urls` | session | Disables error URL generation globally | | `create_module` | function | Creates and imports Python modules dynamically | | `subprocess_run_code` | function | Executes code in isolated subprocess | | `generate_schema_calls` | function | Monitors and counts schema generation calls | | `validate_json_schemas` | function | Validates generated JSON schemas automatically | **Sources:** [tests/conftest.py57-182](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L57-L182) --- ## Dynamic Module Creation The `create_module` fixture enables tests to create and import Python modules on-the-fly from source code strings or function bodies. This is essential for testing import-time behaviors, module-level validation, and schema caching. ### Module Creation Pipeline ``` ``` **Sources:** [tests/conftest.py30-103](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L30-L103) ### Function Source Code Extraction The `_extract_source_code_from_function` helper extracts the body of a test function, enabling a decorator-like pattern for module creation: ``` ``` The function: 1. Validates that the function has no arguments ([tests/conftest.py31-32](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L31-L32)) 2. Uses `inspect.getsource()` to get source code ([tests/conftest.py36](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L36-L36)) 3. Skips the `def` line ([tests/conftest.py37-39](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L37-L39)) 4. Dedents and returns the body ([tests/conftest.py43](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L43-L43)) **Sources:** [tests/conftest.py30-44](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L30-L44) ### Module File Creation The `_create_module_file` function handles platform-specific file creation:",
  "| Concern | Implementation | | ------------------ | --------------------------------------------------------------------------------------------------------------------------------------- | | Path length limits | Maximum 240 characters on Windows ([tests/conftest.py48](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L48-L48)) | | Invalid characters | Sanitizes `<>:\"/\\|?*` characters ([tests/conftest.py50](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L50-L50)) | | Name collisions | Appends 5-byte random hex token ([tests/conftest.py51](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L51-L51)) | | File extension | Always uses `.py` extension ([tests/conftest.py52](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L52-L52)) | **Sources:** [tests/conftest.py46-54](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L46-L54) ### Assertion Rewriting When `rewrite_assertions=True` (default), the fixture uses pytest's `AssertionRewritingHook` to enable detailed assertion failure messages. This hook rewrites Python assert statements at import time to provide better debugging information. **Sources:** [tests/conftest.py91-96](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L91-L96) --- ## Subprocess Code Execution The `subprocess_run_code` fixture provides process-isolated code execution, essential for testing import-time side effects, environment isolation, and subprocess-specific behaviors. ``` ``` **Sources:** [tests/conftest.py105-119](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L105-L119) The fixture creates a temporary `test.py` file and executes it with `subprocess.check_output`, returning the captured stdout as a UTF-8 string. This ensures complete process isolation between test execution and the code being tested. --- ## Schema Generation Monitoring The `generate_schema_calls` fixture tracks how many times schema generation occurs, useful for testing caching behaviors and performance optimizations. ### Call Counter Implementation ``` ``` **Sources:** [tests/conftest.py144-161](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L144-L161) The fixture uses a depth counter to handle recursive `GenerateSchema.generate_schema` calls - only root-level calls increment the counter. This prevents double-counting when schema generation triggers nested schema generation. **Data Structures:** - `CallCounter` dataclass with `count` field and `reset()` method ([tests/conftest.py136-142](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L136-L142)) - `depth` variable tracks recursion level ([tests/conftest.py148](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L148-L148)) **Sources:** [tests/conftest.py136-161](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L136-L161) --- ## JSON Schema Validation The `validate_json_schemas` fixture automatically validates all generated JSON schemas against the Draft 2020-12 specification. This runs for every test unless explicitly disabled. ### Validation Flow ``` ``` **Sources:** [tests/conftest.py163-182](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L163-L182) ### Opting Out of Validation Tests can disable automatic JSON schema validation using the `skip_json_schema_validation` marker: ``` ``` The marker is checked via `request.node.get_closest_marker()` ([tests/conftest.py169](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L169-L169)), and validation is skipped if found. **Sources:** [tests/conftest.py169-177](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L169-L177) --- ## Thread Safety Management The test framework includes sophisticated thread safety detection to prevent race conditions when running tests in parallel with `pytest-run-parallel`. ### Thread-Unsafe Fixtures ``` ```",
  "**Sources:** [tests/conftest.py184-203](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L184-L203) ### Thread-Unsafe Fixture List The following fixtures are marked as thread-unsafe: | Fixture | Reason | | ----------------------- | ---------------------------------------------- | | `generate_schema_calls` | Monkeypatches global Pydantic code | | `benchmark` | Fixture cannot be reused across threads | | `tmp_path` / `tmpdir` | Risk of duplicate path creation | | `copy_method` | Uses `pytest.warns()` which is not thread-safe | | `reset_plugins` | Monkeypatches global state | **Sources:** [tests/conftest.py184-191](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L184-L191) ### Collection Hook Timing The thread safety marker is added in `pytest_itemcollected`, which is critical because: - `pytest-run-parallel` also implements this hook - Pydantic's hook runs before the parallel plugin's hook - Markers must be applied before the parallel plugin analyzes tests - Using later hooks like `pytest_collection_modifyitems` would be too late **Sources:** [tests/conftest.py194-198](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L194-L198) --- ## Test Utility Classes The testing framework provides utility dataclasses for common testing patterns. ### Err Dataclass ``` ``` **Sources:** [tests/conftest.py121-134](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L121-L134) The `Err` dataclass represents expected validation errors in tests: | Field | Type | Purpose | | --------- | ------------- | ----------------------------------- | | `message` | `str` | Expected error message text | | `errors` | `Any \\| None` | Optional detailed error information | **Methods:** - `__repr__()`: Custom string representation ([tests/conftest.py126-130](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L126-L130)) - `message_escaped()`: Returns regex-escaped message for pattern matching ([tests/conftest.py132-133](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L132-L133)) **Sources:** [tests/conftest.py121-134](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L121-L134) ### CallCounter Dataclass ``` ``` **Sources:** [tests/conftest.py136-142](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L136-L142) The `CallCounter` dataclass provides a simple mutable counter: | Field | Type | Default | Purpose | | ------- | ----- | ------- | ------------------------ | | `count` | `int` | `0` | Number of calls recorded | **Methods:** - `reset()`: Resets count to zero ([tests/conftest.py140-141](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L140-L141)) This is used by the `generate_schema_calls` fixture to track schema generation invocations. **Sources:** [tests/conftest.py136-142](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L136-L142) --- ## Summary The Pydantic testing framework provides a comprehensive infrastructure for testing validation logic, schema generation, and type handling: | Component | Purpose | Key Classes/Functions | | -------------------- | -------------------------------------- | ---------------------------------------------------------------------------- | | pytest configuration | Command-line options and session setup | `pytest_addoption`, `disable_error_urls` | | Module creation | Dynamic module import for testing | `create_module`, `_extract_source_code_from_function`, `_create_module_file` | | Subprocess execution | Process-isolated code testing | `subprocess_run_code` | | Schema monitoring | Track schema generation calls | `generate_schema_calls`, `CallCounter` | | JSON validation | Automatic schema validation | `validate_json_schemas`, `Draft202012Validator` | | Thread safety | Parallel test execution safety | `pytest_itemcollected`, `_thread_unsafe_fixtures` | | Utilities | Common test patterns | `Err`, `CallCounter` |",
  "**Sources:** [tests/conftest.py1-203](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/conftest.py#L1-L203) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Testing Framework](#testing-framework.md) - [Purpose and Scope](#purpose-and-scope.md) - [Test Configuration Architecture](#test-configuration-architecture.md) - [Command-Line Options](#command-line-options.md) - [Session-Wide Configuration](#session-wide-configuration.md) - [Test Fixtures](#test-fixtures.md) - [Fixture Catalog](#fixture-catalog.md) - [Dynamic Module Creation](#dynamic-module-creation.md) - [Module Creation Pipeline](#module-creation-pipeline.md) - [Function Source Code Extraction](#function-source-code-extraction.md) - [Module File Creation](#module-file-creation.md) - [Assertion Rewriting](#assertion-rewriting.md) - [Subprocess Code Execution](#subprocess-code-execution.md) - [Schema Generation Monitoring](#schema-generation-monitoring.md) - [Call Counter Implementation](#call-counter-implementation.md) - [JSON Schema Validation](#json-schema-validation.md) - [Validation Flow](#validation-flow.md) - [Opting Out of Validation](#opting-out-of-validation.md) - [Thread Safety Management](#thread-safety-management.md) - [Thread-Unsafe Fixtures](#thread-unsafe-fixtures.md) - [Thread-Unsafe Fixture List](#thread-unsafe-fixture-list.md) - [Collection Hook Timing](#collection-hook-timing.md) - [Test Utility Classes](#test-utility-classes.md) - [Err Dataclass](#err-dataclass.md) - [CallCounter Dataclass](#callcounter-dataclass.md) - [Summary](#summary.md)",
  "CI/CD Pipeline | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # CI/CD Pipeline Relevant source files",
  "- [.github/labels/default\\_pass.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/labels/default_pass.yml) - [.github/labels/first\\_pass.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/labels/first_pass.yml) - [.github/workflows/ci.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml) - [.github/workflows/codspeed.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/codspeed.yml) - [.github/workflows/dependencies-check.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/dependencies-check.yml) - [.github/workflows/docs-update.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml) - [.github/workflows/integration.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/integration.yml) - [.github/workflows/labeler.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/labeler.yml) - [.github/workflows/third-party.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml) - [.github/workflows/update-pydantic-people.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/update-pydantic-people.yml) - [.github/workflows/upload-previews.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/upload-previews.yml) - [build-docs.sh](https://github.com/pydantic/pydantic/blob/76ef0b08/build-docs.sh) This document provides a detailed overview of the Continuous Integration and Continuous Deployment (CI/CD) pipeline used in the Pydantic project. It covers the GitHub Actions workflows, testing strategies, and release processes. For information about the testing framework and approach, see [Testing Framework](pydantic/pydantic/7.1-testing-framework.md). ## Pipeline Overview Pydantic employs a comprehensive CI/CD pipeline implemented with GitHub Actions to ensure code quality, maintain compatibility across different environments, and automate releases. The pipeline consists of multiple workflows that handle different aspects of the development lifecycle. ``` ``` Sources: [.github/workflows/ci.yml3-14](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L3-L14) [.github/workflows/docs-update.yml3-12](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L3-L12) [.github/workflows/third-party.yml11-20](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml#L11-L20) [.github/workflows/dependencies-check.yml3-7](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/dependencies-check.yml#L3-L7) [.github/workflows/integration.yml3-6](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/integration.yml#L3-L6) ## Main CI Workflow The primary CI workflow is defined in `.github/workflows/ci.yml` and consists of multiple jobs that run in parallel to verify different aspects of the codebase. ### Triggering Events The main CI workflow is triggered by the following events: - Pushes to the `main` branch - Any tag pushes (used for releases) - Pull requests ### Jobs Structure ``` ``` Sources: [.github/workflows/ci.yml16-448](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L16-L448) ### Linting and Static Analysis The `lint` job runs a series of checks on the codebase: - Runs on multiple Python versions (3.9 through 3.13) - Uses the pre-commit framework to run linters - Checks code style, formatting, and other quality gates",
  "Sources: [.github/workflows/ci.yml17-40](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L17-L40) [.pre-commit-config.yaml1-32](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml#L1-L32) ### Documentation Build The `docs-build` job: - Builds the documentation using MkDocs - Ensures all documentation is valid and renders correctly - Creates symbolic links for extra modules Sources: [.github/workflows/ci.yml42-66](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L42-L66) [build-docs.sh1-26](https://github.com/pydantic/pydantic/blob/76ef0b08/build-docs.sh#L1-L26) ## Test Matrix The testing strategy employs a comprehensive matrix to ensure Pydantic works correctly across different environments: ``` ``` The test job runs tests: 1. Without optional dependencies 2. With all extra dependencies installed 3. With different configurations on each platform Sources: [.github/workflows/ci.yml84-154](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L84-L154) [Makefile64-67](https://github.com/pydantic/pydantic/blob/76ef0b08/Makefile#L64-L67) ### Memory Testing The `test-memray` job uses the memray profiler to detect memory leaks and inefficient memory usage patterns. Sources: [.github/workflows/ci.yml68-82](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L68-L82) ### Type Checking The CI includes dedicated jobs for mypy integration testing and type checking: - `test-mypy`: Runs the mypy integration tests with different mypy versions - `test-typechecking-integration`: Tests typechecking with both Mypy and Pyright Sources: [.github/workflows/ci.yml182-249](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L182-L249) [Makefile41-62](https://github.com/pydantic/pydantic/blob/76ef0b08/Makefile#L41-L62) ### Coverage Tracking The `coverage-combine` job: - Collects coverage data from all test runs - Combines them into a unified coverage report - Creates both HTML and data files for analysis For pull requests, the `coverage-pr-comment` job posts a comment with coverage information. Sources: [.github/workflows/ci.yml251-316](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L251-L316) [.github/workflows/upload-previews.yml1-37](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/upload-previews.yml#L1-L37) ## Release Process Pydantic uses a tag-based release process that is fully automated through the CI/CD pipeline: ``` ``` The release process consists of the following steps: 1. A tag is pushed that matches the version in `pydantic/version.py` 2. The CI workflow runs all tests and checks 3. If successful, the `release` job builds and publishes the package to PyPI 4. The `send-tweet` job posts a release announcement on Twitter 5. The `docs-update` workflow updates the documentation site Sources: [.github/workflows/ci.yml365-448](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L365-L448) [.github/workflows/docs-update.yml56-113](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L56-L113) ## Additional Workflows ### Third-Party Integration Tests The `third-party.yml` workflow tests Pydantic with popular libraries that depend on it: | Library | Description | | --------------------- | -------------------------------------- | | FastAPI | Web framework based on Pydantic models | | SQLModel | ORM using Pydantic models | | Beanie | MongoDB ODM | | ODMantic | Alternative MongoDB ODM | | Pandera | Data validation for pandas | | OpenAPI Python Client | Client generator | | Polar, BentoML, etc. | Other significant dependencies | This workflow runs on a schedule and can be triggered manually to detect compatibility issues before they affect users.",
  "Sources: [.github/workflows/third-party.yml1-611](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml#L1-L611) ### Dependency Checking The `dependencies-check.yml` workflow: - Identifies first and last versions of dependencies - Tests Pydantic with these versions across Python versions - Ensures compatibility across the supported dependency range Sources: [.github/workflows/dependencies-check.yml1-54](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/dependencies-check.yml#L1-L54) ### Performance Testing The `codspeed.yml` workflow: - Runs benchmarks to measure performance - Reports results to CodSpeed - Helps detect performance regressions Sources: [.github/workflows/codspeed.yml1-81](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/codspeed.yml#L1-L81) ### Family Integration The `integration.yml` workflow tests integration with other Pydantic family libraries: - pydantic-settings - pydantic-extra-types Sources: [.github/workflows/integration.yml1-26](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/integration.yml#L1-L26) [tests/test\\_pydantic\\_extra\\_types.sh1-15](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_pydantic_extra_types.sh#L1-L15) ## Development Workflow Integration The CI/CD pipeline integrates with local development through several mechanisms: ### Makefile Commands The Makefile provides commands that mirror CI checks: | Command | Description | | ---------------- | ------------------------------- | | `make test` | Runs the test suite | | `make testcov` | Runs tests with coverage report | | `make lint` | Runs linting checks | | `make typecheck` | Runs type checking | | `make format` | Auto-formats code | | `make docs` | Builds documentation | | `make all` | Runs the standard CI checks | Sources: [Makefile1-140](https://github.com/pydantic/pydantic/blob/76ef0b08/Makefile#L1-L140) ### Pre-commit Hooks Pre-commit hooks run checks before code is committed: - Prevent direct commits to main branch - Check YAML/TOML syntax - Fix file endings and whitespace - Run linters and type checkers Sources: [.pre-commit-config.yaml1-32](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml#L1-L32) ## Project Specific Customizations ### Testing Environment Variables Several environment variables control test behavior: - `COLUMNS`: Set to 150 for consistent output formatting - `UV_FROZEN`: Ensures dependency freezing with uv - `FORCE_COLOR`: Enables colored test output - `NUM_THREADS`: Controls parallel test execution Sources: [.github/workflows/ci.yml11-14](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L11-L14) [Makefile3](https://github.com/pydantic/pydantic/blob/76ef0b08/Makefile#L3-L3) ### Dependency Management The CI/CD pipeline uses `uv` for Python dependency management: - Fast, deterministic package installation - Supports lockfiles for reproducible environments - Used consistently across all workflows Sources: [.github/workflows/ci.yml27-35](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml#L27-L35) [Makefile14-17](https://github.com/pydantic/pydantic/blob/76ef0b08/Makefile#L14-L17) ## Continuous Documentation Documentation is continuously built and published: 1. For every push to main, a development version is published 2. For releases, the documentation is updated with version aliases 3. The search index is updated for Algolia search integration Sources: [.github/workflows/docs-update.yml56-113](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml#L56-L113) By following this comprehensive approach to CI/CD, Pydantic ensures high code quality, broad compatibility, and a smooth release process, all while maintaining excellent documentation. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [CI/CD Pipeline](#cicd-pipeline.md) - [Pipeline Overview](#pipeline-overview.md) - [Main CI Workflow](#main-ci-workflow.md) - [Triggering Events](#triggering-events.md) - [Jobs Structure](#jobs-structure.md) - [Linting and Static Analysis](#linting-and-static-analysis.md) - [Documentation Build](#documentation-build.md) - [Test Matrix](#test-matrix.md) - [Memory Testing](#memory-testing.md) - [Type Checking](#type-checking.md) - [Coverage Tracking](#coverage-tracking.md) - [Release Process](#release-process.md) - [Additional Workflows](#additional-workflows.md) - [Third-Party Integration Tests](#third-party-integration-tests.md) - [Dependency Checking](#dependency-checking.md) - [Performance Testing](#performance-testing.md) - [Family Integration](#family-integration.md) - [Development Workflow Integration](#development-workflow-integration.md) - [Makefile Commands](#makefile-commands.md) - [Pre-commit Hooks](#pre-commit-hooks.md) - [Project Specific Customizations](#project-specific-customizations.md) - [Testing Environment Variables](#testing-environment-variables.md) - [Dependency Management](#dependency-management.md) - [Continuous Documentation](#continuous-documentation.md)",
  "Generics and Forward References | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Generics and Forward References Relevant source files",
  "- [pydantic/\\_internal/\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py) - [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py) - [pydantic/\\_internal/\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generics.py) - [pydantic/\\_internal/\\_typing\\_extra.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_typing_extra.py) - [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py) - [pydantic/generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/generics.py) - [tests/test\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py) - [tests/test\\_forward\\_ref.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_forward_ref.py) - [tests/test\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_generics.py) - [tests/test\\_typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_typing.py) This page documents Pydantic's implementation of generic models and forward references, which are advanced typing features that enhance model reusability and enable self-referential data structures. These features are essential parts of Pydantic's type system, complementing the fundamental types covered in [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) and [Network Types](pydantic/pydantic/3.2-network-types.md). ## Generic Models Generic models in Pydantic allow you to create model templates that can be parameterized with different types, similar to how generic classes work in languages like Java or C#. This enables type-safe reuse of model structures across different data types. ### Basic Usage To create a generic model, inherit from both `BaseModel` and `Generic[T]` (where `T` is a type variable): ``` ``` When you parameterize a generic model with a specific type (e.g., `Container[int]`), Pydantic creates a specialized model class with validation specifically for that type. ``` ``` Sources: - `tests/test_generics.py:83-92` - `tests/test_generics.py:580-648` ### Implementation Mechanics When you parameterize a generic model like `Container[int]`, several key processes occur: 1. **Type Substitution**: All occurrences of the type variable `T` in the model are replaced with the concrete type `int` 2. **Class Creation**: A new subclass of the original model is created with the concrete types 3. **Caching**: The created class is cached to ensure the same parameterization returns the same class ``` ``` Sources: - `pydantic/_internal/_generics.py:106-150` - `pydantic/_internal/_generics.py:246-340` - `pydantic/_internal/_generics.py:439-547` ### Type Substitution in Depth The `replace_types` function recursively traverses type annotations and substitutes type variables with concrete types: ``` ``` This handles complex nested types like `List[Dict[str, T]]` → `List[Dict[str, int]]` when substituting `T` with `int`. Sources: - `pydantic/_internal/_generics.py:178-195` - `pydantic/_internal/_generics.py:246-340` ### Caching System Pydantic employs a sophisticated caching mechanism to ensure that: 1. The same parameterization of a generic model returns the same class 2. Memory usage is optimized by using weak references 3. The system can handle recursive generic types ``` ``` The caching system uses a two-stage lookup to optimize performance: 1. An \"early\" cache key for quick lookups 2. A \"late\" cache key that handles more complex equivalence relationships Sources: - `pydantic/_internal/_generics.py:42-57` - `pydantic/_internal/_generics.py:97-97` - `pydantic/_internal/_generics.py:439-547` - `tests/test_generics.py:352-456` ## Forward References",
  "Forward references allow referencing types that haven't been fully defined yet, which is essential for recursive models and handling circular dependencies. ### Basic Usage In Python, forward references are typically written as string literals: ``` ``` This creates a recursive data structure where a `Person` can have a list of `Person` objects as friends. ``` ``` Sources: - `tests/test_forward_ref.py:128-166` - `tests/test_forward_ref.py:261-289` ### Forward Reference Resolution When Pydantic encounters a string annotation, it: 1. Records the original string annotation 2. Marks the field as incomplete (`_complete = False`) 3. Attempts to resolve the reference when needed The resolution process happens: - **Automatically** during validation if a model has unresolved references - **Explicitly** when calling `Model.model_rebuild()` ``` ``` Sources: - `pydantic/_internal/_fields.py:78-282` - `pydantic/_internal/_fields.py:300-337` - `tests/test_forward_ref.py:42-75` ### Type Evaluation Pydantic evaluates string annotations by: 1. Using the `eval_type` function to convert the string to a type object 2. Searching for the referenced type in appropriate namespaces 3. Handling failure gracefully if a type can't be resolved immediately ``` ``` Sources: - `pydantic/_internal/_typing_extra.py:290-457` - `pydantic/_internal/_typing_extra.py:209-271` ### Recursive Models and Circular Dependencies Pydantic efficiently handles recursive models (like trees or graphs) and circular dependencies between models by: 1. Detecting recursion during schema generation 2. Using special schema references to avoid infinite recursion 3. Auto-rebuilding models as necessary to resolve circular dependencies ``` ``` Sources: - `tests/test_forward_ref.py:111-166` - `tests/test_forward_ref.py:205-260` - `tests/test_forward_ref.py:261-411` - `tests/test_forward_ref.py:697-714` ## Combining Generics and Forward References ### Generic Models with Forward References Combining generics and forward references enables powerful type patterns: ``` ``` When this forward reference is resolved, the type variable `T` is correctly substituted with the concrete type. ``` ``` Sources: - `tests/test_generics.py:664-794` - `pydantic/_internal/_fields.py:327-328` - `pydantic/_internal/_generics.py:396-437` ### Handling Recursive Generic Types For recursive generic types, Pydantic implements special handling to prevent infinite recursion: ``` ``` This allows for properly handling complex structures like trees where nodes can contain other nodes of the same type. Sources: - `pydantic/_internal/_generics.py:396-437` - `tests/test_generics.py:458-486` ## Advanced Usage Patterns ### Bounded Type Variables You can restrict the allowed types by using bounded type variables: ``` ``` This ensures that only types compatible with the bound can be used as parameters. Sources: - `tests/test_generics.py:881-912` ### Default Type Arguments Generic models can have default type arguments using Python 3.12+ syntax: ``` ``` This allows users to only specify some type arguments while others default to predefined types. Sources: - `tests/test_generics.py:297-349` ### Partial Specialization You can partially specialize a generic model with multiple type variables: ``` ``` Partial specialization allows for creating intermediate template models. Sources: - `tests/test_generics.py:797-878` ## Implementation Details ### Generic Model Creation Internals When a generic model is parameterized, the `create_generic_submodel` function creates a new subclass: ``` ``` The created model contains metadata about its generic origin, arguments, and parameters to support further operations. Sources: - `pydantic/_internal/_generics.py:100-150` - `pydantic/_internal/_generics.py:343-393` ### Forward Reference Handling Internals The handling of forward references is primarily implemented in the `_fields.py` and `_typing_extra.py` modules: ``` ``` The resolution process uses Python's introspection capabilities to find the right namespace context for evaluating the string annotations. Sources: - `pydantic/_internal/_fields.py:78-167` - `pydantic/_internal/_fields.py:300-337` - `pydantic/_internal/_typing_extra.py:290-464` ## Conclusion Generics and forward references are powerful features in Pydantic that enable complex type patterns while maintaining type safety. They allow for: 1. Creating reusable model templates with generics 2. Building recursive data structures with forward references 3. Combining both to create sophisticated type systems",
  "Understanding these features is essential for advanced Pydantic usage, especially when building models with complex relationships or when creating reusable model libraries. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Generics and Forward References](#generics-and-forward-references.md) - [Generic Models](#generic-models.md) - [Basic Usage](#basic-usage.md) - [Implementation Mechanics](#implementation-mechanics.md) - [Type Substitution in Depth](#type-substitution-in-depth.md) - [Caching System](#caching-system.md) - [Forward References](#forward-references.md) - [Basic Usage](#basic-usage-1.md) - [Forward Reference Resolution](#forward-reference-resolution.md) - [Type Evaluation](#type-evaluation.md) - [Recursive Models and Circular Dependencies](#recursive-models-and-circular-dependencies.md) - [Combining Generics and Forward References](#combining-generics-and-forward-references.md) - [Generic Models with Forward References](#generic-models-with-forward-references.md) - [Handling Recursive Generic Types](#handling-recursive-generic-types.md) - [Advanced Usage Patterns](#advanced-usage-patterns.md) - [Bounded Type Variables](#bounded-type-variables.md) - [Default Type Arguments](#default-type-arguments.md) - [Partial Specialization](#partial-specialization.md) - [Implementation Details](#implementation-details.md) - [Generic Model Creation Internals](#generic-model-creation-internals.md) - [Forward Reference Handling Internals](#forward-reference-handling-internals.md) - [Conclusion](#conclusion.md)",
  "V1 to V2 Migration | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # V1 to V2 Migration Relevant source files",
  "- [.pre-commit-config.yaml](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml) - [docs/concepts/config.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md) - [docs/concepts/dataclasses.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md) - [docs/concepts/json.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json.md) - [docs/concepts/json\\_schema.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md) - [docs/concepts/models.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md) - [docs/concepts/performance.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md) - [docs/concepts/serialization.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md) - [docs/concepts/validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md) - [docs/contributing.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md) - [docs/examples/custom\\_validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/examples/custom_validators.md) - [docs/integrations/aws\\_lambda.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/aws_lambda.md) - [docs/integrations/llms.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/llms.md) - [docs/migration.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md) - [release/README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/release/README.md) This document provides a comprehensive guide for migrating Pydantic code from V1 to V2. It covers breaking changes, API modifications, and migration strategies. For specific documentation on V2 features like validators, serializers, or model configuration, see the respective pages in sections 2-4 of this wiki. ## Overview and Installation ### Installing Pydantic V2 Pydantic V2 is the current production release and can be installed from PyPI: ``` ``` For users who need to continue using V1 features, the V1 API is accessible through the `pydantic.v1` namespace when using Pydantic V2. Alternatively, Pydantic V1 can be installed directly with `pip install \"pydantic==1.*\"`. Sources: [docs/migration.md10-76](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L10-L76) ### Migration Tool: bump-pydantic The `bump-pydantic` tool automates much of the migration process: ``` ``` This tool handles common migration patterns including method renames, config updates, and validator syntax changes. Use the `--dry-run` flag to preview changes without modifying files. Sources: [docs/migration.md25-47](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L25-L47) ``` ``` **Migration Workflow with bump-pydantic Tool** Sources: [docs/migration.md25-47](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L25-L47) ## BaseModel API Changes ### Method Name Changes Pydantic V2 standardizes method naming with `model_*` and `__*pydantic*__` patterns. Deprecated V1 method names remain available but emit deprecation warnings.",
  "| Pydantic V1 | Pydantic V2 | Purpose | | ------------------------ | ------------------------ | -------------------------------------------------- | | `__fields__` | `model_fields` | Field definitions | | `__private_attributes__` | `__pydantic_private__` | Private attributes | | `__validators__` | `__pydantic_validator__` | Validator functions | | `construct()` | `model_construct()` | Create without validation | | `copy()` | `model_copy()` | Copy model instance | | `dict()` | `model_dump()` | Serialize to dictionary | | `json_schema()` | `model_json_schema()` | Generate JSON schema | | `json()` | `model_dump_json()` | Serialize to JSON string | | `parse_obj()` | `model_validate()` | Validate Python object | | `parse_raw()` | Deprecated | Use `model_validate_json()` | | `parse_file()` | Deprecated | Load data then validate | | `from_orm()` | Deprecated | Use `model_validate()` with `from_attributes=True` | | `update_forward_refs()` | `model_rebuild()` | Rebuild schema | Sources: [docs/migration.md129-149](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L129-L149) ### Equality Behavior Changes In V2, model equality checking has stricter rules: - Models can only equal other `BaseModel` instances - Both instances must have the same type (or non-parametrized generic origin) - Field values, extra values, and private attribute values must all match - Models are no longer equal to dictionaries containing their data Sources: [docs/migration.md152-162](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L152-L162) ### RootModel Replaces `__root__` The `__root__` field pattern for custom root models has been replaced with the `RootModel` class: ``` ``` `RootModel` types do not support `arbitrary_types_allowed` configuration. Sources: [docs/migration.md163-166](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L163-L166) [docs/concepts/models.md1-100](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md#L1-L100) ``` ``` **BaseModel Method Migration Mapping** Sources: [docs/migration.md135-146](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L135-L146) ## Field and Configuration Changes ### Field Function Updates Several `Field()` parameters have been removed or renamed: | V1 Parameter | V2 Replacement | Notes | | ---------------- | ------------------ | ------------------------------------ | | `const` | Removed | Use `Literal` type instead | | `min_items` | `min_length` | Renamed for consistency | | `max_items` | `max_length` | Renamed for consistency | | `unique_items` | Removed | | | `allow_mutation` | `frozen` | Inverse logic | | `regex` | `pattern` | Renamed | | `final` | Use `typing.Final` | Type hint instead of field parameter | Field constraints no longer automatically propagate to generic type parameters. Use `Annotated` for item-level validation: ``` ``` The `alias` property now returns `None` when no alias is set (V1 returned the field name). Sources: [docs/migration.md275-294](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L275-L294) ### Model Configuration Migration V2 introduces `model_config` with `ConfigDict` replacing the V1 `Config` class: ``` ``` Configuration can also be specified as class arguments for better type checking: ``` ``` Sources: [docs/migration.md319-329](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L319-L329) [docs/concepts/config.md9-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md#L9-L50) ### Configuration Options Removed/Renamed **Removed Options:**",
  "- `allow_mutation` → use `frozen` (inverse logic) - `error_msg_templates` - `fields` → use `Annotated` for field modifications - `getter_dict` → removed with `orm_mode` - `smart_union` → default behavior in V2 - `underscore_attrs_are_private` → always `True` in V2 - `json_loads`, `json_dumps` - `copy_on_model_validation` - `post_init_call` **Renamed Options:** | V1 Name | V2 Name | | -------------------------------- | ------------------------------------------------- | | `allow_population_by_field_name` | `populate_by_name` or `validate_by_name` (v2.11+) | | `anystr_lower` | `str_to_lower` | | `anystr_strip_whitespace` | `str_strip_whitespace` | | `anystr_upper` | `str_to_upper` | | `keep_untouched` | `ignored_types` | | `max_anystr_length` | `str_max_length` | | `min_anystr_length` | `str_min_length` | | `orm_mode` | `from_attributes` | | `schema_extra` | `json_schema_extra` | | `validate_all` | `validate_default` | Sources: [docs/migration.md330-356](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L330-L356) ``` ``` **Configuration Migration Pattern** Sources: [docs/migration.md319-356](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L319-L356) ## Validator and Serializer Changes ### Decorator Migration V2 introduces new validator and serializer decorators with enhanced functionality: **Validator Migration:** | V1 | V2 | Key Changes | | ----------------- | ------------------ | --------------------------------------------------- | | `@validator` | `@field_validator` | No `each_item` parameter; use `Annotated` for items | | `@root_validator` | `@model_validator` | May receive model instance instead of dict | The `@field_validator` decorator requires explicit mode specification and uses different argument patterns: ``` ``` Sources: [docs/migration.md360-434](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L360-L434) [docs/concepts/validators.md29-463](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md#L29-L463) ### Validator Argument Changes V2 validators no longer accept `field` and `config` keyword arguments. Use `ValidationInfo` instead: - `config` → `info.config` (now a dict, not a class) - `field` → `cls.model_fields[info.field_name]` (no longer `ModelField` object) The `allow_reuse` keyword argument is no longer needed due to improved reuse detection. Sources: [docs/migration.md404-488](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L404-L488) ### TypeError Handling In V1, `TypeError` raised in validators was converted to `ValidationError`. In V2, `TypeError` is raised directly: ``` ``` Sources: [docs/migration.md436-464](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L436-L464) ### Serializer Introduction V2 adds `@field_serializer` and `@model_serializer` decorators for custom serialization, replacing the deprecated `json_encoders` config option: ``` ``` Sources: [docs/migration.md167-175](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L167-L175) [docs/concepts/serialization.md218-420](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md#L218-L420) ``` ``` **Validator Decorator Migration** Sources: [docs/migration.md360-434](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L360-L434) [docs/concepts/validators.md29-463](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md#L29-L463) ## Dataclass Changes ### Initialization and Validation In V2, the `__post_init__` method is called *after* validation rather than before. The `__post_init_post_parse__` method has been removed as it's now redundant.",
  "Pydantic dataclasses no longer support `extra='allow'` with attribute storage. Only `extra='ignore'` is supported for ignoring unexpected fields. Sources: [docs/migration.md295-307](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L295-L307) ### Schema Access Changes Pydantic dataclasses no longer have a `__pydantic_model__` attribute. To access validation and schema functionality, wrap the dataclass with `TypeAdapter`: ``` ``` Sources: [docs/migration.md307-317](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L307-L317) [docs/concepts/dataclasses.md1-80](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md#L1-L80) ### Configuration Inheritance In V1, vanilla dataclasses used as fields would inherit the parent type's config. In V2, this no longer occurs. Use the `config` parameter on the `@dataclass` decorator to override configuration: ``` ``` Sources: [docs/migration.md313-318](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L313-L318) [docs/concepts/dataclasses.md85-118](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md#L85-L118) ## Type System Changes ### GenericModel Removal `pydantic.generics.GenericModel` has been removed. Create generic models by inheriting directly from `BaseModel` and `Generic`: ``` ``` Avoid using parametrized generics in `isinstance()` checks. For such checks, create concrete subclasses: ``` ``` Sources: [docs/migration.md255-273](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L255-L273) ### Input Type Preservation V1 attempted to preserve input types for generic collections (e.g., `Counter` → `Counter`). V2 only guarantees output types match annotations, typically converting to standard types: ``` ``` To preserve input types, use a custom validator with `WrapValidator`: ``` ``` V2 preserves types for `BaseModel` subclasses and dataclasses. Sources: [docs/migration.md498-611](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L498-L611) ### Union Type Behavior V2 preserves input types when they match a union member, even if another type would also validate: ``` ``` To revert to V1's left-to-right behavior, use `Field(union_mode='left_to_right')`. Sources: [docs/migration.md620-644](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L620-L644) ### Required vs Optional Fields V2 aligns with dataclasses behavior for `Optional` fields: | Pattern | V1 Behavior | V2 Behavior | | ------------------------- | -------------------------- | ------------------------------------- | | `f: str` | Required, cannot be None | Same | | `f: str = 'default'` | Optional, cannot be None | Same | | `f: Optional[str]` | Optional, defaults to None | **Required**, can be None | | `f: Optional[str] = None` | Optional, defaults to None | Same | | `f: Any` | Optional, defaults to None | **Required**, can be None or any type | | `f: Any = None` | Optional, defaults to None | Same | **Breaking Change:** `Optional[T]` fields are now required by default unless a default value is provided. Sources: [docs/migration.md645-694](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L645-L694) ### Float to Integer Coercion V2 only allows float-to-int coercion when the decimal part is zero: ``` ``` Sources: [docs/migration.md708-733](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L708-L733) ### Regex Engine Change V2 uses Rust's regex engine instead of Python's, providing linear-time matching but without lookarounds and backreferences. Use `regex_engine` config to revert to Python's engine if needed: ``` ``` Sources: [docs/migration.md696-706](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L696-L706) ``` ```",
  "**Key Type System Behavior Changes** Sources: [docs/migration.md613-733](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L613-L733) ## TypeAdapter Introduction V2 introduces `TypeAdapter` for validating and serializing arbitrary types outside `BaseModel`. This replaces V1's `parse_obj_as` and `schema_of` functions: ``` ``` `TypeAdapter` provides methods for: - `validate_python()` - Validate Python objects - `validate_json()` - Validate JSON strings - `dump_python()` - Serialize to Python objects - `dump_json()` - Serialize to JSON strings - `json_schema()` - Generate JSON schema For proper typing with generic parameters, specify the type explicitly: ``` ``` Sources: [docs/migration.md735-768](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L735-L768) [docs/concepts/type\\_adapter.md1-100](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/type_adapter.md#L1-L100) ## Custom Types and Schema Generation ### Custom Type Hooks V2 completely overhauls custom type definition: | V1 Method | V2 Replacement | | -------------------- | ------------------------------ | | `__get_validators__` | `__get_pydantic_core_schema__` | | `__modify_schema__` | `__get_pydantic_json_schema__` | These hooks can also be provided via `Annotated` metadata rather than modifying the type directly: ``` ``` Sources: [docs/migration.md769-791](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L769-L791) [docs/concepts/types.md1-100](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/types.md#L1-L100) ### JSON Schema Generation V2 introduces `GenerateJsonSchema` class for customizable JSON schema generation: **Key Changes:** - Default target is JSON Schema Draft 2020-12 (was Draft 7 in V1) - `Optional` fields now indicate `null` is allowed - `Decimal` serialized as string (was number in V1) - Namedtuples no longer preserved in schema - Schema mode can be `'validation'` or `'serialization'` Customize schema generation by subclassing `GenerateJsonSchema`: ``` ``` Sources: [docs/migration.md793-824](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L793-L824) [docs/concepts/json\\_schema.md1-100](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md#L1-L100) ## Relocated and Removed Features ### BaseSettings Migration `BaseSettings` has moved to the separate `pydantic-settings` package: ``` ``` ``` ``` The `parse_env_var` classmethod has been removed. Use customized settings sources instead. Sources: [docs/migration.md825-834](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L825-L834) ### Moved to pydantic-extra-types The following types have moved to `pydantic-extra-types`: - Color types (Color, etc.) - Payment card numbers (PaymentCardNumber, etc.) Install with: ``` ``` Sources: [docs/migration.md835-843](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L835-L843) ### URL and DSN Types `AnyUrl` and related URL/DSN types no longer inherit from `str` in V2. They are built on `Url` and `MultiHostUrl` classes using `Annotated`. To use as strings, call `str(url)` explicitly: ``` ``` Sources: [docs/migration.md844-851](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L844-L851) ``` ``` **Package Reorganization in V2** Sources: [docs/migration.md825-851](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L825-L851) ## Function Validation The `@validate_arguments` decorator has been renamed to `@validate_call`: ``` ``` V1's validator function attributes (`raw_function`, `validate`) are no longer available in V2.",
  "Sources: [docs/migration.md489-497](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L489-L497) ## Migration Checklist ``` ``` **Recommended Migration Process** Sources: [docs/migration.md1-851](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L1-L851) ### Key Migration Steps 1. **Install Tools**: Install `bump-pydantic` and run it on your codebase 2. **Update BaseModel Methods**: Replace deprecated method names with V2 equivalents 3. **Migrate Configuration**: Convert `Config` classes to `model_config` with `ConfigDict` 4. **Update Validators**: Replace `@validator` and `@root_validator` with new decorators 5. **Fix Field Definitions**: Update field parameters and use `Annotated` for constraints 6. **Review Type Behavior**: Test Optional fields, unions, and numeric coercion 7. **Update Dataclasses**: Replace `__pydantic_model__` usage with `TypeAdapter` 8. **Migrate Custom Types**: Implement `__get_pydantic_core_schema__` hooks 9. **Test Thoroughly**: Run comprehensive tests and type checking Sources: [docs/migration.md1-851](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L1-L851) [docs/contributing.md1-272](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md#L1-L272) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [V1 to V2 Migration](#v1-to-v2-migration.md) - [Overview and Installation](#overview-and-installation.md) - [Installing Pydantic V2](#installing-pydantic-v2.md) - [Migration Tool: bump-pydantic](#migration-tool-bump-pydantic.md) - [BaseModel API Changes](#basemodel-api-changes.md) - [Method Name Changes](#method-name-changes.md) - [Equality Behavior Changes](#equality-behavior-changes.md) - [RootModel Replaces \\`\\_\\_root\\_\\_\\`](#rootmodel-replaces-__root__.md) - [Field and Configuration Changes](#field-and-configuration-changes.md) - [Field Function Updates](#field-function-updates.md) - [Model Configuration Migration](#model-configuration-migration.md) - [Configuration Options Removed/Renamed](#configuration-options-removedrenamed.md) - [Validator and Serializer Changes](#validator-and-serializer-changes.md) - [Decorator Migration](#decorator-migration.md) - [Validator Argument Changes](#validator-argument-changes.md) - [TypeError Handling](#typeerror-handling.md) - [Serializer Introduction](#serializer-introduction.md) - [Dataclass Changes](#dataclass-changes.md) - [Initialization and Validation](#initialization-and-validation.md) - [Schema Access Changes](#schema-access-changes.md) - [Configuration Inheritance](#configuration-inheritance.md) - [Type System Changes](#type-system-changes.md) - [GenericModel Removal](#genericmodel-removal.md) - [Input Type Preservation](#input-type-preservation.md) - [Union Type Behavior](#union-type-behavior.md) - [Required vs Optional Fields](#required-vs-optional-fields.md) - [Float to Integer Coercion](#float-to-integer-coercion.md) - [Regex Engine Change](#regex-engine-change.md) - [TypeAdapter Introduction](#typeadapter-introduction.md) - [Custom Types and Schema Generation](#custom-types-and-schema-generation.md) - [Custom Type Hooks](#custom-type-hooks.md) - [JSON Schema Generation](#json-schema-generation.md) - [Relocated and Removed Features](#relocated-and-removed-features.md) - [BaseSettings Migration](#basesettings-migration.md) - [Moved to pydantic-extra-types](#moved-to-pydantic-extra-types.md) - [URL and DSN Types](#url-and-dsn-types.md) - [Function Validation](#function-validation.md) - [Migration Checklist](#migration-checklist.md) - [Key Migration Steps](#key-migration-steps.md)",
  "Core Model System | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Core Model System Relevant source files - [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) - [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) - [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) - [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) - [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py) ## Purpose and Scope",
  "This document covers the foundational model system that powers Pydantic's validation and serialization capabilities. The Core Model System encompasses `BaseModel` (the base class for all Pydantic models), the metaclass-based model construction pipeline, field collection and management, and the model lifecycle from instantiation through validation to serialization. For information about specific field types and constraints, see [Type System](pydantic/pydantic/3-type-system.md). For details on validators and serializers that customize the data transformation pipeline, see [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md). For schema generation internals, see [Schema Generation](pydantic/pydantic/5-schema-generation.md). --- ## System Overview The Core Model System is built on three foundational components that work together to provide Pydantic's declarative validation framework: **BaseModel Class Hierarchy** ``` ``` Sources: [pydantic/main.py118-239](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L239) [pydantic/\\_internal/\\_model\\_construction.py79-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L277) --- ## BaseModel Class `BaseModel` is the foundational class that all Pydantic models inherit from. It provides the core validation, serialization, and model management capabilities. ### Class Attributes The `BaseModel` class maintains several class-level attributes that define model structure and behavior: | Attribute | Type | Purpose | | ------------------------------ | --------------------------------------------- | --------------------------------------------------- | | `model_config` | `ConfigDict` | Configuration dictionary controlling model behavior | | `__pydantic_fields__` | `dict[str, FieldInfo]` | Field definitions and metadata | | `__pydantic_computed_fields__` | `dict[str, ComputedFieldInfo]` | Computed field definitions | | `__pydantic_decorators__` | `DecoratorInfos` | Collected validators and serializers | | `__pydantic_validator__` | `SchemaValidator \\| PluggableSchemaValidator` | pydantic-core validator instance | | `__pydantic_serializer__` | `SchemaSerializer` | pydantic-core serializer instance | | `__pydantic_core_schema__` | `CoreSchema` | Generated validation schema | | `__private_attributes__` | `dict[str, ModelPrivateAttr]` | Private attribute definitions | | `__class_vars__` | `set[str]` | Names of class variables | Sources: [pydantic/main.py151-219](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L151-L219) ### Instance Attributes Each `BaseModel` instance maintains these attributes: | Attribute | Type | Purpose | | ------------------------- | ------------------------ | ---------------------------------------------------- | | `__dict__` | `dict[str, Any]` | Field values | | `__pydantic_fields_set__` | `set[str]` | Names of fields explicitly set during initialization | | `__pydantic_extra__` | `dict[str, Any] \\| None` | Extra fields (when `extra='allow'`) | | `__pydantic_private__` | `dict[str, Any] \\| None` | Private attribute values | Sources: [pydantic/main.py211-218](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L218) ### Core Methods **BaseModel Method Mapping** ``` ``` Sources: [pydantic/main.py240-782](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L782) #### Initialization: `__init__` The `__init__` method validates input data and creates a model instance: ``` ``` - Takes keyword arguments as input data - Delegates to `__pydantic_validator__.validate_python()` - Returns `self` after validation - Raises `ValidationError` if validation fails Sources: [pydantic/main.py240-260](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L260) #### Construction Without Validation: `model_construct` `model_construct` creates instances from trusted data without validation: ``` ```",
  "- Respects `model_config.extra` setting - Handles field aliases (both `alias` and `validation_alias`) - Applies default values for missing fields - Useful for creating instances from database records or API responses - Calls `model_post_init()` if defined Sources: [pydantic/main.py304-382](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L304-L382) #### Validation Methods Three validation methods handle different input formats: | Method | Input Type | Use Case | | -------------------------------- | -------------------------------------- | ------------------------------- | | `model_validate(obj)` | Python objects (dict, model instances) | General validation | | `model_validate_json(json_data)` | JSON strings/bytes | API request parsing | | `model_validate_strings(obj)` | String-valued dictionaries | URL query parameters, form data | All support common parameters: `strict`, `extra`, `from_attributes`, `context`, `by_alias`, `by_name`. Sources: [pydantic/main.py652-781](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L652-L781) #### Serialization Methods | Method | Output Format | Parameters | | --------------------------- | ------------- | ------------------------------------------------------------------------- | | `model_dump(mode='python')` | Python dict | `include`, `exclude`, `exclude_unset`, `exclude_defaults`, `exclude_none` | | `model_dump_json()` | JSON string | Same as `model_dump` plus `indent`, `ensure_ascii` | Both methods delegate to `__pydantic_serializer__` with configurable filtering and formatting options. Sources: [pydantic/main.py418-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L534) --- ## Model Construction Pipeline The model construction process is orchestrated by `ModelMetaclass`, which transforms a class definition into a fully-functional Pydantic model. ### ModelMetaclass Pipeline ``` ``` Sources: [pydantic/\\_internal/\\_model\\_construction.py80-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L277) ### Namespace Inspection The `inspect_namespace` function processes the class namespace to identify and categorize attributes: **Namespace Inspection Flow** ``` ``` Sources: [pydantic/\\_internal/\\_model\\_construction.py384-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L384-L518) ### Field Collection The `collect_model_fields` function (in `_internal/_fields.py`) processes type annotations to build the field dictionary: 1. **Gather annotations** from the class and its bases 2. **Resolve forward references** using the namespace resolver 3. **Create FieldInfo instances** via `FieldInfo.from_annotation()` or `FieldInfo.from_annotated_attribute()` 4. **Apply type variable substitutions** for generic models 5. **Identify class variables** (annotated with `ClassVar`) 6. **Validate field names** (no leading underscores except for private attrs) Sources: [pydantic/\\_internal/\\_fields.py84-223](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L84-L223) ### Schema Building and Completion The `complete_model_class` function finalizes the model by: 1. Generating the core schema via `GenerateSchema` 2. Creating the `SchemaValidator` from the core schema 3. Creating the `SchemaSerializer` from the core schema 4. Generating the `__signature__` for `__init__` 5. Setting up computed fields 6. Configuring `__setattr__` handlers **Schema and Validator Creation** ``` ``` Sources: [pydantic/\\_internal/\\_model\\_construction.py580-678](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L580-L678) --- ## Model Lifecycle A model instance progresses through several stages from creation to serialization. ### Initialization Flow ``` ``` Sources: [pydantic/main.py240-260](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L260) [pydantic/\\_internal/\\_model\\_construction.py354-370](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L354-L370) ### Attribute Access and Assignment",
  "`BaseModel` customizes attribute access through `__setattr__` and `__delattr__`: **Setattr Handler Selection** The model maintains `__pydantic_setattr_handlers__` mapping field names to handler functions: | Handler Type | Condition | Action | | ----------------------- | ----------------------------------- | ------------------------------------------------------------------ | | `'model_field'` | Regular field, no validation | Set `__dict__[name] = val` and add to `__pydantic_fields_set__` | | `'validate_assignment'` | `validate_assignment=True` | Call `__pydantic_validator__.validate_assignment(self, name, val)` | | `'private'` | Private attribute (starts with `_`) | Set in `__pydantic_private__` dict | | `'cached_property'` | `functools.cached_property` | Set in `__dict__` directly | | `'extra_known'` | Extra field (when `extra='allow'`) | Use `object.__setattr__` | The handler is selected and memoized in `__pydantic_setattr_handlers__` for performance. Sources: [pydantic/main.py837-933](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L837-L933) [pydantic/main.py94-115](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L94-L115) ### Private Attributes Private attributes (prefixed with `_`) are stored separately in `__pydantic_private__` and are not validated or serialized: **Private Attribute Handling** ``` ``` Sources: [pydantic/\\_internal/\\_model\\_construction.py354-370](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L354-L370) [pydantic/main.py994-1019](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L994-L1019) Private attributes support: - Default values via `PrivateAttr(default=...)` - Factory functions via `PrivateAttr(default_factory=...)` - Descriptors implementing `__get__`, `__set__`, `__delete__` - Type annotations without assignments Sources: [pydantic/fields.py1128-1237](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L1128-L1237) --- ## Configuration System Model behavior is controlled through `model_config`, a `ConfigDict` instance. ### Configuration Inheritance Configuration is inherited and merged through the model hierarchy: **Config Wrapper Creation** ``` ``` Sources: [pydantic/\\_internal/\\_config.py71-121](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L71-L121) ### Key Configuration Options | Option | Default | Effect on Model Construction | | ---------------------- | ------------- | --------------------------------------------------------------------------- | | `strict` | `False` | Enables strict validation mode | | `extra` | `'ignore'` | Controls handling of extra fields: `'allow'`, `'ignore'`, `'forbid'` | | `frozen` | `False` | Makes instances immutable; raises `ValidationError` on attribute assignment | | `validate_assignment` | `False` | Validates field values on attribute assignment | | `validate_default` | `False` | Validates default values during model construction | | `from_attributes` | `False` | Allows populating fields from object attributes (for ORM integration) | | `defer_build` | `False` | Delays schema building until first use | | `protected_namespaces` | `('model_',)` | Warns about field names conflicting with these prefixes | Sources: [pydantic/config.py31-286](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L31-L286) --- ## Model Field Management ### FieldInfo Structure Each field is represented by a `FieldInfo` instance containing:",
  "| Attribute | Purpose | | --------------------- | -------------------------------------------------- | | `annotation` | The field's type annotation | | `default` | Default value (if not required) | | `default_factory` | Callable to generate default value | | `alias` | Alternative name for serialization | | `validation_alias` | Alternative name(s) for validation input | | `serialization_alias` | Alternative name for serialization output | | `title` | Field title for JSON schema | | `description` | Field description for JSON schema | | `metadata` | List of metadata objects (constraints, validators) | | `frozen` | Whether field is immutable | | `validate_default` | Whether to validate the default value | Sources: [pydantic/fields.py98-265](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L98-L265) ### Field Creation Methods `FieldInfo` instances are created through three factory methods: **FieldInfo Factory Methods** ``` ``` Sources: [pydantic/fields.py295-521](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L295-L521) 1. **`from_annotation(annotation)`**: For bare type annotations without default values 2. **`from_annotated_attribute(annotation, default)`**: For annotations with assigned values 3. **`_construct(metadata, **attr_overrides)`**: Merges multiple `FieldInfo` instances from `Annotated` metadata ### Field Metadata Collection The `_collect_metadata` method transforms Field arguments into metadata objects: | Argument | Metadata Type | | -------------------------------- | -------------------------------------- | | `gt`, `ge`, `lt`, `le` | `annotated_types.Gt`, `Ge`, `Lt`, `Le` | | `multiple_of` | `annotated_types.MultipleOf` | | `min_length`, `max_length` | `annotated_types.MinLen`, `MaxLen` | | `strict` | `types.Strict` | | `pattern`, `allow_inf_nan`, etc. | `PydanticGeneralMetadata` | Sources: [pydantic/fields.py622-649](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L622-L649) --- ## Advanced Topics ### Model Rebuilding The `model_rebuild()` method regenerates the schema and validator when forward references couldn't be resolved during initial construction: ``` ``` Process: 1. Check if model is already complete (skip if `force=False`) 2. Delete existing schema/validator/serializer 3. Resolve parent namespace 4. Call `complete_model_class()` again with namespace resolver Sources: [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) ### Dynamic Model Creation The `create_model` function creates model classes programmatically: ``` ``` The function: 1. Creates a new namespace dict 2. Processes field definitions into `FieldInfo` objects 3. Calls `ModelMetaclass.__new__` to construct the class 4. Optionally sets `__module__` for proper pickle support Sources: [pydantic/main.py1367-1533](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1367-L1533) ### Frozen Models and Hashing When `frozen=True`, the metaclass automatically generates a `__hash__` method: **Hash Function Generation** ``` ``` The hash function: - Uses `operator.itemgetter` to extract field values - Hashes only the model fields (not extras or private attrs) - Handles missing keys gracefully via `SafeGetItemProxy` Sources: [pydantic/\\_internal/\\_model\\_construction.py521-547](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L521-L547) --- ## Key Implementation Details ### Mock Validators and Serializers Before schema building completes, models use mock validators/serializers that raise helpful errors: ``` ``` This prevents instantiation of incomplete models and provides clear error messages.",
  "Sources: [pydantic/main.py220-236](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L220-L236) [pydantic/\\_internal/\\_mock\\_val\\_ser.py1-100](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_mock_val_ser.py#L1-L100) ### Setattr Handler Memoization For performance, `__setattr__` memoizes handler selection in `__pydantic_setattr_handlers__`: ``` ``` This avoids repeated isinstance checks and configuration lookups. Sources: [pydantic/main.py837-933](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L837-L933) ### Model Copy The `model_copy()` method creates a shallow or deep copy: ``` ``` - Copies `__dict__` (may have unexpected effects for cached properties) - Optionally applies updates (not validated) - Handles `extra='allow'` by distinguishing fields from extras Sources: [pydantic/main.py384-416](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L384-L416) --- ## Summary The Core Model System provides a comprehensive framework for declarative data validation through: 1. **`BaseModel`** - The base class with validation, serialization, and configuration 2. **`ModelMetaclass`** - The metaclass orchestrating field collection, schema generation, and model completion 3. **`FieldInfo`** - Rich field metadata supporting aliases, defaults, and constraints 4. **Private Attributes** - Separate storage for non-validated instance data 5. **Configuration** - Flexible behavior control through `ConfigDict` 6. **Model Lifecycle** - Well-defined stages from construction to validation to serialization The system leverages `pydantic-core` (Rust) for the performance-critical validation and serialization operations, while the Python layer handles declarative schema definition and model construction. For field-level customization through validators and serializers, see [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md). For understanding how Python types are converted to validation schemas, see [Schema Generation](pydantic/pydantic/5-schema-generation.md). Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Core Model System](#core-model-system.md) - [Purpose and Scope](#purpose-and-scope.md) - [System Overview](#system-overview.md) - [BaseModel Class](#basemodel-class.md) - [Class Attributes](#class-attributes.md) - [Instance Attributes](#instance-attributes.md) - [Core Methods](#core-methods.md) - [Initialization: \\`\\_\\_init\\_\\_\\`](#initialization-__init__.md) - [Construction Without Validation: \\`model\\_construct\\`](#construction-without-validation-model_construct.md) - [Validation Methods](#validation-methods.md) - [Serialization Methods](#serialization-methods.md) - [Model Construction Pipeline](#model-construction-pipeline.md) - [ModelMetaclass Pipeline](#modelmetaclass-pipeline.md) - [Namespace Inspection](#namespace-inspection.md) - [Field Collection](#field-collection.md) - [Schema Building and Completion](#schema-building-and-completion.md) - [Model Lifecycle](#model-lifecycle.md) - [Initialization Flow](#initialization-flow.md) - [Attribute Access and Assignment](#attribute-access-and-assignment.md) - [Private Attributes](#private-attributes.md) - [Configuration System](#configuration-system.md) - [Configuration Inheritance](#configuration-inheritance.md) - [Key Configuration Options](#key-configuration-options.md) - [Model Field Management](#model-field-management.md) - [FieldInfo Structure](#fieldinfo-structure.md) - [Field Creation Methods](#field-creation-methods.md) - [Field Metadata Collection](#field-metadata-collection.md) - [Advanced Topics](#advanced-topics.md) - [Model Rebuilding](#model-rebuilding.md) - [Dynamic Model Creation](#dynamic-model-creation.md) - [Frozen Models and Hashing](#frozen-models-and-hashing.md) - [Key Implementation Details](#key-implementation-details.md) - [Mock Validators and Serializers](#mock-validators-and-serializers.md) - [Setattr Handler Memoization](#setattr-handler-memoization.md) - [Model Copy](#model-copy.md) - [Summary](#summary.md)",
  "Documentation System | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Documentation System Relevant source files - [README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/README.md) - [docs/extra/tweaks.css](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/extra/tweaks.css) - [docs/index.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/index.md) - [docs/install.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/install.md) - [docs/theme/main.html](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/theme/main.html) - [docs/why.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/why.md) - [mkdocs.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml) This document describes the documentation system used by Pydantic. It covers the technical infrastructure, build tools, customizations, and workflow for maintaining and generating the Pydantic documentation found at [docs.pydantic.dev](https://docs.pydantic.dev/). ## Overview",
  "Pydantic's documentation system is built using MkDocs with the Material theme, enhanced with custom plugins and extensions. The system provides comprehensive documentation including conceptual guides, API references, examples, error messages, and integration information. The documentation system provides: 1. Versioned documentation (latest/stable release, development, and previous versions) 2. API documentation generated from docstrings 3. Integrated search with Algolia 4. Interactive code examples 5. Optimized presentation for both human readers and AI assistants Sources: [mkdocs.yml1-333](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L1-L333) [README.md32-34](https://github.com/pydantic/pydantic/blob/76ef0b08/README.md#L32-L34) ## Documentation Architecture ### Documentation Build System ``` ``` Sources: [mkdocs.yml189-211](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L189-L211) [docs/plugins/main.py1-43](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/plugins/main.py#L1-L43) [docs/plugins/algolia.py1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/plugins/algolia.py#L1-L50) ### Documentation Structure ``` ``` Sources: [mkdocs.yml89-189](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L89-L189) ## Documentation Generation Process The documentation generation process involves several stages: 1. **Pre-build preparation**: - Converting `HISTORY.md` to a format suitable for the docs - Setting up dependencies for interactive code examples 2. **Markdown processing**: - Upgrading Python code examples to be compatible with different Python versions - Formatting JSON output for code examples - Rendering templates for dynamic content 3. **API documentation generation**: - Extracting docstrings from Python source files - Formatting and organizing API reference pages 4. **Output generation**: - Creating HTML files for web viewing - Generating search indices for Algolia - Creating LLMs.txt for AI consumption - Setting up redirects for backward compatibility ### Hooks and Plugins The documentation system uses several custom hooks in the MkDocs build process: | Hook | Function | Description | | ------------------ | ------------------------------------------------ | ---------------------------------------------------- | | `on_pre_build` | `add_changelog()`, `add_mkdocs_run_deps()` | Prepares changelog and code example dependencies | | `on_files` | - | Processes files after loading | | `on_page_markdown` | `upgrade_python()`, `insert_json_output()`, etc. | Processes Markdown content before conversion to HTML | | `on_page_content` | Processing for Algolia search | Processes HTML content for search indexing | | `on_post_build` | Finalize Algolia records | Final processing after site generation | Sources: [docs/plugins/main.py37-75](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/plugins/main.py#L37-L75) [docs/plugins/algolia.py46-147](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/plugins/algolia.py#L46-L147) ### Markdown Extensions and Customization Pydantic's documentation uses several Markdown extensions to enhance the content: ``` markdown_extensions: - tables - toc - admonition - pymdownx.details - pymdownx.superfences - pymdownx.highlight - pymdownx.extra - pymdownx.emoji - pymdownx.tabbed ``` These extensions enable features like tables, code highlighting, tabs, admonitions, and more. Sources: [mkdocs.yml190-205](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L190-L205) ## Documentation Versioning Pydantic maintains versioned documentation using the `mike` plugin. This allows for multiple versions of the documentation to be available simultaneously. ``` ``` The workflow for documentation updates involves: 1. Regular changes go through PRs to the `main` branch 2. On merge to `main`, the development docs are updated 3. On a new release, a new versioned docs path is created 4. Out-of-cycle documentation updates follow a special process: - PR against `main` with docs changes - Once merged, changes are cherry-picked to the `docs-update` branch - When merged to `docs-update`, the changes are reflected in the \"latest\" docs",
  "Sources: [docs/contributing.md125-136](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md#L125-L136) [mkdocs.yml215-218](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L215-L218) ## Search Integration Pydantic's documentation uses Algolia for enhanced search capabilities: 1. During the build process, content is processed and indexed for search 2. Search records are created with content, titles, and URLs 3. Records are uploaded to Algolia for fast, fuzzy searching 4. The search UI is customized to match the site design The search system provides: - Section-based search results - Content snippets - Highlighted search terms - Keyboard navigation Sources: [docs/plugins/algolia.py1-197](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/plugins/algolia.py#L1-L197) [docs/extra/algolia.js1-108](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/extra/algolia.js#L1-L108) [docs/theme/partials/search.html1-32](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/theme/partials/search.html#L1-L32) ## LLMs Integration Pydantic's documentation system includes a feature for generating AI-friendly documentation snapshots: ``` ``` This generates an LLMs.txt file that provides a comprehensive, AI-friendly snapshot of the Pydantic documentation, making it easier for AI assistants to provide accurate information about Pydantic. Sources: [mkdocs.yml219-237](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L219-L237) [README.md9-10](https://github.com/pydantic/pydantic/blob/76ef0b08/README.md#L9-L10) ## Code Examples Processing Pydantic's documentation includes interactive and consistently formatted code examples: 1. **Code Example Upgrading**: The `upgrade_python()` function in `main.py` uses `pyupgrade` to optimize Python code examples for different Python versions 2. **JSON Output Formatting**: The `insert_json_output()` function replaces JSON string outputs with formatted JSON 3. **Interactive Examples**: The documentation supports running code examples in the browser Sources: [docs/plugins/main.py133-207](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/plugins/main.py#L133-L207) [mkdocs.yml85-87](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L85-L87) ## Contributing to Documentation Guidelines for contributing to Pydantic's documentation: 1. **Documentation Style**: - Written in Markdown - API documentation from Google-style docstrings - Code examples should be complete, self-contained, and runnable 2. **Testing Documentation**: - Code examples in documentation are tested - Use `pytest tests/test_docs.py --update-examples` to test and update code examples 3. **Building Documentation**: - Use `make docs` to build documentation - Use `uv run mkdocs serve` to serve documentation locally 4. **Documentation Updates**: - Regular updates through normal PR process - Out-of-cycle updates through the cherry-pick process to the `docs-update` branch Sources: [docs/contributing.md105-137](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md#L105-L137) [docs/contributing.md147-212](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md#L147-L212) ## Styling and Theming The documentation uses the Material for MkDocs theme with custom styling: 1. **Theme Customization**: - Custom directory: `docs/theme` - Custom color palette with light/dark mode support - Custom navigation and search features 2. **CSS Customizations**: - `docs/extra/terminal.css` for terminal-style displays - `docs/extra/tweaks.css` for general styling tweaks 3. **JavaScript Enhancements**: - `docs/extra/algolia.js` for search integration - `docs/extra/feedback.js` for user feedback - `docs/extra/fluff.js` for UI enhancements The styling provides a consistent, readable experience with good support for code blocks, admonitions, and other technical content.",
  "Sources: [mkdocs.yml6-50](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L6-L50) [docs/extra/tweaks.css1-196](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/extra/tweaks.css#L1-L196) ## Redirects and URL Management The documentation system includes extensive URL redirects to maintain backward compatibility: ``` ``` This ensures that links to old documentation paths continue to work, providing a smoother experience for users transitioning from older documentation versions. Sources: [mkdocs.yml260-332](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L260-L332) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Documentation System](#documentation-system.md) - [Overview](#overview.md) - [Documentation Architecture](#documentation-architecture.md) - [Documentation Build System](#documentation-build-system.md) - [Documentation Structure](#documentation-structure.md) - [Documentation Generation Process](#documentation-generation-process.md) - [Hooks and Plugins](#hooks-and-plugins.md) - [Markdown Extensions and Customization](#markdown-extensions-and-customization.md) - [Documentation Versioning](#documentation-versioning.md) - [Search Integration](#search-integration.md) - [LLMs Integration](#llms-integration.md) - [Code Examples Processing](#code-examples-processing.md) - [Contributing to Documentation](#contributing-to-documentation.md) - [Styling and Theming](#styling-and-theming.md) - [Redirects and URL Management](#redirects-and-url-management.md)",
  "Model Configuration | pydantic/pydantic | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08)) - [Overview](pydantic/pydantic/1-overview.md) - [Core Model System](pydantic/pydantic/2-core-model-system.md) - [BaseModel](pydantic/pydantic/2.1-basemodel.md) - [Field System](pydantic/pydantic/2.2-field-system.md) - [Model Configuration](pydantic/pydantic/2.3-model-configuration.md) - [Type System](pydantic/pydantic/3-type-system.md) - [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) - [Network Types](pydantic/pydantic/3.2-network-types.md) - [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md) - [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md) - [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - [Validators](pydantic/pydantic/4.1-validators.md) - [Serializers](pydantic/pydantic/4.2-serializers.md) - [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md) - [Schema Generation](pydantic/pydantic/5-schema-generation.md) - [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md) - [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md) - [Advanced Features](pydantic/pydantic/6-advanced-features.md) - [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md) - [Function Validation](pydantic/pydantic/6.2-function-validation.md) - [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md) - [Plugin System](pydantic/pydantic/6.4-plugin-system.md) - [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md) - [Testing Framework](pydantic/pydantic/7.1-testing-framework.md) - [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md) - [Documentation System](pydantic/pydantic/7.3-documentation-system.md) - [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md) - [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md) - [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md) - [Backported Modules](pydantic/pydantic/8.2-backported-modules.md) Menu # Model Configuration Relevant source files - [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) - [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) - [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) - [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) - [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py) Model Configuration in Pydantic allows you to customize the behavior of your models, including validation rules, serialization formats, and schema generation. This page documents the configuration system and how specific settings affect model behavior.",
  "## Overview In Pydantic, model configuration is primarily managed through the `ConfigDict` class, which provides a centralized way to control various aspects of model behavior. Configuration options influence everything from how strictly types are validated to how extra fields are handled and how data is serialized. ``` ``` Sources: [pydantic/config.py36-1113](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L36-L1113) ## Defining Configuration There are multiple ways to specify configuration for models in Pydantic: ### Using `model_config` The recommended and most common approach is to use the `model_config` class variable with `ConfigDict`: ``` ``` ### Configuration Inheritance When a model inherits from another model, its configuration is merged with the parent's configuration: ``` ``` Sources: [tests/test\\_config.py491-519](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_config.py#L491-L519) ### Class Initialization Arguments Some configuration options can also be specified as parameters to the class itself: ``` ``` Sources: [tests/test\\_config.py110-126](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_config.py#L110-L126) ### With `with_config` Decorator For non-BaseModel types like TypedDict and dataclasses, you can use the `with_config` decorator: ``` ``` Sources: [pydantic/config.py1144-1210](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L1144-L1210) ## Configuration Processing Flow When a model is created, its configuration is processed through several steps: ``` ``` Sources: [pydantic/\\_internal/\\_config.py94-228](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L94-L228) ## Major Configuration Options Pydantic offers many configuration options that affect different aspects of model behavior. ### Validation Behavior These options control how validation works: | Option | Default | Description | | ------------------------- | ---------- | --------------------------------------------------------------------- | | `strict` | `False` | Enforces strict type checking with no coercion | | `validate_assignment` | `False` | Validates values when attributes are assigned after creation | | `frozen` | `False` | Makes model instances immutable | | `extra` | `'ignore'` | Controls how extra fields are handled: 'allow', 'ignore', or 'forbid' | | `arbitrary_types_allowed` | `False` | Allows fields with arbitrary Python types | | `revalidate_instances` | `'never'` | Controls when model instances are revalidated | Sources: [pydantic/config.py158-590](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L158-L590) ### Field and Alias Handling These options control how fields and their aliases are used: | Option | Default | Description | | ------------------- | ------- | ---------------------------------------------------------- | | `validate_by_alias` | `True` | Allow validation using field aliases | | `validate_by_name` | `False` | Allow validation using field attribute names | | `populate_by_name` | `False` | (Deprecated) Allow field population by both name and alias | | `alias_generator` | `None` | Function to generate field aliases | | `loc_by_alias` | `True` | Use alias instead of field name in error locations | Sources: [pydantic/config.py358-419](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L358-L419) [pydantic/config.py1038-1112](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L1038-L1112) ### String Processing These options control how string values are processed: | Option | Default | Description | | ---------------------- | ------- | ------------------------------------ | | `str_strip_whitespace` | `False` | Strip whitespace from strings | | `str_to_lower` | `False` | Convert strings to lowercase | | `str_to_upper` | `False` | Convert strings to uppercase | | `str_min_length` | `0` | Minimum length for string validation | | `str_max_length` | `None` | Maximum length for string validation |",
  "Sources: [pydantic/config.py48-61](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L48-L61) ### Serialization These options control how models are serialized: | Option | Default | Description | | -------------------- | ----------- | --------------------------------------- | | `serialize_by_alias` | `False` | Serialize using field aliases | | `use_enum_values` | `False` | Use enum values instead of enum members | | `ser_json_bytes` | `'utf8'` | Encoding for bytes in JSON | | `ser_json_timedelta` | `'iso8601'` | Format for timedeltas in JSON | | `ser_json_inf_nan` | `'null'` | How to serialize infinity and NaN | Sources: [pydantic/config.py592-628](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L592-L628) [pydantic/config.py1114-1138](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L1114-L1138) ### Performance Options These options affect performance: | Option | Default | Description | | --------------- | -------------- | ----------------------------------------- | | `defer_build` | `False` | Defer building validators until first use | | `cache_strings` | `True` | Cache strings to improve performance | | `regex_engine` | `'rust-regex'` | Engine for regex validation | Sources: [pydantic/config.py775-837](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L775-L837) [pydantic/config.py931-944](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L931-L944) [pydantic/config.py1019-1037](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L1019-L1037) ## Config Integration with the Pydantic Core The configuration system interacts with Pydantic's core components to control validation and serialization behavior: ``` ``` Sources: [pydantic/\\_internal/\\_config.py158-228](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L158-L228) ## Common Configuration Use Cases ### Handling Extra Fields The `extra` option controls how Pydantic handles fields not declared in the model: ``` ``` Sources: [pydantic/config.py63-156](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L63-L156) ### Strict Validation The `strict` option enforces strict type checking: ``` ``` Sources: [pydantic/config.py444-469](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L444-L469) ### Alias Handling Control how aliases are used for validation and serialization: ``` ``` Sources: [pydantic/config.py1038-1138](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L1038-L1138) ### Frozen Models Create immutable models with `frozen=True`: ``` ``` Sources: [pydantic/config.py158-166](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L158-L166) ### Validation on Assignment Enable validation when attributes are assigned after creation: ``` ``` Sources: [pydantic/config.py246-296](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L246-L296) ## Working with Deferred Schema Building For large model hierarchies, you can improve startup performance with `defer_build=True`: ``` ``` Sources: [pydantic/config.py775-784](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L775-L784) ## Advanced Configuration Use Cases ### Custom Alias Generation Generate aliases automatically with a function: ``` ``` Sources: [pydantic/config.py361-418](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L361-L418) ### Custom JSON Encoding Control how special values are serialized: ``` ```",
  "Sources: [pydantic/config.py592-628](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L592-L628) ## Best Practices 1. **Be consistent with configuration** across related models to prevent surprising behavior 2. **Document your configuration choices** in your codebase 3. **Consider validation strictness** based on your application's requirements 4. **Use `defer_build=True`** for large model hierarchies that aren't immediately used 5. **Choose appropriate `extra` handling** based on your API contract requirements 6. **Prefer `model_config`** over the deprecated class-based `Config` approach Sources: [pydantic/\\_internal/\\_config.py31-32](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L31-L32) ## Configuration Defaults All configuration options have sensible defaults that are used when not explicitly set: ``` ``` Sources: [pydantic/\\_internal/\\_config.py261-307](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L261-L307) The full list of configuration options and their default values can be found in the `config_defaults` dictionary in [pydantic/\\_internal/\\_config.py261-307](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L261-L307) ## Configuring Non-BaseModel Types In addition to configuring `BaseModel` subclasses, you can also apply Pydantic configurations to other types: ### TypedDict ``` ``` Sources: [pydantic/config.py1157-1182](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L1157-L1182) ### Dataclasses ``` ``` Sources: [tests/test\\_config.py738-760](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_config.py#L738-L760) By effectively using Pydantic's configuration system, you can fine-tune validation, serialization, and schema generation to meet your application's specific requirements. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Model Configuration](#model-configuration.md) - [Overview](#overview.md) - [Defining Configuration](#defining-configuration.md) - [Using \\`model\\_config\\`](#using-model_config.md) - [Configuration Inheritance](#configuration-inheritance.md) - [Class Initialization Arguments](#class-initialization-arguments.md) - [With \\`with\\_config\\` Decorator](#with-with_config-decorator.md) - [Configuration Processing Flow](#configuration-processing-flow.md) - [Major Configuration Options](#major-configuration-options.md) - [Validation Behavior](#validation-behavior.md) - [Field and Alias Handling](#field-and-alias-handling.md) - [String Processing](#string-processing.md) - [Serialization](#serialization.md) - [Performance Options](#performance-options.md) - [Config Integration with the Pydantic Core](#config-integration-with-the-pydantic-core.md) - [Common Configuration Use Cases](#common-configuration-use-cases.md) - [Handling Extra Fields](#handling-extra-fields.md) - [Strict Validation](#strict-validation.md) - [Alias Handling](#alias-handling.md) - [Frozen Models](#frozen-models.md) - [Validation on Assignment](#validation-on-assignment.md) - [Working with Deferred Schema Building](#working-with-deferred-schema-building.md) - [Advanced Configuration Use Cases](#advanced-configuration-use-cases.md) - [Custom Alias Generation](#custom-alias-generation.md) - [Custom JSON Encoding](#custom-json-encoding.md) - [Best Practices](#best-practices.md) - [Configuration Defaults](#configuration-defaults.md) - [Configuring Non-BaseModel Types](#configuring-non-basemodel-types.md) - [TypedDict](#typeddict.md) - [Dataclasses](#dataclasses.md)"
]