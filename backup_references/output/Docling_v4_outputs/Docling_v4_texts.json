[
  "Inline VLM Models | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Inline VLM Models Relevant source files",
  "- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/datamodel/pipeline\\_options\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py) - [docling/datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py) - [docling/models/api\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py) - [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) - [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py) - [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py) - [docling/models/vlm\\_models\\_inline/mlx\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py) - [docling/models/vlm\\_models\\_inline/vllm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) This page documents the inline Vision Language Model (VLM) implementations in Docling. Inline VLM models run locally on the host machine, in contrast to API-based VLM models that connect to remote services. Three inference frameworks are supported: Hugging Face Transformers, MLX (for Apple Silicon acceleration), and vLLM (for optimized GPU inference). For information about API-based VLM models that connect to remote services like Ollama or vLLM servers, see [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md). For general VLM integration concepts and configuration options, see [Vision Language Models](docling-project/docling/4.3-vision-language-models.md). ## Architecture Overview The inline VLM model system provides three specialized implementations sharing a common interface: ``` ``` **Sources:** [docling/models/base\\_model.py46-127](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L46-L127) [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py36-376](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L36-L376) [docling/models/vlm\\_models\\_inline/mlx\\_model.py33-318](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L33-L318) [docling/models/vlm\\_models\\_inline/vllm\\_model.py25-301](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L25-L301) ## Configuration via InlineVlmOptions All inline VLM models are configured through `InlineVlmOptions`, which specifies the model repository, inference framework, and generation parameters:",
  "| Parameter | Type | Description | | --------------------------- | -------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- | | `repo_id` | `str` | Hugging Face repository identifier (e.g., `\"ibm-granite/granite-docling-258M\"`) | | `inference_framework` | `InferenceFramework` | One of `TRANSFORMERS`, `MLX`, or `VLLM` | | `transformers_model_type` | `TransformersModelType` | Auto-loading class: `AUTOMODEL`, `AUTOMODEL_VISION2SEQ`, `AUTOMODEL_CAUSALLM`, `AUTOMODEL_IMAGETEXTTOTEXT` | | `transformers_prompt_style` | `TransformersPromptStyle` | Prompt formatting: `CHAT`, `RAW`, or `NONE` | | `response_format` | `ResponseFormat` | Expected output format: `DOCTAGS`, `MARKDOWN`, `HTML`, `OTSL`, or `PLAINTEXT` | | `torch_dtype` | `Optional[str]` | PyTorch dtype (e.g., `\"bfloat16\"`) | | `max_new_tokens` | `int` | Maximum tokens to generate (default: `4096`) | | `temperature` | `float` | Sampling temperature (default: `0.0` for greedy) | | `scale` | `float` | Image scaling factor (default: `2.0`) | | `max_size` | `Optional[int]` | Maximum image dimension | | `use_kv_cache` | `bool` | Enable key-value caching (default: `True`) | | `stop_strings` | `List[str]` | Strings that trigger generation stop | | `custom_stopping_criteria` | `List[Union[StoppingCriteria, GenerationStopper]]` | Custom stopping logic | | `extra_generation_config` | `Dict[str, Any]` | Additional framework-specific generation parameters | | `extra_processor_kwargs` | `Dict[str, Any]` | Additional processor parameters | | `quantized` | `bool` | Enable quantization (default: `False`) | | `load_in_8bit` | `bool` | Use 8-bit quantization (default: `True`) | | `trust_remote_code` | `bool` | Allow remote code execution (default: `False`) | | `revision` | `str` | Model revision/branch (default: `\"main\"`) | **Sources:** [docling/datamodel/pipeline\\_options\\_vlm\\_model.py54-89](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L54-L89) ## Hugging Face Transformers Implementation ### Model Loading and Initialization `HuggingFaceTransformersVlmModel` loads models using Transformers' auto-loading classes: ``` ``` The model class is selected based on `transformers_model_type`: - `AUTOMODEL` → `AutoModel` - `AUTOMODEL_CAUSALLM` → `AutoModelForCausalLM` - `AUTOMODEL_VISION2SEQ` → `AutoModelForVision2Seq` - `AUTOMODEL_IMAGETEXTTOTEXT` → `AutoModelForImageTextToText` The processor's tokenizer padding is configured with `padding_side = \"left\"` for batch processing. **Sources:** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py36-138](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L36-L138) ### Batch Inference Pipeline The Transformers implementation processes images in batches: ``` ``` **Key Implementation Details:**",
  "1. **Image Normalization** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py209-224](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L209-L224): Converts numpy arrays to PIL RGB images 2. **Prompt Handling** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py229-236](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L229-L236): Accepts single prompt string or list of prompts (one per image) 3. **Processor Integration** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py240-256](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L240-L256): Handles both text and image preprocessing with automatic padding 4. **Stopping Criteria** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py260-296](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L260-L296): Supports `StopStringCriteria` and custom `GenerationStopper` instances 5. **Token Trimming** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py343-344](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L343-L344): Removes input tokens from output sequences using attention mask **Sources:** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py139-376](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L139-L376) ### Stopping Criteria Handling The Transformers implementation supports two types of stopping criteria: ``` ``` The implementation distinguishes between: - **String-based stopping** via `StopStringCriteria` [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py264-269](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L264-L269) - **GenerationStopper classes/instances** wrapped in `HFStoppingCriteriaWrapper` [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py276-283](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L276-L283) - **Native StoppingCriteria classes** instantiated with tokenizer [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py284-287](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L284-L287) - **StoppingCriteria instances** used directly [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py294-296](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L294-L296) **Sources:** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py260-302](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L260-L302) ## MLX Implementation (Apple Silicon) ### Architecture and Thread Safety `HuggingFaceMlxModel` uses the MLX framework for Apple Silicon acceleration with important thread safety considerations: ``` ``` **Critical Constraint:** MLX models are **not thread-safe**. All MLX inference operations are serialized using a global lock [docling/models/vlm\\_models\\_inline/mlx\\_model.py28-30](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L28-L30): ``` ``` This means only one MLX model instance can perform inference at a time across the entire process. **Sources:** [docling/models/vlm\\_models\\_inline/mlx\\_model.py28-90](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L28-L90) ### Streaming Generation and Token Collection Unlike the Transformers implementation, MLX uses streaming generation: ``` ``` **Key Characteristics:**",
  "1. **No Batching** [docling/models/vlm\\_models\\_inline/mlx\\_model.py186-188](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L186-L188): Images are processed sequentially within the global lock 2. **Token-Level Collection** [doclog/models/vlm\\_models\\_inline/mlx\\_model.py232-254](https://github.com/docling-project/docling/blob/f7244a43/doclog/models/vlm_models_inline/mlx_model.py#L232-L254): Each token includes text, token ID, and log probability 3. **Early Stopping** [docling/models/vlm\\_models\\_inline/mlx\\_model.py258-302](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L258-L302): Stop strings and `GenerationStopper` instances are checked during streaming 4. **Lookback Window** [docling/models/vlm\\_models\\_inline/mlx\\_model.py279-287](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L279-L287): Custom stoppers can specify how many recent characters to examine **Sources:** [docling/models/vlm\\_models\\_inline/mlx\\_model.py149-318](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L149-L318) ### Stopping Criteria Validation MLX enforces strict stopping criteria types [docling/models/vlm\\_models\\_inline/mlx\\_model.py75-89](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L75-L89): | Allowed | Not Allowed | | ----------------------------- | ---------------------------- | | `GenerationStopper` instances | `StoppingCriteria` instances | | `GenerationStopper` classes | `StoppingCriteria` classes | | Stop strings | - | If Hugging Face `StoppingCriteria` is detected, a `ValueError` is raised with a clear message explaining that only `GenerationStopper` is supported for MLX. **Sources:** [docling/models/vlm\\_models\\_inline/mlx\\_model.py75-89](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L75-L89) ## vLLM Implementation ### Configuration and Initialization `VllmVlmModel` provides GPU-optimized inference with strict separation of load-time and runtime parameters: ``` ``` **Parameter Allowlists:** The implementation maintains two explicit allowlists [docling/models/vlm\\_models\\_inline/vllm\\_model.py32-80](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L32-L80): 1. **`_VLLM_ENGINE_KEYS`** - Parameters passed to `LLM.__init__()` (load time) 2. **`_VLLM_SAMPLING_KEYS`** - Parameters passed to `SamplingParams` (runtime) Any keys in `extra_generation_config` not in either allowlist trigger a warning and are ignored. **Sources:** [docling/models/vlm\\_models\\_inline/vllm\\_model.py82-174](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L82-L174) ### Batch Inference with Multi-Modal Data vLLM processes images as multi-modal data in batch mode: ``` ``` **Key Features:**",
  "1. **True Batching** [docling/models/vlm\\_models\\_inline/vllm\\_model.py233-300](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L233-L300): vLLM processes all images in a single `generate()` call 2. **Multi-Modal Data Format** [docling/models/vlm\\_models\\_inline/vllm\\_model.py277-280](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L277-L280): Images are passed via `multi_modal_data` dictionary with `\"image\"` key 3. **Memory Limit** [docling/models/vlm\\_models\\_inline/vllm\\_model.py140](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L140-L140): `limit_mm_per_prompt={\"image\": 1}` restricts one image per prompt 4. **GPU Memory Management** [docling/models/vlm\\_models\\_inline/vllm\\_model.py146-151](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L146-L151): Defaults to 30% GPU memory utilization to share with other models **Sources:** [docling/models/vlm\\_models\\_inline/vllm\\_model.py175-301](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L175-L301) ## Prompt Formatting All inline VLM models share the `formulate_prompt()` method from `BaseVlmPageModel`: ``` ``` **Prompt Style Options:** | Style | Behavior | Use Case | | -------------- | -------------------------------------- | --------------------------------------------------- | | `RAW` | Returns user prompt unchanged | Models that handle formatting internally | | `NONE` | Returns empty string | Models that don't need text prompts (e.g., GOT-OCR) | | `CHAT` | Applies processor's chat template | Standard instruction-following models | | Custom (Phi-4) | Special formatting for specific models | Model-specific requirements | **Sources:** [docling/models/base\\_model.py85-126](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L85-L126) ## Model Download and Caching All inline VLM implementations inherit from `HuggingFaceModelDownloadMixin`: ``` ``` The `repo_cache_folder` property converts slashes in `repo_id` to dashes (e.g., `\"ibm-granite/granite-docling-258M\"` → `\"ibm-granite--granite-docling-258M\"`). **Sources:** [docling/models/utils/hf\\_model\\_download.py8-45](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py#L8-L45) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py86-88](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L86-L88) ## Available Model Specifications Docling provides pre-configured model specifications in `vlm_model_specs`: ### DocTags Output Models",
  "| Model Spec | Repository | Framework | Devices | Response Format | | ----------------------------- | ----------------------------------------- | ------------ | --------- | --------------- | | `GRANITEDOCLING_TRANSFORMERS` | `ibm-granite/granite-docling-258M` | Transformers | CPU, CUDA | DOCTAGS | | `GRANITEDOCLING_VLLM` | `ibm-granite/granite-docling-258M` | vLLM | CUDA | DOCTAGS | | `GRANITEDOCLING_MLX` | `ibm-granite/granite-docling-258M-mlx` | MLX | MPS | DOCTAGS | | `SMOLDOCLING_TRANSFORMERS` | `ds4sd/SmolDocling-256M-preview` | Transformers | CPU, CUDA | DOCTAGS | | `SMOLDOCLING_VLLM` | `ds4sd/SmolDocling-256M-preview` | vLLM | CUDA | DOCTAGS | | `SMOLDOCLING_MLX` | `ds4sd/SmolDocling-256M-preview-mlx-bf16` | MLX | MPS | DOCTAGS | ### Markdown Output Models | Model Spec | Repository | Framework | Devices | Response Format | | ----------------------------- | ------------------------------------------- | ------------ | -------------- | --------------- | | `GRANITE_VISION_TRANSFORMERS` | `ibm-granite/granite-vision-3.2-2b` | Transformers | CPU, CUDA, MPS | MARKDOWN | | `GRANITE_VISION_VLLM` | `ibm-granite/granite-vision-3.2-2b` | vLLM | CUDA | MARKDOWN | | `PIXTRAL_12B_TRANSFORMERS` | `mistral-community/pixtral-12b` | Transformers | CPU, CUDA | MARKDOWN | | `PIXTRAL_12B_MLX` | `mlx-community/pixtral-12b-bf16` | MLX | MPS | MARKDOWN | | `PHI4_TRANSFORMERS` | `microsoft/Phi-4-multimodal-instruct` | Transformers | CPU, CUDA | MARKDOWN | | `QWEN25_VL_3B_MLX` | `mlx-community/Qwen2.5-VL-3B-Instruct-bf16` | MLX | MPS | MARKDOWN | | `GOT2_TRANSFORMERS` | `stepfun-ai/GOT-OCR-2.0-hf` | Transformers | CPU, CUDA | MARKDOWN | | `GEMMA3_12B_MLX` | `mlx-community/gemma-3-12b-it-bf16` | MLX | MPS | MARKDOWN | | `GEMMA3_27B_MLX` | `mlx-community/gemma-3-27b-it-bf16` | MLX | MPS | MARKDOWN | | `DOLPHIN_TRANSFORMERS` | `ByteDance/Dolphin` | Transformers | CPU, CUDA, MPS | MARKDOWN | ### Plaintext Output Models | Model Spec | Repository | Framework | Devices | Response Format | | ------------------------- | ------------------------------------- | ------------ | --------- | --------------- | | `SMOLVLM256_TRANSFORMERS` | `HuggingFaceTB/SmolVLM-256M-Instruct` | Transformers | CPU, CUDA | PLAINTEXT | | `SMOLVLM256_MLX` | `moot20/SmolVLM-256M-Instruct-MLX` | MLX | MPS | PLAINTEXT | | `SMOLVLM256_VLLM` | `HuggingFaceTB/SmolVLM-256M-Instruct` | vLLM | CUDA | PLAINTEXT | ### Extraction Models | Model Spec | Repository | Framework | Devices | Response Format | | ---------------------------- | ------------------------- | ------------ | -------------- | --------------- | | `NU_EXTRACT_2B_TRANSFORMERS` | `numind/NuExtract-2.0-2B` | Transformers | CPU, CUDA, MPS | PLAINTEXT | **Special Configuration Notes:**",
  "1. **GOT-OCR-2.0** uses `TransformersPromptStyle.NONE` and includes `extra_processor_kwargs={\"format\": True}` 2. **Phi-4** requires `transformers<4.52.0` and uses `extra_generation_config={\"num_logits_to_keep\": 0}` 3. **Dolphin** uses `TransformersPromptStyle.RAW` with a custom prompt format 4. **GraniteDocling VLLM** uses `revision=\"untied\"` for compatibility with vLLM ≤0.10.2 **Sources:** [docling/datamodel/vlm\\_model\\_specs.py1-303](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L1-L303) ## Usage Examples ### Basic Usage with Default Model ``` ``` ### Selecting a Specific Model ``` ``` ### Custom Model Configuration ``` ``` ### Direct Image Processing All inline VLM models support direct image processing via the `process_images()` method: ``` ``` **Sources:** [docs/examples/minimal\\_vlm\\_pipeline.py1-71](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py#L1-L71) [docs/usage/vision\\_models.md1-124](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L1-L124) ## Performance Considerations ### Framework Comparison | Framework | Batching | Thread Safety | Best For | | ---------------- | -------------------- | ---------------------- | ----------------------------------- | | **Transformers** | ✅ Full batch support | ✅ Thread-safe | General purpose, CPU/CUDA/MPS | | **MLX** | ❌ Sequential only | ❌ Global lock required | Apple Silicon (fastest on M-series) | | **vLLM** | ✅ Optimized batching | ✅ Thread-safe | High-throughput GPU inference | ### Memory Management 1. **Transformers**: Uses PyTorch's default memory management; consider `torch_dtype=\"bfloat16\"` for memory savings 2. **MLX**: Automatically manages unified memory on Apple Silicon 3. **vLLM**: Set `gpu_memory_utilization` (default 0.3) to reserve GPU memory for other models ### Acceleration Options - **Flash Attention 2**: Automatically enabled on CUDA devices when `accelerator_options.cuda_use_flash_attention2=True` - **Quantization**: Enable with `quantized=True` and `load_in_8bit=True` (Transformers and vLLM only) - **KV Cache**: Enabled by default with `use_kv_cache=True`; disable only if memory is constrained **Sources:** [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py123-128](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L123-L128) [docling/models/vlm\\_models\\_inline/vllm\\_model.py146-155](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py#L146-L155) [docs/usage/vision\\_models.md46-58](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L46-L58) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Inline VLM Models](#inline-vlm-models.md) - [Architecture Overview](#architecture-overview.md) - [Configuration via InlineVlmOptions](#configuration-via-inlinevlmoptions.md) - [Hugging Face Transformers Implementation](#hugging-face-transformers-implementation.md) - [Model Loading and Initialization](#model-loading-and-initialization.md) - [Batch Inference Pipeline](#batch-inference-pipeline.md) - [Stopping Criteria Handling](#stopping-criteria-handling.md) - [MLX Implementation (Apple Silicon)](#mlx-implementation-apple-silicon.md) - [Architecture and Thread Safety](#architecture-and-thread-safety.md) - [Streaming Generation and Token Collection](#streaming-generation-and-token-collection.md) - [Stopping Criteria Validation](#stopping-criteria-validation.md) - [vLLM Implementation](#vllm-implementation.md) - [Configuration and Initialization](#configuration-and-initialization.md) - [Batch Inference with Multi-Modal Data](#batch-inference-with-multi-modal-data.md) - [Prompt Formatting](#prompt-formatting.md) - [Model Download and Caching](#model-download-and-caching.md) - [Available Model Specifications](#available-model-specifications.md) - [DocTags Output Models](#doctags-output-models.md) - [Markdown Output Models](#markdown-output-models.md) - [Plaintext Output Models](#plaintext-output-models.md) - [Extraction Models](#extraction-models.md) - [Usage Examples](#usage-examples.md) - [Basic Usage with Default Model](#basic-usage-with-default-model.md) - [Selecting a Specific Model](#selecting-a-specific-model.md) - [Custom Model Configuration](#custom-model-configuration.md) - [Direct Image Processing](#direct-image-processing.md) - [Performance Considerations](#performance-considerations.md) - [Framework Comparison](#framework-comparison.md) - [Memory Management](#memory-management.md) - [Acceleration Options](#acceleration-options.md)",
  "Ground Truth Data | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Ground Truth Data Relevant source files",
  "- [docling/backend/msword\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py) - [tests/data/docx/textbox.docx](https://github.com/docling-project/docling/blob/f7244a43/tests/data/docx/textbox.docx) - [tests/data/docx/unit\\_test\\_formatting.docx](https://github.com/docling-project/docling/blob/f7244a43/tests/data/docx/unit_test_formatting.docx) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.md) - [tests/data/groundtruth/docling\\_v2/2206.01062.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2206.01062.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.json) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.json) - [tests/data/groundtruth/docling\\_v2/multi\\_page.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/multi_page.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.doctags.txt) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.md) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.itxt) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.json) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.md) - [tests/test\\_backend\\_msword.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msword.py) This document describes the ground truth data system used in Docling for testing and validation of document conversion results. The ground truth data provides reference outputs for verifying that document processing pipelines produce expected results across different input formats and output representations. For information about the testing framework that uses this ground truth data, see [Testing Framework](docling-project/docling/9.1-testing-framework.md). ## Purpose and Structure",
  "The ground truth data system serves as the foundation for Docling's test suite, providing expected outputs for document conversion operations. It enables regression testing, accuracy validation, and ensures consistent behavior across different document formats and processing pipelines. ``` ``` Sources: [tests/verify\\_utils.py1-510](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L1-L510) [tests/data/groundtruth/docling\\_v2/](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/) [tests/test\\_backend\\_csv.py41-68](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_csv.py#L41-L68) ## Directory Organization The ground truth data follows a structured directory layout that mirrors the test data organization: ``` ``` The ground truth files are organized under `tests/data/groundtruth/` with separate subdirectories for different format versions. Each input document has corresponding ground truth files with extensions indicating the output format. Sources: [tests/verify\\_utils.py324-328](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L324-L328) [tests/verify\\_utils.py410-414](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L410-L414) [tests/test\\_backend\\_csv.py41](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_csv.py#L41-L41) ## Ground Truth File Formats ### DoclingDocument JSON Format The primary ground truth format stores complete `DoclingDocument` objects as JSON files with precise coordinate and confidence precision controlled by `COORD_PREC=2` and `CONFID_PREC=3` constants: ``` ``` The JSON format preserves all document structure with the following key sections: | Property | Type | Description | | ------------- | ------ | ------------------------------------------------- | | `schema_name` | string | Always \"DoclingDocument\" | | `version` | string | Schema version (e.g., \"1.7.0\") | | `origin` | object | Source metadata: mimetype, binary\\_hash, filename | | `body` | object | Root node for main document content | | `furniture` | object | Root node for metadata elements (headers/footers) | | `texts` | array | All TextItem objects with references | | `tables` | array | All TableItem objects with data grids | | `pictures` | array | All PictureItem objects with image data | | `groups` | array | All GroupItem objects (lists, sections) | Each element contains: - `self_ref`: JSON pointer to itself (e.g., `#/texts/0`) - `parent`: Reference to parent element - `children`: Array of references to child elements - `prov`: Array of provenance data with page numbers and bounding boxes - Content-specific fields (text, label, data, etc.) Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json1-100](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L1-L100) [tests/verify\\_utils.py27-28](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L27-L28) [tests/verify\\_utils.py438-440](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L438-L440) ### Markdown Export Format Markdown ground truth files (`.md` extension) contain the exported markdown representation of documents, generated using `DoclingDocument.export_to_markdown()`: ``` ``` Key characteristics: - Section headers use `##` for level 1, `###` for level 2, etc. - Tables rendered as markdown tables with alignment - Images marked with `<!-- image -->` comments - Lists use `-` for unordered, `1.` for ordered - Preserves text formatting where possible This format validates the markdown export functionality through `verify_export()` function.",
  "Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.md1-50](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.md#L1-L50) [tests/verify\\_utils.py294-295](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L294-L295) ### DocTags Format The DocTags format (`.doctags.txt` extension) provides a structured tag-based representation with precise coordinate information, generated using `DoclingDocument.export_to_document_tokens()`: ``` <doctag><page_header><loc_15><loc_101><loc_30><loc_354>arXiv:2203.01017v2 [cs.CV] 11 Mar 2022</page_header> <section_header_level_1><loc_79><loc_68><loc_408><loc_76>TableFormer: Table Structure Understanding with Transformers.</section_header_level_1> <text><loc_116><loc_93><loc_370><loc_108>Ahmed Nassar, Nikolaos Livathinos...</text> <otsl><loc_258><loc_146><loc_439><loc_191><ched>1<nl></otsl> <picture><loc_257><loc_143><loc_439><loc_313><caption><loc_252><loc_325>Figure 1: Picture...</caption></picture> <page_break> ``` DocTags format characteristics: - Each line contains a complete element with opening and closing tags - Coordinates use `<loc_X>` format where X is a normalized 0-500 scale - Four coordinates represent left, top, right, bottom boundaries - Element types include: `text`, `section_header_level_N`, `table`, `picture`, `page_header`, `page_footer`, `list_item`, `caption` - Tables use OTSL (Optimized Table Structure Language) notation - `<page_break>` markers separate pages - Special tags like `<otsl>`, `<ched>`, `<fcel>`, `<lcel>` for table structure Coordinate normalization formula: ``` normalized_x = int((x / page_width) * 500) normalized_y = int((y / page_height) * 500) ``` Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt1-20](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt#L1-L20) [tests/verify\\_utils.py298-299](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L298-L299) ### Page Data Format Page-level ground truth (`.pages.json` extension) stored as JSON arrays containing detailed page information from the PDF backend: ``` ``` Page data components: - `page_no`: Zero-based page index - `size`: Page dimensions in points - `parsed_page.dimension`: Page coordinate system information - `parsed_page.char_cells`: Individual character bounding boxes and metadata - `parsed_page.bitmap_resources`: Embedded images with base64-encoded data This format captures low-level page parsing results for validation of PDF processing pipelines, particularly useful for testing OCR and layout analysis stages. Sources: [tests/verify\\_utils.py422-435](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L422-L435) ## Verification System ### Core Verification Functions The verification system provides specialized functions for different types of content validation: ``` ``` ### Text Verification with Fuzzy Matching The `verify_text()` function in [tests/verify\\_utils.py55-62](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L55-L62) supports both exact and fuzzy text comparison using Levenshtein distance: ``` ``` The Levenshtein distance calculation uses [tests/verify\\_utils.py31-52](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L31-L52): - Computes minimum edit distance between two strings - Used for fuzzy matching when `fuzzy=True` - Default threshold of 0.4 (40% difference allowed) - Useful for OCR output where minor errors are expected Fuzzy matching is controlled per-test: - Programmatic content (DOCX, HTML): `fuzzy=False` for exact matching - OCR content (scanned PDFs): `fuzzy=True` with configurable threshold - OCR engine parameter passed to determine expectations",
  "Sources: [tests/verify\\_utils.py31-62](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L31-L62) ### Document Structure Validation The `verify_docitems` function performs comprehensive validation of document structure: 1. **Text Elements**: Validates content, labels, and provenance information 2. **Table Elements**: Checks table structure, cell content, and headers 3. **Picture Elements**: Verifies image data and annotations 4. **Hierarchical Structure**: Ensures parent-child relationships are correct The function iterates through document elements and validates each component against ground truth expectations. Sources: [tests/verify\\_utils.py230-291](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L230-L291) ### Coordinate Precision Control The verification system maintains consistent coordinate precision across different formats: | Constant | Purpose | Value | | ------------- | ------------------------------ | ----- | | `COORD_PREC` | Decimal places for coordinates | 2 | | `CONFID_PREC` | Decimal places for confidence | 3 | These precision settings ensure reproducible ground truth generation and comparison. Sources: [tests/verify\\_utils.py27-28](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L27-L28) [tests/verify\\_utils.py425-430](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L425-L430) ## Ground Truth Generation ### Generation Control Ground truth generation is controlled through the `GEN_TEST_DATA` flag in [tests/test\\_data\\_gen\\_flag.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_data_gen_flag.py) and the `generate` parameter in verification functions: ``` ``` The `verify_conversion_result_v2()` function signature at [tests/verify\\_utils.py388-396](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L388-L396): ``` ``` Parameters: - `generate`: If True, creates new ground truth files; if False, validates against existing - `ocr_engine`: Optional OCR engine identifier used in ground truth path - `fuzzy`: Enable fuzzy text matching for OCR content - `verify_doctags`: If True, also generate/verify .doctags.txt format - `indent`: JSON indentation level (default: 2) Sources: [tests/test\\_data\\_gen\\_flag.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_data_gen_flag.py) [tests/test\\_backend\\_msword.py16-19](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msword.py#L16-L19) [tests/verify\\_utils.py388-396](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L388-L396) ### File Generation Process The generation process in [tests/verify\\_utils.py421-448](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L421-L448) creates multiple output formats for each input document: ``` ``` File naming conventions: - Base path: `tests/data/groundtruth/docling_v2/{input_filename}` - Suffix pattern: `.{ocr_engine}` if OCR used (e.g., `.easyocr`) - Extensions: `.json`, `.md`, `.doctags.txt`, `.pages.json`, `.itxt` Example paths for `2203.01017v2.pdf`: - `tests/data/groundtruth/docling_v2/2203.01017v2.json` - `tests/data/groundtruth/docling_v2/2203.01017v2.md` - `tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt` - `tests/data/groundtruth/docling_v2/2203.01017v2.pages.json` Sources: [tests/verify\\_utils.py421-448](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L421-L448) [tests/verify\\_utils.py27-28](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L27-L28) ## Test Integration ### Backend Test Integration Each document backend test integrates with the ground truth system following a consistent pattern demonstrated in [tests/test\\_backend\\_msword.py84-112](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msword.py#L84-L112): ``` ```",
  "This pattern is replicated across backend tests: - [tests/test\\_backend\\_csv.py41-68](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_csv.py#L41-L68) for CSV files - [tests/test\\_backend\\_pptx.py28-56](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pptx.py#L28-L56) for PowerPoint files - [tests/test\\_backend\\_jats.py28-54](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_jats.py#L28-L54) for JATS XML files - [tests/test\\_backend\\_html.py28-55](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py#L28-L55) for HTML files Common elements: 1. Get list of test files via `get_{format}_paths()` 2. Create converter via `get_converter()` 3. Construct ground truth path using parent.parent navigation 4. Convert document and extract `DoclingDocument` 5. Verify multiple export formats 6. Use `GENERATE` flag for regeneration mode Sources: [tests/test\\_backend\\_msword.py84-112](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msword.py#L84-L112) [tests/test\\_backend\\_csv.py41-68](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_csv.py#L41-L68) ### Legacy Format Support The system maintains backward compatibility with legacy ground truth formats: ``` ``` This ensures existing test data remains usable during format transitions. Sources: [tests/verify\\_utils.py302-386](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L302-L386) ## Error Handling and Fuzzy Matching ### Fuzzy Comparison Support The verification system supports fuzzy matching for cases where exact comparison is inappropriate: - **OCR Results**: Text extraction may have minor variations - **Coordinate Precision**: Floating-point precision differences - **Content Variations**: Expected differences in processed content The fuzzy matching uses configurable thresholds and Levenshtein distance algorithms. Sources: [tests/verify\\_utils.py55-62](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L55-L62) [tests/verify\\_utils.py31-52](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L31-L52) ### Table Structure Validation Table verification includes comprehensive structure checking: ``` ``` This ensures table extraction maintains structural integrity and content accuracy. Sources: [tests/verify\\_utils.py170-211](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L170-L211) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Ground Truth Data](#ground-truth-data.md) - [Purpose and Structure](#purpose-and-structure.md) - [Directory Organization](#directory-organization.md) - [Ground Truth File Formats](#ground-truth-file-formats.md) - [DoclingDocument JSON Format](#doclingdocument-json-format.md) - [Markdown Export Format](#markdown-export-format.md) - [DocTags Format](#doctags-format.md) - [Page Data Format](#page-data-format.md) - [Verification System](#verification-system.md) - [Core Verification Functions](#core-verification-functions.md) - [Text Verification with Fuzzy Matching](#text-verification-with-fuzzy-matching.md) - [Document Structure Validation](#document-structure-validation.md) - [Coordinate Precision Control](#coordinate-precision-control.md) - [Ground Truth Generation](#ground-truth-generation.md) - [Generation Control](#generation-control.md) - [File Generation Process](#file-generation-process.md) - [Test Integration](#test-integration.md) - [Backend Test Integration](#backend-test-integration.md) - [Legacy Format Support](#legacy-format-support.md) - [Error Handling and Fuzzy Matching](#error-handling-and-fuzzy-matching.md) - [Fuzzy Comparison Support](#fuzzy-comparison-support.md) - [Table Structure Validation](#table-structure-validation.md)",
  "- [/docling-project/docling](./_docling-project_docling.md) - [/docling-project/docling/1-overview](./_docling-project_docling_1-overview.md) - [/docling-project/docling/1.1-installation](./_docling-project_docling_1.1-installation.md) - [/docling-project/docling/2.1-document-conversion-flow](./_docling-project_docling_2.1-document-conversion-flow.md) - [/docling-project/docling/1.2-quick-start](./_docling-project_docling_1.2-quick-start.md) - [/docling-project/docling/2.2-doclingdocument-data-model](./_docling-project_docling_2.2-doclingdocument-data-model.md) - [/docling-project/docling/2-core-architecture](./_docling-project_docling_2-core-architecture.md) - [/docling-project/docling/2.3-configuration-and-pipeline-options](./_docling-project_docling_2.3-configuration-and-pipeline-options.md) - [/docling-project/docling/3-document-backends](./_docling-project_docling_3-document-backends.md) - [/docling-project/docling/2.4-format-detection-and-routing](./_docling-project_docling_2.4-format-detection-and-routing.md) - [/docling-project/docling/3.1-pdf-processing-backends](./_docling-project_docling_3.1-pdf-processing-backends.md) - [/docling-project/docling/3.2-office-document-backends](./_docling-project_docling_3.2-office-document-backends.md) - [/docling-project/docling/4-aiml-models](./_docling-project_docling_4-aiml-models.md) - [/docling-project/docling/4.1-ocr-models](./_docling-project_docling_4.1-ocr-models.md) - [/docling-project/docling/3.3-web-and-markup-backends](./_docling-project_docling_3.3-web-and-markup-backends.md) - [/docling-project/docling/4.3.1-inline-vlm-models](./_docling-project_docling_4.3.1-inline-vlm-models.md) - [/docling-project/docling/4.3-vision-language-models](./_docling-project_docling_4.3-vision-language-models.md) - [/docling-project/docling/4.2-layout-and-table-structure-models](./_docling-project_docling_4.2-layout-and-table-structure-models.md) - [/docling-project/docling/4.3.2-api-based-vlm-models](./_docling-project_docling_4.3.2-api-based-vlm-models.md) - [/docling-project/docling/5-processing-pipelines](./_docling-project_docling_5-processing-pipelines.md) - [/docling-project/docling/5.1-standard-pdf-pipeline](./_docling-project_docling_5.1-standard-pdf-pipeline.md) - [/docling-project/docling/4.4-enrichment-models](./_docling-project_docling_4.4-enrichment-models.md) - [/docling-project/docling/5.2-threaded-pdf-pipeline](./_docling-project_docling_5.2-threaded-pdf-pipeline.md) - [/docling-project/docling/5.3-vlm-pipeline](./_docling-project_docling_5.3-vlm-pipeline.md) - [/docling-project/docling/5.4-extraction-pipeline](./_docling-project_docling_5.4-extraction-pipeline.md) - [/docling-project/docling/5.5-asr-pipeline](./_docling-project_docling_5.5-asr-pipeline.md) - [/docling-project/docling/6-command-line-interface](./_docling-project_docling_6-command-line-interface.md) - [/docling-project/docling/5.6-base-pipeline-architecture](./_docling-project_docling_5.6-base-pipeline-architecture.md) - [/docling-project/docling/6.2-model-management-cli](./_docling-project_docling_6.2-model-management-cli.md) - [/docling-project/docling/7-python-sdk](./_docling-project_docling_7-python-sdk.md) - [/docling-project/docling/6.1-document-conversion-cli](./_docling-project_docling_6.1-document-conversion-cli.md) - [/docling-project/docling/7.1-documentconverter-api](./_docling-project_docling_7.1-documentconverter-api.md) - [/docling-project/docling/7.3-usage-examples](./_docling-project_docling_7.3-usage-examples.md) - [/docling-project/docling/7.2-documentextractor-api](./_docling-project_docling_7.2-documentextractor-api.md) - [/docling-project/docling/8-output-and-integration](./_docling-project_docling_8-output-and-integration.md) - [/docling-project/docling/8.2-document-chunking](./_docling-project_docling_8.2-document-chunking.md) - [/docling-project/docling/8.1-export-formats](./_docling-project_docling_8.1-export-formats.md) - [/docling-project/docling/9-development-and-testing](./_docling-project_docling_9-development-and-testing.md) - [/docling-project/docling/9.1-testing-framework](./_docling-project_docling_9.1-testing-framework.md) - [/docling-project/docling/8.3-framework-integrations](./_docling-project_docling_8.3-framework-integrations.md) - [/docling-project/docling/9.2-ground-truth-data](./_docling-project_docling_9.2-ground-truth-data.md) - [/docling-project/docling/9.3-cicd-and-development-workflow](./_docling-project_docling_9.3-cicd-and-development-workflow.md) - [/docling-project/docling/10-deployment](./_docling-project_docling_10-deployment.md) - [/docling-project/docling/10.1-docker-deployment](./_docling-project_docling_10.1-docker-deployment.md) - [/docling-project/docling/10.2-model-artifacts-management](./_docling-project_docling_10.2-model-artifacts-management.md)",
  "Base Pipeline Architecture | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Base Pipeline Architecture Relevant source files",
  "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) This document covers the foundational pipeline framework in Docling that enables extensible document processing workflows. The base pipeline architecture defines abstract interfaces, execution patterns, model integration points, and caching mechanisms that allow different processing strategies to be implemented consistently. The key architectural components include: - `BasePipeline`: Abstract base class defining the three-phase execution model (build, assemble, enrich) - `ConvertPipeline`: Specialization that adds enrichment model support - `PaginatedPipeline`: Specialization that adds page-by-page processing for paginated formats - Pipeline caching: Instance reuse based on pipeline class and options hash to avoid redundant model loading For information about specific pipeline implementations like PDF processing, see page 5.1 (Standard PDF Pipeline) and page 5.3 (VLM Pipeline). For document backends that pipelines operate on, see page 3 (Document Backends). ## Pipeline Hierarchy The Docling pipeline architecture is built around a hierarchy of abstract base classes that define different processing paradigms: ``` ```",
  "**Sources:** [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) [docling/pipeline/base\\_pipeline.py135-182](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L135-L182) [docling/pipeline/base\\_pipeline.py184-319](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L184-L319) [docling/pipeline/simple\\_pipeline.py16-56](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L16-L56) [docling/pipeline/vlm\\_pipeline.py50-389](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L389) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296-648](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L648) [docling/pipeline/asr\\_pipeline.py204-242](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L204-L242) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-198](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L198) [docling/pipeline/base\\_extraction\\_pipeline.py15-73](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L73) ## Core Pipeline Execution Flow The `BasePipeline.execute()` method defines the standard three-phase execution pattern that all pipelines follow. This method serves as a template, delegating to abstract methods that subclasses implement: ``` ``` The execution flow guarantees that `_unload()` is called in the `finally` block to clean up resources regardless of success or failure. **Sources:** [docling/pipeline/base\\_pipeline.py62-84](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L84) ## Pipeline Processing Phases The three-phase execution model provides clear separation of concerns during document processing: ### Phase 1: Build (\\_build\\_document) The `_build_document()` abstract method is responsible for extracting and processing raw content from the input document. This is where format-specific parsing occurs: | Pipeline Type | Build Strategy | | ------------------- | ----------------------------------------------------------------------------- | | `SimplePipeline` | Directly calls `backend.convert()` for declarative formats (DOCX, HTML, etc.) | | `PaginatedPipeline` | Processes pages in batches through a sequential model pipeline | | `VlmPipeline` | Generates VLM predictions for each page image | | `AsrPipeline` | Transcribes audio using Whisper models | The build phase populates `conv_res.pages` with raw predictions from models (layout, tables, OCR, etc.) but does not yet construct the final document hierarchy. **Sources:** [docling/pipeline/base\\_pipeline.py86-88](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L86-L88) [docling/pipeline/simple\\_pipeline.py26-41](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L26-L41) [docling/pipeline/base\\_pipeline.py197-283](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L197-L283) [docling/pipeline/vlm\\_pipeline.py114-123](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L114-L123) [docling/pipeline/asr\\_pipeline.py260-265](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L260-L265) ### Phase 2: Assemble (\\_assemble\\_document) The `_assemble_document()` method takes processed content and constructs the final `DoclingDocument` structure. The base implementation is a no-op, but subclasses override it to: - Construct document hierarchy from page-level predictions - Generate page images at configured scale - Crop element images for pictures and tables - Determine reading order - Convert VLM outputs (DOCTAGS/Markdown/HTML) into `DoclingDocument`",
  "**Sources:** [docling/pipeline/base\\_pipeline.py90-91](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L90-L91) [docling/pipeline/vlm\\_pipeline.py136-186](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L136-L186) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py535-628](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L535-L628) ### Phase 3: Enrich (\\_enrich\\_document) The `_enrich_document()` method applies enrichment models to enhance the document content after assembly. This phase operates on the `DoclingDocument` structure, iterating through items and applying models from `enrichment_pipe`: ``` ``` Enrichment models include: - `CodeFormulaModel`: Extracts LaTeX from code/formula images - `DocumentPictureClassifier`: Classifies figure types - `PictureDescriptionVlmModel` or `PictureDescriptionApiModel`: Generates image captions **Sources:** [docling/pipeline/base\\_pipeline.py93-115](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L93-L115) ## ConvertPipeline Specialization The `ConvertPipeline` class extends `BasePipeline` to add enrichment model support. It is the base class for most document conversion pipelines (excluding extraction pipelines): ``` ``` **Title:** ConvertPipeline and Its Options `ConvertPipeline.__init__()` initializes the `enrichment_pipe` with two models: 1. `DocumentPictureClassifier`: Classifies pictures into categories (Chart, Table, Natural Image, etc.) 2. Picture description model (either `PictureDescriptionVlmModel` or `PictureDescriptionApiModel` based on `picture_description_options.kind`) The picture description model is instantiated using a plugin factory system, allowing third-party plugins to register custom implementations. **Sources:** [docling/pipeline/base\\_pipeline.py135-182](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L135-L182) [docling/datamodel/pipeline\\_options.py283-292](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L283-L292) ## Model Integration Architecture Pipelines integrate with two main types of models: ### Page Processing Models (Build Phase) Page models are stored in the `build_pipe` list and process pages sequentially during the build phase. Each model implements a callable interface `__call__(conv_res: ConversionResult, page_batch: Iterable[Page]) -> Iterable[Page]`: ``` ``` **Title:** Page Processing Models **Sources:** [docling/models/base\\_model.py38-43](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L38-L43) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py318-336](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L318-L336) ### Enrichment Models (Enrich Phase) Enrichment models are stored in the `enrichment_pipe` list and process document elements after assembly: ``` ``` **Title:** Enrichment Models Hierarchy **Sources:** [docling/models/base\\_model.py131-148](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L131-L148) [docling/models/base\\_model.py151-158](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L151-L158) [docling/models/base\\_model.py160-211](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L160-L211) [docling/pipeline/base\\_pipeline.py152-162](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L152-L162) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py339-352](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L339-L352) ## PaginatedPipeline Specialization The `PaginatedPipeline` class extends `ConvertPipeline` to handle document formats that require page-by-page processing, such as PDFs. It introduces the abstract method `initialize_page(conv_res, page)` that subclasses must implement: ``` ``` **Title:** PaginatedPipeline and Its Options",
  "The `_build_document()` implementation processes pages in batches: ``` ``` **Title:** PaginatedPipeline Build Flow The `_apply_on_pages()` method chains models from `build_pipe`: ``` ``` Each model receives the output of the previous model, forming a sequential processing pipeline. **Sources:** [docling/pipeline/base\\_pipeline.py184-319](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L184-L319) ## Pipeline Options and Configuration Each pipeline class defines its configuration through options classes: | Pipeline Class | Options Class | Key Configuration | | ----------------------------- | ------------------------------ | ---------------------------------------- | | `SimplePipeline` | `ConvertPipelineOptions` | Picture description, classification | | `VlmPipeline` | `VlmPipelineOptions` | VLM model, response format, backend text | | `ThreadedStandardPdfPipeline` | `ThreadedPdfPipelineOptions` | Batch sizes, queue sizes, timeouts | | `AsrPipeline` | `AsrPipelineOptions` | ASR model, temperature, timestamps | | `ExtractionVlmPipeline` | `VlmExtractionPipelineOptions` | Extraction VLM model, scale | **Sources:** [docling/pipeline/simple\\_pipeline.py50-51](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L50-L51) [docling/pipeline/vlm\\_pipeline.py383-384](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L383-L384) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py632-633](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L632-L633) [docling/pipeline/asr\\_pipeline.py229-230](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L229-L230) [docling/pipeline/extraction\\_vlm\\_pipeline.py195-197](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L195-L197) ## Backend Compatibility Each pipeline implementation defines which document backends it supports through the `is_backend_supported()` class method: ``` ``` **Sources:** [docling/pipeline/simple\\_pipeline.py54-55](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L54-L55) [docling/pipeline/vlm\\_pipeline.py387-388](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L387-L388) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py636-637](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L636-L637) [docling/pipeline/asr\\_pipeline.py240-241](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L240-L241) ## Error Handling and Status Determination Pipelines implement different strategies for determining conversion status: - **SimplePipeline**: Always returns `SUCCESS` if no exceptions occur - **VlmPipeline**: Checks for valid pages and backend status - **ThreadedStandardPdfPipeline**: Preserves status from threaded processing - **AsrPipeline**: Always returns `SUCCESS` for valid transcription All pipelines support graceful error handling through the `raises_on_error` parameter in `execute()`, allowing partial results to be returned instead of exceptions.",
  "**Sources:** [docling/pipeline/simple\\_pipeline.py43-47](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L43-L47) [docling/pipeline/base\\_pipeline.py295-314](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L295-L314) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py639-640](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L639-L640) [docling/pipeline/asr\\_pipeline.py224-226](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L224-L226) [docling/pipeline/base\\_pipeline.py77-81](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L77-L81) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Base Pipeline Architecture](#base-pipeline-architecture.md) - [Pipeline Hierarchy](#pipeline-hierarchy.md) - [Core Pipeline Execution Flow](#core-pipeline-execution-flow.md) - [Pipeline Processing Phases](#pipeline-processing-phases.md) - [Phase 1: Build (\\_build\\_document)](#phase-1-build-_build_document.md) - [Phase 2: Assemble (\\_assemble\\_document)](#phase-2-assemble-_assemble_document.md) - [Phase 3: Enrich (\\_enrich\\_document)](#phase-3-enrich-_enrich_document.md) - [ConvertPipeline Specialization](#convertpipeline-specialization.md) - [Model Integration Architecture](#model-integration-architecture.md) - [Page Processing Models (Build Phase)](#page-processing-models-build-phase.md) - [Enrichment Models (Enrich Phase)](#enrichment-models-enrich-phase.md) - [PaginatedPipeline Specialization](#paginatedpipeline-specialization.md) - [Pipeline Options and Configuration](#pipeline-options-and-configuration.md) - [Backend Compatibility](#backend-compatibility.md) - [Error Handling and Status Determination](#error-handling-and-status-determination.md)",
  "Layout and Table Structure Models | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Layout and Table Structure Models Relevant source files",
  "- [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.md) - [tests/data/groundtruth/docling\\_v2/2206.01062.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2206.01062.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.json) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.json) - [tests/data/groundtruth/docling\\_v2/multi\\_page.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/multi_page.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.doctags.txt) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.md) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py)",
  "This page covers the AI/ML models used for document layout analysis and table structure recognition in Docling. These models work together to understand the spatial and structural organization of document content, identifying elements like text blocks, tables, figures, and headers, then extracting detailed table structure including cell boundaries and relationships. For information about OCR text extraction capabilities, see [OCR Models](docling-project/docling/4.1-ocr-models.md). For vision-language model integration for content understanding, see [Vision Language Models](docling-project/docling/4.3-vision-language-models.md). ## Overview Docling's layout and table structure analysis pipeline consists of several interconnected models that process documents in stages: ``` ``` The pipeline processes pages through preprocessing, layout analysis with cleanup, and specialized table structure recognition for table elements identified by the layout model. **Sources**: [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py) ## Page Preprocessing Model The `PagePreprocessingModel` handles initial page processing, extracting images and text cells while assessing text quality. ### Core Functionality | Feature | Description | Implementation | | ------------------- | -------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Image Extraction | Generates page images at specified scales | [docling/models/page\\_preprocessing\\_model.py52-66](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py#L52-L66) | | Cell Extraction | Extracts text cells from document backends | [docling/models/page\\_preprocessing\\_model.py69-90](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py#L69-L90) | | Text Quality Rating | Evaluates text extraction quality using heuristics | [docling/models/page\\_preprocessing\\_model.py120-145](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py#L120-L145) | | VLM Support | Can skip cell extraction for VLM-only processing | [docling/models/page\\_preprocessing\\_model.py20-22](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py#L20-L22) | ### Text Quality Assessment The model uses several patterns to detect problematic text extraction: ``` ``` Hard failures (score 0.0) include replacement characters, glyph patterns, and excessive slash-number sequences. Fragment patterns apply graduated penalties. **Sources**: [docling/models/page\\_preprocessing\\_model.py120-145](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py#L120-L145) ## Layout Model The `LayoutModel` performs document layout analysis using IBM's layout prediction models to identify and classify document elements. ### Element Detection The model classifies document elements into these categories: | Label Type | Elements | Purpose | | ------------- | -------------------------------------------------------------------------------------------------- | ------------------------ | | Text Elements | `TEXT`, `FOOTNOTE`, `CAPTION`, `SECTION_HEADER`, `PAGE_HEADER`, `PAGE_FOOTER`, `CODE`, `LIST_ITEM` | Content text blocks | | Tables | `TABLE`, `DOCUMENT_INDEX` | Tabular data structures | | Figures | `PICTURE` | Images and graphics | | Interactive | `CHECKBOX_SELECTED`, `CHECKBOX_UNSELECTED` | Form elements | | Containers | `FORM`, `KEY_VALUE_REGION` | Wrapper structures | | Mathematical | `FORMULA` | Mathematical expressions | ### Batch Processing Architecture ``` ``` The model processes pages in batches for efficiency, using the `LayoutPredictor.predict_batch()` method from `docling_ibm_models`. **Sources**: [docling/models/layout\\_model.py148-237](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L148-L237) [docling/models/layout\\_model.py28-47](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L28-L47) ### Model Configuration",
  "The layout model supports different model specifications through `LayoutModelConfig`: ``` ``` Models are downloaded from HuggingFace repositories and cached locally for reuse. **Sources**: [docling/models/layout\\_model.py89-102](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L89-L102) [docling/datamodel/layout\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/layout_model_specs.py) ## Layout Postprocessor The `LayoutPostprocessor` refines raw layout predictions through spatial indexing, overlap resolution, and cell assignment. ### Spatial Indexing System ``` ``` The postprocessor uses multiple spatial data structures for efficient overlap detection and resolution. **Sources**: [docling/utils/layout\\_postprocessor.py50-106](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L50-L106) [docling/utils/layout\\_postprocessor.py17-48](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L17-L48) ### Cluster Processing Pipeline Different cluster types receive specialized processing: | Cluster Type | Processing Rules | Overlap Thresholds | | ------------ | ------------------------------------------------- | ------------------------------------------- | | Regular | Standard confidence filtering, cell assignment | area\\_threshold: 1.3, conf\\_threshold: 0.05 | | Picture | Higher confidence thresholds, full-page filtering | area\\_threshold: 2.0, conf\\_threshold: 0.3 | | Wrapper | Container handling, child cluster management | area\\_threshold: 2.0, conf\\_threshold: 0.2 | **Sources**: [docling/utils/layout\\_postprocessor.py158-163](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L158-L163) [docling/utils/layout\\_postprocessor.py164-171](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L164-L171) ### Cell Assignment Strategy ``` ``` Cells are assigned to clusters based on spatial overlap, with unassigned cells optionally converted to orphan text clusters. **Sources**: [docling/utils/layout\\_postprocessor.py585-617](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L585-L617) [docling/utils/layout\\_postprocessor.py284-301](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L284-L301) ## Table Structure Model The `TableStructureModel` uses TableFormer to extract detailed table structure from table regions identified by the layout model. It predicts both the structural representation (in OTSL format) and the precise bounding boxes for each table cell. ### TableFormer Architecture The model consists of three main components: ``` ``` The model operates at 2x scale (144 DPI) for improved accuracy. The scale factor is applied to both input images and coordinates, then predictions are scaled back. **Sources**: [docling/models/table\\_structure\\_model.py29-90](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L29-L90) [docling/models/table\\_structure\\_model.py65-90](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L65-L90) [docling/models/table\\_structure\\_model.py92-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L92-L101) ### OTSL Token Language TableFormer predicts table structure using OTSL (Optimized Table Structure Language), a minimal vocabulary for representing table structure: | OTSL Token | Meaning | Example Context | | ------------ | --------------------------- | ----------------------------------- | | `<ched>` | Column header cell | `<otsl>...<ched>Header Text<nl>...` | | `<fcel>` | First cell in row | `<fcel>Cell 1<fcel>Cell 2<nl>` | | `<lcel>` | Last cell in row (implicit) | Continues until `<nl>` | | `<nl>` | New line (end row) | `<fcel>A<fcel>B<nl>` | | `<srowspan>` | Row span start | For merged cells | | `<erowspan>` | Row span end | End of merged region | The OTSL sequence provides a structured representation that can be parsed to reconstruct the complete table grid, including spanning cells.",
  "**Sources**: [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt10-12](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt#L10-L12) [docling/models/table\\_structure\\_model.py275-279](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L275-L279) ### Table Processing Workflow The table structure extraction follows this detailed workflow: ``` ``` Key implementation details: | Stage | Operation | Code Reference | | ---------------------- | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Input Preparation | Scale page image to 2x, extract table bounding boxes | [docling/models/table\\_structure\\_model.py190-216](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L190-L216) | | Token Extraction | Prefer word-level cells, fall back to line-level cells | [docling/models/table\\_structure\\_model.py218-248](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L218-L248) | | TableFormer Prediction | Call `tf_predictor.multi_table_predict()` with scaled inputs | [docling/models/table\\_structure\\_model.py250-253](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L250-L253) | | Cell Matching | Match predicted cells to extracted tokens or extract from backend | [docling/models/table\\_structure\\_model.py256-268](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L256-L268) | | Coordinate Unscaling | Scale all bounding boxes back by 1/2.0 before storage | [docling/models/table\\_structure\\_model.py267-268](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L267-L268) | | Output Assembly | Create `Table` object with OTSL sequence and `TableCell` array | [docling/models/table\\_structure\\_model.py281-294](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L281-L294) | ### Cell Matching Strategy The `do_cell_matching` option controls how cell content is extracted: ``` ``` With cell matching enabled (default), the model matches input text tokens to predicted cells, preserving original text. With matching disabled, text is extracted from the PDF using predicted cell coordinates, which works better when no word-level segmentation is available. **Sources**: [docling/models/table\\_structure\\_model.py218-268](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L218-L268) [docling/models/table\\_structure\\_model.py41-42](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L41-L42) ### Table Cell Output Structure Each `TableCell` contains structural and spatial information: ``` ``` The model also provides aggregate information in the `Table` object: - `otsl_seq`: List of OTSL tokens representing structure - `table_cells`: List of all `TableCell` objects - `num_rows`: Total number of rows - `num_cols`: Total number of columns **Sources**: [docling/models/table\\_structure\\_model.py265-294](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L265-L294) [tests/data/groundtruth/docling\\_v2/2203.01017v2.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json) ## Model Integration Points ### Pipeline Integration The layout and table models integrate with the broader Docling pipeline through these interfaces: ``` ``` Each model implements the `BasePageModel.__call__()` interface, processing page batches and updating page predictions.",
  "**Sources**: [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) [docling/models/layout\\_model.py148-237](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L148-L237) [docling/models/table\\_structure\\_model.py170-304](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L170-L304) ### Configuration System Model behavior is controlled through the pipeline options system: | Option Category | Key Parameters | Impact | | ----------------------- | ----------------------------------------------------------- | ----------------------------------------------------- | | `LayoutOptions` | `model_spec`, `skip_cell_assignment`, `keep_empty_clusters` | Layout model selection and post-processing | | `TableStructureOptions` | `mode`, `do_cell_matching` | TableFormer accuracy vs speed, cell extraction method | | `AcceleratorOptions` | `device`, `num_threads` | Hardware acceleration and threading | **Sources**: [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) [tests/test\\_options.py25-40](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L25-L40) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Layout and Table Structure Models](#layout-and-table-structure-models.md) - [Overview](#overview.md) - [Page Preprocessing Model](#page-preprocessing-model.md) - [Core Functionality](#core-functionality.md) - [Text Quality Assessment](#text-quality-assessment.md) - [Layout Model](#layout-model.md) - [Element Detection](#element-detection.md) - [Batch Processing Architecture](#batch-processing-architecture.md) - [Model Configuration](#model-configuration.md) - [Layout Postprocessor](#layout-postprocessor.md) - [Spatial Indexing System](#spatial-indexing-system.md) - [Cluster Processing Pipeline](#cluster-processing-pipeline.md) - [Cell Assignment Strategy](#cell-assignment-strategy.md) - [Table Structure Model](#table-structure-model.md) - [TableFormer Architecture](#tableformer-architecture.md) - [OTSL Token Language](#otsl-token-language.md) - [Table Processing Workflow](#table-processing-workflow.md) - [Cell Matching Strategy](#cell-matching-strategy.md) - [Table Cell Output Structure](#table-cell-output-structure.md) - [Model Integration Points](#model-integration-points.md) - [Pipeline Integration](#pipeline-integration.md) - [Configuration System](#configuration-system.md)",
  "Core Architecture | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Core Architecture Relevant source files",
  "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) This document provides an architectural overview of Docling's core system design, including its three-layer architecture, key abstractions, and how components interact during document processing. For details on specific subsystems, see [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md), [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md), [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md), and [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md). ## System Overview Docling implements a three-layer architecture that separates user interfaces, orchestration logic, and processing pipelines: ### Three-Layer Architecture ``` ``` **Sources:** [docling/document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L433) [docling/document\\_extractor.py88-326](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L326) [docling/cli/main.py298-816](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L298-L816) [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) ### Layer Responsibilities | Layer | Components | Responsibility | | ------------------------ | ---------------------------------------- | ------------------------------------------------------------------- | | **User Interfaces** | CLI, SDK, MCP | Accept user input, parse arguments, invoke core APIs | | **Core Orchestration** | `DocumentConverter`, `DocumentExtractor` | Route documents to appropriate pipelines, manage pipeline lifecycle | | **Processing Pipelines** | `BasePipeline` subclasses | Execute multi-stage document processing (build, assemble, enrich) | | **Document Backends** | `AbstractDocumentBackend` subclasses | Provide format-specific document reading and parsing | | **Output** | `DoclingDocument` | Unified document representation with export capabilities |",
  "**Sources:** [docling/document\\_converter.py184-206](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L206) [docling/pipeline/base\\_pipeline.py43-85](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L85) ## Key Abstractions ### DocumentConverter and DocumentExtractor The system provides two primary entry points for different use cases: ``` ``` - **`DocumentConverter`** ([document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L184-L433)): Converts documents to `DoclingDocument` format for downstream processing, search, or archival - **`DocumentExtractor`** ([document\\_extractor.py88-326](https://github.com/docling-project/docling/blob/f7244a43/document_extractor.py#L88-L326)): Extracts structured data from documents according to a template (experimental feature) Both classes share a similar architecture with format routing and pipeline caching but serve different end goals. **Sources:** [docling/document\\_converter.py184-206](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L206) [docling/document\\_extractor.py88-120](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L120) ### FormatOption: The Routing Mechanism The `FormatOption` class pairs each `InputFormat` with its appropriate pipeline and backend: ``` ``` The `DocumentConverter` maintains a `format_to_options: Dict[InputFormat, FormatOption]` mapping that determines how each format is processed. This is configured during initialization and can be customized per format. **Sources:** [docling/document\\_converter.py62-131](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L62-L131) [docling/datamodel/base\\_models.py36-42](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L36-L42) ### Pipeline Hierarchy Pipelines implement the `BasePipeline` abstract class, which defines a three-phase processing model: ``` ``` **Key Methods:** - `execute()` ([base\\_pipeline.py62-84](https://github.com/docling-project/docling/blob/f7244a43/base_pipeline.py#L62-L84)): Entry point that orchestrates the three-phase processing - `_build_document()`: Extract raw structure from the document backend - `_assemble_document()`: Construct hierarchical document structure - `_enrich_document()`: Apply enrichment models (code detection, picture classification, etc.) **Sources:** [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) [docling/pipeline/base\\_pipeline.py135-182](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L135-L182) [docling/pipeline/base\\_pipeline.py184-320](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L184-L320) ### Backend System Backends provide format-specific document reading capabilities: ``` ``` - **`PaginatedDocumentBackend`** ([backend/abstract\\_backend.py58-88](https://github.com/docling-project/docling/blob/f7244a43/backend/abstract_backend.py#L58-L88)): Supports page-by-page iteration, used by PDF/image formats - **`DeclarativeDocumentBackend`** ([backend/abstract\\_backend.py91-101](https://github.com/docling-project/docling/blob/f7244a43/backend/abstract_backend.py#L91-L101)): Directly outputs `DoclingDocument`, used by DOCX/HTML/Markdown formats **Sources:** [docling/backend/abstract\\_backend.py13-101](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py#L13-L101) [docling/backend/pdf\\_backend.py1-100](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pdf_backend.py#L1-L100) ## Conversion Flow Architecture The document conversion process follows a consistent pattern across all pipelines: ``` ```",
  "**Sources:** [docling/document\\_converter.py227-284](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L227-L284) [docling/document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L351-L378) [docling/pipeline/base\\_pipeline.py62-84](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L84) ### Pipeline Caching Mechanism The `DocumentConverter` caches pipeline instances to avoid redundant model loading: ``` ``` **Caching Logic** ([document\\_converter.py212-217](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L212-L217) [document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L351-L378)): 1. Compute MD5 hash of `pipeline_options.model_dump()` 2. Create composite key: `(pipeline_cls, options_hash)` 3. Check cache with thread lock (`_PIPELINE_CACHE_LOCK`) 4. Initialize and store if not found 5. Return cached instance if found This optimization is critical for performance when processing multiple documents with identical configurations, as it prevents re-initialization of heavy ML models. **Sources:** [docling/document\\_converter.py203-217](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L203-L217) [docling/document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L351-L378) ## Pipeline Processing Phases All pipelines inherit the three-phase processing model from `BasePipeline`: ### Phase 1: Build Document ``` ``` - **StandardPdfPipeline**: Sequential model execution for PDF/image processing - **SimplePipeline**: Direct backend conversion for structured formats (DOCX, HTML) - **VlmPipeline**: Vision-language model inference for end-to-end processing **Sources:** [docling/pipeline/base\\_pipeline.py86-91](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L86-L91) [docling/pipeline/simple\\_pipeline.py26-41](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L26-L41) [docling/pipeline/vlm\\_pipeline.py136-186](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L136-L186) ### Phase 2: Assemble Document This phase constructs the hierarchical `DoclingDocument` structure from extracted elements. The implementation varies by pipeline: - **StandardPdfPipeline**: Combines page-level elements into document structure - **VlmPipeline**: Converts VLM output (DOCTAGS/Markdown/HTML) into `DoclingDocument` - **SimplePipeline**: Uses pre-assembled structure from backend **Sources:** [docling/pipeline/base\\_pipeline.py90-91](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L90-L91) [docling/pipeline/vlm\\_pipeline.py136-186](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L136-L186) ### Phase 3: Enrich Document Enrichment models operate on the assembled `DoclingDocument` to add additional information: ``` ``` Each enrichment model: 1. Calls `prepare_element()` to filter relevant document items 2. Processes items in batches 3. Updates the `DoclingDocument` in-place **Sources:** [docling/pipeline/base\\_pipeline.py93-115](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L93-L115) [docling/pipeline/base\\_pipeline.py136-176](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L136-L176) ## Configuration Architecture The configuration system is hierarchical, with options cascading from top-level `PipelineOptions` to model-specific configurations: ``` ``` For detailed configuration information, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md). **Sources:** [docling/datamodel/pipeline\\_options.py273-384](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L273-L384) ## Input Document and Backend Lifecycle",
  "The `InputDocument` class manages document validation and backend initialization: ``` ``` **Key Lifecycle Points:** 1. **Validation** ([datamodel/document.py131-182](https://github.com/docling-project/docling/blob/f7244a43/datamodel/document.py#L131-L182)): Check file size and page count against `DocumentLimits` 2. **Backend Initialization** ([datamodel/document.py183-191](https://github.com/docling-project/docling/blob/f7244a43/datamodel/document.py#L183-L191)): Create backend instance with document reference 3. **Page Loading** (in pipelines): Lazy page loading via `backend.load_page(page_no)` 4. **Resource Cleanup** ([pipeline/base\\_pipeline.py285-293](https://github.com/docling-project/docling/blob/f7244a43/pipeline/base_pipeline.py#L285-L293)): Unload backends after processing **Sources:** [docling/datamodel/document.py104-191](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L104-L191) [docling/pipeline/base\\_pipeline.py285-293](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L285-L293) ## ThreadedStandardPdfPipeline Architecture For high-performance PDF processing, `ThreadedStandardPdfPipeline` implements a multi-threaded stage graph: ``` ``` **Key Features:** - **ThreadedQueue** ([threaded\\_standard\\_pdf\\_pipeline.py96-163](https://github.com/docling-project/docling/blob/f7244a43/threaded_standard_pdf_pipeline.py#L96-L163)): Bounded queue with blocking `put()`/`get_batch()` and explicit `close()` semantics - **ThreadedPipelineStage** ([threaded\\_standard\\_pdf\\_pipeline.py165-280](https://github.com/docling-project/docling/blob/f7244a43/threaded_standard_pdf_pipeline.py#L165-L280)): Each stage runs in its own thread, processes batches, and handles errors - **Backpressure Control**: Queue size limits prevent memory overflow from fast producers - **Deterministic Shutdown**: `close()` propagates downstream so stages terminate cleanly **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py1-296](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L1-L296) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py379-427](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L379-L427) ## Document Format Detection Format detection uses a multi-strategy approach implemented in `_DocumentConversionInput._guess_format()`: ``` ``` For detailed format detection logic, see [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md). **Sources:** [docling/datamodel/document.py280-374](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L280-L374) ## Output and Export All pipelines converge on `DoclingDocument` as the unified representation: ``` ``` The `DoclingDocument` class (from `docling-core`) provides: - Hierarchical document structure with provenance tracking - Multiple export formats with configurable image handling - Item iteration with `iterate_items()` for traversal For details on the data model, see [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md). For export format details, see [Export Formats](docling-project/docling/8.1-export-formats.md). **Sources:** [docling/cli/main.py191-290](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L191-L290) [docling/datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L215) ## Summary Docling's architecture achieves separation of concerns through: 1. **Clear layer boundaries**: User interfaces, orchestration, pipelines, backends, and output 2. **Pluggable components**: Pipeline and backend selection via `FormatOption` mappings 3. **Performance optimization**: Pipeline caching prevents redundant model initialization 4. **Consistent processing model**: Three-phase execution (build, assemble, enrich) across all pipelines 5. **Unified output**: All pipelines produce `DoclingDocument` for consistent downstream processing This design allows Docling to handle diverse document formats with format-specific optimizations while maintaining a consistent external API.",
  "**Sources:** [docling/document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L433) [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) [docling/datamodel/document.py104-191](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L104-L191) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Core Architecture](#core-architecture.md) - [System Overview](#system-overview.md) - [Three-Layer Architecture](#three-layer-architecture.md) - [Layer Responsibilities](#layer-responsibilities.md) - [Key Abstractions](#key-abstractions.md) - [DocumentConverter and DocumentExtractor](#documentconverter-and-documentextractor.md) - [FormatOption: The Routing Mechanism](#formatoption-the-routing-mechanism.md) - [Pipeline Hierarchy](#pipeline-hierarchy.md) - [Backend System](#backend-system.md) - [Conversion Flow Architecture](#conversion-flow-architecture.md) - [Pipeline Caching Mechanism](#pipeline-caching-mechanism.md) - [Pipeline Processing Phases](#pipeline-processing-phases.md) - [Phase 1: Build Document](#phase-1-build-document.md) - [Phase 2: Assemble Document](#phase-2-assemble-document.md) - [Phase 3: Enrich Document](#phase-3-enrich-document.md) - [Configuration Architecture](#configuration-architecture.md) - [Input Document and Backend Lifecycle](#input-document-and-backend-lifecycle.md) - [ThreadedStandardPdfPipeline Architecture](#threadedstandardpdfpipeline-architecture.md) - [Document Format Detection](#document-format-detection.md) - [Output and Export](#output-and-export.md) - [Summary](#summary.md)",
  "DoclingDocument Data Model | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # DoclingDocument Data Model Relevant source files",
  "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.md) - [tests/data/groundtruth/docling\\_v2/2206.01062.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2206.01062.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.json) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.json) - [tests/data/groundtruth/docling\\_v2/multi\\_page.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/multi_page.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.doctags.txt) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.md) This document describes the `DoclingDocument` data model, which is the unified representation format produced by all Docling conversion pipelines. It defines the schema for representing document structure, content, and metadata in a format-agnostic way that enables downstream processing, export to multiple formats, and semantic analysis. For information about the conversion process that produces `DoclingDocument` instances, see [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md). For details on export formats, see [Export Formats](docling-project/docling/8.1-export-formats.md). --- ## Purpose and Scope The `DoclingDocument` data model serves as the central unified representation in Docling's architecture. All processing pipelines—whether `StandardPdfPipeline`, `VlmPipeline`, or `SimplePipeline`—produce a `DoclingDocument` instance that captures:",
  "- **Document structure**: Hierarchical organization of content using parent-child relationships - **Content elements**: Text blocks, tables, pictures, lists, and other semantic units - **Provenance information**: Spatial coordinates, page numbers, and character spans linking elements to source locations - **Metadata**: Document origin, format information, and processing metadata - **Content layers**: Separation between body content and document furniture (headers, footers) The model is defined in the `docling-core` package and imported into Docling for use across the conversion pipeline. Sources: [docling/datamodel/document.py24-32](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L24-L32) [docling/datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L215) [tests/data/groundtruth/docling\\_v2/2203.01017v2.json1-15](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L1-L15) --- ## Schema Structure Overview ### Top-Level Schema ``` ``` **Diagram: DoclingDocument top-level structure showing schema information, origin metadata, root nodes, and element collections** The document consists of: 1. **Schema metadata**: `schema_name` (always \"DoclingDocument\"), `version`, and document `name` 2. **Origin information**: Source file metadata including MIME type, binary hash, and filename 3. **Root nodes**: `body` and `furniture` as entry points into the document hierarchy 4. **Typed collections**: Arrays holding all instances of each element type (texts, tables, pictures, groups) Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json1-16](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L1-L16) [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json1-17](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json#L1-L17) --- ## Hierarchical Structure with JSON References ### Reference-Based Hierarchy DoclingDocument uses a JSON reference system (`$ref`) to establish parent-child relationships without duplicating data. Each element has: - `self_ref`: A JSON pointer to the element's location (e.g., `\"#/texts/42\"`) - `parent`: A `$ref` to the parent element (e.g., `{\"$ref\": \"#/body\"}`) - `children`: A list of `$ref` objects pointing to child elements ``` ``` **Diagram: Document hierarchy using JSON $ref pointers. Solid arrows show parent-to-child references via children array, dotted arrows show child-to-parent references via parent field** This design provides several advantages: 1. **No duplication**: Each element appears exactly once in its typed array 2. **Efficient traversal**: Both top-down (via `children`) and bottom-up (via `parent`) navigation 3. **Clear ownership**: Every element except roots has exactly one parent 4. **Type safety**: Elements remain in their typed collections for easy access Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json17-60](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L17-L60) [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json466-527](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json#L466-L527) --- ## Content Layers: Body vs Furniture The document is divided into two primary content layers: ### Body Layer The `body` node contains the main semantic content of the document: - Section headers - Paragraphs and text blocks - Tables - Figures and pictures - Lists and enumerations - Formulas and equations - Code blocks ``` ``` ### Furniture Layer The `furniture` node contains document furniture—elements that provide context but are not primary content: - Page headers - Page footers - Footnotes - Marginal notes - Page numbers ``` ``` Elements have a `content_layer` field indicating their layer membership. This separation enables:",
  "- **Clean export**: Body-only exports for main content extraction - **Layout analysis**: Identification of page layout patterns - **Semantic processing**: Focus on primary content without distractions Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json10-16](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L10-L16) [tests/data/groundtruth/docling\\_v2/2203.01017v2.json17-489](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L17-L489) [docling/datamodel/document.py80-99](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L80-L99) --- ## Element Types and Labels ### DocItemLabel Enumeration Elements are classified using `DocItemLabel` values, which map to specific semantic types: | Label | Description | Common Use | | -------------------- | -------------------- | ---------------------------------- | | `section_header` | Section heading | Document structure, TOC generation | | `title` | Document title | Metadata extraction | | `text` / `paragraph` | Body text | Content extraction | | `list_item` | List entry | List detection and formatting | | `table` | Table structure | Table extraction | | `picture` | Image or figure | Image extraction, captioning | | `caption` | Image/table caption | Association with parent element | | `formula` | Mathematical formula | LaTeX extraction | | `code` | Code block | Syntax highlighting | | `page_header` | Running header | Furniture identification | | `page_footer` | Running footer | Furniture identification | | `footnote` | Footnote reference | Citation tracking | Sources: [docling/datamodel/document.py80-99](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L80-L99) [docling/datamodel/base\\_models.py6-13](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L6-L13) ### Element Type Overview ``` ``` **Diagram: Element type hierarchy showing common base properties and specialized types** Sources: [docling/datamodel/document.py24-32](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L24-L32) \\[docling\\_core.types.doc imports] --- ## Text Elements ### TextItem Structure Text elements represent textual content with rich provenance information: ``` ``` **Key fields:** - `orig`: Original text as extracted from the source - `text`: Processed/cleaned text for output - `prov`: Provenance array linking text to source page(s) - `label`: Semantic classification (text, paragraph, section\\_header, etc.) ### SectionHeaderItem Section headers extend TextItem with hierarchical level information: ``` ``` The `level` field indicates nesting depth, enabling table of contents generation and document outline extraction. Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json834-916](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L834-L916) [tests/data/groundtruth/docling\\_v2/2203.01017v2.json945-971](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L945-L971) --- ## Table Elements ### TableItem Structure Tables are represented with complete structural information: ``` ``` **Key components:** - `otsl_seq`: Optimized Table Structure Language sequence (see OTSL documentation) - `num_rows`, `num_cols`: Table dimensions - `table_cells`: Array of cell objects with positions and spans - Each cell contains bbox, span information, and text content OTSL tokens used in sequence: - `<ched>`: Column header - `<rhed>`: Row header - `<fcel>`: First cell in row - `<lcel>`: Last cell in row - `<nl>`: New line (row separator)",
  "Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt11-12](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt#L11-L12) [docling/datamodel/document.py42-44](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L42-L44) --- ## Picture Elements ### PictureItem Structure Pictures (images, figures) are represented with optional annotations and captions: ``` ``` **Key fields:** - `annotations`: List of `PictureDataType` objects for image data (base64, PNG, etc.) - `provenance`: String indicating annotation source (e.g., \"model\\_generated\", \"api\\_described\") - `predicted_class`: Classification result (Figure, Chart, Diagram, etc.) - `confidence`: Model confidence score - `children`: Often contains a caption TextItem The `prov` bbox defines the image's location on the page, enabling image extraction and spatial relationship analysis. Sources: [docling/datamodel/base\\_models.py218-233](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L218-L233) \\[tests/data/groundtruth/docling\\_v2/2203.01017v2.json] --- ## Group Elements ### GroupItem for Structural Aggregation Groups aggregate related elements, most commonly for lists: ``` ``` Groups serve multiple purposes: - **List representation**: Unordered and ordered lists - **Nested structures**: Lists can contain other groups for multi-level lists - **Logical grouping**: Related content that should be processed together The `name` field identifies the group type (\"list\", \"group\"), while `label` provides semantic classification. Children maintain document order. Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json490-541](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L490-L541) [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json466-527](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json#L466-L527) --- ## Provenance Tracking ### Provenance Structure Every content element includes `prov` (provenance) information linking it to source locations: ``` ``` **Diagram: Provenance structure linking elements to source locations** ### Bounding Box Coordinates Coordinates follow PDF conventions with configurable origin: ``` ``` - `l` (left), `t` (top), `r` (right), `b` (bottom): Coordinates in points (1/72 inch) - `coord_origin`: Typically `\"BOTTOMLEFT\"` for PDF (origin at bottom-left of page) - Coordinates enable precise spatial analysis and image cropping ### Character Spans The `charspan` field provides character-level granularity: ``` ``` This `[start, end)` range links the element to the character stream extracted from the page, enabling: - Text selection and highlighting - Precise text extraction from source - Mapping between visual and textual representations ### Multi-Page Elements Elements can span multiple pages using multiple provenance entries: ``` ``` This structure supports: - Tables spanning pages - Text flowing across page boundaries - Complete reconstruction of element layout Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json843-857](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L843-L857) [docling/datamodel/document.py35-40](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L35-L40) \\[docling\\_core.types.doc BoundingBox] --- ## Integration with Conversion Pipeline ### Creation in Pipeline ``` ``` **Diagram: DoclingDocument creation flow through pipeline phases** ### ConversionResult Container The `ConversionResult` class wraps the document with metadata: ``` ``` Key relationships: - `input`: Source document information - `pages`: Intermediate page-level representations (retained for debugging) - `document`: Final unified DoclingDocument - `status`: Conversion outcome - `confidence`: Quality scores per page and overall",
  "Sources: [docling/datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L215) \\[docling/pipeline/base\\_pipeline.py] ### Export Capabilities Once created, DoclingDocument can be exported to multiple formats: ``` ``` Export methods leverage the unified structure to generate: - **JSON**: Complete serialization with provenance and structure - **Markdown**: Semantic text with tables and images - **HTML**: Rich rendering with CSS styling - **DOCTAGS**: Tagged format for training VLM models Sources: [docling/cli/main.py211-275](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L211-L275) --- ## JSON Schema Example ### Complete Document Structure Here's a minimal complete DoclingDocument in JSON format: ``` ``` This structure demonstrates: 1. Schema versioning for compatibility tracking 2. Origin metadata for provenance 3. Separation of furniture and body content 4. Reference-based hierarchy avoiding duplication 5. Type-specific collections for efficient access 6. Complete provenance linking to source pages Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json1-100](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L1-L100) [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json1-100](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json#L1-L100) --- ## Summary Table | Aspect | Description | Key Files | | ------------------ | ------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | | **Schema** | DoclingDocument from docling-core with versioned schema | [docling/datamodel/document.py24-32](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L24-L32) | | **Structure** | JSON with $ref pointers for hierarchy | [tests/data/groundtruth examples](<https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth examples>) | | **Content Layers** | body (main content) and furniture (page elements) | [docling/datamodel/document.py80-99](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L80-L99) | | **Element Types** | texts, tables, pictures, groups with DocItemLabel | [docling/datamodel/base\\_models.py6-13](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L6-L13) | | **Provenance** | page\\_no, bbox, charspan for each element | [docling\\_core.types.doc.base](https://github.com/docling-project/docling/blob/f7244a43/docling_core.types.doc.base) | | **Integration** | Created by pipelines, wrapped in ConversionResult | [docling/datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L215) | | **Export** | JSON, Markdown, HTML, DOCTAGS formats | [docling/cli/main.py211-275](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L211-L275) | The DoclingDocument data model provides a robust, extensible representation that bridges the gap between raw document formats and structured semantic content, enabling high-quality document understanding and downstream processing. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [DoclingDocument Data Model](#doclingdocument-data-model.md) - [Purpose and Scope](#purpose-and-scope.md) - [Schema Structure Overview](#schema-structure-overview.md) - [Top-Level Schema](#top-level-schema.md) - [Hierarchical Structure with JSON References](#hierarchical-structure-with-json-references.md) - [Reference-Based Hierarchy](#reference-based-hierarchy.md) - [Content Layers: Body vs Furniture](#content-layers-body-vs-furniture.md) - [Body Layer](#body-layer.md) - [Furniture Layer](#furniture-layer.md) - [Element Types and Labels](#element-types-and-labels.md) - [DocItemLabel Enumeration](#docitemlabel-enumeration.md) - [Element Type Overview](#element-type-overview.md) - [Text Elements](#text-elements.md) - [TextItem Structure](#textitem-structure.md) - [SectionHeaderItem](#sectionheaderitem.md) - [Table Elements](#table-elements.md) - [TableItem Structure](#tableitem-structure.md) - [Picture Elements](#picture-elements.md) - [PictureItem Structure](#pictureitem-structure.md) - [Group Elements](#group-elements.md) - [GroupItem for Structural Aggregation](#groupitem-for-structural-aggregation.md) - [Provenance Tracking](#provenance-tracking.md) - [Provenance Structure](#provenance-structure.md) - [Bounding Box Coordinates](#bounding-box-coordinates.md) - [Character Spans](#character-spans.md) - [Multi-Page Elements](#multi-page-elements.md) - [Integration with Conversion Pipeline](#integration-with-conversion-pipeline.md) - [Creation in Pipeline](#creation-in-pipeline.md) - [ConversionResult Container](#conversionresult-container.md) - [Export Capabilities](#export-capabilities.md) - [JSON Schema Example](#json-schema-example.md) - [Complete Document Structure](#complete-document-structure.md) - [Summary Table](#summary-table.md)",
  "PDF Processing Backends | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # PDF Processing Backends Relevant source files",
  "- [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py) - [docling/backend/docling\\_parse\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py) - [docling/backend/docling\\_parse\\_v2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py) - [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py) - [docling/backend/pypdfium2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py) - [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py) - [docling/utils/locks.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py) - [tests/test\\_backend\\_docling\\_parse\\_v4.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py) ## Purpose and Scope This page documents the PDF backend implementations in Docling, which are responsible for extracting text, images, and layout information from PDF documents. PDF backends provide the low-level document reading interface that supplies data to the processing pipelines. For information about how backends are selected and used in the conversion flow, see [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md). For details on pipeline processing that operates on backend data, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md). ## Overview Docling provides four PDF backend implementations, each with different capabilities and use cases: | Backend | Status | Text Extraction | Granularity | Use Case | | ------------------------------- | ------------------- | ---------------- | ------------------------ | -------------------------------------------------- | | `DoclingParseV4DocumentBackend` | **Current default** | docling-parse v4 | Characters, words, lines | High-quality text extraction with fine granularity | | `DoclingParseV2DocumentBackend` | Stable | docling-parse v2 | Text lines | Sanitized format, good for most documents | | `DoclingParseDocumentBackend` | Legacy | docling-parse v1 | Text lines | Backward compatibility | | `PyPdfiumDocumentBackend` | Alternative | pypdfium2 only | Text lines (merged) | Pure pypdfium2, no docling-parse dependency |",
  "All backends use `pypdfium2` for PDF rendering and page image generation. The DoclingParse variants add sophisticated text extraction capabilities through the `docling-parse` library. **Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py1-250](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L1-L250) [docling/backend/docling\\_parse\\_v2\\_backend.py1-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L1-L277) [docling/backend/docling\\_parse\\_backend.py1-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L1-L238) [docling/backend/pypdfium2\\_backend.py1-400](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L1-L400) ## Backend Architecture ``` ``` Each backend consists of two classes: - **Document Backend**: Manages the entire PDF document, handles loading/unloading, and creates page backends - **Page Backend**: Provides access to individual page data including text cells, images, and rendering **Sources:** [docling/backend/abstract\\_backend.py1-64](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py#L1-L64) [docling/backend/docling\\_parse\\_v4\\_backend.py191-250](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L191-L250) [docling/backend/docling\\_parse\\_v2\\_backend.py228-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L228-L277) ## DoclingParseV4Backend (Current Default) `DoclingParseV4DocumentBackend` is the current default backend, providing the highest quality text extraction with character, word, and line-level granularity. ### Key Features - **Multi-level granularity**: Extracts characters, words, and text lines - **Lazy parsing**: Page data is parsed on-demand via `_ensure_parsed()` method - **Configurable extraction**: Options for `create_words`, `create_textlines`, `keep_chars`, `keep_lines` - **Memory efficient**: Pages can be unloaded individually ### Implementation Details ``` ``` The v4 backend uses the modern `docling-parse` API with `DoclingPdfParser` and `PdfDocument` classes. Text extraction happens lazily when `get_text_cells()` or `get_segmented_page()` is called: [docling/backend/docling\\_parse\\_v4\\_backend.py52-74](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L52-L74) The `_ensure_parsed()` method retrieves character, word, and line cells from docling-parse, then converts them to top-left coordinate origin: [docling/backend/docling\\_parse\\_v4\\_backend.py66-74](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L66-L74) ### Usage Example ``` ``` **Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py24-189](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L24-L189) [tests/test\\_backend\\_docling\\_parse\\_v4.py18-26](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py#L18-L26) ## DoclingParseV2Backend (Sanitized Format) `DoclingParseV2DocumentBackend` provides a \"sanitized\" data format with structured arrays, offering a balance between quality and simplicity. ### Data Structure V2 uses a structured format with separate header and data arrays: [docling/backend/docling\\_parse\\_v2\\_backend.py60-77](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L60-L77) The sanitized format includes: - `dimension`: Page width and height - `cells`: Header array (field names) + data array (cell values) - `images`: Bitmap locations This structure allows efficient access to cell properties like `x0`, `y0`, `x1`, `y1`, `text` without parsing complex nested structures. ### Coordinate Scaling",
  "V2 requires coordinate scaling from parser space to pypdfium2 space: [docling/backend/docling\\_parse\\_v2\\_backend.py84-92](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L84-L92) The scaling factors are computed as: ``` scale_x = pypdfium_width / parser_width scale_y = pypdfium_height / parser_height ``` **Sources:** [docling/backend/docling\\_parse\\_v2\\_backend.py32-226](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L32-L226) ## DoclingParseBackend (Legacy v1) `DoclingParseDocumentBackend` is the original implementation, maintained for backward compatibility. ### Differences from V2 The v1 backend uses a simpler, less structured format: [docling/backend/docling\\_parse\\_backend.py54-67](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L54-L67) Key differences: - Direct access to `_dpage[\"cells\"]` array without header/data separation - Uses `content[\"rnormalized\"]` for text content - Similar coordinate scaling requirements The v1 parser API is also different: [docling/backend/docling\\_parse\\_backend.py207-220](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L207-L220) V1 uses `pdf_parser_v1()` with methods like `load_document()` and `parse_pdf_from_key_on_page()`. **Sources:** [docling/backend/docling\\_parse\\_backend.py26-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L26-L238) ## PyPdfiumBackend (Pure pypdfium2) `PyPdfiumDocumentBackend` provides PDF reading without the `docling-parse` dependency, using only `pypdfium2`. ### Cell Extraction and Merging PyPdfium2 produces highly fragmented text cells (often sub-word level). The backend implements sophisticated cell merging: ``` ``` The merging algorithm: [docling/backend/pypdfium2\\_backend.py157-252](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L157-L252) The algorithm: 1. **Groups rows** based on vertical alignment (top/bottom within 0.5× height threshold) 2. **Merges horizontally** within each row (gap < 1.0× average height) 3. **Re-extracts text** from merged bounding boxes to avoid concatenation errors ### Thread Safety All pypdfium2 operations are protected by a global lock: [docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3) This lock is used throughout pypdfium2 operations: [docling/backend/pypdfium2\\_backend.py122-124](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L122-L124) [docling/backend/pypdfium2\\_backend.py348-349](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L348-L349) **Sources:** [docling/backend/pypdfium2\\_backend.py101-400](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L101-L400) [docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3) ## Coordinate System Transformations ### Origins and Conventions PDF and Docling use different coordinate systems: ``` ``` ### Transformation Implementation All backends convert coordinates from bottom-left (PDF native) to top-left (Docling standard): [docling/backend/docling\\_parse\\_v2\\_backend.py84-92](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L84-L92) The conversion formula for a bounding box: ``` l_new = l_old * scale_x r_new = r_old * scale_x t_new = (parser_height - t_old) * scale_y # Flip Y-axis b_new = (parser_height - b_old) * scale_y ``` ### Scaling Operations Backends support scaling for different DPI requirements:",
  "[docling/backend/docling\\_parse\\_v4\\_backend.py171-173](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L171-L173) Common scaling factors: - `scale=1.0`: Native 72 DPI - `scale=1.67`: \\~120 DPI (used by CodeFormulaModel) - `scale=2.0`: 144 DPI (used by TableStructureModel) - `scale=3.0`: 216 DPI (used by OCR models) **Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169) [docling/backend/pypdfium2\\_backend.py327-361](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L327-L361) ## Text Extraction and Cell Processing ### Common Interface All page backends implement these text extraction methods: | Method | Purpose | Return Type | | ------------------------ | ---------------------------- | ---------------------------- | | `get_text_cells()` | Get all text cells on page | `Iterable[TextCell]` | | `get_segmented_page()` | Get structured page data | `Optional[SegmentedPdfPage]` | | `get_text_in_rect(bbox)` | Extract text in bounding box | `str` | ### Text in Rect Implementation The `get_text_in_rect()` method finds text cells that overlap with a given bounding box: [docling/backend/docling\\_parse\\_v4\\_backend.py79-105](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L79-L105) The algorithm: 1. Iterate through all text cells on the page 2. Convert cell bbox to same coordinate system as query bbox 3. Calculate `intersection_over_self` ratio 4. Include cells with overlap > 0.5 (50% threshold) 5. Concatenate text with spaces ### SegmentedPdfPage Structure The `SegmentedPdfPage` object contains: ``` ``` DoclingParseV4 is the only backend that populates word and character cells. **Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py107-115](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L107-L115) [docling/backend/pypdfium2\\_backend.py304-322](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L304-L322) ## Image Rendering and Cropping ### Page Image Generation All backends implement `get_page_image()` with identical signatures: [docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169) The rendering process: 1. Determine cropbox (defaults to full page) 2. Calculate padbox in bottom-left coordinates for pypdfium2 3. Render at 1.5× the requested scale for sharpness 4. Resize down to the target scale This technique (render at higher resolution, then downsample) produces sharper images than rendering directly at the target scale. ### Bitmap Detection The `get_bitmap_rects()` method identifies image regions: [docling/backend/docling\\_parse\\_v4\\_backend.py117-133](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L117-L133) V4 uses docling-parse's bitmap resources, while PyPdfium2 uses pypdfium2's object API: [docling/backend/pypdfium2\\_backend.py254-289](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L254-L289) PyPdfium2 handles page rotation (90°, 180°, 270°) by adjusting bitmap coordinates. **Sources:** [docling/backend/pypdfium2\\_backend.py327-361](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L327-L361) [docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169) ## LayoutPostprocessor Integration",
  "### Role in PDF Processing `LayoutPostprocessor` is used by v2+ backends to refine layout predictions from the `LayoutModel`. While not directly part of the backend classes, it operates on data extracted by backends. ``` ``` ### Spatial Indexing LayoutPostprocessor uses R-tree spatial indexing for efficient overlap detection: [docling/utils/layout\\_postprocessor.py50-106](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L50-L106) Key features: - 2D R-tree for spatial queries - Interval trees for 1D overlap checks - Combined strategy for finding overlap candidates ### Overlap Resolution The postprocessor resolves overlapping clusters using Union-Find: [docling/utils/layout\\_postprocessor.py488-543](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L488-L543) Process: 1. Build spatial index of clusters 2. Use UnionFind to group overlapping clusters 3. Select best cluster from each group based on rules 4. Merge cells from removed clusters into the selected cluster **Sources:** [docling/utils/layout\\_postprocessor.py155-256](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L155-L256) [docling/models/layout\\_model.py208-212](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L208-L212) ## Thread Safety and Resource Management ### Lock Management pypdfium2 operations require thread-safe access via a global lock: [docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3) This lock is applied in all backends that use pypdfium2: [docling/backend/pypdfium2\\_backend.py376-378](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L376-L378) ### Resource Cleanup All backends implement `unload()` for proper resource cleanup: [docling/backend/docling\\_parse\\_v4\\_backend.py181-188](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L181-L188) The cleanup sequence: 1. **Page-level cleanup**: Unload individual pages from docling-parse 2. **Document-level cleanup**: Close pypdfium2 document with lock 3. **Stream cleanup**: Close BytesIO streams if applicable Proper cleanup prevents memory leaks and file descriptor exhaustion, especially important in multi-threaded or batch processing scenarios. ### Page Caching in V4 DoclingParseV4 implements page-level unloading: [docling/backend/docling\\_parse\\_v4\\_backend.py181-184](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L181-L184) This allows selective memory management - frequently accessed pages can remain loaded while others are unloaded to conserve memory. **Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py234-249](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L234-L249) [docling/backend/pypdfium2\\_backend.py395-399](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L395-L399) ## Backend Selection and Configuration ### Selection via FormatOption Backends are selected through `PdfFormatOption`: ``` ``` ### Testing Multiple Backends The test suite verifies all backends work correctly: [tests/test\\_options.py141-165](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L141-L165) This ensures API compatibility across all backend implementations. **Sources:** [tests/test\\_options.py141-165](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L141-L165) [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [PDF Processing Backends](#pdf-processing-backends.md) - [Purpose and Scope](#purpose-and-scope.md) - [Overview](#overview.md) - [Backend Architecture](#backend-architecture.md) - [DoclingParseV4Backend (Current Default)](#doclingparsev4backend-current-default.md) - [Key Features](#key-features.md) - [Implementation Details](#implementation-details.md) - [Usage Example](#usage-example.md) - [DoclingParseV2Backend (Sanitized Format)](#doclingparsev2backend-sanitized-format.md) - [Data Structure](#data-structure.md) - [Coordinate Scaling](#coordinate-scaling.md) - [DoclingParseBackend (Legacy v1)](#doclingparsebackend-legacy-v1.md) - [Differences from V2](#differences-from-v2.md) - [PyPdfiumBackend (Pure pypdfium2)](#pypdfiumbackend-pure-pypdfium2.md) - [Cell Extraction and Merging](#cell-extraction-and-merging.md) - [Thread Safety](#thread-safety.md) - [Coordinate System Transformations](#coordinate-system-transformations.md) - [Origins and Conventions](#origins-and-conventions.md) - [Transformation Implementation](#transformation-implementation.md) - [Scaling Operations](#scaling-operations.md) - [Text Extraction and Cell Processing](#text-extraction-and-cell-processing.md) - [Common Interface](#common-interface.md) - [Text in Rect Implementation](#text-in-rect-implementation.md) - [SegmentedPdfPage Structure](#segmentedpdfpage-structure.md) - [Image Rendering and Cropping](#image-rendering-and-cropping.md) - [Page Image Generation](#page-image-generation.md) - [Bitmap Detection](#bitmap-detection.md) - [LayoutPostprocessor Integration](#layoutpostprocessor-integration.md) - [Role in PDF Processing](#role-in-pdf-processing.md) - [Spatial Indexing](#spatial-indexing.md) - [Overlap Resolution](#overlap-resolution.md) - [Thread Safety and Resource Management](#thread-safety-and-resource-management.md) - [Lock Management](#lock-management.md) - [Resource Cleanup](#resource-cleanup.md) - [Page Caching in V4](#page-caching-in-v4.md) - [Backend Selection and Configuration](#backend-selection-and-configuration.md) - [Selection via FormatOption](#selection-via-formatoption.md) - [Testing Multiple Backends](#testing-multiple-backends.md)",
  "Document Chunking | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Document Chunking Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) ## Purpose and Scope Document chunking is the process of breaking down large documents into smaller, semantically meaningful segments that can be efficiently processed by downstream systems. In Docling, chunking operates on `DoclingDocument` objects after conversion is complete, transforming the hierarchical document structure into manageable chunks suitable for retrieval-augmented generation (RAG), vector database indexing, and other AI/ML workflows. This page covers: - Chunking architecture and placement in the Docling workflow - The `HierarchicalChunker` from `docling-core[chunking]` - Hybrid chunking strategies that combine structural and text-based approaches - Integration patterns with retrieval systems and vector databases For information about document conversion and the `DoclingDocument` format, see [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md). For export formats that precede chunking, see [Export Formats](docling-project/docling/8.1-export-formats.md). For framework-specific integrations that consume chunks, see [Framework Integrations](docling-project/docling/8.3-framework-integrations.md). Sources: [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) [mkdocs.yml77-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L77-L103) ## Chunking in the Docling Workflow Chunking is a post-conversion operation that transforms the unified `DoclingDocument` representation into smaller segments. The following diagram illustrates where chunking fits in the overall processing pipeline: ``` ``` **Chunking Workflow Position** The chunking layer operates after document conversion is complete and before downstream consumption. It accepts a `DoclingDocument` as input and produces a list of chunks, each containing: - Text content - Metadata (source location, document structure context) - Optional embeddings (when integrated with embedding models) Sources: [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) Diagram 1 and 2 from high-level overview ## Chunking Dependencies Docling's chunking functionality is provided by the `docling-core` library with the `chunking` extra: ``` ``` This dependency includes: - `HierarchicalChunker` - structure-aware chunking based on document hierarchy - `HybridChunker` - combines hierarchical and text-based chunking - Tokenizer integration for precise chunk size control - Metadata preservation for provenance tracking Sources: [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) ## Chunking Strategies Docling supports multiple chunking strategies through the `docling-core` library. The primary strategies are: ### Document Structure-Based Chunking",
  "| Strategy | Description | Use Case | | --------------------- | ----------------------------------------------------------------- | ------------------------------------------------------ | | **Hierarchical** | Chunks based on document structure (sections, paragraphs, tables) | Preserving document semantics, maintaining context | | **Hybrid** | Combines hierarchical structure with text-based splitting | Balancing structure preservation with size constraints | | **Metadata-Enriched** | Includes provenance and structural metadata in each chunk | Retrieval systems requiring context attribution | ### Chunking Parameters ``` ``` **Configuration Parameters** - `max_tokens`: Maximum number of tokens per chunk (typical: 512, 1024, 2048) - `overlap`: Number of overlapping tokens between adjacent chunks (typical: 50-200) - `tokenizer`: Tokenization method (e.g., `tiktoken` for GPT models, `transformers` tokenizers) - `merge_peers`: Whether to merge sibling elements in the document hierarchy Sources: [mkdocs.yml102-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L102-L103) ## HierarchicalChunker Implementation The `HierarchicalChunker` from `docling-core` is the primary chunking mechanism. It respects document structure while enforcing size constraints: ### Chunking Process Flow ``` ``` **Hierarchical Chunking Algorithm** 1. **Traverse Document Tree**: Walk the `DoclingDocument` hierarchy depth-first 2. **Respect Boundaries**: Avoid splitting structural elements (tables, figures) when possible 3. **Size Enforcement**: Split text elements that exceed `max_tokens` 4. **Metadata Preservation**: Each chunk maintains links to its source location 5. **Overlap Generation**: Create overlapping tokens between chunks for context continuity Sources: Examples in [mkdocs.yml102-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L102-L103) ## Hybrid Chunking Hybrid chunking combines the benefits of structure-aware and text-based chunking strategies: ``` ``` **Hybrid Chunking Workflow** The hybrid approach uses the `HybridChunker` from `docling-core`, which: 1. **Primary Pass**: Chunks based on document structure (sections, headings, lists) 2. **Secondary Pass**: For oversized structural chunks, applies text-based splitting 3. **Optimization**: Merges small adjacent chunks when they fit within size limits 4. **Metadata Merging**: Combines provenance data from merged elements ### Typical Usage Pattern Example chunking configuration for hybrid strategy: ``` ``` Sources: [mkdocs.yml102-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L102-L103) [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35) ## Integration with Retrieval Systems Document chunks serve as the input to retrieval systems. The typical integration pattern: ``` ``` **Retrieval-Augmented Generation (RAG) Pipeline** The standard RAG integration pattern with Docling chunking: 1. **Document Conversion**: Use `DocumentConverter` to parse source documents 2. **Chunking**: Apply `HierarchicalChunker` or `HybridChunker` to create semantically meaningful segments 3. **Embedding**: Generate vector embeddings for each chunk using embedding models 4. **Indexing**: Store chunks with embeddings in a vector database 5. **Retrieval**: Query the vector store to find relevant chunks 6. **Generation**: Pass retrieved chunks as context to an LLM for response generation Sources: [mkdocs.yml107-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L107-L127) [README.md37](https://github.com/docling-project/docling/blob/f7244a43/README.md#L37-L37) ## Framework Integration Examples Docling's chunking integrates seamlessly with popular AI frameworks: ### Integration Table",
  "| Framework | Chunk Consumer | Example Location | | -------------- | ----------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | | **LangChain** | `Document` objects with `page_content` and `metadata` | [examples/rag\\_langchain.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_langchain.ipynb) | | **LlamaIndex** | `Document` nodes in `VectorStoreIndex` | [examples/rag\\_llamaindex.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_llamaindex.ipynb) | | **Haystack** | `Document` objects for `DocumentStore` | [examples/rag\\_haystack.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_haystack.ipynb) | | **Milvus** | Text chunks with vector embeddings | [examples/rag\\_milvus.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_milvus.ipynb) | | **Weaviate** | Objects with `text` property | [examples/rag\\_weaviate.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_weaviate.ipynb) | | **OpenSearch** | Documents with `text` and `metadata` fields | [examples/rag\\_opensearch.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_opensearch.ipynb) | | **Qdrant** | Points with payload containing chunk text | [examples/retrieval\\_qdrant.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/retrieval_qdrant.ipynb) | Sources: [mkdocs.yml107-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L107-L127) ## Chunking with Metadata Preservation Each chunk produced by Docling's chunkers includes rich metadata for provenance tracking: ``` ``` **Metadata Fields in Chunks** Each chunk's metadata enables: - **Source Attribution**: Trace back to exact location in original document - **Context Reconstruction**: Recover document structure around the chunk - **Visual Grounding**: Link to bounding boxes for visual highlighting - **Hierarchical Navigation**: Understand chunk's position in document outline ### Example Chunk Metadata A chunk from a PDF document might have metadata like: ``` ``` Sources: Based on docling-core chunking API patterns, [mkdocs.yml75-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L75-L103) ## Usage Patterns ### Basic Chunking Example ``` ``` ### Advanced Chunking Configuration ``` ``` ### Integration with Vector Databases Example pattern for indexing chunks in a vector database: ``` ``` Sources: [mkdocs.yml102-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L102-L127) ## Serialization and Chunking Docling supports serializing chunks for storage and downstream processing. The relationship between serialization and chunking: ``` ``` **Chunking vs Serialization** - **Serialization** ([Export Formats](docling-project/docling/8.1-export-formats.md)): Converts entire `DoclingDocument` to a specific format (JSON, Markdown, HTML) - **Chunking**: Breaks document into smaller pieces with preserved metadata - **Combined Usage**: Often serialize chunks individually for vector database storage Sources: [mkdocs.yml100-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L103) [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35) ## Advanced Chunking Examples For detailed examples demonstrating chunking in real-world scenarios, refer to:",
  "| Example | Description | Location | | -------------------------- | -------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | **Hybrid Chunking** | Combining structural and text-based chunking | [examples/hybrid\\_chunking.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/hybrid_chunking.ipynb) | | **Advanced Chunking** | Custom chunking strategies and serialization | [examples/advanced\\_chunking\\_and\\_serialization.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/advanced_chunking_and_serialization.ipynb) | | **RAG with LangChain** | Using chunks for retrieval in LangChain | [examples/rag\\_langchain.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_langchain.ipynb) | | **RAG with LlamaIndex** | Indexing chunks in LlamaIndex | [examples/rag\\_llamaindex.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_llamaindex.ipynb) | | **Milvus Integration** | Storing chunks in Milvus vector database | [examples/rag\\_milvus.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_milvus.ipynb) | | **OpenSearch Integration** | Indexing chunks in OpenSearch | [examples/rag\\_opensearch.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_opensearch.ipynb) | Sources: [mkdocs.yml100-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L127) ## Best Practices ### Chunk Size Selection - **Small chunks (256-512 tokens)**: Better precision, more retrieval overhead - **Medium chunks (512-1024 tokens)**: Balanced approach for most use cases - **Large chunks (1024-2048 tokens)**: Better context, may lose precision ### Overlap Configuration - **No overlap (0 tokens)**: Fastest processing, risk of splitting concepts - **Small overlap (50-100 tokens)**: Minimal redundancy, some context preservation - **Medium overlap (100-200 tokens)**: Recommended for most scenarios - **Large overlap (200+ tokens)**: Maximum context continuity, higher storage cost ### Structure Preservation - Use `HierarchicalChunker` when document structure is important (research papers, technical docs) - Use `HybridChunker` for mixed content (long reports with varying section sizes) - Set `merge_peers=True` to combine related small elements (list items, short paragraphs) ### Metadata Utilization - Always preserve chunk metadata for provenance tracking - Use `headings` metadata for context-aware retrieval - Leverage `bbox` data for visual grounding in UI applications - Store `doc_items` paths for reconstructing document structure Sources: Based on chunking examples in [mkdocs.yml100-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L127) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Document Chunking](#document-chunking.md) - [Purpose and Scope](#purpose-and-scope.md) - [Chunking in the Docling Workflow](#chunking-in-the-docling-workflow.md) - [Chunking Dependencies](#chunking-dependencies.md) - [Chunking Strategies](#chunking-strategies.md) - [Document Structure-Based Chunking](#document-structure-based-chunking.md) - [Chunking Parameters](#chunking-parameters.md) - [HierarchicalChunker Implementation](#hierarchicalchunker-implementation.md) - [Chunking Process Flow](#chunking-process-flow.md) - [Hybrid Chunking](#hybrid-chunking.md) - [Typical Usage Pattern](#typical-usage-pattern.md) - [Integration with Retrieval Systems](#integration-with-retrieval-systems.md) - [Framework Integration Examples](#framework-integration-examples.md) - [Integration Table](#integration-table.md) - [Chunking with Metadata Preservation](#chunking-with-metadata-preservation.md) - [Example Chunk Metadata](#example-chunk-metadata.md) - [Usage Patterns](#usage-patterns.md) - [Basic Chunking Example](#basic-chunking-example.md) - [Advanced Chunking Configuration](#advanced-chunking-configuration.md) - [Integration with Vector Databases](#integration-with-vector-databases.md) - [Serialization and Chunking](#serialization-and-chunking.md) - [Advanced Chunking Examples](#advanced-chunking-examples.md) - [Best Practices](#best-practices.md) - [Chunk Size Selection](#chunk-size-selection.md) - [Overlap Configuration](#overlap-configuration.md) - [Structure Preservation](#structure-preservation.md) - [Metadata Utilization](#metadata-utilization.md)",
  "Deployment | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Deployment Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) This document covers deploying Docling in production environments, focusing on Docker containerization, model artifact management, and performance optimization. Key topics include the `docling-tools` CLI for model management, offline deployment strategies, and environment configuration for scalable document processing systems. For configuration details, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md). For model specifications, see [AI/ML Models](docling-project/docling/4-aiml-models.md). ## Docker Deployment Docling supports containerized deployment through Docker, with pre-built images available on Quay.io and GHCR.io. The deployment strategy involves managing AI model artifacts, configuring environment variables, and optimizing resource usage for production workloads. ### Container Architecture ``` ``` **Container Build Strategy**: The container starts with a minimal Python base image, installs Docling with required dependencies, configures cache directories via environment variables, and pre-downloads models using `docling-tools`. At runtime, models are loaded on-demand based on the configured pipelines. Sources: [pyproject.toml1-90](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L90) [docling/cli/models.py54-127](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L127) [docling/utils/model\\_downloader.py30-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L158) ### Environment Configuration Docling uses several environment variables for deployment configuration: | Variable | Purpose | Code Reference | Production Value | | --------------------- | ----------------------- | -------------------------------- | -------------------- | | `DOCLING_CACHE_DIR` | Base cache directory | `settings.cache_dir` | Persistent volume | | `HF_HOME` | HuggingFace model cache | Used by `transformers` | Persistent volume | | `TORCH_HOME` | PyTorch model cache | Used by `torch` | Persistent volume | | `OMP_NUM_THREADS` | OpenMP thread limit | `AcceleratorOptions` | CPU cores / 2 | | `DOCLING_NUM_THREADS` | Docling thread budget | `AcceleratorOptions.num_threads` | CPU cores | | `DOCLING_DEVICE` | Compute device | `AcceleratorOptions.device` | `cpu`, `cuda`, `mps` | The `settings` object in `docling.datamodel.settings` provides centralized configuration management with environment variable overrides. Sources: [pyproject.toml44-76](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L44-L76) [docling/datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/settings.py) ## Model Artifacts Management Docling requires several AI models for document processing. The `docling-tools` CLI provides model download and management capabilities for production deployments. ### Model Download CLI The `docling-tools download` command pre-downloads models for offline use:",
  "``` ``` **CLI Usage**: The `docling-tools download` command supports selective model downloading via the `models` argument or `--all` flag. The `--force` flag enables re-downloading, and `--quiet` suppresses progress output for CI/CD environments. Sources: [docling/cli/models.py54-136](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L136) [docling/utils/model\\_downloader.py30-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L158) ### Model Storage Architecture ``` ``` **Model Storage Conventions**: Each model type defines a `_model_repo_folder` class attribute (e.g., `RapidOcrModel._model_repo_folder = \"RapidOcr\"`) used for organizing downloaded files. HuggingFace models use a `repo_cache_folder` property that sanitizes repo IDs by replacing `/` with `--`. Sources: [docling/utils/model\\_downloader.py1-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L1-L158) [docling/models/rapid\\_ocr\\_model.py37-224](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L37-L224) [docling/models/picture\\_description\\_vlm\\_model.py49-53](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L49-L53) ### Offline Mode For air-gapped or offline deployments, models must be pre-downloaded: ``` ``` At runtime, configure Docling to use the offline model cache: ``` ``` The `artifacts_path` parameter is passed to model constructors and overrides automatic model downloading. Each model's `__init__` method checks if `artifacts_path` is provided before attempting downloads. Sources: [docling/cli/models.py54-127](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L127) [docling/utils/model\\_downloader.py30-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L158) [docling/models/rapid\\_ocr\\_model.py82-150](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L82-L150) ### RapidOCR Model Management RapidOCR requires additional consideration for offline deployment as it downloads models from ModelScope: ``` ``` **RapidOCR Architecture**: RapidOCR supports two backends (`onnxruntime` and `torch`), each requiring separate model files. The `RapidOcrModel._default_models` dictionary maps backend types to model URLs and paths. The `download_models()` static method handles offline preparation. Sources: [docling/models/rapid\\_ocr\\_model.py36-224](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L36-L224) ## Performance Considerations ### Threading Configuration Docling uses multiple threading mechanisms that must be coordinated in production: | Threading Layer | Configuration | Purpose | | ------------------ | --------------------- | -------------------------------- | | OpenMP | `OMP_NUM_THREADS` | Controls NumPy/SciPy parallelism | | Docling | `DOCLING_NUM_THREADS` | Controls internal threading | | AcceleratorOptions | `num_threads` | Passed to ONNX models | The `AcceleratorOptions` class in pipeline options provides thread budget configuration: ``` ``` For CPU-bound workloads, set `OMP_NUM_THREADS` and `num_threads` to half the available cores to prevent oversubscription. Sources: [docling/models/rapid\\_ocr\\_model.py82-200](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L82-L200) ### Memory Management Model loading can consume significant memory. Docling provides several strategies for memory optimization: 1. **Pipeline Caching**: `DocumentConverter` caches pipeline instances by configuration hash to avoid redundant model loading 2. **Lazy Loading**: Models are only loaded when needed for specific document formats 3. **Shared Models**: Multiple `DocumentConverter` instances can share underlying model instances ``` ```",
  "The threading lock in model initialization (`_model_init_lock` in [docling/models/picture\\_description\\_vlm\\_model.py21](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L21-L21)) prevents race conditions during parallel initialization. Sources: [docling/models/picture\\_description\\_vlm\\_model.py20-78](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L20-L78) ### Device Selection The `AcceleratorDevice` enum supports multiple compute backends: ``` ``` The `decide_device()` function in `accelerator_utils` resolves device strings to actual hardware availability. Sources: [docling/models/rapid\\_ocr\\_model.py109](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L109-L109) [docling/models/picture\\_description\\_vlm\\_model.py54](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L54-L54) ## Performance Considerations ### CPU Optimization The Dockerfile configures PyTorch for CPU-only operation to reduce image size and memory requirements: ``` ``` This configuration is suitable for CPU-based inference but may require modification for GPU-accelerated deployments. Sources: [Dockerfile10-12](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L10-L12) ### Memory Management Environment variables are configured to use temporary storage for framework caches, reducing persistent storage requirements: ``` ``` In production, these should be mapped to persistent volumes to avoid model re-downloads on container restarts. Sources: [Dockerfile14-15](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L14-L15) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Deployment](#deployment.md) - [Docker Deployment](#docker-deployment.md) - [Container Architecture](#container-architecture.md) - [Environment Configuration](#environment-configuration.md) - [Model Artifacts Management](#model-artifacts-management.md) - [Model Download CLI](#model-download-cli.md) - [Model Storage Architecture](#model-storage-architecture.md) - [Offline Mode](#offline-mode.md) - [RapidOCR Model Management](#rapidocr-model-management.md) - [Performance Considerations](#performance-considerations.md) - [Threading Configuration](#threading-configuration.md) - [Memory Management](#memory-management.md) - [Device Selection](#device-selection.md) - [Performance Considerations](#performance-considerations-1.md) - [CPU Optimization](#cpu-optimization.md) - [Memory Management](#memory-management-1.md)",
  "Standard PDF Pipeline | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Standard PDF Pipeline Relevant source files",
  "- [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py) ## Purpose and Scope The `StandardPdfPipeline` implements a sequential, single-threaded processing pipeline for PDF documents that orchestrates five specialized model stages to extract and structure document content. This pipeline processes pages one batch at a time, applying OCR, layout analysis, table structure detection, and assembly operations in sequence. For multi-threaded parallel processing with improved performance, see [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md). For end-to-end vision-language model processing, see [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md). For the base pipeline architecture and three-phase execution model, see [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md). **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py1-243](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L1-L243) --- ## Pipeline Architecture ### Class Hierarchy The `StandardPdfPipeline` inherits from `PaginatedPipeline`, which provides page-by-page iteration and backend management: ``` ```",
  "**Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py34-35](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L34-L35) [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) [docling/pipeline/base\\_pipeline.py184-320](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L184-L320) ### Pipeline Components The pipeline initializes two model sequences during construction: ``` ``` The `build_pipe` processes pages sequentially through five stages ([standard\\_pdf\\_pipeline.py51-75](https://github.com/docling-project/docling/blob/f7244a43/standard_pdf_pipeline.py#L51-L75)), while the `enrichment_pipe` operates on individual document items after assembly ([standard\\_pdf\\_pipeline.py77-90](https://github.com/docling-project/docling/blob/f7244a43/standard_pdf_pipeline.py#L77-L90)). **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py51-90](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L51-L90) [docling/pipeline/base\\_pipeline.py135-177](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L135-L177) --- ## Five-Stage Processing The `build_pipe` sequence implements a fixed order of operations. Each model receives an `Iterable[Page]` and must yield the same pages after processing. ### Stage 1: Page Preprocessing **Class:** `PagePreprocessingModel`\\ **Location:** [docling/models/page\\_preprocessing\\_model.py25-146](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py#L25-L146) Responsibilities: - Generate page images at requested scales (`page.get_image(scale)`) - Extract text cells from PDF backend (`page._backend.get_segmented_page()`) - Calculate parse quality scores using text heuristics - Store results in `page.parsed_page` and `page._image_cache` The preprocessing model populates page images at multiple scales and extracts programmatic text cells from the backend: ``` ``` Configuration via `PagePreprocessingOptions`: - `images_scale`: Output image resolution multiplier - `skip_cell_extraction`: Skip cell parsing for VLM-only workflows **Sources:** [docling/models/page\\_preprocessing\\_model.py37-118](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py#L37-L118) [docling/pipeline/standard\\_pdf\\_pipeline.py53-57](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L53-L57) ### Stage 2: OCR (Optical Character Recognition) **Class:** `BaseOcrModel` (abstract)\\ **Implementations:** `RapidOcrModel`, `EasyOcrModel`, `TesseractOcrModel`, `OcrAutoModel`\\ **Location:** [docling/models/base\\_ocr\\_model.py24-228](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L24-L228) Responsibilities: - Detect bitmap-heavy regions using `get_ocr_rects()` ([base\\_ocr\\_model.py40-112](https://github.com/docling-project/docling/blob/f7244a43/base_ocr_model.py#L40-L112)) - Run OCR engine on high-resolution crops of bitmap areas - Filter OCR results to avoid duplicating programmatic text - Append new `TextCell` objects to `page.parsed_page.textline_cells` OCR processing workflow: ``` ``` The OCR model factory selects the appropriate implementation based on `OcrOptions`: | Option Type | Model Class | Engine | | --------------------- | ------------------- | ------------------------------ | | `OcrAutoOptions` | `OcrAutoModel` | Auto-selects based on platform | | `RapidOcrOptions` | `RapidOcrModel` | ONNX or PyTorch backend | | `EasyOcrOptions` | `EasyOcrModel` | Deep learning OCR | | `TesseractOcrOptions` | `TesseractOcrModel` | Tesseract binding or CLI |",
  "**Sources:** [docling/models/base\\_ocr\\_model.py40-217](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L40-L217) [docling/pipeline/standard\\_pdf\\_pipeline.py49-59](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L49-L59) [docling/models/easyocr\\_model.py28-201](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py#L28-L201) ### Stage 3: Layout Analysis **Class:** `LayoutModel`\\ **Model:** Heron (DocLayoutModel for legacy)\\ **Location:** [docling/models/layout\\_model.py28-238](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L28-L238) Responsibilities: - Predict bounding boxes and labels for document elements - Apply `LayoutPostprocessor` to resolve overlaps and refine clusters - Assign confidence scores to predictions - Store results in `page.predictions.layout` as `LayoutPrediction` The layout model identifies document structure using computer vision: ``` ``` Detected element labels (from `DocItemLabel`): - **Text elements**: `TEXT`, `SECTION_HEADER`, `LIST_ITEM`, `CODE`, `FORMULA`, `CAPTION`, `FOOTNOTE` - **Page decorations**: `PAGE_HEADER`, `PAGE_FOOTER` - **Figures**: `PICTURE` - **Tables**: `TABLE`, `DOCUMENT_INDEX` - **Containers**: `FORM`, `KEY_VALUE_REGION` Each cluster contains matched cells from earlier stages, enabling text extraction per element. **Sources:** [docling/models/layout\\_model.py148-237](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L148-L237) [docling/pipeline/standard\\_pdf\\_pipeline.py60-65](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L60-L65) ### Stage 4: Table Structure Detection **Class:** `TableStructureModel`\\ **Model:** TableFormer (FAST or ACCURATE mode)\\ **Location:** [docling/models/table\\_structure\\_model.py29-305](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L29-L305) Responsibilities: - Extract table structure for clusters labeled `TABLE` or `DOCUMENT_INDEX` - Run TableFormer model on table crops at 144 DPI (2x scale) - Parse OTSL sequences and cell coordinates - Match cells to table grid using word-level tokens when available - Store results in `page.predictions.tablestructure.table_map` Table processing workflow: ``` ``` The model supports two modes via `TableFormerMode`: - **FAST**: Faster inference, lower accuracy - **ACCURATE**: Slower inference, higher accuracy Cell matching can be toggled via `do_cell_matching` option: - `True`: Match predicted cells to source tokens (default) - `False`: Extract text directly from predicted bounding boxes **Sources:** [docling/models/table\\_structure\\_model.py170-304](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L170-L304) [docling/pipeline/standard\\_pdf\\_pipeline.py66-72](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L66-L72) ### Stage 5: Page Assembly **Class:** `PageAssembleModel`\\ **Location:** [docling/models/page\\_assemble\\_model.py30-157](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py#L30-L157) Responsibilities: - Convert layout clusters into typed `PageElement` objects - Assemble text from cells within each cluster - Handle text sanitization (dehyphenation, Unicode normalization) - Populate `page.assembled` with categorized elements (body, headers) Assembly creates structured elements: ``` ``` Element types created: - `TextElement`: Text blocks, headers, captions, formulas, code - `Table`: Tables with structure (OTSL, cells, grid dimensions) - `FigureElement`: Images and diagrams - `ContainerElement`: Forms and key-value regions",
  "**Sources:** [docling/models/page\\_assemble\\_model.py67-156](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py#L67-L156) [docling/pipeline/standard\\_pdf\\_pipeline.py73-75](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L73-L75) --- ## Model Integration ### Pipeline Construction The `StandardPdfPipeline.__init__()` method initializes models with shared configuration: ``` ``` Configuration flow: ``` ``` All models receive `AcceleratorOptions` to control device placement (CPU/CUDA/MPS) and thread counts. **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py35-90](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L35-L90) [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) ### OCR Model Selection The OCR model is created via factory pattern: ``` ``` The factory uses `OcrOptions.kind` to select the implementation. `OcrAutoModel` provides platform-specific fallbacks. **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py115-124](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L115-L124) [docling/models/factories.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/factories.py) ### Artifact Management Models download artifacts from HuggingFace if `artifacts_path` is not provided: ``` ``` Artifacts are cached at `settings.cache_dir / \"models\"` by default. The pipeline passes `self.artifacts_path` to all models, which is resolved from `PipelineOptions.artifacts_path` or environment variable. **Sources:** [docling/pipeline/base\\_pipeline.py50-60](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L50-L60) [docling/models/table\\_structure\\_model.py92-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L92-L101) [docling/models/layout\\_model.py90-102](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L90-L102) --- ## Document Assembly ### Cross-Page Aggregation After all pages complete the build pipeline, `_assemble_document()` aggregates results: ``` ``` **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py134-234](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L134-L234) ### Reading Order Construction The `ReadingOrderModel` constructs the final `DoclingDocument` hierarchy from assembled elements. It applies heuristics to determine document structure (sections, lists, hierarchical nesting). **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py153](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L153-L153) [docling/models/readingorder\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/readingorder_model.py) ### Image Generation The pipeline can generate embedded images for visualization: | Option | Target | Scale | | ------------------------- | ------------------------ | -------------- | | `generate_page_images` | Full page images | `images_scale` | | `generate_picture_images` | Cropped picture elements | `images_scale` | | `generate_table_images` | Cropped table elements | `images_scale` | Images are cropped from `page.image` using element provenance bounding boxes: ``` ``` **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py156-203](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L156-L203) ### Confidence Scoring The pipeline aggregates confidence metrics from page-level predictions: ``` ``` - `layout_score`: Mean confidence from layout model predictions - `parse_score`: 10th percentile of text quality scores (emphasizes problems) - `table_score`: Mean table structure confidence - `ocr_score`: Mean OCR confidence (only for OCR'd cells)",
  "**Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py204-232](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L204-L232) --- ## Configuration and Options ### PdfPipelineOptions The `PdfPipelineOptions` class (inherits from `PaginatedPipelineOptions`) controls all aspects of the pipeline: ``` ``` **Sources:** [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) [docling/pipeline/standard\\_pdf\\_pipeline.py35-38](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L35-L38) ### Usage Example ``` ``` **Sources:** [tests/test\\_options.py98-105](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L98-L105) [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) --- ## Comparison with Other Pipelines ### StandardPdfPipeline vs ThreadedStandardPdfPipeline | Aspect | StandardPdfPipeline | ThreadedStandardPdfPipeline | | --------------- | -------------------------------- | ------------------------------------------- | | **Processing** | Sequential (one batch at a time) | Parallel (pipeline stages run concurrently) | | **Threading** | Single-threaded | Multi-threaded with `ThreadedQueue` buffers | | **Performance** | Simpler, predictable timing | Higher throughput for multi-page documents | | **Memory** | Lower peak memory | Higher due to queues and concurrent pages | | **Debugging** | Easier to debug | More complex due to concurrency | | **Use case** | Small documents, debugging | Production, large documents | The threaded variant ([threaded\\_standard\\_pdf\\_pipeline.py296-648](https://github.com/docling-project/docling/blob/f7244a43/threaded_standard_pdf_pipeline.py#L296-L648)) maintains the same five-stage model sequence but wraps each in a `ThreadedPipelineStage` with worker threads and bounded queues. **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py34](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L34-L34) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296-648](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L648) ### StandardPdfPipeline vs VlmPipeline | Aspect | StandardPdfPipeline | VlmPipeline | | ------------ | ----------------------------------------- | --------------------------------- | | **Approach** | Multi-model stages (OCR + layout + table) | End-to-end vision-language model | | **Models** | Heron, TableFormer, OCR engine | GraniteDocling, SmolDocling, etc. | | **Output** | Rich `DoclingDocument` with structure | DOCTAGS, Markdown, or HTML | | **Accuracy** | High for structured documents | Best for complex visual layouts | | **Speed** | Moderate (5 stages) | Varies by VLM model size | | **Requires** | PDF backend with text | Only images | VLM pipeline ([vlm\\_pipeline.py50-389](https://github.com/docling-project/docling/blob/f7244a43/vlm_pipeline.py#L50-L389)) bypasses traditional document understanding models in favor of large vision-language models that directly generate structured output. **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py34](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L34-L34) [docling/pipeline/vlm\\_pipeline.py50-389](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L389) ### Backend Support The `StandardPdfPipeline` requires a `PdfDocumentBackend`: ``` ``` Supported backends: - `DoclingParseV4DocumentBackend` (default) - Character/word/line granularity - `DoclingParseV2DocumentBackend` - Sanitized format - `DoclingParseDocumentBackend` (legacy) - v1 format - `PyPdfiumDocumentBackend` - Pure pypdfium2",
  "**Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py240-243](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L240-L243) [docling/backend/pdf\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pdf_backend.py) --- ## Processing Flow Summary The complete end-to-end flow for a single document: ``` ``` **Sources:** [docling/pipeline/base\\_pipeline.py197-283](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L197-L283) [docling/pipeline/standard\\_pdf\\_pipeline.py126-234](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L126-L234) [docling/pipeline/base\\_pipeline.py93-115](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L93-L115) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Standard PDF Pipeline](#standard-pdf-pipeline.md) - [Purpose and Scope](#purpose-and-scope.md) - [Pipeline Architecture](#pipeline-architecture.md) - [Class Hierarchy](#class-hierarchy.md) - [Pipeline Components](#pipeline-components.md) - [Five-Stage Processing](#five-stage-processing.md) - [Stage 1: Page Preprocessing](#stage-1-page-preprocessing.md) - [Stage 2: OCR (Optical Character Recognition)](#stage-2-ocr-optical-character-recognition.md) - [Stage 3: Layout Analysis](#stage-3-layout-analysis.md) - [Stage 4: Table Structure Detection](#stage-4-table-structure-detection.md) - [Stage 5: Page Assembly](#stage-5-page-assembly.md) - [Model Integration](#model-integration.md) - [Pipeline Construction](#pipeline-construction.md) - [OCR Model Selection](#ocr-model-selection.md) - [Artifact Management](#artifact-management.md) - [Document Assembly](#document-assembly.md) - [Cross-Page Aggregation](#cross-page-aggregation.md) - [Reading Order Construction](#reading-order-construction.md) - [Image Generation](#image-generation.md) - [Confidence Scoring](#confidence-scoring.md) - [Configuration and Options](#configuration-and-options.md) - [PdfPipelineOptions](#pdfpipelineoptions.md) - [Usage Example](#usage-example.md) - [Comparison with Other Pipelines](#comparison-with-other-pipelines.md) - [StandardPdfPipeline vs ThreadedStandardPdfPipeline](#standardpdfpipeline-vs-threadedstandardpdfpipeline.md) - [StandardPdfPipeline vs VlmPipeline](#standardpdfpipeline-vs-vlmpipeline.md) - [Backend Support](#backend-support.md) - [Processing Flow Summary](#processing-flow-summary.md)",
  "Threaded PDF Pipeline | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Threaded PDF Pipeline Relevant source files",
  "- [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py) ## Purpose and Scope The **Threaded PDF Pipeline** is a high-performance, multi-threaded implementation of PDF document processing that parallelizes work across multiple pipeline stages. It processes pages through five sequential stages (preprocessing, OCR, layout analysis, table structure detection, and assembly) using bounded queues and dedicated worker threads for each stage, enabling concurrent processing of multiple pages at different stages simultaneously. This pipeline extends the standard sequential PDF processing flow with thread-based parallelism while maintaining strict isolation between concurrent document conversions. For the sequential single-threaded version, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md). For VLM-based PDF processing, see [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md). **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py1-16](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L1-L16) ## Architecture Overview",
  "The `ThreadedStandardPdfPipeline` class extends `ConvertPipeline` and implements a stage-based architecture where each stage runs in its own worker thread. Pages flow through the pipeline wrapped in `ThreadedItem` envelopes, traveling through `ThreadedQueue` instances that provide backpressure and flow control. ``` ``` **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296-310](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L310) [docling/pipeline/base\\_pipeline.py135-163](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L135-L163) ## Core Components ### ThreadedQueue The `ThreadedQueue` class implements a bounded queue with explicit close semantics. It provides blocking `put()` and `get_batch()` operations with timeout support, and propagates closure downstream to enable deterministic shutdown. | Method | Description | Blocking Behavior | | -------------------------- | --------------------------- | -------------------------------------------- | | `put(item, timeout)` | Enqueue single item | Blocks until space available or queue closed | | `get_batch(size, timeout)` | Retrieve up to `size` items | Blocks until ≥1 item or queue closed | | `close()` | Mark queue as closed | Wakes all waiting threads | | `closed` (property) | Check if queue is closed | Non-blocking | ``` ``` **Key implementation details:** - **Bounded capacity:** Uses `deque` with `_max` size constraint - **Condition variables:** `_not_full` and `_not_empty` coordinate producer/consumer threads - **Timeout support:** Both operations accept optional timeout for bounded waiting - **Close propagation:** Once closed, all operations immediately return/fail **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py96-163](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L96-L163) ### ThreadedPipelineStage Each `ThreadedPipelineStage` wraps a model (e.g., `LayoutModel`, `TableStructureModel`) and runs it in a dedicated worker thread. The stage pulls batches from its `input_queue`, processes them through the model, and emits results to downstream `output_queue`(s). **Stage configuration:** | Parameter | Purpose | Typical Value | | ---------------- | ----------------------------- | ----------------------------------------------------- | | `name` | Stage identifier for logging | \"preprocess\", \"ocr\", \"layout\", \"table\", \"assemble\" | | `model` | The actual processing model | `LayoutModel`, `TableStructureModel`, etc. | | `batch_size` | Max items to process together | 1 for preprocessing/assembly, configurable for others | | `batch_timeout` | Max wait time for batch fill | `ThreadedPdfPipelineOptions.batch_timeout_seconds` | | `queue_max_size` | Bounded queue capacity | `ThreadedPdfPipelineOptions.queue_max_size` | ``` ``` **Error handling:** If a model raises an exception, the stage marks all items in that run as failed (`is_failed=True`, `error` set) but continues processing other runs. **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py165-280](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L165-L280) ### ThreadedItem Envelope Pages travel through the pipeline wrapped in `ThreadedItem` dataclasses, which carry metadata for routing and error tracking: ``` ``` **Key design decision:** The `run_id` is a monotonic counter (from `itertools.count`) rather than using `id(conv_res)`, preventing clashes after garbage collection in long-running pipelines. **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py59-69](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L59-L69) ### RunContext Each call to `execute()` creates a fresh `RunContext` containing the complete stage graph, queues, and wiring for that specific document conversion. This ensures **per-run isolation** — concurrent conversions never share mutable state. ``` ``` **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py282-289](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L282-L289) ## Pipeline Stage Graph The pipeline instantiates five stages in a linear topology, with each stage's output feeding the next stage's input: ``` ```",
  "**Wiring details (from `_create_run_ctx()`):** 1. **Preprocess stage:** `batch_size=1`, runs `PagePreprocessingModel` (image generation, cell extraction) 2. **OCR stage:** `batch_size=ocr_batch_size` (configurable), runs `BaseOcrModel` implementations 3. **Layout stage:** `batch_size=layout_batch_size`, runs `LayoutModel` (Heron) 4. **Table stage:** `batch_size=table_batch_size`, runs `TableStructureModel` (TableFormer) 5. **Assemble stage:** `batch_size=1`, runs `PageAssembleModel` (constructs page elements) **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py379-426](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L379-L426) ## Model Initialization Models are instantiated **once per pipeline instance** in `_init_models()`, not per document conversion. This amortizes model loading costs across multiple documents: ``` ``` **Model sharing:** Worker threads read model parameters but never mutate them, enabling safe concurrent access. The models themselves handle any internal thread-safety (e.g., PyTorch models). **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py311-362](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L311-L362) ## Execution Flow The `_build_document()` method implements an **interleaved feed-and-drain pattern** to maximize throughput while respecting bounded queue capacity: ``` ``` **Key invariants:** 1. **Non-blocking feed:** `put(timeout=0.0)` ensures the main thread doesn't block waiting for space 2. **Short drain timeout:** `get_batch(timeout=0.05)` allows rapid switching between feed and drain 3. **Close propagation:** Closing the first queue triggers cascade through all downstream queues 4. **Failure safety:** If output queue closes early, missing pages are marked as failed **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py429-507](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L429-L507) ## Thread Safety and Isolation ### Per-Run Isolation Each `execute()` call creates a fresh set of queues and worker threads, ensuring zero shared mutable state between concurrent document conversions: ``` ``` **Isolation guarantees:** - **Separate queues:** Each execution has its own `ThreadedQueue` instances - **Separate threads:** Worker threads are created and joined per execution - **Run ID filtering:** Stages ignore items from other runs (defensive check) - **No shared state:** Only models are shared, accessed read-only ### Deterministic Run IDs The `run_id` is generated from a monotonic counter (`itertools.count`) initialized at pipeline creation: ``` ``` This prevents ID clashes that could occur if using `id(conv_res)` after garbage collection in long-running processes. **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py302](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L302-L302) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py431](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L431-L431) ## Configuration Options The pipeline is configured via `ThreadedPdfPipelineOptions`, which extends `PdfPipelineOptions` with threading-specific parameters: ``` ``` ### Key Configuration Parameters | Parameter | Description | Default | Impact | | ----------------------- | ----------------------------------------- | ------- | ----------------------------------------------- | | `ocr_batch_size` | Max pages processed together in OCR stage | 8 | Higher = better GPU utilization, more memory | | `layout_batch_size` | Max pages for layout model batching | 8 | Higher = better throughput for layout inference | | `table_batch_size` | Max pages for table structure batching | 4 | Lower = less memory per batch | | `queue_max_size` | Bounded capacity per queue | 10 | Higher = more buffering, more memory | | `batch_timeout_seconds` | Max wait for batch to fill | 0.1s | Lower = faster empty queue detection | ### Inherited Options From `PdfPipelineOptions`:",
  "- `do_ocr`, `ocr_options` — OCR configuration (see [OCR Models](docling-project/docling/4.1-ocr-models.md)) - `do_table_structure`, `table_structure_options` — Table detection (see [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md)) - `layout_options` — Layout model selection - `images_scale` — Image resolution scaling - `generate_page_images`, `generate_picture_images` — Image generation flags - `do_code_enrichment`, `do_formula_enrichment` — Enrichment flags (see [Enrichment Models](docling-project/docling/4.4-enrichment-models.md)) - `accelerator_options` — Device and threading config **Sources:** [docling/datamodel/pipeline\\_options.py171-215](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L171-L215) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py299-301](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L299-L301) ## Result Integration After all pages complete processing, `_integrate_results()` merges the successful and failed pages back into `conv_res`: ``` ``` **Status determination:** - `SUCCESS` — All pages processed successfully - `PARTIAL_SUCCESS` — Some pages failed (0 < success < total) - `FAILURE` — All pages failed or no pages processed **Cleanup operations:** 1. Clear image caches if not needed: `p._image_cache = {}` 2. Unload page backends if not needed: `p._backend.unload()` 3. Delete parsed pages if not configured: `del p.parsed_page` **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py509-534](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L509-L534) ## Document Assembly and Enrichment After `_build_document()` completes, the pipeline invokes inherited methods: ### \\_assemble\\_document() Aggregates page-level elements into a document-level structure and applies reading order: 1. Collect all `p.assembled.body`, `p.assembled.headers`, `p.assembled.elements` from pages 2. Create `conv_res.assembled` with aggregated lists 3. Invoke `ReadingOrderModel` to construct hierarchical `DoclingDocument` 4. Generate page/picture/table images if configured 5. Compute document-level confidence scores (mean layout/OCR/table scores) **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py536-628](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L536-L628) ### \\_enrich\\_document() Inherited from `ConvertPipeline`, runs enrichment models on assembled document items: - **CodeFormulaModel** — LaTeX extraction from code/formula images (if enabled) - **DocumentPictureClassifier** — Figure classification (if enabled) - **PictureDescriptionModel** — Image captioning (if enabled) Enrichment operates on `conv_res.document` after assembly is complete, iterating over document items in batches. **Sources:** [docling/pipeline/base\\_pipeline.py93-115](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L93-L115) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py339-362](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L339-L362) ## Performance Characteristics ### Advantages Over Sequential Pipeline 1. **Parallelism:** Multiple pages can be at different stages simultaneously 2. **GPU utilization:** Batching in layout/table stages maximizes GPU efficiency 3. **Pipeline balancing:** Slow stages don't block fast stages (up to queue capacity) 4. **Minimal overhead:** Bounded queues prevent unbounded memory growth ### Throughput Analysis For a document with `N` pages and 5 stages: - **Sequential pipeline:** Processes `N` pages serially through all stages - **Threaded pipeline:** Can process up to `min(N, queue_capacity * num_stages)` pages concurrently **Example:** With `queue_max_size=10` and 5 stages, up to 50 pages can be \"in flight\" simultaneously across the pipeline. ### Memory Footprint Memory usage scales with:",
  "1. **Queue capacity:** `queue_max_size * num_stages * size_per_page` 2. **Batch sizes:** Larger batches require more GPU memory 3. **Image caching:** `images_scale` parameter affects per-page image size **Trade-off:** Higher `queue_max_size` improves throughput but increases memory consumption. **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py96-163](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L96-L163) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py379-426](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L379-L426) ## Usage Example ``` ``` **Note:** The threaded pipeline is **not** the default; you must explicitly specify `pipeline_cls=ThreadedStandardPdfPipeline` in the format options. **Sources:** [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296-298](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L298) [tests/test\\_options.py25-41](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L25-L41) ## Comparison with Standard Pipeline | Aspect | StandardPdfPipeline | ThreadedStandardPdfPipeline | | --------------------- | --------------------------- | --------------------------------- | | **Execution model** | Sequential (page-by-page) | Concurrent (stage-parallel) | | **Thread usage** | Single-threaded | 5 worker threads per execution | | **Batching strategy** | Per-stage generator chains | Bounded queues with timeouts | | **Isolation** | Implicit (single execution) | Explicit (per-run queues/threads) | | **Memory profile** | Lower (one page at a time) | Higher (multiple pages in-flight) | | **Throughput** | Lower (no parallelism) | Higher (stage pipelining) | | **Complexity** | Simpler (linear flow) | More complex (threading, queues) | | **Default choice** | Yes (for most PDFs) | No (opt-in for performance) | **When to use threaded pipeline:** - Large documents (100+ pages) where throughput matters - GPU-accelerated environments where batching is beneficial - Production deployments with sufficient memory headroom **When to use standard pipeline:** - Small documents (<20 pages) - Memory-constrained environments - Simpler debugging/profiling requirements - Default use cases **Sources:** [docling/pipeline/standard\\_pdf\\_pipeline.py34-243](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L34-L243) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296-648](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L648) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Threaded PDF Pipeline](#threaded-pdf-pipeline.md) - [Purpose and Scope](#purpose-and-scope.md) - [Architecture Overview](#architecture-overview.md) - [Core Components](#core-components.md) - [ThreadedQueue](#threadedqueue.md) - [ThreadedPipelineStage](#threadedpipelinestage.md) - [ThreadedItem Envelope](#threadeditem-envelope.md) - [RunContext](#runcontext.md) - [Pipeline Stage Graph](#pipeline-stage-graph.md) - [Model Initialization](#model-initialization.md) - [Execution Flow](#execution-flow.md) - [Thread Safety and Isolation](#thread-safety-and-isolation.md) - [Per-Run Isolation](#per-run-isolation.md) - [Deterministic Run IDs](#deterministic-run-ids.md) - [Configuration Options](#configuration-options.md) - [Key Configuration Parameters](#key-configuration-parameters.md) - [Inherited Options](#inherited-options.md) - [Result Integration](#result-integration.md) - [Document Assembly and Enrichment](#document-assembly-and-enrichment.md) - [\\_assemble\\_document()](#_assemble_document.md) - [\\_enrich\\_document()](#_enrich_document.md) - [Performance Characteristics](#performance-characteristics.md) - [Advantages Over Sequential Pipeline](#advantages-over-sequential-pipeline.md) - [Throughput Analysis](#throughput-analysis.md) - [Memory Footprint](#memory-footprint.md) - [Usage Example](#usage-example.md) - [Comparison with Standard Pipeline](#comparison-with-standard-pipeline.md)",
  "CI/CD and Development Workflow | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # CI/CD and Development Workflow Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) This document covers the continuous integration and continuous deployment (CI/CD) pipeline and development workflow for the Docling project. It details the automated testing, quality assurance, security scanning, version management, documentation generation, and package distribution processes that ensure code quality and reliable releases. For information about the testing framework and test data organization, see [Testing Framework](docling-project/docling/9.1-testing-framework.md) and [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md). ## CI/CD Pipeline Overview The Docling project employs a comprehensive CI/CD pipeline built on GitHub Actions that ensures code quality, runs extensive tests across multiple Python versions, and automates documentation and package distribution. ``` ``` **Sources:** [.github/workflows/checks.yml1-118](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L1-L118) [README.md13-26](https://github.com/docling-project/docling/blob/f7244a43/README.md#L13-L26) ## GitHub Actions Workflow Configuration The main CI/CD workflow is defined in `checks.yml` and includes three primary jobs: `run-checks`, `build-package`, and `test-package`. ### Workflow Jobs Architecture ``` ``` ### Environment Configuration The workflow configures several environment variables and caching strategies: | Configuration | Purpose | Implementation | | ------------------------- | ----------------------------------- | ---------------------- | | `HF_HUB_DOWNLOAD_TIMEOUT` | Hugging Face model download timeout | Set to 60 seconds | | `HF_HUB_ETAG_TIMEOUT` | Hugging Face ETag timeout | Set to 60 seconds | | `UV_FROZEN` | Lock dependency versions | Set to \"1\" | | `TESSDATA_PREFIX` | Tesseract data path | Dynamically determined | **Sources:** [.github/workflows/checks.yml12-29](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L12-L29) ### Multi-Version Testing Matrix The pipeline tests against five Python versions to ensure broad compatibility: ``` ``` **Sources:** [.github/workflows/checks.yml20-22](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L20-L22) [.github/workflows/checks.yml50-71](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L50-L71) ## Development Tools and Quality Assurance ### Pre-commit Hook Integration The project uses `pre-commit` for automated code quality enforcement. The workflow includes pre-commit cache optimization and runs all configured hooks: ``` ``` **Sources:** [.github/workflows/checks.yml40-49](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L40-L49) [README.md18-20](https://github.com/docling-project/docling/blob/f7244a43/README.md#L18-L20) ### Testing and Coverage",
  "The testing pipeline uses `pytest` with coverage reporting and uploads results to Codecov: | Component | Purpose | Configuration | | ------------------ | ---------------------------- | ----------------------------------- | | `pytest` | Unit and integration testing | `-v --cov=docling --cov-report=xml` | | `codecov` | Coverage reporting | Uploads to codecov.io | | Example validation | Real-world usage testing | Runs all example scripts | **Sources:** [.github/workflows/checks.yml50-58](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L50-L58) ### Example Script Validation The CI pipeline validates example scripts to ensure documentation accuracy, with selective execution based on script characteristics. Some examples are skipped in CI due to external dependencies or resource requirements. **Sources:** [.github/workflows/checks.yml59-71](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L59-L71) ## Documentation Generation Pipeline ### MkDocs Configuration The documentation system uses MkDocs with Material theme and extensive plugin integration: ``` ``` ### Theme and Extension Configuration The documentation uses Material theme with comprehensive feature enablement: | Feature Category | Enabled Features | | ---------------- | ----------------------------------------------------------------- | | Content | `content.tabs.link`, `content.code.annotate`, `content.code.copy` | | Navigation | `navigation.footer`, `navigation.tabs`, `navigation.indexes` | | Search | `search.suggest` | | TOC | `toc.follow` | **Sources:** [mkdocs.yml36-54](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L36-L54) ### Plugin Configuration Key plugins and their purposes: | Plugin | Configuration | Purpose | | ---------------- | ------------------------------------ | ---------------------------- | | `mkdocs-jupyter` | Default settings | Jupyter notebook integration | | `mkdocstrings` | Python handler with Pydantic support | API documentation generation | | `mkdocs-click` | Default settings | CLI documentation | **Sources:** [mkdocs.yml176-187](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L176-L187) ## Package Building and Distribution ### Build Process The package building uses `uv build` with validation steps: ``` ``` ### Package Validation The built package undergoes validation to ensure proper installation and functionality: | Validation Step | Purpose | Command | | ------------------- | ------------------------- | --------------------------- | | Wheel content check | Verify package contents | `unzip -l dist/*.whl` | | Installation test | Validate pip installation | `uv pip install dist/*.whl` | | CLI functionality | Ensure CLI works | `docling --help` | **Sources:** [.github/workflows/checks.yml72-118](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L72-L118) ## Development Workflow ### Developer Environment Setup The development workflow relies on `uv` for dependency management and environment setup: ``` ``` ### Quality Assurance Integration The project integrates multiple quality assurance tools as evidenced by the badges and configuration: | Tool | Purpose | Integration | | ----------- | --------------------------- | ------------------- | | Ruff | Code linting and formatting | Pre-commit and CI | | Pydantic v2 | Data validation | Runtime and testing | | Pre-commit | Git hook automation | Local and CI | | UV | Fast dependency management | All environments | | Codecov | Coverage reporting | CI pipeline | **Sources:** [README.md17-21](https://github.com/docling-project/docling/blob/f7244a43/README.md#L17-L21) [.github/workflows/checks.yml35-49](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L35-L49) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [CI/CD and Development Workflow](#cicd-and-development-workflow.md) - [CI/CD Pipeline Overview](#cicd-pipeline-overview.md) - [GitHub Actions Workflow Configuration](#github-actions-workflow-configuration.md) - [Workflow Jobs Architecture](#workflow-jobs-architecture.md) - [Environment Configuration](#environment-configuration.md) - [Multi-Version Testing Matrix](#multi-version-testing-matrix.md) - [Development Tools and Quality Assurance](#development-tools-and-quality-assurance.md) - [Pre-commit Hook Integration](#pre-commit-hook-integration.md) - [Testing and Coverage](#testing-and-coverage.md) - [Example Script Validation](#example-script-validation.md) - [Documentation Generation Pipeline](#documentation-generation-pipeline.md) - [MkDocs Configuration](#mkdocs-configuration.md) - [Theme and Extension Configuration](#theme-and-extension-configuration.md) - [Plugin Configuration](#plugin-configuration.md) - [Package Building and Distribution](#package-building-and-distribution.md) - [Build Process](#build-process.md) - [Package Validation](#package-validation.md) - [Development Workflow](#development-workflow.md) - [Developer Environment Setup](#developer-environment-setup.md) - [Quality Assurance Integration](#quality-assurance-integration.md)",
  "VLM Pipeline | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # VLM Pipeline Relevant source files",
  "- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) The VLM Pipeline provides vision-language model based document processing capabilities for converting documents (primarily PDFs) into structured formats using AI models that can understand both text and images. This pipeline leverages various VLM backends including local models via HuggingFace Transformers, MLX for Apple Silicon optimization, VLLM for high-throughput inference, and remote API services. For traditional PDF processing without VLM capabilities, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md). For base pipeline architecture and common functionality, see [Base Pipeline Architecture](docling-project/docling/5.3-vlm-pipeline.md). ## Architecture Overview The VLM Pipeline architecture centers around the `VlmPipeline` class which orchestrates different VLM model implementations to process document pages as images and generate structured output. ### VLM Pipeline System Architecture ``` ``` Sources: [docling/pipeline/vlm\\_pipeline.py50-125](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L125) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py11-101](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L11-L101) ### VLM Model Class Hierarchy ``` ```",
  "Sources: [docling/models/base\\_model.py40-120](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L40-L120) [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py32](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L32-L32) [docling/models/vlm\\_models\\_inline/mlx\\_model.py30](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L30-L30) [docling/models/api\\_vlm\\_model.py13](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L13-L13) ## VLM Model Implementations The VLM Pipeline supports multiple backend implementations for different use cases and hardware configurations. ### HuggingFace Transformers Model The `HuggingFaceTransformersVlmModel` provides local inference using the HuggingFace Transformers library with support for various model architectures. **Key Features:** - Supports multiple `TransformersModelType`: `AUTOMODEL`, `AUTOMODEL_VISION2SEQ`, `AUTOMODEL_CAUSALLM`, `AUTOMODEL_IMAGETEXTTOTEXT` - Batch processing with proper padding and attention handling - Flash Attention 2 support for CUDA devices - Quantization support via `BitsAndBytesConfig` - Multiple prompt styles: `CHAT`, `RAW`, `NONE` **Configuration Options:** - `repo_id`: HuggingFace model repository identifier - `quantized`: Enable 8-bit quantization - `torch_dtype`: Specify torch data type - `stop_strings`: Custom stopping criteria - `max_new_tokens`: Maximum generation length Sources: [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py32-315](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L32-L315) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py52-84](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L52-L84) ### MLX Model Implementation The `HuggingFaceMlxModel` provides optimized inference for Apple Silicon using the MLX framework. **Key Features:** - Thread-safe with global locking mechanism (`_MLX_GLOBAL_LOCK`) - Stream generation with token-level processing - Optimized for Apple Silicon hardware - Support for stop string termination - Token-level logprob tracking **Thread Safety:** ``` ``` Sources: [docling/models/vlm\\_models\\_inline/mlx\\_model.py25-261](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py#L25-L261) ### API-Based VLM Model The `ApiVlmModel` enables integration with remote VLM services through standardized chat completion APIs. **Key Features:** - Concurrent processing with `ThreadPoolExecutor` - Configurable timeout and concurrency limits - Custom headers and parameters support - Compatible with OpenAI-style chat completion APIs **Configuration Example:** - `url`: API endpoint (default: `http://localhost:11434/v1/chat/completions`) - `params`: API-specific parameters (model, temperature, etc.) - `headers`: Authentication and custom headers - `concurrency`: Maximum concurrent requests Sources: [docling/models/api\\_vlm\\_model.py13-73](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L13-L73) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py90-101](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L90-L101) ## Response Formats and Processing The VLM Pipeline supports multiple response formats, each processed differently to generate the final `DoclingDocument`. ### Response Format Processing Flow ``` ``` Sources: [docling/pipeline/vlm\\_pipeline.py148-392](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L148-L392) ### DocTags Format Processing DocTags format provides the most structured output with precise bounding box information and element classification. **Key Features:**",
  "- Direct conversion to `DoclingDocument` via `DocTagsDocument.from_doctags_and_image_pairs()` - Preserves spatial relationships and element types - Optional backend text extraction with `force_backend_text` - Support for picture image generation **Backend Text Extraction:** When `force_backend_text=True` and `response_format=ResponseFormat.DOCTAGS`, the pipeline extracts actual text from the PDF backend using predicted bounding boxes instead of relying on VLM-generated text. Sources: [docling/pipeline/vlm\\_pipeline.py200-238](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L200-L238) ### Markdown and HTML Processing Both Markdown and HTML formats follow similar processing patterns, using respective document backends for conversion. **Processing Steps:** 1. Extract content from code blocks (triple backticks) 2. Create temporary `BytesIO` stream with extracted content 3. Use `MarkdownDocumentBackend` or `HTMLDocumentBackend` for conversion 4. Generate page structure with image dimensions 5. Add provenance information with placeholder bounding boxes Sources: [docling/pipeline/vlm\\_pipeline.py240-392](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L240-L392) ## Pipeline Configuration The VLM Pipeline uses `VlmPipelineOptions` for configuration, which includes VLM-specific options and general pipeline settings. ### Configuration Class Hierarchy ``` ``` Sources: [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py11-101](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L11-L101) ### Key Configuration Parameters | Parameter | Type | Description | | ------------------------- | ---------------- | -------------------------------------------- | | `vlm_options` | `BaseVlmOptions` | VLM model configuration (inline or API) | | `force_backend_text` | `bool` | Extract text from backend vs VLM response | | `generate_page_images` | `bool` | Generate page images for processing | | `generate_picture_images` | `bool` | Generate cropped images for picture elements | | `images_scale` | `float` | Image scaling factor | | `enable_remote_services` | `bool` | Allow API-based VLM calls | Sources: [docling/pipeline/vlm\\_pipeline.py51-77](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L51-L77) ## Pipeline Execution Flow The VLM Pipeline follows the standard pipeline execution pattern with VLM-specific customizations. ### VLM Pipeline Execution Sequence ``` ``` Sources: [docling/pipeline/base\\_pipeline.py39-61](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L39-L61) [docling/pipeline/vlm\\_pipeline.py126-198](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L126-L198) ### Page Initialization Process The `initialize_page()` method prepares pages for VLM processing: 1. **Backend Loading**: Load page backend via `conv_res.input._backend.load_page(page.page_no)` 2. **Size Calculation**: Set `page.size` from backend dimensions 3. **Conditional Text Extraction**: If `force_backend_text=True`, extract `parsed_page` for prompt construction **Backend Text Extraction Logic:** ``` ``` Sources: [docling/pipeline/vlm\\_pipeline.py126-135](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L126-L135) ## Integration with Base Pipeline The VLM Pipeline extends `PaginatedPipeline` and integrates with the base pipeline architecture through standardized interfaces. ### Pipeline Integration Points ``` ``` Sources: [docling/pipeline/base\\_pipeline.py32-105](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L32-L105) [docling/pipeline/vlm\\_pipeline.py50-401](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L401) ### Backend Compatibility The VLM Pipeline supports specific backend types through the `is_backend_supported()` method: ``` ``` Currently, only `PdfDocumentBackend` instances are supported, limiting VLM processing to PDF documents.",
  "Sources: [docling/pipeline/vlm\\_pipeline.py398-400](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L398-L400) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [VLM Pipeline](#vlm-pipeline.md) - [Architecture Overview](#architecture-overview.md) - [VLM Pipeline System Architecture](#vlm-pipeline-system-architecture.md) - [VLM Model Class Hierarchy](#vlm-model-class-hierarchy.md) - [VLM Model Implementations](#vlm-model-implementations.md) - [HuggingFace Transformers Model](#huggingface-transformers-model.md) - [MLX Model Implementation](#mlx-model-implementation.md) - [API-Based VLM Model](#api-based-vlm-model.md) - [Response Formats and Processing](#response-formats-and-processing.md) - [Response Format Processing Flow](#response-format-processing-flow.md) - [DocTags Format Processing](#doctags-format-processing.md) - [Markdown and HTML Processing](#markdown-and-html-processing.md) - [Pipeline Configuration](#pipeline-configuration.md) - [Configuration Class Hierarchy](#configuration-class-hierarchy.md) - [Key Configuration Parameters](#key-configuration-parameters.md) - [Pipeline Execution Flow](#pipeline-execution-flow.md) - [VLM Pipeline Execution Sequence](#vlm-pipeline-execution-sequence.md) - [Page Initialization Process](#page-initialization-process.md) - [Integration with Base Pipeline](#integration-with-base-pipeline.md) - [Pipeline Integration Points](#pipeline-integration-points.md) - [Backend Compatibility](#backend-compatibility.md)",
  "AI/ML Models | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # AI/ML Models Relevant source files",
  "- [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py) ## Purpose and Scope This document provides an overview of the AI/ML model layer in Docling, covering the architecture, plugin system, model downloading, and common interfaces that all models implement. The model layer provides specialized AI capabilities for document understanding tasks such as OCR, layout analysis, table structure recognition, and enrichment. For detailed information about specific model types, see: - OCR engines and text extraction: [OCR Models](docling-project/docling/4.1-ocr-models.md) - Layout analysis and table structure: [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - Vision-language models: [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - Content enrichment models: [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) For information about how models are integrated into document processing workflows, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md). --- ## Model Architecture Overview The Docling model layer is organized around a hierarchy of base classes that define common interfaces for different model types. Models are categorized into two primary groups based on their processing scope: **Diagram: Model Class Hierarchy** ``` ``` Sources: [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) [docling/models/base\\_ocr\\_model.py24-228](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L24-L228) [docling/models/layout\\_model.py28-238](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L28-L238) [docling/models/table\\_structure\\_model.py29-305](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L29-L305) ### Page-Level Models",
  "Page-level models inherit from `BasePageModel` and process entire pages through a batch iterator pattern. They implement: ``` ``` Models in this category include: - **OCR Models**: Extract text from images ([RapidOcrModel](https://github.com/docling-project/docling/blob/f7244a43/RapidOcrModel) [EasyOcrModel](https://github.com/docling-project/docling/blob/f7244a43/EasyOcrModel) [TesseractOcrModel](https://github.com/docling-project/docling/blob/f7244a43/TesseractOcrModel) [OcrMacModel](https://github.com/docling-project/docling/blob/f7244a43/OcrMacModel)) - **LayoutModel**: Analyzes page layout and identifies document elements - **TableStructureModel**: Recognizes table structure and extracts cells - **PagePreprocessingModel**: Generates page images and extracts text cells - **PageAssembleModel**: Assembles page elements into structured output ### Item-Level Enrichment Models Item-level models inherit from `BaseItemAndImageEnrichmentModel` and process individual document items after page assembly. They implement: ``` ``` Models in this category include: - **CodeFormulaModel**: Converts code and formula images to LaTeX/text - **DocumentPictureClassifier**: Classifies figure types - **PictureDescriptionVlmModel**: Generates text descriptions of images Sources: [docling/models/code\\_formula\\_model.py45-338](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L45-L338) [docling/models/document\\_picture\\_classifier.py36-186](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L36-L186) [docling/models/picture\\_description\\_vlm\\_model.py24-117](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L24-L117) --- ## Plugin System and Model Discovery Docling uses a plugin-based architecture for model discovery, allowing external packages to register additional model implementations without modifying core code. **Diagram: Plugin Discovery Mechanism** ``` ``` Sources: [docling/models/plugins/defaults.py1-31](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py#L1-L31) [docling/models/factories.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/factories.py) ### Plugin Registration The default plugin entry point is registered in the package setup configuration: ``` [docling_defaults] docling.models.plugins.defaults = ``` The plugin system provides two primary extension points: 1. **OCR Engines** - Registered via `ocr_engines()` function returning a dictionary with key `\"ocr_engines\"` 2. **Picture Description** - Registered via `picture_description()` function returning a dictionary with key `\"picture_description\"` Default implementations are registered in [docling/models/plugins/defaults.py1-31](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py#L1-L31): ``` ``` ### Factory Pattern Factories use the plugin system to discover and instantiate models based on options classes. The `get_ocr_factory()` function creates an `OcrModelFactory` that: 1. Discovers registered OCR models via entry points 2. Matches options classes to implementation classes via `get_options_type()` 3. Instantiates the appropriate model based on user-provided options The `allow_external_plugins` flag controls whether external plugins are loaded, providing security for production deployments. Sources: [docling/models/factories.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/factories.py) [docling/pipeline/standard\\_pdf\\_pipeline.py115-124](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L115-L124) --- ## Model Downloading and Artifact Management Models require artifact files (weights, configurations) that are downloaded from HuggingFace or ModelScope repositories. Docling provides both programmatic and CLI interfaces for model management. **Diagram: Model Download and Loading Flow** ``` ```",
  "Sources: [docling/utils/model\\_downloader.py30-159](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L159) [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py) [docling/cli/models.py54-127](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L127) ### Model Download Interface Each model class implements a static `download_models()` method: ``` ``` This method handles downloading from the appropriate source: - **HuggingFace** (default): Uses `huggingface_hub.snapshot_download()` - **ModelScope** (alternative): Uses `modelscope` library for downloads in China ### Model Repository Structure Models are organized by repository folders: | Model | Repository Folder | HuggingFace Repo ID | | ------------------------- | --------------------------------- | -------------------------------- | | LayoutModel | `ds4sd--docling-models` | `ds4sd/docling-models` | | TableStructureModel | `ds4sd--docling-models` | `ds4sd/docling-models` | | CodeFormulaModel | `ds4sd--CodeFormulaV2` | `ds4sd/CodeFormulaV2` | | DocumentPictureClassifier | `ds4sd--DocumentFigureClassifier` | `ds4sd/DocumentFigureClassifier` | | RapidOcrModel | `RapidOcr` | Custom downloads from ModelScope | | EasyOcrModel | `EasyOcr` | Custom downloads from GitHub | Sources: [docling/models/layout\\_model.py90-102](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L90-L102) [docling/models/table\\_structure\\_model.py91-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L91-L101) [docling/models/code\\_formula\\_model.py118-129](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L118-L129) ### CLI Model Management The `docling-tools` CLI provides model downloading capabilities: ``` ``` Available models defined in [docling/cli/models.py30-43](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L30-L43): ``` ``` Default models (downloaded when no specific models are requested): `layout`, `tableformer`, `code_formula`, `picture_classifier`, `rapidocr` Sources: [docling/cli/models.py54-136](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L136) ### Artifact Path Resolution Models support two artifact path patterns for backward compatibility: 1. **Modern structure** (recommended): `artifacts_path / model_repo_folder / model_path` 2. **Legacy structure** (deprecated): `artifacts_path / model_path` Example from [docling/models/layout\\_model.py64-81](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L64-L81): ``` ``` --- ## Common Model Interfaces All models implement specific interfaces based on their processing type, with common patterns for initialization, configuration, and execution. **Diagram: Model Interface Contracts** ``` ``` Sources: [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) [docling/models/base\\_ocr\\_model.py24-228](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L24-L228) ### Initialization Pattern All models follow a consistent initialization pattern: 1. **enabled**: Boolean flag controlling whether the model is active 2. **artifacts\\_path**: Optional path to model artifacts (triggers download if None) 3. **options**: Model-specific configuration object 4. **accelerator\\_options**: Hardware acceleration settings (device, threads) Example from [docling/models/layout\\_model.py49-87](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L49-L87): ``` ``` ### Page-Level Processing Page-level models process batches of pages, yielding results iteratively: ``` ``` Key characteristics:",
  "- **Streaming**: Pages are processed and yielded one at a time - **Profiling**: Wrapped in `TimeRecorder` for performance tracking - **Disabled passthrough**: If `enabled=False`, pages pass through unmodified Sources: [docling/models/layout\\_model.py148-238](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L148-L238) [docling/models/table\\_structure\\_model.py170-305](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L170-L305) ### Item-Level Enrichment Item-level models filter and process document items: ``` ``` Key characteristics: - **Filtering**: `is_processable()` determines which items to process - **Batch processing**: Items are collected and processed in batches - **In-place enrichment**: Items are modified and yielded Sources: [docling/models/code\\_formula\\_model.py131-338](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L131-L338) [docling/models/document\\_picture\\_classifier.py118-186](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L118-L186) --- ## Model Configuration and Options Models are configured through specialized options classes that follow the Pydantic `BaseModel` pattern. Options control model behavior, resource paths, and inference parameters. **Diagram: Options Class Hierarchy** ``` ``` Sources: [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) [docling/models/code\\_formula\\_model.py26-43](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L26-L43) ### OCR Options OCR options control text extraction behavior: **Common OCR Options** (base class): - `bitmap_area_threshold` (float, default 0.05): Minimum page coverage to trigger OCR - `force_full_page_ocr` (bool, default False): Always OCR entire page **RapidOcrOptions** ([docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py)): - `backend`: Engine type (\"onnxruntime\", \"torch\", \"openvino\", \"paddle\") - `use_det`: Enable text detection (default True) - `use_cls`: Enable text direction classification (default True) - `use_rec`: Enable text recognition (default True) - `text_score`: Confidence threshold for text detection - Model paths: `det_model_path`, `cls_model_path`, `rec_model_path`, `rec_keys_path` **EasyOcrOptions**: - `lang`: List of language codes (default \\[\"en\"]) - `recog_network`: Recognition network to use - `use_gpu`: Enable GPU acceleration (deprecated, use `accelerator_options.device`) - `confidence_threshold`: Minimum confidence for OCR results ### Layout and Table Options **LayoutOptions**: - `model_spec`: `LayoutModelConfig` specifying the model variant (default: Heron/DOCLING\\_LAYOUT\\_V2) **TableStructureOptions**: - `mode`: `TableFormerMode.FAST` or `TableFormerMode.ACCURATE` (default FAST) - `do_cell_matching`: Enable cell matching between table cells and text cells (default True) Example from [tests/test\\_options.py25-33](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L25-L33): ``` ``` Sources: [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) ### Enrichment Model Options **CodeFormulaModelOptions** ([docling/models/code\\_formula\\_model.py26-43](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L26-L43)): - `do_code_enrichment`: Enable code block enrichment (default True) - `do_formula_enrichment`: Enable formula enrichment (default True) **PictureDescriptionVlmOptions** ([docling/models/picture\\_description\\_vlm\\_model.py31-46](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L31-L46)): - `repo_id`: HuggingFace repository ID - `prompt`: Text prompt for image description - `generation_config`: Dictionary of generation parameters ### Accelerator Options",
  "All models receive `AcceleratorOptions` controlling hardware acceleration: ``` ``` **Device Options**: - `AUTO`: Automatically select best available device - `CPU`: Force CPU execution - `CUDA`: Use NVIDIA GPU - `MPS`: Use Apple Metal Performance Shaders - `DML`: Use DirectML (Windows) Environment variable overrides: - `DOCLING_DEVICE` or `DEVICE`: Override device selection - `DOCLING_NUM_THREADS` or `OMP_NUM_THREADS`: Override thread count Sources: [docling/datamodel/accelerator\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/accelerator_options.py) [tests/test\\_options.py43-96](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L43-L96) --- ## Model Integration in Pipelines Models are integrated into pipelines through two primary mechanisms: build pipelines (page-level) and enrichment pipelines (item-level). **Diagram: Model Integration Points** ``` ``` Sources: [docling/pipeline/standard\\_pdf\\_pipeline.py34-99](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L34-L99) ### Build Pipeline Construction The build pipeline is constructed in `StandardPdfPipeline.__init__()` [docling/pipeline/standard\\_pdf\\_pipeline.py51-75](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L51-L75): ``` ``` Models in the build pipeline: 1. Process pages sequentially in order 2. Each model receives output from previous model 3. Operate on `Page` objects with backend access 4. Execute during `_build_document()` phase ### Enrichment Pipeline Construction The enrichment pipeline is constructed by the `ConvertPipeline` base class and extended in `StandardPdfPipeline` [docling/pipeline/standard\\_pdf\\_pipeline.py77-90](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L77-L90): ``` ``` Models in the enrichment pipeline: 1. Process document items after page assembly 2. Filter items via `is_processable()` 3. Operate on `DoclingDocument` and `NodeItem` objects 4. Execute during `_enrich_document()` phase Sources: [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) [docling/pipeline/standard\\_pdf\\_pipeline.py34-99](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L34-L99) ### Model Execution Order The complete model execution sequence in `StandardPdfPipeline`: 1. **Page Initialization**: Backend loads page ([line 126-132](<https://github.com/docling-project/docling/blob/f7244a43/line 126-132>)) 2. **Build Phase**: Sequential application of build\\_pipe models - PagePreprocessingModel generates images - OCR model extracts text from bitmaps - LayoutModel identifies document structure - TableStructureModel recognizes tables - PageAssembleModel creates structured elements 3. **Assembly Phase**: Pages combined into document ([line 134-234](<https://github.com/docling-project/docling/blob/f7244a43/line 134-234>)) 4. **Enrichment Phase**: Enrichment models process document items - CodeFormulaModel converts code/formula images - PictureClassifier classifies figures - PictureDescription generates captions Each model respects its `enabled` flag, passing data through unmodified when disabled. --- This page provides an overview of the model architecture and common patterns. For details on specific model implementations, see the child pages for OCR, Layout/Table, VLM, and Enrichment models. Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [AI/ML Models](#aiml-models.md) - [Purpose and Scope](#purpose-and-scope.md) - [Model Architecture Overview](#model-architecture-overview.md) - [Page-Level Models](#page-level-models.md) - [Item-Level Enrichment Models](#item-level-enrichment-models.md) - [Plugin System and Model Discovery](#plugin-system-and-model-discovery.md) - [Plugin Registration](#plugin-registration.md) - [Factory Pattern](#factory-pattern.md) - [Model Downloading and Artifact Management](#model-downloading-and-artifact-management.md) - [Model Download Interface](#model-download-interface.md) - [Model Repository Structure](#model-repository-structure.md) - [CLI Model Management](#cli-model-management.md) - [Artifact Path Resolution](#artifact-path-resolution.md) - [Common Model Interfaces](#common-model-interfaces.md) - [Initialization Pattern](#initialization-pattern.md) - [Page-Level Processing](#page-level-processing.md) - [Item-Level Enrichment](#item-level-enrichment.md) - [Model Configuration and Options](#model-configuration-and-options.md) - [OCR Options](#ocr-options.md) - [Layout and Table Options](#layout-and-table-options.md) - [Enrichment Model Options](#enrichment-model-options.md) - [Accelerator Options](#accelerator-options.md) - [Model Integration in Pipelines](#model-integration-in-pipelines.md) - [Build Pipeline Construction](#build-pipeline-construction.md) - [Enrichment Pipeline Construction](#enrichment-pipeline-construction.md) - [Model Execution Order](#model-execution-order.md)",
  "Quick Start | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Quick Start Relevant source files",
  "- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) This page provides simple, working code examples to get you started with Docling immediately. It covers the most common use cases: basic document conversion, using vision language models, and CLI usage. For detailed installation instructions, see [Installation](docling-project/docling/1.1-installation.md). For advanced configuration options, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) and [Advanced Options](https://docling-project.github.io/docling/usage/advanced_options/). ## Prerequisites Ensure Docling is installed before proceeding: ``` ``` For VLM features or specific OCR engines, additional extras may be required. See [Installation](docling-project/docling/1.1-installation.md) for details. ## Basic Document Conversion The simplest way to convert a document is to create a `DocumentConverter` and call `convert()`: ``` ``` **What this does:** 1. `DocumentConverter` initializes with default format options for all supported formats 2. `convert()` detects the input format, selects the appropriate backend and pipeline 3. Returns a `ConversionResult` containing a `DoclingDocument` 4. `export_to_markdown()` serializes the document to Markdown format ### Conversion Flow Diagram ``` ``` **Sources:** [docling/document\\_converter.py228-245](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L228-L245) [docling/datamodel/document.py280-338](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L280-L338) [README.md69-77](https://github.com/docling-project/docling/blob/f7244a43/README.md#L69-L77) ## Output Formats The `DoclingDocument` supports multiple export formats: | Method | Output Format | Description | | ----------------------------- | ------------- | ---------------------------------- | | `export_to_markdown()` | Markdown | Human-readable text with structure | | `export_to_json()` | JSON | Complete structured document data | | `export_to_html()` | HTML | Web-ready HTML output | | `export_to_document_tokens()` | DocTags | Structured token sequence | Example with JSON export: ``` ``` **Sources:** [docling/cli/main.py191-275](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L191-L275) [docling/datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L215) ## VLM Pipeline Usage Docling supports vision-language models for end-to-end document processing. The `VlmPipeline` processes pages using models like GraniteDocling or SmolDocling: ``` ``` ### VLM with MLX Acceleration (macOS) On Apple Silicon, use MLX for faster inference: ``` ```",
  "**Sources:** [docs/examples/minimal\\_vlm\\_pipeline.py1-71](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py#L1-L71) [docs/usage/vision\\_models.md11-38](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L11-L38) ## Pipeline Selection Diagram ``` ``` **Sources:** [docling/document\\_converter.py132-182](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L132-L182) [docling/document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L351-L378) [docling/datamodel/pipeline\\_options.py273-368](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L273-L368) ## CLI Usage Docling provides a command-line interface for quick conversions without writing code: ### Basic Conversion ``` ``` ### VLM Pipeline via CLI ``` ``` ### Common CLI Options ``` ``` ### CLI Command Structure ``` ``` **Sources:** [docling/cli/main.py298-816](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L298-L816) [docs/usage/index.md26-39](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L26-L39) [README.md84-98](https://github.com/docling-project/docling/blob/f7244a43/README.md#L84-L98) ## Processing Multiple Documents Convert multiple documents in batch: ``` ``` **Sources:** [docling/document\\_converter.py247-283](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L247-L283) ## Table Extraction Docling automatically extracts tables. Access them from the `DoclingDocument`: ``` ``` **Sources:** [docling\\_core.types.doc](https://github.com/docling-project/docling/blob/f7244a43/docling_core.types.doc#LNaN-LNaN) [docling/datamodel/document.py24-32](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L24-L32) ## Configuration Options Summary Key configuration classes for customizing conversion: | Class | Purpose | Used For | | ----------------------- | ----------------------------- | ----------------------------------- | | `PdfPipelineOptions` | Configure PDF processing | OCR, table extraction, enrichment | | `VlmPipelineOptions` | Configure VLM models | Model selection, prompts, inference | | `AsrPipelineOptions` | Configure audio transcription | Whisper model selection | | `OcrOptions` | Configure OCR engines | Engine type, languages, parameters | | `TableStructureOptions` | Configure table extraction | Accuracy vs speed tradeoffs | | `AcceleratorOptions` | Configure hardware | Device (CPU/CUDA/MPS), threads | Example with custom options: ``` ``` **Sources:** [docling/datamodel/pipeline\\_options.py273-384](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L273-L384) [docling/cli/main.py619-697](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L619-L697) ## Error Handling Control error behavior during conversion: ``` ``` **Sources:** [docling/document\\_converter.py227-245](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L227-L245) [docling/datamodel/base\\_models.py45-51](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L45-L51) ## Next Steps - For installation details and optional dependencies, see [Installation](docling-project/docling/1.1-installation.md) - For format-specific guidance, see [Supported Formats](https://docling-project.github.io/docling/usage/supported_formats/) - For detailed configuration, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - For advanced pipeline usage, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - For integration examples, see [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) Dismiss Refresh this wiki",
  "This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Quick Start](#quick-start.md) - [Prerequisites](#prerequisites.md) - [Basic Document Conversion](#basic-document-conversion.md) - [Conversion Flow Diagram](#conversion-flow-diagram.md) - [Output Formats](#output-formats.md) - [VLM Pipeline Usage](#vlm-pipeline-usage.md) - [VLM with MLX Acceleration (macOS)](#vlm-with-mlx-acceleration-macos.md) - [Pipeline Selection Diagram](#pipeline-selection-diagram.md) - [CLI Usage](#cli-usage.md) - [Basic Conversion](#basic-conversion.md) - [VLM Pipeline via CLI](#vlm-pipeline-via-cli.md) - [Common CLI Options](#common-cli-options.md) - [CLI Command Structure](#cli-command-structure.md) - [Processing Multiple Documents](#processing-multiple-documents.md) - [Table Extraction](#table-extraction.md) - [Configuration Options Summary](#configuration-options-summary.md) - [Error Handling](#error-handling.md) - [Next Steps](#next-steps.md)",
  "docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Overview Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) ## Purpose and Scope This document provides a high-level technical overview of Docling, a document parsing and conversion system. It explains the system's purpose, core architecture, key components, and processing flow. This overview serves as an entry point for understanding how Docling transforms diverse document formats into structured, unified representations. For installation instructions, see [Installation](docling-project/docling/1.1-installation.md). For quick start examples, see [Quick Start](docling-project/docling/1.2-quick-start.md). For detailed architecture concepts, see [Core Architecture](docling-project/docling/2-core-architecture.md). ## System Purpose Docling is an SDK and CLI for parsing documents in multiple formats (PDF, DOCX, PPTX, XLSX, HTML, images, audio, and more) into a unified `DoclingDocument` representation. The system is designed to power downstream workflows such as generative AI applications, RAG systems, and document analysis pipelines. Key capabilities: - **Format-agnostic parsing**: Handles 15+ document formats through specialized backends - **Advanced PDF understanding**: Page layout detection, reading order, table structure, formula extraction, OCR integration - **Unified output**: All formats convert to `DoclingDocument`, which exports to Markdown, HTML, JSON, or DocTags - **AI model integration**: OCR engines, layout models, table structure models, vision-language models, and enrichment models - **Local execution**: Supports air-gapped environments and sensitive data processing - **Framework integrations**: Native support for LangChain, LlamaIndex, Haystack, and other AI frameworks Sources: [pyproject.toml1-80](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L80) [README.md28-43](https://github.com/docling-project/docling/blob/f7244a43/README.md#L28-L43) [docs/index.md20-34](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L20-L34) ## Core Architecture Docling implements a layered architecture with clear separation between user interfaces, orchestration logic, processing pipelines, and model integration. ### System Architecture Diagram ``` ``` Sources: Diagram 1 from high-level overview, [pyproject.toml84-89](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L89) ### Component Overview",
  "| Layer | Key Classes | Purpose | | ------------------- | ---------------------------------------------------------------------- | ------------------------------------------------------- | | **User Interfaces** | `CLI (docling)`, `DocumentConverter`, `DocumentExtractor` | Entry points for document processing | | **Orchestration** | `DocumentConverter`, `FormatOption` mapping | Routes documents to appropriate pipelines and backends | | **Pipelines** | `BasePipeline`, `StandardPdfPipeline`, `VlmPipeline`, `SimplePipeline` | Implements format-specific processing strategies | | **Backends** | `DoclingParseV4Backend`, `MsWordBackend`, `HTMLBackend`, etc. | Provides format-specific document readers | | **Models** | `LayoutModel`, `TableStructureModel`, `OcrAutoModel`, VLM models | AI/ML models for document understanding | | **Output** | `DoclingDocument` | Unified representation that exports to multiple formats | Sources: [pyproject.toml84-90](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L90) Diagram 1 from high-level overview ## Key Components ### User Interfaces **CLI (`docling` command)** - Entry point: [pyproject.toml88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L88-L88) - Implementation: `docling.cli.main:app` - Provides command-line interface for document conversion with extensive options **Python SDK** - `DocumentConverter`: Main class for document conversion - `DocumentExtractor`: Schema-based structured extraction (beta) - Used programmatically in Python applications **MCP Server** - Model Context Protocol server for AI agent integration - Enables Docling capabilities in agentic AI systems - See [MCP Server](docling-project/docling/6.2-model-management-cli.md) for details Sources: [pyproject.toml84-89](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L89) [README.md84-97](https://github.com/docling-project/docling/blob/f7244a43/README.md#L84-L97) [docs/usage/mcp.md1-31](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md#L1-L31) ### Core Orchestration Layer **DocumentConverter** - Central orchestration class that routes documents through the system - Maintains `format_to_options` dictionary mapping `InputFormat` to `FormatOption` instances - Implements pipeline caching via `_initialized_pipelines` dictionary - Key methods: `convert()`, `convert_all()`, `_get_pipeline()` **FormatOption Classes** - `PdfFormatOption`, `WordFormatOption`, `HtmlFormatOption`, etc. - Each pairs an `InputFormat` with a `pipeline_cls` (pipeline class) and `backend_cls` (backend class) - Contains format-specific `PipelineOptions` **Format Detection** - Function `_guess_format()` uses MIME types, file extensions, and content analysis - Routes to correct backend for processing Sources: Diagram 2 from high-level overview, Diagram 6 from high-level overview ### Processing Pipelines All pipelines inherit from `BasePipeline` which defines a three-phase execution model: ``` ``` **Pipeline Execution Phases**: 1. `_build_document`: Extract raw structure from backend 2. `_assemble_document`: Construct hierarchical document representation 3. `_enrich_document`: Apply enrichment models (code detection, picture classification, etc.) **Key Pipeline Implementations**: - `StandardPdfPipeline`: Sequential 5-stage processing (preprocess → OCR → layout → table → assemble) - `ThreadedStandardPdfPipeline`: Default for PDFs, uses multi-threading with bounded queues - `VlmPipeline`: End-to-end processing with vision-language models - `SimplePipeline`: Direct conversion for DOCX, HTML, Markdown - `AsrPipeline`: Audio transcription using Whisper models - `ExtractionVlmPipeline`: Schema-based data extraction (beta) Sources: Diagram 4 from high-level overview, [README.md38-46](https://github.com/docling-project/docling/blob/f7244a43/README.md#L38-L46) ### Document Backends Backends provide format-specific document readers implementing the `AbstractDocumentBackend` interface. **PDF Backends**: - `DoclingParseV4Backend`: Current default, uses `docling-parse` library for character-level text extraction - `DoclingParseV2Backend`: Legacy sanitized format - `PyPdfiumBackend`: Pure `pypdfium2` implementation **Office Format Backends**:",
  "- `MsWordBackend`: Uses `python-docx` library - `MsExcelBackend`: Uses `openpyxl` library - `MsPowerpointBackend`: Uses `python-pptx` library **Web and Markup Backends**: - `HTMLBackend`: Uses `BeautifulSoup` parser - `MarkdownBackend`: Uses `marko` parser - `AsciiDocBackend`: AsciiDoc support **Specialized Backends**: - `JATSBackend`: Scientific articles in JATS XML format - `METSBackend`: Google Books METS archives - `USPTOBackend`: Patent documents - `ImageBackend`: Image files (PNG, JPEG, TIFF, WEBP, etc.) - `AudioBackend`: Audio files (WAV, MP3) - `WebVTTBackend`: Subtitle files Sources: Diagram 3 from high-level overview, [pyproject.toml45-76](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L45-L76) ### AI/ML Model Layer The model layer uses a plugin system for discovery and registration. **OCR Models**: - `OcrAutoModel`: Automatic selection with fallback logic - `RapidOcrModel`: ONNX/Torch backends (default on most platforms) - `EasyOcrModel`: Deep learning OCR - `TesseractOcrModel`: Tesseract binding - `OcrMacModel`: macOS native OCR **Layout and Table Models**: - `LayoutModel`: Heron model (default), DocLayoutModel (legacy) - `TableStructureModel`: TableFormer with FAST/ACCURATE modes - `PagePreprocessingModel`: Image generation and cell extraction - `PageAssembleModel`: Hierarchy construction **Vision-Language Models**: - `HuggingFaceTransformersVlmModel`: AutoModel + Transformers framework - `HuggingFaceMlxModel`: Apple Silicon acceleration - `VllmVlmModel`: Optimized inference (Linux x86\\_64 only) - `ApiVlmModel`: OpenAI-compatible API clients - Models: GraniteDocling, SmolDocling, Qwen2.5-VL, Pixtral, Gemma3, Phi-4 **Enrichment Models**: - `CodeFormulaModel`: LaTeX extraction from images - `DocumentPictureClassifier`: Figure classification - `PictureDescriptionVlmModel`: Image caption generation - `PictureDescriptionApiModel`: External API-based captions Sources: Diagram 5 from high-level overview, [pyproject.toml49-110](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L49-L110) [docs/usage/vision\\_models.md1-124](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L1-L124) ## Processing Flow ### Document Conversion Flow ``` ``` **Key Flow Points**: 1. **Format Detection**: `_guess_format()` analyzes MIME type, file extension, and content to determine `InputFormat` 2. **Pipeline Selection**: `FormatOption` mapping routes to appropriate pipeline class and backend class 3. **Pipeline Caching**: Pipelines cached by `(pipeline_class, options_hash)` to avoid redundant model loading 4. **Three-Phase Processing**: `_build_document()` → `_assemble_document()` → `_enrich_document()` 5. **Model Integration**: Models invoked throughout pipeline stages 6. **Unified Output**: All pipelines produce `DoclingDocument` instance Sources: Diagram 2 from high-level overview ### Pipeline Caching Strategy The `DocumentConverter` maintains an `_initialized_pipelines` cache keyed by `(pipeline_class, options_hash)`. This ensures: - Models loaded once per configuration - Pipelines reused across documents with identical settings - Significant performance improvement for batch processing Sources: Diagram 6 from high-level overview ## Technology Stack ### Core Dependencies | Dependency | Purpose | | -------------------- | --------------------------------- | | `docling-core` | Core data models and utilities | | `docling-parse` | PDF text extraction library | | `docling-ibm-models` | Layout and table structure models | | `pypdfium2` | PDF rendering | | `pydantic` | Data validation and settings | | `huggingface_hub` | Model downloading | ### Optional Dependencies",
  "| Extra | Dependencies | Purpose | | ----------- | -------------------------------------------------- | --------------------------------- | | `easyocr` | `easyocr` | Deep learning OCR engine | | `tesserocr` | `tesserocr` | Tesseract OCR binding | | `ocrmac` | `ocrmac` | macOS native OCR | | `vlm` | `transformers`, `mlx-vlm`, `vllm`, `qwen-vl-utils` | Vision-language model support | | `rapidocr` | `rapidocr`, `onnxruntime` | RapidOCR engine with ONNX backend | | `asr` | `openai-whisper` | Audio transcription | ### Platform Support - **Operating Systems**: macOS, Linux (x86\\_64, aarch64, arm64), Windows - **Python Versions**: 3.9, 3.10, 3.11, 3.12, 3.13 - **Accelerators**: CPU, CUDA, MPS (Apple Silicon), AUTO detection Sources: [pyproject.toml44-111](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L44-L111) [uv.lock1-15](https://github.com/docling-project/docling/blob/f7244a43/uv.lock#L1-L15) ## Entry Points ### CLI Entry Points ``` docling # Main CLI: docling.cli.main:app docling-tools # Model management: docling.cli.tools:app ``` ### Plugin System Entry point `docling_defaults` registered at [pyproject.toml84-85](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L85) enables plugin discovery: - `docling.models.plugins.defaults` provides default OCR engines and picture description models - Third-party plugins can extend Docling without modifying core ### Python API Entry Points ``` ``` Sources: [pyproject.toml84-90](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L90) [docs/usage/index.md1-46](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L1-L46) [docs/examples/minimal\\_vlm\\_pipeline.py1-71](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py#L1-L71) ## Configuration and Environment ### Configuration Hierarchy 1. **CLI Arguments**: Parsed into option objects 2. **Environment Variables**: `DOCLING_DEVICE`, `OMP_NUM_THREADS`, `DOCLING_NUM_THREADS` 3. **Pipeline Options**: `PdfPipelineOptions`, `VlmPipelineOptions`, `AsrPipelineOptions` 4. **Model-Specific Options**: `OcrOptions`, `LayoutOptions`, `TableStructureOptions` 5. **Accelerator Options**: Device placement and thread configuration ### Key Configuration Classes - `AcceleratorOptions`: Hardware acceleration settings - `PdfPipelineOptions`: PDF processing configuration - `VlmPipelineOptions`: Vision-language model settings - `InlineVlmOptions` / `ApiVlmOptions`: Local vs. remote VLM configuration - `OcrOptions`: OCR engine selection and language settings - `TableStructureOptions`: Table model precision modes (FAST/ACCURATE) Sources: Diagram 6 from high-level overview ## Output Formats `DoclingDocument` supports multiple export formats: | Format | Method | Use Case | | -------- | ---------------------- | ------------------------------------------- | | Markdown | `export_to_markdown()` | Human-readable, LLM-friendly | | HTML | `export_to_html()` | Web display, rich formatting | | JSON | `export_to_json()` | Lossless serialization, programmatic access | | DocTags | `export_to_doctags()` | Structured markup format | All exports preserve document structure, provenance, and metadata. The `DoclingDocument` data model is defined in `docling-core` package. Sources: [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35) Diagram 1 from high-level overview ## Development and Distribution ### Package Distribution",
  "- **PyPI**: `pip install docling` - [pyproject.toml2](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L2-L2) - **Version**: 2.55.1 (auto-updated via semantic release) - **License**: MIT - [pyproject.toml5](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L5-L5) ### Development Tools - **Package Manager**: `uv` - [pyproject.toml155-157](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L155-L157) - **Code Formatting**: `ruff` - [pyproject.toml162-238](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L162-L238) - **Type Checking**: `mypy` - [pyproject.toml239-266](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L239-L266) - **Testing**: `pytest` with coverage - **CI/CD**: GitHub Actions, semantic release ### Versioning Semantic versioning with automated releases based on conventional commits: - `feat:` triggers minor version bump - `fix:`, `perf:` trigger patch version bump - Version stored in [pyproject.toml3](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L3-L3) Sources: [pyproject.toml1-280](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L280) [CHANGELOG.md1-430](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md#L1-L430) ## Security and Compliance Docling participates in the OpenSSF Best Practices Badge Program and implements: - HTTPS for network communication - TLS certificate verification - Cryptographically signed releases on PyPI, Quay.io, and GHCR.io - Private vulnerability reporting via email: [deepsearch-core@zurich.ibm.com](mailto:deepsearch-core@zurich.ibm.com.md) - Issue tracking on GitHub Security-conscious features: - Local execution support for air-gapped environments - No telemetry or data transmission by default - Configurable model artifact storage Sources: [.github/SECURITY.md1-43](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md#L1-L43) ## Project Governance - **Hosted by**: LF AI & Data Foundation - **Started by**: IBM Research Zurich (AI for knowledge team) - **Code Repository**: <https://github.com/docling-project/docling> - **Documentation**: <https://docling-project.github.io/docling/> - **License**: MIT - **Citation**: arXiv:2408.09869 (Docling Technical Report) Sources: [README.md149-156](https://github.com/docling-project/docling/blob/f7244a43/README.md#L149-L156) [CITATION.cff1-16](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff#L1-L16) [docs/index.md59-65](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L59-L65) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Overview](#overview.md) - [Purpose and Scope](#purpose-and-scope.md) - [System Purpose](#system-purpose.md) - [Core Architecture](#core-architecture.md) - [System Architecture Diagram](#system-architecture-diagram.md) - [Component Overview](#component-overview.md) - [Key Components](#key-components.md) - [User Interfaces](#user-interfaces.md) - [Core Orchestration Layer](#core-orchestration-layer.md) - [Processing Pipelines](#processing-pipelines.md) - [Document Backends](#document-backends.md) - [AI/ML Model Layer](#aiml-model-layer.md) - [Processing Flow](#processing-flow.md) - [Document Conversion Flow](#document-conversion-flow.md) - [Pipeline Caching Strategy](#pipeline-caching-strategy.md) - [Technology Stack](#technology-stack.md) - [Core Dependencies](#core-dependencies.md) - [Optional Dependencies](#optional-dependencies.md) - [Platform Support](#platform-support.md) - [Entry Points](#entry-points.md) - [CLI Entry Points](#cli-entry-points.md) - [Plugin System](#plugin-system.md) - [Python API Entry Points](#python-api-entry-points.md) - [Configuration and Environment](#configuration-and-environment.md) - [Configuration Hierarchy](#configuration-hierarchy.md) - [Key Configuration Classes](#key-configuration-classes.md) - [Output Formats](#output-formats.md) - [Development and Distribution](#development-and-distribution.md) - [Package Distribution](#package-distribution.md) - [Development Tools](#development-tools.md) - [Versioning](#versioning.md) - [Security and Compliance](#security-and-compliance.md) - [Project Governance](#project-governance.md)",
  "Document Conversion CLI | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Document Conversion CLI Relevant source files",
  "- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) ## Purpose and Scope The Document Conversion CLI provides a command-line interface for converting documents using Docling. The primary command is `docling convert`, which accepts various flags to control conversion behavior, model selection, and output formats. This page documents the CLI arguments, their corresponding configuration options, and usage patterns. For programmatic document conversion using Python, see [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md). For model artifact management via CLI, see [Model Management CLI](docling-project/docling/6.2-model-management-cli.md). ## Basic Usage The CLI is invoked with the `docling` command followed by the `convert` subcommand: ``` ``` By default, the CLI: - Processes all supported input formats - Uses the standard PDF pipeline with DoclingParseV2 backend - Outputs Markdown to the current directory - Enables OCR and table structure extraction Sources: [README.md84-98](https://github.com/docling-project/docling/blob/f7244a43/README.md#L84-L98) [docs/usage/index.md26-39](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L26-L39) ## Command Structure ``` ``` Sources: [docling/cli/main.py141-146](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L141-L146) [docling/cli/main.py298-514](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L298-L514) ## Input Sources The `input_sources` argument accepts one or more paths or URLs: | Input Type | Example | Behavior | | ---------- | ---------------------------------- | ------------------------------------------------- | | Local file | `document.pdf` | Converts single file | | Directory | `./documents/` | Recursively finds files matching `--from` formats | | URL | `https://example.com/file.pdf` | Downloads and converts | | Multiple | `file1.pdf file2.docx https://...` | Processes all inputs | The CLI uses `resolve_source_to_path()` to handle URLs and stores temporary files in a `TemporaryDirectory`: **Directory Processing Logic** When a directory is provided, the CLI: 1. Iterates through `from_formats` (defaults to all `InputFormat` values) 2. Uses `Path.glob(f\"**/*.{ext}\")` for each extension 3. Filters out temporary Word files (names starting with `~$`) 4. Builds a list of `input_doc_paths` Sources: [docling/cli/main.py300-307](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L300-L307) [docling/cli/main.py538-588](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L538-L588) ## Format Selection ### Input Formats (`--from`) Specifies which input formats to process: ``` ```",
  "The `--from` flag maps to `InputFormat` enum values: | Format | Extensions | MIME Types | | ------- | ------------------------ | ------------------------------------------------------------------------- | | `pdf` | pdf | application/pdf | | `docx` | docx, dotx, docm, dotm | application/vnd.openxmlformats-officedocument.wordprocessingml.document | | `pptx` | pptx, potx, ppsx, pptm | application/vnd.openxmlformats-officedocument.presentationml.presentation | | `xlsx` | xlsx, xlsm | application/vnd.openxmlformats-officedocument.spreadsheetml.sheet | | `html` | html, htm, xhtml | text/html, application/xhtml+xml | | `md` | md | text/markdown | | `image` | jpg, png, tif, bmp, webp | image/png, image/jpeg, image/tiff | | `audio` | wav, mp3 | audio/wav, audio/mp3 | Sources: [docling/cli/main.py308-312](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L308-L312) [docling/datamodel/base\\_models.py54-72](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L54-L72) [docling/datamodel/base\\_models.py83-99](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L83-L99) ### Output Formats (`--to`) Specifies output format(s): ``` ``` Available output formats: | Flag | OutputFormat | File Extension | Description | | ----------------- | ----------------- | -------------- | -------------------- | | `md` | MARKDOWN | .md | Markdown text | | `json` | JSON | .json | DoclingDocument JSON | | `html` | HTML | .html | HTML output | | `html_split_page` | HTML\\_SPLIT\\_PAGE | .html | HTML with page views | | `text` | TEXT | .txt | Plain text | | `doctags` | DOCTAGS | .doctags | DocTags format | Sources: [docling/cli/main.py313-315](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L313-L315) [docling/cli/main.py589-597](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L589-L597) [docling/datamodel/base\\_models.py74-80](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L74-L80) ## Pipeline Selection ### Pipeline Types The `--pipeline` flag selects the processing pipeline: ``` ``` **ProcessingPipeline Enum Mapping** ``` ``` Sources: [docling/cli/main.py335-338](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L335-L338) [docling/datamodel/pipeline\\_options.py365-368](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L365-L368) [docling/cli/main.py619-781](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L619-L781) ## OCR Configuration ### OCR Options ``` ``` **OCR Engine Factory and Options Creation** The CLI uses `get_ocr_factory()` to create the appropriate `OcrOptions` subclass: ``` ``` Sources: [docling/cli/main.py347-384](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L347-L384) [docling/cli/main.py599-611](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L599-L611) [docling/datamodel/pipeline\\_options.py74-199](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L74-L199) ## PDF Processing Options ### PDF Backend Selection ``` ``` **Backend Mapping**",
  "| CLI Flag | PdfBackend Enum | Backend Class | | ------------ | ---------------------- | ----------------------------- | | `dlparse_v1` | PdfBackend.DLPARSE\\_V1 | DoclingParseDocumentBackend | | `dlparse_v2` | PdfBackend.DLPARSE\\_V2 | DoclingParseV2DocumentBackend | | `dlparse_v4` | PdfBackend.DLPARSE\\_V4 | DoclingParseV4DocumentBackend | | `pypdfium2` | PdfBackend.PYPDFIUM2 | PyPdfiumDocumentBackend | Sources: [docling/cli/main.py392-394](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L392-L394) [docling/cli/main.py645-655](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L645-L655) [docling/datamodel/pipeline\\_options.py249-256](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L249-L256) ### Table Structure Options ``` ``` The `--table-mode` flag maps to `TableFormerMode` enum: - `fast`: Faster processing with potentially lower accuracy - `accurate`: Higher accuracy with more computation Sources: [docling/cli/main.py360-366](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L360-L366) [docling/cli/main.py395-398](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L395-L398) [docling/datamodel/pipeline\\_options.py55-59](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L55-L59) ## VLM Options When using `--pipeline vlm`, select a vision-language model: ``` ``` **VLM Model Type Mapping** ``` ``` The CLI automatically selects MLX variants on macOS with MPS when `mlx_vlm` is installed. Sources: [docling/cli/main.py339-342](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L339-L342) [docling/cli/main.py699-739](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L699-L739) [docling/datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py) ## ASR Options When using `--pipeline asr`, select an ASR model: ``` ``` **ASR Model Mapping** | CLI Flag | AsrModelType | Model Spec | | ---------------- | ---------------------------- | --------------- | | `whisper_tiny` | AsrModelType.WHISPER\\_TINY | WHISPER\\_TINY | | `whisper_base` | AsrModelType.WHISPER\\_BASE | WHISPER\\_BASE | | `whisper_small` | AsrModelType.WHISPER\\_SMALL | WHISPER\\_SMALL | | `whisper_medium` | AsrModelType.WHISPER\\_MEDIUM | WHISPER\\_MEDIUM | | `whisper_large` | AsrModelType.WHISPER\\_LARGE | WHISPER\\_LARGE | | `whisper_turbo` | AsrModelType.WHISPER\\_TURBO | WHISPER\\_TURBO | Sources: [docling/cli/main.py343-346](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L343-L346) [docling/cli/main.py750-777](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L750-L777) [docling/datamodel/asr\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/asr_model_specs.py) ## Enrichment Options Enrichment models operate on assembled document items to add additional features: ``` ``` **Enrichment Flag Mapping** ``` ```",
  "Sources: [docling/cli/main.py399-417](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L399-L417) [docling/cli/main.py627-630](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L627-L630) [docling/datamodel/pipeline\\_options.py334-349](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L334-L349) ## Output Configuration ### Output Directory ``` ``` Sources: [docling/cli/main.py451-453](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L451-L453) ### Image Export Mode Controls how images are handled in exported formats: ``` ``` The `image_export_mode` parameter affects page image generation: ``` ``` Sources: [docling/cli/main.py328-334](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L328-L334) [docling/cli/main.py638-643](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L638-L643) ### Layout Visualization ``` ``` When `--show-layout` is enabled with `html_split_page` output, the CLI uses `LayoutVisualizer` to overlay bounding boxes on page images. Sources: [docling/cli/main.py316-322](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L316-L322) [docling/cli/main.py231-251](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L231-L251) ## Hardware Acceleration ### Device Selection ``` ``` **AcceleratorDevice Enum** The `--device` flag maps to `AcceleratorDevice` enum values and is passed to all models via `AcceleratorOptions`. Sources: [docling/cli/main.py498-500](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L498-L500) [docling/cli/main.py613](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L613-L613) [docling/datamodel/accelerator\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/accelerator_options.py) ### Thread Configuration ``` ``` The `--num-threads` flag sets `OMP_NUM_THREADS` for model inference and can also be controlled via environment variables: - `DOCLING_NUM_THREADS` - `OMP_NUM_THREADS` Sources: [docling/cli/main.py497](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L497-L497) [docling/cli/main.py613](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L613-L613) ### Batch Size Configuration ``` ``` The `--page-batch-size` flag controls how many pages are processed in one batch. Default is `settings.perf.page_batch_size`. Sources: [docling/cli/main.py507-513](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L507-L513) [docling/cli/main.py528](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L528-L528) ## Debugging Options ### Visualization Flags ``` ``` These flags set corresponding fields in `settings.debug`: ``` ``` Sources: [docling/cli/main.py463-480](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L463-L480) [docling/cli/main.py524-527](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L524-L527) ### Verbosity Levels ``` ``` Sources: [docling/cli/main.py454-462](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L454-L462) [docling/cli/main.py515-522](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L515-L522) ## Advanced Options ### Artifacts Path Specify a custom location for model artifacts: ``` ``` The artifacts path is set on `pipeline_options.artifacts_path` and affects where models are loaded from.",
  "Sources: [docling/cli/main.py418-421](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L418-L421) [docling/cli/main.py783-784](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L783-L784) ### Remote Services Enable connections to remote model inference services: ``` ``` This flag must be enabled when using API-based VLM models or other remote services. Sources: [docling/cli/main.py422-427](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L422-L427) [docling/cli/main.py622](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L622-L622) ### External Plugins Allow loading third-party OCR engine plugins: ``` ``` When `--allow-external-plugins` is enabled, the OCR factory discovers plugins via entry points. Sources: [docling/cli/main.py428-442](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L428-L442) [docling/cli/main.py599-611](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L599-L611) ### Timeout Configuration Set a per-document timeout: ``` ``` Sources: [docling/cli/main.py490-496](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L490-L496) [docling/cli/main.py631](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L631-L631) ### HTTP Headers Provide custom HTTP headers for URL sources: ``` ``` The headers are parsed as JSON and passed to `resolve_source_to_path()`. Sources: [docling/cli/main.py323-327](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L323-L327) [docling/cli/main.py533-536](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L533-L536) ### Error Handling ``` ``` Sources: [docling/cli/main.py443-450](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L443-L450) [docling/cli/main.py796](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L796-L796) ## Options Construction Flow **CLI to Options Object Pipeline** ``` ``` Sources: [docling/cli/main.py613-790](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L613-L790) ## Pipeline-Specific Option Configuration ### Standard Pipeline Path For `--pipeline standard`: 1. Creates `AcceleratorOptions` with `device` and `num_threads` 2. Creates `OcrOptions` using OCR factory with `ocr_engine`, `force_ocr`, `ocr_lang`, `psm` 3. Creates `PdfPipelineOptions` with: - `do_ocr`, `ocr_options` - `do_table_structure`, table mode via `table_structure_options.mode` - Enrichment flags: `do_code_enrichment`, `do_formula_enrichment`, `do_picture_description`, `do_picture_classification` - `document_timeout` 4. Selects backend class based on `--pdf-backend` 5. Creates `PdfFormatOption` with pipeline options and backend 6. Creates `ConvertPipelineOptions` for simple formats (DOCX, HTML, etc.) 7. Builds `format_options` dictionary mapping each `InputFormat` to its `FormatOption` Sources: [docling/cli/main.py619-697](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L619-L697) ### VLM Pipeline Path For `--pipeline vlm`: 1. Creates `VlmPipelineOptions` with `enable_remote_services` 2. Selects VLM model spec based on `--vlm-model`: - Maps `VlmModelType` enum to specific model spec constants - Automatically selects MLX variants on macOS when available 3. Sets `pipeline_options.vlm_options` to selected model spec 4. Creates `PdfFormatOption` with `pipeline_cls=VlmPipeline` 5. Builds `format_options` for PDF and IMAGE formats only Sources: [docling/cli/main.py699-748](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L699-L748) ### ASR Pipeline Path",
  "For `--pipeline asr`: 1. Creates `AsrPipelineOptions` 2. Selects ASR model spec based on `--asr-model`: - Maps `AsrModelType` enum to Whisper model specs 3. Sets `pipeline_options.asr_options` to selected model spec 4. Creates `AudioFormatOption` with `pipeline_cls=AsrPipeline` 5. Builds `format_options` for AUDIO format only Sources: [docling/cli/main.py750-781](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L750-L781) ## Export Documents Function The `export_documents()` function handles writing output files: **Export Logic Flow** ``` ``` Sources: [docling/cli/main.py191-289](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L191-L289) ## Common Usage Examples ### Example 1: Basic PDF Conversion ``` ``` This uses: - `ProcessingPipeline.STANDARD` - `PdfBackend.DLPARSE_V2` - OCR enabled with auto engine selection - Table structure extraction enabled - Output: `document.md` in current directory ### Example 2: Batch Processing with Custom Output ``` ``` ### Example 3: High-Quality PDF Processing ``` ``` ### Example 4: VLM Pipeline with MLX ``` ``` ### Example 5: Audio Transcription ``` ``` ### Example 6: Enriched Document Processing ``` ``` ### Example 7: Multi-Format Batch with Filtering ``` ``` ### Example 8: Debug Visualization ``` ``` ### Example 9: Referenced Images ``` ``` ### Example 10: Remote API Processing ``` ``` Sources: [README.md84-98](https://github.com/docling-project/docling/blob/f7244a43/README.md#L84-L98) [docs/usage/index.md26-39](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L26-L39) [docs/usage/vision\\_models.md13-37](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L13-L37) ## Version and Help Commands ``` ``` The version callback displays: - Docling version - Docling Core version - Docling IBM Models version - Docling Parse version - Python implementation and version - Platform information Sources: [docling/cli/main.py155-170](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L155-L170) [docling/cli/main.py173-188](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L173-L188) [docling/cli/main.py481-489](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L481-L489) ## Implementation Details ### CLI Application Structure The CLI is built with Typer: ``` ``` The main command is decorated with `@app.command()` and contains extensive parameter definitions using `typer.Option()` and `typer.Argument()`. Sources: [docling/cli/main.py141-146](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L141-L146) ### Temporary File Handling URL sources are downloaded into a temporary directory: ``` ``` The temporary directory is automatically cleaned up after processing. Sources: [docling/cli/main.py538-546](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L538-L546) ### Conversion Execution After building `format_options`, the CLI: 1. Creates `DocumentConverter` with allowed formats and format options 2. Calls `converter.convert_all()` with input paths 3. Calls `export_documents()` to write outputs 4. Logs total processing time Sources: [docling/cli/main.py787-815](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L787-L815) ### Click Compatibility The Typer app is converted to a Click app for compatibility: ``` ``` This allows integration with Click-based tools. Sources: [docling/cli/main.py818](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L818-L818) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Document Conversion CLI](#document-conversion-cli.md) - [Purpose and Scope](#purpose-and-scope.md) - [Basic Usage](#basic-usage.md) - [Command Structure](#command-structure.md) - [Input Sources](#input-sources.md) - [Format Selection](#format-selection.md) - [Input Formats (\\`--from\\`)](#input-formats---from.md) - [Output Formats (\\`--to\\`)](#output-formats---to.md) - [Pipeline Selection](#pipeline-selection.md) - [Pipeline Types](#pipeline-types.md) - [OCR Configuration](#ocr-configuration.md) - [OCR Options](#ocr-options.md) - [PDF Processing Options](#pdf-processing-options.md) - [PDF Backend Selection](#pdf-backend-selection.md) - [Table Structure Options](#table-structure-options.md) - [VLM Options](#vlm-options.md) - [ASR Options](#asr-options.md) - [Enrichment Options](#enrichment-options.md) - [Output Configuration](#output-configuration.md) - [Output Directory](#output-directory.md) - [Image Export Mode](#image-export-mode.md) - [Layout Visualization](#layout-visualization.md) - [Hardware Acceleration](#hardware-acceleration.md) - [Device Selection](#device-selection.md) - [Thread Configuration](#thread-configuration.md) - [Batch Size Configuration](#batch-size-configuration.md) - [Debugging Options](#debugging-options.md) - [Visualization Flags](#visualization-flags.md) - [Verbosity Levels](#verbosity-levels.md) - [Advanced Options](#advanced-options.md) - [Artifacts Path](#artifacts-path.md) - [Remote Services](#remote-services.md) - [External Plugins](#external-plugins.md) - [Timeout Configuration](#timeout-configuration.md) - [HTTP Headers](#http-headers.md) - [Error Handling](#error-handling.md) - [Options Construction Flow](#options-construction-flow.md) - [Pipeline-Specific Option Configuration](#pipeline-specific-option-configuration.md) - [Standard Pipeline Path](#standard-pipeline-path.md) - [VLM Pipeline Path](#vlm-pipeline-path.md) - [ASR Pipeline Path](#asr-pipeline-path.md) - [Export Documents Function](#export-documents-function.md) - [Common Usage Examples](#common-usage-examples.md) - [Example 1: Basic PDF Conversion](#example-1-basic-pdf-conversion.md) - [Example 2: Batch Processing with Custom Output](#example-2-batch-processing-with-custom-output.md) - [Example 3: High-Quality PDF Processing](#example-3-high-quality-pdf-processing.md) - [Example 4: VLM Pipeline with MLX](#example-4-vlm-pipeline-with-mlx.md) - [Example 5: Audio Transcription](#example-5-audio-transcription.md) - [Example 6: Enriched Document Processing](#example-6-enriched-document-processing.md) - [Example 7: Multi-Format Batch with Filtering](#example-7-multi-format-batch-with-filtering.md) - [Example 8: Debug Visualization](#example-8-debug-visualization.md) - [Example 9: Referenced Images](#example-9-referenced-images.md) - [Example 10: Remote API Processing](#example-10-remote-api-processing.md) - [Version and Help Commands](#version-and-help-commands.md) - [Implementation Details](#implementation-details.md) - [CLI Application Structure](#cli-application-structure.md) - [Temporary File Handling](#temporary-file-handling.md) - [Conversion Execution](#conversion-execution.md) - [Click Compatibility](#click-compatibility.md)",
  "Extraction Pipeline | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Extraction Pipeline Relevant source files",
  "- [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py) - [docling/datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/api\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py) - [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) - [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py) - [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py) - [docling/models/vlm\\_models\\_inline/mlx\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/models/vlm\\_models\\_inline/vllm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) The Extraction Pipeline provides schema-based structured data extraction from documents using Vision-Language Models. Unlike the VlmPipeline (see [5.3](docling-project/docling/5.3-vlm-pipeline.md)) which performs full document conversion, `ExtractionVlmPipeline` focuses on extracting specific fields defined by user-provided templates, returning JSON-structured data rather than a complete `DoclingDocument`. This pipeline is currently experimental and supports PDF and image formats only. It uses the NuExtract model, which is specifically designed for structured information extraction from visual documents. **Related pages**: For full document conversion with VLM models, see [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md). For general pipeline architecture, see [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md). For the public API, see [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md). ## Architecture Overview The extraction system consists of three main layers: the API layer (`DocumentExtractor`), the pipeline layer (`ExtractionVlmPipeline`), and the model layer (`NuExtractTransformersModel`). ``` ```",
  "**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py32-46](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L46) [docling/document\\_extractor.py88-119](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L119) [docling/pipeline/base\\_extraction\\_pipeline.py15-30](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L30) ### Class Hierarchy ``` ``` **Sources**: [docling/pipeline/base\\_extraction\\_pipeline.py15-72](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L72) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-198](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L198) [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py107-160](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L107-L160) ## Pipeline Initialization `ExtractionVlmPipeline` is initialized with `VlmExtractionPipelineOptions` and creates a `NuExtractTransformersModel` instance. Unlike conversion pipelines, extraction pipelines do not build document structure—they only extract data. ### Configuration ``` ``` **Sources**: [docling/datamodel/vlm\\_model\\_specs.py288-302](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L288-L302) [docling/pipeline/extraction\\_vlm\\_pipeline.py33-46](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L33-L46) The default configuration uses the `numind/NuExtract-2.0-2B` model with the following settings: | Parameter | Default Value | Description | | --------------------- | ------------------------- | ------------------------------ | | `repo_id` | `numind/NuExtract-2.0-2B` | Hugging Face model identifier | | `torch_dtype` | `bfloat16` | Model precision | | `inference_framework` | `TRANSFORMERS` | Uses Hugging Face Transformers | | `response_format` | `PLAINTEXT` | Returns JSON as plain text | | `scale` | `2.0` | Image scaling factor | | `temperature` | `0.0` | Deterministic generation | | `max_new_tokens` | `4096` | Maximum response length | **Sources**: [docling/datamodel/vlm\\_model\\_specs.py288-302](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L288-L302) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py54-85](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L54-L85) ## Extraction Process Flow The extraction process follows a three-phase pattern: image loading, template serialization, and VLM inference. ``` ``` **Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py48-126](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L48-L126) [docling/document\\_extractor.py239-289](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L239-L289) [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py161-290](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L161-L290) ### Image Extraction from Backend The pipeline extracts images from the document backend, respecting page range limits: ``` ``` **Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py135-171](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L135-L171)",
  "The method follows the same page range filtering logic as `PaginatedPipeline`, processing only pages within `[start_page-1, end_page-1]` (0-indexed). This ensures consistent behavior across all pipelines. ## Template Serialization The extraction pipeline supports multiple template formats and converts them to JSON strings for the NuExtract model. ### Supported Template Types | Template Type | Description | Example | | ---------------------- | ----------------------- | ------------------------------- | | `str` | Direct JSON or text | `'{\"name\": \"\", \"date\": \"\"}'` | | `dict` | Python dictionary | `{\"name\": \"\", \"date\": \"\"}` | | `BaseModel` (instance) | Pydantic model instance | `Invoice(customer=\"\", total=0)` | | `Type[BaseModel]` | Pydantic model class | `Invoice` (class itself) | **Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py173-193](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L173-L193) [docling/datamodel/extraction.py38-39](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py#L38-L39) ### Serialization Process ``` ``` **Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py173-193](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L173-L193) When a Pydantic class (not instance) is provided, the pipeline uses `polyfactory.ModelFactory` to generate an example instance with: - `__use_examples__=True`: Prefers `Field(examples=...)` values when present - `__use_defaults__=True`: Uses field defaults instead of random values This allows users to define extraction schemas as Pydantic classes with example values that guide the VLM's output structure. **Example**: ``` ``` **Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py182-191](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L182-L191) ## NuExtract Model Integration The `NuExtractTransformersModel` implements the NuExtract-specific input format and inference logic. ### Model Architecture ``` ``` **Sources**: [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py107-160](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L107-L160) [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py161-290](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L161-L290) ### NuExtract Input Format NuExtract requires a specific input structure that differs from standard VLM prompts: ``` ``` **Sources**: [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py207-249](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L207-L249) The key differences: 1. **Document wrapper**: Images are wrapped in `{type: \"image\", image: PIL}` format 2. **Template parameter**: The schema is passed as a `template` parameter to `apply_chat_template`, not as part of the prompt 3. **Vision processing**: Uses `process_all_vision_info` from `qwen-vl-utils` to extract images from the message structure ### Batch Processing ``` ``` **Sources**: [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py161-290](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L161-L290) ## Output Structure The extraction pipeline produces `ExtractionResult` objects containing per-page extracted data. ### Data Models ``` ``` **Sources**: [docling/datamodel/extraction.py1-40](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py#L1-L40) ### Extraction Result Processing The pipeline attempts to parse the VLM response as JSON. If parsing fails, the raw text is still preserved: ``` ```",
  "**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py82-107](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L82-L107) ### Status Determination The pipeline sets the final status based on page-level errors: | Condition | Status | | ---------------------------------- | --------- | | All pages extracted without errors | `SUCCESS` | | At least one page has errors | `FAILURE` | | No pages processed | `FAILURE` | **Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py128-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L128-L133) This differs from conversion pipelines which can have `PARTIAL_SUCCESS` status. Extraction is more binary: either data is extracted cleanly or it fails. ## Comparison with VlmPipeline The extraction and conversion pipelines serve different purposes and have distinct architectures: ``` ``` **Key Differences**: | Aspect | VlmPipeline | ExtractionVlmPipeline | | -------------------- | --------------------------------------- | --------------------------------- | | **Base class** | `PaginatedPipeline` → `ConvertPipeline` | `BaseExtractionPipeline` | | **Purpose** | Full document conversion | Schema-based data extraction | | **Input** | Document only | Document + template | | **VLM model** | GraniteDocling, SmolDocling, etc. | NuExtract-2.0 | | **Response format** | DOCTAGS, Markdown, HTML | JSON (plain text) | | **Output** | `DoclingDocument` with full structure | `ExtractionResult` with JSON data | | **Phases** | build → assemble → enrich | extract only | | **Template support** | No | Yes (str/dict/Pydantic) | **Sources**: [docling/pipeline/vlm\\_pipeline.py50-113](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L113) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-46](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L46) [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) [docling/pipeline/base\\_extraction\\_pipeline.py15-72](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L72) ## Usage Patterns The extraction pipeline is accessed through the `DocumentExtractor` API, which mirrors the `DocumentConverter` API but targets extraction workflows. ### Basic Extraction ``` ``` **Example workflow**: 1. Create `DocumentExtractor` with desired formats and options 2. Define extraction template (dict, Pydantic class, etc.) 3. Call `extract()` or `extract_all()` with source and template 4. Receive `ExtractionResult` with per-page extracted data **Sources**: [docling/document\\_extractor.py88-193](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L193) ### Pipeline Caching The extractor caches pipeline instances by `(pipeline_class, options_hash)` to avoid redundant model loading: ``` ``` **Sources**: [docling/document\\_extractor.py291-317](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L291-L317) This pattern matches the `DocumentConverter` caching strategy, ensuring that multiple extraction calls with identical configurations reuse the same model instance, avoiding expensive reloads. **Sources**: [docling/document\\_converter.py229-248](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L229-L248) (converter equivalent) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Extraction Pipeline](#extraction-pipeline.md) - [Architecture Overview](#architecture-overview.md) - [Class Hierarchy](#class-hierarchy.md) - [Pipeline Initialization](#pipeline-initialization.md) - [Configuration](#configuration.md) - [Extraction Process Flow](#extraction-process-flow.md) - [Image Extraction from Backend](#image-extraction-from-backend.md) - [Template Serialization](#template-serialization.md) - [Supported Template Types](#supported-template-types.md) - [Serialization Process](#serialization-process.md) - [NuExtract Model Integration](#nuextract-model-integration.md) - [Model Architecture](#model-architecture.md) - [NuExtract Input Format](#nuextract-input-format.md) - [Batch Processing](#batch-processing.md) - [Output Structure](#output-structure.md) - [Data Models](#data-models.md) - [Extraction Result Processing](#extraction-result-processing.md) - [Status Determination](#status-determination.md) - [Comparison with VlmPipeline](#comparison-with-vlmpipeline.md) - [Usage Patterns](#usage-patterns.md) - [Basic Extraction](#basic-extraction.md) - [Pipeline Caching](#pipeline-caching.md)",
  "Processing Pipelines | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Processing Pipelines Relevant source files",
  "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) Processing pipelines form the core orchestration layer in Docling that coordinates document backends, AI/ML models, and configuration options to convert raw documents into structured `DoclingDocument` representations. This page covers the pipeline architecture, available pipeline types, and how models are orchestrated within pipelines. For information about specific pipeline implementations, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) and [VLM Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md). For details about the models used within pipelines, see [AI/ML Models](docling-project/docling/4-aiml-models.md). For configuration of pipeline behavior, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md). ## Pipeline Architecture Overview Docling provides two main pipeline hierarchies: conversion pipelines for document processing and extraction pipelines for structured data extraction. Each pipeline type is designed for specific document formats and processing requirements. ### Pipeline Base Architecture ``` ```",
  "Sources: [docling/pipeline/base\\_pipeline.py43-184](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L184) [docling/pipeline/vlm\\_pipeline.py50](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L50) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L296) [docling/pipeline/simple\\_pipeline.py16](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L16-L16) [docling/pipeline/asr\\_pipeline.py204](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L204-L204) [docling/pipeline/base\\_extraction\\_pipeline.py15](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L15) [docling/pipeline/extraction\\_vlm\\_pipeline.py32](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L32) # Processing Pipelines Processing pipelines form the core orchestration layer in Docling that coordinates document backends, AI/ML models, and configuration options to convert raw documents into structured `DoclingDocument` representations. This page covers the pipeline architecture, available pipeline types, and how models are orchestrated within pipelines. For information about specific pipeline implementations, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) and [VLM Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md). For details about the models used within pipelines, see [AI/ML Models](docling-project/docling/4-aiml-models.md). For configuration of pipeline behavior, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md). ## Pipeline Architecture Overview Pipelines in Docling implement the `PaginatedPipeline` base class and orchestrate multiple processing models in sequence. Each pipeline type is designed for specific document formats and processing requirements. ### Pipeline Base Architecture ``` ``` Sources: [docling/pipeline/base\\_pipeline.py29-106](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L29-L106) [docling/pipeline/standard\\_pdf\\_pipeline.py39-42](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L39-L42) [docling/pipeline/vlm\\_pipeline.py50-53](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L53) ## Pipeline Types and Backend Compatibility Different pipeline types are designed for specific document formats and processing approaches. The `DocumentConverter` selects pipelines based on backend compatibility using the `is_backend_supported()` method. ### Pipeline Type Selection ``` ``` Sources: [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py636-637](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L636-L637) [docling/pipeline/vlm\\_pipeline.py386-388](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L386-L388) [docling/pipeline/simple\\_pipeline.py54-55](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L54-L55) [docling/pipeline/asr\\_pipeline.py240-241](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L240-L241) ## Pipeline Implementations Docling provides five main pipeline implementations for different document processing needs: 1. **ThreadedStandardPdfPipeline**: High-performance parallel PDF processing with multi-stage AI models 2. **VlmPipeline**: Vision-Language Model based processing for document understanding 3. **SimplePipeline**: Direct conversion for declarative document formats 4. **AsrPipeline**: Audio transcription using Whisper models 5. **ExtractionVlmPipeline**: Structured data extraction using vision-language models ### ThreadedStandardPdfPipeline Architecture The `ThreadedStandardPdfPipeline` uses a sophisticated queue-based architecture with parallel processing stages. Each stage runs in its own thread with bounded queues for back-pressure control.",
  "``` ``` Sources: [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296-427](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L427) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py96-163](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L96-L163) ### ThreadedQueue Implementation The threaded pipeline uses custom queue implementation with explicit close semantics and timeout support. ``` ``` Sources: [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py59-94](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L59-L94) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py96-163](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L96-L163) ### VlmPipeline and ExtractionVlmPipeline The `VlmPipeline` processes documents using Vision-Language Models with different inference frameworks and response formats. The `ExtractionVlmPipeline` specializes in structured data extraction from documents. ``` ``` Sources: [docling/pipeline/vlm\\_pipeline.py50-113](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L113) [docling/pipeline/vlm\\_pipeline.py136-159](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L136-L159) [docling/pipeline/vlm\\_pipeline.py188-380](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L188-L380) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-126](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L126) ### SimplePipeline and AsrPipeline The `SimplePipeline` handles declarative document backends that can directly produce `DoclingDocument` objects. The `AsrPipeline` processes audio files using Whisper models. ``` ``` Sources: [docling/pipeline/simple\\_pipeline.py16-55](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L16-L55) [docling/pipeline/asr\\_pipeline.py98-201](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L98-L201) [docling/pipeline/asr\\_pipeline.py204-241](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L204-L241) ## Model Factory Integration Pipelines use factory patterns to instantiate models with appropriate configurations. This allows for plugin support and model selection based on options. ### Factory-Based Model Creation | Model Type | Factory Method | Configuration Source | Plugin Support | | ------------------- | ----------------------------------- | ---------------------------------------------- | -------------- | | OCR Models | `get_ocr_factory()` | `pipeline_options.ocr_options` | Yes | | Picture Description | `get_picture_description_factory()` | `pipeline_options.picture_description_options` | Yes | | Layout Analysis | Direct instantiation | `pipeline_options.layout_options` | No | | Table Structure | Direct instantiation | `pipeline_options.table_structure_options` | No | | VLM Models | Conditional instantiation | `pipeline_options.vlm_options` | No | ``` ``` Sources: [docling/pipeline/standard\\_pdf\\_pipeline.py150-173](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L150-L173) [docling/pipeline/vlm\\_pipeline.py77-113](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L77-L113) ## Pipeline Execution Flow Pipelines follow a common execution pattern with different implementations for page processing, document assembly, and enrichment. The base execution flow handles error management and resource cleanup. ### BasePipeline Execution Flow ``` ```",
  "Sources: [docling/pipeline/base\\_pipeline.py62-123](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L123) [docling/pipeline/base\\_pipeline.py93-115](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L93-L115) ### PaginatedPipeline vs ThreadedPipeline Processing ``` ``` Sources: [docling/pipeline/base\\_pipeline.py197-283](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L197-L283) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py428-506](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L428-L506) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py226-272](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L226-L272) ### ThreadedStandardPdfPipeline Document Assembly ``` ``` Sources: [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py535-627](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L535-L627) [docling/pipeline/vlm\\_pipeline.py136-185](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L136-L185) [docling/pipeline/vlm\\_pipeline.py188-303](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L188-L303) ## Configuration and Model Selection Pipeline behavior is controlled through `PipelineOptions` classes that enable/disable models and configure their parameters. Models can be conditionally instantiated based on these options. ### Configuration-Driven Model Instantiation ``` ``` Sources: [docling/pipeline/standard\\_pdf\\_pipeline.py42-134](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L42-L134) [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Processing Pipelines](#processing-pipelines.md) - [Pipeline Architecture Overview](#pipeline-architecture-overview.md) - [Pipeline Base Architecture](#pipeline-base-architecture.md) - [Processing Pipelines](#processing-pipelines-1.md) - [Pipeline Architecture Overview](#pipeline-architecture-overview-1.md) - [Pipeline Base Architecture](#pipeline-base-architecture-1.md) - [Pipeline Types and Backend Compatibility](#pipeline-types-and-backend-compatibility.md) - [Pipeline Type Selection](#pipeline-type-selection.md) - [Pipeline Implementations](#pipeline-implementations.md) - [ThreadedStandardPdfPipeline Architecture](#threadedstandardpdfpipeline-architecture.md) - [ThreadedQueue Implementation](#threadedqueue-implementation.md) - [VlmPipeline and ExtractionVlmPipeline](#vlmpipeline-and-extractionvlmpipeline.md) - [SimplePipeline and AsrPipeline](#simplepipeline-and-asrpipeline.md) - [Model Factory Integration](#model-factory-integration.md) - [Factory-Based Model Creation](#factory-based-model-creation.md) - [Pipeline Execution Flow](#pipeline-execution-flow.md) - [BasePipeline Execution Flow](#basepipeline-execution-flow.md) - [PaginatedPipeline vs ThreadedPipeline Processing](#paginatedpipeline-vs-threadedpipeline-processing.md) - [ThreadedStandardPdfPipeline Document Assembly](#threadedstandardpdfpipeline-document-assembly.md) - [Configuration and Model Selection](#configuration-and-model-selection.md) - [Configuration-Driven Model Instantiation](#configuration-driven-model-instantiation.md)",
  "Command Line Interface | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Command Line Interface Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) This document covers Docling's command-line interface tools for document conversion and model management. The CLI provides access to Docling's document processing capabilities through two main commands: the primary `docling` command for document conversion and the `docling-tools` command for model artifact management. For information about using Docling programmatically, see [Python SDK](docling-project/docling/7-python-sdk.md). For details about the underlying processing pipelines, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md). ## Overview Docling provides two CLI entry points defined in [pyproject.toml86-88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L86-L88): - **`docling`** - Main document conversion interface supporting batch processing of various document formats - **`docling-tools`** - Utility for downloading and managing AI model artifacts Both tools are built using the Typer framework and provide comprehensive help through the `--help` flag. **CLI Entry Points Architecture** ``` ``` Sources: [pyproject.toml86-88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L86-L88) [docling/cli/main.py136-141](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L136-L141) ## Document Conversion Command The primary `docling convert` command processes documents through a comprehensive interface supporting multiple input/output formats, processing pipelines, and configuration options. ### Core Parameters The CLI accepts the following main parameter categories: **Input/Output Configuration:** - `input_sources` - File paths, directories, or URLs to process - `--from` - Input format filtering ([docling/cli/main.py303-307](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L303-L307)) - `--to` - Output format selection ([docling/cli/main.py308-310](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L308-L310)) - `--output` - Output directory ([docling/cli/main.py432-434](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L432-L434)) **Processing Pipeline Options:** - `--pipeline` - Choose between `standard`, `vlm`, or `asr` pipelines ([docling/cli/main.py330-333](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L330-L333)) - `--vlm-model` - VLM model selection for vision-language processing ([docling/cli/main.py334-337](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L334-L337)) - `--asr-model` - ASR model for audio processing ([docling/cli/main.py338-341](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L338-L341)) **OCR Configuration:**",
  "- `--ocr/--no-ocr` - Enable/disable OCR processing ([docling/cli/main.py342-347](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L342-L347)) - `--force-ocr` - Replace existing text with OCR ([docling/cli/main.py348-354](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L348-L354)) - `--ocr-engine` - OCR engine selection ([docling/cli/main.py355-365](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L355-L365)) - `--ocr-lang` - Language configuration ([docling/cli/main.py366-372](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L366-L372)) ### Processing Pipeline Selection **Pipeline Processing Flow** ``` ``` Sources: [docling/cli/main.py330-333](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L330-L333) [docling/datamodel/pipeline\\_options.py347-351](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L347-L351) ### Format Support and Export Options The CLI supports multiple input formats through the `FormatToExtensions` mapping and provides various export options: **Supported Output Formats:** - **JSON** - Complete document structure with metadata ([docling/cli/main.py207-212](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L207-L212)) - **HTML** - Web-viewable format with optional split-page view ([docling/cli/main.py215-246](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L215-L246)) - **Markdown** - Human-readable text format ([docling/cli/main.py259-264](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L259-L264)) - **TXT** - Plain text extraction ([docling/cli/main.py249-256](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L249-L256)) - **DocTags** - Document token format ([docling/cli/main.py267-270](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L267-L270)) **Image Export Modes:** The `--image-export-mode` parameter controls how images are handled in exports ([docling/cli/main.py323-329](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L323-L329)): - `PLACEHOLDER` - Mark image positions only - `EMBEDDED` - Base64 encoded images inline - `REFERENCED` - External PNG files with references ### Advanced Configuration **PDF Processing Options:** - `--pdf-backend` - Backend selection (DLPARSE\\_V4, DLPARSE\\_V2, PYPDFIUM2) ([docling/cli/main.py373-375](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L373-L375)) - `--table-mode` - Table structure model mode (FAST/ACCURATE) ([docling/cli/main.py376-379](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L376-L379)) - `--enrich-code` - Enable code enrichment ([docling/cli/main.py380-383](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L380-L383)) - `--enrich-formula` - Enable formula enrichment ([docling/cli/main.py384-387](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L384-L387)) **Performance and Resource Control:**",
  "- `--num-threads` - Threading configuration ([docling/cli/main.py478](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L478-L478)) - `--device` - Accelerator device selection ([docling/cli/main.py479-481](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L479-L481)) - `--document-timeout` - Per-document timeout ([docling/cli/main.py471-477](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L471-L477)) - `--abort-on-error` - Error handling behavior ([docling/cli/main.py424-431](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L424-L431)) Sources: [docling/cli/main.py294-500](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L294-L500) [docling/datamodel/pipeline\\_options.py232-239](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L232-L239) ## CLI Processing Workflow The main processing workflow in the `convert` command follows this pattern: **CLI Processing Implementation** ``` ``` Sources: [docling/cli/main.py294-500](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L294-L500) [docling/cli/main.py186-285](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L186-L285) ## Command Examples **Basic Document Conversion:** ``` ``` **Batch Processing with VLM Pipeline:** ``` ``` **OCR Configuration:** ``` ``` **Advanced PDF Processing:** ``` ``` Sources: [docling/cli/main.py294-500](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L294-L500) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Command Line Interface](#command-line-interface.md) - [Overview](#overview.md) - [Document Conversion Command](#document-conversion-command.md) - [Core Parameters](#core-parameters.md) - [Processing Pipeline Selection](#processing-pipeline-selection.md) - [Format Support and Export Options](#format-support-and-export-options.md) - [Advanced Configuration](#advanced-configuration.md) - [CLI Processing Workflow](#cli-processing-workflow.md) - [Command Examples](#command-examples.md)",
  "Installation | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Installation Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) ## Purpose and Scope This page provides comprehensive instructions for installing Docling, including system requirements, dependency management, and model artifact setup. It covers base installation, optional feature packages, platform-specific considerations, and offline deployment scenarios. For information about using Docling after installation, see [Quick Start](docling-project/docling/1.2-quick-start.md). For advanced configuration options, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md). --- ## System Requirements ### Python Version Docling requires **Python 3.9 or higher, but less than 4.0**. The package supports Python 3.9 through 3.13. ``` requires-python = '>=3.9,<4.0' ``` ### Platform Support Docling is tested and supported on: | Platform | Architecture | Notes | | ----------- | ---------------------------------------- | -------------------------------------------- | | **macOS** | x86\\_64, arm64 | Full support including native OCR (`ocrmac`) | | **Linux** | x86\\_64, aarch64, armv7l, ppc64le, s390x | vLLM backend only on x86\\_64 | | **Windows** | x86\\_64, i686 | Full support | Sources: [pyproject.toml19-32](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L19-L32) [pyproject.toml94-100](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L94-L100) --- ## Base Installation ### Standard Installation Install Docling using pip or uv: ``` ``` or with uv: ``` ``` This installs the core package with the following key dependencies: | Dependency | Purpose | | ---------------------------- | ---------------------------------------- | | `docling-core` | Unified document data model and chunking | | `docling-parse` | Text extraction from PDFs | | `docling-ibm-models` | AI model implementations | | `pypdfium2` | PDF rendering backend | | `rapidocr` | Default OCR engine (Python <3.14) | | `python-docx`, `python-pptx` | Office document parsing | | `beautifulsoup4`, `lxml` | HTML/XML parsing | | `openpyxl` | Excel file support | | `pillow` | Image processing | | `transformers`, `accelerate` | ML model inference | ### Installation Architecture ``` ``` Sources: [pyproject.toml45-76](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L45-L76) [pyproject.toml91-110](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L91-L110) --- ## Optional Extras Docling provides several optional feature packages installed via extras syntax: ``` ``` ### OCR Engines #### EasyOCR Deep learning-based OCR engine: ``` ```",
  "Installs: `easyocr>=1.7,<2.0` #### Tesseract OCR Python binding for Tesseract OCR: ``` ``` Installs: `tesserocr>=2.7.1,<3.0.0` **Note**: Requires Tesseract system libraries. On RHEL/CentOS, also install OSD data: ``` ``` #### macOS Native OCR Native Vision framework OCR (macOS only): ``` ``` Installs: `ocrmac>=1.0.0,<2.0.0` (only on Darwin systems) #### RapidOCR with ONNX Runtime Optimized OCR with ONNX backend: ``` ``` Installs: `rapidocr>=3.3,<4.0.0` + `onnxruntime>=1.7.0,<2.0.0` **Note**: `rapidocr` is included in base installation for Python <3.14, but without `onnxruntime`. This extra adds ONNX acceleration. ### Vision Language Models (VLM) For end-to-end document understanding with VLMs: ``` ``` Includes: - `transformers>=4.46.0,<5.0.0` - HuggingFace Transformers backend - `accelerate>=1.2.1,<2.0.0` - Model acceleration - `mlx-vlm>=0.3.0,<1.0.0` - Apple Silicon acceleration (macOS arm64, Python ≥3.10) - `vllm>=0.10.0,<1.0.0` - Optimized inference (Linux x86\\_64, Python ≥3.10) - `qwen-vl-utils>=0.0.11` - Qwen VL utilities **Platform Requirements**: - `mlx-vlm`: macOS (arm64) and Python ≥3.10 - `vllm`: Linux (x86\\_64) and Python ≥3.10 ### Audio Transcription (ASR) For processing audio files: ``` ``` Installs: `openai-whisper>=20250625` ### Optional Extras Summary Table | Extra | Purpose | Platform Constraints | Key Dependencies | | ----------- | ---------------------- | ---------------------------------------------------------------- | ----------------------------------------- | | `easyocr` | Deep learning OCR | All | `easyocr>=1.7` | | `tesserocr` | Tesseract binding | All (requires system libs) | `tesserocr>=2.7.1` | | `ocrmac` | Native macOS OCR | macOS only | `ocrmac>=1.0.0` | | `rapidocr` | ONNX-accelerated OCR | All | `rapidocr>=3.3`, `onnxruntime>=1.7.0` | | `vlm` | Vision language models | mlx: macOS arm64, Python ≥3.10 vllm: Linux x86\\_64, Python ≥3.10 | `transformers>=4.46.0`, `mlx-vlm`, `vllm` | | `asr` | Audio transcription | All | `openai-whisper>=20250625` | Sources: [pyproject.toml91-110](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L91-L110) --- ## Model Artifacts Docling uses pre-trained AI models for document understanding. Models can be downloaded automatically (online mode) or pre-downloaded for offline deployment. ### Automatic Download (Online Mode) By default, models are downloaded automatically on first use from HuggingFace or ModelScope. They are cached in: ``` ~/.cache/docling/models/ ``` or the directory specified by the `DOCLING_CACHE_DIR` environment variable. ### Pre-downloading Models (Offline Mode) The `docling-tools` CLI provides commands for pre-downloading models. #### Download Default Models Download the standard set of models (layout, tableformer, code\\_formula, picture\\_classifier, rapidocr): ``` ``` #### Download Specific Models ``` ``` #### Download All Available Models ``` ``` #### Available Model Options",
  "| Model | Description | Default | | -------------------- | -------------------------------------------- | ------- | | `layout` | Heron layout analysis model | ✓ | | `tableformer` | Table structure recognition | ✓ | | `code_formula` | Code and formula detection | ✓ | | `picture_classifier` | Image classification | ✓ | | `rapidocr` | RapidOCR models (both torch and onnxruntime) | ✓ | | `easyocr` | EasyOCR models | ✗ | | `smolvlm` | SmolVLM vision model | ✗ | | `granitedocling` | GraniteDocling VLM (Transformers) | ✗ | | `granitedocling_mlx` | GraniteDocling VLM (MLX, macOS) | ✗ | | `smoldocling` | SmolDocling VLM (Transformers) | ✗ | | `smoldocling_mlx` | SmolDocling VLM (MLX, macOS) | ✗ | | `granite_vision` | Granite Vision picture description | ✗ | #### Download Arbitrary HuggingFace Models For custom models or repositories: ``` ``` ### Using Pre-downloaded Models After downloading, configure Docling to use local artifacts: **CLI**: ``` ``` **Python**: ``` ``` ### Model Download Architecture ``` ``` Sources: [docling/cli/models.py54-136](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L136) [docling/utils/model\\_downloader.py30-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L158) --- ## OCR Engine Selection Docling's `OcrAutoModel` automatically selects the best available OCR engine based on platform and installed packages. ### Selection Priority The auto-selection follows this priority order: ``` ``` **Priority Order**: 1. **OcrMacModel** (macOS only) - Uses native Vision framework 2. **RapidOcrModel with onnxruntime** - Fast ONNX-accelerated inference 3. **EasyOcrModel** - Deep learning-based OCR 4. **RapidOcrModel with torch** - PyTorch-based inference If no engine is found, a warning is logged: \"No OCR engine found. Please review the install details.\" Sources: [docling/models/auto\\_ocr\\_model.py41-121](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py#L41-L121) --- ## RapidOCR Model Configuration RapidOCR requires model files to be downloaded. The system automatically manages this through `RapidOcrModel.download_models()`. ### Default Models RapidOCR uses PP-OCRv4 models from ModelScope: | Component | Purpose | ONNX Path | Torch Path | | -------------- | --------------------- | ------------------------------------------------------------- | ------------------------------------------------------- | | Detection | Text region detection | `onnx/PP-OCRv4/det/ch_PP-OCRv4_det_infer.onnx` | `torch/PP-OCRv4/det/ch_PP-OCRv4_det_infer.pth` | | Classification | Text orientation | `onnx/PP-OCRv4/cls/ch_ppocr_mobile_v2.0_cls_infer.onnx` | `torch/PP-OCRv4/cls/ch_ptocr_mobile_v2.0_cls_infer.pth` | | Recognition | Character recognition | `onnx/PP-OCRv4/rec/ch_PP-OCRv4_rec_infer.onnx` | `torch/PP-OCRv4/rec/ch_PP-OCRv4_rec_infer.pth` | | Keys | Character dictionary | `paddle/PP-OCRv4/rec/ch_PP-OCRv4_rec_infer/ppocr_keys_v1.txt` | Same | ### Model Download Process When `docling-tools download rapidocr` is executed: 1. Both `onnxruntime` and `torch` backend models are downloaded 2. Models are fetched from ModelScope CDN 3. Files are stored in `{cache_dir}/models/RapidOcr/` 4. Model paths follow the structure defined in `_default_models` dictionary",
  "Sources: [docling/models/rapid\\_ocr\\_model.py38-80](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L38-L80) [docling/models/rapid\\_ocr\\_model.py202-224](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L202-L224) --- ## Platform-Specific Setup ### macOS **Native OCR**: - Install `ocrmac` extra for native Vision framework OCR - Automatically selected by `OcrAutoModel` on macOS - Best performance on Apple Silicon with MLX models **MLX Acceleration**: - For VLM models on Apple Silicon (arm64), install `vlm` extra - Enables `mlx-vlm>=0.3.0` (Python ≥3.10 required) - Provides hardware acceleration for M1/M2/M3 chips **Example**: ``` ``` ### Linux **CUDA Support**: - Core dependencies support CUDA acceleration - VLM extra includes `vllm` for optimized inference (x86\\_64 only, Python ≥3.10) - Use `--device=cuda` or `DOCLING_DEVICE=cuda` for GPU acceleration **System Dependencies for Tesseract**: ``` ``` **Example**: ``` ``` ### Windows Windows is fully supported for core functionality and most OCR engines. **Limitations**: - `vllm` backend not available (Linux x86\\_64 only) - `mlx-vlm` not available (macOS only) **Example**: ``` ``` Sources: [pyproject.toml55](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L55-L55) [pyproject.toml94-99](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L94-L99) --- ## Verification ### Verify Installation Check that Docling is installed correctly: ``` ``` ### Verify OCR Engine Test OCR engine selection: ``` ``` Expected log output: ``` INFO: Auto OCR model selected rapidocr with onnxruntime. ``` or ``` INFO: Auto OCR model selected ocrmac. ``` ### Verify Model Downloads Check that models are cached: ``` ``` Expected directories: - `Heron/` - Layout model - `TableFormer/` - Table structure model - `RapidOcr/` - OCR models - Other model directories based on usage ### Verify VLM Installation If VLM extra is installed: ``` ``` Sources: [docling/models/auto\\_ocr\\_model.py42-120](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py#L42-L120) [docling/cli/models.py54-136](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L136) --- ## Troubleshooting ### Common Issues **Issue**: `No OCR engine found` warning **Solution**: Install at least one OCR engine: ``` ``` **Issue**: `ImportError: transformers >=4.46 is not installed` **Solution**: Install VLM extra: ``` ``` **Issue**: RapidOCR returns empty results **Solution**: Ensure models are downloaded: ``` ``` **Issue**: Tesseract OSD errors on RHEL **Solution**: Install OSD data package: ``` ``` ### Dependency Conflicts If you encounter dependency conflicts, consider using `uv` for better dependency resolution: ``` ``` Sources: [docling/models/rapid\\_ocr\\_model.py100-106](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L100-L106) [docling/models/picture\\_description\\_vlm\\_model.py56-62](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L56-L62) --- ## Environment Variables The following environment variables affect installation and runtime behavior: | Variable | Purpose | Default | | --------------------- | ------------------------------------- | -------------------------- | | `DOCLING_CACHE_DIR` | Model cache directory | `~/.cache/docling` | | `DOCLING_DEVICE` | Compute device (cpu, cuda, mps, auto) | `auto` | | `OMP_NUM_THREADS` | OpenMP thread count | System default | | `DOCLING_NUM_THREADS` | Docling-specific thread count | Value of `OMP_NUM_THREADS` | Example: ``` ```",
  "Sources: [pyproject.toml1-110](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L110) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Installation](#installation.md) - [Purpose and Scope](#purpose-and-scope.md) - [System Requirements](#system-requirements.md) - [Python Version](#python-version.md) - [Platform Support](#platform-support.md) - [Base Installation](#base-installation.md) - [Standard Installation](#standard-installation.md) - [Installation Architecture](#installation-architecture.md) - [Optional Extras](#optional-extras.md) - [OCR Engines](#ocr-engines.md) - [EasyOCR](#easyocr.md) - [Tesseract OCR](#tesseract-ocr.md) - [macOS Native OCR](#macos-native-ocr.md) - [RapidOCR with ONNX Runtime](#rapidocr-with-onnx-runtime.md) - [Vision Language Models (VLM)](#vision-language-models-vlm.md) - [Audio Transcription (ASR)](#audio-transcription-asr.md) - [Optional Extras Summary Table](#optional-extras-summary-table.md) - [Model Artifacts](#model-artifacts.md) - [Automatic Download (Online Mode)](#automatic-download-online-mode.md) - [Pre-downloading Models (Offline Mode)](#pre-downloading-models-offline-mode.md) - [Download Default Models](#download-default-models.md) - [Download Specific Models](#download-specific-models.md) - [Download All Available Models](#download-all-available-models.md) - [Available Model Options](#available-model-options.md) - [Download Arbitrary HuggingFace Models](#download-arbitrary-huggingface-models.md) - [Using Pre-downloaded Models](#using-pre-downloaded-models.md) - [Model Download Architecture](#model-download-architecture.md) - [OCR Engine Selection](#ocr-engine-selection.md) - [Selection Priority](#selection-priority.md) - [RapidOCR Model Configuration](#rapidocr-model-configuration.md) - [Default Models](#default-models.md) - [Model Download Process](#model-download-process.md) - [Platform-Specific Setup](#platform-specific-setup.md) - [macOS](#macos.md) - [Linux](#linux.md) - [Windows](#windows.md) - [Verification](#verification.md) - [Verify Installation](#verify-installation.md) - [Verify OCR Engine](#verify-ocr-engine.md) - [Verify Model Downloads](#verify-model-downloads.md) - [Verify VLM Installation](#verify-vlm-installation.md) - [Troubleshooting](#troubleshooting.md) - [Common Issues](#common-issues.md) - [Dependency Conflicts](#dependency-conflicts.md) - [Environment Variables](#environment-variables.md)",
  "ASR Pipeline | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # ASR Pipeline Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) The ASR (Automatic Speech Recognition) Pipeline provides audio transcription capabilities within Docling, converting audio files into text-based `DoclingDocument` representations. This pipeline uses OpenAI's Whisper models to transcribe speech and generates structured output with optional timestamps and word-level segmentation. For information about other pipeline types, see: - Standard PDF processing: [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - Vision-based document processing: [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - Structured data extraction: [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) ## Overview The ASR Pipeline differs fundamentally from other Docling pipelines in several ways: 1. **No page-based processing**: Audio files are not paginated, so the pipeline inherits directly from `BasePipeline` rather than `PaginatedPipeline` 2. **Backend architecture**: Uses `NoOpBackend` since audio files don't require document parsing like PDFs 3. **Output format**: Produces text-based `DoclingDocument` with conversation items containing transcribed text and optional timing information 4. **Model dependency**: Requires the `openai-whisper` package (installable via `pip install openai-whisper` or `uv sync --extra asr`) Sources: [docling/pipeline/asr\\_pipeline.py1-270](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L1-L270) ## Architecture ``` ``` **Figure 1: ASR Pipeline Component Architecture** The ASR Pipeline follows a streamlined architecture compared to document processing pipelines: - **NoOpBackend** provides access to the audio file path or stream without parsing - **\\_NativeWhisperModel** handles the actual transcription using Whisper - **\\_ConversationItem** structures represent transcribed segments with metadata - Final output is a `DoclingDocument` populated with `TextItem` elements Sources: [docling/pipeline/asr\\_pipeline.py1-50](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L1-L50) [docling/pipeline/asr\\_pipeline.py232-270](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L232-L270) ## Pipeline Initialization",
  "### Class Hierarchy ``` ``` **Figure 2: ASR Pipeline Class Hierarchy** The `AsrPipeline` class inherits directly from `BasePipeline` (not `PaginatedPipeline`) because audio files are not paginated. Sources: [docling/pipeline/asr\\_pipeline.py232-270](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L232-L270) [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) ### Initialization Process The pipeline is initialized in `AsrPipeline.__init__()`: | Component | Purpose | Configuration Source | | ------------------ | ----------------------------------------- | ----------------------------- | | `pipeline_options` | Contains ASR model configuration | `AsrPipelineOptions` | | `keep_backend` | Set to `True` to retain backend reference | Fixed value | | `_model` | Whisper transcription model wrapper | `_NativeWhisperModel` | | `artifacts_path` | Model download/cache location | Inherited from `BasePipeline` | The initialization delegates model setup to `_NativeWhisperModel`: ``` AsrPipeline.__init__() ├── super().__init__(pipeline_options) │ └── Sets artifacts_path from options or settings ├── self.keep_backend = True └── self._model = _NativeWhisperModel(...) ├── Import whisper package ├── Set device (CPU/CUDA/MPS) based on accelerator_options ├── Load Whisper model with name from asr_options.repo_id └── Configure transcription parameters (verbose, timestamps, word_timestamps) ``` Sources: [docling/pipeline/asr\\_pipeline.py233-251](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L233-L251) [docling/pipeline/asr\\_pipeline.py99-149](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L99-L149) ## Audio Processing Flow ``` ``` **Figure 3: ASR Pipeline Execution Sequence** Sources: [docling/pipeline/asr\\_pipeline.py260-265](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L260-L265) [docling/pipeline/asr\\_pipeline.py150-230](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L150-L230) ### Step-by-Step Processing 1. **Pipeline Entry** ([asr\\_pipeline.py260-265](https://github.com/docling-project/docling/blob/f7244a43/asr_pipeline.py#L260-L265)): - `AsrPipeline._build_document()` is called by the base pipeline's `execute()` method - Delegates immediately to `_NativeWhisperModel.run()` 2. **Input Handling** ([asr\\_pipeline.py150-169](https://github.com/docling-project/docling/blob/f7244a43/asr_pipeline.py#L150-L169)): - Accesses `path_or_stream` from the `NoOpBackend` - For `BytesIO` inputs, creates a temporary file (Whisper requires file paths) - For `Path` inputs, uses the path directly 3. **Transcription** ([asr\\_pipeline.py171-189](https://github.com/docling-project/docling/blob/f7244a43/asr_pipeline.py#L171-L189)): - Calls `_NativeWhisperModel.transcribe()` which invokes the Whisper model - Whisper returns segments with text, start time, end time, and optionally word-level timestamps 4. **Document Assembly** ([asr\\_pipeline.py174-188](https://github.com/docling-project/docling/blob/f7244a43/asr_pipeline.py#L174-L188)): - Creates a `DoclingDocument` with proper `DocumentOrigin` metadata - Iterates through conversation items - Each item is added as a `TextItem` with `DocItemLabel.TEXT` 5. **Cleanup** ([asr\\_pipeline.py197-205](https://github.com/docling-project/docling/blob/f7244a43/asr_pipeline.py#L197-L205)): - Removes temporary files if created from `BytesIO` input Sources: [docling/pipeline/asr\\_pipeline.py150-230](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L150-L230) ## Whisper Model Integration",
  "### Model Wrapper: \\_NativeWhisperModel The `_NativeWhisperModel` class encapsulates Whisper model loading and inference: | Property | Type | Purpose | | ----------------- | ------------- | ----------------------------- | | `enabled` | `bool` | Whether model is active | | `device` | `str` | Compute device (cpu/cuda/mps) | | `model` | Whisper model | Loaded Whisper model instance | | `max_tokens` | `int` | Maximum tokens per generation | | `temperature` | `float` | Sampling temperature | | `verbose` | `bool` | Enable Whisper logging | | `timestamps` | `bool` | Include segment timestamps | | `word_timestamps` | `bool` | Include word-level timestamps | ### Model Loading Logic ``` ``` **Figure 4: Whisper Model Loading Flow** Sources: [docling/pipeline/asr\\_pipeline.py99-149](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L99-L149) ### Device Selection The model automatically selects the appropriate device using `decide_device()`: 1. Checks `accelerator_options.device` setting 2. Validates against `asr_options.supported_devices` 3. Falls back to CPU if CUDA/MPS unavailable 4. Logs the selected device for debugging Sources: [docling/pipeline/asr\\_pipeline.py126-130](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L126-L130) ### Transcription Output Structure The `transcribe()` method returns a list of `_ConversationItem` objects: ``` ``` Each conversation item can be formatted as: ``` [time: 0.0-5.2] [speaker:speaker-1] Transcribed text goes here ``` Sources: [docling/pipeline/asr\\_pipeline.py50-97](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L50-L97) [docling/pipeline/asr\\_pipeline.py207-229](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L207-L229) ## Configuration Options ### AsrPipelineOptions The `AsrPipelineOptions` class (defined in the options module, referenced in the code) configures the ASR pipeline: ``` ``` ### InlineAsrNativeWhisperOptions Model-specific configuration for native Whisper: | Option | Type | Default | Purpose | | ------------------- | ----------- | ----------------------- | ---------------------------------------------------- | | `repo_id` | `str` | e.g., \"base\" | Whisper model variant (tiny/base/small/medium/large) | | `max_new_tokens` | `int` | - | Maximum tokens to generate | | `temperature` | `float` | - | Sampling temperature | | `verbose` | `bool` | `False` | Enable detailed logging | | `timestamps` | `bool` | `True` | Include segment timestamps | | `word_timestamps` | `bool` | `False` | Include word-level timestamps | | `supported_devices` | `list[str]` | \\[\"cuda\", \"cpu\", \"mps\"] | Allowed compute devices | Sources: [docling/pipeline/asr\\_pipeline.py105-148](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L105-L148) ### Default Options ``` ``` This provides default configuration when no options are explicitly specified. Sources: [docling/pipeline/asr\\_pipeline.py256-258](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L256-L258) ## Backend Integration ### NoOpBackend Usage The ASR pipeline uses `NoOpBackend` which provides minimal functionality: ``` ``` **Figure 5: NoOpBackend Role** The backend's role is limited to: 1. Storing the `path_or_stream` reference 2. Providing file metadata (name, size, etc.) 3. No parsing or structure extraction (unlike PDF backends) The `is_backend_supported()` method validates this: ``` ```",
  "Sources: [docling/pipeline/asr\\_pipeline.py268-269](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L268-L269) [docling/backend/noop\\_backend.py1-20](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/noop_backend.py#L1-L20) (referenced but not shown) ### Input Handling: Path vs BytesIO The pipeline handles two input types: | Input Type | Handling | Cleanup Required | | ---------- | ------------------------- | ------------------------ | | `Path` | Used directly by Whisper | No | | `BytesIO` | Written to temporary file | Yes (in `finally` block) | **Temporary File Creation**: ``` ``` This approach is necessary because the Whisper library requires file paths for audio processing. Sources: [docling/pipeline/asr\\_pipeline.py154-169](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L154-L169) ## Output Format ### DoclingDocument Structure The ASR pipeline creates a simple `DoclingDocument` structure: ``` ``` **Figure 6: ASR Output Document Structure** Unlike PDF documents, ASR output: - Has no page structure - No layout elements (headings, tables, figures) - Only text items with optional timestamps - No bounding boxes or provenance information Sources: [docling/pipeline/asr\\_pipeline.py174-188](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L174-L188) ### Text Formatting Each conversation item is formatted using `_ConversationItem.to_string()`: ``` ``` Example output: ``` [time: 0.0-5.234] This is the first transcribed segment [time: 5.234-10.512] This is the second segment with more text [time: 10.512-15.801] And this is the third segment ``` Sources: [docling/pipeline/asr\\_pipeline.py86-96](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L86-L96) ## Error Handling ### Exception Management ``` ``` **Figure 7: ASR Error Handling Flow** Error handling includes: 1. **Import errors**: Caught during initialization if `openai-whisper` not installed 2. **Transcription errors**: Logged and set `status = FAILURE` 3. **Cleanup guarantees**: Temporary files deleted in `finally` block 4. **Graceful degradation**: Failed conversions return `ConversionResult` with `FAILURE` status Sources: [docling/pipeline/asr\\_pipeline.py171-205](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L171-L205) ### Status Determination ``` ``` The ASR pipeline uses a simple status determination: if `_build_document()` completes without raising an exception, the status is `SUCCESS`. Unlike PDF pipelines, there's no concept of partial success (no page-level validation). Sources: [docling/pipeline/asr\\_pipeline.py252-254](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L252-L254) ## Usage Example ``` ``` ## Integration with DocumentConverter The ASR pipeline is automatically selected by `DocumentConverter` when processing audio formats: ``` ``` **Figure 8: ASR Pipeline Selection in DocumentConverter** The format-to-pipeline mapping is configured in `DocumentConverter.format_to_options`: - Audio formats (MP3, WAV, etc.) → `AsrPipeline` - Uses `AudioBackend` or `NoOpBackend` for file access - Pipeline options can be customized per format Sources: [docling/pipeline/asr\\_pipeline.py232-270](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L232-L270) [docling/document\\_converter.py1-500](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L1-L500) (referenced but not shown in detail) ## Key Differences from Other Pipelines",
  "| Aspect | ASR Pipeline | PDF Pipelines | VLM Pipeline | | ---------------- | ------------------ | --------------------- | --------------------- | | Base class | `BasePipeline` | `PaginatedPipeline` | `PaginatedPipeline` | | Backend type | `NoOpBackend` | `PdfDocumentBackend` | `PdfDocumentBackend` | | Processing unit | Entire audio file | Individual pages | Individual pages | | Primary model | Whisper (external) | Layout, Table, OCR | Vision-Language Model | | Output structure | Sequential text | Hierarchical document | Structured document | | Temporal data | Timestamps | Page numbers | Page numbers | Sources: [docling/pipeline/asr\\_pipeline.py232-270](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L232-L270) [docling/pipeline/base\\_pipeline.py184-320](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L184-L320) [docling/pipeline/vlm\\_pipeline.py50-389](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L389) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [ASR Pipeline](#asr-pipeline.md) - [Overview](#overview.md) - [Architecture](#architecture.md) - [Pipeline Initialization](#pipeline-initialization.md) - [Class Hierarchy](#class-hierarchy.md) - [Initialization Process](#initialization-process.md) - [Audio Processing Flow](#audio-processing-flow.md) - [Step-by-Step Processing](#step-by-step-processing.md) - [Whisper Model Integration](#whisper-model-integration.md) - [Model Wrapper: \\_NativeWhisperModel](#model-wrapper-_nativewhispermodel.md) - [Model Loading Logic](#model-loading-logic.md) - [Device Selection](#device-selection.md) - [Transcription Output Structure](#transcription-output-structure.md) - [Configuration Options](#configuration-options.md) - [AsrPipelineOptions](#asrpipelineoptions.md) - [InlineAsrNativeWhisperOptions](#inlineasrnativewhisperoptions.md) - [Default Options](#default-options.md) - [Backend Integration](#backend-integration.md) - [NoOpBackend Usage](#noopbackend-usage.md) - [Input Handling: Path vs BytesIO](#input-handling-path-vs-bytesio.md) - [Output Format](#output-format.md) - [DoclingDocument Structure](#doclingdocument-structure.md) - [Text Formatting](#text-formatting.md) - [Error Handling](#error-handling.md) - [Exception Management](#exception-management.md) - [Status Determination](#status-determination.md) - [Usage Example](#usage-example.md) - [Integration with DocumentConverter](#integration-with-documentconverter.md) - [Key Differences from Other Pipelines](#key-differences-from-other-pipelines.md)",
  "Model Artifacts Management | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Model Artifacts Management Relevant source files",
  "- [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py) This page documents how Docling manages AI/ML model artifacts, including downloading models from remote sources, configuring local storage paths, and operating in offline mode. Model artifacts include weights, tokenizers, configuration files, and other resources required by various AI models used throughout the pipeline. For information about model integration and usage within pipelines, see [AI/ML Models](docling-project/docling/4-aiml-models.md). For deployment considerations, see [Docker Deployment](docling-project/docling/10.1-docker-deployment.md). ## Overview Docling uses multiple AI models that require downloading large binary artifacts before first use. The system provides: - **Automatic downloading**: Models are downloaded on first use if not found locally - **Centralized cache**: All models stored in a configurable cache directory - **Offline mode**: Pre-download models for air-gapped environments - **CLI tools**: `docling-tools` command for managing model downloads - **HuggingFace integration**: Primary model source with fallback to ModelScope The default cache location is `~/.cache/docling/models/`, but this can be customized via configuration or environment variables. Sources: \\[docling/datamodel/settings.py], [docling/utils/model\\_downloader.py1-159](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L1-L159) [docling/cli/models.py1-197](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L1-L197) ## Model Download Architecture ``` ``` **Diagram: Model Download Flow** The download system has three entry points: CLI-based pre-download, automatic download on first model use, and explicit programmatic calls. Downloads are routed through either the centralized `download_models()` function or model-specific downloaders. HuggingFace serves as the primary source with ModelScope fallback, while OCR models use specialized sources (ModelScope for RapidOCR, GitHub for EasyOCR).",
  "Sources: [docling/utils/model\\_downloader.py30-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L158) [docling/cli/models.py54-127](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L127) [docling/models/rapid\\_ocr\\_model.py202-224](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L202-L224) [docling/models/easyocr\\_model.py93-127](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py#L93-L127) ## Artifacts Path Resolution ``` ``` **Diagram: Artifacts Path Resolution Strategy** When initializing models, Docling follows a structured resolution process. If `artifacts_path` is provided explicitly, it checks for the new folder structure with `model_repo_folder` subdirectories (e.g., `ds4sd--docling-models/`). If not found, it falls back to the deprecated flat structure while emitting a deprecation warning. If no `artifacts_path` is provided, models are automatically downloaded to the default cache directory from `settings.cache_dir`. Sources: [docling/models/table\\_structure\\_model.py33-68](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L33-L68) [docling/models/layout\\_model.py49-81](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L49-L81) [docling/models/code\\_formula\\_model.py73-106](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L73-L106) ## Model Download CLI The `docling-tools` command provides utilities for pre-downloading models: ### Basic Download Command ``` ``` ### Available Models | Model | Identifier | Purpose | Default | | ------------------ | -------------------- | ------------------------------------------- | ------- | | Layout Model | `layout` | Document layout analysis (Heron) | ✓ | | TableFormer | `tableformer` | Table structure recognition | ✓ | | Code/Formula | `code_formula` | LaTeX extraction from images | ✓ | | Picture Classifier | `picture_classifier` | Figure classification | ✓ | | RapidOCR | `rapidocr` | OCR engine (ONNX/Torch) | ✓ | | EasyOCR | `easyocr` | OCR engine (deep learning) | ✓ | | SmolVLM | `smolvlm` | Vision-language model (picture description) | - | | GraniteDocling | `granitedocling` | VLM for document parsing (Transformers) | - | | GraniteDocling MLX | `granitedocling_mlx` | VLM for document parsing (Apple MLX) | - | | SmolDocling | `smoldocling` | Compact VLM (Transformers) | - | | SmolDocling MLX | `smoldocling_mlx` | Compact VLM (Apple MLX) | - | | Granite Vision | `granite_vision` | IBM Granite Vision model | - | ### Download Arbitrary HuggingFace Repositories ``` ``` Sources: [docling/cli/models.py54-191](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L191) [docling/utils/model\\_downloader.py30-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L158) ## Programmatic Model Downloads ### Central Download Function The `download_models()` function in `docling.utils.model_downloader` provides programmatic access: ``` ``` ### Model-Specific Download Methods Each model class provides a static `download_models()` method: ``` ```",
  "Sources: [docling/utils/model\\_downloader.py30-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L158) [docling/models/table\\_structure\\_model.py91-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L91-L101) [docling/models/layout\\_model.py89-102](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L89-L102) [docling/models/rapid\\_ocr\\_model.py202-224](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L202-L224) ## Model Initialization with Artifacts ``` ``` **Diagram: Model Initialization Flow** All model classes follow a consistent initialization pattern. If the model is disabled, initialization completes immediately with passthrough behavior. For enabled models, the system first checks if `artifacts_path` was provided. If not, models are automatically downloaded to the cache. The path resolution logic handles both the new (with `model_repo_folder`) and deprecated (flat) directory structures. Finally, the appropriate predictor or model instance is loaded using the resolved path. Sources: [docling/models/table\\_structure\\_model.py33-89](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L33-L89) [docling/models/layout\\_model.py49-87](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L49-L87) [docling/models/code\\_formula\\_model.py73-115](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L73-L115) [docling/models/rapid\\_ocr\\_model.py82-200](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L82-L200) ## Offline Mode Configuration For air-gapped or offline environments, pre-download all required models: ### Pre-Download All Models ``` ``` ### Configure Pipeline for Offline Use ``` ``` ### CLI with Offline Artifacts ``` ``` Sources: [docling/cli/models.py128-135](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L128-L135) [tests/test\\_options.py121-165](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L121-L165) ## HuggingFace Model Download Implementation ``` ``` **Diagram: HuggingFace Model Download Process** The `download_hf_model()` function provides a thin wrapper around HuggingFace Hub's `snapshot_download()`. It standardizes local directory handling by converting repository IDs to folder names (replacing `/` with `--`) and provides ModelScope fallback for regions where HuggingFace is unavailable. The function returns the path to the downloaded repository folder. Sources: \\[docling/models/utils/hf\\_model\\_download.py] ## Model Repository Folder Structure Each model type uses a standardized folder structure with a `_model_repo_folder` class attribute: ``` ~/.cache/docling/models/ ├── ds4sd--docling-models/ # Layout and TableFormer models │ ├── model_artifacts/ │ │ ├── layout/ │ │ │ └── heron/ # Layout model files │ │ └── tableformer/ │ │ ├── accurate/ # TableFormer accurate mode │ │ └── fast/ # TableFormer fast mode │ └── ... ├── ds4sd--CodeFormulaV2/ # Code/Formula extraction model │ ├── config.json │ ├── preprocessor_config.json │ └── ... ├── ds4sd--DocumentFigureClassifier/ # Picture classifier │ └── ... ├── RapidOcr/ # RapidOCR models │ ├── onnx/ │ │ └── PP-OCRv4/ │ │ ├── det/ │ │ ├── cls/ │ │ └── rec/ │ └── torch/ │ └── PP-OCRv4/ │ └── ... ├── EasyOcr/ # EasyOCR models │ ├── craft.pth │ ├── english_g2.pth │ └── latin_g2.pth └── IBM--granite-docling-v1/ # VLM models └── ... ``` ### Model Repository Folder Mapping",
  "| Model Class | `_model_repo_folder` | HuggingFace Repo | | --------------------------- | --------------------------------- | -------------------------------- | | `LayoutModel` | `ds4sd--docling-models` | `ds4sd/docling-models` | | `TableStructureModel` | `ds4sd--docling-models` | `ds4sd/docling-models` | | `CodeFormulaModel` | `ds4sd--CodeFormulaV2` | `ds4sd/CodeFormulaV2` | | `DocumentPictureClassifier` | `ds4sd--DocumentFigureClassifier` | `ds4sd/DocumentFigureClassifier` | | `RapidOcrModel` | `RapidOcr` | ModelScope: `RapidAI/RapidOCR` | | `EasyOcrModel` | `EasyOcr` | GitHub: `JaidedAI/EasyOCR` | Sources: [docling/models/table\\_structure\\_model.py29-31](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L29-L31) [docling/models/layout\\_model.py28](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L28-L28) [docling/models/code\\_formula\\_model.py68](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L68-L68) [docling/models/document\\_picture\\_classifier.py62](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L62-L62) [docling/models/rapid\\_ocr\\_model.py37](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L37-L37) [docling/models/easyocr\\_model.py29](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py#L29-L29) ## Troubleshooting Model Loading ### Common Issues and Solutions #### Issue: Models Not Found After Download **Symptom**: Models download successfully but initialization fails with \"model not found\" errors. **Cause**: Mismatch between artifacts path structure (flat vs. nested with `model_repo_folder`). **Solution**: ``` ``` #### Issue: Deprecation Warnings **Symptom**: `DeprecationWarning: The usage of artifacts_path containing directly model_path is deprecated` **Cause**: Using old flat directory structure without `model_repo_folder` subdirectories. **Solution**: Reorganize cache to new structure or re-download models using `docling-tools models download`. #### Issue: Download Failures in China **Symptom**: Timeouts or connection errors when downloading from HuggingFace. **Solution**: The system automatically falls back to ModelScope. Ensure ModelScope access is available or use VPN. #### Issue: Insufficient Disk Space **Symptom**: Partial downloads or corrupted model files. **Solution**: Ensure sufficient disk space before downloading. Full model set requires approximately: - Layout models: \\~1.2 GB - TableFormer: \\~500 MB per mode (fast/accurate) - Code/Formula: \\~2.5 GB - VLM models: 3-8 GB each - OCR models: \\~150-300 MB each #### Issue: Permission Errors **Symptom**: `PermissionError` when writing to cache directory. **Solution**: ``` ``` Sources: [docling/models/table\\_structure\\_model.py55-63](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L55-L63) [docling/models/layout\\_model.py73-81](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L73-L81) ## Environment Variables The following environment variables affect model artifacts management: | Variable | Purpose | Default | Example | | ------------------- | ------------------------------ | ------------------ | ---------------------- | | `DOCLING_CACHE_DIR` | Base cache directory | `~/.cache/docling` | `/data/docling-cache` | | `HF_HOME` | HuggingFace cache (if used) | Not set | `~/.cache/huggingface` | | `HF_HUB_OFFLINE` | Force HuggingFace offline mode | Not set | `1` | ### Setting Environment Variables ``` ``` Sources: \\[docling/datamodel/settings.py] ## Model Version Management Models are versioned through HuggingFace repository revisions: ``` ``` ### Current Model Versions",
  "| Model | Repository | Revision | Location in Code | | ------------------ | -------------------------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------- | | Layout (Heron) | `ds4sd/docling-models` | `v2.3.0` | [layout\\_model.py96-98](https://github.com/docling-project/docling/blob/f7244a43/layout_model.py#L96-L98) | | TableFormer | `ds4sd/docling-models` | `v2.3.0` | [table\\_structure\\_model.py95-100](https://github.com/docling-project/docling/blob/f7244a43/table_structure_model.py#L95-L100) | | Code/Formula | `ds4sd/CodeFormulaV2` | `main` | [code\\_formula\\_model.py123-128](https://github.com/docling-project/docling/blob/f7244a43/code_formula_model.py#L123-L128) | | Picture Classifier | `ds4sd/DocumentFigureClassifier` | `v1.0.1` | [document\\_picture\\_classifier.py110-115](https://github.com/docling-project/docling/blob/f7244a43/document_picture_classifier.py#L110-L115) | Sources: [docling/models/table\\_structure\\_model.py91-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L91-L101) [docling/models/layout\\_model.py89-102](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L89-L102) [docling/models/code\\_formula\\_model.py118-129](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L118-L129) [docling/models/document\\_picture\\_classifier.py106-116](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L106-L116) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Model Artifacts Management](#model-artifacts-management.md) - [Overview](#overview.md) - [Model Download Architecture](#model-download-architecture.md) - [Artifacts Path Resolution](#artifacts-path-resolution.md) - [Model Download CLI](#model-download-cli.md) - [Basic Download Command](#basic-download-command.md) - [Available Models](#available-models.md) - [Download Arbitrary HuggingFace Repositories](#download-arbitrary-huggingface-repositories.md) - [Programmatic Model Downloads](#programmatic-model-downloads.md) - [Central Download Function](#central-download-function.md) - [Model-Specific Download Methods](#model-specific-download-methods.md) - [Model Initialization with Artifacts](#model-initialization-with-artifacts.md) - [Offline Mode Configuration](#offline-mode-configuration.md) - [Pre-Download All Models](#pre-download-all-models.md) - [Configure Pipeline for Offline Use](#configure-pipeline-for-offline-use.md) - [CLI with Offline Artifacts](#cli-with-offline-artifacts.md) - [HuggingFace Model Download Implementation](#huggingface-model-download-implementation.md) - [Model Repository Folder Structure](#model-repository-folder-structure.md) - [Model Repository Folder Mapping](#model-repository-folder-mapping.md) - [Troubleshooting Model Loading](#troubleshooting-model-loading.md) - [Common Issues and Solutions](#common-issues-and-solutions.md) - [Issue: Models Not Found After Download](#issue-models-not-found-after-download.md) - [Issue: Deprecation Warnings](#issue-deprecation-warnings.md) - [Issue: Download Failures in China](#issue-download-failures-in-china.md) - [Issue: Insufficient Disk Space](#issue-insufficient-disk-space.md) - [Issue: Permission Errors](#issue-permission-errors.md) - [Environment Variables](#environment-variables.md) - [Setting Environment Variables](#setting-environment-variables.md) - [Model Version Management](#model-version-management.md) - [Current Model Versions](#current-model-versions.md)",
  "Framework Integrations | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Framework Integrations Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) ## Purpose and Scope This page documents how Docling integrates with AI development frameworks, vector databases, data processing pipelines, and agentic systems. It covers the architectural patterns, export formats, and protocols that enable seamless integration with the broader GenAI ecosystem. For information about export format options and serialization, see [Export Formats](docling-project/docling/8.1-export-formats.md). For chunking strategies used in retrieval pipelines, see [Document Chunking](docling-project/docling/8.2-document-chunking.md). --- ## Integration Architecture Overview Docling's integration strategy is built on three foundational principles: 1. **Unified Representation**: The `DoclingDocument` class provides a consistent document model that all downstream systems consume 2. **Multiple Export Formats**: Support for Markdown, JSON, HTML, and DocTags enables compatibility with diverse framework requirements 3. **Standardized Protocols**: MCP (Model Context Protocol) support for agentic AI systems ``` ``` **Diagram: Docling Integration Architecture** Sources: [pyproject.toml1-280](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L280) [README.md109-113](https://github.com/docling-project/docling/blob/f7244a43/README.md#L109-L113) [mkdocs.yml128-155](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L128-L155) --- ## DoclingDocument as Integration Foundation The `DoclingDocument` class serves as the universal interchange format for all integrations. It provides: - **Hierarchical Structure**: Nested document elements with parent-child relationships - **Content Layers**: Separation of body content from furniture elements (headers, footers, page numbers) - **Rich Metadata**: Provenance information, bounding boxes, confidence scores - **Multiple Serialization**: JSON, Markdown, HTML, and DocTags output ### Key Export Methods | Method | Output Format | Primary Use Case | Framework Compatibility | | ---------------------- | ------------- | ------------------------------------ | ------------------------------- | | `export_to_markdown()` | Markdown | RAG pipelines, LLM consumption | LangChain, LlamaIndex, Haystack | | `export_to_json()` | JSON | Structured data processing | All frameworks | | `export_to_html()` | HTML | Web display, rich formatting | Custom applications | | DocTags | Custom XML | VLM training, fine-grained structure | Research, model development | ``` ``` **Diagram: DoclingDocument Structure and Export Pathways** Sources: [README.md26-27](https://github.com/docling-project/docling/blob/f7244a43/README.md#L26-L27) [docs/index.md26-27](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L26-L27) [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) --- ## Model Context Protocol (MCP) Integration",
  "The Model Context Protocol (MCP) is an emerging standard for connecting AI applications to external tools and data sources. Docling provides a dedicated MCP server that enables agentic AI systems to access document processing capabilities. ### MCP Server Architecture ``` ``` **Diagram: MCP Server Integration Flow** ### Configuration Example MCP clients connect to the Docling server through a configuration file specifying the command and arguments: ``` ``` This configuration is used in: - **Claude Desktop**: `claude_desktop_config.json` - **LM Studio**: `mcp.json` - **Custom clients**: Any MCP-compatible client The MCP server exposes Docling's document conversion and extraction capabilities as tools that AI agents can invoke autonomously. This enables use cases such as: - Document Q\\&A with automatic parsing - Multi-document synthesis workflows - Automated data extraction from forms and tables - Document-based reasoning chains Sources: [docs/usage/mcp.md1-31](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md#L1-L31) [README.md41-42](https://github.com/docling-project/docling/blob/f7244a43/README.md#L41-L42) --- ## AI Framework Integrations ### LangChain Integration LangChain integration leverages Docling's Markdown export and chunking capabilities for RAG (Retrieval-Augmented Generation) pipelines. **Integration Pattern:** 1. Convert documents using `DocumentConverter` 2. Export to Markdown with `export_to_markdown()` 3. Apply chunking via `HybridChunker` from `docling-core` 4. Create LangChain `Document` objects 5. Index in vector store (Milvus, Qdrant, etc.) ``` ``` **Diagram: LangChain RAG Pipeline with Docling** **Key Dependencies:** - `langchain-huggingface>=0.0.3` - Embedding models - `langchain-milvus~=0.1` - Milvus vector store - `langchain-text-splitters~=0.2` - Text splitting utilities Sources: [pyproject.toml144-146](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L144-L146) [mkdocs.yml134](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L134-L134) --- ### LlamaIndex Integration LlamaIndex integration follows a similar pattern but uses LlamaIndex-specific abstractions for document loading and indexing. **Integration Components:** | Component | Purpose | Docling Interface | | ------------ | ------------------ | --------------------------------- | | Reader | Document ingestion | `DocumentConverter.convert()` | | Node Parser | Chunking | `HybridChunker` from docling-core | | Vector Store | Embedding storage | Weaviate, MongoDB, etc. | | Query Engine | Retrieval | Standard LlamaIndex query | ``` ``` **Diagram: LlamaIndex Integration Architecture** Sources: [mkdocs.yml136](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L136-L136) [mkdocs.yml109](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L109-L109) --- ### Haystack Integration Haystack integration uses Docling as a document converter within Haystack pipelines, enabling preprocessing before RAG or search operations. **Typical Haystack Pipeline:** 1. `DocumentConverter` as preprocessing step 2. Export to structured format 3. Pass to Haystack `Pipeline` 4. Route to retriever or generator components **Supported Vector Stores:** - OpenSearch - Azure Cognitive Search Sources: [mkdocs.yml133](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L133-L133) [mkdocs.yml123](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L123-L123) --- ### Agentic AI Frameworks Multiple agentic frameworks integrate Docling to provide document understanding capabilities to autonomous agents: | Framework | Integration Type | Key Feature | | ------------------- | ---------------- | ------------------------------ | | Crew AI | Tool | Document parsing as crew task | | Bee Agent Framework | Tool | Multi-agent document workflows | | Langflow | Node | Visual pipeline integration | | txtai | Pipeline | Embedded document processing | ``` ``` **Diagram: Agentic Framework Integration Patterns**",
  "Sources: [mkdocs.yml131-137](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L131-L137) [README.md29](https://github.com/docling-project/docling/blob/f7244a43/README.md#L29-L29) --- ## Vector Database Integrations Docling's chunking and embedding-friendly output formats enable integration with major vector databases for semantic search and RAG applications. ### Supported Vector Databases | Vector DB | Primary Framework | Integration Path | | ------------ | ----------------- | ------------------------------- | | Milvus | LangChain | `langchain-milvus` connector | | Qdrant | LangChain, Direct | Python client, LangChain loader | | Weaviate | LlamaIndex | Weaviate vector store | | MongoDB | LlamaIndex | MongoDB Atlas vector search | | OpenSearch | Haystack | OpenSearch document store | | Azure Search | Haystack | Azure Cognitive Search | **General Integration Flow:** 1. Process document with `DocumentConverter` 2. Extract text via `export_to_markdown()` or iterate over elements 3. Apply `HybridChunker` for semantic chunking 4. Generate embeddings (typically with sentence-transformers or OpenAI) 5. Store in vector database with metadata ``` ``` **Diagram: Vector Database Integration Flow** Sources: [mkdocs.yml122-125](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L122-L125) [pyproject.toml145](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L145-L145) --- ## Data Processing Framework Integrations Beyond real-time RAG, Docling integrates with data processing frameworks for batch document processing, training data preparation, and enterprise workflows. ### Data Prep Kit (DPK) Data Prep Kit is a framework for large-scale data preparation pipelines. Docling integration enables: - **Batch Processing**: Convert thousands of documents in parallel - **Transform Pipelines**: Clean, chunk, and tokenize documents - **Training Data Generation**: Prepare datasets for model fine-tuning **Example Pipeline:** ``` Ingest → Docling Convert → DPK Transform → Chunk → Tokenize → Store ``` Sources: [mkdocs.yml140](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L140-L140) [mkdocs.yml119](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L119-L119) --- ### InstructLab Integration InstructLab uses Docling for preparing training data from documents in knowledge base construction workflows. **Integration Points:** - Document parsing for instruction-tuning datasets - Structured extraction of Q\\&A pairs - Metadata preservation for provenance tracking Sources: [mkdocs.yml141](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L141-L141) --- ### Enterprise & Production Integrations | Integration | Category | Purpose | | ----------- | ------------------- | ------------------------------------------ | | Apify Actor | Cloud Platform | Serverless document processing | | Prodigy | Annotation | Active learning for document understanding | | spaCy | NLP Pipeline | Entity extraction from parsed documents | | RHEL AI | Enterprise Platform | On-premises AI deployments | | NVIDIA | GPU Acceleration | Optimized VLM inference | | Quarkus | Java Framework | JVM-based microservices | ``` ``` **Diagram: Enterprise Integration Landscape** Sources: [mkdocs.yml139-155](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L139-L155) [README.md109-113](https://github.com/docling-project/docling/blob/f7244a43/README.md#L109-L113) --- ## Integration Development Patterns ### Common Integration Pattern Most integrations follow this general structure: 1. **Initialization**: Create `DocumentConverter` with appropriate options 2. **Conversion**: Call `convert()` or `convert_all()` for batch processing 3. **Export**: Use `export_to_markdown()`, `export_to_json()`, or iterate over elements 4. **Transform**: Apply framework-specific transformations (chunking, embedding, etc.) 5. **Downstream Processing**: Pass to framework-specific components ### Code Structure Example ``` ``` ### Export Format Selection",
  "| Use Case | Recommended Format | Rationale | | --------------------- | ------------------ | ------------------------------- | | RAG with LLMs | Markdown | Readable, preserves structure | | Structured extraction | JSON | Programmatic access to elements | | Web display | HTML | Styled rendering | | Model training | DocTags | Fine-grained structure labels | | Search indexing | Markdown or JSON | Depends on search engine | Sources: [README.md69-78](https://github.com/docling-project/docling/blob/f7244a43/README.md#L69-L78) [docs/usage/index.md1-46](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L1-L46) --- ## Environment Variables and Configuration Several environment variables control integration behavior: | Variable | Purpose | Default | | --------------------- | -------------------------------------- | -------------- | | `DOCLING_DEVICE` | Accelerator device (CPU/CUDA/MPS/AUTO) | AUTO | | `OMP_NUM_THREADS` | Thread count for CPU models | System default | | `DOCLING_NUM_THREADS` | Alternative thread control | System default | These settings affect model inference performance in integration scenarios, particularly for VLM-based pipelines and OCR operations. Sources: [pyproject.toml1-280](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L280) --- ## Installation for Integrations To use Docling with specific integrations, install with appropriate extras: | Extra | Frameworks Enabled | Install Command | | ------------- | --------------------------------------- | -------------------------------- | | `[vlm]` | Vision models (Transformers, MLX, vLLM) | `pip install docling[vlm]` | | `[easyocr]` | EasyOCR engine | `pip install docling[easyocr]` | | `[tesserocr]` | Tesseract OCR | `pip install docling[tesserocr]` | | `[asr]` | Audio transcription (Whisper) | `pip install docling[asr]` | **Example Dependencies in `pyproject.toml`:** - VLM support: `transformers>=4.46.0`, `accelerate>=1.2.1`, `mlx-vlm>=0.3.0`, `vllm>=0.10.0` - Chunking: `docling-core[chunking]>=2.48.2` Sources: [pyproject.toml91-111](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L91-L111) [README.md56-65](https://github.com/docling-project/docling/blob/f7244a43/README.md#L56-L65) --- ## Summary Docling's integration ecosystem is built on: 1. **DoclingDocument**: Universal document representation 2. **Flexible Export**: Multiple formats for different use cases 3. **MCP Protocol**: Standard interface for agentic AI 4. **Framework Adapters**: Native support for LangChain, LlamaIndex, Haystack 5. **Chunking API**: Semantic document segmentation via `docling-core` 6. **Batch Processing**: Efficient handling of document collections The integration architecture prioritizes **modularity** (components can be mixed and matched), **extensibility** (new integrations follow established patterns), and **interoperability** (standard formats and protocols). For specific integration examples, see the [Examples](docling-project/docling/7.3-usage-examples.md) section. For details on export format options, see [Export Formats](docling-project/docling/8.1-export-formats.md). For chunking strategies, see [Document Chunking](docling-project/docling/8.2-document-chunking.md). Sources: [README.md1-161](https://github.com/docling-project/docling/blob/f7244a43/README.md#L1-L161) [docs/index.md1-70](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L1-L70) [mkdocs.yml128-162](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L128-L162) [pyproject.toml1-280](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L280) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Framework Integrations](#framework-integrations.md) - [Purpose and Scope](#purpose-and-scope.md) - [Integration Architecture Overview](#integration-architecture-overview.md) - [DoclingDocument as Integration Foundation](#doclingdocument-as-integration-foundation.md) - [Key Export Methods](#key-export-methods.md) - [Model Context Protocol (MCP) Integration](#model-context-protocol-mcp-integration.md) - [MCP Server Architecture](#mcp-server-architecture.md) - [Configuration Example](#configuration-example.md) - [AI Framework Integrations](#ai-framework-integrations.md) - [LangChain Integration](#langchain-integration.md) - [LlamaIndex Integration](#llamaindex-integration.md) - [Haystack Integration](#haystack-integration.md) - [Agentic AI Frameworks](#agentic-ai-frameworks.md) - [Vector Database Integrations](#vector-database-integrations.md) - [Supported Vector Databases](#supported-vector-databases.md) - [Data Processing Framework Integrations](#data-processing-framework-integrations.md) - [Data Prep Kit (DPK)](#data-prep-kit-dpk.md) - [InstructLab Integration](#instructlab-integration.md) - [Enterprise & Production Integrations](#enterprise-production-integrations.md) - [Integration Development Patterns](#integration-development-patterns.md) - [Common Integration Pattern](#common-integration-pattern.md) - [Code Structure Example](#code-structure-example.md) - [Export Format Selection](#export-format-selection.md) - [Environment Variables and Configuration](#environment-variables-and-configuration.md) - [Installation for Integrations](#installation-for-integrations.md) - [Summary](#summary.md)",
  "Output and Integration | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Output and Integration Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) ## Purpose and Scope This document provides an overview of Docling's output capabilities and integration ecosystem. After documents are processed through pipelines and assembled into a `DoclingDocument` (see [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md)), they can be exported to multiple formats and integrated with downstream tools. This page covers: 1. **Export formats**: Markdown, JSON, HTML, and DOCTAGS serialization from `DoclingDocument` 2. **Document chunking**: Breaking documents into smaller segments for retrieval systems 3. **Framework integrations**: Connecting with LangChain, LlamaIndex, Haystack, vector databases, and AI agents via MCP For detailed information on specific export format options and methods, see [Export Formats](docling-project/docling/8.1-export-formats.md). For chunking strategies and configuration, see [Document Chunking](docling-project/docling/8.2-document-chunking.md). For framework-specific integration patterns, see [Framework Integrations](docling-project/docling/8.3-framework-integrations.md). Sources: [pyproject.toml1-280](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L280) [README.md1-161](https://github.com/docling-project/docling/blob/f7244a43/README.md#L1-L161) [mkdocs.yml54-162](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L54-L162) --- ## Output Architecture The output subsystem is organized around the `DoclingDocument` as the central unified representation. All processed documents, regardless of their input format or processing pipeline, converge to this common structure before being exported or integrated with external systems. ### Export Flow Diagram ``` ``` **Description**: This diagram illustrates how all processing pipelines converge on `DoclingDocument`, which serves as the single source for exports, chunking, and framework integrations. The export methods are direct serialization functions on the document object, while chunking produces `DocChunk` objects that can be fed into AI frameworks. Framework integrations can consume either the full `DoclingDocument` or chunked segments depending on the use case. Sources: [README.md34-43](https://github.com/docling-project/docling/blob/f7244a43/README.md#L34-L43) [mkdocs.yml100-128](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L128) [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) --- ## Export Formats Overview Docling provides four primary export formats, each accessed through methods on the `DoclingDocument` instance:",
  "| Format | Method | Primary Use Case | Output Type | | ------------ | ---------------------- | ------------------------------------------- | ----------- | | **Markdown** | `export_to_markdown()` | Human-readable text, LLM input | `str` | | **JSON** | `export_to_json()` | Lossless serialization, programmatic access | `str` | | **HTML** | `export_to_html()` | Web display, visual rendering | `str` | | **DOCTAGS** | `export_to_doctags()` | Structured markup, VLM training | `str` | ### Basic Export Example ``` ``` Each export method supports format-specific options for controlling output behavior. For example, `export_to_markdown()` supports `image_mode` to control embedded image handling, and `export_to_json()` supports `indent` for pretty-printing. **DOCTAGS Format**: A specialized structured markup format designed for vision-language model training and structured document representation. DOCTAGS uses XML-like tags to encode document structure hierarchically (e.g., `<document>`, `<page>`, `<section>`, `<table>`). This format is the preferred output for VLM pipelines that generate structured representations directly. Sources: [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35) [docs/index.md27](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L27-L27) [docs/usage/index.md10-20](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L10-L20) --- ## Document Chunking Overview Chunking breaks `DoclingDocument` instances into smaller `DocChunk` segments suitable for retrieval-augmented generation (RAG) systems and vector databases. Docling leverages the `docling-core` library's `HybridChunker`, which implements hierarchical and hybrid chunking strategies. ### Chunking Workflow ``` ``` **Description**: The chunking process transforms a `DoclingDocument` into a list of `DocChunk` objects. Each chunk contains the text content, metadata about the source document items (paragraphs, tables, etc.), and hierarchical path information (headings leading to the chunk). This metadata enables context-aware retrieval. ### Chunking Strategies 1. **Hierarchical Chunking**: Respects document structure (sections, subsections) and preserves heading context 2. **Hybrid Chunking**: Combines hierarchical structure with token/character limits to ensure chunks fit within model context windows 3. **Token-Based Splitting**: Uses tokenizers to enforce maximum chunk sizes while respecting document boundaries The chunker configuration allows control over: - Maximum chunk size (tokens or characters) - Overlap between consecutive chunks - Heading level depth for context preservation - Tokenizer selection (for transformer models) Sources: [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) [mkdocs.yml100-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L103) --- ## Framework Integration Architecture Docling provides native integrations with popular AI development frameworks, enabling seamless incorporation into RAG pipelines, agentic workflows, and document processing applications. ### Integration Landscape Diagram ``` ``` **Description**: Docling integrates with the AI ecosystem at multiple levels. Document loaders/readers provide framework-specific adapters for LangChain, LlamaIndex, and Haystack. These frameworks then connect to vector databases for retrieval. Separately, agentic frameworks like MCP, CrewAI, and Bee Agent consume `DoclingDocument` directly for agent-based workflows. Sources: [mkdocs.yml130-155](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L130-L155) [README.md109-113](https://github.com/docling-project/docling/blob/f7244a43/README.md#L109-L113) --- ## Integration Patterns ### Pattern 1: Direct Framework Integration Frameworks like LangChain and LlamaIndex provide native loaders/readers that accept `DoclingDocument` objects: ``` ``` These loaders handle the conversion from `DoclingDocument` (or `DocChunk`) to framework-native document representations. ### Pattern 2: MCP Server for Agents The Model Context Protocol (MCP) integration enables any MCP-compatible agent to access Docling's document processing capabilities as a service: ``` ``` This configuration (placed in `claude_desktop_config.json` or `mcp.json` for LM Studio) exposes Docling as an MCP tool that agents can invoke for document conversion tasks. ### Pattern 3: Vector Database Ingestion",
  "Chunked documents can be embedded and stored in vector databases for semantic search: ``` ``` Sources: [docs/usage/mcp.md1-31](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md#L1-L31) [mkdocs.yml106-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L106-L127) [README.md37-42](https://github.com/docling-project/docling/blob/f7244a43/README.md#L37-L42) --- ## Export Method Reference All export methods are instance methods on the `DoclingDocument` class. They serialize the unified document representation into format-specific string outputs: ``` ``` **Description**: The `DoclingDocument` Pydantic model provides four export methods, each with format-specific options. Common options include `image_mode` for controlling image handling (placeholders, embedded data, or references), `strict_text` for enforcing plain text output, and `indent` for JSON pretty-printing. ### Export Method Signatures ``` ``` These methods are implemented in the `docling-core` library, which `DoclingDocument` inherits from. The actual method implementations handle traversal of the document's hierarchical structure and serialization to each format. Sources: [docs/usage/index.md10-20](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L10-L20) [README.md77](https://github.com/docling-project/docling/blob/f7244a43/README.md#L77-L77) --- ## Chunking Configuration The chunking subsystem uses `HybridChunker` from `docling-core`, configurable through initialization parameters: | Parameter | Type | Default | Description | | --------------------------- | ------ | -------------- | --------------------------------- | | `max_tokens` | `int` | 512 | Maximum tokens per chunk | | `tokenizer` | `str` | \"cl100k\\_base\" | Tokenizer for counting (tiktoken) | | `include_heading_hierarchy` | `bool` | `True` | Add heading context to chunks | | `overlap` | `int` | 0 | Token overlap between chunks | ### Chunking Method Flow ``` ``` **Description**: The `HybridChunker.chunk()` method traverses the `DoclingDocument.body` items (paragraphs, tables, lists, etc.) and segments them into chunks respecting token limits. Each chunk is enriched with metadata including the hierarchical path (sequence of headings leading to the chunk) and references to source document items. Sources: [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) [mkdocs.yml100-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L103) --- ## Integration Dependencies Framework integrations are provided through optional dependency groups and separate integration packages: ### Core Dependencies ``` ``` ### Optional Integration Dependencies ``` ``` ### Framework Integration Packages The integrations are maintained as separate packages: - **LangChain**: `langchain-docling` package provides `DoclingLoader` and `DoclingPDFLoader` - **LlamaIndex**: `llama-index-readers-docling` provides `DoclingReader` - **Haystack**: `haystack-docling` provides `DoclingConverter` - **MCP**: `docling-mcp` provides the MCP server implementation This separation allows framework integrations to evolve independently from Docling core. Sources: [pyproject.toml45-148](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L45-L148) [mkdocs.yml130-155](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L130-L155) --- ## Use Case: RAG Pipeline A typical RAG pipeline using Docling follows this pattern: ``` ``` **Description**: The complete RAG workflow starts with document conversion to `DoclingDocument`, followed by chunking into `DocChunk` objects. Chunks are embedded and stored in a vector database. At query time, relevant chunks are retrieved via similarity search and provided as context to an LLM for answer generation. ### Code Example Structure ``` ``` Sources: [mkdocs.yml106-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L106-L127) [pyproject.toml144-148](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L144-L148) --- ## MCP Server Architecture",
  "The MCP (Model Context Protocol) server provides a standardized interface for AI agents to access Docling's document conversion capabilities: ``` ``` **Description**: The MCP server (`docling-mcp-server`) runs as a separate process and communicates with MCP clients via JSON-RPC over standard input/output. Clients (like Claude Desktop or LM Studio) can invoke Docling document conversion as a tool, passing document paths or URLs and receiving structured `DoclingDocument` representations in response. ### MCP Configuration Example ``` ``` This configuration launches the MCP server using `uvx` (the uv package runner), which handles dependency installation and execution. The server then registers itself with the MCP client, making Docling tools available to the agent. Sources: [docs/usage/mcp.md1-31](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md#L1-L31) [README.md41](https://github.com/docling-project/docling/blob/f7244a43/README.md#L41-L41) --- ## Export Format Comparison Different export formats serve different downstream use cases: | Format | Structure Preservation | Human Readable | Lossless | Primary Consumers | | ------------ | ---------------------------- | ------------------- | ----------------------- | -------------------------- | | **Markdown** | ⭐⭐⭐ Heading hierarchy, lists | ⭐⭐⭐ Highly readable | ❌ No (styling lost) | LLMs, humans, static sites | | **JSON** | ⭐⭐⭐ Full provenance | ⭐ Programmatic | ✅ Yes (complete) | Applications, archival | | **HTML** | ⭐⭐ Visual structure | ⭐⭐ Web rendering | ❌ No (formatting focus) | Web browsers, displays | | **DOCTAGS** | ⭐⭐⭐ Semantic tags | ⭐⭐ Structured text | ⭐⭐ Partial | VLMs, structured ML | ### Format Selection Guide **Use Markdown when:** - Providing context to language models - Creating human-readable documentation - Generating static websites or wikis **Use JSON when:** - Preserving complete document structure for later processing - Building document databases or archives - Implementing document version control **Use HTML when:** - Rendering documents in web applications - Creating interactive document viewers - Generating print-ready outputs **Use DOCTAGS when:** - Training or fine-tuning vision-language models - Creating structured datasets for ML - Preserving semantic document structure with minimal tokens Sources: [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35) [docs/index.md27](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L27-L27) --- ## Summary Docling's output and integration capabilities center around the `DoclingDocument` unified representation: 1. **Export**: Four serialization formats (`export_to_markdown()`, `export_to_json()`, `export_to_html()`, `export_to_doctags()`) provide format-specific outputs for different use cases 2. **Chunking**: The `HybridChunker` from `docling-core` segments documents into `DocChunk` objects with preserved hierarchical context for RAG systems 3. **Integration**: Native support for LangChain, LlamaIndex, Haystack via dedicated loader packages, plus MCP server for agent frameworks All export and integration paths preserve the document's hierarchical structure and provenance metadata, enabling downstream systems to leverage Docling's advanced document understanding capabilities. Sources: [README.md28-43](https://github.com/docling-project/docling/blob/f7244a43/README.md#L28-L43) [pyproject.toml45-148](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L45-L148) [mkdocs.yml54-162](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L54-L162) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Output and Integration](#output-and-integration.md) - [Purpose and Scope](#purpose-and-scope.md) - [Output Architecture](#output-architecture.md) - [Export Flow Diagram](#export-flow-diagram.md) - [Export Formats Overview](#export-formats-overview.md) - [Basic Export Example](#basic-export-example.md) - [Document Chunking Overview](#document-chunking-overview.md) - [Chunking Workflow](#chunking-workflow.md) - [Chunking Strategies](#chunking-strategies.md) - [Framework Integration Architecture](#framework-integration-architecture.md) - [Integration Landscape Diagram](#integration-landscape-diagram.md) - [Integration Patterns](#integration-patterns.md) - [Pattern 1: Direct Framework Integration](#pattern-1-direct-framework-integration.md) - [Pattern 2: MCP Server for Agents](#pattern-2-mcp-server-for-agents.md) - [Pattern 3: Vector Database Ingestion](#pattern-3-vector-database-ingestion.md) - [Export Method Reference](#export-method-reference.md) - [Export Method Signatures](#export-method-signatures.md) - [Chunking Configuration](#chunking-configuration.md) - [Chunking Method Flow](#chunking-method-flow.md) - [Integration Dependencies](#integration-dependencies.md) - [Core Dependencies](#core-dependencies.md) - [Optional Integration Dependencies](#optional-integration-dependencies.md) - [Framework Integration Packages](#framework-integration-packages.md) - [Use Case: RAG Pipeline](#use-case-rag-pipeline.md) - [Code Example Structure](#code-example-structure.md) - [MCP Server Architecture](#mcp-server-architecture.md) - [MCP Configuration Example](#mcp-configuration-example.md) - [Export Format Comparison](#export-format-comparison.md) - [Format Selection Guide](#format-selection-guide.md) - [Summary](#summary.md)",
  "Model Management CLI | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Model Management CLI Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) This document covers the `docling-tools` command-line interface, which provides model management capabilities for Docling's AI/ML pipeline. The `docling-tools` CLI handles downloading, caching, and managing model artifacts required by Docling's document processing backends. For information about document conversion using the main CLI, see [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md). ## Overview The `docling-tools` CLI is the dedicated model management interface for Docling, providing utilities to download and manage AI model artifacts used throughout the document processing pipeline. It serves as the primary tool for setting up and maintaining the machine learning models that power Docling's advanced document understanding capabilities. **CLI Architecture** ``` ``` **Sources:** [pyproject.toml86-88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L86-L88) [Dockerfile19](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L19-L19) ## Model Download Command The primary function of `docling-tools` is the `models download` command, which handles downloading and caching model artifacts required by Docling's processing pipelines. **Model Download Workflow** ``` ``` **Sources:** [Dockerfile19](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L19-L19) [CHANGELOG.md76](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md#L76-L76) ## HuggingFace Model Integration The `docling-tools` CLI provides specialized functionality for downloading arbitrary HuggingFace models, particularly for VLM (Vision Language Model) backends used in advanced document understanding pipelines. **HuggingFace Download Architecture** ``` ``` **Sources:** [CHANGELOG.md76](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md#L76-L76) [pyproject.toml53](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L53-L53) ## Artifact Path Management The CLI provides flexible configuration for model artifact storage locations through environment variables and command-line options, enabling deployment-specific model management strategies. | Configuration Method | Description | Priority | | ------------------------ | ----------------------------- | -------- | | `DOCLING_ARTIFACTS_PATH` | Environment variable override | Highest | | `--artifacts-path` | CLI argument (if available) | Medium | | Default cache | `~/.cache/docling/models` | Lowest | **Environment Integration** ``` ``` **Sources:** [Dockerfile14-15](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L14-L15) [Dockerfile28-29](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L28-L29) ## Model Type Management The `docling-tools` CLI manages different categories of AI models used throughout Docling's processing pipeline, each with specific download and caching strategies. **Model Category Breakdown** ``` ```",
  "**Sources:** [pyproject.toml49](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L49-L49) [pyproject.toml55](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L55-L55) [pyproject.toml93-99](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L93-L99) ## Pipeline Integration The model management CLI integrates tightly with Docling's document processing pipelines, ensuring that required models are available before pipeline initialization. **Model-to-Pipeline Mapping** ``` ``` **Sources:** [pyproject.toml107-109](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L107-L109) [docling/backend/docling\\_parse\\_v4\\_backend.py1-250](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L1-L250) ## Container Deployment Integration The `docling-tools` CLI is designed to work seamlessly in containerized environments, with pre-download capabilities for building container images with embedded model artifacts. **Container Model Management** ``` ``` **Sources:** [Dockerfile19](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L19-L19) [Dockerfile28-29](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L28-L29) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Model Management CLI](#model-management-cli.md) - [Overview](#overview.md) - [Model Download Command](#model-download-command.md) - [HuggingFace Model Integration](#huggingface-model-integration.md) - [Artifact Path Management](#artifact-path-management.md) - [Model Type Management](#model-type-management.md) - [Pipeline Integration](#pipeline-integration.md) - [Container Deployment Integration](#container-deployment-integration.md)",
  "docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Overview Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) ## Purpose and Scope This document provides a high-level technical overview of Docling, a document parsing and conversion system. It explains the system's purpose, core architecture, key components, and processing flow. This overview serves as an entry point for understanding how Docling transforms diverse document formats into structured, unified representations. For installation instructions, see [Installation](docling-project/docling/1.1-installation.md). For quick start examples, see [Quick Start](docling-project/docling/1.2-quick-start.md). For detailed architecture concepts, see [Core Architecture](docling-project/docling/2-core-architecture.md). ## System Purpose Docling is an SDK and CLI for parsing documents in multiple formats (PDF, DOCX, PPTX, XLSX, HTML, images, audio, and more) into a unified `DoclingDocument` representation. The system is designed to power downstream workflows such as generative AI applications, RAG systems, and document analysis pipelines. Key capabilities: - **Format-agnostic parsing**: Handles 15+ document formats through specialized backends - **Advanced PDF understanding**: Page layout detection, reading order, table structure, formula extraction, OCR integration - **Unified output**: All formats convert to `DoclingDocument`, which exports to Markdown, HTML, JSON, or DocTags - **AI model integration**: OCR engines, layout models, table structure models, vision-language models, and enrichment models - **Local execution**: Supports air-gapped environments and sensitive data processing - **Framework integrations**: Native support for LangChain, LlamaIndex, Haystack, and other AI frameworks Sources: [pyproject.toml1-80](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L80) [README.md28-43](https://github.com/docling-project/docling/blob/f7244a43/README.md#L28-L43) [docs/index.md20-34](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L20-L34) ## Core Architecture Docling implements a layered architecture with clear separation between user interfaces, orchestration logic, processing pipelines, and model integration. ### System Architecture Diagram ``` ``` Sources: Diagram 1 from high-level overview, [pyproject.toml84-89](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L89) ### Component Overview",
  "| Layer | Key Classes | Purpose | | ------------------- | ---------------------------------------------------------------------- | ------------------------------------------------------- | | **User Interfaces** | `CLI (docling)`, `DocumentConverter`, `DocumentExtractor` | Entry points for document processing | | **Orchestration** | `DocumentConverter`, `FormatOption` mapping | Routes documents to appropriate pipelines and backends | | **Pipelines** | `BasePipeline`, `StandardPdfPipeline`, `VlmPipeline`, `SimplePipeline` | Implements format-specific processing strategies | | **Backends** | `DoclingParseV4Backend`, `MsWordBackend`, `HTMLBackend`, etc. | Provides format-specific document readers | | **Models** | `LayoutModel`, `TableStructureModel`, `OcrAutoModel`, VLM models | AI/ML models for document understanding | | **Output** | `DoclingDocument` | Unified representation that exports to multiple formats | Sources: [pyproject.toml84-90](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L90) Diagram 1 from high-level overview ## Key Components ### User Interfaces **CLI (`docling` command)** - Entry point: [pyproject.toml88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L88-L88) - Implementation: `docling.cli.main:app` - Provides command-line interface for document conversion with extensive options **Python SDK** - `DocumentConverter`: Main class for document conversion - `DocumentExtractor`: Schema-based structured extraction (beta) - Used programmatically in Python applications **MCP Server** - Model Context Protocol server for AI agent integration - Enables Docling capabilities in agentic AI systems - See [MCP Server](docling-project/docling/6.2-model-management-cli.md) for details Sources: [pyproject.toml84-89](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L89) [README.md84-97](https://github.com/docling-project/docling/blob/f7244a43/README.md#L84-L97) [docs/usage/mcp.md1-31](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md#L1-L31) ### Core Orchestration Layer **DocumentConverter** - Central orchestration class that routes documents through the system - Maintains `format_to_options` dictionary mapping `InputFormat` to `FormatOption` instances - Implements pipeline caching via `_initialized_pipelines` dictionary - Key methods: `convert()`, `convert_all()`, `_get_pipeline()` **FormatOption Classes** - `PdfFormatOption`, `WordFormatOption`, `HtmlFormatOption`, etc. - Each pairs an `InputFormat` with a `pipeline_cls` (pipeline class) and `backend_cls` (backend class) - Contains format-specific `PipelineOptions` **Format Detection** - Function `_guess_format()` uses MIME types, file extensions, and content analysis - Routes to correct backend for processing Sources: Diagram 2 from high-level overview, Diagram 6 from high-level overview ### Processing Pipelines All pipelines inherit from `BasePipeline` which defines a three-phase execution model: ``` ``` **Pipeline Execution Phases**: 1. `_build_document`: Extract raw structure from backend 2. `_assemble_document`: Construct hierarchical document representation 3. `_enrich_document`: Apply enrichment models (code detection, picture classification, etc.) **Key Pipeline Implementations**: - `StandardPdfPipeline`: Sequential 5-stage processing (preprocess → OCR → layout → table → assemble) - `ThreadedStandardPdfPipeline`: Default for PDFs, uses multi-threading with bounded queues - `VlmPipeline`: End-to-end processing with vision-language models - `SimplePipeline`: Direct conversion for DOCX, HTML, Markdown - `AsrPipeline`: Audio transcription using Whisper models - `ExtractionVlmPipeline`: Schema-based data extraction (beta) Sources: Diagram 4 from high-level overview, [README.md38-46](https://github.com/docling-project/docling/blob/f7244a43/README.md#L38-L46) ### Document Backends Backends provide format-specific document readers implementing the `AbstractDocumentBackend` interface. **PDF Backends**: - `DoclingParseV4Backend`: Current default, uses `docling-parse` library for character-level text extraction - `DoclingParseV2Backend`: Legacy sanitized format - `PyPdfiumBackend`: Pure `pypdfium2` implementation **Office Format Backends**:",
  "- `MsWordBackend`: Uses `python-docx` library - `MsExcelBackend`: Uses `openpyxl` library - `MsPowerpointBackend`: Uses `python-pptx` library **Web and Markup Backends**: - `HTMLBackend`: Uses `BeautifulSoup` parser - `MarkdownBackend`: Uses `marko` parser - `AsciiDocBackend`: AsciiDoc support **Specialized Backends**: - `JATSBackend`: Scientific articles in JATS XML format - `METSBackend`: Google Books METS archives - `USPTOBackend`: Patent documents - `ImageBackend`: Image files (PNG, JPEG, TIFF, WEBP, etc.) - `AudioBackend`: Audio files (WAV, MP3) - `WebVTTBackend`: Subtitle files Sources: Diagram 3 from high-level overview, [pyproject.toml45-76](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L45-L76) ### AI/ML Model Layer The model layer uses a plugin system for discovery and registration. **OCR Models**: - `OcrAutoModel`: Automatic selection with fallback logic - `RapidOcrModel`: ONNX/Torch backends (default on most platforms) - `EasyOcrModel`: Deep learning OCR - `TesseractOcrModel`: Tesseract binding - `OcrMacModel`: macOS native OCR **Layout and Table Models**: - `LayoutModel`: Heron model (default), DocLayoutModel (legacy) - `TableStructureModel`: TableFormer with FAST/ACCURATE modes - `PagePreprocessingModel`: Image generation and cell extraction - `PageAssembleModel`: Hierarchy construction **Vision-Language Models**: - `HuggingFaceTransformersVlmModel`: AutoModel + Transformers framework - `HuggingFaceMlxModel`: Apple Silicon acceleration - `VllmVlmModel`: Optimized inference (Linux x86\\_64 only) - `ApiVlmModel`: OpenAI-compatible API clients - Models: GraniteDocling, SmolDocling, Qwen2.5-VL, Pixtral, Gemma3, Phi-4 **Enrichment Models**: - `CodeFormulaModel`: LaTeX extraction from images - `DocumentPictureClassifier`: Figure classification - `PictureDescriptionVlmModel`: Image caption generation - `PictureDescriptionApiModel`: External API-based captions Sources: Diagram 5 from high-level overview, [pyproject.toml49-110](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L49-L110) [docs/usage/vision\\_models.md1-124](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L1-L124) ## Processing Flow ### Document Conversion Flow ``` ``` **Key Flow Points**: 1. **Format Detection**: `_guess_format()` analyzes MIME type, file extension, and content to determine `InputFormat` 2. **Pipeline Selection**: `FormatOption` mapping routes to appropriate pipeline class and backend class 3. **Pipeline Caching**: Pipelines cached by `(pipeline_class, options_hash)` to avoid redundant model loading 4. **Three-Phase Processing**: `_build_document()` → `_assemble_document()` → `_enrich_document()` 5. **Model Integration**: Models invoked throughout pipeline stages 6. **Unified Output**: All pipelines produce `DoclingDocument` instance Sources: Diagram 2 from high-level overview ### Pipeline Caching Strategy The `DocumentConverter` maintains an `_initialized_pipelines` cache keyed by `(pipeline_class, options_hash)`. This ensures: - Models loaded once per configuration - Pipelines reused across documents with identical settings - Significant performance improvement for batch processing Sources: Diagram 6 from high-level overview ## Technology Stack ### Core Dependencies | Dependency | Purpose | | -------------------- | --------------------------------- | | `docling-core` | Core data models and utilities | | `docling-parse` | PDF text extraction library | | `docling-ibm-models` | Layout and table structure models | | `pypdfium2` | PDF rendering | | `pydantic` | Data validation and settings | | `huggingface_hub` | Model downloading | ### Optional Dependencies",
  "| Extra | Dependencies | Purpose | | ----------- | -------------------------------------------------- | --------------------------------- | | `easyocr` | `easyocr` | Deep learning OCR engine | | `tesserocr` | `tesserocr` | Tesseract OCR binding | | `ocrmac` | `ocrmac` | macOS native OCR | | `vlm` | `transformers`, `mlx-vlm`, `vllm`, `qwen-vl-utils` | Vision-language model support | | `rapidocr` | `rapidocr`, `onnxruntime` | RapidOCR engine with ONNX backend | | `asr` | `openai-whisper` | Audio transcription | ### Platform Support - **Operating Systems**: macOS, Linux (x86\\_64, aarch64, arm64), Windows - **Python Versions**: 3.9, 3.10, 3.11, 3.12, 3.13 - **Accelerators**: CPU, CUDA, MPS (Apple Silicon), AUTO detection Sources: [pyproject.toml44-111](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L44-L111) [uv.lock1-15](https://github.com/docling-project/docling/blob/f7244a43/uv.lock#L1-L15) ## Entry Points ### CLI Entry Points ``` docling # Main CLI: docling.cli.main:app docling-tools # Model management: docling.cli.tools:app ``` ### Plugin System Entry point `docling_defaults` registered at [pyproject.toml84-85](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L85) enables plugin discovery: - `docling.models.plugins.defaults` provides default OCR engines and picture description models - Third-party plugins can extend Docling without modifying core ### Python API Entry Points ``` ``` Sources: [pyproject.toml84-90](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L90) [docs/usage/index.md1-46](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L1-L46) [docs/examples/minimal\\_vlm\\_pipeline.py1-71](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py#L1-L71) ## Configuration and Environment ### Configuration Hierarchy 1. **CLI Arguments**: Parsed into option objects 2. **Environment Variables**: `DOCLING_DEVICE`, `OMP_NUM_THREADS`, `DOCLING_NUM_THREADS` 3. **Pipeline Options**: `PdfPipelineOptions`, `VlmPipelineOptions`, `AsrPipelineOptions` 4. **Model-Specific Options**: `OcrOptions`, `LayoutOptions`, `TableStructureOptions` 5. **Accelerator Options**: Device placement and thread configuration ### Key Configuration Classes - `AcceleratorOptions`: Hardware acceleration settings - `PdfPipelineOptions`: PDF processing configuration - `VlmPipelineOptions`: Vision-language model settings - `InlineVlmOptions` / `ApiVlmOptions`: Local vs. remote VLM configuration - `OcrOptions`: OCR engine selection and language settings - `TableStructureOptions`: Table model precision modes (FAST/ACCURATE) Sources: Diagram 6 from high-level overview ## Output Formats `DoclingDocument` supports multiple export formats: | Format | Method | Use Case | | -------- | ---------------------- | ------------------------------------------- | | Markdown | `export_to_markdown()` | Human-readable, LLM-friendly | | HTML | `export_to_html()` | Web display, rich formatting | | JSON | `export_to_json()` | Lossless serialization, programmatic access | | DocTags | `export_to_doctags()` | Structured markup format | All exports preserve document structure, provenance, and metadata. The `DoclingDocument` data model is defined in `docling-core` package. Sources: [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35) Diagram 1 from high-level overview ## Development and Distribution ### Package Distribution",
  "- **PyPI**: `pip install docling` - [pyproject.toml2](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L2-L2) - **Version**: 2.55.1 (auto-updated via semantic release) - **License**: MIT - [pyproject.toml5](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L5-L5) ### Development Tools - **Package Manager**: `uv` - [pyproject.toml155-157](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L155-L157) - **Code Formatting**: `ruff` - [pyproject.toml162-238](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L162-L238) - **Type Checking**: `mypy` - [pyproject.toml239-266](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L239-L266) - **Testing**: `pytest` with coverage - **CI/CD**: GitHub Actions, semantic release ### Versioning Semantic versioning with automated releases based on conventional commits: - `feat:` triggers minor version bump - `fix:`, `perf:` trigger patch version bump - Version stored in [pyproject.toml3](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L3-L3) Sources: [pyproject.toml1-280](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L280) [CHANGELOG.md1-430](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md#L1-L430) ## Security and Compliance Docling participates in the OpenSSF Best Practices Badge Program and implements: - HTTPS for network communication - TLS certificate verification - Cryptographically signed releases on PyPI, Quay.io, and GHCR.io - Private vulnerability reporting via email: [deepsearch-core@zurich.ibm.com](mailto:deepsearch-core@zurich.ibm.com.md) - Issue tracking on GitHub Security-conscious features: - Local execution support for air-gapped environments - No telemetry or data transmission by default - Configurable model artifact storage Sources: [.github/SECURITY.md1-43](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md#L1-L43) ## Project Governance - **Hosted by**: LF AI & Data Foundation - **Started by**: IBM Research Zurich (AI for knowledge team) - **Code Repository**: <https://github.com/docling-project/docling> - **Documentation**: <https://docling-project.github.io/docling/> - **License**: MIT - **Citation**: arXiv:2408.09869 (Docling Technical Report) Sources: [README.md149-156](https://github.com/docling-project/docling/blob/f7244a43/README.md#L149-L156) [CITATION.cff1-16](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff#L1-L16) [docs/index.md59-65](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L59-L65) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Overview](#overview.md) - [Purpose and Scope](#purpose-and-scope.md) - [System Purpose](#system-purpose.md) - [Core Architecture](#core-architecture.md) - [System Architecture Diagram](#system-architecture-diagram.md) - [Component Overview](#component-overview.md) - [Key Components](#key-components.md) - [User Interfaces](#user-interfaces.md) - [Core Orchestration Layer](#core-orchestration-layer.md) - [Processing Pipelines](#processing-pipelines.md) - [Document Backends](#document-backends.md) - [AI/ML Model Layer](#aiml-model-layer.md) - [Processing Flow](#processing-flow.md) - [Document Conversion Flow](#document-conversion-flow.md) - [Pipeline Caching Strategy](#pipeline-caching-strategy.md) - [Technology Stack](#technology-stack.md) - [Core Dependencies](#core-dependencies.md) - [Optional Dependencies](#optional-dependencies.md) - [Platform Support](#platform-support.md) - [Entry Points](#entry-points.md) - [CLI Entry Points](#cli-entry-points.md) - [Plugin System](#plugin-system.md) - [Python API Entry Points](#python-api-entry-points.md) - [Configuration and Environment](#configuration-and-environment.md) - [Configuration Hierarchy](#configuration-hierarchy.md) - [Key Configuration Classes](#key-configuration-classes.md) - [Output Formats](#output-formats.md) - [Development and Distribution](#development-and-distribution.md) - [Package Distribution](#package-distribution.md) - [Development Tools](#development-tools.md) - [Versioning](#versioning.md) - [Security and Compliance](#security-and-compliance.md) - [Project Governance](#project-governance.md)",
  "Format Detection and Routing | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Format Detection and Routing Relevant source files",
  "- [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py) - [docling/backend/docling\\_parse\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py) - [docling/backend/docling\\_parse\\_v2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py) - [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py) - [docling/backend/pypdfium2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py) - [docling/utils/locks.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py) - [tests/test\\_backend\\_docling\\_parse\\_v4.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py) This document describes how Docling automatically detects the format of input documents and routes them to the appropriate backend and pipeline for processing. For information about pipeline execution itself, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md). For backend implementation details, see [Document Backends](docling-project/docling/3-document-backends.md). ## Overview Format detection and routing is the critical orchestration layer that connects user inputs to the correct processing strategy. The system performs three main operations: 1. **Format Detection**: Analyzes input files using MIME types, file extensions, and content inspection to determine the `InputFormat` 2. **Backend Selection**: Maps the detected format to a document backend class that can parse that format 3. **Pipeline Selection**: Routes the format to a processing pipeline with appropriate configuration options These operations ensure that each document type receives optimal processing with format-specific parsing and model application strategies. ## Format Detection Architecture The format detection system uses a multi-strategy approach to reliably identify document types, even when file extensions are missing or misleading. ``` ``` **Sources:** [docling/datamodel/document.py280-490](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L280-L490) [docling/datamodel/base\\_models.py83-139](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L83-L139) ### Detection Strategy Priority The `_guess_format()` method implements a waterfall detection strategy: 1. **Primary MIME detection**: Uses `filetype` library to guess MIME type from file magic bytes 2. **Extension fallback**: If MIME detection fails, derives MIME from file extension using `_mime_from_extension()` 3. **Content-based refinement**: For ambiguous formats (e.g., `application/zip` could be DOCX/XLSX/PPTX), reads file content to disambiguate 4. **Specialized detectors**: Applies format-specific detection for complex types like METS archives, USPTO patents, JATS articles **Key Code Locations:**",
  "- Main detection entry point: [docling/datamodel/document.py280-338](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L280-L338) - MIME-to-format mapping: [docling/datamodel/base\\_models.py135-139](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L135-L139) - Extension-to-format mapping: [docling/datamodel/base\\_models.py83-99](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L83-L99) ## Format Routing System Once a format is detected, the `DocumentConverter` uses the `FormatOption` model to route documents to the correct backend and pipeline combination. ``` ``` **Sources:** [docling/document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L433) ### FormatOption Model The `FormatOption` class is the central routing data structure that pairs each `InputFormat` with its processing strategy: | Field | Type | Purpose | | ------------------ | ------------------------------- | ------------------------------------ | | `backend` | `Type[AbstractDocumentBackend]` | Backend class for parsing the format | | `pipeline_cls` | `Type[BasePipeline]` | Pipeline class for processing | | `pipeline_options` | `PipelineOptions` | Configuration for the pipeline | Specialized subclasses exist for convenience: - `PdfFormatOption`: Routes PDFs to `StandardPdfPipeline` with `DoclingParseV4DocumentBackend` - `WordFormatOption`: Routes DOCX to `SimplePipeline` with `MsWordDocumentBackend` - `AudioFormatOption`: Routes audio to `AsrPipeline` with `NoOpBackend` **Sources:** [docling/document\\_converter.py62-130](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L62-L130) ### Default Routing Table The `_get_default_option()` function defines the default backend-pipeline pairing for each format: | InputFormat | Backend | Pipeline | Notes | | -------------- | ------------------------------- | --------------------- | ------------------------------------- | | `PDF` | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` | Default PDF processing with v4 parser | | `IMAGE` | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` | Images treated as single-page PDFs | | `DOCX` | `MsWordDocumentBackend` | `SimplePipeline` | Office Open XML documents | | `XLSX` | `MsExcelDocumentBackend` | `SimplePipeline` | Excel spreadsheets | | `PPTX` | `MsPowerpointDocumentBackend` | `SimplePipeline` | PowerPoint presentations | | `HTML` | `HTMLDocumentBackend` | `SimplePipeline` | Web content | | `MD` | `MarkdownDocumentBackend` | `SimplePipeline` | Markdown documents | | `ASCIIDOC` | `AsciiDocBackend` | `SimplePipeline` | AsciiDoc format | | `CSV` | `CsvDocumentBackend` | `SimplePipeline` | Comma-separated values | | `METS_GBS` | `MetsGbsDocumentBackend` | `StandardPdfPipeline` | Google Books METS archives | | `XML_JATS` | `JatsDocumentBackend` | `SimplePipeline` | Scientific article format | | `XML_USPTO` | `PatentUsptoDocumentBackend` | `SimplePipeline` | USPTO patent format | | `JSON_DOCLING` | `DoclingJSONBackend` | `SimplePipeline` | Native DoclingDocument JSON | | `AUDIO` | `NoOpBackend` | `AsrPipeline` | Audio transcription | | `VTT` | `WebVTTDocumentBackend` | `SimplePipeline` | Subtitle format | **Sources:** [docling/document\\_converter.py132-182](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L132-L182) ### Pipeline Caching Mechanism To avoid redundant model loading, `DocumentConverter` caches pipeline instances based on a composite key: ``` ``` **Caching Logic:**",
  "1. Hash the serialized `pipeline_options` to create a stable fingerprint 2. Use `(pipeline_class, options_hash)` as the cache key 3. Thread-safe access using `_PIPELINE_CACHE_LOCK` 4. Pipelines with identical configurations share the same instance across all documents This approach is critical for performance when processing batches of documents with the same pipeline configuration, as it avoids reloading models (OCR engines, layout models, table models, etc.) for each document. **Sources:** [docling/document\\_converter.py212-218](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L212-L218) [docling/document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L351-L378) ## Detailed Format Detection Mechanisms ### MIME Type and Extension Detection The system uses two complementary approaches for basic format detection: **MIME Type Detection** ([docling/datamodel/document.py285-304](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L285-L304)): - For `Path` inputs: Uses `filetype.guess_mime()` on file path - For `DocumentStream` inputs: Reads first 8KB and uses `filetype.guess_mime()` on content - Maps detected MIME to `InputFormat` via `MimeTypeToFormat` dictionary **Extension-Based Detection** ([docling/datamodel/document.py377-400](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L377-L400)): - Fallback when MIME detection fails - Extracts file extension and looks up corresponding MIME type - Uses `FormatToMimeType` and `FormatToExtensions` mappings ### Office Document Disambiguation Office Open XML formats (DOCX, XLSX, PPTX) all use `application/zip` as their MIME type, requiring special handling: ``` ``` **Implementation:** [docling/datamodel/document.py292-318](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L292-L318) ### Specialized Content-Based Detection For formats that cannot be reliably detected by MIME or extension alone, the system reads file content and applies pattern matching. #### METS Archive Detection METS (Metadata Encoding and Transmission Standard) archives from Google Books use `.tar.gz` extension but need special handling: **Detection Process:** 1. Detect `application/gzip` MIME type 2. Open tarball and scan member files 3. Look for XML files containing `http://www.loc.gov/METS/` namespace 4. If found, classify as `InputFormat.METS_GBS` **Sources:** [docling/datamodel/document.py320-322](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L320-L322) [docling/datamodel/document.py471-489](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L471-L489) #### HTML/XHTML/XML Detection The `_detect_html_xhtml()` method analyzes document preambles to distinguish between similar markup formats: **Detection Rules:** 1. Remove XML comments from content 2. Check for XML declaration (`<?xml`) - If contains \"xhtml\": `application/xhtml+xml` - Otherwise: `application/xml` 3. Check for HTML5/4 markers: `<!doctype html>`, `<html>`, `<head>`, `<body>` 4. Check for XML doctype with matching root element **Sources:** [docling/datamodel/document.py402-439](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L402-L439) #### CSV Detection Uses Python's `csv.Sniffer` to detect CSV characteristics: **Detection Rules:** 1. Check for newline presence (multi-line requirement) 2. Apply `csv.Sniffer().sniff()` to detect dialect 3. Verify delimiter is common (`,`, `;`, `\\t`, `|`) **Sources:** [docling/datamodel/document.py441-468](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L441-L468) #### Scientific Format Detection For XML-based scientific formats, the system inspects DOCTYPE declarations: **USPTO Patent Detection:** - Checks for DOCTYPE containing: `us-patent-application-v4`, `us-patent-grant-v4`, `us-grant-025`, `patent-application-publication` - Also detects plain text format starting with `PATN\\r\\n` **JATS Article Detection:**",
  "- Checks for DOCTYPE containing: `JATS-journalpublishing`, `JATS-archive` **Sources:** [docling/datamodel/document.py340-374](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L340-L374) ## CLI Format Configuration The CLI provides extensive control over format routing through command-line arguments: ``` ``` **Key CLI Options:** | Option | Purpose | Example | | --------------- | ---------------------------- | ---------------------------- | | `--from` | Filter allowed input formats | `--from pdf --from docx` | | `--pipeline` | Select processing pipeline | `--pipeline vlm` | | `--pdf-backend` | Choose PDF backend | `--pdf-backend dlparse_v4` | | `--ocr-engine` | Select OCR engine | `--ocr-engine tesseract` | | `--vlm-model` | Choose VLM model | `--vlm-model granitedocling` | **Sources:** [docling/cli/main.py308-697](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L308-L697) ### Pipeline-Specific Routing The CLI constructs different `FormatOption` configurations based on the `--pipeline` argument: **Standard Pipeline** ([docling/cli/main.py619-697](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L619-L697)): - Creates `PdfPipelineOptions` with OCR, table, and enrichment settings - Instantiates `PdfFormatOption` with selected backend - Creates `ConvertPipelineOptions` for simple formats (DOCX, HTML, etc.) **VLM Pipeline** ([docling/cli/main.py699-748](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L699-L748)): - Creates `VlmPipelineOptions` with selected VLM model - Routes only PDF and IMAGE formats - Automatically selects MLX backend on Darwin platform if available **ASR Pipeline** ([docling/cli/main.py750-781](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L750-L781)): - Creates `AsrPipelineOptions` with selected Whisper model - Routes only AUDIO format - Uses `NoOpBackend` since audio parsing happens in pipeline ## Complete Detection and Routing Flow ``` ``` **Sources:** [docling/document\\_converter.py313-350](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L313-L350) [docling/datamodel/document.py241-279](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L241-L279) ## Error Handling and Validation The format detection system includes robust error handling: **Invalid Format Handling:** - If detected format is not in `allowed_formats`, creates `ConversionResult` with status `SKIPPED` - If no backend can be selected, uses `_DummyBackend` to mark document as invalid - Logs error messages with detected format and allowed formats for debugging **Backend Validation:** - Each backend implements `is_valid()` to verify successful initialization - If backend initialization fails, `InputDocument.valid` is set to `False` - Invalid documents are caught before pipeline execution **Sources:** [docling/datamodel/document.py251-278](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L251-L278) [docling/document\\_converter.py380-432](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L380-L432) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Format Detection and Routing](#format-detection-and-routing.md) - [Overview](#overview.md) - [Format Detection Architecture](#format-detection-architecture.md) - [Detection Strategy Priority](#detection-strategy-priority.md) - [Format Routing System](#format-routing-system.md) - [FormatOption Model](#formatoption-model.md) - [Default Routing Table](#default-routing-table.md) - [Pipeline Caching Mechanism](#pipeline-caching-mechanism.md) - [Detailed Format Detection Mechanisms](#detailed-format-detection-mechanisms.md) - [MIME Type and Extension Detection](#mime-type-and-extension-detection.md) - [Office Document Disambiguation](#office-document-disambiguation.md) - [Specialized Content-Based Detection](#specialized-content-based-detection.md) - [METS Archive Detection](#mets-archive-detection.md) - [HTML/XHTML/XML Detection](#htmlxhtmlxml-detection.md) - [CSV Detection](#csv-detection.md) - [Scientific Format Detection](#scientific-format-detection.md) - [CLI Format Configuration](#cli-format-configuration.md) - [Pipeline-Specific Routing](#pipeline-specific-routing.md) - [Complete Detection and Routing Flow](#complete-detection-and-routing-flow.md) - [Error Handling and Validation](#error-handling-and-validation.md)",
  "Development and Testing | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Development and Testing Relevant source files",
  "- [docling/models/tesseract\\_ocr\\_cli\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py) - [docling/models/tesseract\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.md) - [tests/data/groundtruth/docling\\_v2/2206.01062.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2206.01062.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.json) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.json) - [tests/data/groundtruth/docling\\_v2/multi\\_page.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/multi_page.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.doctags.txt) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.md) - [tests/data\\_scanned/sample\\_with\\_rotation\\_mismatch.pdf](https://github.com/docling-project/docling/blob/f7244a43/tests/data_scanned/sample_with_rotation_mismatch.pdf) - [tests/test\\_backend\\_docling\\_parse.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse.py) - [tests/test\\_backend\\_docling\\_parse\\_v2.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v2.py) - [tests/test\\_backend\\_pdfium.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pdfium.py) - [tests/test\\_e2e\\_ocr\\_conversion.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py) ## Purpose and Scope This page covers the development environment setup, testing methodologies, and continuous integration workflows for the Docling codebase. It provides guidance for developers contributing to the project, including testing strategies, code quality standards, and the automated verification system. For information about using Docling in production environments, see [Deployment](docling-project/docling/10-deployment.md). For details on the Python SDK usage, see [Python SDK](docling-project/docling/7-python-sdk.md). ## Development Environment Setup Docling uses [uv](https://docs.astral.sh/uv/) as the primary package and project manager for dependency management and virtual environment handling. ### Environment Configuration",
  "The development environment supports Python versions 3.9 through 3.13, with dependencies managed through `pyproject.toml` and `uv.lock` files. The setup process involves: 1. **Virtual Environment Creation**: `uv sync` creates and synchronizes the project environment 2. **Dependency Installation**: All development dependencies including testing, linting, and documentation tools 3. **Pre-commit Hook Setup**: Automated code quality checks before commits ``` ``` ### Code Quality Standards The project enforces strict code quality through multiple tools: - **Ruff**: Code formatting and linting with configuration in `pyproject.toml` - **MyPy**: Static type checking for Python code - **Pre-commit**: Automated checks preventing commits with quality issues ``` ``` **Development Environment Setup Workflow** Sources: [CONTRIBUTING.md7-37](https://github.com/docling-project/docling/blob/f7244a43/CONTRIBUTING.md#L7-L37) [.pre-commit-config.yaml1-28](https://github.com/docling-project/docling/blob/f7244a43/.pre-commit-config.yaml#L1-L28) [docs/installation/index.md127-133](https://github.com/docling-project/docling/blob/f7244a43/docs/installation/index.md#L127-L133) ## Testing Architecture The testing system in Docling employs a comprehensive ground truth verification approach, ensuring consistent and accurate document conversion results across different formats and processing pipelines. ### Ground Truth Verification System The core testing methodology relies on comparing conversion outputs against pre-generated ground truth files stored in the `tests/data/groundtruth/` directory structure. Ground truth files are organized in versioned subdirectories (`docling_v1/` and `docling_v2/`) and include multiple output formats for each test document. ``` ``` **Ground Truth Verification Architecture** #### Ground Truth File Formats Each test document maintains multiple ground truth representations: | Format | File Extension | Content | Example Location | | -------------------- | -------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | DoclingDocument JSON | `.json` | Complete document structure with schema version, origin metadata, furniture/body hierarchy, provenance data | [tests/data/groundtruth/docling\\_v2/2203.01017v2.json1-10](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L1-L10) | | Markdown Export | `.md` | Human-readable text with preserved structure | [tests/data/groundtruth/docling\\_v2/2203.01017v2.md1-15](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.md#L1-L15) | | DocTags Format | `.doctags.txt` | Structured markup with location coordinates | [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt1-15](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt#L1-L15) | The DoclingDocument JSON format includes: - **Schema metadata**: `schema_name`, `version` fields for format versioning - **Origin tracking**: Source file information with MIME type and binary hash - **Content layers**: Separate `furniture` and `body` hierarchies for different document regions - **Provenance data**: Page numbers, bounding boxes, and character spans for every element - **Structural elements**: `texts`, `tables`, `pictures`, `groups` arrays with cross-references #### Verification Functions The verification system includes several specialized functions in [tests/verify\\_utils.py1-512](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L1-L512): - **`verify_conversion_result_v2()`**: Main entry point for v2 format verification - **`verify_document()`**: Compares `DoclingDocument` structure and content - **`verify_cells()`**: Validates page-level text cell extraction accuracy - **`verify_tables_v1()`** and **`verify_table_v2()`**: Table structure and content validation - **`levenshtein()`**: Edit-distance calculation for fuzzy text matching in OCR scenarios - **`verify_text()`**: Text content comparison with configurable fuzzy matching threshold - **`verify_export()`**: Validates markdown and other export formats - **`verify_dt()`**: Validates DocTags format output ``` ``` **Verification Function Relationships** ### Test Data Generation Ground truth data can be regenerated when conversion algorithms improve: ``` ```",
  "This regenerates reference files in `docling_v1` and `docling_v2` subdirectories, supporting both legacy and current document formats. The flag is controlled through [tests/test\\_data\\_gen\\_flag.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_data_gen_flag.py) ### OCR Testing Framework The OCR testing infrastructure validates multiple OCR engines across different document types, rotation scenarios, and language configurations. Tests are located in [tests/test\\_e2e\\_ocr\\_conversion.py1-111](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py#L1-L111) ``` ``` **OCR Testing Configuration Matrix** #### OCR Engine Testing Matrix The test suite validates multiple OCR engines with different configurations: | OCR Engine | Base Test | Full-Page OCR | Auto Language | Rotation Support | | ---------------------- | --------- | ------------- | ------------- | ---------------- | | `TesseractOcrModel` | ✓ | ✓ | ✓ | ✓ | | `TesseractOcrCliModel` | ✓ | ✓ | ✓ | ✓ | | `EasyOcrModel` | ✓ | ✓ | - | - | | `RapidOcrModel` | ✓ | ✓ | - | - | | `OcrMacModel` | ✓ | ✓ | - | ✓ | **Test Execution Logic** (from [tests/test\\_e2e\\_ocr\\_conversion.py59-111](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py#L59-L111)): 1. **Document Discovery**: Scans `tests/data_scanned/` for `ocr_test*.pdf` files 2. **Engine Iteration**: Tests each OCR engine with various option combinations 3. **Skip Logic**: Rotated documents skipped for engines without rotation support 4. **Verification**: Uses `verify_conversion_result_v2()` with fuzzy matching enabled 5. **Platform Detection**: macOS-specific tests for `OcrMacOptions` #### OCR Implementation Details The OCR models implement specific initialization and execution patterns: **TesseractOcrCliModel** [docling/models/tesseract\\_ocr\\_cli\\_model.py35-324](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py#L35-L324): - Executes Tesseract via subprocess with configurable PSM (Page Segmentation Mode) - Performs OSD (Orientation and Script Detection) for automatic language detection - Supports script prefix detection (`script/` vs direct language codes) - Handles rotation correction based on detected orientation - Maps Tesseract output TSV format to `TextCell` objects with confidence scores **TesseractOcrModel** [docling/models/tesseract\\_ocr\\_model.py29-265](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py#L29-L265): - Uses `tesserocr` Python bindings for direct API access - Maintains multiple `PyTessBaseAPI` instances for different detected scripts - Implements OSD with `PSM.OSD_ONLY` mode - Caches script-specific readers for performance ### Backend-Specific Testing Each document backend has dedicated test suites following consistent patterns: - **`test_backend_pdf.py`**: PDF processing with multiple backend options - **`test_backend_pdfium.py`**: PyPdfium2 backend validation - **`test_backend_docling_parse_v2.py`**: DoclingParseV2 backend testing - **`test_backend_docx.py`**: Microsoft Word document conversion - **`test_backend_msexcel.py`**: Excel spreadsheet processing - **`test_backend_pptx.py`**: PowerPoint presentation processing #### PDF Backend Testing PDF backend tests verify multiple implementation variants: **PyPdfiumDocumentBackend Tests** [tests/test\\_backend\\_pdfium.py1-110](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pdfium.py#L1-L110): - Text extraction from specific bounding boxes: `get_text_in_rect()` - Page image cropping functionality: `get_page_image()` - Text cell consistency across multiple page loads - Rotation mismatch handling for scanned documents - Multi-row text cell merging **DoclingParseV2DocumentBackend Tests** [tests/test\\_backend\\_docling\\_parse\\_v2.py1-98](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v2.py#L1-L98): - Text cell extraction consistency - Bounding box coordinate accuracy - Page image generation - Document metadata extraction ``` ``` **Backend Testing Pattern**",
  "Sources: [tests/test\\_e2e\\_ocr\\_conversion.py1-111](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py#L1-L111) [tests/test\\_backend\\_pdfium.py1-110](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pdfium.py#L1-L110) [tests/test\\_backend\\_docling\\_parse\\_v2.py1-98](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v2.py#L1-L98) [docling/models/tesseract\\_ocr\\_cli\\_model.py35-324](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py#L35-L324) [docling/models/tesseract\\_ocr\\_model.py29-265](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py#L29-L265) [tests/data/groundtruth/docling\\_v2/2203.01017v2.json1-10](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L1-L10) ## CI/CD Pipeline Architecture The continuous integration system uses GitHub Actions workflows to ensure code quality, test coverage, and package integrity across multiple Python versions. ``` ``` **CI/CD Pipeline Flow** ### Workflow Components The main CI workflow (`.github/workflows/checks.yml`) orchestrates several critical stages: 1. **Multi-Version Testing**: Runs tests across Python 3.9-3.13 in parallel 2. **Dependency Management**: Installs system dependencies including Tesseract OCR 3. **Model Caching**: Caches HuggingFace models to improve build performance 4. **Quality Assurance**: Executes pre-commit hooks for code standards 5. **Test Execution**: Runs pytest with coverage reporting 6. **Example Validation**: Executes example scripts to ensure functionality 7. **Package Building**: Creates distributable wheel packages 8. **Installation Testing**: Verifies package installation and CLI functionality ### Documentation CI/CD The documentation workflow (`.github/workflows/docs.yml`) handles building and deploying documentation: ``` ``` **Documentation CI/CD Workflow** ### Release Automation The CD pipeline (`.github/workflows/cd.yml`) handles automated releases: ``` ``` **Release Automation Workflow** The release process follows these steps: 1. **Version Determination**: Semantic versioning based on commit history 2. **Changelog Generation**: Automatic changelog updates from commit messages 3. **Version Update**: Updates version in `pyproject.toml` and `uv.lock` 4. **Git Operations**: Commits changes and creates a new tag 5. **PyPI Publication**: Triggered by the release event via `pypi.yml` workflow Sources: [.github/workflows/ci.yml1-18](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/ci.yml#L1-L18) [.github/workflows/cd.yml1-65](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/cd.yml#L1-L65) [.github/workflows/pypi.yml1-39](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/pypi.yml#L1-L39) [.github/workflows/docs.yml1-27](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/docs.yml#L1-L27) [.github/workflows/ci-docs.yml1-20](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/ci-docs.yml#L1-L20) [.github/scripts/release.sh1-41](https://github.com/docling-project/docling/blob/f7244a43/.github/scripts/release.sh#L1-L41) ## Development Workflow ### Code Contribution Process The development workflow emphasizes code quality and testing at every stage: 1. **Branch Creation**: Feature branches from main 2. **Development**: Local development with pre-commit hooks 3. **Testing**: Local test execution and ground truth verification 4. **Pull Request**: Automated CI validation 5. **Review**: Code review with emphasis on test data changes 6. **Merge**: Integration after all checks pass ## Running and Debugging Tests ### Test Execution Strategies **Running All Tests**: ``` ``` **Running Specific Test Files**: ``` ``` **Running Tests with Coverage**: ``` ``` **Platform-Specific Tests**: ``` ``` ### Debugging Test Failures",
  "When tests fail due to conversion differences: 1. **Inspect Differences**: Check the test output for specific mismatches 2. **Visual Inspection**: For OCR tests, enable visualization with `settings.debug.visualize_ocr = True` 3. **Regenerate Ground Truth**: If the new output is correct: ``` ``` 4. **Review Changes**: Carefully examine the diff in ground truth files before committing ### Testing Best Practices When developing new features or fixing bugs: - **Add Tests**: Include tests for new functionality in appropriate `test_backend_*.py` files - **Ground Truth Updates**: Use `DOCLING_GEN_TEST_DATA=1` flag when improving conversion quality - **Double Review**: All ground truth changes require additional review to prevent regression - **Format Coverage**: Ensure tests cover relevant document formats and edge cases - **OCR Testing**: For OCR-related changes, test with multiple engines (Tesseract, EasyOCR, RapidOCR) - **Fuzzy Matching**: Use `fuzzy=True` parameter for OCR tests to account for minor variations ### Test Data Organization Test documents are organized by type and purpose: ``` tests/ ├── data/ # Regular test documents │ ├── pdf/ # PDF test files │ ├── docx/ # Word documents │ └── ... ├── data_scanned/ # Scanned documents for OCR testing │ └── ocr_test*.pdf # OCR-specific test cases └── data/groundtruth/ # Reference outputs ├── docling_v1/ # Legacy format └── docling_v2/ # Current format ├── *.json # DoclingDocument JSON ├── *.md # Markdown exports └── *.doctags.txt # DocTags format ``` ### Example Validation System The CI system automatically validates example scripts to ensure documentation remains current: ``` ``` This ensures that example code in documentation remains functional as the codebase evolves. Sources: [tests/test\\_e2e\\_ocr\\_conversion.py59-111](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py#L59-L111) [tests/test\\_backend\\_pdfium.py49-68](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pdfium.py#L49-L68) [.github/workflows/checks.yml59-71](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L59-L71) ### Model Artifact Management Development and testing require careful handling of AI model artifacts: - **Local Caching**: Models cached in `~/.cache/huggingface/` - **CI Caching**: GitHub Actions cache for faster builds - **Offline Testing**: Support for environments without internet access - **Version Pinning**: Specific model versions for reproducible results Sources: [CONTRIBUTING.md68-84](https://github.com/docling-project/docling/blob/f7244a43/CONTRIBUTING.md#L68-L84) [.github/workflows/checks.yml59-71](https://github.com/docling-project/docling/blob/f7244a43/.github/workflows/checks.yml#L59-L71) [.github/scripts/release.sh1-41](https://github.com/docling-project/docling/blob/f7244a43/.github/scripts/release.sh#L1-L41) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Development and Testing](#development-and-testing.md) - [Purpose and Scope](#purpose-and-scope.md) - [Development Environment Setup](#development-environment-setup.md) - [Environment Configuration](#environment-configuration.md) - [Code Quality Standards](#code-quality-standards.md) - [Testing Architecture](#testing-architecture.md) - [Ground Truth Verification System](#ground-truth-verification-system.md) - [Ground Truth File Formats](#ground-truth-file-formats.md) - [Verification Functions](#verification-functions.md) - [Test Data Generation](#test-data-generation.md) - [OCR Testing Framework](#ocr-testing-framework.md) - [OCR Engine Testing Matrix](#ocr-engine-testing-matrix.md) - [OCR Implementation Details](#ocr-implementation-details.md) - [Backend-Specific Testing](#backend-specific-testing.md) - [PDF Backend Testing](#pdf-backend-testing.md) - [CI/CD Pipeline Architecture](#cicd-pipeline-architecture.md) - [Workflow Components](#workflow-components.md) - [Documentation CI/CD](#documentation-cicd.md) - [Release Automation](#release-automation.md) - [Development Workflow](#development-workflow.md) - [Code Contribution Process](#code-contribution-process.md) - [Running and Debugging Tests](#running-and-debugging-tests.md) - [Test Execution Strategies](#test-execution-strategies.md) - [Debugging Test Failures](#debugging-test-failures.md) - [Testing Best Practices](#testing-best-practices.md) - [Test Data Organization](#test-data-organization.md) - [Example Validation System](#example-validation-system.md) - [Model Artifact Management](#model-artifact-management.md)",
  "Configuration and Pipeline Options | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Configuration and Pipeline Options Relevant source files",
  "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py) ## Purpose and Scope This page documents Docling's configuration system, explaining how options are structured, cascaded, and applied throughout the document conversion process. It covers the options hierarchy (`PipelineOptions`, `PdfPipelineOptions`, `VlmPipelineOptions`, etc.), configuration sources (CLI arguments, environment variables, programmatic API), and how options control pipeline behavior and model initialization. For information about specific pipeline implementations, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md). For details on model configuration and plugin discovery, see [AI/ML Models](docling-project/docling/4-aiml-models.md). --- ## Options Architecture Overview Docling uses a hierarchical options system built on Pydantic models, providing type safety, validation, and serialization. Options flow from configuration sources (CLI, environment variables, or code) through the `DocumentConverter` to pipelines and finally to individual models. ``` ``` **Sources:** [docling/datamodel/pipeline\\_options.py1-384](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L1-L384) [docling/document\\_converter.py62-181](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L62-L181) --- ## Base Options Classes ### BaseOptions All options classes inherit from `BaseOptions`, which provides a common `kind` field used for factory-based selection (e.g., OCR engine selection). ``` ``` **Sources:** [docling/datamodel/pipeline\\_options.py49-52](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L49-L52) ### PipelineOptions The root options class for all pipelines, defining common configuration applicable to any pipeline:",
  "| Field | Type | Default | Description | | ------------------------ | -------------------- | ---------------------- | --------------------------------------------------------- | | `document_timeout` | `Optional[float]` | `None` | Maximum time (seconds) for processing a single document | | `accelerator_options` | `AcceleratorOptions` | `AcceleratorOptions()` | Device and threading configuration | | `enable_remote_services` | `bool` | `False` | Allow models that connect to remote APIs (security flag) | | `allow_external_plugins` | `bool` | `False` | Enable loading third-party plugin modules | | `artifacts_path` | `Optional[Path]` | `None` | Custom path for model artifacts (overrides default cache) | **Sources:** [docling/datamodel/pipeline\\_options.py273-281](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L273-L281) ### ConvertPipelineOptions Extends `PipelineOptions` with enrichment capabilities used by `SimplePipeline` and its descendants: ``` ``` **Sources:** [docling/datamodel/pipeline\\_options.py283-292](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L283-L292) ### PaginatedPipelineOptions Adds image generation controls for pipelines processing paginated documents: ``` ``` **Sources:** [docling/datamodel/pipeline\\_options.py294-298](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L294-L298) --- ## Pipeline-Specific Options ### PdfPipelineOptions The most comprehensive options class, controlling all aspects of PDF processing in `StandardPdfPipeline` and `ThreadedStandardPdfPipeline`: ``` ``` **Key fields:** - **Feature toggles**: `do_table_structure`, `do_ocr`, `do_code_enrichment`, `do_formula_enrichment`, `do_picture_classification`, `do_picture_description` - **Nested configurations**: `table_structure_options`, `ocr_options`, `layout_options` - **Image control**: `images_scale`, `generate_page_images`, `generate_picture_images`, `generate_table_images` (deprecated) - **Text handling**: `force_backend_text` (use PDF's embedded text instead of VLM output) **Sources:** [docling/datamodel/pipeline\\_options.py334-363](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L334-L363) ### VlmPipelineOptions Configuration for vision-language model-based processing: ``` ``` The `vlm_options` field accepts either: - `InlineVlmOptions`: For local model inference (HuggingFace Transformers, MLX, vLLM) - `ApiVlmOptions`: For OpenAI-compatible API endpoints (Ollama, vLLM server) **Sources:** [docling/datamodel/pipeline\\_options.py300-309](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L300-L309) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py) ### AsrPipelineOptions Configuration for audio transcription: ``` ``` The `asr_options` field specifies the Whisper model variant (TINY, BASE, SMALL, MEDIUM, LARGE, TURBO). **Sources:** [docling/datamodel/pipeline\\_options.py324-326](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L324-L326) [docling/datamodel/pipeline\\_options\\_asr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_asr_model.py) ### ThreadedPdfPipelineOptions Extends `PdfPipelineOptions` with batch processing and concurrency controls: ``` ``` These control the threaded pipeline's batching and backpressure mechanisms. See [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) for details. **Sources:** [docling/datamodel/pipeline\\_options.py371-384](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L371-L384) --- ## Model-Specific Options ### AcceleratorOptions Controls hardware acceleration and parallelism across all models: ``` ``` **Device selection logic:**",
  "1. If `device == AUTO`, `decide_device()` probes available hardware 2. Priority order: CUDA → MPS (macOS) → CPU 3. Some models (e.g., TableStructureModel) override MPS to CPU for performance **Environment variable precedence:** - `DOCLING_DEVICE` overrides default but not explicit constructor argument - `DOCLING_NUM_THREADS` takes precedence over `OMP_NUM_THREADS` - Constructor arguments always take precedence over environment variables **Sources:** [docling/datamodel/accelerator\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/accelerator_options.py) [docling/utils/accelerator\\_utils.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/accelerator_utils.py) [tests/test\\_options.py43-96](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L43-L96) ### OcrOptions Hierarchy OCR options use a factory pattern with a polymorphic hierarchy: ``` ``` **Factory usage pattern:** ``` ``` **Key fields:** - `lang`: Language codes (varies by engine: `[\"eng\", \"deu\"]` for Tesseract, `[\"en\", \"de\"]` for EasyOCR) - `force_full_page_ocr`: Always OCR the entire page, ignoring bitmap detection - `bitmap_area_threshold`: Minimum page area covered by bitmaps to trigger OCR (default: 0.05 = 5%) **Sources:** [docling/datamodel/pipeline\\_options.py74-199](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L74-L199) [docling/models/factories.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/factories.py) [docling/cli/main.py599-612](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L599-L612) ### TableStructureOptions Controls the TableFormer model behavior: ``` ``` **Mode comparison:** | Mode | Speed | Accuracy | Model Path | | ---------- | ------ | -------- | -------------------------------------- | | `FAST` | Higher | Lower | `model_artifacts/tableformer/fast` | | `ACCURATE` | Lower | Higher | `model_artifacts/tableformer/accurate` | When `do_cell_matching=True`, the model matches predicted table cells back to PDF text cells. Setting this to `False` makes the model define cells independently, which can be useful for PDFs with merged cells across columns. **Sources:** [docling/datamodel/pipeline\\_options.py62-72](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L62-L72) [docling/models/table\\_structure\\_model.py29-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L29-L101) ### LayoutOptions Configuration for layout analysis: ``` ``` **Model specifications available:** - `DOCLING_LAYOUT_HERON` (default): Balanced performance - `DOCLING_LAYOUT_EGRET_MEDIUM`, `DOCLING_LAYOUT_EGRET_LARGE`, `DOCLING_LAYOUT_EGRET_XLARGE`: Newer models with varying capacity - `DOCLING_LAYOUT_V2`: Legacy model Each `LayoutModelConfig` specifies: - `repo_id`: HuggingFace repository - `revision`: Git revision or tag - `model_repo_folder`: Local folder name - `model_path`: Path within the repository **Sources:** [docling/datamodel/pipeline\\_options.py311-322](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L311-L322) [docling/datamodel/layout\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/layout_model_specs.py) ### Picture Description Options Enrichment models for describing images have two option types: ``` ``` ``` ``` Pre-configured options: - `smolvlm_picture_description`: Uses SmolVLM-256M-Instruct - `granite_picture_description`: Uses IBM Granite Vision 3.3-2B **Sources:** [docling/datamodel/pipeline\\_options.py201-245](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L201-L245) --- ## Configuration Flow: CLI to Pipeline The following diagram shows how CLI arguments transform into configured pipelines: ``` ```",
  "**Sources:** [docling/cli/main.py299-816](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L299-L816) [docling/document\\_converter.py207-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L207-L378) --- ## Environment Variable Configuration Environment variables provide an alternative to CLI arguments, useful for deployment scenarios: | Environment Variable | Type | Default | Affects | | --------------------- | ----- | -------- | ------------------------------------------- | | `DOCLING_DEVICE` | `str` | `\"auto\"` | `AcceleratorOptions.device` | | `OMP_NUM_THREADS` | `int` | `4` | `AcceleratorOptions.num_threads` (fallback) | | `DOCLING_NUM_THREADS` | `int` | `4` | `AcceleratorOptions.num_threads` (primary) | **Precedence rules:** 1. Explicit constructor arguments (highest) 2. Environment variables 3. Default values (lowest) **Example:** ``` ``` **Sources:** [docling/datamodel/accelerator\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/accelerator_options.py) [tests/test\\_options.py43-96](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L43-L96) --- ## FormatOption and Pipeline Mapping The `DocumentConverter` uses `FormatOption` objects to map input formats to processing pipelines: ``` ``` **Default format options:** The `_get_default_option()` function provides sensible defaults for all supported formats: ``` ``` **Custom configuration example:** ``` ``` **Sources:** [docling/document\\_converter.py62-181](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L62-L181) [docling/datamodel/base\\_models.py36-42](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L36-L42) --- ## Pipeline Caching and Options Hashing To avoid redundant model loading, `DocumentConverter` caches pipeline instances based on a composite key of `(pipeline_class, options_hash)`: ``` ``` **Key implications:** - **Options must be hashable**: All fields are serialized to compute the hash - **Options must be comparable**: Identical options produce identical hashes - **Thread-safe**: Cache access is protected by `_PIPELINE_CACHE_LOCK` - **Lifecycle**: Cache lives for the lifetime of the `DocumentConverter` instance **Example scenario:** ``` ``` **Sources:** [docling/document\\_converter.py207-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L207-L378) [docling/cli/main.py787-790](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L787-L790) --- ## Common Configuration Patterns ### Pattern 1: Minimal OCR-Free PDF Processing Fast processing without OCR or table extraction: ``` ``` **Sources:** [tests/test\\_options.py141-165](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L141-L165) ### Pattern 2: High-Accuracy Table Extraction ``` ``` **Sources:** [tests/test\\_options.py25-40](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L25-L40) ### Pattern 3: GPU-Accelerated Processing ``` ``` **Sources:** [tests/test\\_options.py43-78](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L43-L78) ### Pattern 4: Code and Formula Enrichment ``` ``` **Sources:** [docling/models/code\\_formula\\_model.py70-116](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L70-L116) ### Pattern 5: Custom OCR Engine ``` ``` **Sources:** [docling/cli/main.py599-612](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L599-L612) ### Pattern 6: Picture Classification and Description ``` ``` **Sources:** [tests/test\\_document\\_picture\\_classifier.py12-34](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py#L12-L34) ### Pattern 7: Custom Model Artifacts Path ``` ```",
  "This overrides the default cache location (`~/.cache/docling`) for model artifacts. **Sources:** [docling/cli/main.py783-785](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L783-L785) [docling/datamodel/pipeline\\_options.py280](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L280-L280) --- ## Options Validation and Type Safety All options classes use Pydantic for validation: ``` ``` **Protected fields:** - `model_config = ConfigDict(extra=\"forbid\")` prevents typos in field names - `ClassVar` fields (like `kind`) are not included in serialization - Optional fields with defaults enable gradual configuration **Sources:** [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) --- ## Summary Docling's configuration system provides: 1. **Hierarchical structure**: Base classes provide common fields, specialized classes add domain-specific controls 2. **Type safety**: Pydantic validation catches configuration errors early 3. **Multiple sources**: CLI, environment variables, and programmatic API all map to the same options classes 4. **Factory patterns**: OCR engines and other pluggable components use factories with options 5. **Efficient caching**: Pipeline instances are reused based on options hashing 6. **Sensible defaults**: Every option has a reasonable default value 7. **Extensibility**: New options can be added without breaking existing code For pipeline-specific behavior, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md). For model initialization details, see [AI/ML Models](docling-project/docling/4-aiml-models.md). Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Configuration and Pipeline Options](#configuration-and-pipeline-options.md) - [Purpose and Scope](#purpose-and-scope.md) - [Options Architecture Overview](#options-architecture-overview.md) - [Base Options Classes](#base-options-classes.md) - [BaseOptions](#baseoptions.md) - [PipelineOptions](#pipelineoptions.md) - [ConvertPipelineOptions](#convertpipelineoptions.md) - [PaginatedPipelineOptions](#paginatedpipelineoptions.md) - [Pipeline-Specific Options](#pipeline-specific-options.md) - [PdfPipelineOptions](#pdfpipelineoptions.md) - [VlmPipelineOptions](#vlmpipelineoptions.md) - [AsrPipelineOptions](#asrpipelineoptions.md) - [ThreadedPdfPipelineOptions](#threadedpdfpipelineoptions.md) - [Model-Specific Options](#model-specific-options.md) - [AcceleratorOptions](#acceleratoroptions.md) - [OcrOptions Hierarchy](#ocroptions-hierarchy.md) - [TableStructureOptions](#tablestructureoptions.md) - [LayoutOptions](#layoutoptions.md) - [Picture Description Options](#picture-description-options.md) - [Configuration Flow: CLI to Pipeline](#configuration-flow-cli-to-pipeline.md) - [Environment Variable Configuration](#environment-variable-configuration.md) - [FormatOption and Pipeline Mapping](#formatoption-and-pipeline-mapping.md) - [Pipeline Caching and Options Hashing](#pipeline-caching-and-options-hashing.md) - [Common Configuration Patterns](#common-configuration-patterns.md) - [Pattern 1: Minimal OCR-Free PDF Processing](#pattern-1-minimal-ocr-free-pdf-processing.md) - [Pattern 2: High-Accuracy Table Extraction](#pattern-2-high-accuracy-table-extraction.md) - [Pattern 3: GPU-Accelerated Processing](#pattern-3-gpu-accelerated-processing.md) - [Pattern 4: Code and Formula Enrichment](#pattern-4-code-and-formula-enrichment.md) - [Pattern 5: Custom OCR Engine](#pattern-5-custom-ocr-engine.md) - [Pattern 6: Picture Classification and Description](#pattern-6-picture-classification-and-description.md) - [Pattern 7: Custom Model Artifacts Path](#pattern-7-custom-model-artifacts-path.md) - [Options Validation and Type Safety](#options-validation-and-type-safety.md) - [Summary](#summary.md)",
  "Usage Examples | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Usage Examples Relevant source files",
  "- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) This page provides comprehensive, practical code examples for using the Docling Python SDK. It demonstrates common usage patterns, configuration options, and integration approaches for the `DocumentConverter` and `DocumentExtractor` classes. For API reference details, see [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) and [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md). For CLI usage, see [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md). ## Basic Document Conversion The simplest conversion workflow uses `DocumentConverter` with default settings: ``` ``` **Key Components:** - `DocumentConverter`: Main orchestrator for document conversion [document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L184-L433) - `ConversionResult`: Container for conversion output, status, and errors [datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/datamodel/document.py#L198-L215) - `DoclingDocument`: Unified document representation from docling-core The converter automatically detects the input format and selects the appropriate pipeline and backend based on MIME type and file extension [datamodel/document.py280-338](https://github.com/docling-project/docling/blob/f7244a43/datamodel/document.py#L280-L338) **Conversion Flow Diagram:** ``` ``` Sources: [document\\_converter.py227-245](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L227-L245) [document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L351-L378) [document\\_converter.py404-432](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L404-L432) ## Batch Processing For processing multiple documents efficiently, use `convert_all()` which returns an iterator: ``` ``` **Document Limits and Error Handling:** | Parameter | Type | Purpose | | ----------------- | ----- | -------------------------------------------------------------- | | `raises_on_error` | bool | If True, raises on first error; if False, yields error results | | `max_num_pages` | int | Skip documents exceeding this page count | | `max_file_size` | int | Skip documents exceeding this byte size | | `page_range` | tuple | Specify page range to process (start, end) | The `convert_all()` method supports concurrent processing via `settings.perf.doc_batch_concurrency` for improved throughput [document\\_converter.py327-349](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L327-L349)",
  "Sources: [document\\_converter.py247-283](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L247-L283) [datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/datamodel/settings.py) [datamodel/document.py104-191](https://github.com/docling-project/docling/blob/f7244a43/datamodel/document.py#L104-L191) ## Customizing Pipeline Options ### PDF Pipeline Configuration Customize PDF processing with `PdfPipelineOptions`: ``` ``` **Pipeline Options Hierarchy:** ``` ``` Sources: [datamodel/pipeline\\_options.py273-363](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options.py#L273-L363) [datamodel/pipeline\\_options.py334-363](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options.py#L334-L363) ### OCR Configuration Configure OCR engines and languages: ``` ``` **OCR Engine Selection:** | Engine | Class | Best For | Platform | | --------- | --------------------- | ---------------------------- | ---------- | | Auto | `OcrAutoOptions` | Automatic fallback selection | All | | RapidOCR | `RapidOcrOptions` | Fast, multilingual, ONNX | All | | Tesseract | `TesseractOcrOptions` | Accurate, widely supported | All | | EasyOCR | `EasyOcrOptions` | Deep learning, 80+ languages | All | | OcrMac | `OcrMacOptions` | Native macOS OCR | macOS only | The `OcrAutoModel` automatically selects the best available engine in this order: OcrMac (Darwin), RapidOCR (ONNX), EasyOCR, RapidOCR (Torch), Tesseract [models/ocr/ocr\\_auto\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/models/ocr/ocr_auto_model.py) Sources: [datamodel/pipeline\\_options.py74-198](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options.py#L74-L198) [cli/main.py599-611](https://github.com/docling-project/docling/blob/f7244a43/cli/main.py#L599-L611) ### Enrichment Models Enable content enrichment for code, formulas, and figures: ``` ``` Enrichment models run after document assembly on individual items, not pages [pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/pipeline/base_pipeline.py) Sources: [datamodel/pipeline\\_options.py201-245](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options.py#L201-L245) [datamodel/pipeline\\_options.py283-298](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options.py#L283-L298) ## Using Vision Language Models ### Local VLM Processing Use vision-language models for end-to-end document understanding: ``` ``` ### VLM Model Selection **Available Models:** | Model Spec Constant | Model ID | Framework | Device | Output Format | | ----------------------------- | ----------------------------------------- | ------------ | ------------ | ------------- | | `GRANITEDOCLING_TRANSFORMERS` | ibm-granite/granite-docling-258M | Transformers | CPU/CUDA/MPS | DocTags | | `GRANITEDOCLING_MLX` | ibm-granite/granite-docling-258M-mlx-bf16 | MLX | MPS | DocTags | | `SMOLDOCLING_TRANSFORMERS` | ds4sd/SmolDocling-256M-preview | Transformers | CPU/CUDA/MPS | DocTags | | `SMOLDOCLING_MLX` | ds4sd/SmolDocling-256M-preview-mlx-bf16 | MLX | MPS | DocTags | | `GRANITE_VISION_TRANSFORMERS` | ibm-granite/granite-vision-3.2-2b | Transformers | CPU/CUDA/MPS | Markdown | | `GOT2_TRANSFORMERS` | ucaslcl/GOT-OCR2\\_0 | Transformers | CPU/CUDA | HTML |",
  "For Apple Silicon, MLX models provide significantly faster inference (\\~17x faster than Transformers) [docs/usage/vision\\_models.md46-58](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L46-L58) ``` ``` **VLM Pipeline Flow:** ``` ``` Sources: [docs/examples/minimal\\_vlm\\_pipeline.py1-71](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py#L1-L71) [datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/datamodel/vlm_model_specs.py) [docs/usage/vision\\_models.md1-124](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L1-L124) ### Remote VLM via API Connect to VLM services via OpenAI-compatible API: ``` ``` The API client sends page images as base64-encoded content and parses the response [models/vlm/api\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/models/vlm/api_vlm_model.py) Sources: [datamodel/pipeline\\_options\\_vlm\\_model.py29-69](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options_vlm_model.py#L29-L69) [docs/usage/vision\\_models.md116-124](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L116-L124) ### Custom VLM Configuration Define custom VLM models: ``` ``` Sources: [docs/usage/vision\\_models.md88-113](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L88-L113) [datamodel/pipeline\\_options\\_vlm\\_model.py71-167](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options_vlm_model.py#L71-L167) ## Backend Selection ### PDF Backend Options Choose between different PDF backends for varying performance and compatibility: ``` ``` **Backend Comparison:** | Backend | Text Extraction | Coordinate System | Layout Postprocessing | | ----------------------------- | --------------------------------- | ----------------- | --------------------- | | DoclingParseV4DocumentBackend | docling-parse (chars/words/lines) | Native | Yes | | DoclingParseV2DocumentBackend | docling-parse (sanitized) | Native | Yes | | DoclingParseDocumentBackend | docling-parse (legacy) | Native | No | | PyPdfiumDocumentBackend | pypdfium2 only | Custom transform | No | DoclingParseV4Backend is recommended for best quality and performance [backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/backend/docling_parse_v4_backend.py) Sources: [cli/main.py645-655](https://github.com/docling-project/docling/blob/f7244a43/cli/main.py#L645-L655) [document\\_converter.py132-181](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L132-L181) ### Office and Specialized Formats Docling automatically selects appropriate backends for different formats: ``` ``` **Format-Specific Backends:** | Input Format | Backend Class | Library Used | | ------------ | ---------------------------------------------- | ------------- | | DOCX | `MsWordDocumentBackend` | python-docx | | XLSX | `MsExcelDocumentBackend` | openpyxl | | PPTX | `MsPowerpointDocumentBackend` | python-pptx | | HTML | `HTMLDocumentBackend` | BeautifulSoup | | MD | `MarkdownDocumentBackend` | marko | | XML\\_JATS | `JatsDocumentBackend` | xml.etree | | XML\\_USPTO | `PatentUsptoDocumentBackend` | xml.etree | | METS\\_GBS | `MetsGbsDocumentBackend` | tarfile + xml | | CSV | `CsvDocumentBackend` | csv | | AUDIO | `NoOpBackend` (AsrPipeline handles processing) | - |",
  "Sources: [document\\_converter.py72-181](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L72-L181) [cli/main.py678-697](https://github.com/docling-project/docling/blob/f7244a43/cli/main.py#L678-L697) ## Output and Export ### Export Formats Export `DoclingDocument` to various formats: ``` ``` **Image Reference Modes:** | Mode | Description | Use Case | | ------------- | ------------------------------------------- | ---------------------------- | | `EMBEDDED` | Base64-encoded images in document | Self-contained output | | `REFERENCED` | Images saved separately, referenced by path | Large documents, web serving | | `PLACEHOLDER` | Position markers only, no image data | Text-only workflows | Sources: [cli/main.py191-289](https://github.com/docling-project/docling/blob/f7244a43/cli/main.py#L191-L289) [docling\\_core exported via datamodel/document.py](<https://github.com/docling-project/docling/blob/f7244a43/docling_core exported via datamodel/document.py>) ### Extracting Tables and Figures Access structured elements from the document: ``` ``` Sources: [docling\\_core.types.doc via datamodel/document.py24-32](<https://github.com/docling-project/docling/blob/f7244a43/docling_core.types.doc via datamodel/document.py#L24-L32>) ### Page-by-Page Processing Access page-level data for progressive processing: ``` ``` Sources: [datamodel/base\\_models.py269-328](https://github.com/docling-project/docling/blob/f7244a43/datamodel/base_models.py#L269-L328) ## Advanced Configuration ### Accelerator Options Control device placement and threading: ``` ``` **Device Selection:** | Device | Description | Environment Variable | | ------ | ----------------------------------------- | --------------------- | | `AUTO` | Automatic selection based on availability | `DOCLING_DEVICE=auto` | | `CPU` | CPU-only processing | `DOCLING_DEVICE=cpu` | | `CUDA` | NVIDIA GPU acceleration | `DOCLING_DEVICE=cuda` | | `MPS` | Apple Metal Performance Shaders | `DOCLING_DEVICE=mps` | The `AUTO` device selects: MPS (macOS) > CUDA (if available) > CPU [datamodel/accelerator\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/datamodel/accelerator_options.py) Sources: [datamodel/accelerator\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/datamodel/accelerator_options.py) [datamodel/pipeline\\_options.py276-281](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options.py#L276-L281) ### Document Limits and Timeouts Enforce processing constraints: ``` ``` Sources: [datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/datamodel/settings.py) [document\\_converter.py233-244](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L233-L244) ### Pipeline Caching The converter automatically caches pipeline instances based on `(pipeline_class, options_hash)` to avoid redundant model loading: ``` ``` **Pipeline Cache Key:** ``` ``` This caching is thread-safe and significantly improves performance when processing multiple documents with identical configurations [document\\_converter.py207-217](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L207-L217) [document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L351-L378) Sources: [document\\_converter.py203-210](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L203-L210) [document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L351-L378) ### Performance Tuning Control batch sizes and concurrency for optimal performance: ``` ``` The threaded PDF pipeline uses a stage graph with bounded queues to process pages in parallel across multiple stages (preprocess → OCR → layout → table → assemble) [pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/pipeline/threaded_standard_pdf_pipeline.py)",
  "Sources: [datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/datamodel/settings.py) [datamodel/pipeline\\_options.py371-384](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options.py#L371-L384) ## Integration Patterns ### Custom Format Options Create custom format configurations: ``` ``` Sources: [document\\_converter.py62-70](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L62-L70) [datamodel/base\\_models.py36-42](https://github.com/docling-project/docling/blob/f7244a43/datamodel/base_models.py#L36-L42) ### Error Handling and Logging Implement robust error handling: ``` ``` **Error Components:** | Component Type | Description | | ------------------ | ------------------------------ | | `DOCUMENT_BACKEND` | Backend parsing errors | | `MODEL` | AI model inference errors | | `DOC_ASSEMBLER` | Document assembly errors | | `USER_INPUT` | Invalid input or configuration | Sources: [datamodel/base\\_models.py147-157](https://github.com/docling-project/docling/blob/f7244a43/datamodel/base_models.py#L147-L157) [datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/datamodel/document.py#L198-L215) ### Working with Streams Convert documents from in-memory streams: ``` ``` Sources: [document\\_converter.py285-311](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L285-L311) [datamodel/base\\_models.py16](https://github.com/docling-project/docling/blob/f7244a43/datamodel/base_models.py#L16-L16) ### Profiling and Performance Metrics Access timing information from conversion results: ``` ``` **Quality Grades:** | Grade | Score Range | Description | | --------- | ----------- | -------------------------- | | EXCELLENT | ≥ 0.9 | High-quality conversion | | GOOD | 0.8 - 0.9 | Good conversion quality | | FAIR | 0.5 - 0.8 | Acceptable but with issues | | POOR | < 0.5 | Low quality, review needed | Sources: [datamodel/document.py206-207](https://github.com/docling-project/docling/blob/f7244a43/datamodel/document.py#L206-L207) [datamodel/base\\_models.py366-453](https://github.com/docling-project/docling/blob/f7244a43/datamodel/base_models.py#L366-L453) ## Complete Example: Production Pipeline Here's a comprehensive example combining multiple features: ``` ``` Sources: [document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L184-L433) [datamodel/pipeline\\_options.py334-363](https://github.com/docling-project/docling/blob/f7244a43/datamodel/pipeline_options.py#L334-L363) [cli/main.py299-816](https://github.com/docling-project/docling/blob/f7244a43/cli/main.py#L299-L816) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Usage Examples](#usage-examples.md) - [Basic Document Conversion](#basic-document-conversion.md) - [Batch Processing](#batch-processing.md) - [Customizing Pipeline Options](#customizing-pipeline-options.md) - [PDF Pipeline Configuration](#pdf-pipeline-configuration.md) - [OCR Configuration](#ocr-configuration.md) - [Enrichment Models](#enrichment-models.md) - [Using Vision Language Models](#using-vision-language-models.md) - [Local VLM Processing](#local-vlm-processing.md) - [VLM Model Selection](#vlm-model-selection.md) - [Remote VLM via API](#remote-vlm-via-api.md) - [Custom VLM Configuration](#custom-vlm-configuration.md) - [Backend Selection](#backend-selection.md) - [PDF Backend Options](#pdf-backend-options.md) - [Office and Specialized Formats](#office-and-specialized-formats.md) - [Output and Export](#output-and-export.md) - [Export Formats](#export-formats.md) - [Extracting Tables and Figures](#extracting-tables-and-figures.md) - [Page-by-Page Processing](#page-by-page-processing.md) - [Advanced Configuration](#advanced-configuration.md) - [Accelerator Options](#accelerator-options.md) - [Document Limits and Timeouts](#document-limits-and-timeouts.md) - [Pipeline Caching](#pipeline-caching.md) - [Performance Tuning](#performance-tuning.md) - [Integration Patterns](#integration-patterns.md) - [Custom Format Options](#custom-format-options.md) - [Error Handling and Logging](#error-handling-and-logging.md) - [Working with Streams](#working-with-streams.md) - [Profiling and Performance Metrics](#profiling-and-performance-metrics.md) - [Complete Example: Production Pipeline](#complete-example-production-pipeline.md)",
  "OCR Models | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # OCR Models Relevant source files",
  "- [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/models/tesseract\\_ocr\\_cli\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py) - [docling/models/tesseract\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [tests/data\\_scanned/sample\\_with\\_rotation\\_mismatch.pdf](https://github.com/docling-project/docling/blob/f7244a43/tests/data_scanned/sample_with_rotation_mismatch.pdf) - [tests/test\\_backend\\_docling\\_parse.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse.py) - [tests/test\\_backend\\_docling\\_parse\\_v2.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v2.py) - [tests/test\\_backend\\_pdfium.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pdfium.py) - [tests/test\\_e2e\\_ocr\\_conversion.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py) This document covers the Optical Character Recognition (OCR) models and engines available in Docling's document processing pipeline. OCR models are responsible for extracting text from image regions in documents, particularly scanned PDFs and bitmap areas where programmatic text extraction is not possible. For information about layout analysis and document structure recognition, see [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md). For details about vision-language models that can understand document content, see [Vision Language Models](docling-project/docling/4.3-vision-language-models.md). ## OCR Architecture Overview Docling provides a flexible OCR framework that supports multiple OCR engines through a common interface. The system automatically detects areas requiring OCR processing and applies the configured engine to extract text. ### OCR Model Class Hierarchy ``` ``` **Sources:** [docling/models/base\\_ocr\\_model.py24-228](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L24-L228) [docling/models/tesseract\\_ocr\\_model.py29-255](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py#L29-L255) [docling/models/tesseract\\_ocr\\_cli\\_model.py35-328](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py#L35-L328) [docling/models/easyocr\\_model.py28-201](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py#L28-L201) ## Base OCR Model Framework The `BaseOcrModel` class provides the foundation for all OCR implementations in Docling. It defines the common interface and shared functionality used by all OCR engines. ### Core Functionality | Method | Purpose | Implementation | | ---------------------- | ---------------------------------------------------- | -------------------------------------------------- | | `get_ocr_rects()` | Identifies bitmap regions requiring OCR | Uses bitmap detection and morphological operations | | `post_process_cells()` | Integrates OCR results with existing text | Handles cell filtering and re-indexing | | `_filter_ocr_cells()` | Removes OCR cells overlapping with programmatic text | Uses R-tree spatial indexing for efficiency | | `_combine_cells()` | Merges OCR and programmatic text cells | Handles full-page OCR vs. selective OCR modes | ### OCR Region Detection",
  "The base class implements intelligent OCR region detection in `get_ocr_rects()`: 1. **Bitmap Analysis**: Identifies image regions in the document using `page._backend.get_bitmap_rects()` 2. **Morphological Processing**: Uses binary dilation to merge nearby bitmap regions 3. **Coverage Calculation**: Determines if full-page OCR is needed based on bitmap coverage 4. **Threshold-based Decision**: Compares coverage against `bitmap_area_threshold` and `force_full_page_ocr` settings **Sources:** [docling/models/base\\_ocr\\_model.py40-113](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L40-L113) [docling/models/base\\_ocr\\_model.py140-172](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L140-L172) ## Supported OCR Engines Docling supports multiple OCR engines through a plugin-based architecture. Each engine has specific strengths and implementation characteristics. ### OcrAutoModel (Automatic Engine Selection) The `OcrAutoModel` implements intelligent fallback logic to automatically select the best available OCR engine on the current system. #### Selection Priority The auto-selection follows this priority order: 1. **OcrMac** (Darwin/macOS only) - Native macOS OCR API via `ocrmac` library 2. **RapidOcrModel** with ONNX backend - If `onnxruntime` is installed 3. **EasyOcrModel** - If `easyocr` is installed 4. **RapidOcrModel** with Torch backend - If `torch` is installed #### Implementation The selection logic is implemented in `OcrAutoModel.__init__()`: ``` ``` **Sources:** [docling/models/auto\\_ocr\\_model.py25-133](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py#L25-L133) ### RapidOcrModel The `RapidOcrModel` provides a lightweight OCR solution with multiple backend options (ONNX and PyTorch). #### Architecture RapidOCR uses a three-stage pipeline: - **Detection**: Locates text regions in images - **Classification**: Determines text orientation - **Recognition**: Extracts text from detected regions #### Backend Support | Backend | Library | Use Case | | ------------- | -------------- | -------------------------------- | | `onnxruntime` | ONNX Runtime | Default, CPU-optimized inference | | `torch` | PyTorch | GPU acceleration support | | `openvino` | Intel OpenVINO | Intel hardware optimization | | `paddle` | PaddlePaddle | PaddleOCR native backend | #### Model Artifacts RapidOCR uses PP-OCRv4 models downloaded from ModelScope: ``` ``` #### Configuration Options RapidOcrOptions provides extensive control over the OCR pipeline: | Option | Type | Default | Description | | ----------------- | ---------------- | --------------- | --------------------------------- | | `backend` | `str` | `\"onnxruntime\"` | Backend engine to use | | `use_det` | `bool` | `True` | Enable text detection | | `use_cls` | `bool` | `True` | Enable orientation classification | | `use_rec` | `bool` | `True` | Enable text recognition | | `text_score` | `float` | `0.5` | Minimum confidence threshold | | `det_model_path` | `Optional[str]` | `None` | Custom detection model path | | `cls_model_path` | `Optional[str]` | `None` | Custom classification model path | | `rec_model_path` | `Optional[str]` | `None` | Custom recognition model path | | `rec_keys_path` | `Optional[str]` | `None` | Custom character dictionary path | | `rapidocr_params` | `Optional[dict]` | `None` | Advanced RapidOCR parameters | #### Processing Flow The implementation in `RapidOcrModel.__call__()` processes each OCR rectangle: 1. Extract image region with 3x scaling (216 DPI) 2. Convert to numpy array 3. Call `self.reader(im, use_det=..., use_cls=..., use_rec=...)` 4. Parse results as `(boxes, texts, scores)` tuples 5. Transform coordinates back to page coordinate system 6. Create `TextCell` objects with bounding rectangles",
  "**Sources:** [docling/models/rapid\\_ocr\\_model.py36-306](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L36-L306) ### TesseractOcrModel The `TesseractOcrModel` provides direct integration with Tesseract via the `tesserocr` Python binding. #### Key Features - **Direct API Access**: Uses `tesserocr.PyTessBaseAPI` for optimal performance - **Automatic Language Detection**: Script detection with automatic language switching via `lang=[\"auto\"]` - **Orientation Detection**: OSD (Orientation and Script Detection) via separate `osd_reader` - **Multi-script Support**: Maintains separate `script_readers` dictionary for detected scripts - **PSM Configuration**: Configurable Page Segmentation Mode via `psm` option #### Language Detection Implementation When `lang=[\"auto\"]` is configured: 1. **OSD Detection**: `osd_reader.DetectOrientationScript()` identifies script and orientation 2. **Script Mapping**: `map_tesseract_script()` converts Tesseract script names to language codes 3. **Language Validation**: Checks if detected language exists in `_tesserocr_languages` 4. **Reader Creation**: Creates script-specific `PyTessBaseAPI` instance and caches in `script_readers` 5. **Dynamic Switching**: Uses appropriate reader for each OCR rectangle #### Configuration Options | Option | Type | Default | Description | | ------ | --------------- | --------- | ------------------------------------------ | | `lang` | `List[str]` | `[\"eng\"]` | Language codes or `[\"auto\"]` for detection | | `path` | `Optional[str]` | `None` | Custom tessdata directory path | | `psm` | `Optional[int]` | `None` | Page Segmentation Mode (0-13) | **Sources:** [docling/models/tesseract\\_ocr\\_model.py29-265](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py#L29-L265) ### TesseractOcrCliModel The `TesseractOcrCliModel` provides CLI-based Tesseract integration as an alternative when `tesserocr` binding is unavailable. #### Implementation Characteristics - **Subprocess Execution**: Uses `subprocess.run()` to invoke tesseract CLI - **TSV Output**: Parses Tesseract's tab-separated value output format - **Temporary Files**: Creates temporary PNG files for each OCR rectangle - **OSD via CLI**: Runs `tesseract --psm 0 -l osd` for orientation detection - **Language Enumeration**: Uses `tesseract --list-langs` to discover installed languages #### Key Methods | Method | Purpose | | ----------------------------- | ------------------------------------------------------- | | `_get_name_and_version()` | Executes `tesseract --version` to validate installation | | `_set_languages_and_prefix()` | Discovers installed languages and script prefix | | `_perform_osd()` | Runs OSD mode for orientation/script detection | | `_parse_language()` | Maps detected script to language code | | `_run_tesseract()` | Executes main OCR with language and PSM settings | #### Configuration Options | Option | Type | Default | Description | | --------------- | --------------- | ------------- | ---------------------------- | | `tesseract_cmd` | `str` | `\"tesseract\"` | Path to tesseract executable | | `lang` | `List[str]` | `[\"eng\"]` | Language codes or `[\"auto\"]` | | `path` | `Optional[str]` | `None` | Custom tessdata directory | | `psm` | `Optional[int]` | `None` | Page Segmentation Mode | **Sources:** [docling/models/tesseract\\_ocr\\_cli\\_model.py35-332](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py#L35-L332) ### EasyOcrModel The `EasyOcrModel` integrates the EasyOCR library, providing deep learning-based OCR. #### Key Features - **GPU Acceleration**: Supports CUDA and MPS via `accelerator_options` - **Neural Networks**: Uses deep learning models for text recognition - **Multi-language**: Built-in support for 80+ languages - **Model Management**: Automatic model downloading via `download_models()` static method #### Configuration Options",
  "| Option | Type | Default | Description | | ------------------------- | ---------------- | ------------ | ------------------------------------------ | | `lang` | `List[str]` | `[\"en\"]` | EasyOCR language codes | | `use_gpu` | `Optional[bool]` | `None` | GPU usage (auto-detected from accelerator) | | `confidence_threshold` | `float` | `0.5` | Minimum confidence for results | | `recog_network` | `str` | `\"standard\"` | Recognition network architecture | | `model_storage_directory` | `Optional[str]` | `None` | Custom model cache directory | **Sources:** [docling/models/easyocr\\_model.py28-201](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py#L28-L201) ### OcrMacModel The `OcrMacModel` provides macOS-specific OCR using native system APIs via the `ocrmac` library. #### Platform Requirements - **Platform**: macOS (Darwin) only - **Library**: `ocrmac` Python package - **System**: Uses macOS Vision framework **Sources:** [docling/models/auto\\_ocr\\_model.py43-58](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py#L43-L58) ## OCR Processing Pipeline The OCR processing flow integrates with Docling's document processing pipeline through the `BaseOcrModel` framework. ### End-to-End OCR Flow ``` ``` ### Coordinate Transformation OCR engines return coordinates in the scaled image space. The `tesseract_box_to_bounding_rectangle()` utility transforms these to page coordinates: 1. **Apply Rotation**: If document has rotation from OSD, apply inverse rotation 2. **Scale Factor**: Divide by scale factor (typically 3) 3. **Offset Translation**: Add OCR rectangle origin offset 4. **Coordinate Origin**: Convert from TOPLEFT to BOTTOMLEFT if needed **Sources:** [docling/models/base\\_ocr\\_model.py40-228](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L40-L228) [docling/models/tesseract\\_ocr\\_model.py125-260](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py#L125-L260) [docling/models/tesseract\\_ocr\\_cli\\_model.py208-319](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py#L208-L319) [docling/models/rapid\\_ocr\\_model.py226-301](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L226-L301) [docling/utils/ocr\\_utils.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/ocr_utils.py) ### OCR Cell Post-Processing The `post_process_cells()` method handles integration of OCR results: ``` ``` **Sources:** [docling/models/base\\_ocr\\_model.py140-228](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L140-L228) ## Configuration and Options OCR behavior is controlled through `PdfPipelineOptions.ocr_options`, with engine selection via the options factory pattern. ### OCR Options Factory The options class determines which OCR engine is instantiated: ``` ``` ### Common Options (All Engines) | Option | Type | Default | Description | | ----------------------- | ----------- | --------- | ------------------------------------------------------ | | `bitmap_area_threshold` | `float` | `0.05` | Minimum bitmap coverage (0.0-1.0) to trigger OCR | | `force_full_page_ocr` | `bool` | `False` | Force OCR on entire page regardless of bitmap coverage | | `lang` | `List[str]` | `[\"eng\"]` | Language codes for OCR engine | ### Usage Examples ``` ``` ### Integration with Accelerator Options OCR engines respect global `AcceleratorOptions` for device and threading: | AcceleratorOption | Effect on OCR | | ----------------- | -------------------------------------------- | | `device = CUDA` | Enables GPU for EasyOCR and RapidOCR (torch) | | `device = CPU` | Forces CPU execution | | `device = AUTO` | Uses DirectML on Windows for RapidOCR ONNX | | `num_threads = N` | Sets `intra_op_num_threads` for RapidOCR |",
  "**Sources:** [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) [docling/models/rapid\\_ocr\\_model.py82-200](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L82-L200) [docling/models/easyocr\\_model.py57-73](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py#L57-L73) [tests/test\\_e2e\\_ocr\\_conversion.py39-56](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py#L39-L56) ## Performance and Capabilities ### Engine Comparison | Feature | TesseractOCR | TesseractCLI | EasyOCR | RapidOCR | OCR Mac | | ---------------------- | -------------- | -------------- | -------------- | -------------- | ---------- | | **Performance** | High | Medium | Medium | High | High | | **GPU Support** | No | No | Yes | No | No | | **Language Detection** | Yes | Yes | No | Limited | Yes | | **Rotation Handling** | Yes | Yes | No | No | Yes | | **Installation** | Complex | Simple | Simple | Simple | Built-in | | **Platform Support** | Cross-platform | Cross-platform | Cross-platform | Cross-platform | macOS only | ### Processing Characteristics - **Image Scaling**: All engines scale input images to 216 DPI (3x multiplier) for optimal OCR accuracy - **Confidence Scoring**: Each engine provides confidence scores for extracted text - **Spatial Indexing**: Uses R-tree indexing for efficient cell overlap detection - **Memory Management**: Implements proper cleanup for large image processing ### Quality Assessment The system includes text quality rating in `PagePreprocessingModel.rate_text_quality()` to assess OCR results: - Detects problematic patterns (glyph codes, fragmented text) - Applies penalties for low-quality OCR output - Integrates with overall document confidence scoring **Sources:** [docling/models/base\\_ocr\\_model.py173-217](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L173-L217) [docling/models/page\\_preprocessing\\_model.py120-146](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py#L120-L146) [tests/test\\_e2e\\_ocr\\_conversion.py59-101](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py#L59-L101) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [OCR Models](#ocr-models.md) - [OCR Architecture Overview](#ocr-architecture-overview.md) - [OCR Model Class Hierarchy](#ocr-model-class-hierarchy.md) - [Base OCR Model Framework](#base-ocr-model-framework.md) - [Core Functionality](#core-functionality.md) - [OCR Region Detection](#ocr-region-detection.md) - [Supported OCR Engines](#supported-ocr-engines.md) - [OcrAutoModel (Automatic Engine Selection)](#ocrautomodel-automatic-engine-selection.md) - [Selection Priority](#selection-priority.md) - [Implementation](#implementation.md) - [RapidOcrModel](#rapidocrmodel.md) - [Architecture](#architecture.md) - [Backend Support](#backend-support.md) - [Model Artifacts](#model-artifacts.md) - [Configuration Options](#configuration-options.md) - [Processing Flow](#processing-flow.md) - [TesseractOcrModel](#tesseractocrmodel.md) - [Key Features](#key-features.md) - [Language Detection Implementation](#language-detection-implementation.md) - [Configuration Options](#configuration-options-1.md) - [TesseractOcrCliModel](#tesseractocrclimodel.md) - [Implementation Characteristics](#implementation-characteristics.md) - [Key Methods](#key-methods.md) - [Configuration Options](#configuration-options-2.md) - [EasyOcrModel](#easyocrmodel.md) - [Key Features](#key-features-1.md) - [Configuration Options](#configuration-options-3.md) - [OcrMacModel](#ocrmacmodel.md) - [Platform Requirements](#platform-requirements.md) - [OCR Processing Pipeline](#ocr-processing-pipeline.md) - [End-to-End OCR Flow](#end-to-end-ocr-flow.md) - [Coordinate Transformation](#coordinate-transformation.md) - [OCR Cell Post-Processing](#ocr-cell-post-processing.md) - [Configuration and Options](#configuration-and-options.md) - [OCR Options Factory](#ocr-options-factory.md) - [Common Options (All Engines)](#common-options-all-engines.md) - [Usage Examples](#usage-examples.md) - [Integration with Accelerator Options](#integration-with-accelerator-options.md) - [Performance and Capabilities](#performance-and-capabilities.md) - [Engine Comparison](#engine-comparison.md) - [Processing Characteristics](#processing-characteristics.md) - [Quality Assessment](#quality-assessment.md)",
  "DocumentConverter API | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # DocumentConverter API Relevant source files",
  "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) The DocumentConverter API provides the primary programmatic interface for converting documents using Docling. This API orchestrates the entire conversion process from input documents to structured `DoclingDocument` representations, handling format detection, backend selection, pipeline execution, and error management. For information about the underlying processing pipelines, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md). For details about the output document structure, see [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md). For command-line usage, see [Command Line Interface](docling-project/docling/6-command-line-interface.md). ## Core DocumentConverter Class The `DocumentConverter` class serves as the central orchestrator for all document conversion operations. It manages format options, initializes processing pipelines, and coordinates the conversion workflow from input to output. ### Class Architecture ``` ``` Sources: [docling/document\\_converter.py180-429](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L180-L429) [docling/datamodel/document.py104-192](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L104-L192) [docling/datamodel/document.py198-216](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L216) [docling/datamodel/base\\_models.py39-46](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L39-L46) ### Initialization and Configuration The `DocumentConverter` constructor accepts format restrictions and custom format options: | Parameter | Type | Description | | ----------------- | ------------------------------------------- | ------------------------------------------------- | | `allowed_formats` | `Optional[List[InputFormat]]` | Restricts which document formats can be processed | | `format_options` | `Optional[Dict[InputFormat, FormatOption]]` | Custom backend/pipeline configurations per format | When no custom options are provided, the converter uses default configurations defined in `_get_default_option()` which maps each `InputFormat` to appropriate backend and pipeline combinations.",
  "Sources: [docling/document\\_converter.py183-201](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L183-L201) [docling/document\\_converter.py131-178](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L131-L178) ## Input and Output Models ### InputDocument Model The `InputDocument` class represents a validated input document ready for processing: ``` ``` Sources: [docling/datamodel/document.py104-192](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L104-L192) [docling/datamodel/base\\_models.py57-74](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L57-L74) ### ConversionResult Model The `ConversionResult` class encapsulates the complete output of a conversion operation: | Field | Type | Description | | ------------ | -------------------------- | ---------------------------------------- | | `input` | `InputDocument` | Original input document metadata | | `status` | `ConversionStatus` | Success/failure status | | `errors` | `List[ErrorItem]` | Error details if conversion failed | | `document` | `DoclingDocument` | Final structured document representation | | `timings` | `Dict[str, ProfilingItem]` | Performance metrics per processing stage | | `confidence` | `ConfidenceReport` | Quality confidence scores | Sources: [docling/datamodel/document.py198-216](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L216) ## Format Options and Backend Selection ### Format Option System Format options define how each input format should be processed by specifying the backend parser and processing pipeline: ``` ``` Sources: [docling/document\\_converter.py61-130](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L61-L130) [docling/document\\_converter.py131-178](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L131-L178) ### Built-in Format Options | Format Option Class | Input Format | Backend | Pipeline | | ---------------------- | ------------ | ------------------------------- | --------------------- | | `PdfFormatOption` | PDF | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` | | `WordFormatOption` | DOCX | `MsWordDocumentBackend` | `SimplePipeline` | | `ExcelFormatOption` | XLSX | `MsExcelDocumentBackend` | `SimplePipeline` | | `HTMLFormatOption` | HTML | `HTMLDocumentBackend` | `SimplePipeline` | | `MarkdownFormatOption` | MD | `MarkdownDocumentBackend` | `SimplePipeline` | | `ImageFormatOption` | IMAGE | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` | | `AudioFormatOption` | AUDIO | `NoOpBackend` | `AsrPipeline` | Sources: [docling/document\\_converter.py71-129](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L71-L129) ## Conversion Methods ### Primary Conversion Methods The `DocumentConverter` provides three main conversion entry points: #### convert() Processes a single document and returns a `ConversionResult`: ``` ``` Sources: [docling/document\\_converter.py223-242](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L223-L242) #### convert\\_all() Processes multiple documents and returns an iterator of `ConversionResult` objects: ``` ``` Sources: [docling/document\\_converter.py243-280](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L243-L280) #### convert\\_string() Converts string content directly without file I/O: ``` ``` Currently supports `InputFormat.MD` and `InputFormat.HTML`. Sources: [docling/document\\_converter.py281-308](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L281-L308) ### Conversion Pipeline Flow ``` ```",
  "Sources: [docling/document\\_converter.py309-345](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L309-L345) [docling/document\\_converter.py376-428](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L376-L428) [docling/datamodel/document.py241-279](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L241-L279) ## Error Handling and Status ### ConversionStatus Enumeration The conversion process tracks status through the `ConversionStatus` enum: | Status | Description | | ----------------- | --------------------------------------------- | | `PENDING` | Conversion not yet started | | `STARTED` | Conversion in progress | | `SUCCESS` | Conversion completed successfully | | `PARTIAL_SUCCESS` | Conversion completed with some issues | | `FAILURE` | Conversion failed | | `SKIPPED` | Conversion skipped due to format restrictions | Sources: [docling/datamodel/base\\_models.py48-55](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L48-L55) ### Error Reporting Errors are captured in `ErrorItem` objects that include: | Field | Type | Description | | ---------------- | ---------------------- | ------------------------------------------ | | `component_type` | `DoclingComponentType` | Which system component generated the error | | `module_name` | `str` | Specific module that failed | | `error_message` | `str` | Human-readable error description | The `raises_on_error` parameter controls whether errors immediately raise exceptions or are captured in the `ConversionResult.errors` list. Sources: [docling/datamodel/base\\_models.py154-158](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L154-L158) [docling/datamodel/base\\_models.py147-152](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L147-L152) ## Pipeline Integration ### Pipeline Caching and Reuse The `DocumentConverter` maintains a cache of initialized pipelines to avoid expensive re-initialization: ``` ``` The cache key combines the pipeline class and a hash of the pipeline options, allowing different configurations to coexist while reusing identical setups. Sources: [docling/document\\_converter.py347-374](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L347-L374) [docling/document\\_converter.py208-214](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L208-L214) ### Pipeline Selection Logic Format options determine which pipeline class processes each document type: - **StandardPdfPipeline**: Advanced processing for PDFs and images with OCR, layout analysis, and table extraction - **SimplePipeline**: Direct parsing for structured formats like DOCX, HTML, Markdown - **AsrPipeline**: Speech recognition for audio formats Sources: [docling/document\\_converter.py61-69](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L61-L69) [docling/document\\_converter.py215-222](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L215-L222) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [DocumentConverter API](#documentconverter-api.md) - [Core DocumentConverter Class](#core-documentconverter-class.md) - [Class Architecture](#class-architecture.md) - [Initialization and Configuration](#initialization-and-configuration.md) - [Input and Output Models](#input-and-output-models.md) - [InputDocument Model](#inputdocument-model.md) - [ConversionResult Model](#conversionresult-model.md) - [Format Options and Backend Selection](#format-options-and-backend-selection.md) - [Format Option System](#format-option-system.md) - [Built-in Format Options](#built-in-format-options.md) - [Conversion Methods](#conversion-methods.md) - [Primary Conversion Methods](#primary-conversion-methods.md) - [convert()](#convert.md) - [convert\\_all()](#convert_all.md) - [convert\\_string()](#convert_string.md) - [Conversion Pipeline Flow](#conversion-pipeline-flow.md) - [Error Handling and Status](#error-handling-and-status.md) - [ConversionStatus Enumeration](#conversionstatus-enumeration.md) - [Error Reporting](#error-reporting.md) - [Pipeline Integration](#pipeline-integration.md) - [Pipeline Caching and Reuse](#pipeline-caching-and-reuse.md) - [Pipeline Selection Logic](#pipeline-selection-logic.md)",
  "Python SDK | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Python SDK Relevant source files",
  "- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) The Python SDK provides programmatic interfaces for document processing through Docling's document AI capabilities. The SDK exposes two primary classes for different use cases: - **`DocumentConverter`**: Converts documents to the unified `DoclingDocument` format with comprehensive structure and content extraction - **`DocumentExtractor`**: Performs structured data extraction from documents using schema-based templates This page provides an overview of both APIs and common integration patterns. For detailed documentation, see: - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - Full conversion API reference - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - Structured extraction API reference - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - Code examples and integration patterns For command-line usage, see [Command Line Interface](docling-project/docling/6-command-line-interface.md). ## DocumentConverter Overview The `DocumentConverter` class is the primary interface for converting documents into the unified `DoclingDocument` format. It handles format detection, backend initialization, and pipeline orchestration automatically. **Basic Usage:** ``` ``` **Key Capabilities:** ``` ``` **Core Methods:** | Method | Purpose | Returns | | --------------------------------- | ------------------------------------------------- | ---------------------------- | | `convert(source)` | Convert single document from path, URL, or stream | `ConversionResult` | | `convert_all(sources)` | Convert multiple documents with streaming results | `Iterator[ConversionResult]` | | `convert_string(content, format)` | Convert in-memory string content (HTML, Markdown) | `ConversionResult` | | `initialize_pipeline(format)` | Pre-load pipeline for specified format | None | The `ConversionResult` object contains: - `document`: The converted `DoclingDocument` - `status`: Success/failure status (`ConversionStatus`) - `errors`: List of errors if any occurred (`List[ErrorItem]`) - `pages`: Raw page-level data (`List[Page]`) - `timings`: Performance profiling data See [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) for detailed documentation of configuration options, error handling, and advanced usage patterns. Sources: [docling/document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L433) ## DocumentExtractor Overview The `DocumentExtractor` class provides structured data extraction from documents using schema-based templates. It uses vision-language models (VLMs) to extract specific fields according to user-defined schemas. **Basic Usage:** ``` ``` **Template Types:** The extractor supports three template formats: ``` ``` 1. **String Template**: Natural language description of desired extraction 2. **Dictionary Template**: Key-value pairs with field names and descriptions 3. **Pydantic Model**: Strongly-typed schema with validation **Extraction Result:** The `ExtractionResult` contains:",
  "- `data`: Extracted structured data matching the template schema - `confidence`: Model confidence score for the extraction - `source`: Original source document information **Use Cases:** - Metadata extraction (titles, authors, dates) - Form data extraction - Invoice/receipt parsing - Scientific paper metadata - Custom field extraction from any document type See [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) for detailed documentation including template design, model configuration, and advanced extraction patterns. Sources: [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) [docling/datamodel/pipeline\\_options.py328-332](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L328-L332) ## Configuration and Integration Patterns Both `DocumentConverter` and `DocumentExtractor` share common configuration patterns through `FormatOption` classes that map input formats to processing pipelines. **Format Configuration:** ``` ``` **Supported Format Configurations:** | FormatOption | InputFormat | Backend | Default Pipeline | | ------------------------ | ----------- | ------------------------------- | --------------------- | | `PdfFormatOption` | PDF | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` | | `ImageFormatOption` | IMAGE | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` | | `WordFormatOption` | DOCX | `MsWordDocumentBackend` | `SimplePipeline` | | `ExcelFormatOption` | XLSX | `MsExcelDocumentBackend` | `SimplePipeline` | | `PowerpointFormatOption` | PPTX | `MsPowerpointDocumentBackend` | `SimplePipeline` | | `HTMLFormatOption` | HTML | `HTMLDocumentBackend` | `SimplePipeline` | | `MarkdownFormatOption` | MD | `MarkdownDocumentBackend` | `SimplePipeline` | | `AudioFormatOption` | AUDIO | `NoOpBackend` | `AsrPipeline` | **Common Configuration Pattern:** ``` ``` Sources: [docling/document\\_converter.py62-182](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L62-L182) [docling/datamodel/pipeline\\_options.py273-384](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L273-L384) ## Integration with AI Frameworks The SDK's `DoclingDocument` output integrates seamlessly with popular AI frameworks and RAG pipelines. **Framework Integration Pattern:** ``` ``` **LangChain Integration:** ``` ``` **LlamaIndex Integration:** ``` ``` **Document Chunking:** Docling provides specialized chunkers for optimal RAG performance: - `HybridChunker`: Combines semantic and structural chunking - `MetaChunker`: Preserves metadata and hierarchical structure - `DocChunks`: Native chunk representation with provenance See [Chunking](docling-project/docling/8.2-document-chunking.md) for detailed chunking strategies and [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) for specific framework examples. Sources: [docling\\_core.transforms.chunker](https://github.com/docling-project/docling/blob/f7244a43/docling_core.transforms.chunker) [examples/rag\\_langchain.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_langchain.ipynb) [examples/rag\\_llamaindex.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_llamaindex.ipynb) ## Input Handling and Validation Both APIs support multiple input types and provide comprehensive validation for reliable processing. **Supported Input Types:** ``` ``` **Format Detection:** The SDK automatically detects document formats using: 1. MIME type detection (`filetype.guess_mime()`) 2. File extension analysis 3. Content inspection for ambiguous formats 4. Special handling for compressed archives (METS, etc.) **Validation Configuration:** ``` ``` **DocumentStream for In-Memory Processing:** ``` ```",
  "Sources: [docling/datamodel/document.py236-490](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L236-L490) [docling/datamodel/base\\_models.py16](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L16-L16) ## Performance and Caching The SDK implements intelligent caching and batch processing for optimal performance. **Pipeline Caching:** ``` ``` **Key Caching Features:** - Pipelines cached by `(pipeline_class, options_hash)` tuple - Thread-safe initialization with `_PIPELINE_CACHE_LOCK` - Shared across multiple documents with same configuration - Automatic model loading and reuse **Batch Processing:** ``` ``` **Performance Settings:** The SDK respects global performance settings from `settings.perf`: - `doc_batch_size`: Number of documents per batch - `doc_batch_concurrency`: Parallel document processing threads - `page_batch_size`: Pages processed per batch in pipelines Sources: [docling/document\\_converter.py203-379](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L203-L379) [docling/datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/settings.py#LNaN-LNaN) ## Configuration Validation and Limits The SDK provides comprehensive validation through `DocumentLimits` to prevent resource exhaustion and ensure predictable processing behavior. **DocumentLimits Configuration:** - `max_file_size`: Maximum file size in bytes - `max_num_pages`: Maximum pages for paginated documents - `page_range`: Tuple specifying page range to process **Validation Points:** 1. **File size check**: Before document parsing 2. **Page count check**: After backend initialization 3. **Page range validation**: Ensures valid range specification 4. **Format validation**: Against allowed formats list ``` ``` Sources: [docling/datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/settings.py#LNaN-LNaN) [docling/datamodel/document.py108-168](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L108-L168) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Python SDK](#python-sdk.md) - [DocumentConverter Overview](#documentconverter-overview.md) - [DocumentExtractor Overview](#documentextractor-overview.md) - [Configuration and Integration Patterns](#configuration-and-integration-patterns.md) - [Integration with AI Frameworks](#integration-with-ai-frameworks.md) - [Input Handling and Validation](#input-handling-and-validation.md) - [Performance and Caching](#performance-and-caching.md) - [Configuration Validation and Limits](#configuration-validation-and-limits.md)",
  "Office Document Backends | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Office Document Backends Relevant source files",
  "- [docling/backend/msword\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [tests/data/docx/textbox.docx](https://github.com/docling-project/docling/blob/f7244a43/tests/data/docx/textbox.docx) - [tests/data/docx/unit\\_test\\_formatting.docx](https://github.com/docling-project/docling/blob/f7244a43/tests/data/docx/unit_test_formatting.docx) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.itxt) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.json) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.md) - [tests/test\\_backend\\_msword.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msword.py) This document covers the backend implementations for Microsoft Office document formats in Docling, specifically Word (DOCX) and Excel (XLSX) processing. These backends parse declarative document formats into the universal `DoclingDocument` representation. For PDF document processing, see [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md). For web and text format backends, see [Web and Text Document Backends](docling-project/docling/3.3-web-and-markup-backends.md). ## Overview Docling's office document backends handle structured document formats that contain explicit markup and formatting information. Unlike PDF documents that require AI/ML models for layout analysis, office documents can be processed directly through their XML structure and metadata. ``` ``` Sources: [docling/backend/msword\\_backend.py32-40](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L32-L40) [docling/backend/msexcel\\_backend.py28-31](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L28-L31) ## Microsoft Word Backend The `MsWordDocumentBackend` processes DOCX files by parsing their Office Open XML structure using the python-docx library and custom XML processing. ### Core Architecture ``` ``` Sources: [docling/backend/msword\\_backend.py40-92](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L40-L92) [docling/backend/msword\\_backend.py170-281](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L170-L281) ### Document Element Processing The Word backend processes various document elements through specialized handlers: | Element Type | Handler Method | Key Features | | ------------ | ----------------------------- | ---------------------------------------- | | Paragraphs | `_handle_text_elements()` | Style detection, formatting, hyperlinks | | Tables | `_handle_tables()` | Cell extraction, merged cells, structure | | Images | `_handle_pictures()` | Inline images, relationship parsing | | Textboxes | `_handle_textbox_content()` | Position-aware text extraction | | Equations | `_handle_equations_in_text()` | OMML to LaTeX conversion | | Lists | `_add_list_item()` | Numbered and bulleted lists |",
  "Sources: [docling/backend/msword\\_backend.py801-944](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L801-L944) [docling/backend/msword\\_backend.py1074-1197](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L1074-L1197) ### List Processing The backend handles complex list structures with proper nesting and numbering: ``` ``` Sources: [docling/backend/msword\\_backend.py335-421](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L335-L421) [docling/backend/msword\\_backend.py1405-1485](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L1405-L1485) ## Microsoft Excel Backend The `MsExcelDocumentBackend` processes Excel workbooks by treating each worksheet as a separate page and extracting data tables and images. ### Core Architecture ``` ``` Sources: [docling/backend/msexcel\\_backend.py89-176](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L89-L176) [docling/backend/msexcel\\_backend.py177-226](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L177-L226) ### Table Detection Algorithm The Excel backend uses a sophisticated algorithm to detect and extract data tables: ``` ``` Sources: [docling/backend/msexcel\\_backend.py293-394](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L293-L394) [docling/backend/msexcel\\_backend.py320-478](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L320-L478) ### Page and Size Management Excel worksheets are converted to document pages with proper sizing: | Feature | Implementation | Purpose | | ---------------- | ---------------------------- | --------------------------------- | | Page Numbers | `workbook.index(sheet) + 1` | Sequential page numbering | | Page Size | `_find_page_size()` | Calculate bounding box dimensions | | Cell Coordinates | `(col, row)` tuples | 0-based indexing system | | Content Layers | `_get_sheet_content_layer()` | Mark invisible sheets | Sources: [docling/backend/msexcel\\_backend.py194-205](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L194-L205) [docling/backend/msexcel\\_backend.py526-552](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L526-L552) ## Integration with Document Converter Both office document backends integrate with the main document conversion pipeline through the format detection and backend selection system: ``` ``` Sources: [docling/backend/msword\\_backend.py111-112](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L111-L112) [docling/backend/msexcel\\_backend.py146-147](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L146-L147) ## Common Features and Patterns ### Declarative Document Processing Both backends inherit from `DeclarativeDocumentBackend`, which provides: - Direct structural parsing without AI/ML models - Format-specific input validation - Standardized conversion interface - Error handling and cleanup Sources: [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py) [docling/backend/msword\\_backend.py32](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L32-L32) [docling/backend/msexcel\\_backend.py29](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L29-L29) ### Document Structure Creation Both backends create hierarchical document structures using: - Parent-child relationships through `parents` dictionary - Group labels for semantic organization - Provenance information for element positioning - Content layer management for visibility",
  "Sources: [docling/backend/msword\\_backend.py56-67](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L56-L67) [docling/backend/msexcel\\_backend.py105-109](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L105-L109) ### Error Handling and Validation The backends implement robust error handling: ``` ``` Sources: [docling/backend/msword\\_backend.py81-91](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L81-L91) [docling/backend/msexcel\\_backend.py112-125](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msexcel_backend.py#L112-L125) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Office Document Backends](#office-document-backends.md) - [Overview](#overview.md) - [Microsoft Word Backend](#microsoft-word-backend.md) - [Core Architecture](#core-architecture.md) - [Document Element Processing](#document-element-processing.md) - [List Processing](#list-processing.md) - [Microsoft Excel Backend](#microsoft-excel-backend.md) - [Core Architecture](#core-architecture-1.md) - [Table Detection Algorithm](#table-detection-algorithm.md) - [Page and Size Management](#page-and-size-management.md) - [Integration with Document Converter](#integration-with-document-converter.md) - [Common Features and Patterns](#common-features-and-patterns.md) - [Declarative Document Processing](#declarative-document-processing.md) - [Document Structure Creation](#document-structure-creation.md) - [Error Handling and Validation](#error-handling-and-validation.md)",
  "Docker Deployment | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Docker Deployment Relevant source files",
  "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md) - [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md) - [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml) - [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock) This document covers containerized deployment of Docling using Docker, including Dockerfile configuration, environment setup, model management, and production deployment considerations. For information about model artifacts management and caching strategies, see [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md). For general development and testing setup, see [Development and Testing](docling-project/docling/9-development-and-testing.md). ## Container Architecture Overview Docling's Docker deployment provides a self-contained environment that includes the Python SDK, AI models, and all necessary system dependencies. The containerization approach enables consistent deployment across different environments while managing the complexity of AI model dependencies. ``` ``` **Container Architecture**: The Docker image packages Docling with pre-downloaded AI models and optimized environment settings for container deployment. Sources: [Dockerfile1-30](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L1-L30) ## Dockerfile Configuration Analysis The Docling Dockerfile implements a multi-stage approach that optimizes for both functionality and container size: ### Base Image and System Dependencies The container uses `python:3.11-slim-bookworm` as the base image and installs essential system libraries required for AI processing: [Dockerfile1-8](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L1-L8) establishes the foundation with: - OpenGL support (`libgl1`) for image processing - GLib libraries (`libglib2.0-0`) for low-level operations - Git, curl, wget for model downloading and updates - Process utilities (`procps`) for container management ### PyTorch CPU-Only Installation The installation specifically targets CPU-only PyTorch deployment to minimize container size: [Dockerfile12](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L12-L12) installs Docling with CPU-optimized dependencies using the PyTorch CPU wheel index. This approach reduces the container size significantly compared to GPU-enabled installations. ### Environment Optimization Critical environment variables are configured for container environments: | Variable | Value | Purpose | | ----------------- | ------- | -------------------------- | | `HF_HOME` | `/tmp/` | HuggingFace cache location | | `TORCH_HOME` | `/tmp/` | PyTorch model cache | | `OMP_NUM_THREADS` | `4` | Thread budget control | [Dockerfile14-22](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L14-L22) sets these variables to optimize memory usage and prevent thread congestion in containerized environments. Sources: [Dockerfile1-22](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L1-L22) ## Model Pre-loading Strategy The Dockerfile implements a model pre-loading strategy to optimize container startup time: ``` ``` **Model Pre-loading Flow**: Models are downloaded during container build and can be accessed at runtime through environment variable configuration. [Dockerfile19](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L19-L19) executes `docling-tools models download` during the build process, ensuring all required AI models are available immediately when the container starts.",
  "The runtime configuration [Dockerfile28-29](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L28-L29) shows how to use pre-loaded models by setting `DOCLING_ARTIFACTS_PATH=/root/.cache/docling/models`. Sources: [Dockerfile19](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L19-L19) [Dockerfile28-29](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L28-L29) ## Runtime Configuration and Usage ### Basic Container Execution The container includes a minimal example for immediate testing: [Dockerfile17](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L17-L17) copies `docs/examples/minimal.py` to `/root/minimal.py`, providing a ready-to-run example that demonstrates basic document conversion functionality. ### Environment Variable Configuration For production deployment, several environment variables control container behavior: ``` ``` ### Volume Mounting for Production Production deployments typically require volume mounting for input/output operations: ``` ``` Sources: [Dockerfile17](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L17-L17) [Dockerfile28-29](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L28-L29) ## Performance Considerations ### Thread Management [Dockerfile22](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L22-L22) sets `OMP_NUM_THREADS=4` to prevent thread congestion in container environments. This setting should be adjusted based on: - Available CPU cores in the container - Concurrent container instances - Memory constraints - Expected document processing load ### Memory Optimization The container configuration optimizes memory usage through: - **Temporary cache locations**: Using `/tmp/` for model caches reduces persistent storage requirements - **CPU-only PyTorch**: Eliminates GPU memory overhead - **Slim base image**: Minimizes container footprint ### Model Loading Optimization The pre-loading strategy eliminates cold start delays but requires consideration of: - Container image size increase due to embedded models - Alternative approaches using persistent volumes for model caching - Trade-offs between startup time and image size Sources: [Dockerfile14-16](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L14-L16) [Dockerfile22](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L22-L22) ## Production Deployment Patterns ### Stateless Container Design The Dockerfile implements a stateless container pattern where: - Models are either pre-loaded or mounted from external volumes - Processing state is not persisted within the container - Input/output operations use mounted volumes or network endpoints ### Scaling Considerations For horizontal scaling, consider: - Shared model cache volumes across container instances - Load balancing for document processing requests - Resource allocation based on document types and processing complexity ### Security Configuration Container security best practices include: - Running with non-root user (not implemented in current Dockerfile) - Limiting container capabilities - Securing model artifact access - Network isolation for processing workloads Sources: [Dockerfile1-30](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L1-L30) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Docker Deployment](#docker-deployment.md) - [Container Architecture Overview](#container-architecture-overview.md) - [Dockerfile Configuration Analysis](#dockerfile-configuration-analysis.md) - [Base Image and System Dependencies](#base-image-and-system-dependencies.md) - [PyTorch CPU-Only Installation](#pytorch-cpu-only-installation.md) - [Environment Optimization](#environment-optimization.md) - [Model Pre-loading Strategy](#model-pre-loading-strategy.md) - [Runtime Configuration and Usage](#runtime-configuration-and-usage.md) - [Basic Container Execution](#basic-container-execution.md) - [Environment Variable Configuration](#environment-variable-configuration.md) - [Volume Mounting for Production](#volume-mounting-for-production.md) - [Performance Considerations](#performance-considerations.md) - [Thread Management](#thread-management.md) - [Memory Optimization](#memory-optimization.md) - [Model Loading Optimization](#model-loading-optimization.md) - [Production Deployment Patterns](#production-deployment-patterns.md) - [Stateless Container Design](#stateless-container-design.md) - [Scaling Considerations](#scaling-considerations.md) - [Security Configuration](#security-configuration.md)",
  "Export Formats | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Export Formats Relevant source files",
  "- [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.md) - [tests/data/groundtruth/docling\\_v2/2206.01062.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2206.01062.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.json) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.json) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md) - [tests/data/groundtruth/docling\\_v2/multi\\_page.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/multi_page.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.doctags.txt) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.md) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md) - [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py)",
  "This document covers the various output formats supported by Docling for exporting converted documents. It details the available export formats, their structure, and the APIs used to generate them. For information about document chunking strategies that work with these export formats, see [Document Chunking](docling-project/docling/8.2-document-chunking.md). For framework-specific integrations that consume these formats, see [Framework Integrations](docling-project/docling/8.3-framework-integrations.md). ## Overview Docling provides multiple export formats to support different downstream use cases, from human-readable documents to machine-processable structured data. All export formats are generated from the universal `DoclingDocument` representation that serves as the intermediate format after document conversion. ## Export Format Architecture The export system in Docling follows a layered architecture where the `DoclingDocument` serves as the central hub for all export operations: ``` ``` Sources: [docs/examples/minimal.py8](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal.py#L8-L8) [docs/examples/hybrid\\_chunking.ipynb81](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/hybrid_chunking.ipynb#L81-L81) [docs/concepts/chunking.md8-14](https://github.com/docling-project/docling/blob/f7244a43/docs/concepts/chunking.md#L8-L14) ## DoclingDocument Structure The `DoclingDocument` serves as the universal document representation from which all export formats are derived. Understanding its structure is key to understanding the export formats: ``` ``` Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json1-16](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L1-L16) [tests/data/groundtruth/docling\\_v2/2206.01062.json1-16](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.json#L1-L16) ## JSON Export Format The JSON format is the native serialization of the `DoclingDocument` object, preserving all structural information and metadata. ### Structure The JSON export maintains the complete document hierarchy with element references: | Field | Description | Example | | ------------- | -------------------------- | -------------------------------------------------------- | | `schema_name` | Document schema identifier | `\"DoclingDocument\"` | | `version` | Schema version | `\"1.6.0\"` | | `name` | Document identifier | `\"2203.01017v2\"` | | `origin` | Source file metadata | `{\"mimetype\": \"application/pdf\", \"filename\": \"doc.pdf\"}` | | `body` | Main content tree | Contains references to text, table, picture elements | | `texts` | Text element array | Individual text blocks with provenance | | `tables` | Table element array | Structured table data | | `pictures` | Picture element array | Image elements with captions | ### Element References The JSON format uses JSON Pointer references to maintain document structure: ``` ``` Sources: [tests/data/groundtruth/docling\\_v2/2203.01017v2.json17-32](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json#L17-L32) [tests/data/groundtruth/docling\\_v2/2206.01062.json17-32](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.json#L17-L32) ## Markdown Export Format The Markdown export provides a human-readable, text-based representation suitable for documentation and display purposes. ### Features - Hierarchical heading structure based on document sections - Table preservation using Markdown table syntax - Image handling with alt text from captions - List formatting for grouped content - Metadata preservation in frontmatter ### Usage ``` ``` The Markdown export flattens the hierarchical document structure while preserving logical organization through heading levels and formatting. Sources: [docs/examples/minimal.py8](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal.py#L8-L8) [docs/concepts/chunking.md8](https://github.com/docling-project/docling/blob/f7244a43/docs/concepts/chunking.md#L8-L8) ## HTML Export Format",
  "The HTML export generates web-compatible markup while preserving document structure and styling information. ### Structure - Semantic HTML elements for different document components - CSS classes for styling preservation - Table export with proper HTML table markup - Image embedding with captions - Accessibility attributes from document metadata Sources: [docs/v2.md19](https://github.com/docling-project/docling/blob/f7244a43/docs/v2.md#L19-L19) ## YAML Export Format The YAML export provides a human-readable structured format alternative to JSON, useful for configuration and data interchange. ### Characteristics - Hierarchical structure similar to JSON but more readable - Preserves all document metadata and provenance - Suitable for version control and manual editing - Compatible with YAML-based toolchains ## DocTags Export Format DocTags is a specialized export format that provides a compact representation of document structure optimized for specific use cases. ## Text Chunking for RAG Applications Beyond direct export formats, Docling provides sophisticated chunking capabilities for generating text segments suitable for Retrieval-Augmented Generation (RAG) and embedding workflows: ``` ``` ### Chunking Methods | Chunker Type | Description | Use Case | | --------------------- | --------------------------------------------------- | ---------------------------------- | | `HierarchicalChunker` | Structure-aware chunking based on document elements | Preserving document hierarchy | | `HybridChunker` | Token-aware refinement with merge/split logic | RAG applications with token limits | ### Chunk Contextualization The `contextualize()` method enriches chunk text with relevant metadata: ``` ``` Sources: [docs/examples/hybrid\\_chunking.ipynb106-110](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/hybrid_chunking.ipynb#L106-L110) [docs/concepts/chunking.md30-36](https://github.com/docling-project/docling/blob/f7244a43/docs/concepts/chunking.md#L30-L36) ## Export Format Selection The choice of export format depends on the intended use case: - **JSON**: Complete data preservation, programmatic access, archival - **Markdown**: Human-readable documentation, content management systems - **HTML**: Web publishing, styled presentation - **YAML**: Configuration files, human-editable structured data - **Text Chunks**: RAG applications, embedding models, search indexing Each format is optimized for specific downstream consumers while maintaining traceability back to the source document through provenance information. Sources: [docs/v2.md15-29](https://github.com/docling-project/docling/blob/f7244a43/docs/v2.md#L15-L29) [docs/concepts/chunking.md3-14](https://github.com/docling-project/docling/blob/f7244a43/docs/concepts/chunking.md#L3-L14) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Export Formats](#export-formats.md) - [Overview](#overview.md) - [Export Format Architecture](#export-format-architecture.md) - [DoclingDocument Structure](#doclingdocument-structure.md) - [JSON Export Format](#json-export-format.md) - [Structure](#structure.md) - [Element References](#element-references.md) - [Markdown Export Format](#markdown-export-format.md) - [Features](#features.md) - [Usage](#usage.md) - [HTML Export Format](#html-export-format.md) - [Structure](#structure-1.md) - [YAML Export Format](#yaml-export-format.md) - [Characteristics](#characteristics.md) - [DocTags Export Format](#doctags-export-format.md) - [Text Chunking for RAG Applications](#text-chunking-for-rag-applications.md) - [Chunking Methods](#chunking-methods.md) - [Chunk Contextualization](#chunk-contextualization.md) - [Export Format Selection](#export-format-selection.md)",
  "Document Backends | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Document Backends Relevant source files",
  "- [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py) - [docling/backend/docling\\_parse\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py) - [docling/backend/docling\\_parse\\_v2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py) - [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py) - [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py) - [docling/backend/pypdfium2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py) - [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py) - [docling/utils/locks.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md) - [tests/test\\_backend\\_docling\\_parse\\_v4.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py) - [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py) This document covers the backend architecture in Docling that handles parsing and initial processing of different document formats. Document backends are responsible for extracting raw content and structure from input files before they enter the AI/ML processing pipeline. For information about the complete document conversion process, see [Document Conversion Process](docling-project/docling/2.1-document-conversion-flow.md). For details about pipeline processing that occurs after backend parsing, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md). ## Backend Architecture Overview The backend system uses a hierarchical class structure to handle different document types with specialized parsing logic. All backends inherit from abstract base classes that define common interfaces for document processing. ``` ``` **Backend Class Hierarchy** The architecture distinguishes between two main backend categories: - **PaginatedDocumentBackend**: Backends that process documents page-by-page, typically for PDFs and images - **DeclarativeDocumentBackend**: Backends that can directly convert structured documents to `DoclingDocument` format",
  "Sources: [docling/backend/abstract\\_backend.py13-64](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py#L13-L64) [docling/document\\_converter.py16-29](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L16-L29) ## Format Detection and Backend Selection The system automatically detects document formats and selects appropriate backends through a sophisticated detection process implemented in `_DocumentConversionInput`. ``` ``` **Format Detection and Backend Selection Flow** The detection process handles complex scenarios like ZIP-based Office formats and ambiguous MIME types through multi-stage analysis. Sources: [docling/datamodel/document.py280-374](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L280-L374) [docling/datamodel/base\\_models.py85-139](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L85-L139) ## PDF Processing Backends PDF backends represent the most sophisticated document processing capabilities in Docling, with multiple implementation options for different use cases. ### DoclingParseV4DocumentBackend The primary PDF backend using the latest version of the docling-parse library for advanced PDF processing. ``` ``` **DoclingParseV4 Backend Processing Flow** Sources: [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py) (referenced but not shown in files), [docling/document\\_converter.py118-124](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L118-L124) ### PyPdfiumDocumentBackend A fallback PDF backend using the pypdfium2 library for basic PDF text extraction and rendering. | Feature | DoclingParseV4 | PyPdfium2 | | --------------- | -------------------------------- | ------------------------------ | | Text extraction | Advanced with normalized content | Basic text boundary extraction | | Cell merging | Built-in intelligent merging | Manual horizontal cell merging | | Image detection | Native image region detection | PyPdfium2 object enumeration | | Performance | Optimized for document AI | General-purpose PDF rendering | | Dependencies | docling-parse library | pypdfium2 only | Sources: [docling/backend/pypdfium2\\_backend.py101-400](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L101-L400) [docling/backend/pypdfium2\\_backend.py156-252](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L156-L252) ### Legacy DoclingParse Backends The system maintains backward compatibility with older docling-parse versions through dedicated backend implementations. Sources: [docling/backend/docling\\_parse\\_backend.py200-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L200-L238) [docling/backend/docling\\_parse\\_v2\\_backend.py228-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L228-L277) ## Office Document Backends Office document backends handle Microsoft Office formats through direct parsing of the underlying XML structures. ``` ``` **Office Document Backend Processing** Office backends extend `DeclarativeDocumentBackend` and implement direct conversion to `DoclingDocument` without requiring AI/ML pipeline processing. Sources: [docling/document\\_converter.py76-88](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L76-L88) [docling/document\\_converter.py132-144](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L132-L144) ## Web and Text Document Backends Web and text backends handle various markup and plain text formats through specialized parsers. ### HTML and Markdown Backends | Backend | Parser Library | Supported Formats | Key Features | | ------------------------- | -------------- | ----------------- | --------------------------------- | | `HTMLDocumentBackend` | BeautifulSoup | HTML, XHTML | DOM parsing, tag preservation | | `MarkdownDocumentBackend` | marko | Markdown, MD | CommonMark compliance, extensions | | `AsciiDocBackend` | Custom parser | AsciiDoc, ADOC | Structured document markup | ### Structured Data Backends ``` ``` **Structured Data Backend Processing**",
  "Sources: [docling/document\\_converter.py71-74](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L71-L74) [docling/document\\_converter.py169-171](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L169-L171) ## Specialized Format Backends Specialized backends handle domain-specific document formats with custom parsing logic. ### XML-based Scientific Documents ``` ``` **Specialized XML Backend Hierarchy** ### Audio Processing Backend The `NoOpBackend` serves as a placeholder for audio files, which are processed entirely through the ASR pipeline rather than traditional document parsing. Sources: [docling/document\\_converter.py126-129](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L126-L129) [docling/document\\_converter.py154-172](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L154-L172) ## Backend Lifecycle and Integration Document backends follow a structured lifecycle within the conversion process, managed by the `DocumentConverter` class. ``` ``` **Backend Lifecycle in Document Conversion** The lifecycle ensures proper resource management and error handling throughout the conversion process. Sources: [docling/datamodel/document.py183-191](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L183-L191) [docling/document\\_converter.py376-428](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L376-L428) ## Backend Configuration and Options Each backend type is configured through corresponding `FormatOption` classes that specify both the backend implementation and associated pipeline. | InputFormat | Backend Class | Pipeline Class | FormatOption Class | | ----------- | ------------------------------- | --------------------- | ------------------- | | `PDF` | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` | `PdfFormatOption` | | `DOCX` | `MsWordDocumentBackend` | `SimplePipeline` | `WordFormatOption` | | `HTML` | `HTMLDocumentBackend` | `SimplePipeline` | `HTMLFormatOption` | | `CSV` | `CsvDocumentBackend` | `SimplePipeline` | `CsvFormatOption` | | `AUDIO` | `NoOpBackend` | `AsrPipeline` | `AudioFormatOption` | The `DocumentConverter` uses these configurations to automatically select and initialize the appropriate backend and pipeline combination for each input format. Sources: [docling/document\\_converter.py61-178](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L61-L178) [docling/datamodel/base\\_models.py39-46](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L39-L46) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Document Backends](#document-backends.md) - [Backend Architecture Overview](#backend-architecture-overview.md) - [Format Detection and Backend Selection](#format-detection-and-backend-selection.md) - [PDF Processing Backends](#pdf-processing-backends.md) - [DoclingParseV4DocumentBackend](#doclingparsev4documentbackend.md) - [PyPdfiumDocumentBackend](#pypdfiumdocumentbackend.md) - [Legacy DoclingParse Backends](#legacy-doclingparse-backends.md) - [Office Document Backends](#office-document-backends.md) - [Web and Text Document Backends](#web-and-text-document-backends.md) - [HTML and Markdown Backends](#html-and-markdown-backends.md) - [Structured Data Backends](#structured-data-backends.md) - [Specialized Format Backends](#specialized-format-backends.md) - [XML-based Scientific Documents](#xml-based-scientific-documents.md) - [Audio Processing Backend](#audio-processing-backend.md) - [Backend Lifecycle and Integration](#backend-lifecycle-and-integration.md) - [Backend Configuration and Options](#backend-configuration-and-options.md)",
  "Testing Framework | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Testing Framework Relevant source files",
  "- [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py) - [docling/models/tesseract\\_ocr\\_cli\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py) - [docling/models/tesseract\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md) - [tests/data\\_scanned/sample\\_with\\_rotation\\_mismatch.pdf](https://github.com/docling-project/docling/blob/f7244a43/tests/data_scanned/sample_with_rotation_mismatch.pdf) - [tests/test\\_backend\\_docling\\_parse.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse.py) - [tests/test\\_backend\\_docling\\_parse\\_v2.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v2.py) - [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py) - [tests/test\\_backend\\_pdfium.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pdfium.py) - [tests/test\\_e2e\\_ocr\\_conversion.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py) This document covers Docling's comprehensive testing infrastructure, including verification utilities, ground truth data management, and test patterns for document backends. For information about CI/CD workflows and development processes, see [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md). For details on ground truth data formats and schema evolution, see [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md). ## Architecture Overview The testing framework provides systematic verification of document conversion results across multiple formats and backends. It compares conversion outputs against versioned ground truth data using both exact and fuzzy matching techniques. ### Core Testing Flow ``` ``` Sources: [tests/verify\\_utils.py1-510](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L1-L510) [tests/test\\_backend\\_msexcel.py1-101](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msexcel.py#L1-L101) ### Testing Infrastructure Components ``` ```",
  "Sources: [tests/verify\\_utils.py1-510](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L1-L510) [tests/test\\_backend\\_msexcel.py1-101](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msexcel.py#L1-L101) [tests/test\\_backend\\_csv.py1-88](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_csv.py#L1-L88) ## Core Verification Functions ### Text and String Verification The framework provides sophisticated text comparison with support for fuzzy matching using Levenshtein distance: ``` ``` The `verify_text()` function at [tests/verify\\_utils.py55-62](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L55-L62) handles both exact and fuzzy text matching. The Levenshtein distance implementation at [tests/verify\\_utils.py31-52](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L31-L52) provides efficient edit distance calculation for OCR-based fuzzy matching. Sources: [tests/verify\\_utils.py31-62](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L31-L62) ### Document Structure Verification Document structure verification ensures that converted documents maintain proper hierarchical organization: | Function | Purpose | Key Validations | | --------------------------- | ------------------------------- | ------------------------------------------------------- | | `verify_docitems()` | Validates DoclingDocument items | Text content, table structure, picture data, provenance | | `verify_cells()` | Validates page cell data | Cell count, text content, bounding boxes | | `verify_table_v2()` | Validates table structure | Row/column counts, cell properties, headers | | `verify_picture_image_v2()` | Validates image data | Size, mode, binary content | The `verify_docitems()` function at [tests/verify\\_utils.py230-291](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L230-L291) performs comprehensive validation of document items including type checking, provenance verification, and content validation. Sources: [tests/verify\\_utils.py65-96](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L65-L96) [tests/verify\\_utils.py170-211](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L170-L211) [tests/verify\\_utils.py214-221](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L214-L221) [tests/verify\\_utils.py230-291](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L230-L291) ## Ground Truth Data Management ### Versioned Ground Truth System The framework supports multiple ground truth versions to accommodate schema evolution: ``` ``` Ground truth data is organized with precision controls defined by constants: - `COORD_PREC = 2` for coordinate decimal places - `CONFID_PREC = 3` for confidence decimal places Sources: [tests/verify\\_utils.py27-28](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L27-L28) [tests/verify\\_utils.py302-386](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L302-L386) [tests/verify\\_utils.py388-478](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L388-L478) ### Ground Truth Generation and Validation The framework supports both generation and validation modes controlled by the `generate` parameter: ``` ``` The `verify_conversion_result_v2()` function at [tests/verify\\_utils.py388-478](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L388-L478) demonstrates this dual-mode operation with comprehensive file handling for all supported export formats.",
  "Sources: [tests/verify\\_utils.py421-448](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L421-L448) [tests/verify\\_utils.py449-478](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L449-L478) [tests/verify\\_utils.py481-495](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L481-L495) ## Test Backend Patterns ### Standard Test Backend Structure All backend test files follow a consistent pattern for systematic testing: ``` ``` Example implementation pattern from Excel backend testing at [tests/test\\_backend\\_msexcel.py58-73](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msexcel.py#L58-L73): | Step | Function | Purpose | | ---- | ------------------------------ | ---------------------------------------- | | 1 | `get_excel_paths()` | Discover `.xlsx` and `.xlsm` files | | 2 | `get_converter()` | Create converter with `InputFormat.XLSX` | | 3 | `test_e2e_excel_conversions()` | Execute end-to-end validation | | 4 | `verify_export()` | Validate Markdown and indented text | | 5 | `verify_document()` | Validate JSON document structure | Sources: [tests/test\\_backend\\_msexcel.py19-32](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msexcel.py#L19-L32) [tests/test\\_backend\\_msexcel.py58-73](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msexcel.py#L58-L73) [tests/test\\_backend\\_csv.py15-31](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_csv.py#L15-L31) ### Backend-Specific Testing Features Different backends have specialized testing requirements: ``` ``` The Excel backend includes specialized page validation at [tests/test\\_backend\\_msexcel.py75-100](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msexcel.py#L75-L100) that verifies page counts and cell dimensions. The CSV backend at [tests/test\\_backend\\_csv.py42-50](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_csv.py#L42-L50) demonstrates warning handling for inconsistent column data. Sources: [tests/test\\_backend\\_msexcel.py75-100](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msexcel.py#L75-L100) [tests/test\\_backend\\_csv.py42-50](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_csv.py#L42-L50) [tests/test\\_backend\\_patent\\_uspto.py91-134](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_patent_uspto.py#L91-L134) [tests/test\\_backend\\_jats.py28-54](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_jats.py#L28-L54) ## Fuzzy Matching and OCR Testing ### Fuzzy Matching Implementation The framework provides sophisticated fuzzy matching for OCR-based tests where exact text matching is impractical: ``` ``` The Levenshtein algorithm at [tests/verify\\_utils.py31-52](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L31-L52) uses optimized memory usage by ensuring the shorter string is processed first and uses row buffering for efficient computation. Default fuzzy threshold is set to 0.4 (40% difference tolerance) at [tests/verify\\_utils.py55-62](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L55-L62) making it suitable for OCR output validation where minor character recognition errors are expected. Sources: [tests/verify\\_utils.py31-62](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L31-L62) [tests/verify\\_utils.py159-161](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L159-L161) [tests/verify\\_utils.py190-194](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L190-L194) ### OCR Engine Testing",
  "The framework accommodates different OCR engines through engine-specific suffixes in ground truth filenames: | OCR Engine | Suffix Pattern | Example | | ---------- | -------------- | ------------------------- | | Default | None | `document.json` | | Tesseract | `.tesseract` | `document.tesseract.json` | | EasyOCR | `.easyocr` | `document.easyocr.json` | | RapidOCR | `.rapidocr` | `document.rapidocr.json` | Engine-specific ground truth handling is implemented at [tests/verify\\_utils.py322-333](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L322-L333) for v1 format and [tests/verify\\_utils.py408-419](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L408-L419) for v2 format. Sources: [tests/verify\\_utils.py322-333](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L322-L333) [tests/verify\\_utils.py408-419](https://github.com/docling-project/docling/blob/f7244a43/tests/verify_utils.py#L408-L419) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Testing Framework](#testing-framework.md) - [Architecture Overview](#architecture-overview.md) - [Core Testing Flow](#core-testing-flow.md) - [Testing Infrastructure Components](#testing-infrastructure-components.md) - [Core Verification Functions](#core-verification-functions.md) - [Text and String Verification](#text-and-string-verification.md) - [Document Structure Verification](#document-structure-verification.md) - [Ground Truth Data Management](#ground-truth-data-management.md) - [Versioned Ground Truth System](#versioned-ground-truth-system.md) - [Ground Truth Generation and Validation](#ground-truth-generation-and-validation.md) - [Test Backend Patterns](#test-backend-patterns.md) - [Standard Test Backend Structure](#standard-test-backend-structure.md) - [Backend-Specific Testing Features](#backend-specific-testing-features.md) - [Fuzzy Matching and OCR Testing](#fuzzy-matching-and-ocr-testing.md) - [Fuzzy Matching Implementation](#fuzzy-matching-implementation.md) - [OCR Engine Testing](#ocr-engine-testing.md)",
  "Web and Markup Backends | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Web and Markup Backends Relevant source files",
  "- [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md) - [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py) ## Purpose and Scope This document covers the document backends for web and markup formats: HTML, Markdown, and AsciiDoc. These backends parse structured text documents and convert them into the unified `DoclingDocument` representation. All three formats share the `SimplePipeline` processing path and produce documents with hierarchical structure, content layers, and rich formatting. For PDF document backends, see [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md). For Office document formats, see [Office Document Backends](docling-project/docling/3.2-office-document-backends.md). ## Architecture Overview Web and markup backends inherit from `DeclarativeDocumentBackend` and implement format-specific parsing logic. Unlike PDF backends that require complex page-by-page processing, these backends parse the entire document structure in a single pass. ``` ``` **Sources:** [docling/backend/html\\_backend.py183-237](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L183-L237) [docling/document\\_converter.py102-114](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L102-L114) [docling/datamodel/base\\_models.py54-72](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L54-L72) ## Backend Configuration ### Format Options Each backend is paired with a `FormatOption` that specifies the pipeline class and backend class. All web and markup formats use `SimplePipeline`:",
  "| Format | FormatOption Class | Backend Class | Pipeline | | -------- | ---------------------- | ------------------------- | ---------------- | | HTML | `HTMLFormatOption` | `HTMLDocumentBackend` | `SimplePipeline` | | Markdown | `MarkdownFormatOption` | `MarkdownDocumentBackend` | `SimplePipeline` | | AsciiDoc | `AsciiDocFormatOption` | `AsciiDocBackend` | `SimplePipeline` | ``` ``` **Sources:** [docling/document\\_converter.py102-114](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L102-L114) [docling/document\\_converter.py132-181](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L132-L181) ### MIME Type and Extension Detection Format detection uses both MIME types and file extensions to identify document types: **HTML:** - MIME types: `text/html`, `application/xhtml+xml` - Extensions: `.html`, `.htm`, `.xhtml` **Markdown:** - MIME types: `text/markdown`, `text/x-markdown` - Extensions: `.md` **AsciiDoc:** - MIME types: `text/asciidoc` - Extensions: `.adoc`, `.asciidoc`, `.asc` **Sources:** [docling/datamodel/base\\_models.py83-133](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L83-L133) [docling/datamodel/document.py376-400](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L376-L400) ## HTML Backend The `HTMLDocumentBackend` is the most sophisticated web/markup backend, handling complex HTML structures including tables, lists, formatting, hyperlinks, and images. ### Core Implementation ``` ``` **Sources:** [docling/backend/html\\_backend.py183-237](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L183-L237) [docling/backend/html\\_backend.py239-292](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L239-L292) ### Content Layer Management HTML backend implements a content layer system that distinguishes between document body and furniture (metadata/navigation): ``` ``` The backend determines content layers as follows: 1. **Initial state:** Content is `ContentLayer.FURNITURE` if no headers exist in the document 2. **First header transition:** When the first `<h1>`-`<h6>` tag is encountered (excluding headers inside tables), content layer switches to `ContentLayer.BODY` 3. **Footer handling:** `<footer>` tags temporarily switch back to `ContentLayer.FURNITURE` **Sources:** [docling/backend/html\\_backend.py276-288](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L276-L288) [docling/backend/html\\_backend.py751-776](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L751-L776) ### Tag Processing Strategy The backend uses a block-based buffering strategy to handle mixed inline and block-level HTML elements: **Block Tags** (create distinct DocItem boundaries): - `address`, `details`, `figure`, `footer` - `h1` through `h6` - `ol`, `ul`, `p`, `pre`, `summary`, `table` **Format Tags** (apply inline formatting): - `b`, `strong` → bold - `i`, `em`, `var` → italic - `s`, `del` → strikethrough - `u`, `ins` → underline - `sub` → subscript - `sup` → superscript - `code`, `kbd`, `samp` → code formatting ``` ``` **Sources:** [docling/backend/html\\_backend.py467-559](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L467-L559) [docling/backend/html\\_backend.py40-77](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L40-L77) ### List Handling The backend tracks list context to properly number ordered lists and handle nested structures: ``` ``` The `_Context` class maintains: - `list_ordered_flag_by_ref`: Tracks whether each list is ordered - `list_start_by_ref`: Tracks the starting number for ordered lists",
  "**Sources:** [docling/backend/html\\_backend.py80-83](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L80-L83) [docling/backend/html\\_backend.py913-1014](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L913-L1014) ### Table Processing HTML tables are converted to `TableItem` objects with support for both simple and rich cells: ``` ``` **Rich Table Cells** are created when: - A cell contains multiple document items (e.g., multiple paragraphs) - A cell contains non-text items (e.g., images, nested lists) The backend creates a `GroupItem` to contain all child elements and references this group from the `RichTableCell`. **Sources:** [docling/backend/html\\_backend.py1016-1132](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L1016-L1132) [docling/backend/html\\_backend.py294-349](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L294-L349) [docling/backend/html\\_backend.py351-465](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L351-L465) ### Formatting and Hyperlinks The backend tracks formatting and hyperlink context as it recursively walks the DOM tree: **Formatting Stack:** - Uses `self.format_tags: list[str]` to maintain active formatting - Format tags are pushed/popped using context managers - Combined into `Formatting` objects when creating text items **Hyperlink Context:** - Uses `self.hyperlink: Union[AnyUrl, Path, None]` to track current link - Handles relative URLs by joining with `original_url` - Falls back to `Path` for relative links that fail URL validation **Text Annotation Classes:** ``` ``` **Sources:** [docling/backend/html\\_backend.py85-181](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L85-L181) [docling/backend/html\\_backend.py573-580](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L573-L580) [docling/backend/html\\_backend.py662-684](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L662-L684) ### Image Handling Images are extracted from `<img>` tags and added as `PictureItem` objects: ``` ``` **Sources:** [docling/backend/html\\_backend.py1134-1218](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L1134-L1218) ### Heading Hierarchy The backend manages document hierarchy based on heading levels: 1. `<h1>` tags create level-1 `SectionHeaderItem` and reset parent hierarchy 2. `<h2>` through `<h6>` tags create nested section headers 3. The `self.level` counter tracks current hierarchy depth 4. The `self.parents` dictionary maintains parent references at each level ``` ``` **Sources:** [docling/backend/html\\_backend.py778-839](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L778-L839) [docling/backend/html\\_backend.py196-201](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L196-L201) ## Markdown and AsciiDoc Backends The Markdown and AsciiDoc backends follow similar patterns to the HTML backend but with format-specific parsers: **MarkdownDocumentBackend:** - Uses `marko` library for Markdown parsing - Converts Markdown AST to DoclingDocument structure - Handles CommonMark and extensions **AsciiDocBackend:** - Parses AsciiDoc markup format - Converts AsciiDoc structure to DoclingDocument - Preserves document structure and formatting Both backends: - Inherit from `DeclarativeDocumentBackend` - Use `SimplePipeline` for processing - Produce `DoclingDocument` output with hierarchical structure - Support the same content layer system (BODY/FURNITURE) **Sources:** [docling/document\\_converter.py92-99](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L92-L99) [docling/document\\_converter.py146-160](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L146-L160) ## Integration with SimplePipeline",
  "All web and markup backends use `SimplePipeline`, which provides: 1. **Direct conversion:** Calls `backend.convert()` to get `DoclingDocument` 2. **Optional enrichment:** Can apply picture classification and description models 3. **No page-level processing:** Unlike PDF pipelines, processes entire document at once ``` ``` **Configuration via CLI:** ``` ``` **Sources:** [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) [docling/cli/main.py670-697](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L670-L697) ## Testing and Ground Truth The test suite validates HTML backend functionality with multiple test cases: **Test Coverage:** - Heading level processing - Ordered/unordered lists with start attributes - Unicode character handling - Hyperlink extraction (including parent context) - Furniture vs body content layers - End-to-end conversions with ground truth validation **Ground Truth Structure:** - JSON files contain full `DoclingDocument` serialization - Markdown files contain exported markdown for comparison - `.itxt` files contain indented text representation for hierarchy validation **Sources:** [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py) [tests/data/groundtruth/docling\\_v2/](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Web and Markup Backends](#web-and-markup-backends.md) - [Purpose and Scope](#purpose-and-scope.md) - [Architecture Overview](#architecture-overview.md) - [Backend Configuration](#backend-configuration.md) - [Format Options](#format-options.md) - [MIME Type and Extension Detection](#mime-type-and-extension-detection.md) - [HTML Backend](#html-backend.md) - [Core Implementation](#core-implementation.md) - [Content Layer Management](#content-layer-management.md) - [Tag Processing Strategy](#tag-processing-strategy.md) - [List Handling](#list-handling.md) - [Table Processing](#table-processing.md) - [Formatting and Hyperlinks](#formatting-and-hyperlinks.md) - [Image Handling](#image-handling.md) - [Heading Hierarchy](#heading-hierarchy.md) - [Markdown and AsciiDoc Backends](#markdown-and-asciidoc-backends.md) - [Integration with SimplePipeline](#integration-with-simplepipeline.md) - [Testing and Ground Truth](#testing-and-ground-truth.md)",
  "DocumentExtractor API | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # DocumentExtractor API Relevant source files",
  "- [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py) - [docling/datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/api\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py) - [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) - [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py) - [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py) - [docling/models/vlm\\_models\\_inline/mlx\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/models/vlm\\_models\\_inline/vllm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) ## Purpose and Scope The `DocumentExtractor` API provides structured data extraction from documents using vision-language models (VLMs) with user-defined templates. Unlike the `DocumentConverter` API (see [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md)) which converts documents to unified `DoclingDocument` format, `DocumentExtractor` extracts specific structured data based on schemas or prompts, returning `ExtractionResult` objects containing parsed JSON or raw text. For details on the underlying extraction pipeline implementation, see [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md). For VLM model configuration, see [Vision Language Models](docling-project/docling/4.3-vision-language-models.md). **Sources:** [docling/document\\_extractor.py88-97](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L97) ## Core Architecture ### Class Hierarchy and Components ``` ``` **Diagram: DocumentExtractor Architecture** The `DocumentExtractor` class orchestrates extraction by mapping input formats to extraction pipelines through `ExtractionFormatOption` configurations. Each format option specifies both a pipeline class (defaulting to `ExtractionVlmPipeline`) and a backend for document reading (defaulting to `PyPdfiumDocumentBackend`).",
  "**Sources:** [docling/document\\_extractor.py88-120](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L120) [docling/document\\_extractor.py46-64](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L46-L64) [docling/datamodel/extraction.py1-40](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py#L1-L40) ### DocumentExtractor Class ``` ``` **Diagram: DocumentExtractor Class Structure** The `DocumentExtractor` maintains a cache of initialized pipelines keyed by `(pipeline_class, options_hash)` to avoid redundant model loading across documents with identical configurations. **Sources:** [docling/document\\_extractor.py88-120](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L120) [docling/document\\_extractor.py291-317](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L291-L317) ## API Methods ### extract() - Single Document Extraction ``` ``` **Diagram: extract() Method Flow** The `extract()` method is a convenience wrapper around `extract_all()` that returns a single result. It internally calls `extract_all()` with a single-item list and returns the first (and only) result via `next()`. **Sources:** [docling/document\\_extractor.py123-143](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L123-L143) [docling/document\\_extractor.py239-264](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L239-L264) ### extract\\_all() - Batch Extraction The `extract_all()` method processes multiple documents with optional concurrency: | Parameter | Type | Default | Description | | ----------------- | -------------------------------------------- | ------------------ | -------------------------------------------------- | | `source` | `Iterable[Union[Path, str, DocumentStream]]` | Required | Documents to extract from | | `template` | `ExtractionTemplateType` | Required | Extraction template (str, dict, or Pydantic model) | | `headers` | `Optional[Dict[str, str]]` | `None` | HTTP headers for remote documents | | `raises_on_error` | `bool` | `True` | Whether to raise on extraction failures | | `max_num_pages` | `int` | `sys.maxsize` | Maximum pages to process per document | | `max_file_size` | `int` | `sys.maxsize` | Maximum file size in bytes | | `page_range` | `PageRange` | `(1, sys.maxsize)` | Page range to extract | **Implementation Details:** - Reuses `_DocumentConversionInput` for format detection and backend initialization - Supports batch processing with configurable concurrency via `settings.perf.doc_batch_concurrency` - Uses `ThreadPoolExecutor` when `doc_batch_concurrency > 1` and `doc_batch_size > 1` - Pipeline caching prevents redundant model initialization **Sources:** [docling/document\\_extractor.py145-193](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L145-L193) [docling/document\\_extractor.py196-237](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L196-L237) ## Template Types and Serialization ### Template Type Hierarchy ``` ``` **Diagram: Template Type Serialization** The `_serialize_template()` method in `ExtractionVlmPipeline` handles four template types: 1. **String templates**: Passed directly as prompts 2. **Dict templates**: Serialized via `json.dumps(template, indent=2)` 3. **Pydantic instances**: Serialized via `template.model_dump_json(indent=2)` 4. **Pydantic classes**: Instantiated via `polyfactory.ModelFactory.build()` (using field examples and defaults), then serialized **Sources:** [docling/pipeline/extraction\\_vlm\\_pipeline.py173-193](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L173-L193) ### Template Serialization Example Flow ``` ``` **Diagram: Template Serialization Decision Tree** For Pydantic class templates, `polyfactory.ModelFactory` is configured with `__use_examples__=True` and `__use_defaults__=True` to prefer field examples over random values.",
  "**Sources:** [docling/pipeline/extraction\\_vlm\\_pipeline.py173-193](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L173-L193) ## ExtractionResult Data Model ### Result Structure ``` ``` **Diagram: ExtractionResult Class Hierarchy** The `ExtractionResult` structure mirrors `ConversionResult` but focuses on extracted data rather than document structure: - **`input`**: The `InputDocument` that was processed - **`status`**: Overall extraction status (SUCCESS, FAILURE, PARTIAL\\_SUCCESS) - **`errors`**: Document-level errors (empty list if successful) - **`pages`**: Per-page extraction results **Sources:** [docling/datamodel/extraction.py25-36](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py#L25-L36) ### ExtractedPageData Structure Each page in the `pages` list contains: | Field | Type | Description | | ---------------- | -------------------------- | ------------------------------------------------------ | | `page_no` | `int` | 1-indexed page number | | `extracted_data` | `Optional[Dict[str, Any]]` | Structured data parsed from VLM output (if valid JSON) | | `raw_text` | `Optional[str]` | Raw VLM output text (always populated) | | `errors` | `List[str]` | Page-specific extraction errors | The `extracted_data` field is populated only if the VLM output can be parsed as valid JSON. If JSON parsing fails, `extracted_data` is `None` and `raw_text` contains the unparsed output. **Sources:** [docling/datamodel/extraction.py11-23](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py#L11-L23) [docling/pipeline/extraction\\_vlm\\_pipeline.py84-98](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L84-L98) ## Pipeline Architecture ### Extraction Pipeline Hierarchy ``` ``` **Diagram: Extraction Pipeline Class Hierarchy** The `BaseExtractionPipeline` defines the extraction contract with three abstract methods: - `_extract_data()`: Populates `ExtractionResult.pages` and `errors` - `_determine_status()`: Returns `ConversionStatus` based on extraction results - `get_default_options()`: Returns default `PipelineOptions` **Sources:** [docling/pipeline/base\\_extraction\\_pipeline.py15-73](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L73) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-46](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L46) ### VLM Model Integration ``` ``` **Diagram: VLM Model Processing Flow** The `NuExtractTransformersModel` uses a specialized input format from the NuMind team: - Documents are passed as `{\"type\": \"image\", \"image\": PIL_Image}` - Templates are passed via the `template` parameter to `apply_chat_template()` - Vision info is processed via `qwen_vl_utils.process_vision_info()` **Sources:** [docling/pipeline/extraction\\_vlm\\_pipeline.py48-126](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L48-L126) [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py107-160](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L107-L160) [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py161-290](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L161-L290) ## Pipeline Caching Mechanism ### Cache Key Generation ``` ``` **Diagram: Pipeline Caching Strategy** The `_get_pipeline()` method caches pipelines using a composite key: 1. Pipeline class reference (e.g., `ExtractionVlmPipeline`) 2. MD5 hash of `pipeline_options.model_dump()` serialization This ensures that documents with identical configurations reuse the same pipeline instance (and loaded models), avoiding redundant initialization. **Thread Safety:** Pipeline retrieval is protected by `_PIPELINE_CACHE_LOCK` to prevent race conditions during concurrent document processing.",
  "**Sources:** [docling/document\\_extractor.py291-317](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L291-L317) [docling/document\\_extractor.py319-325](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L319-L325) ## Format Support and Backend Configuration ### Default Format Options ``` ``` **Diagram: Default Extraction Configuration** The `_get_default_extraction_option()` function defines default extraction configurations: - **PDF and Image formats**: Use `PyPdfiumDocumentBackend` for document reading - **Pipeline**: Always `ExtractionVlmPipeline` - **Model**: NuExtract-2.0-2B via `NuExtractTransformersModel` Users can override these defaults via the `extraction_format_options` parameter in `DocumentExtractor.__init__()`. **Experimental Status:** As of the current implementation, only PDF and Image formats are supported for extraction. The API warns users that it is experimental and may change. **Sources:** [docling/document\\_extractor.py66-85](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L66-L85) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-46](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L46) ## Error Handling and Status Determination ### Status Decision Tree ``` ``` **Diagram: Extraction Status Determination** The `_determine_status()` method in `ExtractionVlmPipeline` uses a simple rule: - **SUCCESS**: At least one page extracted AND no page errors - **FAILURE**: No pages extracted OR any page has errors Unlike `DocumentConverter`, extraction does not support `PARTIAL_SUCCESS` status—a document either fully succeeds or fails. **Sources:** [docling/pipeline/extraction\\_vlm\\_pipeline.py128-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L128-L133) ### Error Propagation ``` ``` **Diagram: Error Handling Flow** The `raises_on_error` parameter controls error behavior at multiple levels: 1. **Document level**: Invalid formats, missing pipelines 2. **Page level**: Image loading failures, VLM processing errors When `raises_on_error=False`, errors are captured in the `ExtractionResult` structure rather than raised as exceptions. **Sources:** [docling/document\\_extractor.py177-192](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L177-L192) [docling/pipeline/base\\_extraction\\_pipeline.py31-53](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L31-L53) [docling/pipeline/extraction\\_vlm\\_pipeline.py109-114](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L109-L114) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [DocumentExtractor API](#documentextractor-api.md) - [Purpose and Scope](#purpose-and-scope.md) - [Core Architecture](#core-architecture.md) - [Class Hierarchy and Components](#class-hierarchy-and-components.md) - [DocumentExtractor Class](#documentextractor-class.md) - [API Methods](#api-methods.md) - [extract() - Single Document Extraction](#extract---single-document-extraction.md) - [extract\\_all() - Batch Extraction](#extract_all---batch-extraction.md) - [Template Types and Serialization](#template-types-and-serialization.md) - [Template Type Hierarchy](#template-type-hierarchy.md) - [Template Serialization Example Flow](#template-serialization-example-flow.md) - [ExtractionResult Data Model](#extractionresult-data-model.md) - [Result Structure](#result-structure.md) - [ExtractedPageData Structure](#extractedpagedata-structure.md) - [Pipeline Architecture](#pipeline-architecture.md) - [Extraction Pipeline Hierarchy](#extraction-pipeline-hierarchy.md) - [VLM Model Integration](#vlm-model-integration.md) - [Pipeline Caching Mechanism](#pipeline-caching-mechanism.md) - [Cache Key Generation](#cache-key-generation.md) - [Format Support and Backend Configuration](#format-support-and-backend-configuration.md) - [Default Format Options](#default-format-options.md) - [Error Handling and Status Determination](#error-handling-and-status-determination.md) - [Status Decision Tree](#status-decision-tree.md) - [Error Propagation](#error-propagation.md)",
  "Enrichment Models | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Enrichment Models Relevant source files",
  "- [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py) ## Purpose and Scope Enrichment Models operate on assembled document items after the initial extraction and layout analysis phases. They enhance document elements with additional information such as LaTeX formulas, code snippets with language detection, picture classifications, and image captions. Unlike page-level models (see [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md)), enrichment models process individual document items (text blocks, code blocks, pictures) along with their cropped images. This page documents the three main types of enrichment models: - **CodeFormulaModel**: Extracts LaTeX formulas and code with language detection - **DocumentPictureClassifier**: Classifies pictures into 16 semantic categories - **PictureDescriptionVlmModel**: Generates natural language descriptions of images For VLM-based document processing that operates at the page level, see [Vision Language Models](docling-project/docling/4.3-vision-language-models.md). For the pipeline execution flow that includes enrichment, see [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md). --- ## Enrichment Architecture ### Processing Flow Enrichment models are invoked during the `_enrich_document` phase of the pipeline, after document assembly is complete. They process items in batches, receiving both the document item and its cropped image. **Diagram: Enrichment Processing Flow** ``` ``` Sources: [docling/pipeline/base\\_pipeline.py177-206](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L177-L206) [docling/pipeline/standard\\_pdf\\_pipeline.py77-90](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L77-L90) --- ### Base Class Interface All enrichment models inherit from `BaseItemAndImageEnrichmentModel`, which defines the standard interface for item-level processing. **Diagram: Enrichment Model Class Hierarchy** ``` ```",
  "Sources: [docling/models/base\\_model.py67-113](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L67-L113) [docling/models/code\\_formula\\_model.py45-66](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L45-L66) [docling/models/document\\_picture\\_classifier.py36-60](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L36-L60) [docling/models/picture\\_description\\_vlm\\_model.py24-46](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L24-L46) --- ### Item and Image Element Structure Enrichment models receive `ItemAndImageEnrichmentElement` objects that bundle the document item with its cropped image and bounding box information. | Field | Type | Description | | ------------ | --------------------------- | --------------------------------------------------- | | `item` | `NodeItem` | The document item (CodeItem, TextItem, PictureItem) | | `image` | `Image.Image \\| np.ndarray` | Cropped image of the item | | `page_image` | `Image.Image` | Full page image (for context) | | `bbox` | `BoundingBox` | Item's bounding box on the page | | `page_no` | `int` | Page number containing the item | Sources: [docling/datamodel/base\\_models.py285-294](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L285-L294) --- ## Code and Formula Enrichment ### CodeFormulaModel The `CodeFormulaModel` processes code blocks and formula elements to extract structured representations. It uses a vision-language model fine-tuned for converting images of code and formulas into their text representations. **Model Details:** | Attribute | Value | Purpose | | ---------------- | ----------------------------- | ---------------------------- | | Repository | `ds4sd/CodeFormulaV2` | Hugging Face model ID | | Model Type | `AutoModelForImageTextToText` | Florence-based architecture | | Batch Size | `5` | Elements processed per batch | | Image Scale | `1.67` (120 DPI) | Resolution for image input | | Expansion Factor | `0.18` | Bounding box expansion (18%) | Sources: [docling/models/code\\_formula\\_model.py68-72](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L68-L72) --- ### Processing Logic **Diagram: CodeFormulaModel Processing Pipeline** ``` ``` Sources: [docling/models/code\\_formula\\_model.py277-337](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L277-L337) --- ### Code Language Detection The model outputs code with a language prefix in the format `<_language_>`. The `_extract_code_language` method extracts this information: **Pattern:** `^<_([^_>]+)_>\\s*(.*)` **Example Output:** - Input: `<_python_>def main():\\n print(\"Hello\")` - Extracted Language: `python` - Remainder: `def main():\\n print(\"Hello\")` The language string is then converted to a `CodeLanguageLabel` enum member. If the language is unrecognized or missing, it defaults to `CodeLanguageLabel.UNKNOWN`. Sources: [docling/models/code\\_formula\\_model.py156-206](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L156-L206) --- ### Formula Extraction For formula elements (identified by `DocItemLabel.FORMULA`), the model extracts LaTeX representations: **Example:** - Input: Image of mathematical formula - Output: `E = mc^2` The extracted LaTeX is stored in the `TextItem.text` field, replacing any placeholder text from layout analysis. Sources: [docling/models/code\\_formula\\_model.py208-245](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L208-L245) --- ## Picture Classification ### DocumentPictureClassifier The `DocumentPictureClassifier` categorizes picture elements into semantic classes such as charts, diagrams, photographs, and maps. **Model Details:**",
  "| Attribute | Value | | ----------------- | -------------------------------- | | Repository | `ds4sd/DocumentFigureClassifier` | | Revision | `v1.0.1` | | Image Scale | `2` (144 DPI) | | Number of Classes | `16` | | Output Type | `PictureClassificationData` | Sources: [docling/models/document\\_picture\\_classifier.py62-105](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L62-L105) --- ### Classification Classes The classifier predicts probabilities for 16 figure types. Results are sorted by confidence in descending order. **Common Classification Classes:** - `bar_chart` - `line_chart` - `pie_chart` - `scatter_plot` - `map` - `photograph` - `diagram` - `flowchart` - `table` (visual table representation) - `equation` - `schematic` - `illustration` Sources: [tests/test\\_document\\_picture\\_classifier.py54-79](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py#L54-L79) --- ### Output Structure **Diagram: PictureClassificationData Structure** ``` ``` **Example:** ``` ``` Sources: [docling/models/document\\_picture\\_classifier.py136-185](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L136-L185) [tests/test\\_document\\_picture\\_classifier.py47-64](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py#L47-L64) --- ## Picture Description ### PictureDescriptionVlmModel The `PictureDescriptionVlmModel` generates natural language descriptions of images using vision-language models. It supports multiple VLM backends and custom prompts. **Supported Models:** | Model Name | Repository | Use Case | | -------------- | -------------------------------------- | ----------------------- | | SmolVLM | `HuggingFaceTB/SmolVLM2-1.7B-Instruct` | Lightweight description | | Granite Vision | `ibm-granite/granite-vision-3.1-2b` | IBM Granite family | | Custom VLM | User-specified | Any compatible VLM | Sources: [docling/datamodel/pipeline\\_options.py416-438](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L416-L438) [docling/models/picture\\_description\\_vlm\\_model.py24-81](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L24-L81) --- ### Description Generation **Diagram: Picture Description Pipeline** ``` ``` Sources: [docling/models/picture\\_description\\_vlm\\_model.py82-116](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L82-L116) --- ### Custom Prompts The `PictureDescriptionVlmOptions` allows customization of the description prompt: **Default Configuration:** ``` ``` **Message Format:** ``` ``` Sources: [docling/models/picture\\_description\\_vlm\\_model.py86-103](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L86-L103) [docling/datamodel/pipeline\\_options.py416-438](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L416-L438) --- ### API-Based Picture Description The `PictureDescriptionApiModel` provides an alternative that uses OpenAI-compatible APIs instead of local model inference. **Configuration:** ``` ``` Sources: [docling/models/picture\\_description\\_api\\_model.py1-100](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_api_model.py#L1-L100) [docling/datamodel/pipeline\\_options.py441-466](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L441-L466) --- ## Configuration ### Pipeline Options Enrichment models are configured through `PdfPipelineOptions`: **Configuration Table:**",
  "| Option | Type | Default | Description | | ----------------------------- | ------- | ------- | ----------------------------- | | `do_code_enrichment` | `bool` | `False` | Enable code extraction | | `do_formula_enrichment` | `bool` | `False` | Enable formula extraction | | `do_picture_classification` | `bool` | `False` | Enable picture classification | | `do_picture_description` | `bool` | `False` | Enable picture description | | `picture_description_options` | Options | `None` | VLM or API configuration | **Example Configuration:** ``` ``` Sources: [docling/pipeline/standard\\_pdf\\_pipeline.py77-98](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L77-L98) [docling/datamodel/pipeline\\_options.py184-204](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L184-L204) --- ### Model Downloading Enrichment models are downloaded from Hugging Face using the `download_models` utility: **CLI Command:** ``` ``` **Programmatic Download:** ``` ``` **Downloaded Artifacts:** | Model | Folder | Size | | ------------------------- | --------------------------------------- | -------- | | CodeFormulaModel | `ds4sd--CodeFormulaV2` | \\~6 GB | | DocumentPictureClassifier | `ds4sd--DocumentFigureClassifier` | \\~500 MB | | SmolVLM | `HuggingFaceTB--SmolVLM2-1.7B-Instruct` | \\~3.5 GB | Sources: [docling/utils/model\\_downloader.py30-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L158) [docling/cli/models.py30-50](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L30-L50) --- ## Integration with Pipeline ### Enrichment Pipe Construction The `StandardPdfPipeline` constructs the enrichment pipeline by prepending the `CodeFormulaModel` to inherited enrichment models: **File:** [docling/pipeline/standard\\_pdf\\_pipeline.py77-90](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L77-L90) ``` ``` Sources: [docling/pipeline/standard\\_pdf\\_pipeline.py77-90](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L77-L90) --- ### Execution Flow in ConvertPipeline The `ConvertPipeline` base class implements the `_enrich_document` method that orchestrates enrichment processing: **Diagram: Enrichment Execution in ConvertPipeline** ``` ``` Sources: [docling/pipeline/base\\_pipeline.py177-206](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L177-L206) --- ### Image Scaling and Cropping Enrichment models specify their required image resolution through `images_scale` and bounding box expansion through `expansion_factor`: **Scaling Calculation:** ``` ``` **Scaling Values by Model:** | Model | `images_scale` | `expansion_factor` | Effective DPI | | -------------------------- | -------------- | ------------------ | ------------- | | CodeFormulaModel | 1.67 | 0.18 | 120 DPI | | DocumentPictureClassifier | 2.0 | 0.0 | 144 DPI | | PictureDescriptionVlmModel | 1.0 | 0.0 | 72 DPI | Sources: [docling/models/code\\_formula\\_model.py70-71](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L70-L71) [docling/models/document\\_picture\\_classifier.py63](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L63-L63) [docling/pipeline/base\\_pipeline.py177-206](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L177-L206) --- ### Backend Retention for Enrichment When enrichment models are enabled, the pipeline retains the document backend after assembly to support image cropping:",
  "**File:** [docling/pipeline/standard\\_pdf\\_pipeline.py92-98](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L92-L98) ``` ``` This ensures that page images remain accessible during the enrichment phase, allowing models to crop item-specific regions from the full page images. Sources: [docling/pipeline/standard\\_pdf\\_pipeline.py92-98](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L92-L98) --- ## Plugin System for Enrichment Enrichment models are discoverable through the plugin system using Python entry points. The `docling_defaults` entry point provides default enrichment implementations: **File:** [docling/models/plugins/defaults.py21-30](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py#L21-L30) ``` ``` This allows third-party packages to register additional enrichment models by defining their own entry points. Sources: [docling/models/plugins/defaults.py21-30](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py#L21-L30) [docling/models/factories.py1-50](https://github.com/docling-project/docling/blob/f7244a43/docling/models/factories.py#L1-L50) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Enrichment Models](#enrichment-models.md) - [Purpose and Scope](#purpose-and-scope.md) - [Enrichment Architecture](#enrichment-architecture.md) - [Processing Flow](#processing-flow.md) - [Base Class Interface](#base-class-interface.md) - [Item and Image Element Structure](#item-and-image-element-structure.md) - [Code and Formula Enrichment](#code-and-formula-enrichment.md) - [CodeFormulaModel](#codeformulamodel.md) - [Processing Logic](#processing-logic.md) - [Code Language Detection](#code-language-detection.md) - [Formula Extraction](#formula-extraction.md) - [Picture Classification](#picture-classification.md) - [DocumentPictureClassifier](#documentpictureclassifier.md) - [Classification Classes](#classification-classes.md) - [Output Structure](#output-structure.md) - [Picture Description](#picture-description.md) - [PictureDescriptionVlmModel](#picturedescriptionvlmmodel.md) - [Description Generation](#description-generation.md) - [Custom Prompts](#custom-prompts.md) - [API-Based Picture Description](#api-based-picture-description.md) - [Configuration](#configuration.md) - [Pipeline Options](#pipeline-options.md) - [Model Downloading](#model-downloading.md) - [Integration with Pipeline](#integration-with-pipeline.md) - [Enrichment Pipe Construction](#enrichment-pipe-construction.md) - [Execution Flow in ConvertPipeline](#execution-flow-in-convertpipeline.md) - [Image Scaling and Cropping](#image-scaling-and-cropping.md) - [Backend Retention for Enrichment](#backend-retention-for-enrichment.md) - [Plugin System for Enrichment](#plugin-system-for-enrichment.md)",
  "API-Based VLM Models | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # API-Based VLM Models Relevant source files",
  "- [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py) - [docling/datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/api\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py) - [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) - [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py) - [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py) - [docling/models/vlm\\_models\\_inline/mlx\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/models/vlm\\_models\\_inline/vllm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) ## Purpose and Scope This page documents the API-based Vision Language Model (VLM) integration in Docling, which enables document processing using external VLM services via OpenAI-compatible HTTP APIs. API-based models connect to remote inference servers (e.g., Ollama, vLLM server, OpenAI) rather than loading models locally. For locally-executed VLM models using Transformers, MLX, or vLLM frameworks, see [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md). For the broader VLM system architecture and pipeline integration, see [Vision Language Models](docling-project/docling/4.3-vision-language-models.md). API-based models are configured through `ApiVlmOptions` and executed by the `ApiVlmModel` class, which provides threaded request handling, streaming support, and early-abort capabilities through custom stopping criteria. **Sources:** [docling/models/api\\_vlm\\_model.py1-102](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L1-L102) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py96-112](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L96-L112) --- ## System Architecture ``` ``` **Diagram: API-Based VLM Model Architecture**",
  "The architecture separates configuration (`ApiVlmOptions`), execution (`ApiVlmModel`), and HTTP communication (`api_image_request` functions). The `ThreadPoolExecutor` enables concurrent processing of page batches, while the streaming path supports early termination via `GenerationStopper` instances. **Sources:** [docling/models/api\\_vlm\\_model.py19-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L19-L101) [docling/pipeline/vlm\\_pipeline.py66-73](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L66-L73) --- ## Configuration: ApiVlmOptions The `ApiVlmOptions` class defines all parameters for connecting to and configuring an external VLM API: | Field | Type | Default | Description | | -------------------------- | ------------------------------ | -------------------------------------------- | ------------------------------------------------ | | `kind` | `Literal[\"api_model_options\"]` | `\"api_model_options\"` | Discriminator for option type | | `url` | `AnyUrl` | `http://localhost:11434/v1/chat/completions` | API endpoint URL (OpenAI-compatible) | | `headers` | `Dict[str, str]` | `{}` | HTTP headers (e.g., authorization) | | `params` | `Dict[str, Any]` | `{}` | Model-specific parameters (e.g., `model` name) | | `timeout` | `float` | `60` | Request timeout in seconds | | `concurrency` | `int` | `1` | Number of concurrent page requests | | `response_format` | `ResponseFormat` | — | Expected response format (DOCTAGS/Markdown/HTML) | | `prompt` | `str` | — | User prompt template | | `scale` | `float` | `2.0` | Image scaling factor | | `max_size` | `Optional[int]` | `None` | Maximum image dimension | | `temperature` | `float` | `0.0` | Generation temperature | | `stop_strings` | `List[str]` | `[]` | Stop string tokens | | `custom_stopping_criteria` | `List[GenerationStopper]` | `[]` | Early-abort logic instances | **Key Configuration Patterns:** ``` ``` The `url` must point to an OpenAI-compatible `/v1/chat/completions` endpoint. The `params` dict is merged with runtime temperature settings and passed as the request body. The `concurrency` parameter controls the `ThreadPoolExecutor` worker count. **Sources:** [docling/datamodel/pipeline\\_options\\_vlm\\_model.py96-112](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L96-L112) [docling/datamodel/vlm\\_model\\_specs.py171-179](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L171-L179) --- ## Request Flow Sequence ``` ``` **Diagram: API VLM Request Flow** The `ApiVlmModel.__call__` method uses `ThreadPoolExecutor.map` to process pages concurrently. Each worker thread executes `_vlm_request`, which retrieves the page image, formats the prompt, and makes an HTTP request. If custom stopping criteria are configured, the streaming path (`api_image_request_streaming`) is used to enable early termination. **Sources:** [docling/models/api\\_vlm\\_model.py43-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L43-L101) --- ## ApiVlmModel Implementation ### Class Structure The `ApiVlmModel` class implements `BasePageModel` and orchestrates API-based inference: ``` ``` **Initialization Validation:** The constructor enforces the `enable_remote_services` flag to prevent accidental external connections: ``` ``` This safety check requires explicit opt-in at the pipeline level before API requests are allowed. **Sources:** [docling/models/api\\_vlm\\_model.py20-41](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L20-L41) ### Request Execution Pattern The `_vlm_request` helper function processes a single page:",
  "1. **Validation:** Check `page._backend.is_valid()` 2. **Image Extraction:** Call `page.get_image(scale, max_size)` and convert to RGB 3. **Prompt Construction:** Use `vlm_options.build_prompt(page.parsed_page)` 4. **Stopping Criteria Processing:** Instantiate any `GenerationStopper` classes 5. **API Call:** Route to streaming or non-streaming based on `custom_stopping_criteria` 6. **Response Decoding:** Apply `vlm_options.decode_response()` 7. **Result Attachment:** Set `page.predictions.vlm_response` **Concurrency Control:** ``` ``` The executor processes up to `concurrency` pages in parallel, with each thread making independent HTTP requests. This is essential for throughput when processing large documents. **Sources:** [docling/models/api\\_vlm\\_model.py43-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L43-L101) --- ## Streaming and Early Abort ### Streaming Request Flow When `custom_stopping_criteria` is non-empty, the model uses the streaming API path: ``` ``` ### GenerationStopper Interface The `GenerationStopper` protocol enables custom early-abort logic: ``` ``` Streaming requests check `should_stop()` after each token chunk arrives. This allows stopping generation when: - A specific pattern is detected (e.g., closing XML tag) - A confidence threshold is crossed - A maximum content length is reached **Sources:** [docling/models/api\\_vlm\\_model.py63-97](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L63-L97) --- ## Pipeline Integration ### VlmPipeline Instantiation The `VlmPipeline` detects `ApiVlmOptions` and instantiates `ApiVlmModel`: ``` ``` This is the sole model in the `build_pipe` list, as API-based inference is end-to-end (no separate OCR, layout, or table models). **Sources:** [docling/pipeline/vlm\\_pipeline.py66-73](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L66-L73) ### Page Processing The pipeline's `initialize_page` method loads page backends, then `_apply_on_pages` iterates the `build_pipe`: ``` ``` For `ApiVlmModel`, the `__call__` method internally uses the thread pool, so the outer iteration is straightforward. The model modifies `page.predictions.vlm_response` in-place and yields the updated pages. **Sources:** [docling/pipeline/base\\_pipeline.py189-195](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L189-L195) --- ## Predefined API Configurations The `docling/datamodel/vlm_model_specs.py` module provides ready-to-use configurations: ### GRANITE\\_VISION\\_OLLAMA ``` ``` This configuration targets a local Ollama server running the Granite Vision model. The `scale=1.0` uses original image resolution, and `timeout=120` allows longer processing for complex pages. **Usage Pattern:** ``` ``` **Sources:** [docling/datamodel/vlm\\_model\\_specs.py171-179](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L171-L179) --- ## API Request Format ### OpenAI Chat Completions Schema The API client sends requests to the `/v1/chat/completions` endpoint using the OpenAI-compatible schema: ``` ``` The image is base64-encoded and included as a data URL. Additional parameters from `ApiVlmOptions.params` are merged into the request body. ### Response Parsing **Non-Streaming Response:** ``` ``` The `api_image_request` function extracts `choices[0].message.content`. **Streaming Response:** Server-Sent Events (SSE) format: ``` data: {\"choices\": [{\"delta\": {\"content\": \"# \"}}]} data: {\"choices\": [{\"delta\": {\"content\": \"Document\"}}]} data: [DONE] ``` The `api_image_request_streaming` function accumulates chunks until a stopper triggers or the stream completes. **Sources:** [docling/models/api\\_vlm\\_model.py76-97](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L76-L97) --- ## Error Handling and Timeout ### Request-Level Timeouts Each API request respects the `timeout` parameter: ``` ```",
  "If the server doesn't respond within `timeout` seconds, the request raises a timeout exception, which is caught by the pipeline's error handling. ### Backend Validation Before making API requests, the model validates the page backend: ``` ``` Invalid pages (e.g., corrupted PDFs) are returned unchanged, preventing unnecessary API calls. ### Remote Services Flag The `enable_remote_services` flag provides a safety gate: ``` ``` This prevents accidental API calls in environments where external connections are forbidden or should be audited. **Sources:** [docling/models/api\\_vlm\\_model.py28-49](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L28-L49) --- ## Comparison with Inline VLM Models | Aspect | API-Based Models | Inline Models | | --------------------- | --------------------------------------- | ------------------------------------------------------------------------ | | **Execution** | Remote HTTP API | Local model loading (Transformers/MLX/vLLM) | | **Configuration** | `ApiVlmOptions` | `InlineVlmOptions` | | **Model Class** | `ApiVlmModel` | `HuggingFaceTransformersVlmModel`, `HuggingFaceMlxModel`, `VllmVlmModel` | | **Dependencies** | HTTP client only | `transformers`, `torch`, `mlx`, `vllm` | | **Concurrency** | `ThreadPoolExecutor` (I/O bound) | Model batching (compute bound) | | **Device** | N/A (server-side) | CPU/CUDA/MPS | | **Artifacts** | None (server manages) | Downloaded to `artifacts_path` | | **Stopping Criteria** | `GenerationStopper` (streaming only) | `StoppingCriteria` + `GenerationStopper` | | **Use Case** | Distributed inference, limited hardware | Local control, offline operation | **Sources:** [docling/models/api\\_vlm\\_model.py19-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L19-L101) [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py36-376](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py#L36-L376) --- ## Example: Custom Stopping Criteria ### Implementing a GenerationStopper ``` ``` ### Configuration with Stopper ``` ``` When configured, the streaming API path is automatically selected, and generation terminates as soon as `</doctag>` appears in the output, saving tokens and reducing latency. **Sources:** [docling/models/api\\_vlm\\_model.py63-74](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L63-L74) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py110-112](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L110-L112) --- ## Performance Considerations ### Concurrency Tuning The `concurrency` parameter controls parallel requests: - **Low concurrency (1-2):** Sequential processing, minimal server load - **Medium concurrency (4-8):** Balanced throughput for typical documents - **High concurrency (16+):** Maximum speed for large batches, requires server capacity Optimal settings depend on: 1. Server capacity (GPU count, batch size) 2. Network latency and bandwidth 3. Document complexity (larger images = longer inference) ### Timeout Configuration Appropriate timeout values vary by model and document type: - **Simple text extraction:** 30-60 seconds - **Complex documents (tables, figures):** 120-300 seconds - **Large images (high resolution):** 300+ seconds Insufficient timeouts cause false failures; excessive timeouts delay error detection. **Sources:** [docling/models/api\\_vlm\\_model.py36-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py#L36-L101) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [API-Based VLM Models](#api-based-vlm-models.md) - [Purpose and Scope](#purpose-and-scope.md) - [System Architecture](#system-architecture.md) - [Configuration: ApiVlmOptions](#configuration-apivlmoptions.md) - [Request Flow Sequence](#request-flow-sequence.md) - [ApiVlmModel Implementation](#apivlmmodel-implementation.md) - [Class Structure](#class-structure.md) - [Request Execution Pattern](#request-execution-pattern.md) - [Streaming and Early Abort](#streaming-and-early-abort.md) - [Streaming Request Flow](#streaming-request-flow.md) - [GenerationStopper Interface](#generationstopper-interface.md) - [Pipeline Integration](#pipeline-integration.md) - [VlmPipeline Instantiation](#vlmpipeline-instantiation.md) - [Page Processing](#page-processing.md) - [Predefined API Configurations](#predefined-api-configurations.md) - [GRANITE\\_VISION\\_OLLAMA](#granite_vision_ollama.md) - [API Request Format](#api-request-format.md) - [OpenAI Chat Completions Schema](#openai-chat-completions-schema.md) - [Response Parsing](#response-parsing.md) - [Error Handling and Timeout](#error-handling-and-timeout.md) - [Request-Level Timeouts](#request-level-timeouts.md) - [Backend Validation](#backend-validation.md) - [Remote Services Flag](#remote-services-flag.md) - [Comparison with Inline VLM Models](#comparison-with-inline-vlm-models.md) - [Example: Custom Stopping Criteria](#example-custom-stopping-criteria.md) - [Implementing a GenerationStopper](#implementing-a-generationstopper.md) - [Configuration with Stopper](#configuration-with-stopper.md) - [Performance Considerations](#performance-considerations.md) - [Concurrency Tuning](#concurrency-tuning.md) - [Timeout Configuration](#timeout-configuration.md)",
  "Document Conversion Flow | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Document Conversion Flow Relevant source files",
  "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) This document describes the end-to-end process of converting an input document to a structured `DoclingDocument` representation. It covers format detection, backend/pipeline routing, the three-phase execution model, and output generation. For configuration of pipeline options and format-specific settings, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md). For details on the `DoclingDocument` data structure, see [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md). For backend implementations, see [Document Backends](docling-project/docling/3-document-backends.md). --- ## Overview The document conversion flow orchestrates multiple components to transform raw documents (PDF, DOCX, HTML, etc.) into structured `DoclingDocument` objects. The process follows these stages: 1. **Input Processing**: Format detection and `InputDocument` creation 2. **Routing**: Backend and pipeline selection based on format 3. **Pipeline Execution**: Three-phase processing (build, assemble, enrich) 4. **Output Generation**: `ConversionResult` with embedded `DoclingDocument` The central orchestrator is `DocumentConverter`, which manages format-to-pipeline mappings, pipeline caching, and execution. --- ## Entry Points and Initialization ### DocumentConverter Initialization The `DocumentConverter` class serves as the primary entry point for document conversion: ``` ``` **Key responsibilities:** - Maintain `format_to_options` mapping: `Dict[InputFormat, FormatOption]` - Cache initialized pipelines: `Dict[Tuple[Type[BasePipeline], str], BasePipeline]` - Coordinate batch processing with concurrency control **Entry Point Diagram** ``` ``` **Sources:** [docling/document\\_converter.py184-205](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L205) [docling/cli/main.py299-816](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L299-L816) ### Conversion Methods The API provides two methods:",
  "| Method | Description | Return Type | | --------------------- | -------------------------- | ---------------------------- | | `convert(source)` | Convert single document | `ConversionResult` | | `convert_all(source)` | Convert multiple documents | `Iterator[ConversionResult]` | Both methods accept: - `source`: `Path`, `str` (URL), or `DocumentStream` (BytesIO) - `headers`: Optional HTTP headers for URL sources - `raises_on_error`: Control error propagation - `max_num_pages`, `max_file_size`: Document limits - `page_range`: Tuple of (start\\_page, end\\_page) **Sources:** [docling/document\\_converter.py228-283](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L228-L283) --- ## Format Detection and Input Processing ### Format Detection Mechanism Format detection is handled by `_DocumentConversionInput._guess_format()`, which uses a three-tier strategy: #### Format Detection Strategy ``` ``` **Sources:** [docling/datamodel/document.py280-489](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L280-L489) #### Tier 1: MIME Type Detection Uses `filetype.guess_mime()` on file path or first 8KB of stream: - For `Path`: Reads file signature - For `DocumentStream`: Reads first 8KB, seeks back to 0 Special cases: - `application/zip` → Infer DOCX/XLSX/PPTX from file extension - `application/gzip` → Check for METS metadata via `_detect_mets_gbs()` **Sources:** [docling/datamodel/document.py285-323](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L285-L323) #### Tier 2: Extension Mapping If MIME detection fails, use extension-based lookup: ``` ``` Mappings defined in `FormatToMimeType` dictionary. **Sources:** [docling/datamodel/document.py376-400](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L376-L400) [docling/datamodel/base\\_models.py101-133](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L101-L133) #### Tier 3: Content Analysis For ambiguous formats (e.g., `application/xml`), parse DOCTYPE declarations: | DOCTYPE Pattern | Format | | ------------------------------------------ | ----------------------- | | `us-patent-application-v4`, `us-grant-025` | `InputFormat.XML_USPTO` | | `JATS-journalpublishing`, `JATS-archive` | `InputFormat.XML_JATS` | | `PATN\\r\\n` (plain text) | `InputFormat.XML_USPTO` | **Sources:** [docling/datamodel/document.py341-374](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L341-L374) ### InputDocument Creation Once format is detected, `_DocumentConversionInput.docs()` creates `InputDocument` instances: **InputDocument Creation Flow** ``` ``` **Key validation checks:** - File size ≤ `limits.max_file_size` - Page count ≤ `limits.max_num_pages` - Page range within bounds: `limits.page_range` - Backend validity: `backend.is_valid()` If any check fails, `InputDocument.valid = False`. **Sources:** [docling/datamodel/document.py104-191](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L104-L191) [docling/datamodel/document.py236-278](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L236-L278) --- ## Backend and Pipeline Routing ### FormatOption Mapping The routing mechanism uses `FormatOption` objects that pair formats with pipelines and backends: **FormatOption Structure** ``` ``` **Sources:** [docling/document\\_converter.py62-130](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L62-L130) ### Default Format Options Default mappings are defined in `_get_default_option()`:",
  "| InputFormat | Pipeline | Backend | | ----------- | --------------------- | ------------------------------- | | `PDF` | `StandardPdfPipeline` | `DoclingParseV4DocumentBackend` | | `IMAGE` | `StandardPdfPipeline` | `DoclingParseV4DocumentBackend` | | `DOCX` | `SimplePipeline` | `MsWordDocumentBackend` | | `XLSX` | `SimplePipeline` | `MsExcelDocumentBackend` | | `PPTX` | `SimplePipeline` | `MsPowerpointDocumentBackend` | | `HTML` | `SimplePipeline` | `HTMLDocumentBackend` | | `MD` | `SimplePipeline` | `MarkdownDocumentBackend` | | `AUDIO` | `AsrPipeline` | `NoOpBackend` | **Sources:** [docling/document\\_converter.py132-182](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L132-L182) ### Pipeline Selection and Caching Pipelines are cached by `(pipeline_class, options_hash)` to avoid redundant initialization: **Pipeline Caching Flow** ``` ``` **Cache key construction:** 1. Serialize `pipeline_options.model_dump()` to string 2. Compute MD5 hash: `hashlib.md5(options_str.encode(\"utf-8\"))` 3. Create tuple: `(pipeline_class, options_hash)` This ensures: - Same pipeline class + options → Same pipeline instance - Thread-safe via `_PIPELINE_CACHE_LOCK` - Models loaded only once per unique configuration **Sources:** [docling/document\\_converter.py207-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L207-L378) --- ## Pipeline Execution Phases All pipelines inherit from `BasePipeline` and implement a three-phase execution model: **Three-Phase Execution Model** ``` ``` **Sources:** [docling/pipeline/base\\_pipeline.py62-123](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L123) ### Phase 1: Build Document (\\_build\\_document) Abstract method implemented by each pipeline. Responsibilities: - Load document pages/content from backend - Apply models (OCR, layout, tables) to extract structure - Populate `ConversionResult.pages` with predictions **Examples:** - **PaginatedPipeline**: Iterate pages, apply sequential models via `build_pipe` - **SimplePipeline**: Call `backend.convert()` directly to get `DoclingDocument` - **VlmPipeline**: Generate page images, run VLM model for predictions - **AsrPipeline**: Transcribe audio, create text-based document **Sources:** [docling/pipeline/base\\_pipeline.py86-88](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L86-L88) [docling/pipeline/simple\\_pipeline.py26-41](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L26-L41) ### Phase 2: Assemble Document (\\_assemble\\_document) Constructs the hierarchical `DoclingDocument` from page-level predictions: **Assembly Process (PaginatedPipeline Example)** ``` ``` **Key operations:** - Convert page-level `Cluster`, `Table`, `FigureElement` to `DocItem` hierarchy - Assign provenance metadata (page numbers, bounding boxes) - Generate cropped images for `PictureItem`, `TableItem` if requested - Clear page backends/caches if not needed downstream **Sources:** [docling/pipeline/base\\_pipeline.py90-91](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L90-L91) ### Phase 3: Enrich Document (\\_enrich\\_document) Applies enrichment models to individual `NodeItem` elements in the `DoclingDocument`: **Enrichment Pipeline Flow** ``` ``` **Common enrichment models:** - `CodeFormulaModel`: Extract LaTeX from code/formula images - `DocumentPictureClassifier`: Classify picture types - `PictureDescriptionVlmModel`: Generate image captions **Sources:** [docling/pipeline/base\\_pipeline.py93-115](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L93-L115) [docling/pipeline/base\\_pipeline.py135-177](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L135-L177) --- ## Complete Conversion Flow Sequence The following diagram shows the complete end-to-end flow with all components:",
  "**End-to-End Document Conversion Sequence** ``` ``` **Sources:** [docling/document\\_converter.py313-432](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L313-L432) [docling/pipeline/base\\_pipeline.py62-123](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L123) --- ## Output Generation ### ConversionResult Structure The `ConversionResult` object encapsulates all conversion outputs: | Field | Type | Description | | ------------ | -------------------------- | ----------------------------------------------- | | `input` | `InputDocument` | Original input metadata | | `status` | `ConversionStatus` | `SUCCESS`, `FAILURE`, `PARTIAL_SUCCESS` | | `errors` | `List[ErrorItem]` | Error details per component | | `pages` | `List[Page]` | Page-level data (may be cleared after assembly) | | `document` | `DoclingDocument` | Final structured document | | `timings` | `Dict[str, ProfilingItem]` | Performance metrics | | `confidence` | `ConfidenceReport` | Quality scores per page/model | **Sources:** [docling/datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L215) ### Export Formats The `DoclingDocument` can be exported to multiple formats: **Export Method Overview** ``` ``` **Export options:** - `image_mode`: `PLACEHOLDER`, `EMBEDDED` (base64), `REFERENCED` (separate PNG files) - `strict_text`: Strip all formatting (for Markdown) - `split_page_view`: Separate HTML page per document page **Sources:** [docling/cli/main.py191-289](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L191-L289) ### Status Determination The `_determine_status()` method evaluates conversion success: **Status Resolution Logic** ``` ``` **Implementation varies by pipeline:** - **PaginatedPipeline**: Check each page backend validity - **SimplePipeline**: Return `SUCCESS` if no exceptions raised - **AsrPipeline**: Check transcription success **Sources:** [docling/pipeline/base\\_pipeline.py118-119](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L118-L119) [docling/pipeline/base\\_pipeline.py295-314](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L295-L314) --- ## Batch Processing and Concurrency The `DocumentConverter` supports concurrent document processing: **Batch Processing Configuration** | Setting | Environment Variable | Default | Description | | ----------------------- | ------------------------------- | ------- | ------------------------ | | `doc_batch_size` | `DOCLING_DOC_BATCH_SIZE` | 10 | Documents per batch | | `doc_batch_concurrency` | `DOCLING_DOC_BATCH_CONCURRENCY` | 1 | Worker threads | | `page_batch_size` | `DOCLING_PAGE_BATCH_SIZE` | 10 | Pages processed together | **Concurrency Flow** ``` ``` **Key design points:** - Each document processes independently (no shared mutable state) - Pipeline instances are cached and reused (thread-safe) - Models are initialized once per pipeline (read-only access from workers) - ThreadPoolExecutor manages worker threads automatically **Sources:** [docling/document\\_converter.py313-349](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L313-L349) [docling/datamodel/settings.py1-82](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/settings.py#L1-L82) --- ## Error Handling and Recovery ### Error Capture Errors are captured at multiple levels and stored in `ConversionResult.errors`: | Component Type | Module Examples | Typical Errors | | ------------------ | ------------------------------------ | ------------------------------ | | `DOCUMENT_BACKEND` | `DoclingParseV4DocumentBackend` | Corrupt PDF, invalid format | | `MODEL` | `LayoutModel`, `TableStructureModel` | Model inference failure | | `DOC_ASSEMBLER` | `PageAssembleModel` | Hierarchy construction error | | `USER_INPUT` | `DocumentConverter` | Invalid format, file not found | **Error Item Structure:** ``` ```",
  "**Sources:** [docling/datamodel/base\\_models.py147-158](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L147-L158) ### Raises vs Non-Raises Mode Conversion behavior controlled by `raises_on_error` parameter: **Error Handling Modes** ``` ``` **Non-raises mode allows:** - Processing multiple documents even if some fail - Collecting all errors for batch analysis - Partial success scenarios (some pages succeed) **Sources:** [docling/document\\_converter.py380-432](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L380-L432) [docling/pipeline/base\\_pipeline.py62-84](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L84) --- ## Summary The document conversion flow implements a clean separation of concerns: 1. **Format Detection**: Multi-tier strategy (MIME → Extension → Content) 2. **Routing**: `FormatOption` maps formats to pipeline/backend pairs 3. **Caching**: Pipelines reused via `(class, options_hash)` keys 4. **Execution**: Three-phase model (build → assemble → enrich) 5. **Output**: Unified `DoclingDocument` with multiple export formats The architecture enables: - **Extensibility**: New formats add backend + pipeline + `FormatOption` - **Performance**: Pipeline/model caching, batch processing, concurrency - **Reliability**: Isolated execution, comprehensive error capture - **Flexibility**: Per-format configuration, multiple output formats **Key Code Entities:** | Entity | Location | Role | | -------------------------- | ------------------------------------------------------------------------------------------------------------------------- | --------------------------------- | | `DocumentConverter` | [document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L184-L433) | Orchestrator | | `_DocumentConversionInput` | [document.py236-489](https://github.com/docling-project/docling/blob/f7244a43/document.py#L236-L489) | Format detection, input parsing | | `InputDocument` | [document.py104-191](https://github.com/docling-project/docling/blob/f7244a43/document.py#L104-L191) | Document metadata + backend | | `FormatOption` | [document\\_converter.py62-130](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L62-L130) | Format → pipeline/backend mapping | | `BasePipeline` | [base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/base_pipeline.py#L43-L133) | Three-phase execution model | | `ConversionResult` | [document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/document.py#L198-L215) | Output container | Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page",
  "- [Document Conversion Flow](#document-conversion-flow.md) - [Overview](#overview.md) - [Entry Points and Initialization](#entry-points-and-initialization.md) - [DocumentConverter Initialization](#documentconverter-initialization.md) - [Conversion Methods](#conversion-methods.md) - [Format Detection and Input Processing](#format-detection-and-input-processing.md) - [Format Detection Mechanism](#format-detection-mechanism.md) - [Format Detection Strategy](#format-detection-strategy.md) - [Tier 1: MIME Type Detection](#tier-1-mime-type-detection.md) - [Tier 2: Extension Mapping](#tier-2-extension-mapping.md) - [Tier 3: Content Analysis](#tier-3-content-analysis.md) - [InputDocument Creation](#inputdocument-creation.md) - [Backend and Pipeline Routing](#backend-and-pipeline-routing.md) - [FormatOption Mapping](#formatoption-mapping.md) - [Default Format Options](#default-format-options.md) - [Pipeline Selection and Caching](#pipeline-selection-and-caching.md) - [Pipeline Execution Phases](#pipeline-execution-phases.md) - [Phase 1: Build Document (\\_build\\_document)](#phase-1-build-document-_build_document.md) - [Phase 2: Assemble Document (\\_assemble\\_document)](#phase-2-assemble-document-_assemble_document.md) - [Phase 3: Enrich Document (\\_enrich\\_document)](#phase-3-enrich-document-_enrich_document.md) - [Complete Conversion Flow Sequence](#complete-conversion-flow-sequence.md) - [Output Generation](#output-generation.md) - [ConversionResult Structure](#conversionresult-structure.md) - [Export Formats](#export-formats.md) - [Status Determination](#status-determination.md) - [Batch Processing and Concurrency](#batch-processing-and-concurrency.md) - [Error Handling and Recovery](#error-handling-and-recovery.md) - [Error Capture](#error-capture.md) - [Raises vs Non-Raises Mode](#raises-vs-non-raises-mode.md) - [Summary](#summary.md)",
  "Vision Language Models | docling-project/docling | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [docling-project/docling](https://github.com/docling-project/docling \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
  "- [Overview](docling-project/docling/1-overview.md) - [Installation](docling-project/docling/1.1-installation.md) - [Quick Start](docling-project/docling/1.2-quick-start.md) - [Core Architecture](docling-project/docling/2-core-architecture.md) - [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md) - [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md) - [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) - [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md) - [Document Backends](docling-project/docling/3-document-backends.md) - [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md) - [Office Document Backends](docling-project/docling/3.2-office-document-backends.md) - [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md) - [AI/ML Models](docling-project/docling/4-aiml-models.md) - [OCR Models](docling-project/docling/4.1-ocr-models.md) - [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md) - [Vision Language Models](docling-project/docling/4.3-vision-language-models.md) - [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md) - [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md) - [Enrichment Models](docling-project/docling/4.4-enrichment-models.md) - [Processing Pipelines](docling-project/docling/5-processing-pipelines.md) - [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) - [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md) - [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md) - [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md) - [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md) - [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md) - [Command Line Interface](docling-project/docling/6-command-line-interface.md) - [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md) - [Model Management CLI](docling-project/docling/6.2-model-management-cli.md) - [Python SDK](docling-project/docling/7-python-sdk.md) - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - [Output and Integration](docling-project/docling/8-output-and-integration.md) - [Export Formats](docling-project/docling/8.1-export-formats.md) - [Document Chunking](docling-project/docling/8.2-document-chunking.md) - [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) - [Development and Testing](docling-project/docling/9-development-and-testing.md) - [Testing Framework](docling-project/docling/9.1-testing-framework.md) - [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md) - [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md) - [Deployment](docling-project/docling/10-deployment.md) - [Docker Deployment](docling-project/docling/10.1-docker-deployment.md) - [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md) Menu # Vision Language Models Relevant source files",
  "- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/datamodel/pipeline\\_options\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py) - [docling/datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py) - [docling/models/api\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py) - [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) - [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py) - [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py) - [docling/models/vlm\\_models\\_inline/mlx\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py) - [docling/models/vlm\\_models\\_inline/vllm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) Vision Language Models (VLMs) in Docling enable end-to-end document understanding by processing document page images directly through multimodal AI models. Unlike the traditional pipeline approach that uses specialized models for layout, tables, and OCR, VLMs can perform document analysis in a single inference pass, generating structured output formats like DOCTAGS, Markdown, or HTML. This page provides an overview of VLM integration in Docling, covering available model variants, response formats, and configuration options. For detailed implementation of inline VLM models (Transformers, MLX, vLLM), see [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md). For API-based VLM integration, see [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md). For pipeline-level VLM usage, see [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md). Sources: [docling/models/base\\_model.py46-66](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L46-L66) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py13-32](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L13-L32) [docs/usage/vision\\_models.md1-10](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L1-L10) ## VLM Integration Architecture Docling provides a unified interface for VLM integration supporting both local model execution and external API services. The architecture separates model deployment strategy from the VLM capabilities exposed to pipelines. **Diagram: VLM Integration Architecture** ``` ``` The architecture provides two key abstractions: - **`BaseVlmPageModel`**: Defines the interface for page-level VLM processing, requiring implementations to provide `__call__(conv_res, page_batch)` and `process_images(image_batch, prompt)` methods - **`BaseVlmOptions`**: Provides configuration for VLM behavior including prompts, scaling, temperature, and response format handling",
  "Sources: [docling/models/base\\_model.py46-127](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L46-L127) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py13-32](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L13-L32) [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) ## Available VLM Model Variants Docling provides pre-configured specifications for popular VLM models, optimized for document understanding tasks. These are defined in `vlm_model_specs` and can be used directly or customized. **Diagram: VLM Model Variants and Frameworks** ``` ``` ### GraniteDocling Models GraniteDocling is a specialized 258M parameter model trained for document understanding that outputs structured DOCTAGS format. It represents the recommended choice for document conversion in Docling. | Variant | Repo ID | Framework | Devices | Notes | | -------------------------------- | -------------------------------------- | ------------ | --------- | ------------------------------ | | **GRANITEDOCLING\\_TRANSFORMERS** | `ibm-granite/granite-docling-258M` | Transformers | CPU, CUDA | Default for non-Apple hardware | | **GRANITEDOCLING\\_MLX** | `ibm-granite/granite-docling-258M-mlx` | MLX | MPS | Optimized for Apple Silicon | | **GRANITEDOCLING\\_VLLM** | `ibm-granite/granite-docling-258M` | vLLM | CUDA | High-throughput inference | Configuration example: ``` ``` Sources: [docling/datamodel/vlm\\_model\\_specs.py21-56](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L21-L56) [docs/usage/vision\\_models.md40-87](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L40-L87) ### SmolDocling Models SmolDocling is another 256M parameter model designed for document understanding with DOCTAGS output. It provides an alternative to GraniteDocling with similar capabilities. | Variant | Repo ID | Framework | Devices | | ----------------------------- | ----------------------------------------- | ------------ | --------- | | **SMOLDOCLING\\_TRANSFORMERS** | `ds4sd/SmolDocling-256M-preview` | Transformers | CPU, CUDA | | **SMOLDOCLING\\_MLX** | `ds4sd/SmolDocling-256M-preview-mlx-bf16` | MLX | MPS | | **SMOLDOCLING\\_VLLM** | `ds4sd/SmolDocling-256M-preview` | vLLM | CUDA | Sources: [docling/datamodel/vlm\\_model\\_specs.py58-97](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L58-L97) ### General-Purpose VLM Models Docling supports general-purpose VLMs that output Markdown or HTML, suitable for document conversion when DOCTAGS-trained models are not required. | Model | Primary Output | Notable Features | | ---------------------- | -------------- | ----------------------------------------------- | | **Granite Vision 3.2** | Markdown | IBM's 2B vision model, multi-framework support | | **Pixtral 12B** | Markdown | Mistral's 12B multimodal model | | **Qwen2.5-VL** | Markdown | 3B parameter model with strong OCR capabilities | | **Phi-4** | Markdown | Microsoft's 14B multimodal model | | **GOT-OCR 2.0** | Markdown | Specialized OCR model with format preservation | Example configuration for Granite Vision: ``` ``` Sources: [docling/datamodel/vlm\\_model\\_specs.py143-245](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L143-L245) [docs/usage/vision\\_models.md46-58](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L46-L58) ### Custom Model Configuration",
  "Beyond pre-configured models, custom VLMs can be integrated by specifying `InlineVlmOptions` directly: ``` ``` Sources: [docs/usage/vision\\_models.md88-113](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L88-L113) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py54-89](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L54-L89) ## Response Formats VLM models support multiple output formats optimized for different document understanding tasks. The response format determines how the VLM structures its output and how Docling processes it into a `DoclingDocument`. **Diagram: Response Format Processing** ``` ``` ### DOCTAGS Format DOCTAGS is an XML-based structured format designed specifically for document understanding. It provides the most accurate representation of document structure and is the recommended format for document conversion. Example DOCTAGS output: ``` ``` Models trained for DOCTAGS output include: - GraniteDocling (all variants) - SmolDocling (all variants) Configuration: ``` ``` Sources: [docling/datamodel/pipeline\\_options\\_vlm\\_model.py27-32](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L27-L32) [docling/datamodel/vlm\\_model\\_specs.py22-37](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L22-L37) ### Markdown Format Markdown format outputs standard Markdown syntax, suitable for general-purpose document representation. This format is widely compatible with downstream tools and libraries. Example Markdown output: ``` ``` Models outputting Markdown include: - Granite Vision - Pixtral - Qwen2.5-VL - GOT-OCR 2.0 Configuration: ``` ``` Sources: [docling/datamodel/vlm\\_model\\_specs.py144-157](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L144-L157) [docs/usage/vision\\_models.md4-9](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L4-L9) ### HTML Format HTML format outputs HTML markup, preserving semantic document structure through HTML tags. This format is useful for web-based applications and rich document viewers. Configuration: ``` ``` Sources: [docling/datamodel/pipeline\\_options\\_vlm\\_model.py27-32](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L27-L32) ### Custom Response Processing The `decode_response()` method in `BaseVlmOptions` allows custom post-processing of VLM outputs. This enables integration with models that return structured responses requiring transformation. Example implementation: ``` ``` This pattern is used internally for specialized models like OlmOcr that return JSON-structured responses. Sources: [docling/datamodel/pipeline\\_options\\_vlm\\_model.py20-24](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L20-L24) ## VLM Configuration Options VLM behavior is controlled through configuration classes that specify model selection, inference parameters, and processing options. **Diagram: VLM Configuration Hierarchy** ``` ``` ### Core Configuration Parameters | Parameter | Type | Default | Description | | -------------------- | ---------------- | -------------- | ------------------------------------------ | | **prompt** | `str` | Model-specific | Prompt text sent to VLM | | **scale** | `float` | `2.0` | Image scaling factor for higher resolution | | **max\\_size** | `Optional[int]` | `None` | Maximum image dimension (pixels) | | **temperature** | `float` | `0.0` | Sampling temperature (0.0 = deterministic) | | **response\\_format** | `ResponseFormat` | Required | Expected output format | ### Inline Model Parameters",
  "| Parameter | Type | Purpose | | ------------------------ | ------------------------- | -------------------------------------------- | | **repo\\_id** | `str` | HuggingFace model repository identifier | | **revision** | `str` | Model version/branch (default: \"main\") | | **inference\\_framework** | `InferenceFramework` | Framework selection: MLX, TRANSFORMERS, VLLM | | **max\\_new\\_tokens** | `int` | Maximum tokens to generate (default: 4096) | | **stop\\_strings** | `List[str]` | Strings that trigger generation stop | | **supported\\_devices** | `List[AcceleratorDevice]` | Compatible hardware devices | ### API Model Parameters | Parameter | Type | Purpose | | --------------- | ---------------- | ----------------------------------- | | **url** | `AnyUrl` | API endpoint URL | | **headers** | `Dict[str, str]` | HTTP headers (e.g., authentication) | | **timeout** | `float` | Request timeout in seconds | | **concurrency** | `int` | Number of parallel API requests | Sources: [docling/datamodel/pipeline\\_options\\_vlm\\_model.py13-112](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L13-L112) ### Generation Control VLM generation behavior can be fine-tuned through stopping criteria and generation configuration: **Stop Strings**: Simple string-based stopping ``` ``` **Custom Stopping Criteria**: Programmatic stopping logic ``` ``` **Extra Generation Config**: Framework-specific parameters ``` ``` Sources: [docling/datamodel/pipeline\\_options\\_vlm\\_model.py78-82](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L78-L82) [docling/models/utils/generation\\_utils.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/generation_utils.py) ## Prompt Construction and Formatting VLM prompts are constructed through the `build_prompt()` method, which can be customized to include page-specific context or structured instructions. **Diagram: Prompt Processing Flow** ``` ``` ### Prompt Styles | Style | Usage | Example | | -------- | -------------------------------- | ------------------------------- | | **CHAT** | Uses model's chat template | \\`< | | **RAW** | Direct prompt without formatting | `Convert this page to docling.` | | **NONE** | No text prompt (image-only) | `\"\"` | ### Dynamic Prompt Construction The `build_prompt()` method can access page metadata for context-aware prompts: ``` ``` Sources: [docling/models/base\\_model.py85-126](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py#L85-L126) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py20-24](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L20-L24) ## Response Formats and Processing VLM models support multiple output formats optimized for different document understanding tasks and downstream processing requirements. ### Response Format Types ``` ``` ### Custom Response Processing VLM options support custom response processing through the `decode_response()` method, enabling specialized handling for specific model outputs: ``` ``` This pattern allows integration with models that return structured responses requiring post-processing before integration into the document representation. Sources: [docling/datamodel/pipeline\\_options\\_vlm\\_model.py18-22](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L18-L22) [docs/examples/vlm\\_pipeline\\_api\\_model.py78-85](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/vlm_pipeline_api_model.py#L78-L85) ## VLM Integration Examples The codebase includes comprehensive examples demonstrating VLM integration patterns for different deployment scenarios and model types. ### Multi-Model Comparison Framework The `compare_vlm_models.py` example provides a systematic approach for evaluating different VLM models and frameworks: ``` ``` This framework enables systematic evaluation of model performance, output quality, and resource utilization across different VLM implementations.",
  "Sources: [docs/examples/compare\\_vlm\\_models.py33-101](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/compare_vlm_models.py#L33-L101) [docs/examples/compare\\_vlm\\_models.py146-198](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/compare_vlm_models.py#L146-L198) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again. ### On this page - [Vision Language Models](#vision-language-models.md) - [VLM Integration Architecture](#vlm-integration-architecture.md) - [Available VLM Model Variants](#available-vlm-model-variants.md) - [GraniteDocling Models](#granitedocling-models.md) - [SmolDocling Models](#smoldocling-models.md) - [General-Purpose VLM Models](#general-purpose-vlm-models.md) - [Custom Model Configuration](#custom-model-configuration.md) - [Response Formats](#response-formats.md) - [DOCTAGS Format](#doctags-format.md) - [Markdown Format](#markdown-format.md) - [HTML Format](#html-format.md) - [Custom Response Processing](#custom-response-processing.md) - [VLM Configuration Options](#vlm-configuration-options.md) - [Core Configuration Parameters](#core-configuration-parameters.md) - [Inline Model Parameters](#inline-model-parameters.md) - [API Model Parameters](#api-model-parameters.md) - [Generation Control](#generation-control.md) - [Prompt Construction and Formatting](#prompt-construction-and-formatting.md) - [Prompt Styles](#prompt-styles.md) - [Dynamic Prompt Construction](#dynamic-prompt-construction.md) - [Response Formats and Processing](#response-formats-and-processing.md) - [Response Format Types](#response-format-types.md) - [Custom Response Processing](#custom-response-processing-1.md) - [VLM Integration Examples](#vlm-integration-examples.md) - [Multi-Model Comparison Framework](#multi-model-comparison-framework.md)"
]