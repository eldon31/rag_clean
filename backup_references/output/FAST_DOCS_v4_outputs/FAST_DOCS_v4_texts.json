[
  "Protocol & Message System | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Protocol & Message System Relevant source files - [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py) This page documents the core Model Context Protocol (MCP) message system, JSON-RPC foundation, and type system that enables communication between MCP clients and servers. This covers the fundamental protocol layer that underlies all MCP interactions.",
  "For high-level server development using decorators and simplified APIs, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For transport-specific implementations like stdio, SSE, and StreamableHTTP, see [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md). For client-side message handling, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). ## JSON-RPC Foundation MCP is built on JSON-RPC 2.0, providing a standardized request-response and notification messaging pattern. The protocol defines four core message types that form the foundation of all MCP communication. ``` ``` **Sources:** [src/mcp/types.py124-193](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L124-L193) [src/mcp/shared/message.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/message.py) The base JSON-RPC types define the message structure: - `JSONRPCRequest`: Request expecting a response, includes `id`, `method`, and `params` - `JSONRPCResponse`: Successful response with `id` and `result` - `JSONRPCError`: Error response with `id` and `error` containing code, message, and optional data - `JSONRPCNotification`: One-way message with `method` and `params`, no response expected ## Protocol Message Hierarchy MCP defines a structured hierarchy of message types that inherit from the JSON-RPC foundation, creating type-safe request and response patterns. ``` ``` **Sources:** [src/mcp/types.py82-122](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L82-L122) [src/mcp/types.py335-365](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L335-L365) [src/mcp/types.py815-922](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L815-L922) Each protocol operation follows this pattern: 1. **Request class**: Defines the method name and parameter structure 2. **Parameter class**: Strongly-typed parameters extending `RequestParams` 3. **Result class**: Response structure extending `Result` 4. **Specialized handling**: Pagination, metadata, and protocol-specific features ## Core Protocol Operations MCP defines several categories of protocol operations, each with specific request-response patterns and capabilities. ``` ``` **Sources:** [src/mcp/types.py345-365](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L345-L365) [src/mcp/types.py419-554](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L419-L554) [src/mcp/types.py815-922](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L815-L922) [src/mcp/types.py630-802](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L630-L802) [src/mcp/types.py1061-1081](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1061-L1081) ## Message Processing Architecture The server processes incoming messages through a structured handler system that maps message types to handler functions and manages the request lifecycle. ``` ``` **Sources:** [src/mcp/server/lowlevel/server.py625-723](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L625-L723) [src/mcp/server/lowlevel/server.py152-155](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L152-L155) [src/mcp/server/lowlevel/server.py238-259](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L238-L259) The `Server` class maintains handler registries that map message types to handler functions: - `request_handlers`: Maps request types to async handler functions - `notification_handlers`: Maps notification types to async handler functions - Decorator pattern for handler registration (e.g., `@server.list_tools()`) ## Content and Structured Output System MCP supports both unstructured content and structured data in responses, enabling rich tool outputs and backward compatibility. ``` ```",
  "**Sources:** [src/mcp/types.py688-782](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L688-L782) [src/mcp/types.py914-922](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L914-L922) [src/mcp/server/lowlevel/server.py100-102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L100-L102) The content system supports: - **Unstructured content**: Human-readable content blocks (text, images, audio, resources) - **Structured content**: Machine-readable JSON data with optional schema validation - **Combination output**: Both structured and unstructured content in the same response - **Schema validation**: Optional `outputSchema` validation for structured content ## Protocol Versioning and Capabilities MCP uses semantic versioning and capability negotiation to ensure compatibility between clients and servers with different feature sets. ``` ``` **Sources:** [src/mcp/types.py26-34](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L26-L34) [src/mcp/types.py265-332](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L265-L332) [src/mcp/types.py335-365](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L335-L365) Capability negotiation enables: - **Protocol versioning**: Semantic version strings for compatibility checking - **Feature detection**: Clients and servers declare supported capabilities - **Graceful degradation**: Optional features can be disabled if not supported - **Extension points**: Experimental capabilities for new features ## Error Handling and Status Codes MCP defines standardized error codes and error handling patterns based on JSON-RPC 2.0 specifications. ``` ``` **Sources:** [src/mcp/types.py149-179](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L149-L179) [src/mcp/server/lowlevel/server.py440-447](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L440-L447) [src/mcp/shared/exceptions.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/exceptions.py) Error handling includes: - **Standard JSON-RPC codes**: Parse, request, method, and parameter errors - **MCP-specific codes**: Connection and transport-related errors - **Structured error data**: Code, message, and optional additional data - **Exception mapping**: Python exceptions converted to MCP error responses Dismiss Refresh this wiki Enter email to refresh ### On this page - [Protocol & Message System](#protocol-message-system.md) - [JSON-RPC Foundation](#json-rpc-foundation.md) - [Protocol Message Hierarchy](#protocol-message-hierarchy.md) - [Core Protocol Operations](#core-protocol-operations.md) - [Message Processing Architecture](#message-processing-architecture.md) - [Content and Structured Output System](#content-and-structured-output-system.md) - [Protocol Versioning and Capabilities](#protocol-versioning-and-capabilities.md) - [Error Handling and Status Codes](#error-handling-and-status-codes.md)",
  "Low-Level Server Implementation | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Low-Level Server Implementation Relevant source files - [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [src/mcp/server/\\_\\_init\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/__init__.py) - [src/mcp/server/\\_\\_main\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/__main__.py) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py)",
  "This document covers the low-level `Server` class that provides direct access to the MCP protocol implementation. This is the foundation layer that handles raw MCP requests and notifications with minimal abstraction. For high-level server development using decorators and automatic schema generation, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For details on session management and client connections, see [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md). ## Server Class Overview The `Server` class in [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) provides a decorator-based framework for implementing MCP servers with direct control over protocol message handling. Unlike FastMCP's automatic introspection, the low-level server requires explicit handler registration and manual schema definition. ``` ``` Sources: [src/mcp/server/lowlevel/server.py133-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L133-L158) [src/mcp/server/lowlevel/server.py152-155](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L152-L155) [src/mcp/types.py82-103](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L82-L103) The `Server` class is generic over two type parameters: `LifespanResultT` for lifespan context data and `RequestT` for request-specific data. It maintains separate dictionaries for request handlers and notification handlers, automatically routing incoming messages based on their type. ## Handler Registration System Request and notification handlers are registered using decorator methods that map protocol message types to handler functions. Each decorator enforces specific function signatures while providing flexibility in implementation. ``` ``` Sources: [src/mcp/server/lowlevel/server.py409-438](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L409-L438) [src/mcp/server/lowlevel/server.py245-255](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L245-L255) [src/mcp/server/lowlevel/func\\_inspection.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/func_inspection.py) Handler functions can return either the specific result type (e.g., `ListToolsResult`) or the legacy format (e.g., `list[Tool]`). The server automatically wraps legacy returns in the appropriate result container for backward compatibility. ## Tool Management and Validation The server implements sophisticated tool management including input/output validation and result processing. Tools are cached to avoid repeated calls to `list_tools()` and support both structured and unstructured content output. | Feature | Implementation | Purpose | | --------------------- | ------------------------------ | -------------------------------------------------- | | Tool Caching | `_tool_cache: dict[str, Tool]` | Avoid repeated tool list requests | | Input Validation | `jsonschema.validate()` | Validate arguments against `inputSchema` | | Output Validation | `jsonschema.validate()` | Validate structured results against `outputSchema` | | Content Normalization | `CombinationContent` handling | Support both structured and unstructured outputs | ``` ``` Sources: [src/mcp/server/lowlevel/server.py465-547](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L465-L547) [src/mcp/server/lowlevel/server.py99-102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L99-L102) [src/mcp/server/lowlevel/server.py449-463](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L449-L463) The `call_tool()` decorator accepts a `validate_input` parameter to control input validation. Output validation is automatically performed when `outputSchema` is defined in the tool definition. ## Request Context System The server uses Python's `contextvars` module to provide request-scoped context accessible throughout the handler call stack. This context includes session information, lifespan data, and request metadata. ``` ```",
  "Sources: [src/mcp/server/lowlevel/server.py105](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L105-L105) [src/mcp/server/lowlevel/server.py232-236](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L232-L236) [src/mcp/server/lowlevel/server.py677-685](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L677-L685) [src/mcp/shared/context.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/context.py) ## Message Processing Architecture The server's main `run()` method establishes a session and processes incoming messages through a task group, ensuring proper error handling and response delivery. ``` ``` Sources: [src/mcp/server/lowlevel/server.py598-636](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L598-L636) [src/mcp/server/lowlevel/server.py637-655](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L637-L655) [src/mcp/server/lowlevel/server.py656-713](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L656-L713) ## Capabilities Discovery The server automatically generates `ServerCapabilities` based on registered handlers, allowing clients to discover available functionality without manual configuration. ``` ``` Sources: [src/mcp/server/lowlevel/server.py188-229](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L188-L229) [src/mcp/types.py317-332](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L317-L332) [src/mcp/server/lowlevel/server.py159-186](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L159-L186) The `NotificationOptions` class controls whether the server supports change notifications for prompts, resources, and tools, which are reflected in the generated capabilities. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Low-Level Server Implementation](#low-level-server-implementation.md) - [Server Class Overview](#server-class-overview.md) - [Handler Registration System](#handler-registration-system.md) - [Tool Management and Validation](#tool-management-and-validation.md) - [Request Context System](#request-context-system.md) - [Message Processing Architecture](#message-processing-architecture.md) - [Capabilities Discovery](#capabilities-discovery.md)",
  "FastMCP Server Framework | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # FastMCP Server Framework Relevant source files - [src/mcp/server/fastmcp/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py) - [tests/server/fastmcp/test\\_server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_server.py) FastMCP is a high-level, decorator-based framework for building Model Context Protocol (MCP) servers in Python. It provides an ergonomic interface that simplifies server development through automatic function introspection, context injection, and seamless integration with multiple transport protocols.",
  "For low-level server implementation details, see [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md). For client-side components, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). For transport layer specifics, see [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md). ## Overview FastMCP abstracts away the complexities of the MCP protocol by providing a decorator-based API that automatically converts Python functions into MCP tools, resources, and prompts. The framework handles JSON schema generation, input validation, output conversion, and protocol message handling. ### FastMCP Core Architecture ``` ``` Sources: [src/mcp/server/fastmcp/server.py122-209](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L122-L209) [src/mcp/server/fastmcp/server.py268-280](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L268-L280) ## Core Components ### FastMCP Class The `FastMCP` class serves as the central orchestrator, managing all server components and providing the decorator-based API. It wraps a low-level `MCPServer` instance while providing higher-level abstractions. | Component | Purpose | Key Methods | | ---------- | ------------------------ | ----------------------------------------------- | | `FastMCP` | Main server class | `tool()`, `resource()`, `prompt()`, `run()` | | `Settings` | Configuration management | Environment variable integration | | `Context` | Request context access | `log()`, `report_progress()`, `read_resource()` | ### Manager Classes FastMCP uses specialized manager classes to handle different types of MCP entities: ``` ``` Sources: [src/mcp/server/fastmcp/server.py181-183](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L181-L183) [src/mcp/server/fastmcp/server.py270-279](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L270-L279) ## Decorator-Based API ### Tool Registration The `@tool()` decorator converts Python functions into MCP tools with automatic schema generation: ``` ``` The decorator supports several parameters for customization: | Parameter | Type | Purpose | | ------------------- | -------------- | -------------------------------------------- | | `name` | `str \\| None` | Custom tool name (defaults to function name) | | `title` | `str \\| None` | Human-readable title | | `description` | `str \\| None` | Tool description | | `structured_output` | `bool \\| None` | Controls output schema generation | Sources: [src/mcp/server/fastmcp/server.py393-451](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L393-L451) [tests/server/fastmcp/test\\_server.py146-153](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_server.py#L146-L153) ### Resource Registration Resources can be registered as static resources or parameterized templates: ``` ``` The framework automatically detects whether a resource should be treated as a template based on URI parameters and function signature. Sources: [src/mcp/server/fastmcp/server.py479-578](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L479-L578) [tests/server/fastmcp/test\\_server.py701-827](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_server.py#L701-L827) ### Prompt Registration Prompts are registered using the `@prompt()` decorator and return message structures: ``` ``` Sources: [src/mcp/server/fastmcp/server.py588-641](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L588-L641) [tests/server/fastmcp/test\\_server.py1094-1284](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_server.py#L1094-L1284) ## Context System ### Context Injection The `Context` class provides access to MCP capabilities and is automatically injected into functions that declare it as a parameter: ``` ``` ### Context Methods The `Context` class provides several methods for interacting with the MCP session:",
  "| Method | Purpose | Parameters | | ------------------- | ------------------------- | --------------------------------- | | `log()` | Send log messages | `level`, `message`, `logger_name` | | `report_progress()` | Report operation progress | `progress`, `total`, `message` | | `read_resource()` | Access other resources | `uri` | | `elicit()` | Request user input | `message`, `schema` | Sources: [src/mcp/server/fastmcp/server.py1043-1223](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L1043-L1223) [tests/server/fastmcp/test\\_server.py835-1092](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_server.py#L835-L1092) ## Transport Integration FastMCP supports multiple transport protocols through dedicated application factories: ### Transport Applications ``` ``` ### Transport-Specific Features Each transport provides specific capabilities: | Transport | Use Case | Key Features | | ------------------ | --------------------------------- | -------------------------------------------- | | **stdio** | Process-based communication | Simple stdin/stdout JSON-RPC | | **SSE** | Web-based real-time communication | Server-sent events with HTTP POST | | **StreamableHTTP** | Resumable sessions | Bidirectional streaming, session persistence | Sources: [src/mcp/server/fastmcp/server.py687-724](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L687-L724) [src/mcp/server/fastmcp/server.py752-990](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L752-L990) ## Configuration and Settings ### Settings Management The `Settings` class provides comprehensive configuration management with environment variable support: ``` ``` Settings can be configured via: - Environment variables with `FASTMCP_` prefix - `.env` files - Direct parameter passing ### Authentication Integration FastMCP supports OAuth 2.0 authentication through integrated middleware: ``` ``` Sources: [src/mcp/server/fastmcp/server.py56-108](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L56-L108) [src/mcp/server/fastmcp/server.py152-170](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L152-L170) [src/mcp/server/fastmcp/server.py792-982](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L792-L982) Dismiss Refresh this wiki Enter email to refresh ### On this page - [FastMCP Server Framework](#fastmcp-server-framework.md) - [Overview](#overview.md) - [FastMCP Core Architecture](#fastmcp-core-architecture.md) - [Core Components](#core-components.md) - [FastMCP Class](#fastmcp-class.md) - [Manager Classes](#manager-classes.md) - [Decorator-Based API](#decorator-based-api.md) - [Tool Registration](#tool-registration.md) - [Resource Registration](#resource-registration.md) - [Prompt Registration](#prompt-registration.md) - [Context System](#context-system.md) - [Context Injection](#context-injection.md) - [Context Methods](#context-methods.md) - [Transport Integration](#transport-integration.md) - [Transport Applications](#transport-applications.md) - [Transport-Specific Features](#transport-specific-features.md) - [Configuration and Settings](#configuration-and-settings.md) - [Settings Management](#settings-management.md) - [Authentication Integration](#authentication-integration.md)",
  "Context & Progress Reporting | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Context & Progress Reporting Relevant source files",
  "- [.gitattribute](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.gitattribute) - [.gitignore](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.gitignore) - [src/mcp/server/auth/handlers/authorize.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/authorize.py) - [src/mcp/server/fastmcp/prompts/manager.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/manager.py) - [src/mcp/server/fastmcp/resources/resource\\_manager.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/resource_manager.py) - [src/mcp/server/fastmcp/utilities/context\\_injection.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/context_injection.py) - [src/mcp/server/models.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/models.py) - [src/mcp/server/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py) - [tests/server/test\\_session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_session.py) This document covers the MCP SDK's context and progress reporting systems, which enable request-scoped data access and bidirectional progress communication between clients and servers. These systems provide the foundation for tracking long-running operations and maintaining request state throughout the MCP protocol lifecycle. For information about session management and message correlation, see [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md). For details about protocol message types, see [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md). ## Request Context System The request context system provides a structured way to access request-scoped information including session references, metadata, and lifecycle context. The `RequestContext` class serves as the primary interface for accessing this information within request handlers. ### RequestContext Architecture ``` ``` The `RequestContext` provides access to: - **request\\_id**: Unique identifier for the current request - **session**: Reference to the active session for sending notifications - **meta**: Request metadata including progress tokens - **lifespan\\_context**: Application lifecycle context Sources: [tests/shared/test\\_progress\\_notifications.py276-281](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_progress_notifications.py#L276-L281) ## Progress Notification System Progress notifications enable both clients and servers to report the status of long-running operations. The system uses progress tokens to correlate notifications with specific requests and supports both absolute and incremental progress reporting. ### Progress Notification Types | Component | Description | Usage | | ---------------------- | ------------------------------------------ | -------------------------------- | | `ProgressNotification` | Protocol message type for progress updates | Sent over transport | | `progressToken` | String or int identifier | Correlates progress with request | | `progress` | Float value | Current progress amount | | `total` | Optional float | Total expected progress | | `message` | Optional string | Human-readable status | ### Bidirectional Progress Flow ``` ``` Both clients and servers can send progress notifications using the `send_progress_notification()` method available on their respective session classes. Progress tokens passed in request metadata enable correlation between requests and their associated progress updates. Sources: [tests/shared/test\\_progress\\_notifications.py98-119](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_progress_notifications.py#L98-L119) [tests/shared/test\\_progress\\_notifications.py168-187](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_progress_notifications.py#L168-L187) ## Progress Context Manager The SDK provides a convenient context manager for sending progress notifications that automatically handles progress token extraction and incremental progress tracking. ### Progress Manager Usage ``` ``` The progress context manager: - Extracts progress tokens from request context automatically - Maintains running total of incremental progress updates - Provides simple `progress(amount, message)` interface - Handles session communication transparently Sources: [tests/shared/test\\_progress\\_notifications.py287-292](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_progress_notifications.py#L287-L292) ## Session Integration",
  "Progress reporting is deeply integrated with the session layer, where both `ClientSession` and `ServerSession` provide `send_progress_notification()` methods for sending progress updates. ### Session Progress Methods ``` ``` ### Progress Handler Registration Servers register progress notification handlers using decorators: ``` ``` Clients handle progress notifications through message handlers that receive `ProgressNotification` messages and extract the relevant progress information. Sources: [tests/shared/test\\_progress\\_notifications.py57-71](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_progress_notifications.py#L57-L71) [tests/shared/test\\_progress\\_notifications.py128-144](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_progress_notifications.py#L128-L144) ## Request Metadata Integration Progress tokens are typically passed as part of request metadata using the `_meta` field in request parameters. This enables correlation between tool calls, resource reads, or other operations and their associated progress updates. ### Metadata Structure ``` ``` The metadata integration enables: - Automatic progress token propagation from requests to handlers - Correlation of progress updates with specific operations - Support for multiple concurrent operations with distinct progress tokens Sources: [tests/shared/test\\_progress\\_notifications.py89-96](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_progress_notifications.py#L89-L96) [tests/shared/test\\_progress\\_notifications.py275-281](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_progress_notifications.py#L275-L281) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Context & Progress Reporting](#context-progress-reporting.md) - [Request Context System](#request-context-system.md) - [RequestContext Architecture](#requestcontext-architecture.md) - [Progress Notification System](#progress-notification-system.md) - [Progress Notification Types](#progress-notification-types.md) - [Bidirectional Progress Flow](#bidirectional-progress-flow.md) - [Progress Context Manager](#progress-context-manager.md) - [Progress Manager Usage](#progress-manager-usage.md) - [Session Integration](#session-integration.md) - [Session Progress Methods](#session-progress-methods.md) - [Progress Handler Registration](#progress-handler-registration.md) - [Request Metadata Integration](#request-metadata-integration.md) - [Metadata Structure](#metadata-structure.md)",
  "ServerSession Implementation | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # ServerSession Implementation Relevant source files - [src/mcp/server/models.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/models.py) - [src/mcp/server/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py) - [tests/server/test\\_session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_session.py) The ServerSession class provides the core session management functionality for MCP servers, handling individual client connections and managing bidirectional communication between servers and clients. It serves as the low-level foundation that higher-level server frameworks like FastMCP build upon for managing protocol-compliant client interactions.",
  "For information about the high-level FastMCP framework that uses ServerSession internally, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For details about the underlying BaseSession architecture, see [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md). ## Architecture Overview ServerSession extends the BaseSession class with server-specific functionality, implementing the server side of the MCP protocol communication pattern. ``` ``` Sources: [src/mcp/server/session.py71-79](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L71-L79) [src/mcp/server/session.py58-62](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L58-L62) [src/mcp/server/models.py14-21](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/models.py#L14-L21) ## Session Lifecycle and Initialization ServerSession manages a strict initialization protocol that ensures proper MCP handshake before allowing most operations. ### Initialization States The session progresses through three distinct states during its lifecycle: | State | Description | Allowed Operations | | ---------------- | --------------------------------------------- | ------------------------------ | | `NotInitialized` | Initial state before any client communication | Ping requests only | | `Initializing` | During initialization handshake | Ping requests only | | `Initialized` | Ready for full MCP protocol operations | All requests and notifications | ``` ``` Sources: [src/mcp/server/session.py58-62](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L58-L62) [src/mcp/server/session.py142-171](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L142-L171) [src/mcp/server/session.py173-181](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L173-L181) ### Initialization Protocol The initialization process follows the MCP specification: 1. **Client sends InitializeRequest**: Contains protocol version, capabilities, and client info 2. **Server responds with InitializeResult**: Confirms protocol version and advertises server capabilities 3. **Client sends InitializedNotification**: Signals readiness to begin normal operations ``` ``` Sources: [src/mcp/server/session.py144-165](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L144-L165) [src/mcp/server/session.py177-178](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L177-L178) ## Client Capability Management ServerSession provides capability checking to ensure servers only use features supported by the connected client. ### Capability Checking Logic The `check_client_capability()` method validates whether a client supports specific MCP capabilities: ``` ``` Sources: [src/mcp/server/session.py105-136](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L105-L136) ## Message Processing Architecture ServerSession handles both incoming messages from clients and outgoing messages to clients through dedicated processing pipelines. ### Incoming Message Flow ``` ``` Sources: [src/mcp/server/session.py138-140](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L138-L140) [src/mcp/server/session.py326-327](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L326-L327) [src/mcp/server/session.py329-333](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L329-L333) ### Request Validation All incoming requests except ping are validated against the initialization state: ``` ``` Sources: [src/mcp/server/session.py169-171](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L169-L171) ## Server-to-Client Communication Methods ServerSession provides a comprehensive set of methods for servers to communicate with clients, covering all major MCP protocol operations. ### Notification Methods",
  "| Method | Purpose | MCP Notification Type | | ------------------------------ | ---------------------------- | --------------------------------- | | `send_log_message()` | Send log entries to client | `LoggingMessageNotification` | | `send_resource_updated()` | Notify resource changes | `ResourceUpdatedNotification` | | `send_progress_notification()` | Report operation progress | `ProgressNotification` | | `send_resource_list_changed()` | Signal resource list updates | `ResourceListChangedNotification` | | `send_tool_list_changed()` | Signal tool list updates | `ToolListChangedNotification` | | `send_prompt_list_changed()` | Signal prompt list updates | `PromptListChangedNotification` | Sources: [src/mcp/server/session.py183-202](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L183-L202) [src/mcp/server/session.py204-212](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L204-L212) [src/mcp/server/session.py291-312](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L291-L312) [src/mcp/server/session.py314-324](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L314-L324) ### Request Methods ServerSession can initiate requests to clients for advanced MCP operations: ``` ``` Sources: [src/mcp/server/session.py214-247](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L214-L247) [src/mcp/server/session.py249-254](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L249-L254) [src/mcp/server/session.py256-282](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L256-L282) [src/mcp/server/session.py284-289](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L284-L289) ## Integration with MCP Protocol ServerSession implements the server side of the complete MCP protocol specification, handling message routing and protocol compliance. ### Protocol Message Types ``` ``` Sources: [src/mcp/server/session.py71-79](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L71-L79) ### Stateless Mode Support ServerSession supports stateless operation for scenarios where session persistence is not required: ``` ``` In stateless mode, the session immediately transitions to `Initialized` state, bypassing the normal MCP initialization handshake. Sources: [src/mcp/server/session.py88-93](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L88-L93) Dismiss Refresh this wiki Enter email to refresh ### On this page - [ServerSession Implementation](#serversession-implementation.md) - [Architecture Overview](#architecture-overview.md) - [Session Lifecycle and Initialization](#session-lifecycle-and-initialization.md) - [Initialization States](#initialization-states.md) - [Initialization Protocol](#initialization-protocol.md) - [Client Capability Management](#client-capability-management.md) - [Capability Checking Logic](#capability-checking-logic.md) - [Message Processing Architecture](#message-processing-architecture.md) - [Incoming Message Flow](#incoming-message-flow.md) - [Request Validation](#request-validation.md) - [Server-to-Client Communication Methods](#server-to-client-communication-methods.md) - [Notification Methods](#notification-methods.md) - [Request Methods](#request-methods.md) - [Integration with MCP Protocol](#integration-with-mcp-protocol.md) - [Protocol Message Types](#protocol-message-types.md) - [Stateless Mode Support](#stateless-mode-support.md)",
  "Session Management | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Session Management Relevant source files",
  "- [src/mcp/client/\\_\\_main\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/__main__.py) - [src/mcp/client/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py) - [src/mcp/server/models.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/models.py) - [src/mcp/server/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py) - [src/mcp/shared/memory.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/memory.py) - [src/mcp/shared/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py) - [tests/client/test\\_logging\\_callback.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_logging_callback.py) - [tests/client/test\\_session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_session.py) - [tests/server/test\\_session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_session.py) Session management in the MCP Python SDK provides the foundational infrastructure for maintaining communication state between clients and servers. This system handles message correlation, request/response tracking, protocol initialization, and connection lifecycle management. For specific client-side session usage, see [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md). For protocol message types and JSON-RPC implementation details, see [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md). ## BaseSession Architecture The `BaseSession` class forms the core of MCP's session management system, providing message correlation, stream management, and request/response tracking for both client and server implementations. ### Message Correlation System ``` ``` The BaseSession maintains request correlation through a sophisticated tracking system that maps request IDs to response streams, ensuring that responses are delivered to the correct waiting coroutines even in highly concurrent scenarios. Sources: [src/mcp/shared/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py) [tests/shared/test\\_session.py36-46](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_session.py#L36-L46) [tests/client/test\\_resource\\_cleanup.py12-61](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_resource_cleanup.py#L12-L61) ### Stream Management and Cleanup BaseSession manages memory object streams for bidirectional communication, with automatic cleanup to prevent resource leaks: ``` ``` The session ensures proper stream cleanup even when exceptions occur during request transmission, preventing memory leaks in long-running connections. Sources: [tests/client/test\\_resource\\_cleanup.py13-56](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_resource_cleanup.py#L13-L56) [src/mcp/shared/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py) ## ServerSession Implementation The `ServerSession` class extends BaseSession to provide server-specific functionality, including initialization state management, client capability checking, and various notification methods. ### Initialization State Flow ``` ``` The ServerSession enforces a strict initialization protocol where most requests are blocked until the initialization handshake completes, with ping requests being the only exception. Sources: [src/mcp/server/session.py58-62](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L58-L62) [src/mcp/server/session.py167-179](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L167-L179) [tests/server/test\\_session.py219-283](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_session.py#L219-L283) ### Client Capability Checking ServerSession provides a comprehensive capability checking system that allows servers to adapt their behavior based on client capabilities:",
  "| Capability Type | Check Method | Purpose | | --------------- | --------------------------- | ---------------------------- | | `roots` | `check_client_capability()` | File system root access | | `sampling` | `check_client_capability()` | LLM sampling support | | `elicitation` | `check_client_capability()` | User input elicitation | | `experimental` | `check_client_capability()` | Custom experimental features | ``` ``` Sources: [src/mcp/server/session.py105-136](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L105-L136) [src/mcp/server/session.py8-34](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L8-L34) ## Session Communication Methods ServerSession provides specialized methods for different types of server-to-client communication: ### Notification Methods | Method | Purpose | Message Type | | ------------------------------ | ---------------------- | --------------------------------- | | `send_log_message()` | Server logging | `LoggingMessageNotification` | | `send_resource_updated()` | Resource change events | `ResourceUpdatedNotification` | | `send_progress_notification()` | Operation progress | `ProgressNotification` | | `send_resource_list_changed()` | Resource list updates | `ResourceListChangedNotification` | | `send_tool_list_changed()` | Tool list updates | `ToolListChangedNotification` | | `send_prompt_list_changed()` | Prompt list updates | `PromptListChangedNotification` | ### Request Methods ServerSession can also send requests to clients for advanced capabilities: | Method | Purpose | Result Type | | ------------------ | ----------------- | --------------------- | | `create_message()` | LLM sampling | `CreateMessageResult` | | `list_roots()` | File system roots | `ListRootsResult` | | `elicit()` | User input | `ElicitResult` | | `send_ping()` | Connection health | `EmptyResult` | Sources: [src/mcp/server/session.py181-323](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L181-L323) ## Request Cancellation and Error Handling The session management system provides robust cancellation and error handling capabilities: ``` ``` The cancellation system ensures that servers remain functional after request cancellations and that pending requests are properly cleaned up when connections are lost. Sources: [tests/shared/test\\_session.py48-123](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_session.py#L48-L123) [tests/server/test\\_cancel\\_handling.py25-111](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_cancel_handling.py#L25-L111) [tests/shared/test\\_session.py125-171](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_session.py#L125-L171) ## Integration with Server Framework ServerSession integrates closely with the broader MCP server framework: ``` ``` ServerSession serves as the communication bridge between the protocol layer and application logic, handling the low-level details of message transmission while providing a clean interface for server implementations. Sources: [src/mcp/server/session.py83-100](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py#L83-L100) [src/mcp/server/models.py13-18](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/models.py#L13-L18) [tests/server/test\\_session.py32-81](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_session.py#L32-L81) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Session Management](#session-management.md) - [BaseSession Architecture](#basesession-architecture.md) - [Message Correlation System](#message-correlation-system.md) - [Stream Management and Cleanup](#stream-management-and-cleanup.md) - [ServerSession Implementation](#serversession-implementation.md) - [Initialization State Flow](#initialization-state-flow.md) - [Client Capability Checking](#client-capability-checking.md) - [Session Communication Methods](#session-communication-methods.md) - [Notification Methods](#notification-methods.md) - [Request Methods](#request-methods.md) - [Request Cancellation and Error Handling](#request-cancellation-and-error-handling.md) - [Integration with Server Framework](#integration-with-server-framework.md)",
  "Examples & Tutorials | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Examples & Tutorials Relevant source files - [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py) - [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py) - [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py) This document provides practical examples and tutorials for building MCP servers and clients using the Python SDK. It demonstrates both low-level server implementations and high-level patterns, showing how to create functional MCP servers that expose tools, resources, and prompts to clients.",
  "For detailed FastMCP framework usage with decorators, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For client implementation patterns, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). For low-level protocol details, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md). ## Overview of Example Categories The MCP Python SDK includes several reference implementations that demonstrate core functionality: | Example Type | Purpose | Key Components | | ------------------- | ---------------------------- | ---------------------------------------------- | | **Resource Server** | Expose data and content | `list_resources()`, `read_resource()` handlers | | **Tool Server** | Provide executable functions | `list_tools()`, `call_tool()` handlers | | **Prompt Server** | Offer prompt templates | `list_prompts()`, `get_prompt()` handlers | All examples support multiple transport protocols (stdio, SSE) and follow consistent patterns using the low-level `Server` class from `mcp.server.lowlevel`. ## Low-Level Server Implementation Patterns ### Basic Server Structure The foundation of all MCP servers follows this pattern: ``` ``` **Sources:** [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py34-93](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L34-L93) [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py30-93](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L30-L93) [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py42-112](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L42-L112) ### Resource Server Example The resource server demonstrates how to expose readable data sources through the MCP protocol: ``` ``` **Key Implementation Details:** - **Resource Registry**: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py9-22](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L9-L22) defines `SAMPLE_RESOURCES` dictionary containing static content - **List Handler**: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py36-47](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L36-L47) creates `types.Resource` objects with `FileUrl` URIs - **Read Handler**: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py49-58](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L49-L58) parses URIs and returns `ReadResourceContents` **Sources:** [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py9-58](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L9-L58) ### Tool Server Example The tool server shows how to expose executable functions that clients can invoke: ``` ``` **Key Implementation Details:** - **Tool Function**: [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py11-18](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L11-L18) implements `fetch_website()` with `create_mcp_http_client` - **Schema Definition**: [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py47-56](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L47-L56) defines JSON schema for `url` parameter - **Tool Execution**: [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py32-38](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L32-L38) validates arguments and calls core function **Sources:** [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py11-58](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L11-L58) ### Prompt Server Example The prompt server demonstrates how to create parameterized prompt templates: **Key Implementation Details:**",
  "- **Message Creation**: [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py8-30](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L8-L30) implements `create_messages()` function with optional context and topic - **Prompt Registration**: [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py44-64](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L44-L64) defines `types.Prompt` with `types.PromptArgument` specifications - **Template Logic**: [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py66-77](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L66-L77) processes arguments and returns `types.GetPromptResult` **Sources:** [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py8-77](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L8-L77) ## Transport Configuration Patterns All example servers support dual transport modes using a consistent CLI pattern: ### Transport Selection Logic ``` ``` **Implementation Details:** - **CLI Setup**: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py25-32](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L25-L32) defines consistent command-line interface - **stdio Transport**: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py84-91](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L84-L91) uses `stdio_server()` context manager with `anyio.run()` - **SSE Transport**: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py60-83](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L60-L83) integrates `SseServerTransport` with Starlette ASGI application **Sources:** [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py25-93](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L25-L93) [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py21-93](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L21-L93) [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py33-112](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L33-L112) ## Common Development Patterns ### Error Handling All examples implement consistent error handling patterns: - Resource servers validate URIs and check resource existence [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py50-56](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L50-L56) - Tool servers validate tool names and required arguments [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py34-37](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L34-L37) - Prompt servers validate prompt names before processing [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py68-69](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L68-L69) ### Type System Integration Examples demonstrate proper use of MCP type system:",
  "- Import `mcp.types` for protocol types [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py3](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L3-L3) - Use `types.Resource`, `types.Tool`, `types.Prompt` for metadata [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py39-45](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L39-L45) - Return appropriate content types like `ReadResourceContents` and `TextContent` [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py58](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L58-L58) For more advanced server implementations using the FastMCP framework, see [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md). For client usage examples, see [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md). Dismiss Refresh this wiki Enter email to refresh ### On this page - [Examples & Tutorials](#examples-tutorials.md) - [Overview of Example Categories](#overview-of-example-categories.md) - [Low-Level Server Implementation Patterns](#low-level-server-implementation-patterns.md) - [Basic Server Structure](#basic-server-structure.md) - [Resource Server Example](#resource-server-example.md) - [Tool Server Example](#tool-server-example.md) - [Prompt Server Example](#prompt-server-example.md) - [Transport Configuration Patterns](#transport-configuration-patterns.md) - [Transport Selection Logic](#transport-selection-logic.md) - [Common Development Patterns](#common-development-patterns.md) - [Error Handling](#error-handling.md) - [Type System Integration](#type-system-integration.md)",
  "FastMCP Server Architecture | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # FastMCP Server Architecture Relevant source files",
  "- [src/mcp/server/fastmcp/\\_\\_init\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/__init__.py) - [src/mcp/server/fastmcp/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py) - [src/mcp/server/fastmcp/utilities/func\\_metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py) - [src/mcp/server/fastmcp/utilities/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/types.py) - [tests/server/fastmcp/test\\_func\\_metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_func_metadata.py) - [tests/server/fastmcp/test\\_server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_server.py) This document explains the internal architecture of the FastMCP server framework, including its core components, managers, function introspection system, and transport integration. FastMCP provides a high-level, decorator-based interface for building MCP servers that automatically handles schema generation, validation, and protocol compliance. For information about using FastMCP decorators and APIs, see [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) and [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md). For details about the underlying protocol implementation, see [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md). ## Core Architecture Overview FastMCP implements a layered architecture that wraps the low-level MCP server with higher-level abstractions and automatic introspection capabilities. ``` ``` **Sources:** [src/mcp/server/fastmcp/server.py122-206](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L122-L206) [src/mcp/server/fastmcp/utilities/func\\_metadata.py62-67](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L62-L67) ## FastMCP Main Server Class The `FastMCP` class serves as the primary entry point and orchestrator for the entire server framework. It manages settings, coordinates managers, and provides the decorator interface. ### Core Components The `FastMCP` class initializes and coordinates several key subsystems: - **Settings Management**: Uses `Settings` class with environment variable support (prefix `FASTMCP_`) - **Manager Coordination**: Initializes `ToolManager`, `ResourceManager`, and `PromptManager` - **Protocol Integration**: Wraps the low-level `MCPServer` with enhanced functionality - **Transport Apps**: Generates transport-specific applications (stdio, SSE, StreamableHTTP) ``` ``` **Sources:** [src/mcp/server/fastmcp/server.py152-209](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L152-L209) [src/mcp/server/fastmcp/server.py268-280](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L268-L280) ### Decorator Interface FastMCP provides three primary decorators that automatically handle function registration and introspection: | Decorator | Manager | Purpose | | ------------- | ----------------- | -------------------------------------------- | | `@tool()` | `ToolManager` | Register functions as callable tools | | `@resource()` | `ResourceManager` | Register functions as resources or templates | | `@prompt()` | `PromptManager` | Register functions as prompt generators | Each decorator uses the same underlying pattern: function introspection → manager registration → protocol handler binding. **Sources:** [src/mcp/server/fastmcp/server.py393-451](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L393-L451) [src/mcp/server/fastmcp/server.py479-578](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L479-L578) [src/mcp/server/fastmcp/server.py588-641](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L588-L641) ## Manager Subsystem Architecture",
  "The manager subsystem handles registration, validation, and execution of user-defined functions through a consistent interface pattern. ``` ``` **Sources:** [src/mcp/server/fastmcp/tools.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools.py) [src/mcp/server/fastmcp/resources.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources.py) [src/mcp/server/fastmcp/prompts.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts.py) ### Function Registration Flow All managers follow a consistent registration pattern: 1. **Function Analysis**: Extract signature, docstring, and type annotations 2. **Schema Generation**: Create Pydantic models for inputs and outputs 3. **Metadata Creation**: Build `Tool`, `Resource`, or `Prompt` objects 4. **Storage**: Register in manager's internal dictionary 5. **Validation**: Check for duplicates and conflicts **Sources:** [src/mcp/server/fastmcp/utilities/func\\_metadata.py166-284](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L166-L284) ## Function Introspection System The function introspection system (`func_metadata`) is the core of FastMCP's automatic schema generation and validation capabilities. ### FuncMetadata Components ``` ``` **Sources:** [src/mcp/server/fastmcp/utilities/func\\_metadata.py62-120](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L62-L120) ### Structured Output Detection FastMCP automatically determines whether a function should have structured output based on its return type annotation: | Return Type | Output Handling | Wrapping | | ------------------------------------ | ------------------------------ | ----------- | | `BaseModel` subclass | Direct schema generation | No wrapping | | Primitive types (`str`, `int`, etc.) | Wrapped in `{\"result\": value}` | Yes | | `dict[str, T]` | RootModel generation | No wrapping | | Generic types (`list[T]`, `Union`) | Wrapped in `{\"result\": value}` | Yes | | Unannotated classes | No structured output | N/A | **Sources:** [src/mcp/server/fastmcp/utilities/func\\_metadata.py287-371](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L287-L371) ## Context Injection System FastMCP provides automatic context injection that gives functions access to request-specific information and MCP capabilities. ``` ``` **Sources:** [src/mcp/server/fastmcp/utilities/context\\_injection.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/context_injection.py) [src/mcp/shared/context.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/context.py) ## Transport Integration Architecture FastMCP integrates with multiple transport protocols by generating transport-specific ASGI applications that wrap the core MCP server functionality. ``` ``` **Sources:** [src/mcp/server/fastmcp/server.py687-725](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L687-L725) [src/mcp/server/fastmcp/server.py752-884](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L752-L884) [src/mcp/server/fastmcp/server.py885-984](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L885-L984) ### Transport Application Generation Each transport type requires different ASGI application structure: 1. **stdio**: Direct async function for process communication 2. **SSE**: Starlette app with GET/POST endpoints and optional authentication 3. **StreamableHTTP**: Session-managed app with resumable connections The `FastMCP` class generates these applications on-demand, configuring middleware, authentication, and routing based on server settings. **Sources:** [src/mcp/server/fastmcp/server.py752-883](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L752-L883) ## Request Processing Flow The following diagram shows how requests flow through the FastMCP architecture from transport to function execution: ``` ```",
  "**Sources:** [src/mcp/server/fastmcp/server.py308-312](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/server.py#L308-L312) [src/mcp/server/fastmcp/utilities/func\\_metadata.py68-89](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L68-L89) This architecture enables FastMCP to provide a high-level, decorator-based interface while maintaining full compatibility with the MCP protocol and supporting multiple transport mechanisms. Dismiss Refresh this wiki Enter email to refresh ### On this page - [FastMCP Server Architecture](#fastmcp-server-architecture.md) - [Core Architecture Overview](#core-architecture-overview.md) - [FastMCP Main Server Class](#fastmcp-main-server-class.md) - [Core Components](#core-components.md) - [Decorator Interface](#decorator-interface.md) - [Manager Subsystem Architecture](#manager-subsystem-architecture.md) - [Function Registration Flow](#function-registration-flow.md) - [Function Introspection System](#function-introspection-system.md) - [FuncMetadata Components](#funcmetadata-components.md) - [Structured Output Detection](#structured-output-detection.md) - [Context Injection System](#context-injection-system.md) - [Transport Integration Architecture](#transport-integration-architecture.md) - [Transport Application Generation](#transport-application-generation.md) - [Request Processing Flow](#request-processing-flow.md)",
  "Low-Level Server Architecture | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Low-Level Server Architecture Relevant source files",
  "- [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py) - [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py) - [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py) This document covers the low-level `Server` class implementation in the MCP Python SDK, which provides the foundational layer for building MCP servers. This class handles protocol message dispatching, request validation, and the core server lifecycle without the convenience abstractions provided by FastMCP. For high-level server development using decorators and automatic schema generation, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For details about session management and client communication, see [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md). ## Server Class Overview The `Server` class in [src/mcp/server/lowlevel/server.py133-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L133-L158) serves as the foundation for all MCP server implementations. It manages handler registration, request dispatching, and protocol compliance. ``` ``` **Server Initialization and Configuration** The `Server` constructor takes essential metadata and an optional lifespan context manager: | Parameter | Type | Purpose | | -------------- | -------------------------- | ------------------------------------------ | | `name` | `str` | Server identifier | | `version` | `str \\| None` | Server version | | `instructions` | `str \\| None` | Usage instructions for clients | | `website_url` | `str \\| None` | Server website | | `icons` | `list[types.Icon] \\| None` | UI display icons | | `lifespan` | `Callable` | Async context manager for startup/shutdown | Sources: [src/mcp/server/lowlevel/server.py134-157](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L134-L157) ## Handler Registration System The Server class uses a decorator-based system to register handlers for different MCP request types. Each decorator corresponds to a specific MCP protocol message type. ``` ``` **Handler Registration Process** Each decorator method follows a consistent pattern: 1. Creates a wrapper function that adapts the user function to the expected signature 2. Stores the wrapper in `request_handlers` with the request type as key 3. Returns the original function unchanged For example, the `list_tools` decorator at [src/mcp/server/lowlevel/server.py409-437](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L409-L437) registers handlers for `types.ListToolsRequest` and manages the tool cache. Sources: [src/mcp/server/lowlevel/server.py238-596](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L238-L596) ## Request Processing Architecture The Server processes incoming requests through a multi-stage pipeline that includes message handling, context setup, and response generation. ``` ``` **Message Handling Flow** The main request processing occurs in `_handle_request` at [src/mcp/server/lowlevel/server.py656-712](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L656-L712): 1. **Handler Lookup**: Finds handler by request type in `request_handlers` 2. **Context Setup**: Creates and sets `RequestContext` with session and lifespan data 3. **Handler Execution**: Calls the registered handler function 4. **Error Handling**: Catches exceptions and converts to appropriate error responses 5. **Context Cleanup**: Resets the request context using `contextvars`",
  "Sources: [src/mcp/server/lowlevel/server.py598-723](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L598-L723) ## Tool System Architecture The Server implements a sophisticated tool handling system with caching, validation, and structured output support. ``` ``` **Tool Caching and Validation** The Server maintains a tool cache (`_tool_cache`) that stores `Tool` definitions for input/output validation. The cache is populated when `list_tools` handlers are called, as shown in [src/mcp/server/lowlevel/server.py418-433](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L418-L433) **Tool Call Processing** The `call_tool` decorator at [src/mcp/server/lowlevel/server.py465-547](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L465-L547) implements comprehensive tool call handling: 1. **Input Validation**: Uses `jsonschema` to validate arguments against `inputSchema` 2. **Tool Execution**: Calls the registered tool function 3. **Output Normalization**: Handles three output types: - `UnstructuredContent`: Raw content blocks - `StructuredContent`: JSON objects - `CombinationContent`: Both structured and unstructured 4. **Output Validation**: Validates structured output against `outputSchema` if defined Sources: [src/mcp/server/lowlevel/server.py449-547](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L449-L547) [src/mcp/server/lowlevel/server.py99-102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L99-L102) ## Context Management The Server uses Python's `contextvars` module to provide request-scoped context accessible throughout the request processing pipeline. ``` ``` **Request Context Structure** The `RequestContext` is created in `_handle_request` at [src/mcp/server/lowlevel/server.py677-684](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L677-L684) with: - Request ID and metadata from the message - `ServerSession` instance for client communication - Lifespan context from the server's lifespan manager - Optional request-specific data **Context Access** Handlers can access the current request context via the `request_context` property at [src/mcp/server/lowlevel/server.py232-236](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L232-L236) which retrieves the context variable or raises `LookupError` if called outside a request. Sources: [src/mcp/server/lowlevel/server.py105](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L105-L105) [src/mcp/shared/context.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/context.py) [src/mcp/server/lowlevel/server.py677-702](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L677-L702) ## Integration with Transport Layer The Server integrates with various transport mechanisms through the `ServerSession` and stream-based communication. ``` ``` **Server Run Method** The `run` method at [src/mcp/server/lowlevel/server.py598-635](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L598-L635) orchestrates the server lifecycle: 1. **Lifespan Management**: Enters the async context manager for startup/shutdown 2. **Session Creation**: Creates `ServerSession` with provided streams and options 3. **Message Processing**: Iterates over incoming messages and spawns handlers 4. **Graceful Shutdown**: Ensures proper cleanup of resources **Transport Examples** The example servers demonstrate different transport integrations: - **stdio**: Direct process communication via stdin/stdout - **SSE**: HTTP Server-Sent Events with Starlette ASGI integration - **HTTP**: Full bidirectional HTTP with session management",
  "Sources: [src/mcp/server/lowlevel/server.py598-635](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L598-L635) [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py60-91](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L60-L91) [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py60-91](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L60-L91) [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py79-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L79-L110) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Low-Level Server Architecture](#low-level-server-architecture.md) - [Server Class Overview](#server-class-overview.md) - [Handler Registration System](#handler-registration-system.md) - [Request Processing Architecture](#request-processing-architecture.md) - [Tool System Architecture](#tool-system-architecture.md) - [Context Management](#context-management.md) - [Integration with Transport Layer](#integration-with-transport-layer.md)",
  "Protocol Types & JSON-RPC | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Protocol Types & JSON-RPC Relevant source files - [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py) This document covers the core protocol type definitions and JSON-RPC message handling that form the foundation of the Model Context Protocol (MCP) Python SDK. It explains the type system defined in `mcp.types`, JSON-RPC message structure, and how these types enable protocol compliance and message validation.",
  "For information about session management and bidirectional communication patterns, see [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md). For transport-level message handling, see [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md). ## JSON-RPC Message Foundation The MCP protocol is built on JSON-RPC 2.0, with all communication following JSON-RPC message patterns. The SDK defines base message types that all protocol messages inherit from. ### Core JSON-RPC Types ``` ``` **Sources:** [src/mcp/types.py124-192](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L124-L192) The `JSONRPCMessage` union type allows the system to handle any valid JSON-RPC message, while the generic `Request` and `Notification` base classes provide type-safe parameter handling for specific MCP protocol messages. ### Message Structure and Metadata All MCP messages support a `_meta` field for protocol-level metadata, including progress tokens for long-running operations: | Component | Type | Purpose | | ---------------------------------- | ---------------- | ------------------------------------------ | | `RequestParams.Meta.progressToken` | `ProgressToken` | Enables out-of-band progress notifications | | `Result.meta` | `dict[str, Any]` | General metadata for responses | | `NotificationParams.Meta` | `BaseModel` | Metadata for notifications | **Sources:** [src/mcp/types.py43-75](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L43-L75) ## MCP Protocol Type Hierarchy The MCP protocol defines specific message types for each capability, organized into client requests, server requests, and bidirectional notifications. ### Protocol Message Categories ``` ``` **Sources:** [src/mcp/types.py248-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L248-L1349) ### Core Entity Types The protocol defines entity types that represent the primary MCP capabilities: ``` ``` **Sources:** [src/mcp/types.py425-890](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L425-L890) ## Message Flow Patterns MCP follows specific request/response and notification patterns that define how clients and servers communicate. ### Request/Response Cycles ``` ``` **Sources:** [src/mcp/server/lowlevel/server.py598-714](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L598-L714) ### Server Message Handling The low-level server processes messages through a type-safe dispatch system: ``` ``` **Sources:** [src/mcp/server/lowlevel/server.py637-714](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L637-L714) ## Type System Integration The MCP type system ensures protocol compliance through Pydantic model validation and structured message handling. ### Protocol Version Management The SDK supports protocol versioning with negotiation between client and server: | Constant | Value | Purpose | | ---------------------------- | -------------- | ---------------------------------- | | `LATEST_PROTOCOL_VERSION` | `\"2025-06-18\"` | Most recent protocol version | | `DEFAULT_NEGOTIATED_VERSION` | `\"2025-03-26\"` | Fallback when no version specified | **Sources:** [src/mcp/types.py26-34](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L26-L34) ### Union Types and Message Routing Protocol messages use Pydantic `RootModel` unions for type-safe message routing: ``` ``` **Sources:** [src/mcp/types.py1248-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1248-L1349) [src/mcp/server/lowlevel/server.py152-156](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L152-L156) ### Structured Output and Validation The protocol supports structured output validation for tools using JSON Schema: ``` ``` **Sources:** [src/mcp/server/lowlevel/server.py488-542](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L488-L542) The type system ensures that all protocol messages are validated against their schemas, enabling reliable communication and early error detection. This foundation supports the higher-level abstractions in FastMCP and client sessions while maintaining strict protocol compliance.",
  "**Sources:** [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349) [src/mcp/server/lowlevel/server.py465-547](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L465-L547) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Protocol Types & JSON-RPC](#protocol-types-json-rpc.md) - [JSON-RPC Message Foundation](#json-rpc-message-foundation.md) - [Core JSON-RPC Types](#core-json-rpc-types.md) - [Message Structure and Metadata](#message-structure-and-metadata.md) - [MCP Protocol Type Hierarchy](#mcp-protocol-type-hierarchy.md) - [Protocol Message Categories](#protocol-message-categories.md) - [Core Entity Types](#core-entity-types.md) - [Message Flow Patterns](#message-flow-patterns.md) - [Request/Response Cycles](#requestresponse-cycles.md) - [Server Message Handling](#server-message-handling.md) - [Type System Integration](#type-system-integration.md) - [Protocol Version Management](#protocol-version-management.md) - [Union Types and Message Routing](#union-types-and-message-routing.md) - [Structured Output and Validation](#structured-output-and-validation.md)",
  "STDIO Transport | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # STDIO Transport Relevant source files",
  "- [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py) - [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py) - [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py) - [src/mcp/client/stdio/\\_\\_init\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py) - [tests/client/test\\_stdio.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_stdio.py) - [tests/issues/test\\_1027\\_win\\_unreachable\\_cleanup.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_1027_win_unreachable_cleanup.py) - [tests/shared/test\\_win32\\_utils.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_win32_utils.py) The STDIO Transport enables MCP clients to communicate with servers by spawning processes and using standard input/output streams for message exchange. This transport is particularly useful for local development, CLI tools, and scenarios where servers are distributed as standalone executables. For HTTP-based transports, see [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) and [SSE Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md). ## Configuration The STDIO transport is configured using the `StdioServerParameters` class, which defines how the server process should be spawned and managed. ### StdioServerParameters The configuration model provides comprehensive control over process execution: ``` ``` **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py72-103](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L72-L103) The `env` parameter controls environment variable inheritance. When `None`, the system uses `get_default_environment()` which provides a secure subset of environment variables filtered for safety. ### Default Environment Security The transport implements security measures for environment variable inheritance: ``` ``` **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py51-69](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L51-L69) [src/mcp/client/stdio/\\_\\_init\\_\\_.py27-45](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L27-L45) ## Connection Management ### stdio\\_client Context Manager The `stdio_client` function provides the primary interface for establishing STDIO connections. It returns read and write streams for JSON-RPC message exchange: ``` ``` **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py105-216](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L105-L216) ### Message Processing The transport handles JSON-RPC message serialization automatically: ``` ``` **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py139-179](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L139-L179) ## Process Management ### Cross-Platform Process Creation The transport provides platform-specific process creation to ensure reliable child process management: ``` ``` **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py234-258](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L234-L258) [src/mcp/client/stdio/\\_\\_init\\_\\_.py218-232](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L218-L232) ### Process Tree Termination The transport implements comprehensive child process cleanup using platform-specific mechanisms: ``` ```",
  "**Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py261-277](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L261-L277) ## Shutdown and Cleanup ### MCP-Compliant Shutdown Sequence The transport implements the MCP specification's stdio shutdown sequence for graceful server termination: ``` ``` **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py190-215](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L190-L215) ### Timeout Configuration The transport uses configurable timeouts for process termination: - **`PROCESS_TERMINATION_TIMEOUT`**: 2.0 seconds for graceful exit after stdin closure - Escalation to SIGTERM if graceful exit fails - Final SIGKILL if SIGTERM is ignored **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py47-48](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L47-L48) ## Platform Considerations ### Windows-Specific Handling Windows requires special handling for executable resolution and process management: ``` ``` **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py228-232](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L228-L232) [src/mcp/client/stdio/\\_\\_init\\_\\_.py16-22](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L16-L22) ### Unix Process Groups Unix systems use process groups for reliable child process management: - **Session Creation**: `start_new_session=True` creates new process group - **Atomic Termination**: `os.killpg()` terminates entire process group - **Signal Escalation**: SIGTERM → SIGKILL escalation for unresponsive processes **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py250-256](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L250-L256) ## Error Handling and Edge Cases ### Connection Failures The transport handles various failure scenarios: ``` ``` **Sources:** [src/mcp/client/stdio/\\_\\_init\\_\\_.py131-137](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L131-L137) [src/mcp/client/stdio/\\_\\_init\\_\\_.py154-161](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L154-L161) ### Child Process Cleanup The transport includes comprehensive tests for child process scenarios: - **Basic Parent-Child**: Single child process termination - **Nested Trees**: Multi-level process hierarchies (parent → child → grandchild) - **Race Conditions**: Parent exits during cleanup sequence - **Signal Handling**: Processes that ignore specific signals **Sources:** [tests/client/test\\_stdio.py226-521](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_stdio.py#L226-L521) ## Integration Examples ### Basic Usage ``` ``` ### Custom Environment ``` ``` **Sources:** [tests/client/test\\_stdio.py37-81](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_stdio.py#L37-L81) [src/mcp/client/stdio/\\_\\_init\\_\\_.py127-128](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L127-L128) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [STDIO Transport](#stdio-transport.md) - [Configuration](#configuration.md) - [StdioServerParameters](#stdioserverparameters.md) - [Default Environment Security](#default-environment-security.md) - [Connection Management](#connection-management.md) - [stdio\\_client Context Manager](#stdio_client-context-manager.md) - [Message Processing](#message-processing.md) - [Process Management](#process-management.md) - [Cross-Platform Process Creation](#cross-platform-process-creation.md) - [Process Tree Termination](#process-tree-termination.md) - [Shutdown and Cleanup](#shutdown-and-cleanup.md) - [MCP-Compliant Shutdown Sequence](#mcp-compliant-shutdown-sequence.md) - [Timeout Configuration](#timeout-configuration.md) - [Platform Considerations](#platform-considerations.md) - [Windows-Specific Handling](#windows-specific-handling.md) - [Unix Process Groups](#unix-process-groups.md) - [Error Handling and Edge Cases](#error-handling-and-edge-cases.md) - [Connection Failures](#connection-failures.md) - [Child Process Cleanup](#child-process-cleanup.md) - [Integration Examples](#integration-examples.md) - [Basic Usage](#basic-usage.md) - [Custom Environment](#custom-environment.md)",
  "- [/modelcontextprotocol/python-sdk](./_modelcontextprotocol_python-sdk.md) - [/modelcontextprotocol/python-sdk/1-overview](./_modelcontextprotocol_python-sdk_1-overview.md) - [/modelcontextprotocol/python-sdk/2-fastmcp-server-framework](./_modelcontextprotocol_python-sdk_2-fastmcp-server-framework.md) - [/modelcontextprotocol/python-sdk/1.1-installation-and-dependencies](./_modelcontextprotocol_python-sdk_1.1-installation-and-dependencies.md) - [/modelcontextprotocol/python-sdk/1.2-key-concepts](./_modelcontextprotocol_python-sdk_1.2-key-concepts.md) - [/modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture](./_modelcontextprotocol_python-sdk_2.1-fastmcp-server-architecture.md) - [/modelcontextprotocol/python-sdk/2.2-tool-management](./_modelcontextprotocol_python-sdk_2.2-tool-management.md) - [/modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output](./_modelcontextprotocol_python-sdk_2.4-function-introspection-and-structured-output.md) - [/modelcontextprotocol/python-sdk/3-client-framework](./_modelcontextprotocol_python-sdk_3-client-framework.md) - [/modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management](./_modelcontextprotocol_python-sdk_2.3-resource-and-prompt-management.md) - [/modelcontextprotocol/python-sdk/3.1-clientsession-core](./_modelcontextprotocol_python-sdk_3.1-clientsession-core.md) - [/modelcontextprotocol/python-sdk/3.3-client-authentication](./_modelcontextprotocol_python-sdk_3.3-client-authentication.md) - [/modelcontextprotocol/python-sdk/4-protocol-and-message-system](./_modelcontextprotocol_python-sdk_4-protocol-and-message-system.md) - [/modelcontextprotocol/python-sdk/3.2-client-transports](./_modelcontextprotocol_python-sdk_3.2-client-transports.md) - [/modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc](./_modelcontextprotocol_python-sdk_4.1-protocol-types-and-json-rpc.md) - [/modelcontextprotocol/python-sdk/4.2-session-management](./_modelcontextprotocol_python-sdk_4.2-session-management.md) - [/modelcontextprotocol/python-sdk/5.2-server-sent-events-(sse)-transport](./_modelcontextprotocol_python-sdk_5.2-server-sent-events-(sse)-transport.md) - [/modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting](./_modelcontextprotocol_python-sdk_4.3-context-and-progress-reporting.md) - [/modelcontextprotocol/python-sdk/5.1-streamablehttp-transport](./_modelcontextprotocol_python-sdk_5.1-streamablehttp-transport.md) - [/modelcontextprotocol/python-sdk/5-transport-layer](./_modelcontextprotocol_python-sdk_5-transport-layer.md) - [/modelcontextprotocol/python-sdk/5.3-stdio-transport](./_modelcontextprotocol_python-sdk_5.3-stdio-transport.md) - [/modelcontextprotocol/python-sdk/5.4-transport-security](./_modelcontextprotocol_python-sdk_5.4-transport-security.md) - [/modelcontextprotocol/python-sdk/6-low-level-server-implementation](./_modelcontextprotocol_python-sdk_6-low-level-server-implementation.md) - [/modelcontextprotocol/python-sdk/6.1-low-level-server-architecture](./_modelcontextprotocol_python-sdk_6.1-low-level-server-architecture.md) - [/modelcontextprotocol/python-sdk/6.2-serversession-implementation](./_modelcontextprotocol_python-sdk_6.2-serversession-implementation.md) - [/modelcontextprotocol/python-sdk/7-authentication-and-security](./_modelcontextprotocol_python-sdk_7-authentication-and-security.md) - [/modelcontextprotocol/python-sdk/8-development-tools-and-cli](./_modelcontextprotocol_python-sdk_8-development-tools-and-cli.md) - [/modelcontextprotocol/python-sdk/8.2-development-environment](./_modelcontextprotocol_python-sdk_8.2-development-environment.md) - [/modelcontextprotocol/python-sdk/7.1-oauth-2.0-system](./_modelcontextprotocol_python-sdk_7.1-oauth-2.0-system.md) - [/modelcontextprotocol/python-sdk/8.1-mcp-cli-commands](./_modelcontextprotocol_python-sdk_8.1-mcp-cli-commands.md) - [/modelcontextprotocol/python-sdk/8.3-claude-desktop-integration](./_modelcontextprotocol_python-sdk_8.3-claude-desktop-integration.md) - [/modelcontextprotocol/python-sdk/9-examples-and-tutorials](./_modelcontextprotocol_python-sdk_9-examples-and-tutorials.md) - [/modelcontextprotocol/python-sdk/9.1-server-examples](./_modelcontextprotocol_python-sdk_9.1-server-examples.md) - [/modelcontextprotocol/python-sdk/9.2-client-examples](./_modelcontextprotocol_python-sdk_9.2-client-examples.md)",
  "Client Framework | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Client Framework Relevant source files",
  "- [src/mcp/client/\\_\\_main\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/__main__.py) - [src/mcp/client/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py) - [src/mcp/shared/memory.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/memory.py) - [src/mcp/shared/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py) - [tests/client/test\\_logging\\_callback.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_logging_callback.py) - [tests/client/test\\_session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_session.py) The Client Framework provides the core client-side components for connecting to and interacting with MCP servers. This framework handles session management, protocol communication, request/response patterns, and server capability discovery. It abstracts the underlying transport mechanisms while providing a high-level API for MCP operations. For information about server-side implementations, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) and [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md). For transport-specific client implementations, see [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md). For authentication details, see [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md). ## ClientSession Architecture The `ClientSession` class serves as the primary interface for MCP client applications, built on top of the `BaseSession` foundation for session management and message handling. ``` ``` **Sources:** [src/mcp/client/session.py101-136](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L101-L136) [src/mcp/shared/session.py159-200](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L159-L200) ## Session Lifecycle and Initialization The client session follows a structured initialization process to establish protocol compatibility and exchange capability information with the server. ``` ``` **Sources:** [src/mcp/client/session.py137-174](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L137-L174) [tests/client/test\\_session.py30-114](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_session.py#L30-L114) ## Request and Response Handling The framework implements a sophisticated request/response system with progress tracking, timeout management, and structured validation. ### Core Request Methods | Method | Purpose | Request Type | Response Type | | ------------------ | ---------------------------- | ---------------------- | --------------------- | | `call_tool()` | Execute server tools | `CallToolRequest` | `CallToolResult` | | `list_tools()` | Discover available tools | `ListToolsRequest` | `ListToolsResult` | | `read_resource()` | Access server resources | `ReadResourceRequest` | `ReadResourceResult` | | `list_resources()` | Discover available resources | `ListResourcesRequest` | `ListResourcesResult` | | `get_prompt()` | Retrieve prompt templates | `GetPromptRequest` | `GetPromptResult` | | `complete()` | Get completion suggestions | `CompleteRequest` | `CompleteResult` | **Sources:** [src/mcp/client/session.py270-297](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L270-L297) [src/mcp/client/session.py366-383](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L366-L383) ### Tool Output Validation The client automatically validates structured tool outputs against server-provided schemas: ``` ``` **Sources:** [src/mcp/client/session.py298-319](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L298-L319) [src/mcp/client/session.py377-381](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L377-L381) ## Progress and Notification System The client framework supports bidirectional progress reporting and server-initiated notifications through callback functions and progress tokens. ### Progress Callback Integration ``` ```",
  "**Sources:** [src/mcp/shared/session.py242-253](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L242-L253) [src/mcp/shared/session.py389-399](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L389-L399) ### Server Request Handling The client can handle server-initiated requests through configurable callback functions: | Callback Type | Purpose | Default Behavior | | ------------------- | ----------------------------- | ----------------------------- | | `SamplingFnT` | Handle LLM sampling requests | Returns \"not supported\" error | | `ElicitationFnT` | Handle content elicitation | Returns \"not supported\" error | | `ListRootsFnT` | Handle root directory listing | Returns \"not supported\" error | | `LoggingFnT` | Handle server log messages | No-op (silent) | | `MessageHandlerFnT` | Handle all incoming messages | No-op checkpoint | **Sources:** [src/mcp/client/session.py21-96](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L21-L96) [src/mcp/client/session.py388-434](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L388-L434) ## Transport Integration The client framework abstracts transport details through stream-based interfaces, allowing it to work with various transport mechanisms. ``` ``` **Sources:** [src/mcp/client/session.py110-128](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L110-L128) [src/mcp/client/\\_\\_main\\_\\_.py36-64](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/__main__.py#L36-L64) ## Testing and Development Utilities The framework includes memory-based transport utilities for testing and development scenarios. ### Memory Transport Factory The `create_connected_server_and_client_session()` function provides a complete testing environment with in-memory communication: ``` ``` **Sources:** [src/mcp/shared/memory.py28-50](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/memory.py#L28-L50) [src/mcp/shared/memory.py53-99](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/memory.py#L53-L99) ### Error Handling and Exception Management The client framework provides comprehensive error handling for various failure scenarios: | Error Type | Source | Handling | | --------------------------- | ------------------------- | -------------------------------------------- | | `TimeoutError` | Request timeout | Converted to `McpError` with timeout details | | `JSONRPCError` | Server error response | Converted to `McpError` with server error | | `ValidationError` | Tool output validation | Runtime error with validation details | | `anyio.ClosedResourceError` | Transport closure | Graceful session termination | | `RuntimeError` | Protocol version mismatch | Immediate session failure | **Sources:** [src/mcp/shared/session.py273-283](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L273-L283) [src/mcp/shared/session.py416-436](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L416-L436) [src/mcp/client/session.py314-318](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L314-L318) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Client Framework](#client-framework.md) - [ClientSession Architecture](#clientsession-architecture.md) - [Session Lifecycle and Initialization](#session-lifecycle-and-initialization.md) - [Request and Response Handling](#request-and-response-handling.md) - [Core Request Methods](#core-request-methods.md) - [Tool Output Validation](#tool-output-validation.md) - [Progress and Notification System](#progress-and-notification-system.md) - [Progress Callback Integration](#progress-callback-integration.md) - [Server Request Handling](#server-request-handling.md) - [Transport Integration](#transport-integration.md) - [Testing and Development Utilities](#testing-and-development-utilities.md) - [Memory Transport Factory](#memory-transport-factory.md) - [Error Handling and Exception Management](#error-handling-and-exception-management.md)",
  "Development Environment | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Development Environment Relevant source files",
  "- [.github/workflows/publish-docs-manually.yml](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.github/workflows/publish-docs-manually.yml) - [.github/workflows/publish-pypi.yml](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.github/workflows/publish-pypi.yml) - [.github/workflows/shared.yml](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.github/workflows/shared.yml) - [.pre-commit-config.yaml](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.pre-commit-config.yaml) - [CLAUDE.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md) - [CODE\\_OF\\_CONDUCT.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CODE_OF_CONDUCT.md) - [CONTRIBUTING.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CONTRIBUTING.md) - [SECURITY.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/SECURITY.md) - [examples/clients/simple-chatbot/README.MD](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/README.MD) - [examples/servers/simple-streamablehttp-stateless/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-streamablehttp-stateless/README.md) - [examples/servers/simple-streamablehttp/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-streamablehttp/README.md) This document covers the development setup, code quality standards, pre-commit hooks, and contribution workflow for the MCP Python SDK. It provides the complete toolchain configuration and processes for maintaining code quality using uv and modern Python development tools. For information about CLI commands and project management workflows, see [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md). For Claude Desktop integration setup, see [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md). ## Development Setup Requirements The MCP Python SDK uses a modern Python development stack with strict tooling requirements to ensure code quality and consistency. ### Core Requirements | Requirement | Version | Purpose | | ----------- | ------- | ------------------------------ | | Python | 3.10+ | Runtime environment | | uv | Latest | Package and project management | | pre-commit | Latest | Git hook automation | ### Installation Process The development environment setup follows a specific sequence to ensure all tools are properly configured: ``` ``` **Development Environment Setup Flow** Sources: [CONTRIBUTING.md7-22](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CONTRIBUTING.md#L7-L22) [CLAUDE.md7-12](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L7-L12) ## Package Management with uv The project exclusively uses `uv` for all package management operations. Traditional `pip` usage is explicitly forbidden to ensure consistent dependency resolution and lock file management. ### uv Command Patterns ``` ``` **uv Package Management Commands** | Operation | Command | Purpose | | ------------------ | ------------------------------------------------ | -------------------------------------- | | Add dependency | `uv add package` | Install production dependency | | Add dev dependency | `uv add --dev package` | Install development dependency | | Upgrade package | `uv add --dev package --upgrade-package package` | Update specific package | | Run tool | `uv run tool` | Execute tool with project dependencies | | Sync dependencies | `uv sync --frozen --all-extras --dev` | Install all dependencies from lock | | Check lock file | `uv lock --check` | Verify lock file is current | Sources: [CLAUDE.md7-12](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L7-L12) [.pre-commit-config.yaml48-52](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.pre-commit-config.yaml#L48-L52) ## Code Quality Standards The project enforces strict code quality standards through automated tooling and explicit requirements for all contributions. ### Code Quality Tools Integration ``` ``` **Code Quality Tool Chain** ### Quality Requirements",
  "| Requirement | Tool | Configuration | | -------------- | ------- | ------------------------ | | Line length | ruff | 120 characters maximum | | Type hints | pyright | Required for all code | | Docstrings | manual | Required for public APIs | | Import sorting | ruff | I001 rule enforcement | | Function size | manual | Small, focused functions | ### Tool Execution Commands | Tool | Format Command | Check Command | | --------------- | ------------------------------- | ------------------------------------ | | ruff | `uv run --frozen ruff format .` | `uv run --frozen ruff check .` | | ruff (with fix) | N/A | `uv run --frozen ruff check . --fix` | | pyright | N/A | `uv run --frozen pyright` | Sources: [CLAUDE.md14-20](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L14-L20) [CLAUDE.md60-78](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L60-L78) [.pre-commit-config.yaml26-46](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.pre-commit-config.yaml#L26-L46) ## Pre-commit Hooks System The project uses an automated pre-commit hook system that runs multiple quality checks on every commit to ensure code standards are maintained. ### Pre-commit Hook Configuration ``` ``` **Pre-commit Hook Execution Flow** ### Hook Configuration Details The pre-commit configuration in [.pre-commit-config.yaml1-59](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.pre-commit-config.yaml#L1-L59) defines the complete hook pipeline: | Hook | Type | Purpose | Files | | --------------- | -------- | ----------------------------- | ------------------------------- | | prettier | External | Format YAML/JSON5 | `types_or: [yaml, json5]` | | markdownlint | External | Lint Markdown files | `types: [markdown]` | | ruff-format | Local | Python code formatting | `types: [python]` | | ruff | Local | Python linting with auto-fix | `types: [python]` | | pyright | Local | Python type checking | `types: [python]` | | uv-lock-check | Local | Verify uv.lock currency | `^(pyproject\\.toml\\|uv\\.lock)$` | | readme-snippets | Local | Validate README code snippets | README and example files | ### Pre-commit Execution | Operation | Command | Purpose | | ------------------- | ------------------------------------------------------------------- | ----------------------------- | | Install hooks | `uv tool install pre-commit --with pre-commit-uv --force-reinstall` | Set up pre-commit system | | Run on all files | `pre-commit run --all-files` | Manual execution of all hooks | | Automatic execution | Triggered on `git commit` | Automatic quality gate | Sources: [.pre-commit-config.yaml1-59](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.pre-commit-config.yaml#L1-L59) [CONTRIBUTING.md17-22](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CONTRIBUTING.md#L17-L22) [CLAUDE.md80-87](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L80-L87) ## Testing Framework The project uses pytest with anyio for async testing, with specific configuration requirements to ensure consistent test execution. ### Testing Configuration ``` ``` **Testing Framework Architecture** ### Testing Requirements | Requirement | Implementation | Notes | | ------------- | --------------------- | --------------------------------------- | | Test runner | pytest | Framework: `uv run --frozen pytest` | | Async testing | anyio | NOT asyncio for async tests | | Coverage | Edge cases and errors | Required for all code paths | | New features | Tests required | Must include tests with feature | | Bug fixes | Regression tests | Must include test preventing regression | ### Test Execution Commands | Command | Purpose | Environment Variable | | ---------------------------------------------------------- | -------------------------- | ----------------------------------- | | `uv run --frozen pytest` | Standard test execution | None | | `PYTEST_DISABLE_PLUGIN_AUTOLOAD=\"\" uv run --frozen pytest` | Plugin conflict resolution | `PYTEST_DISABLE_PLUGIN_AUTOLOAD=\"\"` |",
  "Sources: [CLAUDE.md21-27](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L21-L27) [CLAUDE.md111-114](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L111-L114) [CONTRIBUTING.md34-38](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CONTRIBUTING.md#L34-L38) ## Development Workflow The development workflow integrates all quality tools into a structured process that ensures code quality and proper contribution management. ### Complete Development Workflow ``` ``` **Complete Development Workflow Process** ### Error Resolution Priority The development guidelines specify a specific order for resolving CI failures: | Priority | Issue Type | Common Solutions | | -------- | ----------- | -------------------------------------------------- | | 1 | Formatting | `uv run ruff format .` | | 2 | Type errors | Add None checks, type narrowing, verify signatures | | 3 | Linting | `uv run ruff check . --fix` | ### Git Commit Standards | Scenario | Command | Purpose | | --------------------------- | ----------------------------------------------- | --------------------- | | Bug fixes from user reports | `git commit --trailer \"Reported-by:<name>\"` | Credit user reporting | | GitHub issue fixes | `git commit --trailer \"Github-Issue:#<number>\"` | Link to issue | | General commits | Standard commit message | No special trailers | **Prohibited:** Any mention of co-authored-by or development tools in commit messages. Sources: [CONTRIBUTING.md25-66](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CONTRIBUTING.md#L25-L66) [CLAUDE.md28-44](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L28-L44) [CLAUDE.md89-123](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L89-L123) ## Exception Handling Standards The project enforces specific exception handling patterns to ensure proper error reporting and debugging capabilities. ### Exception Handling Rules | Rule | Implementation | Example | | ------------------- | --------------------------------------------- | -------------------------------------- | | Logging | Use `logger.exception()` not `logger.error()` | `logger.exception(\"Failed\")` | | Message format | Don't include exception in message | NOT `logger.exception(f\"Failed: {e}\")` | | Specific exceptions | Catch specific types where possible | `except (OSError, PermissionError):` | | General exceptions | Only for top-level handlers | `except Exception:` (limited use) | ### Exception Categories | Operation Type | Recommended Exceptions | Purpose | | ------------------ | --------------------------------- | -------------------------------- | | File operations | `(OSError, PermissionError)` | Handle file system errors | | JSON operations | `json.JSONDecodeError` | Handle JSON parsing errors | | Network operations | `(ConnectionError, TimeoutError)` | Handle network failures | | Top-level handlers | `Exception` | Prevent crashes in critical code | Sources: [CLAUDE.md124-135](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md#L124-L135) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [Development Environment](#development-environment.md) - [Development Setup Requirements](#development-setup-requirements.md) - [Core Requirements](#core-requirements.md) - [Installation Process](#installation-process.md) - [Package Management with uv](#package-management-with-uv.md) - [uv Command Patterns](#uv-command-patterns.md) - [Code Quality Standards](#code-quality-standards.md) - [Code Quality Tools Integration](#code-quality-tools-integration.md) - [Quality Requirements](#quality-requirements.md) - [Tool Execution Commands](#tool-execution-commands.md) - [Pre-commit Hooks System](#pre-commit-hooks-system.md) - [Pre-commit Hook Configuration](#pre-commit-hook-configuration.md) - [Hook Configuration Details](#hook-configuration-details.md) - [Pre-commit Execution](#pre-commit-execution.md) - [Testing Framework](#testing-framework.md) - [Testing Configuration](#testing-configuration.md) - [Testing Requirements](#testing-requirements.md) - [Test Execution Commands](#test-execution-commands.md) - [Development Workflow](#development-workflow.md) - [Complete Development Workflow](#complete-development-workflow.md) - [Error Resolution Priority](#error-resolution-priority.md) - [Git Commit Standards](#git-commit-standards.md) - [Exception Handling Standards](#exception-handling-standards.md) - [Exception Handling Rules](#exception-handling-rules.md) - [Exception Categories](#exception-categories.md)",
  "Server Examples | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Server Examples Relevant source files",
  "- [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py) - [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py) - [examples/servers/simple-streamablehttp-stateless/mcp\\_simple\\_streamablehttp\\_stateless/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-streamablehttp-stateless/mcp_simple_streamablehttp_stateless/server.py) - [examples/servers/simple-streamablehttp/mcp\\_simple\\_streamablehttp/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/server.py) - [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py) - [examples/snippets/servers/direct\\_execution.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/snippets/servers/direct_execution.py) - [examples/snippets/servers/structured\\_output.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/snippets/servers/structured_output.py) - [tests/issues/test\\_88\\_random\\_error.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_88_random_error.py) - [tests/server/fastmcp/test\\_integration.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_integration.py) This document provides comprehensive examples of MCP server implementations using both the low-level `Server` class and the high-level `FastMCP` framework. These examples demonstrate various MCP capabilities including tools, resources, prompts, progress reporting, and different transport mechanisms. For client-side examples and integration patterns, see [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md). For detailed FastMCP framework documentation, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). ## Server Implementation Approaches The MCP Python SDK provides two primary approaches for building servers, each suited for different use cases and complexity levels. ### Server Implementation Architecture ``` ``` Sources: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py1-94](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L1-L94) [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py1-94](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L1-L94) [examples/snippets/servers/structured\\_output.py1-98](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/snippets/servers/structured_output.py#L1-L98) ## Low-Level Server Examples The low-level `Server` class provides direct control over MCP protocol handling and is suitable for complex server implementations requiring fine-grained control. ### Basic Resource Server The simple resource server demonstrates fundamental resource serving capabilities using the low-level `Server` class. ``` ``` Sources: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py34-58](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L34-L58) ### Basic Tool Server The simple tool server shows HTTP client functionality and tool execution patterns. ``` ``` Sources: [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py32-58](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L32-L58) ### Basic Prompt Server The simple prompt server demonstrates template-based prompt generation. ``` ``` Sources: [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py44-77](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L44-L77) ## StreamableHTTP Transport Examples StreamableHTTP transport enables bidirectional communication with session management and resumability features. ### StreamableHTTP with Event Store ``` ```",
  "Sources: [examples/servers/simple-streamablehttp/mcp\\_simple\\_streamablehttp/server.py47-165](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-streamablehttp/mcp_simple_streamablehttp/server.py#L47-L165) ### Stateless StreamableHTTP ``` ``` Sources: [examples/servers/simple-streamablehttp-stateless/mcp\\_simple\\_streamablehttp\\_stateless/server.py97-140](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-streamablehttp-stateless/mcp_simple_streamablehttp_stateless/server.py#L97-L140) ## FastMCP Framework Examples FastMCP provides a decorator-based approach for rapid server development with automatic schema generation and simplified setup. ### Structured Output Example ``` ``` Sources: [examples/snippets/servers/structured\\_output.py9-98](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/snippets/servers/structured_output.py#L9-L98) ### Direct Execution Example ``` ``` Sources: [examples/snippets/servers/direct\\_execution.py10-27](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/snippets/servers/direct_execution.py#L10-L27) ## Feature-Specific Examples The integration tests demonstrate various MCP features through focused example servers. ### Progress Reporting ``` ``` Sources: [tests/server/fastmcp/test\\_integration.py392-440](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_integration.py#L392-L440) ### Notification System ``` ``` Sources: [tests/server/fastmcp/test\\_integration.py524-569](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_integration.py#L524-L569) ### Sampling and Elicitation ``` ``` Sources: [tests/server/fastmcp/test\\_integration.py442-521](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_integration.py#L442-L521) ## Transport Configuration Patterns All server examples support multiple transport configurations, allowing flexible deployment options. ### Universal Transport Pattern ``` ``` Sources: [examples/servers/simple-resource/mcp\\_simple\\_resource/server.py60-93](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-resource/mcp_simple_resource/server.py#L60-L93) [examples/servers/simple-tool/mcp\\_simple\\_tool/server.py60-93](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-tool/mcp_simple_tool/server.py#L60-L93) [examples/servers/simple-prompt/mcp\\_simple\\_prompt/server.py79-112](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-prompt/mcp_simple_prompt/server.py#L79-L112) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Server Examples](#server-examples.md) - [Server Implementation Approaches](#server-implementation-approaches.md) - [Server Implementation Architecture](#server-implementation-architecture.md) - [Low-Level Server Examples](#low-level-server-examples.md) - [Basic Resource Server](#basic-resource-server.md) - [Basic Tool Server](#basic-tool-server.md) - [Basic Prompt Server](#basic-prompt-server.md) - [StreamableHTTP Transport Examples](#streamablehttp-transport-examples.md) - [StreamableHTTP with Event Store](#streamablehttp-with-event-store.md) - [Stateless StreamableHTTP](#stateless-streamablehttp.md) - [FastMCP Framework Examples](#fastmcp-framework-examples.md) - [Structured Output Example](#structured-output-example.md) - [Direct Execution Example](#direct-execution-example.md) - [Feature-Specific Examples](#feature-specific-examples.md) - [Progress Reporting](#progress-reporting.md) - [Notification System](#notification-system.md) - [Sampling and Elicitation](#sampling-and-elicitation.md) - [Transport Configuration Patterns](#transport-configuration-patterns.md) - [Universal Transport Pattern](#universal-transport-pattern.md)",
  "Server-Sent Events (SSE) Transport | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Server-Sent Events (SSE) Transport Relevant source files - [src/mcp/client/sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py) - [src/mcp/client/streamable\\_http.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py) - [src/mcp/server/sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py) - [tests/client/test\\_notification\\_response.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_notification_response.py) - [tests/shared/test\\_sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py)",
  "This document covers the Server-Sent Events (SSE) transport implementation for MCP servers, which enables real-time bidirectional communication through a combination of SSE streaming for server-to-client messages and HTTP POST requests for client-to-server messages. For information about the client-side SSE implementation, see [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md). For HTTP-based transports with session management, see [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md). For security features across all transports, see [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md). ## Architecture Overview The SSE transport provides a hybrid communication model that combines the real-time capabilities of Server-Sent Events with the reliability of HTTP POST requests for bidirectional MCP communication. ### SSE Transport Architecture ``` ``` Sources: [src/mcp/server/sse.py64-250](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L64-L250) [tests/shared/test\\_sse.py83-104](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L83-L104) ### Message Flow Architecture ``` ``` Sources: [src/mcp/server/sse.py121-249](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L121-L249) [tests/shared/test\\_sse.py183-195](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L183-L195) ## SSE Server Transport Implementation The `SseServerTransport` class provides the core SSE transport functionality through two main ASGI applications. ### Core Components | Component | Purpose | Implementation | | ----------------------- | ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------- | | `SseServerTransport` | Main transport class | [src/mcp/server/sse.py64-79](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L64-L79) | | `connect_sse()` | Handles SSE connection setup | [src/mcp/server/sse.py122-199](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L122-L199) | | `handle_post_message()` | Processes client POST requests | [src/mcp/server/sse.py201-249](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L201-L249) | | Memory Streams | Internal message passing | [src/mcp/server/sse.py135-142](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L135-L142) | | Security Middleware | Request validation | [src/mcp/server/sse.py118](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L118-L118) | ### Transport Initialization The transport requires an endpoint configuration and optional security settings: ``` ``` The endpoint validation ensures only relative paths are accepted to prevent security issues [src/mcp/server/sse.py105-115](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L105-L115) Sources: [src/mcp/server/sse.py80-120](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L80-L120) [tests/shared/test\\_sse.py86-89](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L86-L89) ### ASGI Integration Pattern ``` ``` Sources: [src/mcp/server/sse.py6-37](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L6-L37) [tests/shared/test\\_sse.py97-104](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L97-L104) ## Session Management The SSE transport implements session-based communication using UUID session identifiers and memory streams for message routing. ### Session Lifecycle",
  "1. **Session Creation**: Generated during `connect_sse()` call [src/mcp/server/sse.py144-146](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L144-L146) 2. **Stream Setup**: Memory object streams created for bidirectional communication [src/mcp/server/sse.py135-142](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L135-L142) 3. **Endpoint Communication**: Client receives POST endpoint via initial SSE event [src/mcp/server/sse.py161-168](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L161-L168) 4. **Message Routing**: POST requests routed to correct session via session\\_id [src/mcp/server/sse.py216-228](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L216-L228) 5. **Cleanup**: Streams closed when SSE connection terminates [src/mcp/server/sse.py191-193](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L191-L193) ### Session Storage and Routing ``` ``` Sources: [src/mcp/server/sse.py77](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L77-L77) [src/mcp/server/sse.py144-146](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L144-L146) [src/mcp/server/sse.py216-228](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L216-L228) ## Security Features The SSE transport includes built-in security measures to prevent common web vulnerabilities. ### Request Validation The transport uses `TransportSecurityMiddleware` for DNS rebinding protection and origin validation: - **Host Header Validation**: Ensures requests target allowed hosts [src/mcp/server/sse.py129](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L129-L129) - **Origin Header Checking**: Validates request origins for POST requests [src/mcp/server/sse.py206](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L206-L206) - **Relative Path Enforcement**: Prevents absolute URLs in endpoint configuration [src/mcp/server/sse.py106-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L106-L110) ### Error Handling The transport provides comprehensive error responses with specific HTTP status codes and messages: | Error Type | Status Code | Response Message | Scenario | | ------------------- | ----------- | ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Missing session\\_id | 400 | \"session\\_id is required\" | POST without session parameter [src/mcp/server/sse.py213](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L213-L213) | | Invalid session\\_id | 400 | \"Invalid session ID\" | Malformed UUID in request [src/mcp/server/sse.py221](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L221-L221) | | Session not found | 404 | \"Could not find session\" | Request for non-existent session [src/mcp/server/sse.py227](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L227-L227) | | Parse error | 400 | \"Could not parse message\" | Invalid JSON in message body [src/mcp/server/sse.py238](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L238-L238) | | Validation failure | Variable | Security middleware response | DNS rebinding protection [src/mcp/server/sse.py129-132](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L129-L132) | ### Client-Side Error Handling The SSE client implements robust error handling for various failure scenarios:",
  "- **Origin Mismatch**: Raises `ValueError` when endpoint origin doesn't match connection origin [src/mcp/client/sse.py85-89](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L85-L89) - **Message Parsing**: Catches exceptions during JSON parsing and forwards to error stream [src/mcp/client/sse.py99-102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L99-L102) - **Connection Failures**: Automatically propagates HTTP connection errors through the read stream [src/mcp/client/sse.py108-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L108-L110) - **Timeout Handling**: Configurable `sse_read_timeout` for SSE event reading [src/mcp/client/sse.py28](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L28-L28) Sources: [src/mcp/server/sse.py210-241](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L210-L241) [src/mcp/client/sse.py85-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L85-L110) ## Client Integration The SSE transport integrates with the client-side `sse_client` function to provide seamless MCP communication through a sophisticated endpoint discovery and validation process. ### SSE Client Architecture ``` ``` Sources: [src/mcp/client/sse.py24-144](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L24-L144) [src/mcp/client/sse.py68-112](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L68-L112) ### Endpoint Discovery and Security The SSE client implements a secure endpoint discovery process to prevent cross-origin attacks: 1. **Initial Connection**: Client establishes SSE connection to server endpoint [src/mcp/client/sse.py60-66](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L60-L66) 2. **Endpoint Event**: Server sends `endpoint` event with POST URL [src/mcp/client/sse.py75-76](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L75-L76) 3. **Origin Validation**: Client validates endpoint origin matches connection origin [src/mcp/client/sse.py79-89](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L79-L89) 4. **URL Construction**: Client constructs POST endpoint using `urljoin` for proper path resolution [src/mcp/client/sse.py76](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L76-L76) ### Client Connection Pattern ``` ``` ### Task Management The `sse_client` function creates two concurrent tasks for bidirectional communication: | Task | Purpose | Implementation | | ------------- | ----------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- | | `sse_reader` | Handles SSE events and endpoint discovery | [src/mcp/client/sse.py68-112](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L68-L112) | | `post_writer` | Sends client messages via POST requests | [src/mcp/client/sse.py114-132](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L114-L132) | The reader task processes different SSE event types: - `endpoint`: Establishes POST endpoint URL with security validation - `message`: Forwards server messages to the client session - Unknown events: Logged as warnings for debugging Sources: [src/mcp/client/sse.py74-107](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L74-L107) ### Request Context Propagation The transport preserves request context from the initial SSE connection and makes it available to MCP handlers: ``` ```",
  "Sources: [tests/shared/test\\_sse.py183-201](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L183-L201) [tests/shared/test\\_sse.py404-433](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L404-L433) [src/mcp/server/sse.py244-245](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L244-L245) ## Usage Examples ### Basic Starlette Integration ``` ``` ### Mounted Application Support The transport supports deployment under path prefixes using Starlette's `Mount`: ``` ``` The transport automatically handles path prefix resolution using ASGI scope's `root_path` [src/mcp/server/sse.py152-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L152-L158) Sources: [src/mcp/server/sse.py6-37](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L6-L37) [tests/shared/test\\_sse.py83-104](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L83-L104) [tests/shared/test\\_sse.py289-300](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L289-L300) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Server-Sent Events (SSE) Transport](#server-sent-events-sse-transport.md) - [Architecture Overview](#architecture-overview.md) - [SSE Transport Architecture](#sse-transport-architecture.md) - [Message Flow Architecture](#message-flow-architecture.md) - [SSE Server Transport Implementation](#sse-server-transport-implementation.md) - [Core Components](#core-components.md) - [Transport Initialization](#transport-initialization.md) - [ASGI Integration Pattern](#asgi-integration-pattern.md) - [Session Management](#session-management.md) - [Session Lifecycle](#session-lifecycle.md) - [Session Storage and Routing](#session-storage-and-routing.md) - [Security Features](#security-features.md) - [Request Validation](#request-validation.md) - [Error Handling](#error-handling.md) - [Client-Side Error Handling](#client-side-error-handling.md) - [Client Integration](#client-integration.md) - [SSE Client Architecture](#sse-client-architecture.md) - [Endpoint Discovery and Security](#endpoint-discovery-and-security.md) - [Client Connection Pattern](#client-connection-pattern.md) - [Task Management](#task-management.md) - [Request Context Propagation](#request-context-propagation.md) - [Usage Examples](#usage-examples.md) - [Basic Starlette Integration](#basic-starlette-integration.md) - [Mounted Application Support](#mounted-application-support.md)",
  "Authentication & Security | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Authentication & Security Relevant source files",
  "- [src/mcp/client/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py) - [src/mcp/server/auth/handlers/register.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/register.py) - [src/mcp/server/auth/routes.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py) - [src/mcp/shared/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py) - [tests/client/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py) - [tests/shared/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_auth.py) This document covers the OAuth 2.0 authentication system implemented in the MCP Python SDK for securing communication between MCP clients and servers. The authentication system provides both client-side authentication (for MCP clients connecting to protected servers) and server-side authentication (for MCP servers that need to authenticate clients). The OAuth system integrates seamlessly with MCP's core components: - **ClientSession**: Automatically handles OAuth authentication when connecting to protected MCP servers - **FastMCP servers**: Can optionally expose OAuth authorization server endpoints - **Transport layer**: OAuth authentication works across all transport mechanisms (stdio, SSE, StreamableHTTP) For detailed OAuth implementation specifics, see [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md). For transport-level security features like DNS rebinding protection, see [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md). For the overall client framework, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). ## MCP Authentication Integration ``` ``` **Sources:** [src/mcp/client/auth.py179-206](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L179-L206) [src/mcp/server/auth/routes.py68-146](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L68-L146) [src/mcp/client/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py) [src/mcp/server/fastmcp/](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/) ## OAuth 2.0 Client Authentication The MCP SDK provides a complete OAuth 2.0 client implementation centered around the `OAuthClientProvider` class, which integrates with httpx to provide transparent authentication for HTTP requests. ### Core Client Components Architecture ``` ``` The `OAuthClientProvider` implements the `httpx.Auth` interface, allowing it to be used as an authentication handler for any HTTP client that supports httpx auth providers. The class is instantiated with server URL, client metadata, token storage, and callback handlers for user interaction. **Sources:** [src/mcp/client/auth.py179-206](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L179-L206) [src/mcp/shared/auth.py6-25](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py#L6-L25) [src/mcp/shared/auth.py37-91](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py#L37-L91) [src/mcp/shared/auth.py93-103](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py#L93-L103) ### OAuth Flow Implementation The client authentication follows the OAuth 2.0 authorization code flow with PKCE (Proof Key for Code Exchange) for enhanced security. The entire flow is implemented in the `async_auth_flow()` method: ``` ``` The flow includes several key security features implemented in specific methods: - **PKCE (RFC 7636)**: `PKCEParameters.generate()` prevents authorization code interception attacks - **State parameter**: `_perform_authorization()` prevents CSRF attacks during authorization - **Dynamic Client Registration (RFC 7591)**: `_register_client()` enables automatic client registration - **Protected Resource Discovery (RFC 9728)**: `_discover_protected_resource()` enables automatic authorization server discovery",
  "**Sources:** [src/mcp/client/auth.py485-551](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L485-L551) [src/mcp/client/auth.py312-356](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L312-L356) [src/mcp/client/auth.py49-61](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L49-L61) [src/mcp/client/auth.py231-252](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L231-L252) ### Token Management and Storage The SDK provides a flexible token storage system through the `TokenStorage` protocol interface: | Method | Purpose | Parameters | Return Type | | ------------------- | ---------------------------- | ---------------------------- | ------------------------------------ | | `get_tokens()` | Retrieve stored tokens | None | `OAuthToken \\| None` | | `set_tokens()` | Store new tokens | `OAuthToken` | `None` | | `get_client_info()` | Retrieve client registration | None | `OAuthClientInformationFull \\| None` | | `set_client_info()` | Store client registration | `OAuthClientInformationFull` | `None` | Token validation and refresh logic is handled automatically in `async_auth_flow()`: ``` ``` The `OAuthContext` class manages token expiry using the `update_token_expiry()` method, which calculates wall-clock time based on the `expires_in` field from token responses. Token validation is performed by `is_token_valid()` which checks both token presence and expiry time. **Sources:** [src/mcp/client/auth.py64-82](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L64-L82) [src/mcp/client/auth.py120-142](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L120-L142) [src/mcp/client/auth.py411-461](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L411-L461) [src/mcp/client/auth.py494-501](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L494-L501) ### Protected Resource Discovery The client implements RFC 9728 for automatic discovery of authorization servers through several methods in `OAuthClientProvider`. The discovery process supports multiple fallback mechanisms: 1. **WWW-Authenticate Header**: `_extract_resource_metadata_from_www_auth()` extracts `resource_metadata` URL from 401 responses 2. **Well-known Resource Discovery**: `_discover_protected_resource()` falls back to `/.well-known/oauth-protected-resource` 3. **Authorization Server Discovery**: `_get_discovery_urls()` tries multiple OAuth metadata endpoints ``` ``` The discovery flow uses regex pattern matching in `_extract_resource_metadata_from_www_auth()` to parse the WWW-Authenticate header: `resource_metadata=(?:\"([^\"]+)\"|([^\\s,]+))`. If no resource\\_metadata is found, it constructs the well-known URL using `get_authorization_base_url()` and `urljoin()`. **Sources:** [src/mcp/client/auth.py207-240](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L207-L240) [src/mcp/client/auth.py254-279](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L254-L279) [src/mcp/client/auth.py517-530](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L517-L530) [src/mcp/client/auth.py242-252](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L242-L252) ## OAuth 2.0 Server Implementation The server-side authentication system provides a complete OAuth 2.0 authorization server implementation that MCP servers can use to authenticate clients. The system is built around the `create_auth_routes()` function and handler classes. ### Server Components Architecture ``` ```",
  "**Sources:** [src/mcp/server/auth/routes.py68-146](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L68-L146) [src/mcp/server/auth/handlers/](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/) [src/mcp/server/auth/middleware/client\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/middleware/client_auth.py) [src/mcp/server/auth/settings.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/settings.py) ### OAuth Metadata Generation The server automatically generates RFC 8414 compliant OAuth metadata using the `build_metadata()` function based on configuration: | Field | Value | Source | | --------------------------------------- | ----------------------------------------- | ----------------------------------------- | | `issuer` | Server base URL | `issuer_url` parameter | | `authorization_endpoint` | `{issuer}/authorize` | `AUTHORIZATION_PATH` constant | | `token_endpoint` | `{issuer}/token` | `TOKEN_PATH` constant | | `registration_endpoint` | `{issuer}/register` | `REGISTRATION_PATH` constant (if enabled) | | `revocation_endpoint` | `{issuer}/revoke` | `REVOCATION_PATH` constant (if enabled) | | `scopes_supported` | Valid scopes list | `ClientRegistrationOptions.valid_scopes` | | `grant_types_supported` | `[\"authorization_code\", \"refresh_token\"]` | Fixed in `build_metadata()` | | `token_endpoint_auth_methods_supported` | `[\"client_secret_post\"]` | Fixed in `build_metadata()` | | `code_challenge_methods_supported` | `[\"S256\"]` | Fixed in `build_metadata()` | The `build_metadata()` function constructs the complete `OAuthMetadata` object with proper URL validation through `validate_issuer_url()` and CORS support via `cors_middleware()`. The metadata is served by `MetadataHandler.handle()` at the well-known endpoint. **Sources:** [src/mcp/server/auth/routes.py149-186](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L149-L186) [src/mcp/server/auth/routes.py23-47](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L23-L47) [src/mcp/server/auth/routes.py49-52](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L49-L52) [src/mcp/server/auth/handlers/metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/metadata.py) ### Dynamic Client Registration The server supports RFC 7591 dynamic client registration through the `RegistrationHandler.handle()` method: ``` ``` Key registration features implemented in `RegistrationHandler.handle()`: - **Automatic client ID generation**: Uses `uuid4()` for unique client identifiers - **Client secret generation**: Uses `secrets.token_hex(32)` for 32-byte cryptographically secure random hex string - **Scope validation**: Ensures requested scopes are within `ClientRegistrationOptions.valid_scopes` - **Grant type validation**: Only supports `authorization_code` and `refresh_token` grant types - **Client secret expiry**: Configurable via `ClientRegistrationOptions.client_secret_expiry_seconds` **Sources:** [src/mcp/server/auth/handlers/register.py34-121](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/register.py#L34-L121) [src/mcp/server/auth/settings.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/settings.py) [src/mcp/server/auth/handlers/register.py51-85](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/register.py#L51-L85) ### Protected Resource Metadata The server can also act as a protected resource by exposing RFC 9728 metadata through `create_protected_resource_routes()`: ``` ``` This enables automatic discovery by OAuth clients using `_discover_protected_resource()` and supports the separation of authorization servers from protected resources as defined in RFC 9728.",
  "**Sources:** [src/mcp/server/auth/routes.py189-227](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L189-L227) [src/mcp/shared/auth.py134-156](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py#L134-L156) [src/mcp/server/auth/handlers/metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/metadata.py) ## Security Features ### PKCE Implementation The SDK implements PKCE (Proof Key for Code Exchange) as defined in RFC 7636 through the `PKCEParameters` class to prevent authorization code interception attacks: ``` ``` PKCE parameters use cryptographically secure random generation in `PKCEParameters.generate()`: - **Code verifier**: 128 characters from `secrets.choice(string.ascii_letters + string.digits + \"-._~\")` - **Code challenge**: SHA256 hash of verifier, Base64URL encoded with `rstrip(\"=\")` to remove padding - **Challenge method**: Always `S256` (SHA256) as specified in OAuth server metadata **Sources:** [src/mcp/client/auth.py49-61](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L49-L61) [src/mcp/client/auth.py324-325](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L324-L325) [src/mcp/client/auth.py374](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L374-L374) [src/mcp/client/auth.py56-61](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L56-L61) ### State Parameter Protection The OAuth flow includes state parameter validation in `_perform_authorization()` to prevent CSRF attacks: ``` ``` The `secrets.compare_digest()` function provides constant-time comparison to prevent timing attacks. The state parameter is included in the authorization URL and validated when the authorization code is returned via the `callback_handler`. **Sources:** [src/mcp/client/auth.py325](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L325-L325) [src/mcp/client/auth.py349-350](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L349-L350) [src/mcp/client/auth.py347-353](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L347-L353) ### Token Security Token management includes several security measures implemented across multiple methods: - **Secure storage**: Tokens are stored through the `TokenStorage` protocol interface via `storage.set_tokens()` - **Automatic expiry**: Tokens are validated in `is_token_valid()` against wall-clock expiry time from `update_token_expiry()` - **Scope validation**: `_handle_token_response()` validates returned token scopes against requested scopes - **Automatic refresh**: `_refresh_token()` and `_handle_refresh_response()` automatically refresh expired tokens when possible - **Secure transport**: `validate_issuer_url()` ensures all token exchanges occur over HTTPS (with localhost HTTP exception for development) The scope validation logic in `_handle_token_response()` prevents privilege escalation: ``` ``` **Sources:** [src/mcp/client/auth.py398-403](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L398-L403) [src/mcp/client/auth.py120-133](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L120-L133) [src/mcp/server/auth/routes.py34-41](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L34-L41) [src/mcp/client/auth.py388-409](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L388-L409) ### Resource Parameter Support The SDK implements RFC 8707 resource indicators for enhanced security: ``` ``` The resource parameter helps prevent token confusion attacks by explicitly identifying the intended resource server.",
  "**Sources:** [src/mcp/client/auth.py159-177](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L159-L177) [src/mcp/client/auth.py377-379](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L377-L379) [src/mcp/client/auth.py431-433](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L431-L433) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Authentication & Security](#authentication-security.md) - [MCP Authentication Integration](#mcp-authentication-integration.md) - [OAuth 2.0 Client Authentication](#oauth-20-client-authentication.md) - [Core Client Components Architecture](#core-client-components-architecture.md) - [OAuth Flow Implementation](#oauth-flow-implementation.md) - [Token Management and Storage](#token-management-and-storage.md) - [Protected Resource Discovery](#protected-resource-discovery.md) - [OAuth 2.0 Server Implementation](#oauth-20-server-implementation.md) - [Server Components Architecture](#server-components-architecture.md) - [OAuth Metadata Generation](#oauth-metadata-generation.md) - [Dynamic Client Registration](#dynamic-client-registration.md) - [Protected Resource Metadata](#protected-resource-metadata.md) - [Security Features](#security-features.md) - [PKCE Implementation](#pkce-implementation.md) - [State Parameter Protection](#state-parameter-protection.md) - [Token Security](#token-security.md) - [Resource Parameter Support](#resource-parameter-support.md)",
  "Transport Security | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Transport Security Relevant source files",
  "- [src/mcp/client/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py) - [src/mcp/server/auth/handlers/register.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/register.py) - [src/mcp/server/auth/routes.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py) - [src/mcp/server/sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py) - [src/mcp/shared/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py) - [tests/client/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py) - [tests/shared/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_auth.py) - [tests/shared/test\\_sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py) This document covers the security features implemented for MCP transport layers, focusing on DNS rebinding protection and request validation middleware. The security system provides configurable protection against malicious cross-origin requests targeting locally-hosted MCP servers. For information about specific transport implementations, see [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md), [SSE Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md), and [WebSocket Transport](modelcontextprotocol/python-sdk/5.4-transport-security.md). For authentication mechanisms, see [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md). ## Security Architecture Overview The transport security system implements a middleware-based architecture that validates incoming HTTP requests before they reach the MCP protocol handlers. The system is designed to prevent DNS rebinding attacks while maintaining compatibility with legitimate client connections. ``` ``` Sources: [src/mcp/server/transport\\_security.py37-128](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py#L37-L128) [src/mcp/server/streamable\\_http\\_manager.py24-68](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L24-L68) ## DNS Rebinding Protection DNS rebinding attacks occur when malicious websites trick browsers into making requests to local servers using specially crafted DNS responses. The MCP security system prevents these attacks by validating request headers that browsers automatically include. ### Threat Model | Attack Vector | Validation Method | HTTP Status | Error Message | | --------------------- | ------------------------- | ----------- | ----------------------------- | | Malicious Host header | Host whitelist validation | 421 | \"Invalid Host header\" | | Cross-origin requests | Origin header validation | 400 | \"Invalid Origin header\" | | Wrong content type | Content-Type validation | 400 | \"Invalid Content-Type header\" | ``` ``` Sources: [src/mcp/server/transport\\_security.py45-66](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py#L45-L66) [tests/server/test\\_streamable\\_http\\_security.py110-136](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_streamable_http_security.py#L110-L136) ## Configuration Settings The `TransportSecuritySettings` class provides flexible configuration for security features: ### Basic Configuration ``` ``` ### Wildcard Port Patterns The system supports wildcard port patterns for development environments: | Pattern | Matches | Example | | ---------------------- | --------------------- | ---------------------------------- | | `\"localhost:*\"` | Any port on localhost | `localhost:3000`, `localhost:8080` | | `\"127.0.0.1:*\"` | Any port on 127.0.0.1 | `127.0.0.1:5000`, `127.0.0.1:9999` | | `\"http://localhost:*\"` | Any port in origins | `http://localhost:3000` | ``` ```",
  "Sources: [src/mcp/server/transport\\_security.py12-35](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py#L12-L35) [src/mcp/server/transport\\_security.py56-63](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py#L56-L63) [tests/server/test\\_sse\\_security.py226-256](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_sse_security.py#L226-L256) ## Security Middleware Implementation The `TransportSecurityMiddleware` class implements the core validation logic: ### Validation Methods | Method | Purpose | Returns | | -------------------------- | --------------------------------------- | ---------- | | `_validate_host()` | Validates Host header against whitelist | `bool` | | `_validate_origin()` | Validates Origin header (optional) | `bool` | | `_validate_content_type()` | Ensures JSON content type for POST | `bool` | | `validate_request()` | Main validation entry point | \\`Response | ### Validation Flow ``` ``` Sources: [src/mcp/server/transport\\_security.py102-128](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py#L102-L128) [src/mcp/server/transport\\_security.py89-101](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py#L89-L101) ## Transport Integration Security middleware integrates with multiple transport types through a common pattern: ### StreamableHTTP Integration The `StreamableHTTPSessionManager` accepts security settings and passes them to transport instances: ``` ``` ### SSE Integration The `SseServerTransport` similarly integrates security validation: | Transport Type | Security Integration Point | Error Handling | | -------------- | ------------------------------------------- | --------------------------------- | | StreamableHTTP | `StreamableHTTPServerTransport` constructor | Middleware returns error response | | SSE | `SseServerTransport` constructor | Validation in `connect_sse()` | | WebSocket | Not implemented | N/A | | STDIO | Not applicable | Local process communication | Sources: [src/mcp/server/streamable\\_http\\_manager.py62-68](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L62-L68) [src/mcp/server/streamable\\_http\\_manager.py224-229](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L224-L229) [tests/server/test\\_sse\\_security.py45-58](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_sse_security.py#L45-L58) ## Default Security Behavior The security system uses conservative defaults to maintain backward compatibility: ### Default Settings | Setting | Default Value | Rationale | | --------------------------------- | ----------------------------------------- | ----------------------------- | | `enable_dns_rebinding_protection` | `True` in settings, `False` in middleware | Backwards compatibility | | `allowed_hosts` | `[]` (empty list) | Must be explicitly configured | | `allowed_origins` | `[]` (empty list) | Must be explicitly configured | ### Backward Compatibility ``` ``` Sources: [src/mcp/server/transport\\_security.py40-43](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py#L40-L43) [src/mcp/server/transport\\_security.py114-115](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py#L114-L115) ## Testing and Validation The security system includes comprehensive tests covering various attack scenarios and configuration options: ### Test Coverage | Test Category | File | Key Test Cases | | ----------------------- | ---------------------------------- | -------------------------------------------- | | StreamableHTTP Security | `test_streamable_http_security.py` | Host/Origin validation, Content-Type checks | | SSE Security | `test_sse_security.py` | GET/POST validation, wildcard patterns | | Integration | Both files | Real server processes, multiprocessing tests | ### Security Test Scenarios ``` ```",
  "Sources: [tests/server/test\\_streamable\\_http\\_security.py85-294](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_streamable_http_security.py#L85-L294) [tests/server/test\\_sse\\_security.py78-294](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_sse_security.py#L78-L294) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Transport Security](#transport-security.md) - [Security Architecture Overview](#security-architecture-overview.md) - [DNS Rebinding Protection](#dns-rebinding-protection.md) - [Threat Model](#threat-model.md) - [Configuration Settings](#configuration-settings.md) - [Basic Configuration](#basic-configuration.md) - [Wildcard Port Patterns](#wildcard-port-patterns.md) - [Security Middleware Implementation](#security-middleware-implementation.md) - [Validation Methods](#validation-methods.md) - [Validation Flow](#validation-flow.md) - [Transport Integration](#transport-integration.md) - [StreamableHTTP Integration](#streamablehttp-integration.md) - [SSE Integration](#sse-integration.md) - [Default Security Behavior](#default-security-behavior.md) - [Default Settings](#default-settings.md) - [Backward Compatibility](#backward-compatibility.md) - [Testing and Validation](#testing-and-validation.md) - [Test Coverage](#test-coverage.md) - [Security Test Scenarios](#security-test-scenarios.md)",
  "MCP CLI Commands | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # MCP CLI Commands Relevant source files - [examples/fastmcp/unicode\\_example.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/fastmcp/unicode_example.py) - [src/mcp/cli/claude.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py) - [src/mcp/cli/cli.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py) - [tests/client/test\\_config.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_config.py) - [tests/issues/test\\_100\\_tool\\_listing.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_100_tool_listing.py)",
  "This document covers the MCP CLI commands that provide development tools for building, testing, and deploying MCP servers. The CLI facilitates server development with dependency management, debugging tools, and integration with Claude Desktop. For information about the underlying FastMCP server framework that these commands operate on, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For details about Claude Desktop integration configuration, see [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md). ## Purpose and Scope The MCP CLI provides three primary commands for MCP server development and deployment: - `mcp dev` - Development server with MCP Inspector integration - `mcp run` - Direct server execution - `mcp install` - Claude Desktop application integration - `mcp version` - Version information All commands support automatic dependency management through `uv` and handle both standalone Python files and package-based servers. ## CLI Architecture Overview ``` ``` Sources: [src/mcp/cli/cli.py34-39](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L34-L39) [src/mcp/cli/cli.py42-86](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L42-L86) [src/mcp/cli/claude.py44-148](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L44-L148) ## Development Command (mcp dev) The `mcp dev` command launches the MCP Inspector for interactive server testing and debugging. ### Command Syntax ``` ``` ### Implementation Flow ``` ``` Sources: [src/mcp/cli/cli.py222-303](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L222-L303) [src/mcp/cli/cli.py65-85](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L65-L85) [src/mcp/cli/cli.py268-283](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L268-L283) ### Key Features | Feature | Implementation | Purpose | | -------------------- | -------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------ | | Dependency Detection | [src/mcp/cli/cli.py262-264](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L262-L264) | Automatically includes server.dependencies | | NPX Integration | [src/mcp/cli/cli.py268-283](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L268-L283) | Launches MCP Inspector for debugging | | Cross-Platform | [src/mcp/cli/cli.py42-53](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L42-L53) | Handles Windows/Unix npx differences | | Editable Install | [src/mcp/cli/cli.py228-238](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L228-L238) | Supports --with-editable for development | Sources: [src/mcp/cli/cli.py222-303](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L222-L303) ## Run Command (mcp run) The `mcp run` command executes MCP servers directly without dependency management. ### Command Syntax ``` ``` ### Server Import Process ``` ``` Sources: [src/mcp/cli/cli.py88-208](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L88-L208) [src/mcp/cli/cli.py305-360](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L305-L360) ### Transport Support The run command supports optional transport specification: - `stdio` - Standard input/output transport - `sse` - Server-Sent Events transport - Default: Server's configured transport Sources: [src/mcp/cli/cli.py311-318](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L311-L318) [src/mcp/cli/cli.py346-350](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L346-L350) ## Install Command (mcp install)",
  "The `mcp install` command configures MCP servers in Claude Desktop's configuration. ### Command Syntax ``` ``` ### Claude Configuration Process ``` ``` Sources: [src/mcp/cli/claude.py17-31](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L17-L31) [src/mcp/cli/claude.py44-148](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L44-L148) [src/mcp/cli/cli.py362-489](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L362-L489) ### Environment Variable Handling The install command supports flexible environment variable configuration: | Method | Implementation | Behavior | | ------------ | -------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | | Command Line | `--env-var KEY=VALUE` | [src/mcp/cli/cli.py474-476](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L474-L476) | | .env File | `--env-file path.env` | [src/mcp/cli/cli.py462-471](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L462-L471) | | Preservation | Existing vars preserved | [src/mcp/cli/claude.py92-99](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L92-L99) | | Merging | New vars override existing | [src/mcp/cli/claude.py96-97](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L96-L97) | Sources: [src/mcp/cli/cli.py394-413](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L394-L413) [src/mcp/cli/cli.py457-477](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L457-L477) ## Version Command (mcp version) Simple command that displays the installed MCP package version using `importlib.metadata`. ``` ``` Sources: [src/mcp/cli/cli.py211-219](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L211-L219) ## Dependency Management Integration All CLI commands integrate with `uv` for dependency management: ### UV Command Construction ``` ``` Sources: [src/mcp/cli/cli.py65-85](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L65-L85) [src/mcp/cli/claude.py101-125](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L101-L125) ### UV Path Resolution The CLI automatically locates the `uv` executable using platform-appropriate methods: - Uses `shutil.which(\"uv\")` to find full path - Falls back to `\"uv\"` string if not found in PATH - Provides clear error messages for missing uv installation Sources: [src/mcp/cli/claude.py33-41](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L33-L41) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [MCP CLI Commands](#mcp-cli-commands.md) - [Purpose and Scope](#purpose-and-scope.md) - [CLI Architecture Overview](#cli-architecture-overview.md) - [Development Command (mcp dev)](#development-command-mcp-dev.md) - [Command Syntax](#command-syntax.md) - [Implementation Flow](#implementation-flow.md) - [Key Features](#key-features.md) - [Run Command (mcp run)](#run-command-mcp-run.md) - [Command Syntax](#command-syntax-1.md) - [Server Import Process](#server-import-process.md) - [Transport Support](#transport-support.md) - [Install Command (mcp install)](#install-command-mcp-install.md) - [Command Syntax](#command-syntax-2.md) - [Claude Configuration Process](#claude-configuration-process.md) - [Environment Variable Handling](#environment-variable-handling.md) - [Version Command (mcp version)](#version-command-mcp-version.md) - [Dependency Management Integration](#dependency-management-integration.md) - [UV Command Construction](#uv-command-construction.md) - [UV Path Resolution](#uv-path-resolution.md)",
  "Client Examples | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Client Examples Relevant source files",
  "- [.pre-commit-config.yaml](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.pre-commit-config.yaml) - [CLAUDE.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CLAUDE.md) - [CODE\\_OF\\_CONDUCT.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CODE_OF_CONDUCT.md) - [CONTRIBUTING.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/CONTRIBUTING.md) - [SECURITY.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/SECURITY.md) - [examples/clients/simple-auth-client/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-auth-client/README.md) - [examples/clients/simple-auth-client/mcp\\_simple\\_auth\\_client/main.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-auth-client/mcp_simple_auth_client/main.py) - [examples/clients/simple-chatbot/README.MD](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/README.MD) - [examples/servers/simple-auth/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-auth/README.md) - [examples/servers/simple-auth/mcp\\_simple\\_auth/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-auth/mcp_simple_auth/server.py) - [examples/servers/simple-streamablehttp-stateless/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-streamablehttp-stateless/README.md) - [examples/servers/simple-streamablehttp/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-streamablehttp/README.md) This document provides practical examples of MCP client implementations, focusing on real-world usage patterns and architectures. The primary example is the simple-chatbot client that demonstrates comprehensive integration with MCP servers, LLM providers, and user interaction patterns. For server-side examples, see [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md). For core client framework documentation, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). ## Simple Chatbot Example Overview The simple-chatbot example demonstrates a complete MCP client implementation that connects to multiple MCP servers, discovers their tools, and integrates with an LLM provider to create an interactive chatbot experience. ``` ``` Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py1-409](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L1-L409) ## Client Architecture Components The simple-chatbot demonstrates four main architectural components that work together to provide a complete MCP client experience. ### Configuration Management The `Configuration` class handles environment setup and server configuration loading: ``` ``` The configuration system supports: - Environment variable management via `python-dotenv` - JSON-based server configuration loading - API key validation and access Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py18-61](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L18-L61) ### Server Connection Management The `Server` class manages individual MCP server connections with proper lifecycle management: ``` ``` Key features include: - `AsyncExitStack` for proper resource cleanup - Retry logic with configurable attempts and delays - Error handling and recovery mechanisms Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py63-169](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L63-L169) ## Connection and Session Management The client demonstrates proper MCP session establishment and management patterns: ``` ``` The session management includes: - Process spawning with `shutil.which()` for command resolution - Stream-based communication setup - Capability negotiation through `session.initialize()` - Proper error handling and cleanup on failure Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py74-94](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L74-L94) ## Tool Discovery and Execution The client implements comprehensive tool management with LLM integration: ### Tool Discovery Pattern",
  "``` ``` The discovery process extracts tool metadata and formats it for LLM consumption: - Tool name and description - JSON schema for input parameters - Required vs optional parameter identification - Human-readable formatting for LLM prompts Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py96-115](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L96-L115) [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py171-213](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L171-L213) ### Tool Execution with Retry Logic ``` ``` The execution system provides: - Configurable retry attempts (default: 2) - Exponential backoff with configurable delay - Comprehensive error logging - Progress reporting for long-running tools Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py117-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L117-L158) ## LLM Integration Patterns The client demonstrates how to integrate MCP tools with LLM providers through structured prompting and tool calling protocols. ### LLM Communication Flow ``` ``` ### Tool Call Protocol The client implements a JSON-based tool calling protocol: ``` ``` The system message instructs the LLM on tool usage patterns and response formatting, ensuring consistent tool invocation and natural language result processing. Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py283-321](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L283-L321) [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py341-361](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L341-L361) ## Usage Examples ### Basic Client Setup The simple-chatbot can be configured through a JSON configuration file: ``` ``` ### Environment Configuration Required environment variables: - `LLM_API_KEY`: API key for the LLM provider (Groq in this example) The client uses `python-dotenv` for environment management, supporting `.env` files for development. Sources: [examples/clients/simple-chatbot/mcp\\_simple\\_chatbot/main.py397-404](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-chatbot/mcp_simple_chatbot/main.py#L397-L404) ### Test Integration Patterns The codebase includes several test patterns that demonstrate client usage: #### Resource Testing with Client Sessions ``` ``` This pattern is used extensively in tests for validating server behavior from a client perspective. Sources: [tests/issues/test\\_152\\_resource\\_mime\\_type.py36-61](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_152_resource_mime_type.py#L36-L61) [tests/issues/test\\_141\\_resource\\_templates.py81-114](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_141_resource_templates.py#L81-L114) The examples demonstrate comprehensive MCP client implementation patterns, from basic connection management to advanced tool integration with LLM providers, providing a solid foundation for building sophisticated MCP client applications. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Client Examples](#client-examples.md) - [Simple Chatbot Example Overview](#simple-chatbot-example-overview.md) - [Client Architecture Components](#client-architecture-components.md) - [Configuration Management](#configuration-management.md) - [Server Connection Management](#server-connection-management.md) - [Connection and Session Management](#connection-and-session-management.md) - [Tool Discovery and Execution](#tool-discovery-and-execution.md) - [Tool Discovery Pattern](#tool-discovery-pattern.md) - [Tool Execution with Retry Logic](#tool-execution-with-retry-logic.md) - [LLM Integration Patterns](#llm-integration-patterns.md) - [LLM Communication Flow](#llm-communication-flow.md) - [Tool Call Protocol](#tool-call-protocol.md) - [Usage Examples](#usage-examples.md) - [Basic Client Setup](#basic-client-setup.md) - [Environment Configuration](#environment-configuration.md) - [Test Integration Patterns](#test-integration-patterns.md) - [Resource Testing with Client Sessions](#resource-testing-with-client-sessions.md)",
  "Client Transports | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Client Transports Relevant source files",
  "- [src/mcp/client/sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py) - [src/mcp/client/stdio/\\_\\_init\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py) - [src/mcp/client/streamable\\_http.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py) - [tests/client/test\\_notification\\_response.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_notification_response.py) - [tests/client/test\\_stdio.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_stdio.py) - [tests/issues/test\\_1027\\_win\\_unreachable\\_cleanup.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_1027_win_unreachable_cleanup.py) - [tests/shared/test\\_win32\\_utils.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_win32_utils.py) This document covers the client-side transport implementations in the MCP Python SDK that enable communication between MCP clients and servers. Client transports handle the low-level protocol communication, message serialization, and connection management for different communication channels. For information about the high-level `ClientSession` that uses these transports, see [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md). For server-side transport implementations, see the Transport Layer sections [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md), [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md), and [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md). ## Transport Architecture Overview The MCP client framework provides three primary transport implementations, each designed for different deployment scenarios and communication patterns. ``` ``` Sources: [src/mcp/client/streamable\\_http.py1-514](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L1-L514) [src/mcp/client/sse.py1-145](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L1-L145) [src/mcp/client/stdio/\\_\\_init\\_\\_.py1-279](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L1-L279) ## StreamableHTTP Transport The `StreamableHTTPTransport` is the most sophisticated client transport, supporting bidirectional HTTP communication with session management, resumption capabilities, and both JSON and Server-Sent Events responses. ### Core Components The transport consists of the main `StreamableHTTPTransport` class and the `streamablehttp_client` async context manager: | Component | Purpose | Location | | ------------------------- | ------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- | | `StreamableHTTPTransport` | Core transport logic | [src/mcp/client/streamable\\_http.py74-442](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L74-L442) | | `streamablehttp_client` | Client context manager | [src/mcp/client/streamable\\_http.py445-514](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L445-L514) | | `RequestContext` | Request operation context | [src/mcp/client/streamable\\_http.py62-72](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L62-L72) | ### Message Flow Architecture ``` ``` Sources: [src/mcp/client/streamable\\_http.py366-422](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L366-L422) [src/mcp/client/streamable\\_http.py192-219](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L192-L219) [src/mcp/client/streamable\\_http.py254-295](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L254-L295) ### Session Management The StreamableHTTP transport implements sophisticated session management with resumption support:",
  "- **Session ID Extraction**: Automatically extracts session IDs from response headers [src/mcp/client/streamable\\_http.py126-135](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L126-L135) - **Protocol Version Negotiation**: Parses and stores protocol version from initialization responses [src/mcp/client/streamable\\_http.py136-150](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L136-L150) - **Request Header Preparation**: Adds session ID and protocol version to subsequent requests [src/mcp/client/streamable\\_http.py109-117](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L109-L117) - **Session Termination**: Sends DELETE requests to clean up server resources [src/mcp/client/streamable\\_http.py423-438](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L423-L438) ### Resumption Capabilities The transport supports resumption of interrupted sessions using resumption tokens: ``` ``` Sources: [src/mcp/client/streamable\\_http.py220-253](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L220-L253) [src/mcp/client/streamable\\_http.py151-191](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L151-L191) ## SSE Transport The `sse_client` provides a simpler transport focused on real-time communication using Server-Sent Events for server-to-client messages and HTTP POST for client-to-server messages. ### Architecture ``` ``` Sources: [src/mcp/client/sse.py24-145](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L24-L145) [src/mcp/client/sse.py68-113](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L68-L113) [src/mcp/client/sse.py114-133](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L114-L133) ### Endpoint Discovery The SSE transport implements a discovery mechanism where the server provides the POST endpoint URL via SSE events: 1. **Initial Connection**: Client connects to SSE endpoint via GET request [src/mcp/client/sse.py60-67](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L60-L67) 2. **Endpoint Event**: Server sends `endpoint` event with POST URL [src/mcp/client/sse.py75-92](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L75-L92) 3. **Security Validation**: Client validates endpoint origin matches connection origin [src/mcp/client/sse.py79-90](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L79-L90) 4. **Post Writer Activation**: POST writer task starts with discovered endpoint [src/mcp/client/sse.py134-136](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L134-L136) ## STDIO Transport The `stdio_client` manages communication with MCP servers running as separate processes, using standard input/output streams for JSON-RPC message exchange. ### Process Lifecycle ``` ``` Sources: [src/mcp/client/stdio/\\_\\_init\\_\\_.py106-217](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L106-L217) [src/mcp/client/stdio/\\_\\_init\\_\\_.py235-279](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L235-L279) [src/mcp/client/stdio/\\_\\_init\\_\\_.py139-165](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L139-L165) ### Platform-Specific Process Management The STDIO transport implements platform-specific process creation and termination:",
  "| Platform | Process Creation | Termination Strategy | | -------- | ------------------------------------------- | ------------------------------------------ | | Unix | `start_new_session=True` for process groups | `os.killpg()` for atomic group termination | | Windows | Job Objects via `create_windows_process` | Job Object termination for child cleanup | Sources: [src/mcp/client/stdio/\\_\\_init\\_\\_.py235-260](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L235-L260) [src/mcp/client/stdio/\\_\\_init\\_\\_.py262-279](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L262-L279) ### Message Processing The transport handles JSON-RPC message processing with robust error handling: - **Line-based Parsing**: Buffers input and splits on newlines [src/mcp/client/stdio/\\_\\_init\\_\\_.py144-153](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L144-L153) - **JSON Validation**: Validates each line as JSON-RPC message [src/mcp/client/stdio/\\_\\_init\\_\\_.py154-162](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L154-L162) - **Encoding Support**: Configurable text encoding and error handling [src/mcp/client/stdio/\\_\\_init\\_\\_.py89-103](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L89-L103) ## Transport Selection and Usage Patterns ### Transport Comparison | Transport | Use Case | Pros | Cons | | -------------- | --------------------------------------- | ---------------------------------------- | ----------------------------- | | StreamableHTTP | Web services, production deployments | Session management, resumption, scalable | Complex, requires HTTP server | | SSE | Real-time applications, event-driven | Simple, real-time events | Limited to web contexts | | STDIO | CLI tools, development, local processes | Direct process control, simple setup | Process management complexity | ### Integration with ClientSession All client transports follow the same interface pattern for integration with `ClientSession`: ``` ``` Sources: [src/mcp/client/streamable\\_http.py453-459](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L453-L459) [src/mcp/client/sse.py45-49](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L45-L49) [src/mcp/client/stdio/\\_\\_init\\_\\_.py111-115](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L111-L115) ## Error Handling and Resilience ### Connection Error Patterns Each transport implements specific error handling strategies: - **StreamableHTTP**: HTTP status code handling, session termination on 404, resumption error recovery [src/mcp/client/streamable\\_http.py266-277](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L266-L277) - **SSE**: Connection error recovery, origin validation errors [src/mcp/client/sse.py108-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L108-L110) - **STDIO**: Process creation failures, graceful shutdown with timeout escalation [src/mcp/client/stdio/\\_\\_init\\_\\_.py191-217](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L191-L217) ### Timeout Management Transport-specific timeout configurations: | Transport | Timeout Type | Default | Configuration | | -------------- | ------------------- | --------- | ----------------------------- | | StreamableHTTP | HTTP operations | 30s | `timeout` parameter | | StreamableHTTP | SSE read | 5 minutes | `sse_read_timeout` parameter | | SSE | HTTP operations | 5s | `timeout` parameter | | SSE | SSE read | 5 minutes | `sse_read_timeout` parameter | | STDIO | Process termination | 2s | `PROCESS_TERMINATION_TIMEOUT` |",
  "Sources: [src/mcp/client/streamable\\_http.py77-100](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L77-L100) [src/mcp/client/sse.py27-28](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py#L27-L28) [src/mcp/client/stdio/\\_\\_init\\_\\_.py47-48](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio/__init__.py#L47-L48) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Client Transports](#client-transports.md) - [Transport Architecture Overview](#transport-architecture-overview.md) - [StreamableHTTP Transport](#streamablehttp-transport.md) - [Core Components](#core-components.md) - [Message Flow Architecture](#message-flow-architecture.md) - [Session Management](#session-management.md) - [Resumption Capabilities](#resumption-capabilities.md) - [SSE Transport](#sse-transport.md) - [Architecture](#architecture.md) - [Endpoint Discovery](#endpoint-discovery.md) - [STDIO Transport](#stdio-transport.md) - [Process Lifecycle](#process-lifecycle.md) - [Platform-Specific Process Management](#platform-specific-process-management.md) - [Message Processing](#message-processing.md) - [Transport Selection and Usage Patterns](#transport-selection-and-usage-patterns.md) - [Transport Comparison](#transport-comparison.md) - [Integration with ClientSession](#integration-with-clientsession.md) - [Error Handling and Resilience](#error-handling-and-resilience.md) - [Connection Error Patterns](#connection-error-patterns.md) - [Timeout Management](#timeout-management.md)",
  "StreamableHTTP Transport | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # StreamableHTTP Transport Relevant source files",
  "- [src/mcp/client/sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py) - [src/mcp/client/streamable\\_http.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py) - [src/mcp/server/streamable\\_http.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py) - [src/mcp/server/streamable\\_http\\_manager.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py) - [tests/client/test\\_notification\\_response.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_notification_response.py) - [tests/server/test\\_streamable\\_http\\_manager.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/test_streamable_http_manager.py) - [tests/shared/test\\_streamable\\_http.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_streamable_http.py) The StreamableHTTP Transport provides HTTP-based bidirectional communication for MCP using POST requests and Server-Sent Events (SSE) streaming. This transport enables stateful session management, optional resumability, and authentication support for both clients and servers. For SSE-only transport functionality, see [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md). For stdio-based process communication, see [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md). For WebSocket communication, see [WebSocket Transport](modelcontextprotocol/python-sdk/5.4-transport-security.md). ## Overview StreamableHTTP transport implements the MCP protocol over HTTP using a hybrid approach: clients send messages via HTTP POST requests, while servers respond using either JSON responses or SSE streams. The transport supports both stateful sessions with resumability and stateless request-response patterns. **Key Features:** - HTTP POST requests for client-to-server communication - SSE streaming for server-to-client communication - Session management with unique session IDs - Optional resumability via `EventStore` interface - Authentication support through `httpx.Auth` - DNS rebinding protection via `TransportSecurityMiddleware` - Both stateful and stateless operation modes Sources: [src/mcp/client/streamable\\_http.py1-8](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L1-L8) [src/mcp/server/streamable\\_http.py1-8](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L1-L8) ## Architecture Overview ``` ``` **StreamableHTTP Transport Architecture** Sources: [src/mcp/client/streamable\\_http.py74-108](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L74-L108) [src/mcp/server/streamable\\_http.py122-175](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L122-L175) [src/mcp/server/streamable\\_http\\_manager.py29-79](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L29-L79) ## Client-Side Implementation The client-side implementation centers around the `StreamableHTTPTransport` class and the `streamablehttp_client` async context manager. ### StreamableHTTPTransport Class The `StreamableHTTPTransport` class handles the client-side HTTP communication with session management and protocol negotiation: | Component | Responsibility | | ------------------ | ----------------------------------------------- | | Session Management | Tracks session ID and protocol version | | Request Handling | Manages POST requests and SSE responses | | Authentication | Integrates with `httpx.Auth` for authentication | | Resumption | Supports request resumption with event IDs | **Key Methods:** - `post_writer()` - Handles outgoing requests via HTTP POST - `handle_get_stream()` - Manages incoming SSE streams from server - `terminate_session()` - Explicitly terminates session via DELETE request - `_handle_post_request()` - Processes individual POST requests - `_handle_resumption_request()` - Handles resumption with `Last-Event-ID` **Key Attributes:** - `session_id` - Current session identifier - `protocol_version` - Negotiated protocol version - `request_headers` - Base headers for all requests ### Message Flow Patterns ``` ```",
  "**StreamableHTTP Message Flow** Sources: [src/mcp/client/streamable\\_http.py366-422](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L366-L422) [src/mcp/client/streamable\\_http.py192-218](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L192-L218) [src/mcp/client/streamable\\_http.py423-438](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L423-L438) [src/mcp/server/streamable\\_http.py309-507](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L309-L507) [src/mcp/server/streamable\\_http.py508-599](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L508-L599) [src/mcp/server/streamable\\_http.py600-622](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L600-L622) ### Client Context Manager Usage The primary client interface is the `streamablehttp_client` async context manager: ``` ``` Sources: [src/mcp/client/streamable\\_http.py444-514](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L444-L514) ## Server-Side Implementation The server-side implementation provides two main components: `StreamableHTTPServerTransport` for individual connections and `StreamableHTTPSessionManager` for managing multiple sessions. ### StreamableHTTPServerTransport The `StreamableHTTPServerTransport` class handles individual HTTP connections with support for both SSE streaming and JSON responses: **Operating Modes:** - **SSE Mode** (default): Responses are streamed via Server-Sent Events - **JSON Mode**: Single JSON responses for each request (controlled by `is_json_response_enabled`) **HTTP Method Handling:** - `POST` - Processes JSON-RPC messages via `_handle_post_request()` - `GET` - Establishes SSE streams for server-initiated messages via `_handle_get_request()` - `DELETE` - Terminates sessions explicitly via `_handle_delete_request()` **Key Features:** - Session ID validation using `SESSION_ID_PATTERN` - Request stream management with `_request_streams` dictionary - Event storage integration via `EventStore` interface - Security validation through `TransportSecurityMiddleware` - Memory stream cleanup with `_clean_up_memory_streams()` ### Session Management Architecture ``` ``` **Session Management Components** Sources: [src/mcp/server/streamable\\_http\\_manager.py70-79](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L70-L79) [src/mcp/server/streamable\\_http\\_manager.py146-194](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L146-L194) [src/mcp/server/streamable\\_http\\_manager.py195-280](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L195-L280) ### Stateful vs Stateless Modes The session manager supports two operation modes: | Mode | Session Tracking | State Persistence | Use Case | | --------- | ---------------- | ----------------- | -------------------------------- | | Stateful | Yes | Between requests | Long-lived connections | | Stateless | No | None | Serverless/stateless deployments | **Stateful Mode:** Sessions are tracked with UUIDs, allowing resumption and persistent state. **Stateless Mode:** Each request creates a fresh transport instance with no state retention. Sources: [src/mcp/server/streamable\\_http\\_manager.py54-68](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L54-L68) ## Event Storage and Resumability StreamableHTTP transport supports optional resumability through the `EventStore` interface, allowing clients to reconnect and receive missed events. ### EventStore Interface ``` ``` **Event Storage Architecture** **Resumption Flow:** 1. Client includes `Last-Event-ID` header in GET request via `LAST_EVENT_ID_HEADER` 2. Server calls `EventStore.replay_events_after()` in `_replay_events()` 3. Missed events are replayed via SSE using `_create_event_data()` 4. New events continue from current point with automatic event ID generation **Stream Management:**",
  "- Events are stored per `StreamId` (either request ID or `GET_STREAM_KEY`) - Message router distributes events to appropriate streams based on request correlation - Event IDs are generated by the `EventStore` implementation Sources: [src/mcp/server/streamable\\_http.py84-120](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L84-L120) [src/mcp/server/streamable\\_http.py728-798](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L728-L798) [src/mcp/server/streamable\\_http.py829-880](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L829-L880) ## Security Features StreamableHTTP transport includes DNS rebinding protection through the `TransportSecurityMiddleware`. ### Security Validation The transport validates incoming requests against security policies via `TransportSecurityMiddleware`: | Validation | Scope | Purpose | | -------------- | ------------- | -------------------------------------------- | | Host Header | All requests | Prevent DNS rebinding attacks | | Origin Header | CORS requests | Validate request origin | | Content-Type | POST requests | Ensure proper JSON content | | Accept Headers | POST requests | Validate client accepts required media types | **Security Integration:** - `TransportSecurityMiddleware` is instantiated in `StreamableHTTPServerTransport.__init__()` - Validation occurs in `handle_request()` via `_security.validate_request()` - Failed validation returns error responses before processing **Configuration Example:** ``` ``` Sources: [src/mcp/server/streamable\\_http.py27-30](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L27-L30) [src/mcp/server/streamable\\_http.py166](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L166-L166) [src/mcp/server/streamable\\_http.py268-272](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L268-L272) ## Protocol Implementation Details ### Session ID Management Session IDs are validated against a strict pattern to ensure security: - **Pattern:** Visible ASCII characters (0x21-0x7E) - **Generation:** UUID hex format (32 characters) - **Validation:** `SESSION_ID_PATTERN.fullmatch()` check ### Protocol Version Negotiation The transport negotiates protocol versions during initialization: 1. Client sends `initialize` request 2. Server responds with `InitializeResult` containing `protocolVersion` 3. Subsequent requests include `mcp-protocol-version` header ### Headers and Content Types | Header | Constant | Purpose | Example | | ---------------------- | ----------------------------- | ---------------------- | ------------------------------------- | | `mcp-session-id` | `MCP_SESSION_ID_HEADER` | Session identification | `abc123def456...` | | `mcp-protocol-version` | `MCP_PROTOCOL_VERSION_HEADER` | Protocol version | `2025-03-26` | | `last-event-id` | `LAST_EVENT_ID_HEADER` | Resumption token | `event-123` | | `content-type` | `CONTENT_TYPE` | Request format | `application/json` | | `accept` | `ACCEPT` | Response formats | `application/json, text/event-stream` | **Content Type Constants:** - `CONTENT_TYPE_JSON` = `\"application/json\"` - `CONTENT_TYPE_SSE` = `\"text/event-stream\"` - `JSON` = `\"application/json\"` (client) - `SSE` = `\"text/event-stream\"` (client) **Session ID Validation:** - Pattern: `SESSION_ID_PATTERN` validates visible ASCII characters (0x21-0x7E) - Generated using `uuid4().hex` for new sessions - Validated on transport initialization and request processing Sources: [src/mcp/server/streamable\\_http.py50-64](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L50-L64) [src/mcp/client/streamable\\_http.py42-51](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py#L42-L51) [src/mcp/server/streamable\\_http.py62-64](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L62-L64) ## Integration with ASGI",
  "StreamableHTTP transport integrates with ASGI applications through the session manager: ``` ``` The session manager's `run()` method provides lifecycle management for all sessions and can only be called once per instance. Sources: [src/mcp/server/streamable\\_http\\_manager.py80-120](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L80-L120) [src/mcp/server/streamable\\_http\\_manager.py121-145](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http_manager.py#L121-L145) Dismiss Refresh this wiki Enter email to refresh ### On this page - [StreamableHTTP Transport](#streamablehttp-transport.md) - [Overview](#overview.md) - [Architecture Overview](#architecture-overview.md) - [Client-Side Implementation](#client-side-implementation.md) - [StreamableHTTPTransport Class](#streamablehttptransport-class.md) - [Message Flow Patterns](#message-flow-patterns.md) - [Client Context Manager Usage](#client-context-manager-usage.md) - [Server-Side Implementation](#server-side-implementation.md) - [StreamableHTTPServerTransport](#streamablehttpservertransport.md) - [Session Management Architecture](#session-management-architecture.md) - [Stateful vs Stateless Modes](#stateful-vs-stateless-modes.md) - [Event Storage and Resumability](#event-storage-and-resumability.md) - [EventStore Interface](#eventstore-interface.md) - [Security Features](#security-features.md) - [Security Validation](#security-validation.md) - [Protocol Implementation Details](#protocol-implementation-details.md) - [Session ID Management](#session-id-management.md) - [Protocol Version Negotiation](#protocol-version-negotiation.md) - [Headers and Content Types](#headers-and-content-types.md) - [Integration with ASGI](#integration-with-asgi.md)",
  "Installation & Dependencies | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Installation & Dependencies Relevant source files - [pyproject.toml](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml) - [uv.lock](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/uv.lock) This document covers the installation process for the MCP Python SDK and explains its dependency management system. It provides guidance on system requirements, installation methods, and the role of each dependency category in the SDK's functionality. For information about core MCP concepts after installation, see [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md). For development environment setup including CLI tools, see [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md). ## System Requirements The MCP Python SDK has specific system requirements that must be met before installation. ### Python Version Requirements ``` ```",
  "The SDK requires Python 3.10 or higher, with official support through Python 3.13. Platform-specific dependencies include `pywin32>=310` for Windows systems to support process management and inter-process communication. **Sources:** [pyproject.toml6](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L6-L6) [pyproject.toml19-22](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L19-L22) [pyproject.toml35](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L35-L35) ### Package Manager Requirements The project uses `uv` as its primary dependency manager with a minimum required version of 0.7.2. This is enforced through the build configuration to ensure consistent dependency resolution and workspace management. **Sources:** [pyproject.toml46-48](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L46-L48) ## Installation Methods ### Standard Installation The MCP SDK can be installed from PyPI using standard Python package managers: ``` ``` ### Optional Feature Installation The SDK provides optional feature sets that can be installed as needed: ``` ``` ### Development Installation For development work, install from source with development dependencies: ``` ``` **Sources:** [pyproject.toml38-41](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L38-L41) [pyproject.toml43-44](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L43-L44) ## Core Dependencies Architecture The following diagram shows how core dependencies support different functional areas of the MCP SDK: ``` ``` **Sources:** [pyproject.toml24-36](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L24-L36) ### Core Dependency Functions | Dependency | Version | Purpose | | ------------------- | --------------- | --------------------------------------------------------- | | `anyio` | >=4.5 | Async I/O abstraction for cross-platform async operations | | `httpx` | >=0.27.1 | HTTP client for transport layer communication | | `httpx-sse` | >=0.4 | Server-Sent Events support for real-time communication | | `pydantic` | >=2.11.0,<3.0.0 | Data validation and serialization | | `starlette` | >=0.27 | ASGI web framework for server implementations | | `python-multipart` | >=0.0.9 | Multipart form data parsing for HTTP transport | | `sse-starlette` | >=1.6.1 | SSE server implementation for Starlette | | `pydantic-settings` | >=2.5.2 | Configuration management with Pydantic | | `uvicorn` | >=0.31.1 | ASGI server (excluded on emscripten platform) | | `jsonschema` | >=4.20.0 | JSON schema validation and generation | ## Optional Dependencies ### Feature-Specific Optional Dependencies ``` ``` **Sources:** [pyproject.toml38-41](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L38-L41) ### CLI Script Configuration The SDK provides a CLI entry point through the `mcp` command, which requires the `cli` optional dependency group to be installed. The CLI script configuration automatically includes the required dependencies when the CLI feature is requested. **Sources:** [pyproject.toml43-44](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L43-L44) ## Development Dependencies ### Development Dependency Groups ``` ``` The development environment automatically includes both `dev` and `docs` dependency groups through the default groups configuration. **Sources:** [pyproject.toml46-47](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L46-L47) [pyproject.toml50-68](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L50-L68) ## Build System & Versioning ### Build Configuration The SDK uses a modern Python build system with dynamic versioning:",
  "| Component | Tool | Purpose | | ---------------- | ----------------------- | ------------------------------------ | | Build Backend | `hatchling` | Modern Python packaging build system | | Version Source | `uv-dynamic-versioning` | Git-based dynamic version generation | | Version Style | `pep440` | PEP 440 compliant version numbering | | Package Location | `src/mcp` | Source package directory | The build system automatically generates versions from Git tags using PEP 440 formatting with bump support for development versions. **Sources:** [pyproject.toml70-80](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L70-L80) [pyproject.toml87-88](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L87-L88) ## Dependency Management with uv ### Workspace Configuration ``` ``` The uv workspace configuration enables unified dependency management across the main SDK package and all example projects. This ensures consistent dependency versions and simplifies development workflows. **Sources:** [pyproject.toml136-140](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L136-L140) [pyproject.toml46-47](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L46-L47) ### Version Constraints The uv configuration enforces minimum version requirements and provides automatic dependency resolution across the entire workspace. The required uv version (>=0.7.2) ensures access to modern workspace features and dependency group management. **Sources:** [pyproject.toml46-48](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/pyproject.toml#L46-L48) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Installation & Dependencies](#installation-dependencies.md) - [System Requirements](#system-requirements.md) - [Python Version Requirements](#python-version-requirements.md) - [Package Manager Requirements](#package-manager-requirements.md) - [Installation Methods](#installation-methods.md) - [Standard Installation](#standard-installation.md) - [Optional Feature Installation](#optional-feature-installation.md) - [Development Installation](#development-installation.md) - [Core Dependencies Architecture](#core-dependencies-architecture.md) - [Core Dependency Functions](#core-dependency-functions.md) - [Optional Dependencies](#optional-dependencies.md) - [Feature-Specific Optional Dependencies](#feature-specific-optional-dependencies.md) - [CLI Script Configuration](#cli-script-configuration.md) - [Development Dependencies](#development-dependencies.md) - [Development Dependency Groups](#development-dependency-groups.md) - [Build System & Versioning](#build-system-versioning.md) - [Build Configuration](#build-configuration.md) - [Dependency Management with uv](#dependency-management-with-uv.md) - [Workspace Configuration](#workspace-configuration.md) - [Version Constraints](#version-constraints.md)",
  "modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Overview Relevant source files - [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py) The Model Context Protocol (MCP) Python SDK is a comprehensive framework for building servers and clients that enable Large Language Models to access external tools, data, and services in a standardized way. This SDK implements the complete MCP specification, providing both high-level developer-friendly APIs and low-level protocol implementations.",
  "The SDK enables developers to create MCP servers that expose resources (data), tools (functions), and prompts (templates) to LLM applications, as well as MCP clients that can discover and interact with these servers. For detailed implementation guidance on building servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For client development, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). For protocol-level details, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md). ## System Architecture The MCP Python SDK is organized into several distinct layers, each serving specific roles in the protocol implementation: ``` ``` **Sources:** [README.md1-1770](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1-L1770) [src/mcp/server/lowlevel/server.py1-727](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L727) [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349) ## Core Components ### Protocol Foundation The MCP SDK is built on JSON-RPC 2.0 messaging with well-defined protocol types. The `mcp.types` module contains all protocol message definitions, including requests, responses, and notifications that flow between clients and servers. ``` ``` **Sources:** [src/mcp/types.py124-192](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L124-L192) [src/mcp/types.py1248-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1248-L1349) ### Server Implementations The SDK provides two primary approaches for building MCP servers: **FastMCP Framework** - A decorator-based high-level framework that automatically handles protocol compliance, schema generation, and transport integration. Users define tools, resources, and prompts using Python decorators. **Low-Level Server** - Direct protocol implementation providing full control over message handling, lifecycle management, and custom protocol extensions. ``` ``` **Sources:** [README.md138-170](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L138-L170) [src/mcp/server/lowlevel/server.py133-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L133-L158) ### Client Framework The client framework centers around `ClientSession` which provides high-level methods for discovering and interacting with MCP servers. It handles transport abstraction, authentication, and protocol message management. ``` ``` **Sources:** [README.md660-733](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L660-L733) ### Transport Layer The SDK supports three transport mechanisms for MCP communication, each suited for different deployment scenarios: | Transport | Use Case | Implementation | | ----------------- | ---------------------------------- | -------------------------------------- | | `stdio` | Process-based servers, development | `mcp.server.stdio`, `mcp.client.stdio` | | `sse` | Real-time web applications | `mcp.server.sse`, `mcp.client.sse` | | `streamable-http` | Production HTTP deployments | `mcp.server.streamablehttp` | **Sources:** [README.md1104-1217](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1104-L1217) ## Development Workflow The SDK includes comprehensive development tools accessible through the `mcp` CLI: ``` ``` **Sources:** [README.md1027-1102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1027-L1102) For specific implementation details on each component, refer to the dedicated sections: [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) for high-level server development, [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) for client implementation, [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) for communication mechanisms, and [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) for development workflow. # Overview",
  "The Model Context Protocol (MCP) Python SDK is a comprehensive framework for building servers and clients that enable Large Language Models to access external tools, data, and services in a standardized way. This SDK implements the complete MCP specification, providing both high-level developer-friendly APIs and low-level protocol implementations. The SDK enables developers to create MCP servers that expose resources (data), tools (functions), and prompts (templates) to LLM applications, as well as MCP clients that can discover and interact with these servers. For detailed implementation guidance on building servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For client development, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). For protocol-level details, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md). ## System Architecture The MCP Python SDK is organized into several distinct layers, each serving specific roles in the protocol implementation: ``` ``` **Sources:** [README.md1-1770](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1-L1770) [src/mcp/server/lowlevel/server.py1-727](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L727) [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349) ## Core Components ### Protocol Foundation The MCP SDK is built on JSON-RPC 2.0 messaging with well-defined protocol types. The `mcp.types` module contains all protocol message definitions, including requests, responses, and notifications that flow between clients and servers. ``` ``` **Sources:** [src/mcp/types.py124-192](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L124-L192) [src/mcp/types.py1248-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1248-L1349) ### Server Implementations The SDK provides two primary approaches for building MCP servers: **FastMCP Framework** - A decorator-based high-level framework that automatically handles protocol compliance, schema generation, and transport integration. Users define tools, resources, and prompts using Python decorators. **Low-Level Server** - Direct protocol implementation providing full control over message handling, lifecycle management, and custom protocol extensions. ``` ``` **Sources:** [README.md138-170](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L138-L170) [src/mcp/server/lowlevel/server.py133-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L133-L158) ### Client Framework The client framework centers around `ClientSession` which provides high-level methods for discovering and interacting with MCP servers. It handles transport abstraction, authentication, and protocol message management. ``` ``` **Sources:** [README.md660-733](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L660-L733) ### Transport Layer The SDK supports three transport mechanisms for MCP communication, each suited for different deployment scenarios: | Transport | Use Case | Implementation | | ----------------- | ---------------------------------- | -------------------------------------- | | `stdio` | Process-based servers, development | `mcp.server.stdio`, `mcp.client.stdio` | | `sse` | Real-time web applications | `mcp.server.sse`, `mcp.client.sse` | | `streamable-http` | Production HTTP deployments | `mcp.server.streamablehttp` | **Sources:** [README.md1104-1217](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1104-L1217) ## Development Workflow The SDK includes comprehensive development tools accessible through the `mcp` CLI: ``` ``` **Sources:** [README.md1027-1102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1027-L1102)",
  "For specific implementation details on each component, refer to the dedicated sections: [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) for high-level server development, [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) for client implementation, [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) for communication mechanisms, and [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) for development workflow. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Overview](#overview.md) - [System Architecture](#system-architecture.md) - [Core Components](#core-components.md) - [Protocol Foundation](#protocol-foundation.md) - [Server Implementations](#server-implementations.md) - [Client Framework](#client-framework.md) - [Transport Layer](#transport-layer.md) - [Development Workflow](#development-workflow.md) - [Overview](#overview-1.md) - [System Architecture](#system-architecture-1.md) - [Core Components](#core-components-1.md) - [Protocol Foundation](#protocol-foundation-1.md) - [Server Implementations](#server-implementations-1.md) - [Client Framework](#client-framework-1.md) - [Transport Layer](#transport-layer-1.md) - [Development Workflow](#development-workflow-1.md)",
  "Claude Desktop Integration | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Claude Desktop Integration Relevant source files - [examples/fastmcp/unicode\\_example.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/fastmcp/unicode_example.py) - [src/mcp/cli/claude.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py) - [src/mcp/cli/cli.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py) - [tests/client/test\\_config.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_config.py) - [tests/issues/test\\_100\\_tool\\_listing.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_100_tool_listing.py)",
  "This document covers the integration of MCP servers with the Claude Desktop application. The integration allows MCP servers built with the Python SDK to be automatically discovered and used by Claude Desktop through configuration file management and standardized execution commands. For information about building MCP servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For CLI development tools, see [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md). ## Integration Architecture The Claude Desktop integration operates through a configuration-based approach where MCP servers are registered in Claude Desktop's configuration file and executed via standardized `uv run` commands. ``` ``` **Claude Desktop Integration Architecture** Sources: [src/mcp/cli/claude.py44-148](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L44-L148) [src/mcp/cli/cli.py362-488](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L362-L488) ## Installation Process The installation process uses the `mcp install` command to register MCP servers with Claude Desktop. The process involves server discovery, dependency resolution, and configuration file updates. ``` ``` **MCP Server Installation Flow** The installation process handles several key aspects: | Component | Function | Purpose | | --------------------- | ------------------------ | -------------------------------------------------- | | File parsing | `_parse_file_path()` | Extracts file path and optional server object name | | Server import | `_import_server()` | Loads server to extract metadata and dependencies | | Config update | `update_claude_config()` | Updates Claude's configuration file | | Dependency resolution | Server.dependencies | Automatically includes required packages | Sources: [src/mcp/cli/cli.py420-488](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L420-L488) [src/mcp/cli/cli.py88-117](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L88-L117) [src/mcp/cli/cli.py119-208](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L119-L208) ## Configuration File Structure Claude Desktop uses a JSON configuration file to store MCP server definitions. The configuration file follows a specific structure that defines execution commands, environment variables, and server metadata. ``` ``` **Configuration File Structure** The generated configuration follows this pattern: ``` ``` Sources: [src/mcp/cli/claude.py87-135](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L87-L135) [src/mcp/cli/claude.py101-125](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L101-L125) ## Platform-Specific Configuration Paths The system automatically detects Claude Desktop's configuration directory based on the operating system platform using standardized application data locations. ``` ``` **Platform-Specific Configuration Paths** | Platform | Configuration Path | Environment Variable | | -------- | ----------------------------------------------- | -------------------- | | Windows | `%USERPROFILE%\\AppData\\Roaming\\Claude` | - | | macOS | `~/Library/Application Support/Claude` | - | | Linux | `$XDG_CONFIG_HOME/Claude` or `~/.config/Claude` | `XDG_CONFIG_HOME` | Sources: [src/mcp/cli/claude.py17-30](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L17-L30) ## Environment Variables and Dependencies The configuration system supports environment variables and automatic dependency management for MCP servers. Environment variables are preserved across updates and can be loaded from files or command line arguments. ``` ``` **Environment and Dependency Management** The system handles environment variables with the following precedence: 1. New command-line variables override existing ones 2. Existing variables are preserved if not explicitly updated 3. Variables from `.env` files are loaded using the `python-dotenv` library Dependency management includes: - Automatic inclusion of `mcp[cli]` package - Server-specific dependencies from `server.dependencies` attribute - Additional packages specified via `--with` flags - Editable package installations via `--with-editable`",
  "Sources: [src/mcp/cli/claude.py92-99](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L92-L99) [src/mcp/cli/cli.py452-456](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L452-L456) [src/mcp/cli/cli.py104-115](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L104-L115) [src/mcp/cli/cli.py458-476](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L458-L476) ## UV Command Generation The integration generates standardized `uv run` commands that Claude Desktop executes to launch MCP servers. The command structure ensures proper dependency isolation and package management. ``` ``` **UV Command Generation Process** The system generates commands following this pattern: ``` ``` Key aspects of command generation: - Uses absolute path to `uv` executable for reliability - Converts relative file paths to absolute paths - Preserves server object specifications (e.g., `server.py:app`) - Deduplicates packages while preserving order - Handles Windows drive letter syntax correctly Sources: [src/mcp/cli/claude.py33-41](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L33-L41) [src/mcp/cli/claude.py101-125](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L101-L125) [src/mcp/cli/claude.py116-122](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L116-L122) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Claude Desktop Integration](#claude-desktop-integration.md) - [Integration Architecture](#integration-architecture.md) - [Installation Process](#installation-process.md) - [Configuration File Structure](#configuration-file-structure.md) - [Platform-Specific Configuration Paths](#platform-specific-configuration-paths.md) - [Environment Variables and Dependencies](#environment-variables-and-dependencies.md) - [UV Command Generation](#uv-command-generation.md)",
  "Key Concepts | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Key Concepts Relevant source files - [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py) This document explains the fundamental concepts of the Model Context Protocol (MCP) Python SDK. It covers the core entities, protocol mechanics, and architectural patterns that developers need to understand when building MCP servers and clients. For specific implementation guidance on building servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For client-side development, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). ## MCP Protocol Overview",
  "The Model Context Protocol enables standardized communication between Large Language Models and external systems. The protocol defines how clients (typically LLM applications) can discover and interact with servers that expose tools, data, and interaction patterns. ``` ``` **MCP Core Architecture** Sources: [README.md84-194](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L84-L194) [src/mcp/types.py8-34](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L8-L34) ## Servers and Clients ### MCP Servers Servers expose functionality and data to LLM applications. The MCP Python SDK provides two server implementation approaches: - **FastMCP**: High-level decorator-based framework using `FastMCP` class - **Low-level Server**: Direct protocol implementation using `Server` class ``` ``` **Server Implementation Architecture** Sources: [src/mcp/server/lowlevel/server.py1-66](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L66) [README.md198-265](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L198-L265) ### MCP Clients Clients connect to servers and facilitate communication with LLMs. The primary client implementation is `ClientSession`, which handles protocol negotiation, message routing, and connection management. Sources: [README.md84-92](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L84-L92) ## Core MCP Entities ### Tools Tools are executable functions that LLMs can call to perform actions or computations. They are defined using the `@tool` decorator in FastMCP or the `call_tool()` handler in low-level servers. ``` ``` **Tool Lifecycle and Processing** Tools support both structured and unstructured output. The `CallToolResult` type includes both `content` (unstructured) and `structuredContent` (structured) fields for maximum compatibility. Sources: [README.md297-384](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L297-L384) [src/mcp/server/lowlevel/server.py465-547](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L465-L547) [src/mcp/types.py869-922](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L869-L922) ### Resources Resources provide read-only access to data that LLMs can consume. They are identified by URIs and can return text, binary data, or multiple content blocks. ``` ``` **Resource Architecture and Content Types** Sources: [README.md266-296](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L266-L296) [src/mcp/types.py431-554](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L431-L554) [src/mcp/server/lowlevel/server.py311-367](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L311-L367) ### Prompts Prompts are reusable templates that help structure LLM interactions. They can include parameters and return formatted message sequences. ``` ``` **Prompt Template System** Sources: [README.md490-517](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L490-L517) [src/mcp/types.py630-812](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L630-L812) ## Protocol and Message Flow The MCP protocol uses JSON-RPC 2.0 for message exchange. Communication follows a request-response pattern with support for notifications. ``` ``` **MCP Protocol Message Flow** The protocol supports several core message types defined in `types.py`: - **Requests**: `ClientRequest`, `ServerRequest` - expect responses - **Notifications**: `ClientNotification`, `ServerNotification` - no response expected - **Results**: `ClientResult`, `ServerResult` - responses to requests Sources: [src/mcp/types.py82-348](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L82-L348) [README.md25-194](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L25-L194) ## Transport Layer MCP supports multiple transport mechanisms for client-server communication: ``` ```",
  "**Transport Layer Architecture** Each transport provides bidirectional communication with different characteristics: - **stdio**: Process-based communication via stdin/stdout - **SSE**: HTTP-based with server-sent events for real-time updates - **StreamableHTTP**: Advanced HTTP transport with session management and resumability Sources: [src/mcp/types.py124-193](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L124-L193) Transport architecture from overview diagrams ## Server Implementations ### FastMCP Framework `FastMCP` provides a decorator-based approach for rapid server development. It automatically handles protocol compliance, schema generation, and message routing. ``` ``` **FastMCP Internal Architecture** ### Low-level Server The `Server` class provides direct access to the MCP protocol with explicit handler registration using decorators like `list_tools()`, `call_tool()`, etc. Sources: [src/mcp/server/lowlevel/server.py133-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L133-L158) FastMCP concepts from overview diagrams ## Context and Session Management ### Request Context The `Context` object provides access to MCP capabilities and request metadata within tool and resource functions. ``` ``` **Context and Session Architecture** The context system enables: - **Logging**: Send log messages to clients via `LoggingMessageNotification` - **Progress**: Report operation progress via `ProgressNotification` - **Resource Access**: Read other resources via `ReadResourceRequest` - **User Interaction**: Request additional information via `ElicitRequest` - **LLM Sampling**: Generate text via `CreateMessageRequest` ### Session Lifecycle Both `ClientSession` and `ServerSession` manage connection state, protocol version negotiation, and message routing throughout the connection lifetime. Sources: [README.md580-646](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L580-L646) [src/mcp/shared/context.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/context.py) (referenced), [src/mcp/server/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/session.py) (referenced) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Key Concepts](#key-concepts.md) - [MCP Protocol Overview](#mcp-protocol-overview.md) - [Servers and Clients](#servers-and-clients.md) - [MCP Servers](#mcp-servers.md) - [MCP Clients](#mcp-clients.md) - [Core MCP Entities](#core-mcp-entities.md) - [Tools](#tools.md) - [Resources](#resources.md) - [Prompts](#prompts.md) - [Protocol and Message Flow](#protocol-and-message-flow.md) - [Transport Layer](#transport-layer.md) - [Server Implementations](#server-implementations.md) - [FastMCP Framework](#fastmcp-framework.md) - [Low-level Server](#low-level-server.md) - [Context and Session Management](#context-and-session-management.md) - [Request Context](#request-context.md) - [Session Lifecycle](#session-lifecycle.md)",
  "Client Authentication | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Client Authentication Relevant source files",
  "- [src/mcp/client/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py) - [src/mcp/server/auth/handlers/register.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/register.py) - [src/mcp/server/auth/routes.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py) - [src/mcp/shared/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py) - [tests/client/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py) - [tests/shared/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_auth.py) This page covers the OAuth 2.0 client authentication implementation in the MCP Python SDK. It provides comprehensive OAuth 2.0 support including PKCE flows, automatic discovery, dynamic client registration, and token management for MCP clients. For server-side authentication, see [OAuth 2.0 Server](#7.2.md). For general ClientSession usage, see [ClientSession](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md). ## Overview The client authentication system implements OAuth 2.0 Authorization Code flow with PKCE (Proof Key for Code Exchange) for secure authentication with MCP servers. It supports both modern RFC 9728 protected resource architecture and legacy authorization server patterns for backwards compatibility. **Key Components:** - `OAuthClientProvider` - Main authentication provider implementing `httpx.Auth` - `OAuthContext` - Stateful context managing OAuth flow data - `PKCEParameters` - PKCE parameter generation and validation - `TokenStorage` - Protocol for persistent token storage Sources: [src/mcp/client/auth.py1-552](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L1-L552) [tests/client/test\\_auth.py1-900](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L1-L900) ## Architecture Overview ``` ``` Sources: [src/mcp/client/auth.py179-552](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L179-L552) [src/mcp/client/auth.py84-177](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L84-L177) ## Core Components ### OAuthClientProvider The `OAuthClientProvider` class is the main entry point for OAuth authentication, implementing the `httpx.Auth` interface for seamless integration with HTTP clients. | Component | Purpose | Key Methods | | -------------------- | -------------------------------- | --------------------------------------------------------- | | **Initialization** | Setup OAuth context and handlers | `__init__()` | | **Discovery** | Find authorization endpoints | `_discover_protected_resource()`, `_get_discovery_urls()` | | **Registration** | Register OAuth client | `_register_client()` | | **Authorization** | Perform PKCE flow | `_perform_authorization()` | | **Token Management** | Exchange and refresh tokens | `_exchange_token()`, `_refresh_token()` | | **Integration** | HTTPX auth flow | `async_auth_flow()` | **Key Configuration:** ``` ``` Sources: [src/mcp/client/auth.py179-206](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L179-L206) [src/mcp/client/auth.py485-552](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L485-L552) ### OAuthContext The `OAuthContext` dataclass maintains all state during the OAuth flow, including discovered metadata, client information, and current tokens. **State Management:** - **Discovery metadata**: `protected_resource_metadata`, `oauth_metadata` - **Client registration**: `client_info` - **Token state**: `current_tokens`, `token_expiry_time` - **Thread safety**: `lock` (anyio.Lock) **Key Methods:** - `is_token_valid()` - Check token validity and expiration - `can_refresh_token()` - Determine if refresh is possible - `get_resource_url()` - Calculate RFC 8707 resource parameter - `should_include_resource_param()` - Protocol version-aware parameter inclusion",
  "Sources: [src/mcp/client/auth.py84-177](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L84-L177) ### PKCEParameters Implements PKCE (Proof Key for Code Exchange) parameter generation following RFC 7636 for enhanced security. **Generation Process:** - **Code verifier**: 128-character random string using `[A-Za-z0-9-._~]` - **Code challenge**: SHA256 hash of verifier, base64url-encoded (no padding) - **Challenge method**: Always \"S256\" ``` ``` Sources: [src/mcp/client/auth.py49-62](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L49-L62) [tests/client/test\\_auth.py82-107](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L82-L107) ## Authentication Flow ### Complete OAuth Flow Sequence ``` ``` Sources: [src/mcp/client/auth.py485-552](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L485-L552) [tests/client/test\\_auth.py575-701](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L575-L701) ### Discovery Mechanisms The client implements multiple discovery mechanisms for maximum compatibility: **1. RFC 9728 Protected Resource Discovery** - Extracts resource metadata URL from `WWW-Authenticate` header - Falls back to `/.well-known/oauth-protected-resource` - Discovers authorization server URLs **2. OAuth Metadata Discovery with Fallback** The client tries multiple discovery URLs in order: 1. `/.well-known/oauth-authorization-server{path}` (RFC 8414 path-aware) 2. `/.well-known/oauth-authorization-server` (OAuth root) 3. `/.well-known/openid-configuration{path}` (OIDC path-aware) 4. `{server_url}/.well-known/openid-configuration` (OIDC fallback) ``` ``` Sources: [src/mcp/client/auth.py254-279](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L254-L279) [src/mcp/client/auth.py231-253](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L231-L253) [tests/client/test\\_auth.py252-365](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L252-L365) ### WWW-Authenticate Header Parsing Supports RFC 9728 resource metadata discovery via `WWW-Authenticate` header parsing: ``` ``` **Supported Header Formats:** - `Bearer resource_metadata=\"https://api.example.com/.well-known/oauth-protected-resource\"` - `Bearer resource_metadata=https://api.example.com/metadata` - `Bearer realm=\"api\", resource_metadata=\"https://api.example.com/metadata\", error=\"insufficient_scope\"` Sources: [src/mcp/client/auth.py207-229](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L207-L229) [tests/client/test\\_auth.py782-900](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L782-L900) ## Token Management ### Token Lifecycle ``` ``` ### Token Validation and Refresh **Token Validity Checking:** ``` ``` **Automatic Refresh Logic:** The provider automatically attempts token refresh when: 1. Current token is expired but refresh token exists 2. Client information is available for authentication 3. Refresh fails trigger full re-authentication Sources: [src/mcp/client/auth.py127-143](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L127-L143) [src/mcp/client/auth.py494-502](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L494-L502) [src/mcp/client/auth.py411-462](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L411-L462) ### Resource Parameter Handling Implements RFC 8707 resource parameter inclusion based on protocol version and protected resource metadata: ``` ``` **Resource URL Calculation:** - Uses protected resource metadata if available and valid - Falls back to canonical server URL derived from MCP endpoint - Validates hierarchical resource relationships",
  "Sources: [src/mcp/client/auth.py159-177](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L159-L177) [src/mcp/client/auth.py144-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L144-L158) [tests/client/test\\_auth.py459-534](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L459-L534) ## Token Storage ### TokenStorage Protocol The `TokenStorage` protocol defines the interface for persistent token storage: ``` ``` **Implementation Requirements:** - **Persistence**: Tokens should survive application restarts - **Security**: Secure storage with appropriate encryption - **Concurrency**: Thread-safe access patterns - **Cleanup**: Automatic removal of expired tokens **Example Storage Implementation:** ``` ``` Sources: [src/mcp/client/auth.py64-82](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L64-L82) [tests/client/test\\_auth.py17-35](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L17-L35) ## Error Handling ### Exception Hierarchy | Exception | Usage | Common Causes | | ------------------------ | ---------------------------- | -------------------------------------- | | `OAuthFlowError` | Base OAuth flow errors | Network issues, invalid configuration | | `OAuthTokenError` | Token-specific errors | Invalid tokens, expired refresh tokens | | `OAuthRegistrationError` | Client registration failures | Invalid metadata, server rejection | **Error Recovery Strategies:** - **Network errors**: Automatic retry with exponential backoff - **Invalid tokens**: Clear stored tokens and restart OAuth flow - **Registration failures**: Log error details for debugging - **Authorization failures**: Clear state and prompt re-authentication ``` ``` Sources: [src/mcp/client/auth.py37-47](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L37-L47) [src/mcp/client/auth.py388-410](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L388-L410) [src/mcp/client/auth.py442-462](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L442-L462) ## Integration Examples ### Basic Usage with HTTP Client ``` ``` ### Transport Integration The authentication provider integrates seamlessly with all MCP transports: - **StreamableHTTP**: Built-in OAuth support via `httpx.AsyncClient` - **SSE**: Authentication headers added to SSE connections - **WebSocket**: OAuth tokens passed in connection headers - **stdio**: Not applicable (local process communication) Sources: [examples/clients/simple-auth-client/](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-auth-client/) [src/mcp/client/auth.py485-552](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L485-L552) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Client Authentication](#client-authentication.md) - [Overview](#overview.md) - [Architecture Overview](#architecture-overview.md) - [Core Components](#core-components.md) - [OAuthClientProvider](#oauthclientprovider.md) - [OAuthContext](#oauthcontext.md) - [PKCEParameters](#pkceparameters.md) - [Authentication Flow](#authentication-flow.md) - [Complete OAuth Flow Sequence](#complete-oauth-flow-sequence.md) - [Discovery Mechanisms](#discovery-mechanisms.md) - [WWW-Authenticate Header Parsing](#www-authenticate-header-parsing.md) - [Token Management](#token-management.md) - [Token Lifecycle](#token-lifecycle.md) - [Token Validation and Refresh](#token-validation-and-refresh.md) - [Resource Parameter Handling](#resource-parameter-handling.md) - [Token Storage](#token-storage.md) - [TokenStorage Protocol](#tokenstorage-protocol.md) - [Error Handling](#error-handling.md) - [Exception Hierarchy](#exception-hierarchy.md) - [Integration Examples](#integration-examples.md) - [Basic Usage with HTTP Client](#basic-usage-with-http-client.md) - [Transport Integration](#transport-integration.md)",
  "modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Overview Relevant source files - [README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md) - [src/mcp/server/lowlevel/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py) - [src/mcp/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py) The Model Context Protocol (MCP) Python SDK is a comprehensive framework for building servers and clients that enable Large Language Models to access external tools, data, and services in a standardized way. This SDK implements the complete MCP specification, providing both high-level developer-friendly APIs and low-level protocol implementations.",
  "The SDK enables developers to create MCP servers that expose resources (data), tools (functions), and prompts (templates) to LLM applications, as well as MCP clients that can discover and interact with these servers. For detailed implementation guidance on building servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For client development, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). For protocol-level details, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md). ## System Architecture The MCP Python SDK is organized into several distinct layers, each serving specific roles in the protocol implementation: ``` ``` **Sources:** [README.md1-1770](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1-L1770) [src/mcp/server/lowlevel/server.py1-727](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L727) [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349) ## Core Components ### Protocol Foundation The MCP SDK is built on JSON-RPC 2.0 messaging with well-defined protocol types. The `mcp.types` module contains all protocol message definitions, including requests, responses, and notifications that flow between clients and servers. ``` ``` **Sources:** [src/mcp/types.py124-192](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L124-L192) [src/mcp/types.py1248-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1248-L1349) ### Server Implementations The SDK provides two primary approaches for building MCP servers: **FastMCP Framework** - A decorator-based high-level framework that automatically handles protocol compliance, schema generation, and transport integration. Users define tools, resources, and prompts using Python decorators. **Low-Level Server** - Direct protocol implementation providing full control over message handling, lifecycle management, and custom protocol extensions. ``` ``` **Sources:** [README.md138-170](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L138-L170) [src/mcp/server/lowlevel/server.py133-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L133-L158) ### Client Framework The client framework centers around `ClientSession` which provides high-level methods for discovering and interacting with MCP servers. It handles transport abstraction, authentication, and protocol message management. ``` ``` **Sources:** [README.md660-733](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L660-L733) ### Transport Layer The SDK supports three transport mechanisms for MCP communication, each suited for different deployment scenarios: | Transport | Use Case | Implementation | | ----------------- | ---------------------------------- | -------------------------------------- | | `stdio` | Process-based servers, development | `mcp.server.stdio`, `mcp.client.stdio` | | `sse` | Real-time web applications | `mcp.server.sse`, `mcp.client.sse` | | `streamable-http` | Production HTTP deployments | `mcp.server.streamablehttp` | **Sources:** [README.md1104-1217](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1104-L1217) ## Development Workflow The SDK includes comprehensive development tools accessible through the `mcp` CLI: ``` ``` **Sources:** [README.md1027-1102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1027-L1102) For specific implementation details on each component, refer to the dedicated sections: [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) for high-level server development, [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) for client implementation, [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) for communication mechanisms, and [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) for development workflow. # Overview",
  "The Model Context Protocol (MCP) Python SDK is a comprehensive framework for building servers and clients that enable Large Language Models to access external tools, data, and services in a standardized way. This SDK implements the complete MCP specification, providing both high-level developer-friendly APIs and low-level protocol implementations. The SDK enables developers to create MCP servers that expose resources (data), tools (functions), and prompts (templates) to LLM applications, as well as MCP clients that can discover and interact with these servers. For detailed implementation guidance on building servers, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For client development, see [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md). For protocol-level details, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md). ## System Architecture The MCP Python SDK is organized into several distinct layers, each serving specific roles in the protocol implementation: ``` ``` **Sources:** [README.md1-1770](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1-L1770) [src/mcp/server/lowlevel/server.py1-727](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L1-L727) [src/mcp/types.py1-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1-L1349) ## Core Components ### Protocol Foundation The MCP SDK is built on JSON-RPC 2.0 messaging with well-defined protocol types. The `mcp.types` module contains all protocol message definitions, including requests, responses, and notifications that flow between clients and servers. ``` ``` **Sources:** [src/mcp/types.py124-192](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L124-L192) [src/mcp/types.py1248-1349](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/types.py#L1248-L1349) ### Server Implementations The SDK provides two primary approaches for building MCP servers: **FastMCP Framework** - A decorator-based high-level framework that automatically handles protocol compliance, schema generation, and transport integration. Users define tools, resources, and prompts using Python decorators. **Low-Level Server** - Direct protocol implementation providing full control over message handling, lifecycle management, and custom protocol extensions. ``` ``` **Sources:** [README.md138-170](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L138-L170) [src/mcp/server/lowlevel/server.py133-158](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/lowlevel/server.py#L133-L158) ### Client Framework The client framework centers around `ClientSession` which provides high-level methods for discovering and interacting with MCP servers. It handles transport abstraction, authentication, and protocol message management. ``` ``` **Sources:** [README.md660-733](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L660-L733) ### Transport Layer The SDK supports three transport mechanisms for MCP communication, each suited for different deployment scenarios: | Transport | Use Case | Implementation | | ----------------- | ---------------------------------- | -------------------------------------- | | `stdio` | Process-based servers, development | `mcp.server.stdio`, `mcp.client.stdio` | | `sse` | Real-time web applications | `mcp.server.sse`, `mcp.client.sse` | | `streamable-http` | Production HTTP deployments | `mcp.server.streamablehttp` | **Sources:** [README.md1104-1217](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1104-L1217) ## Development Workflow The SDK includes comprehensive development tools accessible through the `mcp` CLI: ``` ``` **Sources:** [README.md1027-1102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/README.md#L1027-L1102)",
  "For specific implementation details on each component, refer to the dedicated sections: [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) for high-level server development, [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) for client implementation, [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) for communication mechanisms, and [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) for development workflow. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Overview](#overview.md) - [System Architecture](#system-architecture.md) - [Core Components](#core-components.md) - [Protocol Foundation](#protocol-foundation.md) - [Server Implementations](#server-implementations.md) - [Client Framework](#client-framework.md) - [Transport Layer](#transport-layer.md) - [Development Workflow](#development-workflow.md) - [Overview](#overview-1.md) - [System Architecture](#system-architecture-1.md) - [Core Components](#core-components-1.md) - [Protocol Foundation](#protocol-foundation-1.md) - [Server Implementations](#server-implementations-1.md) - [Client Framework](#client-framework-1.md) - [Transport Layer](#transport-layer-1.md) - [Development Workflow](#development-workflow-1.md)",
  "Transport Layer | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Transport Layer Relevant source files - [src/mcp/server/sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py) - [tests/shared/test\\_sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py) The transport layer provides the foundational communication mechanisms that enable MCP clients and servers to exchange JSON-RPC messages. This layer abstracts away the underlying network protocols and provides consistent interfaces for different communication patterns including HTTP-based streaming, WebSockets, and process-based communication. For detailed protocol message handling, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md). For client-side transport usage, see [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md). For server-side transport security, see [Transport Security](#5.5.md).",
  "## Transport Architecture Overview The MCP SDK supports multiple transport mechanisms, each optimized for different deployment scenarios and communication patterns: ``` ``` **Sources:** [src/mcp/server/streamable\\_http.py122-902](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/streamable_http.py#L122-L902) [src/mcp/server/sse.py64-250](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L64-L250) [src/mcp/server/transport\\_security.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py) [tests/shared/test\\_streamable\\_http.py1-1600](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_streamable_http.py#L1-L1600) ## Transport Types and Use Cases | Transport | Primary Use Case | Features | Implementation | | ------------------ | ---------------------------- | ---------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | | **StreamableHTTP** | Production web deployment | Session management, resumability, stateful/stateless modes | [StreamableHTTPServerTransport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) | | **SSE** | Real-time notifications | Lightweight streaming, ASGI integration | [SseServerTransport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) | | **STDIO** | Local development, CLI tools | Process spawning, simple setup | [stdio\\_server/client](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) | | **WebSocket** | Interactive applications | Full-duplex, low latency | [websocket\\_server/client](modelcontextprotocol/python-sdk/5.4-transport-security.md) | ## Core Transport Classes ### Server Transport Interfaces The server-side transports share common patterns but implement different communication mechanisms: #### SSE Transport Architecture ``` ``` **Sources:** [src/mcp/server/sse.py64-250](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L64-L250) [tests/shared/test\\_sse.py83-104](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L83-L104) The `SseServerTransport` class provides two ASGI applications: - `connect_sse()`: Handles GET requests to establish SSE streams - `handle_post_message()`: Handles POST requests containing client messages Key implementation details: - Endpoint validation prevents full URLs, requiring relative paths like `/messages/` - Session management using UUID4 for unique session identification - Request context propagation through `ServerMessageMetadata` - DNS rebinding protection via `TransportSecurityMiddleware` ### Client Transport Interfaces Client transports provide consistent async context manager interfaces: ``` ``` **Sources:** [src/mcp/client/streamable\\_http.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/streamable_http.py) [src/mcp/client/sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py) [src/mcp/client/stdio.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/stdio.py) [src/mcp/client/websocket.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/websocket.py) ## Message Flow Architecture All transports follow a common message flow pattern using anyio memory streams, with SSE implementing a specific dual-channel approach: ### General Message Flow ``` ``` ### SSE-Specific Message Flow ``` ``` **Sources:** [src/mcp/server/sse.py121-250](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L121-L250) [src/mcp/client/sse.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/sse.py) [tests/shared/test\\_sse.py183-214](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L183-L214) The SSE transport uses a unique dual-channel approach: - **GET channel**: Establishes SSE stream for server-to-client messages - **POST channel**: Handles client-to-server messages with session correlation - **Session correlation**: UUID-based session matching between channels - **Request context**: Each POST request includes full request context via `ServerMessageMetadata` ## Transport Security Features",
  "All HTTP-based transports implement comprehensive security measures including endpoint validation and DNS rebinding protection: ### Security Validation Flow ``` ``` **Sources:** [src/mcp/server/sse.py106-119](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/sse.py#L106-L119) [src/mcp/server/transport\\_security.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/transport_security.py) [tests/shared/test\\_sse.py488-513](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_sse.py#L488-L513) ### SSE Endpoint Security The `SseServerTransport` enforces strict endpoint validation to prevent security vulnerabilities: - **Relative Path Requirement**: Endpoints must be relative paths (e.g., `/messages/`) not full URLs - **URL Component Rejection**: Rejects endpoints containing `://`, `//`, `?`, or `#` - **Path Normalization**: Automatically adds leading `/` if missing - **Security Rationale**: Prevents cross-origin requests and ensures clients connect to the same origin ``` ``` ## Transport Selection Guidelines Choose the appropriate transport based on your deployment requirements: - **StreamableHTTP**: Best for production web applications requiring session persistence and resumability - **SSE**: Ideal for lightweight real-time updates with simple setup - **STDIO**: Perfect for local development, CLI tools, and process-based architectures - **WebSocket**: Optimal for interactive applications requiring low-latency bidirectional communication Each transport is covered in detail in the following sections: [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md), [SSE Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md), [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md), [WebSocket Transport](modelcontextprotocol/python-sdk/5.4-transport-security.md), and [Transport Security](#5.5.md). Dismiss Refresh this wiki Enter email to refresh ### On this page - [Transport Layer](#transport-layer.md) - [Transport Architecture Overview](#transport-architecture-overview.md) - [Transport Types and Use Cases](#transport-types-and-use-cases.md) - [Core Transport Classes](#core-transport-classes.md) - [Server Transport Interfaces](#server-transport-interfaces.md) - [SSE Transport Architecture](#sse-transport-architecture.md) - [Client Transport Interfaces](#client-transport-interfaces.md) - [Message Flow Architecture](#message-flow-architecture.md) - [General Message Flow](#general-message-flow.md) - [SSE-Specific Message Flow](#sse-specific-message-flow.md) - [Transport Security Features](#transport-security-features.md) - [Security Validation Flow](#security-validation-flow.md) - [SSE Endpoint Security](#sse-endpoint-security.md) - [Transport Selection Guidelines](#transport-selection-guidelines.md)",
  "Tool Management | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Tool Management Relevant source files",
  "- [src/mcp/server/fastmcp/\\_\\_init\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/__init__.py) - [src/mcp/server/fastmcp/tools/base.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py) - [src/mcp/server/fastmcp/tools/tool\\_manager.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/tool_manager.py) - [src/mcp/server/fastmcp/utilities/func\\_metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py) - [src/mcp/server/fastmcp/utilities/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/types.py) - [tests/server/fastmcp/test\\_func\\_metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_func_metadata.py) - [tests/server/fastmcp/test\\_tool\\_manager.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_tool_manager.py) FastMCP's tool management system enables developers to register Python functions as MCP tools using the `@tool` decorator and execute them through the `ToolManager`. The system automatically handles argument validation, context injection, and structured output generation. The tool management system consists of three main components: the `ToolManager` for centralized tool registration and execution, the `Tool` class for wrapping functions with metadata, and the `FuncMetadata` system for function introspection and validation. ## Tool Registration with @tool Decorator Tools are registered using the `@tool` decorator, which automatically converts Python functions into MCP tools. The decorator analyzes function signatures, creates validation schemas, and registers the tool with the `ToolManager`. ### Tool Registration Flow ``` ``` Sources: [src/mcp/server/fastmcp/tools/tool\\_manager.py45-71](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/tool_manager.py#L45-L71) [src/mcp/server/fastmcp/tools/base.py42-84](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L42-L84) ### Function Metadata Extraction The `func_metadata()` function performs deep introspection of Python functions to extract type information and create validation models. ``` ``` Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py166-207](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L166-L207) The `func_metadata()` function performs deep introspection of Python functions to create a `FuncMetadata` object containing: - **arg\\_model**: A Pydantic model representing function arguments with validation - **output\\_schema**: JSON schema for structured output (if enabled) - **output\\_model**: Pydantic model for return type validation - **wrap\\_output**: Whether to wrap primitive returns in `{\"result\": value}` ### Argument Processing Pipeline The `FuncMetadata.call_fn_with_arg_validation()` method processes raw arguments through validation and type conversion before function execution. ``` ``` Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py68-89](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L68-L89) [src/mcp/server/fastmcp/utilities/func\\_metadata.py121-159](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L121-L159) [src/mcp/server/fastmcp/utilities/func\\_metadata.py44-55](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L44-L55) **Argument Processing Features:**",
  "| Stage | Implementation | Purpose | Example | | ---------------- | ---------------------------- | ------------------------------------ | ---------------------------------------- | | JSON Pre-parsing | `pre_parse_json()` | Parse JSON strings to Python objects | `\"[1,2,3]\"` → `[1,2,3]` | | Type Validation | `arg_model.model_validate()` | Validate against Pydantic model | `str` parameter rejects `int` | | Alias Resolution | `model_dump_one_level()` | Map aliases to parameter names | Field aliases → function parameter names | | Default Handling | Pydantic `Field()` | Apply default values | Optional parameters get defaults | | Complex Types | Nested model support | Handle complex structures | `BaseModel`, `TypedDict`, dataclasses | **JSON Pre-parsing Logic:** The `pre_parse_json()` method handles cases where MCP clients send complex data as JSON strings instead of native types: ``` ``` Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py121-159](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L121-L159) ## Tool Registration System Tools are registered through the `Tool` class and the `@mcp.tool` decorator, which provides a high-level interface for function-to-tool conversion. ### Tool Class Structure The `Tool` class encapsulates all information needed to execute a function as an MCP tool, including metadata, validation models, and execution logic. ``` ``` Sources: [src/mcp/server/fastmcp/tools/tool\\_manager.py19-35](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/tool_manager.py#L19-L35) [src/mcp/server/fastmcp/tools/base.py22-39](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L22-L39) [src/mcp/server/fastmcp/utilities/func\\_metadata.py62-66](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L62-L66) ### Tool Creation Process The `Tool.from_function()` method creates a `Tool` instance from a Python function by extracting metadata and creating validation schemas. ``` ``` Sources: [src/mcp/server/fastmcp/tools/base.py42-84](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L42-L84) ### Context Parameter Detection and Injection The system automatically detects `Context` parameters in function signatures and excludes them from the tool schema while injecting them during execution. **Context Detection in find\\_context\\_parameter():** ``` ``` **Context Injection During Execution:** ``` ``` The context parameter is excluded from the `func_metadata()` call via the `skip_names` parameter and injected separately during execution. Sources: [src/mcp/server/fastmcp/tools/base.py63-69](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L63-L69) [src/mcp/server/fastmcp/tools/base.py94-99](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L94-L99) [src/mcp/server/fastmcp/utilities/context\\_injection.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/context_injection.py) ## Tool Execution System Tool execution involves argument validation, context injection, and result conversion. ### Tool Execution Pipeline ``` ``` Sources: [src/mcp/server/fastmcp/tools/tool\\_manager.py73-85](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/tool_manager.py#L73-L85) [src/mcp/server/fastmcp/tools/base.py86-106](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L86-L106) [src/mcp/server/fastmcp/utilities/func\\_metadata.py68-89](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L68-L89) ### Error Handling Tool execution wraps exceptions in `ToolError` for consistent error reporting: ``` ```",
  "Sources: [src/mcp/server/fastmcp/tools/base.py97-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L97-L110) ## ToolManager - Centralized Tool Management The `ToolManager` class provides centralized registration, retrieval, and execution of tools. It maintains a registry of `Tool` instances and handles tool lifecycle management. ### ToolManager Architecture ``` ``` Sources: [src/mcp/server/fastmcp/tools/tool\\_manager.py19-35](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/tool_manager.py#L19-L35) [src/mcp/server/fastmcp/tools/tool\\_manager.py45-85](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/tool_manager.py#L45-L85) ### ToolManager API | Method | Purpose | Parameters | Return Type | | -------------- | --------------------------- | --------------------------------------------------------------------------------- | -------------- | | `add_tool()` | Register function as tool | `fn`, `name`, `title`, `description`, `annotations`, `icons`, `structured_output` | `Tool` | | `get_tool()` | Retrieve tool by name | `name: str` | `Tool \\| None` | | `list_tools()` | Get all registered tools | None | `list[Tool]` | | `call_tool()` | Execute tool with arguments | `name`, `arguments`, `context`, `convert_result` | `Any` | Sources: [src/mcp/server/fastmcp/tools/tool\\_manager.py37-85](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/tool_manager.py#L37-L85) ### Tool Registration Workflow ``` ``` Sources: [src/mcp/server/fastmcp/tools/tool\\_manager.py45-71](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/tool_manager.py#L45-L71) [src/mcp/server/fastmcp/tools/base.py42-84](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L42-L84) ## Structured Output Support Tools can return structured output with automatic schema generation and validation. ### Structured Output Types ``` ``` Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py287-371](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L287-L371) [src/mcp/server/fastmcp/utilities/func\\_metadata.py425-449](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L425-L449) ### Output Conversion Process The `convert_result()` method handles both unstructured and structured output: **Dual Output Generation:** ``` ``` **Content Conversion Logic:** - **Unstructured**: Converts results to `ContentBlock` sequences (text, image, audio) - **Structured**: Validates against output schema and serializes to JSON-compatible dict - **Return**: Tuple of both formats for backwards compatibility Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py91-119](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L91-L119) [src/mcp/server/fastmcp/utilities/func\\_metadata.py489-524](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L489-L524) ## Advanced Features ### Reserved Parameter Names The system handles conflicts with Pydantic `BaseModel` methods by using aliases: ``` ``` **Alias Resolution Process:** ``` ``` This prevents Pydantic warnings about shadowing parent attributes while maintaining the original parameter names in the external API. Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py240-252](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L240-L252) ### Async Function Support Both sync and async functions are supported with automatic detection: ``` ```",
  "Sources: [src/mcp/server/fastmcp/tools/base.py113-119](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L113-L119) ### Tool Annotations Tools support optional metadata through `ToolAnnotations`: - `title`: Human-readable title - `readOnlyHint`: Indicates read-only operations - `openWorldHint`: Indicates open-world assumptions Sources: [src/mcp/server/fastmcp/tools/base.py34](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/tools/base.py#L34-L34) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Tool Management](#tool-management.md) - [Tool Registration with @tool Decorator](#tool-registration-with-tool-decorator.md) - [Tool Registration Flow](#tool-registration-flow.md) - [Function Metadata Extraction](#function-metadata-extraction.md) - [Argument Processing Pipeline](#argument-processing-pipeline.md) - [Tool Registration System](#tool-registration-system.md) - [Tool Class Structure](#tool-class-structure.md) - [Tool Creation Process](#tool-creation-process.md) - [Context Parameter Detection and Injection](#context-parameter-detection-and-injection.md) - [Tool Execution System](#tool-execution-system.md) - [Tool Execution Pipeline](#tool-execution-pipeline.md) - [Error Handling](#error-handling.md) - [ToolManager - Centralized Tool Management](#toolmanager---centralized-tool-management.md) - [ToolManager Architecture](#toolmanager-architecture.md) - [ToolManager API](#toolmanager-api.md) - [Tool Registration Workflow](#tool-registration-workflow.md) - [Structured Output Support](#structured-output-support.md) - [Structured Output Types](#structured-output-types.md) - [Output Conversion Process](#output-conversion-process.md) - [Advanced Features](#advanced-features.md) - [Reserved Parameter Names](#reserved-parameter-names.md) - [Async Function Support](#async-function-support.md) - [Tool Annotations](#tool-annotations.md)",
  "Function Introspection & Structured Output | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Function Introspection & Structured Output Relevant source files",
  "- [examples/snippets/servers/direct\\_execution.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/snippets/servers/direct_execution.py) - [examples/snippets/servers/structured\\_output.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/snippets/servers/structured_output.py) - [src/mcp/server/fastmcp/\\_\\_init\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/__init__.py) - [src/mcp/server/fastmcp/utilities/func\\_metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py) - [src/mcp/server/fastmcp/utilities/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/types.py) - [tests/server/fastmcp/test\\_func\\_metadata.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_func_metadata.py) - [tests/server/fastmcp/test\\_integration.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_integration.py) This document explains how FastMCP automatically analyzes Python functions to generate JSON schemas for their arguments and return values, enabling automatic validation and structured output generation. This system allows FastMCP to seamlessly bridge between Python function signatures and the MCP protocol's JSON-based communication. For information about how tools are registered and managed, see [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md). For details about the FastMCP server architecture, see [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md). ## Purpose and Scope The function introspection system serves two primary purposes: 1. **Automatic Schema Generation**: Converts Python function signatures into JSON schemas that can be used by MCP clients to understand tool parameters 2. **Structured Output Support**: Enables tools to return structured data with schemas, allowing for richer client interactions The system is built around the `func_metadata` function and `FuncMetadata` class, which analyze function signatures using Python's `inspect` module and Pydantic models to create validation and conversion pipelines. ## Function Introspection Architecture The introspection system follows a pipeline from Python functions to validated execution: ``` ``` Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py166-284](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L166-L284) [src/mcp/server/fastmcp/utilities/func\\_metadata.py62-164](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L62-L164) ## Argument Model Generation The `func_metadata` function creates Pydantic models from function signatures to enable automatic validation: ### Core Process ``` ``` ### Parameter Handling Rules | Parameter Type | Treatment | Example | | --------------------------------- | ------------------------------------ | --------------------------------- | | Typed parameters | Direct mapping | `name: str` → `str` field | | Untyped parameters | Mapped to `Any` with string schema | `value` → `Any` field | | Parameters with `None` annotation | Mapped to null type | `x: None` → null field | | Parameters starting with `_` | Rejected (raises `InvalidSignature`) | `_private: str` → Error | | Parameters in `skip_names` | Excluded from model | Skipped entirely | | BaseModel attribute conflicts | Uses aliases | `model_dump: str` → aliased field | Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py208-258](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L208-L258) [src/mcp/server/fastmcp/utilities/func\\_metadata.py240-252](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L240-L252) ## Structured Output System FastMCP supports structured output based on function return type annotations. The system automatically detects whether a function should return structured or unstructured output: ### Return Type Handling ``` ``` ### Structured Output Examples",
  "| Return Type | Model Strategy | Schema Generation | | ----------------- | ----------------------------- | -------------------------------- | | `str` | Wrapped as `{\"result\": str}` | Simple object schema | | `BaseModel` | Used directly | Full model schema | | `dict[str, int]` | RootModel for dict | Object with additionalProperties | | `dict[int, str]` | Wrapped as `{\"result\": dict}` | Wrapped object schema | | `TypedDict` | Converted to BaseModel | Object with typed properties | | `list[str]` | Wrapped as `{\"result\": list}` | Array in wrapped object | | Annotated class | Converted to BaseModel | Object with class fields | | Unannotated class | No structured output | Returns None | Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py287-371](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L287-L371) [examples/snippets/servers/structured\\_output.py1-98](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/snippets/servers/structured_output.py#L1-L98) ## JSON Schema Generation The system generates JSON schemas using Pydantic's schema generation with strict validation: ### Schema Generation Pipeline ``` ``` The `StrictJsonSchema` class raises exceptions instead of emitting warnings, allowing the system to detect non-serializable types and gracefully fall back to unstructured output. Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py30-38](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L30-L38) [src/mcp/server/fastmcp/utilities/func\\_metadata.py355-371](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L355-L371) ## Input Validation & Pre-parsing The validation system includes sophisticated JSON pre-parsing to handle common client behavior: ### Pre-parsing Logic ``` ``` ### Pre-parsing Examples | Input | Field Type | Pre-parsed Result | Reason | | -------------- | ----------- | ----------------- | --------------------------- | | `'[\"a\", \"b\"]'` | `list[str]` | `[\"a\", \"b\"]` | JSON array parsed | | `'\"hello\"'` | `str` | `'\"hello\"'` | JSON string kept as string | | `'{\"x\": 1}'` | `SomeModel` | `{\"x\": 1}` | JSON object parsed | | `'123'` | `int` | `'123'` | Simple value kept as string | | `'invalid'` | `list[str]` | `'invalid'` | Invalid JSON kept as string | Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py121-159](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L121-L159) [tests/server/fastmcp/test\\_func\\_metadata.py463-552](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_func_metadata.py#L463-L552) ## Output Conversion The `convert_result` method handles converting function return values to the appropriate format for MCP responses: ### Conversion Flow ``` ``` ### Content Conversion Rules | Return Value Type | Conversion Result | | ----------------- | ---------------------------------- | | `None` | Empty list `[]` | | `ContentBlock` | Single-item list `[ContentBlock]` | | `Image` | `[ImageContent]` | | `Audio` | `[AudioContent]` | | `list/tuple` | Flattened list of converted items | | Other types | JSON-serialized as `[TextContent]` | Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py91-119](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L91-L119) [src/mcp/server/fastmcp/utilities/func\\_metadata.py489-523](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L489-L523) ## Integration with FastMCP",
  "The function introspection system integrates seamlessly with FastMCP's tool registration: ``` ``` This system enables FastMCP to provide rich, type-safe tool interfaces while maintaining compatibility with the MCP protocol's JSON-based communication model. Sources: [src/mcp/server/fastmcp/utilities/func\\_metadata.py68-89](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/func_metadata.py#L68-L89) [tests/server/fastmcp/test\\_integration.py666-700](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/server/fastmcp/test_integration.py#L666-L700) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Function Introspection & Structured Output](#function-introspection-structured-output.md) - [Purpose and Scope](#purpose-and-scope.md) - [Function Introspection Architecture](#function-introspection-architecture.md) - [Argument Model Generation](#argument-model-generation.md) - [Core Process](#core-process.md) - [Parameter Handling Rules](#parameter-handling-rules.md) - [Structured Output System](#structured-output-system.md) - [Return Type Handling](#return-type-handling.md) - [Structured Output Examples](#structured-output-examples.md) - [JSON Schema Generation](#json-schema-generation.md) - [Schema Generation Pipeline](#schema-generation-pipeline.md) - [Input Validation & Pre-parsing](#input-validation-pre-parsing.md) - [Pre-parsing Logic](#pre-parsing-logic.md) - [Pre-parsing Examples](#pre-parsing-examples.md) - [Output Conversion](#output-conversion.md) - [Conversion Flow](#conversion-flow.md) - [Content Conversion Rules](#content-conversion-rules.md) - [Integration with FastMCP](#integration-with-fastmcp.md)",
  "Resource & Prompt Management | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Resource & Prompt Management Relevant source files",
  "- [.gitattribute](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.gitattribute) - [.gitignore](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/.gitignore) - [src/mcp/server/auth/handlers/authorize.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/authorize.py) - [src/mcp/server/fastmcp/prompts/base.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/base.py) - [src/mcp/server/fastmcp/prompts/manager.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/manager.py) - [src/mcp/server/fastmcp/resources/base.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/base.py) - [src/mcp/server/fastmcp/resources/resource\\_manager.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/resource_manager.py) - [src/mcp/server/fastmcp/resources/templates.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/templates.py) - [src/mcp/server/fastmcp/resources/types.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/types.py) - [src/mcp/server/fastmcp/utilities/context\\_injection.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/context_injection.py) The resource and prompt management system in FastMCP provides structured access to data sources and conversation templates for MCP servers. Resources represent data that can be read (files, HTTP endpoints, databases), while prompts are message templates that can be rendered with parameters for LLM interactions. For tool execution functionality, see [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md). For low-level protocol handling, see [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md). ## Resource Management Architecture The resource system provides a unified interface for accessing various data sources through the `Resource` base class and supporting infrastructure. ### Resource Class Hierarchy ``` ``` **Sources:** [src/mcp/server/fastmcp/resources/base.py19-49](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/base.py#L19-L49) [src/mcp/server/fastmcp/resources/types.py20-200](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/types.py#L20-L200) ### Resource Management Flow ``` ``` **Sources:** [src/mcp/server/fastmcp/resources/resource\\_manager.py77-98](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/resource_manager.py#L77-L98) [src/mcp/server/fastmcp/resources/templates.py84-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/templates.py#L84-L110) ## Resource Types and Implementation ### Static Resource Types The system provides several concrete resource implementations for common data sources:",
  "| Resource Type | Purpose | Key Methods | File Location | | ------------------- | ------------------- | ---------------------------- | ------------------------------------------------------------------------------------------------------ | | `TextResource` | Static text content | `read() -> str` | [types.py20-27](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/types.py#L20-L27) | | `BinaryResource` | Static binary data | `read() -> bytes` | [types.py30-37](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/types.py#L30-L37) | | `FileResource` | File system access | `read() -> str\\|bytes` | [types.py105-145](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/types.py#L105-L145) | | `HttpResource` | HTTP endpoint data | `read() -> str\\|bytes` | [types.py148-159](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/types.py#L148-L159) | | `DirectoryResource` | Directory listings | `list_files() -> list[Path]` | [types.py162-199](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/types.py#L162-L199) | **Sources:** [src/mcp/server/fastmcp/resources/types.py1-200](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/types.py#L1-L200) ### Function Resources and Templates `FunctionResource` enables lazy loading by wrapping functions that return data only when accessed: ``` ``` **Sources:** [src/mcp/server/fastmcp/resources/types.py40-102](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/types.py#L40-L102) [src/mcp/server/fastmcp/resources/templates.py22-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/templates.py#L22-L110) ## Prompt Management System The prompt system provides template-based message generation for LLM interactions with parameter validation and context injection. ### Prompt Architecture ``` ``` **Sources:** [src/mcp/server/fastmcp/prompts/base.py22-184](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/base.py#L22-L184) [src/mcp/server/fastmcp/prompts/manager.py18-60](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/manager.py#L18-L60) ### Prompt Rendering Process ``` ``` **Sources:** [src/mcp/server/fastmcp/prompts/base.py137-183](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/base.py#L137-L183) [src/mcp/server/fastmcp/prompts/manager.py49-60](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/manager.py#L49-L60) ## Context Injection System Both resources and prompts support context injection for accessing request-specific information during execution. ### Context Parameter Discovery ``` ``` **Sources:** [src/mcp/server/fastmcp/utilities/context\\_injection.py11-46](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/context_injection.py#L11-L46) ### Integration Points The context injection system integrates with both resource templates and prompts: | Component | Context Usage | Implementation | | ------------------------------------ | ----------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | | `ResourceTemplate.create_resource()` | Access request context during resource creation | [templates.py92-93](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/templates.py#L92-L93) | | `Prompt.render()` | Access session/request context during rendering | [base.py153](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/base.py#L153-L153) | | `inject_context()` | Generic context injection utility | [context\\_injection.py49-68](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/context_injection.py#L49-L68) |",
  "**Sources:** [src/mcp/server/fastmcp/resources/templates.py84-110](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/templates.py#L84-L110) [src/mcp/server/fastmcp/prompts/base.py137-183](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/base.py#L137-L183) [src/mcp/server/fastmcp/utilities/context\\_injection.py49-68](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/utilities/context_injection.py#L49-L68) ## Manager Registration and Lifecycle Both `ResourceManager` and `PromptManager` provide registration APIs for adding resources and prompts to FastMCP servers: ### Resource Registration ``` ``` ### Prompt Registration The `PromptManager` maintains a simple dictionary mapping prompt names to `Prompt` instances, with optional duplicate warnings. **Sources:** [src/mcp/server/fastmcp/resources/resource\\_manager.py22-108](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/resources/resource_manager.py#L22-L108) [src/mcp/server/fastmcp/prompts/manager.py18-60](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/fastmcp/prompts/manager.py#L18-L60) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Resource & Prompt Management](#resource-prompt-management.md) - [Resource Management Architecture](#resource-management-architecture.md) - [Resource Class Hierarchy](#resource-class-hierarchy.md) - [Resource Management Flow](#resource-management-flow.md) - [Resource Types and Implementation](#resource-types-and-implementation.md) - [Static Resource Types](#static-resource-types.md) - [Function Resources and Templates](#function-resources-and-templates.md) - [Prompt Management System](#prompt-management-system.md) - [Prompt Architecture](#prompt-architecture.md) - [Prompt Rendering Process](#prompt-rendering-process.md) - [Context Injection System](#context-injection-system.md) - [Context Parameter Discovery](#context-parameter-discovery.md) - [Integration Points](#integration-points.md) - [Manager Registration and Lifecycle](#manager-registration-and-lifecycle.md) - [Resource Registration](#resource-registration.md) - [Prompt Registration](#prompt-registration.md)",
  "ClientSession Core | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # ClientSession Core Relevant source files",
  "- [src/mcp/client/\\_\\_main\\_\\_.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/__main__.py) - [src/mcp/client/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py) - [src/mcp/shared/memory.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/memory.py) - [src/mcp/shared/session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py) - [tests/client/test\\_logging\\_callback.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_logging_callback.py) - [tests/client/test\\_session.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_session.py) The `ClientSession` class provides the high-level client interface for communicating with MCP servers. It manages the complete lifecycle of client-server communication, including session initialization, protocol negotiation, request/response handling, and server-initiated callbacks. This document covers the core session management architecture and message handling system. For transport-specific client implementations, see [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md). For OAuth authentication in client sessions, see [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md). ## Session Architecture Overview The client session architecture consists of layered components that handle different aspects of MCP communication: ``` ``` Sources: [src/mcp/client/session.py101-434](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L101-L434) [src/mcp/shared/session.py159-471](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L159-L471) ## ClientSession Class Structure The `ClientSession` class extends `BaseSession` with client-specific functionality and type parameters: ``` ``` Sources: [src/mcp/client/session.py101-109](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L101-L109) [src/mcp/shared/session.py159-167](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L159-L167) [src/mcp/shared/session.py52-67](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L52-L67) ## Session Initialization Flow The initialization process establishes communication and negotiates capabilities between client and server: ``` ``` The `initialize` method [src/mcp/client/session.py137-174](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L137-L174) performs several key operations: 1. **Capability Advertisement**: Determines client capabilities based on provided callbacks 2. **Protocol Version**: Sends `LATEST_PROTOCOL_VERSION` and validates server response 3. **Initialization Request**: Sends `InitializeRequest` with client info and capabilities 4. **Version Validation**: Ensures server protocol version is in `SUPPORTED_PROTOCOL_VERSIONS` 5. **Completion Notification**: Sends `InitializedNotification` to complete handshake Sources: [src/mcp/client/session.py137-174](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L137-L174) [tests/client/test\\_session.py30-114](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_session.py#L30-L114) ## Request/Response Management The session manages request/response pairs using a stream-based approach with timeout handling: | Component | Purpose | Key Methods | | --------------------- | ---------------------------------- | ---------------------------------------- | | `send_request` | Send request and wait for response | Type-safe request/response matching | | `_response_streams` | Track pending requests | Maps request ID to response stream | | `_progress_callbacks` | Handle progress updates | Maps progress token to callback function | | `RequestResponder` | Manage server-initiated requests | Context manager for request lifecycle | ``` ``` The `send_request` method [src/mcp/shared/session.py220-294](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L220-L294) provides:",
  "- **Type Safety**: Generic type parameters ensure request/response type matching - **Progress Support**: Automatic progress token injection and callback registration - **Timeout Management**: Request-specific and session-level timeout support - **Error Handling**: Converts `JSONRPCError` responses to `McpError` exceptions Sources: [src/mcp/shared/session.py220-294](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L220-L294) [src/mcp/shared/session.py331-436](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L331-L436) ## Server-Initiated Request Handling The client handles four types of server-initiated requests through configurable callback functions: ``` ``` The `_received_request` method [src/mcp/client/session.py388-417](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L388-L417) routes server requests to appropriate callbacks: - **Sampling Requests**: Handle `CreateMessageRequest` for LLM message generation - **Elicitation Requests**: Handle `ElicitRequest` for information extraction - **List Roots Requests**: Handle `ListRootsRequest` for file system roots - **Ping Requests**: Built-in handler returns `EmptyResult` Each callback receives a `RequestContext` with session reference and request metadata. Sources: [src/mcp/client/session.py388-417](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L388-L417) [src/mcp/client/session.py21-96](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L21-L96) ## Tool Calling with Validation The client provides structured tool calling with automatic output schema validation: ``` ``` The tool calling system [src/mcp/client/session.py270-319](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L270-L319) provides: - **Progress Support**: Optional progress callback for long-running tools - **Timeout Control**: Per-request timeout override capability - **Schema Validation**: Automatic validation of structured content against tool output schemas - **Schema Caching**: Maintains cache of tool output schemas from `list_tools` responses The `_validate_tool_result` method ensures that tools returning structured content conform to their declared output schemas. Sources: [src/mcp/client/session.py270-319](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L270-L319) [src/mcp/client/session.py366-382](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L366-L382) ## Notification Handling The client processes various server notifications through the notification handling system: | Notification Type | Handler | Purpose | | ---------------------------- | ------------------------ | ------------------------------ | | `LoggingMessageNotification` | `_logging_callback` | Process server log messages | | `ProgressNotification` | Progress callback lookup | Update request progress | | `CancelledNotification` | Request cancellation | Cancel in-flight requests | | Generic notifications | `_received_notification` | Custom notification processing | ``` ``` The notification system [src/mcp/shared/session.py377-401](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L377-L401) handles: - **Logging Notifications**: Forward to configurable logging callback - **Progress Notifications**: Route to request-specific progress callbacks using progress tokens - **Cancellation Notifications**: Cancel in-flight requests using `RequestResponder.cancel()` Sources: [src/mcp/shared/session.py377-401](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/session.py#L377-L401) [src/mcp/client/session.py426-433](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L426-L433) ## Capability Advertisement The client dynamically advertises capabilities based on provided callback functions during initialization: ``` ``` Capability detection logic [src/mcp/client/session.py137-161](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L137-L161): - **Sampling**: Advertised if `sampling_callback` is not the default implementation - **Elicitation**: Advertised if `elicitation_callback` is not the default implementation - **Roots**: Advertised if `list_roots_callback` is not the default implementation - **Experimental**: Currently always `None`",
  "The `RootsCapability` includes `listChanged=True` to indicate support for root list change notifications. Sources: [src/mcp/client/session.py137-161](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/session.py#L137-L161) [tests/client/test\\_session.py356-500](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_session.py#L356-L500) Dismiss Refresh this wiki Enter email to refresh ### On this page - [ClientSession Core](#clientsession-core.md) - [Session Architecture Overview](#session-architecture-overview.md) - [ClientSession Class Structure](#clientsession-class-structure.md) - [Session Initialization Flow](#session-initialization-flow.md) - [Request/Response Management](#requestresponse-management.md) - [Server-Initiated Request Handling](#server-initiated-request-handling.md) - [Tool Calling with Validation](#tool-calling-with-validation.md) - [Notification Handling](#notification-handling.md) - [Capability Advertisement](#capability-advertisement.md)",
  "OAuth 2.0 System | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # OAuth 2.0 System Relevant source files",
  "- [examples/clients/simple-auth-client/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-auth-client/README.md) - [examples/clients/simple-auth-client/mcp\\_simple\\_auth\\_client/main.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/clients/simple-auth-client/mcp_simple_auth_client/main.py) - [examples/servers/simple-auth/README.md](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-auth/README.md) - [examples/servers/simple-auth/mcp\\_simple\\_auth/server.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/servers/simple-auth/mcp_simple_auth/server.py) - [src/mcp/client/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py) - [src/mcp/server/auth/handlers/register.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/register.py) - [src/mcp/server/auth/routes.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py) - [src/mcp/shared/auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py) - [tests/client/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py) - [tests/shared/test\\_auth.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/shared/test_auth.py) This document covers the comprehensive OAuth 2.0 authentication and authorization implementation in the MCP Python SDK. The OAuth 2.0 system provides secure authentication for both client and server components, implementing RFC 6749 (OAuth 2.0), RFC 7636 (PKCE), RFC 8414 (Authorization Server Metadata), and RFC 9728 (Protected Resource Metadata). For information about client transport integration, see [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md). For server-side transport security, see [Transport Security](#5.5.md). ## OAuth 2.0 Architecture Overview The OAuth 2.0 system consists of client-side authentication components and server-side authorization infrastructure, supporting both acting as OAuth clients and providing OAuth authorization services. ``` ``` **Sources:** [src/mcp/client/auth.py179-552](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L179-L552) [src/mcp/shared/auth.py1-156](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py#L1-L156) [src/mcp/server/auth/routes.py68-187](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L68-L187) ## Client Authentication System The `OAuthClientProvider` class implements the OAuth 2.0 authorization code flow with PKCE as an httpx authentication provider, enabling automatic token management for MCP clients. The provider sets `requires_response_body = True` to access response bodies for OAuth error handling and token processing. ### OAuthClientProvider Implementation ``` ``` **Sources:** [src/mcp/client/auth.py179-206](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L179-L206) [src/mcp/client/auth.py485-551](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L485-L551) [src/mcp/client/auth.py185](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L185-L185) ### PKCE Implementation The system implements Proof Key for Code Exchange (PKCE) as specified in RFC 7636 to enhance security for OAuth flows. | Component | Implementation | Purpose | | ---------------- | ------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------- | | `PKCEParameters` | [src/mcp/client/auth.py49-62](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L49-L62) | Generates cryptographically secure code verifier and challenge | | Code Verifier | 128-character random string | Client-side secret for authorization code exchange | | Code Challenge | SHA256 + Base64URL encoding | Server-verifiable challenge derived from verifier | | Challenge Method | S256 | SHA256-based challenge method (required by RFC) |",
  "**Sources:** [src/mcp/client/auth.py49-62](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L49-L62) [tests/client/test\\_auth.py82-107](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L82-L107) ### Token Storage Protocol The `TokenStorage` protocol enables persistent token management across client sessions: ``` ``` **Sources:** [src/mcp/client/auth.py64-82](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L64-L82) [tests/client/test\\_auth.py17-35](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L17-L35) ## OAuth Flow Implementation The complete OAuth 2.0 authorization code flow with PKCE is implemented as an asynchronous generator that integrates with httpx's authentication system. ### Authorization Code Flow Sequence ``` ``` **Sources:** [src/mcp/client/auth.py485-551](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L485-L551) [tests/client/test\\_auth.py616-714](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L616-L714) ### OAuth Discovery and Fallback The client implements comprehensive discovery mechanisms with fallback support for legacy servers. The `_get_discovery_urls()` method generates an ordered list of discovery URLs: | Discovery Type | Endpoint Pattern | RFC Reference | Implementation | | --------------------------------- | ----------------------------------------------- | ------------- | -------------------------------- | | Protected Resource | `/.well-known/oauth-protected-resource` | RFC 9728 | `_discover_protected_resource()` | | Authorization Server (Path-aware) | `/.well-known/oauth-authorization-server{path}` | RFC 8414 | `_get_discovery_urls()` | | Authorization Server (Root) | `/.well-known/oauth-authorization-server` | RFC 8414 | Fallback in ordered list | | OpenID Configuration (Path-aware) | `/.well-known/openid-configuration{path}` | RFC 8414 §5 | Path-aware discovery | | OpenID Configuration (Legacy) | `{server}/.well-known/openid-configuration` | OIDC 1.0 | Legacy fallback | The discovery process includes protocol version header injection (`MCP_PROTOCOL_VERSION`) and WWW-Authenticate header parsing for enhanced resource metadata discovery. **Sources:** [src/mcp/client/auth.py254-279](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L254-L279) [src/mcp/client/auth.py231-240](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L231-L240) [src/mcp/client/auth.py474-475](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L474-L475) [tests/client/test\\_auth.py252-261](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L252-L261) ## Server Authorization System The server-side OAuth implementation provides a complete authorization server that can issue tokens for MCP resources. ### Authorization Server Routes ``` ``` **Sources:** [src/mcp/server/auth/routes.py68-147](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L68-L147) [src/mcp/server/auth/routes.py189-227](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L189-L227) ### Client Registration Handler The `RegistrationHandler` implements RFC 7591 Dynamic Client Registration: | Validation | Implementation | Error Response | | ------------------------ | ------------------------------------------------- | ------------------------- | | Metadata Validation | Pydantic `OAuthClientMetadata` | `invalid_client_metadata` | | Scope Validation | `ClientRegistrationOptions.valid_scopes` | `invalid_client_metadata` | | Grant Type Validation | Must be `[\"authorization_code\", \"refresh_token\"]` | `invalid_client_metadata` | | Client Secret Generation | `secrets.token_hex(32)` for non-public clients | N/A | **Sources:** [src/mcp/server/auth/handlers/register.py34-120](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/handlers/register.py#L34-L120) ## Token Management",
  "The OAuth system provides comprehensive token lifecycle management including validation, refresh, and expiration handling. ### OAuthToken Model ``` ``` **Sources:** [src/mcp/shared/auth.py6-25](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py#L6-L25) [src/mcp/client/auth.py120-142](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L120-L142) ### Token Refresh Flow and Resource Parameter Support The client automatically refreshes expired tokens using stored refresh tokens and includes RFC 8707 resource parameter support: | Condition | Action | Fallback | Resource Parameter | | --------------------------------- | ------------------- | -------------------------------- | ----------------------------------------------- | | Token Valid | Use existing token | N/A | N/A | | Token Expired + Refresh Available | Automatic refresh | Full re-authorization on failure | Included if PRM exists or protocol ≥ 2025-06-18 | | Token Expired + No Refresh | Full OAuth flow | N/A | Included in authorization/token requests | | Refresh Fails | Clear stored tokens | Full OAuth flow | N/A | The `should_include_resource_param()` method determines when to include the resource parameter based on: - Presence of Protected Resource Metadata (always include) - MCP-Protocol-Version ≥ 2025-06-18 (include for newer protocols) **Sources:** [src/mcp/client/auth.py411-462](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L411-L462) [src/mcp/client/auth.py159-176](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L159-L176) [src/mcp/client/auth.py431-433](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L431-L433) [tests/client/test\\_auth.py443-465](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L443-L465) [tests/client/test\\_auth.py471-525](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L471-L525) ## Discovery and Metadata Systems The OAuth implementation supports comprehensive metadata discovery for both authorization servers and protected resources. ### Authorization Server Metadata The `OAuthMetadata` model implements RFC 8414 Authorization Server Metadata: ``` ``` **Sources:** [src/mcp/shared/auth.py105-132](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py#L105-L132) [src/mcp/server/auth/routes.py149-186](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L149-L186) ### Protected Resource Metadata RFC 9728 Protected Resource Metadata enables resource servers to advertise their authorization requirements: | Field | Purpose | MCP Implementation | Default Value | | -------------------------- | -------------------------- | ----------------------------------------------- | -------------- | | `resource` | Resource server identifier | MCP server URL | Server URL | | `authorization_servers` | List of trusted AS URLs | AS that can issue tokens for this resource | Required field | | `scopes_supported` | Available scopes | MCP-specific scopes (tools, resources, prompts) | Optional | | `bearer_methods_supported` | Token presentation methods | `[\"header\"]` (Authorization header only) | `[\"header\"]` | | `resource_name` | Human-readable name | Optional display name | Optional | | `resource_documentation` | Documentation URL | API documentation link | Optional | **Sources:** [src/mcp/shared/auth.py134-156](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/shared/auth.py#L134-L156) [src/mcp/server/auth/routes.py189-227](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L189-L227) ## Security Features The OAuth 2.0 implementation includes comprehensive security measures following current best practices. ### HTTPS and Security Validation ``` ```",
  "**Sources:** [src/mcp/server/auth/routes.py23-47](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/server/auth/routes.py#L23-L47) [src/mcp/client/auth.py49-61](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L49-L61) [src/mcp/client/auth.py347-353](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L347-L353) ### WWW-Authenticate Header Support The client implements RFC 9728 WWW-Authenticate header parsing for enhanced discovery: | Header Format | Extraction Pattern | Example | | -------------- | ------------------------- | ----------------------------------------------------------------------------------------- | | Quoted URL | `resource_metadata=\"URL\"` | `Bearer resource_metadata=\"https://api.example.com/.well-known/oauth-protected-resource\"` | | Unquoted URL | `resource_metadata=URL` | `Bearer resource_metadata=https://api.example.com/.well-known/oauth-protected-resource` | | Complex Header | Multiple parameters | `Bearer realm=\"api\", resource_metadata=\"URL\", error=\"insufficient_scope\"` | **Sources:** [src/mcp/client/auth.py207-229](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/client/auth.py#L207-L229) [tests/client/test\\_auth.py844-906](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_auth.py#L844-L906) Dismiss Refresh this wiki Enter email to refresh ### On this page - [OAuth 2.0 System](#oauth-20-system.md) - [OAuth 2.0 Architecture Overview](#oauth-20-architecture-overview.md) - [Client Authentication System](#client-authentication-system.md) - [OAuthClientProvider Implementation](#oauthclientprovider-implementation.md) - [PKCE Implementation](#pkce-implementation.md) - [Token Storage Protocol](#token-storage-protocol.md) - [OAuth Flow Implementation](#oauth-flow-implementation.md) - [Authorization Code Flow Sequence](#authorization-code-flow-sequence.md) - [OAuth Discovery and Fallback](#oauth-discovery-and-fallback.md) - [Server Authorization System](#server-authorization-system.md) - [Authorization Server Routes](#authorization-server-routes.md) - [Client Registration Handler](#client-registration-handler.md) - [Token Management](#token-management.md) - [OAuthToken Model](#oauthtoken-model.md) - [Token Refresh Flow and Resource Parameter Support](#token-refresh-flow-and-resource-parameter-support.md) - [Discovery and Metadata Systems](#discovery-and-metadata-systems.md) - [Authorization Server Metadata](#authorization-server-metadata.md) - [Protected Resource Metadata](#protected-resource-metadata.md) - [Security Features](#security-features.md) - [HTTPS and Security Validation](#https-and-security-validation.md) - [WWW-Authenticate Header Support](#www-authenticate-header-support.md)",
  "Development Tools & CLI | modelcontextprotocol/python-sdk | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [modelcontextprotocol/python-sdk](https://github.com/modelcontextprotocol/python-sdk \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 27 September 2025 ([146d7e](https://github.com/modelcontextprotocol/python-sdk/commits/146d7efb)) - [Overview](modelcontextprotocol/python-sdk/1-overview.md) - [Installation & Dependencies](modelcontextprotocol/python-sdk/1.1-installation-and-dependencies.md) - [Key Concepts](modelcontextprotocol/python-sdk/1.2-key-concepts.md) - [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md) - [FastMCP Server Architecture](modelcontextprotocol/python-sdk/2.1-fastmcp-server-architecture.md) - [Tool Management](modelcontextprotocol/python-sdk/2.2-tool-management.md) - [Resource & Prompt Management](modelcontextprotocol/python-sdk/2.3-resource-and-prompt-management.md) - [Function Introspection & Structured Output](modelcontextprotocol/python-sdk/2.4-function-introspection-and-structured-output.md) - [Client Framework](modelcontextprotocol/python-sdk/3-client-framework.md) - [ClientSession Core](modelcontextprotocol/python-sdk/3.1-clientsession-core.md) - [Client Transports](modelcontextprotocol/python-sdk/3.2-client-transports.md) - [Client Authentication](modelcontextprotocol/python-sdk/3.3-client-authentication.md) - [Protocol & Message System](modelcontextprotocol/python-sdk/4-protocol-and-message-system.md) - [Protocol Types & JSON-RPC](modelcontextprotocol/python-sdk/4.1-protocol-types-and-json-rpc.md) - [Session Management](modelcontextprotocol/python-sdk/4.2-session-management.md) - [Context & Progress Reporting](modelcontextprotocol/python-sdk/4.3-context-and-progress-reporting.md) - [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md) - [StreamableHTTP Transport](modelcontextprotocol/python-sdk/5.1-streamablehttp-transport.md) - [Server-Sent Events (SSE) Transport](modelcontextprotocol/python-sdk/5.2-server-sent-events-\\(sse\\)-transport.md) - [STDIO Transport](modelcontextprotocol/python-sdk/5.3-stdio-transport.md) - [Transport Security](modelcontextprotocol/python-sdk/5.4-transport-security.md) - [Low-Level Server Implementation](modelcontextprotocol/python-sdk/6-low-level-server-implementation.md) - [Low-Level Server Architecture](modelcontextprotocol/python-sdk/6.1-low-level-server-architecture.md) - [ServerSession Implementation](modelcontextprotocol/python-sdk/6.2-serversession-implementation.md) - [Authentication & Security](modelcontextprotocol/python-sdk/7-authentication-and-security.md) - [OAuth 2.0 System](modelcontextprotocol/python-sdk/7.1-oauth-2.0-system.md) - [Development Tools & CLI](modelcontextprotocol/python-sdk/8-development-tools-and-cli.md) - [MCP CLI Commands](modelcontextprotocol/python-sdk/8.1-mcp-cli-commands.md) - [Development Environment](modelcontextprotocol/python-sdk/8.2-development-environment.md) - [Claude Desktop Integration](modelcontextprotocol/python-sdk/8.3-claude-desktop-integration.md) - [Examples & Tutorials](modelcontextprotocol/python-sdk/9-examples-and-tutorials.md) - [Server Examples](modelcontextprotocol/python-sdk/9.1-server-examples.md) - [Client Examples](modelcontextprotocol/python-sdk/9.2-client-examples.md) Menu # Development Tools & CLI Relevant source files - [examples/fastmcp/unicode\\_example.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/examples/fastmcp/unicode_example.py) - [src/mcp/cli/claude.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py) - [src/mcp/cli/cli.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py) - [tests/client/test\\_config.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/client/test_config.py) - [tests/issues/test\\_100\\_tool\\_listing.py](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/tests/issues/test_100_tool_listing.py)",
  "The MCP Python SDK includes a comprehensive command-line interface (CLI) that streamlines the development workflow for MCP servers. The CLI provides commands for running servers, integrating with development tools, and deploying to client applications like Claude Desktop. For information about the underlying server frameworks, see [FastMCP Server Framework](modelcontextprotocol/python-sdk/2-fastmcp-server-framework.md). For details about transport implementations, see [Transport Layer](modelcontextprotocol/python-sdk/5-transport-layer.md). ## CLI Architecture The MCP CLI is built using the `typer` library and provides a unified interface for server development and deployment operations. The system consists of two main modules: the core CLI implementation and Claude Desktop integration utilities. ### CLI Command Structure ``` ``` **Sources:** [src/mcp/cli/cli.py34-39](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L34-L39) [src/mcp/cli/cli.py211-488](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L211-L488) [src/mcp/cli/claude.py44-148](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L44-L148) ### Server Import and Resolution The CLI includes sophisticated server discovery and import mechanisms that handle various server specification formats and automatically resolve FastMCP server instances. ``` ``` **Sources:** [src/mcp/cli/cli.py88-116](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L88-L116) [src/mcp/cli/cli.py119-208](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L119-L208) [src/mcp/cli/cli.py143-159](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L143-L159) ## CLI Commands ### Version Command The `version` command displays the currently installed MCP package version using Python's metadata system. ``` ``` **Sources:** [src/mcp/cli/cli.py212-219](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L212-L219) ### Development Command The `dev` command runs an MCP server with the MCP Inspector for interactive development and testing. It automatically manages dependencies using `uv` and launches the Node.js-based inspector tool. ``` ``` **Sources:** [src/mcp/cli/cli.py222-303](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L222-L303) [src/mcp/cli/cli.py42-53](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L42-L53) [src/mcp/cli/cli.py65-85](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L65-L85) ### Run Command The `run` command executes an MCP server directly without additional tooling. It supports transport specification and runs the server using the FastMCP framework. Key features: - Direct server execution without dependency management - Transport protocol selection (`stdio` or `sse`) - Server object import and validation **Sources:** [src/mcp/cli/cli.py305-359](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L305-L359) ### Install Command The `install` command configures MCP servers for use with Claude Desktop by updating the application's configuration file. It handles dependency specification, environment variable management, and cross-platform config file locations. ``` ``` **Sources:** [src/mcp/cli/cli.py362-488](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L362-L488) [src/mcp/cli/cli.py456-476](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L456-L476) [src/mcp/cli/claude.py44-148](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L44-L148) ## Claude Desktop Integration The Claude integration module provides platform-aware configuration management for installing MCP servers into the Claude Desktop application. ### Configuration Path Detection The system detects Claude Desktop configuration directories across different platforms:",
  "| Platform | Configuration Path | | -------- | ----------------------------------------------- | | Windows | `%APPDATA%\\Claude` | | macOS | `~/Library/Application Support/Claude` | | Linux | `$XDG_CONFIG_HOME/Claude` or `~/.config/Claude` | **Sources:** [src/mcp/cli/claude.py17-30](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L17-L30) ### Config File Management The `update_claude_config()` function manages the `claude_desktop_config.json` file, handling: - Server entry creation and updates - Environment variable preservation and merging - Absolute path resolution for server files - UV command generation with dependency specifications ``` ``` **Sources:** [src/mcp/cli/claude.py44-148](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L44-L148) [src/mcp/cli/claude.py101-125](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L101-L125) [src/mcp/cli/claude.py33-41](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/claude.py#L33-L41) ## Development Workflow Integration The CLI system integrates with the broader MCP development ecosystem through several key mechanisms: ### Dependency Management with UV All CLI commands use `uv` for Python dependency management, ensuring reproducible environments and fast package installation. The system automatically includes the `mcp[cli]` package and any server-specific dependencies. ### FastMCP Server Integration The CLI specifically targets FastMCP servers and includes validation to ensure compatibility. It automatically extracts server metadata including: - Server name for Claude Desktop registration - Dependency requirements for installation - Transport capabilities for runtime configuration ### Inspector Integration The `dev` command integrates with the Node.js-based MCP Inspector tool, providing a web interface for interactive server testing and debugging. **Sources:** [src/mcp/cli/cli.py260-284](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L260-L284) [src/mcp/cli/cli.py152-159](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L152-L159) [src/mcp/cli/cli.py442-455](https://github.com/modelcontextprotocol/python-sdk/blob/146d7efb/src/mcp/cli/cli.py#L442-L455) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Development Tools & CLI](#development-tools-cli.md) - [CLI Architecture](#cli-architecture.md) - [CLI Command Structure](#cli-command-structure.md) - [Server Import and Resolution](#server-import-and-resolution.md) - [CLI Commands](#cli-commands.md) - [Version Command](#version-command.md) - [Development Command](#development-command.md) - [Run Command](#run-command.md) - [Install Command](#install-command.md) - [Claude Desktop Integration](#claude-desktop-integration.md) - [Configuration Path Detection](#configuration-path-detection.md) - [Config File Management](#config-file-management.md) - [Development Workflow Integration](#development-workflow-integration.md) - [Dependency Management with UV](#dependency-management-with-uv.md) - [FastMCP Server Integration](#fastmcp-server-integration.md) - [Inspector Integration](#inspector-integration.md)",
  "Contributors and Experts Management | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Contributors and Experts Management Relevant source files",
  "- [docs/az/docs/learn/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/az/docs/learn/index.md) - [docs/en/data/contributors.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/contributors.yml) - [docs/en/data/github\\_sponsors.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/github_sponsors.yml) - [docs/en/data/people.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/people.yml) - [docs/en/data/skip\\_users.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/skip_users.yml) - [docs/en/data/translation\\_reviewers.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/translation_reviewers.yml) - [docs/en/data/translators.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/translators.yml) - [docs/en/docs/fastapi-people.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md) - [requirements-docs-tests.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-docs-tests.txt) - [requirements-github-actions.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-github-actions.txt) - [scripts/contributors.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py) - [scripts/people.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py) - [tests/test\\_tutorial/test\\_custom\\_request\\_and\\_route/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_request_and_route/test_tutorial002.py) This document covers FastAPI's automated system for recognizing and managing community contributors and experts. The system tracks GitHub Discussions participation, Pull Request contributions, translations, and sponsorship to create community recognition pages. For information about the translation workflow automation, see [Translation Management](fastapi/fastapi/7.2-translation-management.md). For external sponsorship and community resources, see [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md). ## Purpose and Architecture The Contributors and Experts Management system automatically identifies and recognizes community members across multiple contribution categories: - **FastAPI Experts**: Users who help answer questions in GitHub Discussions - **Contributors**: Users who create merged Pull Requests - **Translators**: Contributors who submit translation Pull Requests - **Translation Reviewers**: Users who review and approve translations - **Sponsors**: Financial supporters through GitHub Sponsors The system operates through automated data collection scripts that query GitHub APIs, process contribution data, and generate YAML files consumed by documentation pages. ## Data Collection Architecture ``` ``` **Data Collection and Documentation Flow** Sources: [scripts/people.py1-316](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L1-L316) [scripts/contributors.py1-316](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L1-L316) [docs/en/data/people.yml1-715](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/people.yml#L1-L715) [docs/en/docs/fastapi-people.md1-306](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md#L1-L306) ## FastAPI Experts Detection System The experts detection system analyzes GitHub Discussions to identify users who consistently help answer questions in the FastAPI community. ### Discussion Data Model ``` ``` **GitHub Discussions Data Structure** The system uses specific Pydantic models to parse GitHub GraphQL responses: | Model | Purpose | Key Fields | | -------------------------- | ---------------------------- | -------------------------------------------- | | `DiscussionsNode` | Individual discussion thread | `number`, `author`, `createdAt`, `comments` | | `DiscussionsCommentsNode` | Comment within discussion | `createdAt`, `author`, `replies` | | `Author` | User information | `login`, `avatarUrl`, `url` | | `DiscussionExpertsResults` | Aggregated results | `commenters`, time-based counters, `authors` |",
  "Sources: [scripts/people.py64-177](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L64-L177) ### Expert Identification Algorithm ``` ``` **Expert Detection Algorithm Flow** The algorithm tracks participation over multiple time windows: - **Last Month**: 30 days ago to now - **3 Months**: 90 days ago to now - **6 Months**: 180 days ago to now - **1 Year**: 365 days ago to now - **All Time**: Complete history Key logic in `get_discussions_experts()`: 1. Excludes discussion authors from being counted as helpers for their own discussions 2. Tracks the most recent comment time per user per discussion 3. Increments counters based on time window inclusion 4. Uses `Counter[str]` for efficient counting and ranking Sources: [scripts/people.py195-255](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L195-L255) [scripts/people.py258-280](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L258-L280) ## Contributors and Translations System The contributors system analyzes Pull Requests to categorize different types of contributions and identify translation workflow participants. ### Pull Request Analysis Pipeline ``` ``` **Pull Request Processing Pipeline** The system distinguishes contributions by analyzing PR metadata: | Contribution Type | Detection Logic | Counter | | ------------------------ | ---------------------------------- | ----------------------- | | **Regular Contributor** | Merged PR without `lang-all` label | `contributors` | | **Translator** | Merged PR with `lang-all` label | `translators` | | **Translation Reviewer** | Review on PR with `lang-all` label | `translation_reviewers` | Sources: [scripts/contributors.py175-204](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L175-L204) ### Data Output Structure The processed data generates multiple YAML files with consistent structure: ``` ``` **Standardized User Data Structure** All user data follows the pattern established by the `get_users_to_write()` function, ensuring consistency across different contribution types. Sources: [scripts/contributors.py207-224](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L207-L224) [scripts/people.py282-301](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L282-L301) ## Automated Updates and Git Integration Both collection scripts include automated Git workflow integration for updating community data. ### Update Workflow | Step | Function | Purpose | | ---------------------- | -------------------- | -------------------------- | | **Data Collection** | `main()` | Execute GitHub API queries | | **Content Comparison** | `update_content()` | Check if data changed | | **Git Configuration** | `subprocess.run()` | Set up GitHub Actions user | | **Branch Creation** | `git checkout -b` | Create update branch | | **Pull Request** | `repo.create_pull()` | Submit changes for review | The system only creates PRs when data has actually changed, using YAML content comparison: ``` ``` Sources: [scripts/people.py304-314](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L304-L314) [scripts/contributors.py226-235](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L226-L235) [scripts/contributors.py284-311](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L284-L311) ## Configuration and Security ### Settings Management Both scripts use Pydantic Settings for configuration: | Setting | Purpose | Default | | ------------------- | ------------------------- | ---------- | | `github_token` | GitHub API authentication | Required | | `github_repository` | Target repository | Required | | `httpx_timeout` | API request timeout | 30 seconds | | `sleep_interval` | Rate limiting delay | 5 seconds | The `sleep_interval` in `people.py` handles GitHub's secondary rate limits for GraphQL queries. ### User Filtering The system excludes certain automated users via `skip_users.yml`: - `tiangolo` (project creator, counted separately) - `codecov`, `github-actions`, `pre-commit-ci`, `dependabot` (bots)",
  "Sources: [scripts/people.py118-123](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L118-L123) [scripts/contributors.py115-119](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L115-L119) [docs/en/data/skip\\_users.yml1-6](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/skip_users.yml#L1-L6) ## Documentation Integration The community data integrates into documentation through template rendering in `fastapi-people.md`: ### Template Variables | Variable | Source | Usage | | --------------------------- | --------------------------- | ----------------------------- | | `people.experts` | `people.yml` | All-time FastAPI experts list | | `people.last_month_experts` | `people.yml` | Recent experts | | `contributors` | `contributors.yml` | Top contributors | | `translators` | `translators.yml` | Top translators | | `translation_reviewers` | `translation_reviewers.yml` | Top reviewers | | `github_sponsors` | `github_sponsors.yml` | Sponsor information | The documentation uses Jinja2-style templating to render user lists with avatars, usernames, and contribution counts. Sources: [docs/en/docs/fastapi-people.md17-293](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md#L17-L293) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Contributors and Experts Management](#contributors-and-experts-management.md) - [Purpose and Architecture](#purpose-and-architecture.md) - [Data Collection Architecture](#data-collection-architecture.md) - [FastAPI Experts Detection System](#fastapi-experts-detection-system.md) - [Discussion Data Model](#discussion-data-model.md) - [Expert Identification Algorithm](#expert-identification-algorithm.md) - [Contributors and Translations System](#contributors-and-translations-system.md) - [Pull Request Analysis Pipeline](#pull-request-analysis-pipeline.md) - [Data Output Structure](#data-output-structure.md) - [Automated Updates and Git Integration](#automated-updates-and-git-integration.md) - [Update Workflow](#update-workflow.md) - [Configuration and Security](#configuration-and-security.md) - [Settings Management](#settings-management.md) - [User Filtering](#user-filtering.md) - [Documentation Integration](#documentation-integration.md) - [Template Variables](#template-variables.md)",
  "Background Tasks | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Background Tasks Relevant source files",
  "- [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs/en/docs/tutorial/background-tasks.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md) - [docs/en/docs/tutorial/extra-data-types.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/extra-data-types.md) - [docs/en/docs/tutorial/handling-errors.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md) - [docs/en/docs/tutorial/security/first-steps.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/first-steps.md) - [docs/en/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/oauth2-jwt.md) - [docs/en/docs/tutorial/security/simple-oauth2.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/simple-oauth2.md) - [docs/en/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md) - [docs/ja/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/tutorial/security/oauth2-jwt.md) - [docs/pt/docs/tutorial/cookie-param-models.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/tutorial/cookie-param-models.md) - [docs/zh/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/tutorial/sql-databases.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py)",
  "This document covers FastAPI's background task system, which allows executing functions after an HTTP response has been sent to the client. This system is useful for operations like sending emails, processing files, or logging that don't need to block the response. For information about asynchronous programming concepts in FastAPI, see [4.1](fastapi/fastapi/4.1-asynchronous-support.md). For dependency injection patterns, see [2.2](fastapi/fastapi/2.2-dependency-injection.md). ## Purpose and Core Concepts Background tasks in FastAPI enable deferred execution of functions after the HTTP response has been sent to the client. This pattern allows for better user experience by avoiding blocking operations while ensuring important side effects still occur. The system is built on top of Starlette's background task implementation and integrates seamlessly with FastAPI's dependency injection system. ### Request-Response with Background Tasks Flow ``` ``` Sources: [docs/en/docs/tutorial/background-tasks.md1-87](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L1-L87) ## Core Architecture ### BackgroundTasks Class Integration ``` ``` The `BackgroundTasks` class is imported directly from Starlette but re-exported through FastAPI's main module for convenience. This design allows FastAPI to leverage Starlette's proven implementation while providing a unified import interface. Sources: [fastapi/\\_\\_init\\_\\_.py8](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py#L8-L8) [docs/en/docs/tutorial/background-tasks.md66-74](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L66-L74) ### Task Function Types and Execution FastAPI's background task system supports both synchronous and asynchronous task functions: | Function Type | Declaration | Execution Context | | ------------- | ----------------------- | ----------------- | | Synchronous | `def task_func()` | Thread pool | | Asynchronous | `async def task_func()` | Event loop | ``` ``` Sources: [docs/en/docs/tutorial/background-tasks.md28-34](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L28-L34) ## Implementation Patterns ### Basic Usage Pattern The most common pattern involves three steps: 1. **Import and declare**: Import `BackgroundTasks` and declare it as a parameter 2. **Create task function**: Define the function to execute in the background 3. **Add task**: Use `.add_task()` to queue the function ``` ``` ### Task Function Parameter Handling ``` ``` The `.add_task()` method accepts: - A callable function as the first argument - Any positional arguments to pass to the function - Any keyword arguments to pass to the function Sources: [docs/en/docs/tutorial/background-tasks.md42-46](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L42-L46) ## Dependency Injection Integration ### Multi-Level Background Task Usage ``` ``` FastAPI automatically reuses the same `BackgroundTasks` instance across all dependency levels within a single request, ensuring all background tasks are collected and executed together. ### Dependency Injection Example Flow ``` ``` Sources: [docs/en/docs/tutorial/background-tasks.md48-63](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L48-L63) ## Technical Implementation Details ### Starlette Integration FastAPI's background task system is a thin wrapper around Starlette's implementation: | Component | FastAPI | Starlette | | ----------- | ------------------------------------- | -------------------------------------------------- | | Import Path | `from fastapi import BackgroundTasks` | `from starlette.background import BackgroundTasks` | | Class | Re-exported reference | Original implementation | | Alternative | `BackgroundTask` (single) | `BackgroundTask` (single) | The key difference is that FastAPI provides `BackgroundTasks` (plural) as a dependency injection parameter, while `BackgroundTask` (singular) requires manual instantiation and response handling. ### Response Integration Mechanism ``` ``` When `BackgroundTasks` is used as a parameter, FastAPI automatically attaches the queued tasks to the response object, ensuring they execute after the response is sent. Sources: [docs/en/docs/tutorial/background-tasks.md66-74](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L66-L74) ## Use Cases and Limitations ### Appropriate Use Cases Background tasks are suitable for:",
  "- Email notifications after user actions - File processing that can be asynchronous - Logging and analytics - Cache warming - Cleanup operations ### Performance Considerations ``` ``` For heavy computational tasks or distributed processing, external task queue systems like Celery are recommended over FastAPI's built-in background tasks. ### Memory and Resource Sharing Background tasks in FastAPI: - Run in the same process as the web application - Have access to shared memory and variables - Are suitable for lightweight operations - Should not be used for long-running or resource-intensive tasks Sources: [docs/en/docs/tutorial/background-tasks.md76-87](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L76-L87) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Background Tasks](#background-tasks.md) - [Purpose and Core Concepts](#purpose-and-core-concepts.md) - [Request-Response with Background Tasks Flow](#request-response-with-background-tasks-flow.md) - [Core Architecture](#core-architecture.md) - [BackgroundTasks Class Integration](#backgroundtasks-class-integration.md) - [Task Function Types and Execution](#task-function-types-and-execution.md) - [Implementation Patterns](#implementation-patterns.md) - [Basic Usage Pattern](#basic-usage-pattern.md) - [Task Function Parameter Handling](#task-function-parameter-handling.md) - [Dependency Injection Integration](#dependency-injection-integration.md) - [Multi-Level Background Task Usage](#multi-level-background-task-usage.md) - [Dependency Injection Example Flow](#dependency-injection-example-flow.md) - [Technical Implementation Details](#technical-implementation-details.md) - [Starlette Integration](#starlette-integration.md) - [Response Integration Mechanism](#response-integration-mechanism.md) - [Use Cases and Limitations](#use-cases-and-limitations.md) - [Appropriate Use Cases](#appropriate-use-cases.md) - [Performance Considerations](#performance-considerations.md) - [Memory and Resource Sharing](#memory-and-resource-sharing.md)",
  "Community Automation | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Community Automation Relevant source files",
  "- [.github/workflows/build-docs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/build-docs.yml) - [.github/workflows/contributors.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/contributors.yml) - [.github/workflows/deploy-docs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/deploy-docs.yml) - [.github/workflows/issue-manager.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/issue-manager.yml) - [.github/workflows/label-approved.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/label-approved.yml) - [.github/workflows/latest-changes.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/latest-changes.yml) - [.github/workflows/notify-translations.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/notify-translations.yml) - [.github/workflows/people.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/people.yml) - [.github/workflows/publish.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/publish.yml) - [.github/workflows/smokeshow.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/smokeshow.yml) - [.github/workflows/sponsors.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/sponsors.yml) - [.github/workflows/test-redistribute.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test-redistribute.yml) - [.github/workflows/test.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test.yml) - [.github/workflows/topic-repos.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/topic-repos.yml) - [scripts/deploy\\_docs\\_status.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py) - [scripts/notify\\_translations.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py) - [scripts/sponsors.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/sponsors.py) This document covers the automated systems that manage community interactions and notifications within the FastAPI project. These systems handle notifications for documentation deployments, translation reviews, and other community-driven activities through GitHub integrations. For information about contributor tracking and expert identification, see [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md). For details about the translation workflow itself, see [Translation Management](fastapi/fastapi/7.2-translation-management.md). ## Overview The FastAPI project uses two primary automation scripts to manage community notifications: | System | Purpose | Trigger | | -------------------------------------- | -------------------------------------------------- | ---------------------------------- | | Documentation Deployment Notifications | Notify PRs about documentation preview deployments | GitHub Actions workflow completion | | Translation Community Notifications | Notify language communities about translation PRs | PR label changes | ## Documentation Deployment Notifications The `deploy_docs_status` system automatically updates pull requests with documentation preview links and deployment status information when documentation changes are detected. ### Core Functionality The system operates through the `Settings` class which configures GitHub repository access and deployment parameters: ``` ``` ### Status Management The system creates different commit statuses based on deployment state: - **Pending**: When deployment is in progress [scripts/deploy\\_docs\\_status.py50-57](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L50-L57) - **Success (No Changes)**: When no documentation files were modified [scripts/deploy\\_docs\\_status.py40-48](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L40-L48) - **Success (Deployed)**: When documentation is successfully deployed [scripts/deploy\\_docs\\_status.py58-63](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L58-L63) ### Link Generation Process The system processes documentation files to generate preview links using regex matching:",
  "1. Identifies files matching pattern `docs/([^/]+)/docs/(.*)` [scripts/deploy\\_docs\\_status.py71-74](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L71-L74) 2. Converts file paths to URL paths by handling `index.md` and `.md` extensions [scripts/deploy\\_docs\\_status.py76-84](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L76-L84) 3. Generates `LinkData` objects containing preview, previous, and English reference links [scripts/deploy\\_docs\\_status.py85-91](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L85-L91) **Sources:** [scripts/deploy\\_docs\\_status.py1-126](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L1-L126) ## Translation Community Notifications The `notify_translations` system manages notifications to language-specific discussion threads when translation pull requests are opened, reviewed, or completed. ### System Architecture ``` ``` ### Label-Based Workflow The system uses specific GitHub labels to trigger notifications: | Label | Purpose | Action | | ----------------- | ------------------------------- | ----------------------------- | | `awaiting-review` | PR needs translation review | Create notification comment | | `lang-all` | Marks PR as translation-related | Required for processing | | `lang-{code}` | Identifies target language | Maps to discussion thread | | `approved-1` | Translation is approved | Update notification to \"done\" | ### GraphQL Queries and Mutations The system uses four main GraphQL operations: 1. **Discussion Discovery**: `all_discussions_query` finds translation discussions [scripts/notify\\_translations.py21-41](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L21-L41) 2. **Comment Retrieval**: `translation_discussion_query` gets existing comments [scripts/notify\\_translations.py43-60](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L43-L60) 3. **Comment Creation**: `add_comment_mutation` creates new notifications [scripts/notify\\_translations.py62-72](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L62-L72) 4. **Comment Updates**: `update_comment_mutation` marks translations as complete [scripts/notify\\_translations.py74-84](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L74-L84) ### Message Templates The system uses two message templates: - **New Translation**: `new_translation_message` announces new PRs requiring review [scripts/notify\\_translations.py361](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L361-L361) - **Completed Translation**: `done_translation_message` marks translations as finished [scripts/notify\\_translations.py362](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L362-L362) ### Race Condition Prevention To avoid multiple simultaneous notifications, the system includes a randomized delay: ``` ``` This prevents race conditions when multiple labels are applied simultaneously [scripts/notify\\_translations.py329-334](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L329-L334) **Sources:** [scripts/notify\\_translations.py1-433](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L1-L433) ## Integration with GitHub Actions Both automation systems integrate with GitHub Actions workflows through environment variables and event data: ### Common Configuration Pattern Both scripts use `BaseSettings` from Pydantic for configuration management: - `github_repository`: Target repository identifier - `github_token`: Authentication token for API access - Event-specific parameters (commit SHA, PR number, etc.) ### Event Processing The `notify_translations` system processes GitHub webhook events:",
  "1. Reads event data from `github_event_path` [scripts/notify\\_translations.py315-320](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L315-L320) 2. Extracts PR number from event or settings [scripts/notify\\_translations.py322-326](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L322-L326) 3. Processes PR labels to determine language scope [scripts/notify\\_translations.py336-347](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L336-L347) ### Error Handling and Logging Both systems implement comprehensive error handling: - HTTP response validation [scripts/notify\\_translations.py224-229](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L224-L229) - GraphQL error checking [scripts/notify\\_translations.py231-236](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L231-L236) - Missing resource handling [scripts/deploy\\_docs\\_status.py34-36](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L34-L36) **Sources:** [scripts/deploy\\_docs\\_status.py9-16](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py#L9-L16) [scripts/notify\\_translations.py178-188](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L178-L188) ## Community Discussion Integration The translation notification system specifically targets the \"Questions: Translations\" discussion category using the category ID `DIC_kwDOCZduT84CT5P9` [scripts/notify\\_translations.py19](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L19-L19) This integration enables: - Automatic discovery of language-specific discussion threads - Targeted notifications to relevant community members - Persistent comment tracking to avoid duplicate notifications - Status updates when translations are completed The system maintains a mapping between language codes and discussion threads, allowing precise targeting of notifications to the appropriate community groups [scripts/notify\\_translations.py350-358](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L350-L358) **Sources:** [scripts/notify\\_translations.py18-20](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L18-L20) [scripts/notify\\_translations.py349-373](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L349-L373) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Community Automation](#community-automation.md) - [Overview](#overview.md) - [Documentation Deployment Notifications](#documentation-deployment-notifications.md) - [Core Functionality](#core-functionality.md) - [Status Management](#status-management.md) - [Link Generation Process](#link-generation-process.md) - [Translation Community Notifications](#translation-community-notifications.md) - [System Architecture](#system-architecture.md) - [Label-Based Workflow](#label-based-workflow.md) - [GraphQL Queries and Mutations](#graphql-queries-and-mutations.md) - [Message Templates](#message-templates.md) - [Race Condition Prevention](#race-condition-prevention.md) - [Integration with GitHub Actions](#integration-with-github-actions.md) - [Common Configuration Pattern](#common-configuration-pattern.md) - [Event Processing](#event-processing.md) - [Error Handling and Logging](#error-handling-and-logging.md) - [Community Discussion Integration](#community-discussion-integration.md)",
  "API Documentation System | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # API Documentation System Relevant source files - [docs/de/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/how-to/custom-docs-ui-assets.md) - [docs/en/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md) - [docs/es/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/how-to/custom-docs-ui-assets.md) - [docs/pt/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/how-to/custom-docs-ui-assets.md) - [docs\\_src/custom\\_docs\\_ui/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py) - [fastapi/openapi/docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py) - [tests/test\\_local\\_docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_local_docs.py) - [tests/test\\_tutorial/test\\_custom\\_docs\\_ui/test\\_tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py) ## Purpose and Scope",
  "The API Documentation System generates and serves interactive API documentation interfaces for FastAPI applications. This system specifically handles the creation of Swagger UI and ReDoc interfaces that allow users to explore, test, and interact with API endpoints directly in the browser. This document covers the automatic generation of documentation HTML pages, asset management (JavaScript/CSS files), and customization options for the documentation UI. For information about OpenAPI schema generation that powers these interfaces, see [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md). For broader documentation infrastructure including MkDocs and multi-language support, see [Documentation System](fastapi/fastapi/6.1-documentation-system.md). ## System Overview The API Documentation System operates as a bridge between FastAPI's OpenAPI schema generation and web-based documentation interfaces. It provides HTML generation functions that create fully functional documentation pages served directly by FastAPI applications. ``` ``` **Documentation UI Generation Flow** The system generates HTML responses containing JavaScript that initializes documentation interfaces using OpenAPI specifications. Sources: [fastapi/openapi/docs.py1-345](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L1-L345) ## Core Components The documentation system centers around three primary HTML generation functions that create complete documentation interfaces with embedded JavaScript and CSS. ``` ``` **Core Function Architecture** Each documentation interface is generated by a dedicated function that assembles HTML with proper asset references and configuration. ### Primary Generation Functions The `get_swagger_ui_html()` function creates the main interactive documentation interface. It accepts parameters for customizing the OpenAPI URL, title, asset URLs, and Swagger UI configuration through the `swagger_ui_parameters` parameter. Sources: [fastapi/openapi/docs.py26-158](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L26-L158) The `get_redoc_html()` function generates an alternative documentation interface using ReDoc. It provides a different visual style and interaction model compared to Swagger UI, with options for Google Fonts integration and custom styling. Sources: [fastapi/openapi/docs.py161-253](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L161-L253) The `get_swagger_ui_oauth2_redirect_html()` function handles OAuth2 authentication flow redirects specifically for Swagger UI. This enables authentication testing directly within the documentation interface. Sources: [fastapi/openapi/docs.py256-344](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L256-L344) ### Default Configuration The system provides sensible defaults through `swagger_ui_default_parameters` which includes DOM targeting, layout configuration, and feature toggles for the Swagger UI interface. | Parameter | Default Value | Purpose | | ---------------------- | --------------- | ---------------------------------- | | `dom_id` | `\"#swagger-ui\"` | Target DOM element for UI mounting | | `layout` | `\"BaseLayout\"` | Swagger UI layout configuration | | `deepLinking` | `True` | Enable URL-based navigation | | `showExtensions` | `True` | Display OpenAPI extensions | | `showCommonExtensions` | `True` | Display common vendor extensions | Sources: [fastapi/openapi/docs.py8-23](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L8-L23) ## Asset Management The documentation system supports three asset delivery modes: CDN-based (default), custom CDN, and self-hosted static files. Each mode provides different trade-offs between simplicity, control, and offline functionality. ### CDN-Based Assets (Default) By default, the system loads assets from jsdelivr CDN with these default URLs: - Swagger UI JavaScript: `https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js` - Swagger UI CSS: `https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css` - ReDoc JavaScript: `https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js` - Favicon: `https://fastapi.tiangolo.com/img/favicon.png` Sources: [fastapi/openapi/docs.py47-74](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L47-L74) [fastapi/openapi/docs.py182-199](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L182-L199) ### Custom CDN Configuration Applications can specify alternative CDN URLs by passing custom `swagger_js_url`, `swagger_css_url`, and `redoc_js_url` parameters to the generation functions. This supports scenarios where default CDNs are blocked or alternative sources are preferred.",
  "Sources: [docs/en/docs/how-to/custom-docs-ui-assets.md9-58](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md#L9-L58) [docs\\_src/custom\\_docs\\_ui/tutorial001.py11-33](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L11-L33) ### Self-Hosted Static Assets For offline or airgapped deployments, applications can serve documentation assets locally by: 1. Downloading required JavaScript and CSS files 2. Serving them through FastAPI's `StaticFiles` mounting 3. Configuring documentation functions to use local URLs The required files are: - `swagger-ui-bundle.js` and `swagger-ui.css` for Swagger UI - `redoc.standalone.js` for ReDoc Sources: [docs/en/docs/how-to/custom-docs-ui-assets.md59-186](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md#L59-L186) ## Integration with FastAPI Applications FastAPI applications automatically configure documentation endpoints unless explicitly disabled. The system integrates through several application-level configurations and automatic endpoint registration. ### Automatic Documentation Endpoints FastAPI applications automatically create documentation endpoints at `/docs` (Swagger UI) and `/redoc` (ReDoc) unless disabled by setting `docs_url=None` or `redoc_url=None` in the FastAPI constructor. The automatic endpoints use these application attributes: - `app.openapi_url` - URL for OpenAPI JSON schema - `app.title` - Application title for documentation pages - `app.swagger_ui_oauth2_redirect_url` - OAuth2 redirect handler URL ### Custom Documentation Endpoints Applications requiring asset customization must disable automatic endpoints and create custom path operations that call the HTML generation functions with appropriate parameters. ``` ``` Sources: [docs\\_src/custom\\_docs\\_ui/tutorial001.py8-39](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L8-L39) ### OAuth2 Integration The system supports OAuth2 authentication flows through the redirect handler endpoint. Applications using OAuth2 security schemes can enable authentication testing directly within Swagger UI by configuring the `oauth2_redirect_url` and `init_oauth` parameters. The OAuth2 redirect handler processes authentication callbacks and returns tokens to the Swagger UI interface, enabling full authentication testing within the documentation. Sources: [fastapi/openapi/docs.py75-90](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L75-L90) [fastapi/openapi/docs.py256-344](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L256-L344) ## Testing and Validation The documentation system includes comprehensive testing to ensure proper HTML generation, asset URL inclusion, and configuration parameter handling. Test coverage includes: - Default CDN URL inclusion in generated HTML - Custom URL parameter handling - OAuth2 redirect functionality - Google Fonts configuration for ReDoc - Static file serving integration Sources: [tests/test\\_local\\_docs.py1-68](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_local_docs.py#L1-L68) [tests/test\\_tutorial/test\\_custom\\_docs\\_ui/test\\_tutorial001.py1-43](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py#L1-L43) Dismiss Refresh this wiki Enter email to refresh ### On this page - [API Documentation System](#api-documentation-system.md) - [Purpose and Scope](#purpose-and-scope.md) - [System Overview](#system-overview.md) - [Core Components](#core-components.md) - [Primary Generation Functions](#primary-generation-functions.md) - [Default Configuration](#default-configuration.md) - [Asset Management](#asset-management.md) - [CDN-Based Assets (Default)](#cdn-based-assets-default.md) - [Custom CDN Configuration](#custom-cdn-configuration.md) - [Self-Hosted Static Assets](#self-hosted-static-assets.md) - [Integration with FastAPI Applications](#integration-with-fastapi-applications.md) - [Automatic Documentation Endpoints](#automatic-documentation-endpoints.md) - [Custom Documentation Endpoints](#custom-documentation-endpoints.md) - [OAuth2 Integration](#oauth2-integration.md) - [Testing and Validation](#testing-and-validation.md)",
  "# fastapi_fastapi - Documentation Index - [/fastapi/fastapi](./_fastapi_fastapi.md) - [/fastapi/fastapi/1-fastapi-overview](./_fastapi_fastapi_1-fastapi-overview.md) - [/fastapi/fastapi/2.1-application-and-routing-system](./_fastapi_fastapi_2.1-application-and-routing-system.md) - [/fastapi/fastapi/2-core-architecture](./_fastapi_fastapi_2-core-architecture.md) - [/fastapi/fastapi/2.3-parameter-validation-and-handling](./_fastapi_fastapi_2.3-parameter-validation-and-handling.md) - [/fastapi/fastapi/2.2-dependency-injection](./_fastapi_fastapi_2.2-dependency-injection.md) - [/fastapi/fastapi/2.5-security-components](./_fastapi_fastapi_2.5-security-components.md) - [/fastapi/fastapi/3-api-documentation-system](./_fastapi_fastapi_3-api-documentation-system.md) - [/fastapi/fastapi/2.6-settings-management](./_fastapi_fastapi_2.6-settings-management.md) - [/fastapi/fastapi/2.7-error-handling](./_fastapi_fastapi_2.7-error-handling.md) - [/fastapi/fastapi/2.4-response-handling](./_fastapi_fastapi_2.4-response-handling.md) - [/fastapi/fastapi/3.1-openapi-schema-generation](./_fastapi_fastapi_3.1-openapi-schema-generation.md) - [/fastapi/fastapi/3.2-customizing-api-documentation-ui](./_fastapi_fastapi_3.2-customizing-api-documentation-ui.md) - [/fastapi/fastapi/4.1-asynchronous-support](./_fastapi_fastapi_4.1-asynchronous-support.md) - [/fastapi/fastapi/4-advanced-features](./_fastapi_fastapi_4-advanced-features.md) - [/fastapi/fastapi/4.2-database-integration](./_fastapi_fastapi_4.2-database-integration.md) - [/fastapi/fastapi/4.3-background-tasks](./_fastapi_fastapi_4.3-background-tasks.md) - [/fastapi/fastapi/5-testing-infrastructure](./_fastapi_fastapi_5-testing-infrastructure.md) - [/fastapi/fastapi/5.1-test-framework-and-tools](./_fastapi_fastapi_5.1-test-framework-and-tools.md) - [/fastapi/fastapi/4.4-deployment-and-production-considerations](./_fastapi_fastapi_4.4-deployment-and-production-considerations.md) - [/fastapi/fastapi/6-project-infrastructure](./_fastapi_fastapi_6-project-infrastructure.md) - [/fastapi/fastapi/5.2-code-quality-and-pre-commit](./_fastapi_fastapi_5.2-code-quality-and-pre-commit.md) - [/fastapi/fastapi/6.2-cicd-pipeline](./_fastapi_fastapi_6.2-cicd-pipeline.md) - [/fastapi/fastapi/6.3-development-workflow](./_fastapi_fastapi_6.3-development-workflow.md) - [/fastapi/fastapi/6.1-documentation-system](./_fastapi_fastapi_6.1-documentation-system.md) - [/fastapi/fastapi/7.1-contributors-and-experts-management](./_fastapi_fastapi_7.1-contributors-and-experts-management.md) - [/fastapi/fastapi/7-community-ecosystem](./_fastapi_fastapi_7-community-ecosystem.md) - [/fastapi/fastapi/7.2-translation-management](./_fastapi_fastapi_7.2-translation-management.md) - [/fastapi/fastapi/7.3-external-resources-and-sponsorship](./_fastapi_fastapi_7.3-external-resources-and-sponsorship.md) - [/fastapi/fastapi/7.4-community-automation](./_fastapi_fastapi_7.4-community-automation.md)",
  "OpenAPI Schema Generation | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # OpenAPI Schema Generation Relevant source files",
  "- [docs/de/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/how-to/custom-docs-ui-assets.md) - [docs/en/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md) - [docs/es/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/how-to/custom-docs-ui-assets.md) - [docs/pt/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/how-to/custom-docs-ui-assets.md) - [docs\\_src/custom\\_docs\\_ui/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) - [tests/test\\_local\\_docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_local_docs.py) - [tests/test\\_tutorial/test\\_custom\\_docs\\_ui/test\\_tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py) This document covers FastAPI's automatic OpenAPI specification generation system. It explains how FastAPI introspects route definitions, parameters, dependencies, and security requirements to produce a complete OpenAPI 3.1.0 schema. For information about customizing the documentation UI that consumes this schema, see [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md). ## Architecture Overview FastAPI's OpenAPI generation system operates through a multi-stage pipeline that transforms application route definitions into OpenAPI specification components. The system analyzes route handlers, their parameters, dependencies, response models, and security requirements to generate comprehensive API documentation. ``` ``` **Diagram: OpenAPI Generation Pipeline**",
  "Sources: [fastapi/applications.py773-844](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L773-L844) [fastapi/openapi/utils.py477-551](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L477-L551) ## Core Components ### FastAPI Application Entry Point The `FastAPI` class provides the primary interface for OpenAPI generation through its `openapi()` method. This method caches the generated schema and delegates the actual generation to utility functions. ``` ``` **Diagram: FastAPI OpenAPI Method Flow** Sources: [fastapi/applications.py773-844](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L773-L844) ### Route Processing System The `get_openapi_path()` function processes individual `APIRoute` instances to generate OpenAPI path objects. It extracts operation metadata, parameters, request bodies, and security definitions. | Component | Function | Purpose | | -------------------------------------- | -------------------- | ------------------------------------------------- | | `get_openapi_operation_metadata()` | Operation details | Generates operationId, summary, description, tags | | `_get_openapi_operation_parameters()` | Parameter extraction | Processes path, query, header, cookie parameters | | `get_openapi_operation_request_body()` | Request body schema | Generates request body specifications | | `get_openapi_security_definitions()` | Security schemas | Extracts security requirements from dependencies | Sources: [fastapi/openapi/utils.py254-443](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L254-L443) ### Dependency Analysis The system leverages FastAPI's dependency injection analysis to generate parameter and security schemas. The `get_flat_dependant()` function flattens the dependency tree to extract all parameters. ``` ``` **Diagram: Dependency Analysis for Schema Generation** Sources: [fastapi/dependencies/utils.py177-209](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L177-L209) [fastapi/openapi/utils.py95-167](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L95-L167) ## Schema Generation Process ### Main Generation Function The `get_openapi()` function serves as the primary orchestrator, coordinating field extraction, schema generation, and component assembly into a complete OpenAPI specification. Key steps performed: 1. Extract all model fields from routes and webhooks 2. Generate JSON schemas for all models 3. Process each route to create path items 4. Assemble components, security schemes, and definitions 5. Build final OpenAPI specification Sources: [fastapi/openapi/utils.py477-551](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L477-L551) ### Field Extraction and Schema Generation The `get_fields_from_routes()` function extracts all `ModelField` instances from application routes, including request bodies, response models, and parameter definitions. ``` ``` **Diagram: Field Extraction and Schema Generation** Sources: [fastapi/openapi/utils.py446-474](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L446-L474) ### Parameter Schema Generation The `_get_openapi_operation_parameters()` function processes route dependencies to generate OpenAPI parameter definitions for path, query, header, and cookie parameters. The function handles: - Parameter grouping by type (path, query, header, cookie) - Schema generation for each parameter - Alias resolution and underscore conversion for headers - Example and description extraction - Deprecation marking Sources: [fastapi/openapi/utils.py95-167](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L95-L167) ### Request Body Schema Generation The `get_openapi_operation_request_body()` function generates OpenAPI request body specifications from route body fields, including content-type handling and example extraction. Sources: [fastapi/openapi/utils.py170-204](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L170-L204) ## Security Schema Generation FastAPI automatically generates OpenAPI security schemes from security dependencies in route definitions. The `get_openapi_security_definitions()` function extracts security requirements and converts them to OpenAPI security scheme definitions. ``` ``` **Diagram: Security Schema Generation Process**",
  "Sources: [fastapi/openapi/utils.py78-92](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L78-L92) [fastapi/security/oauth2.py308-377](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py#L308-L377) [fastapi/security/http.py69-95](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py#L69-L95) [fastapi/security/api\\_key.py11-21](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py#L11-L21) ## Response Schema Generation The system generates response schemas from route response models and additional response definitions. For routes with response models, it creates schema definitions and links them to appropriate HTTP status codes. The response generation process handles: - Default response schemas from route response models - Additional responses defined in route configuration - HTTP status code validation for body content - Media type determination based on response class Sources: [fastapi/openapi/utils.py354-443](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L354-L443) ## Operation ID Generation Each OpenAPI operation requires a unique `operationId`. FastAPI provides a default generation strategy through the `generate_unique_id()` function, which creates IDs from route names, paths, and HTTP methods. The generation process: 1. Combines route name and path format 2. Sanitizes non-word characters 3. Appends HTTP method 4. Ensures uniqueness across operations Sources: [fastapi/utils.py179-184](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py#L179-L184) [fastapi/openapi/utils.py228-251](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L228-L251) ## Validation Error Schema FastAPI automatically includes validation error response schemas for routes with parameters or request bodies. The system adds HTTP 422 responses with standardized error schema definitions. The validation error schema includes: - `ValidationError` component definition - `HTTPValidationError` wrapper definition - Automatic inclusion for routes with parameters Sources: [fastapi/openapi/utils.py41-66](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L41-L66) [fastapi/openapi/utils.py419-439](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L419-L439) ## Customization Points ### OpenAPI Extra Configuration Routes can include additional OpenAPI configuration through the `openapi_extra` parameter, which gets merged into the generated operation definition using deep dictionary updates. ### Custom Schema Generation The system supports custom JSON schema generation through the `GenerateJsonSchema` class and field mapping systems, allowing fine-grained control over schema generation behavior. ### Operation ID Customization Applications can provide custom operation ID generation functions through the `generate_unique_id_function` parameter on routes and routers. Sources: [fastapi/routing.py459-462](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L459-L462) [fastapi/routing.py822-836](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L822-L836) [fastapi/openapi/utils.py440-442](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L440-L442) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [OpenAPI Schema Generation](#openapi-schema-generation.md) - [Architecture Overview](#architecture-overview.md) - [Core Components](#core-components.md) - [FastAPI Application Entry Point](#fastapi-application-entry-point.md) - [Route Processing System](#route-processing-system.md) - [Dependency Analysis](#dependency-analysis.md) - [Schema Generation Process](#schema-generation-process.md) - [Main Generation Function](#main-generation-function.md) - [Field Extraction and Schema Generation](#field-extraction-and-schema-generation.md) - [Parameter Schema Generation](#parameter-schema-generation.md) - [Request Body Schema Generation](#request-body-schema-generation.md) - [Security Schema Generation](#security-schema-generation.md) - [Response Schema Generation](#response-schema-generation.md) - [Operation ID Generation](#operation-id-generation.md) - [Validation Error Schema](#validation-error-schema.md) - [Customization Points](#customization-points.md) - [OpenAPI Extra Configuration](#openapi-extra-configuration.md) - [Custom Schema Generation](#custom-schema-generation.md) - [Operation ID Customization](#operation-id-customization.md)",
  "Asynchronous Support | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Asynchronous Support Relevant source files",
  "- [docs/de/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/async.md) - [docs/em/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/em/docs/async.md) - [docs/en/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md) - [docs/es/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/async.md) - [docs/fa/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fa/docs/async.md) - [docs/fr/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/docs/async.md) - [docs/ja/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/async.md) - [docs/ko/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ko/docs/async.md) - [docs/pt/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/async.md) - [docs/ru/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/docs/async.md) - [docs/tr/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/tr/docs/async.md) - [docs/zh/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/async.md) This document explains how FastAPI handles asynchronous code execution, including the use of `async def` functions, concurrency patterns, and the differences between synchronous and asynchronous path operation functions. ## Purpose and Scope This page covers: - How FastAPI supports both synchronous and asynchronous code - When to use `async def` vs regular `def` functions - How FastAPI handles different function types internally - Performance considerations for I/O-bound vs CPU-bound operations ## Overview of Asynchronous Support in FastAPI FastAPI provides native asynchronous support through Python's `async`/`await` syntax, built on top of Starlette's ASGI foundation. This architecture enables efficient handling of concurrent requests, particularly for I/O-bound operations such as database queries, API calls, and file operations. ### FastAPI Async Architecture ``` ``` ### Request Processing Flow ``` ``` Sources: \\[docs/en/docs/async.md:1-55], \\[docs/en/docs/async.md:366-372], \\[docs/en/docs/async.md:415-423] ## When to Use Async Functions The decision to use `async def` or regular `def` for your path operation functions depends on what your function does: | Use `async def` when... | Use `def` when... | | ------------------------------------------ | ----------------------------------------------------- | | Calling other async functions with `await` | Using synchronous libraries (most database libraries) | | Making async network calls | Performing CPU-intensive operations | | Using async database drivers | Not making any I/O operations | | Not doing CPU-intensive work | Not sure what to use | FastAPI will handle both types correctly, but following these guidelines allows for performance optimizations. ``` ``` Sources: \\[docs/en/docs/async.md:5-55] ## How FastAPI Handles Async and Sync Functions ### Path Operation Function Execution FastAPI's handling of path operation functions depends on their declaration: ``` ``` **For `async def` path operations:** - FastAPI calls the function directly using `await` - Execution remains in the main event loop - Can use `await` for other async operations - Example: [docs/en/docs/async.md17-22](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L17-L22) **For `def` path operations:** - FastAPI wraps the call in `run_in_threadpool()` - Execution moves to an external thread - Cannot use `await` inside the function - Example: [docs/en/docs/async.md34-39](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L34-L39) ### Dependencies and Sub-dependencies The same execution model applies to the dependency injection system:",
  "| Dependency Type | Execution Method | Can Use `await`? | | -------------------- | ---------------- | ---------------- | | `async def get_db()` | Direct await | ✅ Yes | | `def get_db()` | ThreadPool | ❌ No | Dependencies can be mixed freely - FastAPI handles each according to its type. Sub-dependencies follow the same pattern, allowing complex dependency trees with mixed execution models. Sources: \\[docs/en/docs/async.md:415-423], \\[docs/en/docs/async.md:424-431] ## Concurrency vs Parallelism FastAPI's asynchronous support is based on concurrency, which is different from parallelism: ``` ``` - **Concurrency**: Handling multiple tasks by switching between them when waiting occurs - **Parallelism**: Executing multiple tasks simultaneously on different processors FastAPI excels at concurrency, which is ideal for web applications that spend most of their time waiting for I/O operations. Sources: \\[docs/en/docs/async.md:96-261] ## I/O-Bound vs CPU-Bound Operations Understanding the difference between I/O-bound and CPU-bound operations helps in choosing the right approach: | I/O-Bound Operations | CPU-Bound Operations | | -------------------------------- | -------------------------- | | Network requests | Complex calculations | | Database queries | Image/audio processing | | File system operations | Machine learning | | API calls | Data transformations | | **Best with**: Async/concurrency | **Best with**: Parallelism | For web APIs, most operations are I/O-bound, making async a good default choice. Sources: \\[docs/en/docs/async.md:77-89], \\[docs/en/docs/async.md:262-301] ## Technical Implementation Details FastAPI's asynchronous capabilities are built on a carefully designed stack that provides compatibility and performance: ### Async Stack Architecture ``` ``` ### Coroutine and ThreadPool Management FastAPI uses different execution strategies based on function signatures: ``` ``` ### AnyIO Integration FastAPI leverages AnyIO's structured concurrency features: - Compatible with both `asyncio` and `trio` backends - Provides unified async abstraction layer - Enables advanced concurrency patterns - Supports context managers and cancellation The `run_in_threadpool()` function prevents blocking the main event loop when executing synchronous code, ensuring the server remains responsive to other requests. Sources: \\[docs/en/docs/async.md:366-372], \\[docs/en/docs/async.md:415-423], \\[docs/en/docs/async.md:418-420] ## Performance Considerations Choosing the right function type directly impacts FastAPI application performance: ### Performance Matrix | Operation Type | Library Support | Recommended Function Type | Execution Method | Performance Impact | | ------------------ | --------------------- | ------------------------- | ---------------- | ------------------ | | Database queries | `asyncpg`, `motor` | `async def` | Direct await | ⚡ Optimal | | Database queries | `psycopg2`, `pymongo` | `def` | ThreadPool | ✅ Good | | HTTP requests | `httpx`, `aiohttp` | `async def` | Direct await | ⚡ Optimal | | HTTP requests | `requests` | `def` | ThreadPool | ✅ Good | | File I/O | `aiofiles` | `async def` | Direct await | ⚡ Optimal | | File I/O | Built-in `open()` | `def` | ThreadPool | ✅ Good | | CPU computation | Any | `def` | ThreadPool | ⚠️ Limited | | Trivial operations | N/A | `async def` | Direct | ⚡ Optimal | ### ThreadPool Behavior When FastAPI encounters a `def` function, it automatically: ``` ``` ### FastAPI-Specific Optimizations Unlike some other async frameworks, FastAPI optimizations include: - **Automatic threadpool management**: No need to manually configure thread pools - **Smart function detection**: Analyzes function signatures at startup - **Mixed execution support**: Seamlessly combines async and sync dependencies - **Zero-copy where possible**: Minimal overhead for async operations For compute-only operations (no I/O), `async def` performs better in FastAPI due to reduced threadpool overhead - approximately 100 nanoseconds saved per call compared to other frameworks. Sources: \\[docs/en/docs/async.md:415-423], \\[docs/en/docs/async.md:418-420] ## Writing Your Own Async Code If you need to write custom asynchronous code beyond FastAPI's built-in functionality, you can use:",
  "1. **AnyIO**: The library that powers Starlette and FastAPI 2. **Asyncer**: A thin layer on top of AnyIO with improved type annotations 3. **Standard asyncio**: Python's built-in asynchronous library These tools can help you implement more advanced concurrency patterns in your FastAPI applications. Sources: \\[docs/en/docs/async.md:366-372] ## Conclusion FastAPI's support for both synchronous and asynchronous code provides flexibility while maintaining high performance. By understanding when to use each approach, you can optimize your application for different types of operations. Remember: - Use `async def` when working with other async code or I/O-bound operations - Use regular `def` when working with synchronous libraries or CPU-bound tasks - FastAPI will handle both correctly, but following these guidelines allows for better performance The asynchronous capabilities of FastAPI, powered by Starlette and AnyIO, contribute significantly to its impressive performance compared to other Python web frameworks. Sources: \\[docs/en/docs/async.md:394-403] Dismiss Refresh this wiki Enter email to refresh ### On this page - [Asynchronous Support](#asynchronous-support.md) - [Purpose and Scope](#purpose-and-scope.md) - [Overview of Asynchronous Support in FastAPI](#overview-of-asynchronous-support-in-fastapi.md) - [FastAPI Async Architecture](#fastapi-async-architecture.md) - [Request Processing Flow](#request-processing-flow.md) - [When to Use Async Functions](#when-to-use-async-functions.md) - [How FastAPI Handles Async and Sync Functions](#how-fastapi-handles-async-and-sync-functions.md) - [Path Operation Function Execution](#path-operation-function-execution.md) - [Dependencies and Sub-dependencies](#dependencies-and-sub-dependencies.md) - [Concurrency vs Parallelism](#concurrency-vs-parallelism.md) - [I/O-Bound vs CPU-Bound Operations](#io-bound-vs-cpu-bound-operations.md) - [Technical Implementation Details](#technical-implementation-details.md) - [Async Stack Architecture](#async-stack-architecture.md) - [Coroutine and ThreadPool Management](#coroutine-and-threadpool-management.md) - [AnyIO Integration](#anyio-integration.md) - [Performance Considerations](#performance-considerations.md) - [Performance Matrix](#performance-matrix.md) - [ThreadPool Behavior](#threadpool-behavior.md) - [FastAPI-Specific Optimizations](#fastapi-specific-optimizations.md) - [Writing Your Own Async Code](#writing-your-own-async-code.md) - [Conclusion](#conclusion.md)",
  "Response Handling | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Response Handling Relevant source files",
  "- [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py)",
  "This document covers how FastAPI processes and serializes responses from path operation functions into HTTP responses. It explains the default response behavior, serialization pipeline, response model validation, and custom response classes. For information about request handling and parameter validation, see [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md). For error handling mechanisms, see [Error Handling](fastapi/fastapi/2.7-error-handling.md). ## Default Response Behavior FastAPI automatically converts path operation return values into HTTP responses using `JSONResponse` as the default response class. When a path operation function returns data, FastAPI applies the following default behavior: - **Automatic JSON Conversion**: Return values are serialized to JSON using the `jsonable_encoder` - **Content-Type Headers**: HTTP headers are automatically set to `application/json` - **Status Codes**: Default status code is 200, unless explicitly specified - **Response Model Validation**: If a `response_model` is declared, the return value is validated against it The default response class can be overridden at the application level or per-route using the `response_class` parameter. Sources: [fastapi/applications.py354-373](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L354-L373) [fastapi/routing.py454-456](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L454-L456) ## Response Serialization Pipeline ### Response Content Preparation ``` ``` The `_prepare_response_content` function handles the initial content preparation by recursively processing different data types and applying serialization rules based on the `exclude_unset`, `exclude_defaults`, and `exclude_none` parameters. Sources: [fastapi/routing.py80-124](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L80-L124) ### JSON Encoding Process ``` ``` The `jsonable_encoder` provides comprehensive type conversion with support for custom encoders, Pydantic models, dataclasses, and various Python built-in types including datetime, UUID, Enum, and Path objects. Sources: [fastapi/encoders.py102-343](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py#L102-L343) ## Response Model Validation ### Response Field Creation When a path operation declares a `response_model`, FastAPI creates response fields during route initialization: ``` ``` The cloned field ensures that Pydantic submodel inheritance doesn't bypass validation, preventing security issues where a subclass with additional fields might be returned directly. Sources: [fastapi/routing.py507-530](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L507-L530) ### Response Validation Process ``` ``` The `serialize_response` function validates response content against the declared response model, ensuring type safety and proper serialization. It handles both Pydantic v1 and v2 compatibility through the `hasattr(field, \"serialize\")` check. Sources: [fastapi/routing.py144-203](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L144-L203) ## Custom Response Classes ### Response Class Hierarchy FastAPI supports various response classes that inherit from Starlette's `Response`: | Response Class | Media Type | Use Case | | ------------------- | ------------------ | ------------------------------------- | | `JSONResponse` | `application/json` | Default, automatic JSON serialization | | `ORJSONResponse` | `application/json` | High-performance JSON with `orjson` | | `HTMLResponse` | `text/html` | HTML content | | `PlainTextResponse` | `text/plain` | Plain text responses | | `RedirectResponse` | N/A | HTTP redirects | | `FileResponse` | Based on file | File downloads | | `StreamingResponse` | Custom | Streaming content | ### Custom Response Integration ``` ``` When a path operation returns a `Response` instance directly, FastAPI bypasses the serialization pipeline. Otherwise, it uses the declared `response_class` to wrap the serialized content. Sources: [fastapi/routing.py307-342](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L307-L342) [docs/en/docs/advanced/custom-response.md1-86](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md#L1-L86) ## Response Generation Flow ### Complete Request-Response Cycle ``` ``` ### Response Handler Implementation The `get_request_handler` function orchestrates the complete response generation process:",
  "1. **Endpoint Execution**: Calls the path operation function via `run_endpoint_function` 2. **Response Type Check**: Determines if return value is already a `Response` instance 3. **Content Serialization**: Applies `serialize_response` with response model validation 4. **Response Construction**: Creates response instance with proper status codes and headers 5. **Background Tasks**: Attaches any background tasks to the response 6. **Body Validation**: Ensures response body is allowed for the status code Sources: [fastapi/routing.py241-356](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L241-L356) ### Status Code and Header Management ``` ``` FastAPI automatically manages status codes based on the hierarchy of explicit parameters, route defaults, and response class defaults. It also validates that response bodies are appropriate for the status code (e.g., no body for 204 No Content). Sources: [fastapi/routing.py317-342](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L317-L342) [fastapi/utils.py42-56](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py#L42-L56) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Response Handling](#response-handling.md) - [Default Response Behavior](#default-response-behavior.md) - [Response Serialization Pipeline](#response-serialization-pipeline.md) - [Response Content Preparation](#response-content-preparation.md) - [JSON Encoding Process](#json-encoding-process.md) - [Response Model Validation](#response-model-validation.md) - [Response Field Creation](#response-field-creation.md) - [Response Validation Process](#response-validation-process.md) - [Custom Response Classes](#custom-response-classes.md) - [Response Class Hierarchy](#response-class-hierarchy.md) - [Custom Response Integration](#custom-response-integration.md) - [Response Generation Flow](#response-generation-flow.md) - [Complete Request-Response Cycle](#complete-request-response-cycle.md) - [Response Handler Implementation](#response-handler-implementation.md) - [Status Code and Header Management](#status-code-and-header-management.md)",
  "Code Quality and Pre-commit | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Code Quality and Pre-commit Relevant source files",
  "- [.pre-commit-config.yaml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml) - [requirements-tests.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt) - [requirements.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements.txt) - [scripts/format.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh) - [scripts/lint.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh) - [scripts/test-cov-html.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test-cov-html.sh) - [scripts/test.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test.sh) - [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py) - [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py) - [tests/test\\_typing\\_python39.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_typing_python39.py) - [tests/test\\_union\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_body.py) - [tests/test\\_union\\_inherited\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py) - [tests/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py) This document covers the code quality infrastructure and pre-commit hook system used in the FastAPI repository. It details the configuration and usage of linting, formatting, type checking, and automated quality gates that ensure code consistency and reliability. For information about the actual test framework and testing utilities, see [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md). For CI/CD automation that runs these quality checks, see [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md). ## Pre-commit Hook System FastAPI uses a comprehensive pre-commit hook system to enforce code quality standards before commits are made to the repository. The configuration is defined in [.pre-commit-config.yaml1-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml#L1-L26) ### Hook Configuration The pre-commit system is configured with Python 3.10 as the default language version and includes two main repository sources: ``` ``` The system includes validation hooks for file formats and content, plus automated code quality enforcement through Ruff. **Sources:** [.pre-commit-config.yaml1-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml#L1-L26) ### Pre-commit.ci Integration The configuration includes integration with pre-commit.ci for automated maintenance: | Feature | Configuration | Description | | -------------------- | ---------------------------------------------------------- | -------------------------------------- | | Auto-fix Messages | `🎨 [pre-commit.ci] Auto format from pre-commit.com hooks` | Commit messages for automatic fixes | | Auto-update Messages | `⬆ [pre-commit.ci] pre-commit autoupdate` | Commit messages for dependency updates | **Sources:** [.pre-commit-config.yaml24-25](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml#L24-L25) ## Code Linting and Formatting with Ruff FastAPI uses Ruff as its primary tool for both code linting and formatting, replacing multiple traditional tools with a single, fast implementation. ### Ruff Configuration The Ruff configuration includes two main hooks: ``` ``` **Sources:** [.pre-commit-config.yaml16-22](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml#L16-L22) [scripts/lint.sh7-8](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh#L7-L8) [scripts/format.sh4-5](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh#L4-L5) ### Manual Code Quality Scripts The repository provides several scripts for manual execution of code quality tools:",
  "| Script | Purpose | Commands | | ------------------- | ----------------------------- | --------------------------------------------------- | | `scripts/lint.sh` | Run linting and type checking | `mypy fastapi`, `ruff check`, `ruff format --check` | | `scripts/format.sh` | Apply code formatting | `ruff check --fix`, `ruff format` | **Sources:** [scripts/lint.sh1-9](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh#L1-L9) [scripts/format.sh1-6](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh#L1-L6) ## Type Checking with mypy FastAPI uses mypy for static type checking to ensure type safety across the codebase. ### mypy Configuration The mypy version is pinned in the test requirements and executed as part of the linting process: ``` ``` **Sources:** [requirements-tests.txt5](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L5-L5) [scripts/lint.sh6](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh#L6-L6) ## Test Coverage Infrastructure The repository includes comprehensive test coverage tracking using the `coverage` tool. ### Coverage Configuration ``` ``` The test execution includes setting `PYTHONPATH=./docs_src` to include documentation source code in the test environment. **Sources:** [requirements-tests.txt3-4](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L3-L4) [scripts/test.sh6-7](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test.sh#L6-L7) [scripts/test-cov-html.sh6-9](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test-cov-html.sh#L6-L9) ## Testing Infrastructure Dependencies The testing infrastructure includes several specialized testing libraries and utilities: | Dependency | Version | Purpose | | ----------------- | ---------------- | ------------------------- | | `pytest` | `>=7.1.3,<9.0.0` | Main testing framework | | `coverage[toml]` | `>= 6.5.0,< 8.0` | Test coverage measurement | | `mypy` | `==1.8.0` | Static type checking | | `dirty-equals` | `==0.9.0` | Flexible equality testing | | `inline-snapshot` | `>=0.21.1` | Snapshot testing | **Sources:** [requirements-tests.txt3-6](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L3-L6) [requirements-tests.txt13](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L13-L13) ### Testing Utilities and Patterns The repository includes specialized testing utilities for handling different Python versions and Pydantic versions: ``` ``` The `pydantic_snapshot` function enables version-specific snapshot testing for maintaining compatibility across Pydantic versions. **Sources:** [tests/utils.py7-12](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py#L7-L12) [tests/utils.py15-34](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py#L15-L34) ## Quality Assurance Integration The code quality system integrates with the broader development workflow through standardized scripts and dependency management: ### Development Dependencies The main requirements file includes pre-commit as a development dependency: ``` ``` **Sources:** [requirements.txt1-7](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements.txt#L1-L7) ### Script Integration Patterns The quality assurance scripts follow consistent patterns for error handling and output: | Script Feature | Implementation | Purpose | | ----------------- | ------------------------------ | ---------------------------- | | Error Handling | `set -e` | Exit on any command failure | | Verbose Output | `set -x` | Display executed commands | | Environment Setup | `export PYTHONPATH=./docs_src` | Include docs in Python path | | Parameter Passing | `${@}` | Forward all script arguments |",
  "**Sources:** [scripts/test.sh3-4](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test.sh#L3-L4) [scripts/lint.sh3-4](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh#L3-L4) [scripts/format.sh2](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh#L2-L2) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Code Quality and Pre-commit](#code-quality-and-pre-commit.md) - [Pre-commit Hook System](#pre-commit-hook-system.md) - [Hook Configuration](#hook-configuration.md) - [Pre-commit.ci Integration](#pre-commitci-integration.md) - [Code Linting and Formatting with Ruff](#code-linting-and-formatting-with-ruff.md) - [Ruff Configuration](#ruff-configuration.md) - [Manual Code Quality Scripts](#manual-code-quality-scripts.md) - [Type Checking with mypy](#type-checking-with-mypy.md) - [mypy Configuration](#mypy-configuration.md) - [Test Coverage Infrastructure](#test-coverage-infrastructure.md) - [Coverage Configuration](#coverage-configuration.md) - [Testing Infrastructure Dependencies](#testing-infrastructure-dependencies.md) - [Testing Utilities and Patterns](#testing-utilities-and-patterns.md) - [Quality Assurance Integration](#quality-assurance-integration.md) - [Development Dependencies](#development-dependencies.md) - [Script Integration Patterns](#script-integration-patterns.md)",
  "Core Architecture | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Core Architecture Relevant source files",
  "- [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py) FastAPI's core architecture consists of several interconnected systems that work together to process HTTP requests, validate data, inject dependencies, and generate responses. This page provides an overview of these core components and their relationships. For detailed information about specific subsystems, see the dedicated pages: [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md), [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md), [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md), [Response Handling](fastapi/fastapi/2.4-response-handling.md), [Security Components](fastapi/fastapi/2.5-security-components.md), [Settings Management](fastapi/fastapi/2.6-settings-management.md), and [Error Handling](fastapi/fastapi/2.7-error-handling.md). ## Architectural Overview FastAPI's architecture is built in layers, with each layer providing specific functionality while building upon Starlette's ASGI foundation and Pydantic's validation capabilities. ### Core Framework Components ``` ``` ### Request Processing Pipeline ``` ```",
  "**Sources:** [fastapi/\\_\\_init\\_\\_.py1-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py#L1-L26) [fastapi/applications.py48](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L48-L48) [fastapi/routing.py596](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L596-L596) [fastapi/routing.py218](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L218-L218) [fastapi/dependencies/utils.py572](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L572-L572) ## Core Components ### FastAPI Application Class The `FastAPI` class in [fastapi/applications.py48](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L48-L48) serves as the main entry point and inherits from Starlette's `Starlette` class. It aggregates all core functionality including routing, dependency injection, security, and OpenAPI generation. Key responsibilities: - Route registration and management via `add_api_route()` and HTTP method decorators - Global dependency management - OpenAPI schema generation and documentation endpoints - Exception handling and middleware configuration - Application lifecycle management **Sources:** [fastapi/applications.py48-770](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L48-L770) ### APIRouter System The `APIRouter` class in [fastapi/routing.py596](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L596-L596) provides modular route organization. It mirrors the `FastAPI` class interface but operates as a sub-application that can be included in the main app or other routers. ``` ``` **Sources:** [fastapi/routing.py596-861](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L596-L861) [fastapi/routing.py429-570](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L429-L570) [fastapi/routing.py389-427](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L389-L427) ### Request Processing Pipeline The request processing pipeline is implemented primarily in `get_request_handler()` in [fastapi/routing.py218](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L218-L218) and handles the complete lifecycle of an HTTP request. #### APIRoute and Request Handling Each API endpoint is represented by an `APIRoute` instance that contains: - Path pattern and HTTP methods - Endpoint function reference - Response model and serialization configuration - Dependency tree (`Dependant` object) - Security requirements - OpenAPI metadata The `get_request_handler()` function creates an async handler that: 1. **Body Parsing**: Extracts JSON, form data, or file uploads from the request body 2. **Dependency Resolution**: Calls `solve_dependencies()` to resolve all parameter and dependency values 3. **Endpoint Execution**: Runs the user's endpoint function with resolved dependencies 4. **Response Processing**: Serializes the response using `serialize_response()` **Sources:** [fastapi/routing.py429-570](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L429-L570) [fastapi/routing.py218-359](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L218-L359) ### Dependency Injection System The dependency injection system is built around the `Dependant` dataclass in [fastapi/dependencies/models.py15](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L15-L15) and the `solve_dependencies()` function in [fastapi/dependencies/utils.py572](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L572-L572) #### Dependant Structure The `Dependant` class represents a complete dependency tree: ``` ``` #### Dependency Resolution Process ``` ```",
  "**Sources:** [fastapi/dependencies/utils.py572-695](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L572-L695) [fastapi/dependencies/models.py8-38](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L8-L38) [fastapi/dependencies/utils.py740-816](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L740-L816) ### Parameter Validation and Processing Parameter validation is handled through Pydantic `ModelField` objects created by `analyze_param()` in [fastapi/dependencies/utils.py348](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L348-L348) #### Parameter Analysis Flow The `analyze_param()` function processes function signature parameters and: 1. **Annotation Processing**: Extracts type information and `Annotated` metadata 2. **Parameter Classification**: Determines if parameter is path, query, header, cookie, or body 3. **FieldInfo Creation**: Creates appropriate `FieldInfo` objects (`Path`, `Query`, `Header`, etc.) 4. **ModelField Generation**: Converts to Pydantic `ModelField` for validation Parameter types are defined in [fastapi/params.py18](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py#L18-L18): ``` ``` **Sources:** [fastapi/dependencies/utils.py348-511](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L348-L511) [fastapi/params.py18-23](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py#L18-L23) [fastapi/param\\_functions.py1-68207](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py#L1-L68207) ### Response Handling and Serialization Response processing is handled by `serialize_response()` in [fastapi/routing.py144](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L144-L144) and the `jsonable_encoder()` function in [fastapi/encoders.py102](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py#L102-L102) #### Response Serialization Process ``` ``` The `jsonable_encoder()` handles conversion of complex Python objects to JSON-serializable formats using a registry of type encoders defined in `ENCODERS_BY_TYPE`. **Sources:** [fastapi/routing.py144-203](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L144-L203) [fastapi/encoders.py102-343](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py#L102-L343) [fastapi/encoders.py58-85](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py#L58-L85) ### Security Components Security is integrated through the security classes in the `fastapi.security` module and processed during dependency resolution. #### Security Integration Security schemes inherit from `SecurityBase` and are processed as special dependencies: 1. **Security Scheme Definition**: Classes like `OAuth2`, `HTTPBearer`, `APIKeyHeader` define authentication schemes 2. **Dependency Integration**: Security schemes are treated as dependencies in the `Dependant` tree 3. **OpenAPI Integration**: Security requirements are automatically added to OpenAPI schema 4. **Request Processing**: Security validation occurs during dependency resolution **Sources:** [fastapi/security/oauth2.py308-319](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py#L308-L319) [fastapi/security/http.py69-95](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py#L69-L95) [fastapi/security/api\\_key.py11-21](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py#L11-L21) [fastapi/dependencies/models.py8-12](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L8-L12) ### Exception Handling FastAPI provides structured exception handling through custom exception classes that extend Starlette's base exceptions. Key exception types:",
  "- `HTTPException`: For client errors with HTTP status codes - `RequestValidationError`: For request parameter validation failures - `ResponseValidationError`: For response model validation failures - `WebSocketRequestValidationError`: For WebSocket parameter validation - `FastAPIError`: Generic FastAPI-specific errors **Sources:** [fastapi/exceptions.py9-177](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L9-L177) ## Key Integration Points ### Starlette Foundation FastAPI builds on Starlette's ASGI foundation, inheriting: - ASGI application protocol implementation - Basic routing and middleware support - Request/Response objects - Exception handling framework - WebSocket support The `FastAPI` class extends `Starlette` while the `APIRouter` class extends `starlette.routing.Router`. ### Pydantic Integration Pydantic provides: - Data validation through `BaseModel` and `ModelField` - Type coercion and serialization - JSON Schema generation for OpenAPI - Field-level validation and constraints FastAPI creates `ModelField` instances for all parameters and uses Pydantic's validation engine throughout the request processing pipeline. **Sources:** [fastapi/applications.py34](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L34-L34) [fastapi/routing.py61-76](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L61-L76) [fastapi/utils.py63-107](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py#L63-L107) [fastapi/\\_compat.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/_compat.py) # Core Architecture This document covers the fundamental architectural components that make up the FastAPI framework itself. This includes the core classes, the request processing pipeline, dependency injection system, parameter validation, response handling, and the integration points with Pydantic and Starlette. For information about API documentation generation, see [API Documentation System](fastapi/fastapi/3-api-documentation-system.md). For advanced features like async support and middleware, see [Advanced Features](fastapi/fastapi/4-advanced-features.md). ## Architectural Overview FastAPI's core architecture is built in layers, with each layer providing specific functionality while building upon the foundation provided by Starlette and Pydantic. ``` ``` **Sources:** [fastapi/\\_\\_init\\_\\_.py1-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py#L1-L26) [fastapi/applications.py48-62](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L48-L62) [fastapi/routing.py596-621](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L596-L621) [fastapi/routing.py218-359](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L218-L359) [fastapi/dependencies/utils.py572-695](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L572-L695) ## Core Components ### Application Layer The `FastAPI` class serves as the primary entry point and orchestrates all framework functionality. It inherits from Starlette's `Starlette` class and provides the main application interface. The `APIRouter` class enables modular organization of routes and can be included in applications or other routers. | Component | Purpose | Key Methods | | ----------- | -------------------------- | -------------------------------------------------------- | | `FastAPI` | Main application class | `add_api_route()`, `get()`, `post()`, `include_router()` | | `APIRouter` | Modular route organization | `add_api_route()`, `get()`, `post()`, `include_router()` | Both classes provide identical interfaces for route registration, dependency management, and middleware configuration. See [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) for detailed coverage. **Sources:** [fastapi/applications.py48](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L48-L48) [fastapi/routing.py596](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L596-L596) ### Request Processing Pipeline",
  "Each HTTP request flows through a standardized pipeline implemented by the `APIRoute` class and the `get_request_handler()` function. This pipeline handles parameter extraction, dependency resolution, endpoint execution, and response serialization. The core processing steps are: 1. **Route Matching**: `FastAPI` matches the incoming request to an `APIRoute` 2. **Handler Execution**: `get_request_handler()` processes the request 3. **Parameter Parsing**: Request data is extracted and classified 4. **Dependency Resolution**: `solve_dependencies()` resolves all dependencies 5. **Endpoint Execution**: User-defined endpoint function is called 6. **Response Serialization**: `serialize_response()` converts the return value **Sources:** [fastapi/routing.py218](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L218-L218) [fastapi/routing.py429](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L429-L429) ### Dependency Injection System FastAPI's dependency injection is built around the `Dependant` dataclass and the `solve_dependencies()` function. The `Dependant` represents a complete dependency tree containing all parameters, sub-dependencies, and security requirements for an endpoint. Dependencies are resolved recursively, with each dependency type handled by specific parameter extraction functions. The system supports caching, scoping, and hierarchical dependency resolution. See [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) for complete details. **Sources:** [fastapi/dependencies/models.py15](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L15-L15) [fastapi/dependencies/utils.py572](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L572-L572) ### Parameter Validation and Handling Parameter processing uses Pydantic's `ModelField` objects created by the `analyze_param()` function. Parameters are classified by location (path, query, header, cookie, body) and validated according to their type annotations and `FieldInfo` constraints. The parameter functions `Path()`, `Query()`, `Header()`, `Cookie()`, `Body()`, and `Form()` provide configuration options for validation, documentation, and processing behavior. See [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) for comprehensive coverage. **Sources:** [fastapi/dependencies/utils.py348](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L348-L348) [fastapi/param\\_functions.py1](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py#L1-L1) ### Response Handling Response processing converts endpoint return values into HTTP responses through the `serialize_response()` function and `jsonable_encoder()`. The system handles Pydantic models, built-in Python types, and custom objects using a registry of type encoders. Response classes like `JSONResponse`, `HTMLResponse`, and `FileResponse` provide control over content types, headers, and status codes. See [Response Handling](fastapi/fastapi/2.4-response-handling.md) for detailed information. **Sources:** [fastapi/routing.py144](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L144-L144) [fastapi/encoders.py102](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py#L102-L102) ### Security Components Security schemes are implemented as special dependency classes that inherit from `SecurityBase`. Classes like `OAuth2`, `HTTPBearer`, and `APIKeyHeader` define authentication mechanisms that integrate with the dependency injection system. Security requirements are automatically added to OpenAPI schemas and processed during dependency resolution. See [Security Components](fastapi/fastapi/2.5-security-components.md) for complete coverage of authentication and authorization. **Sources:** [fastapi/security/oauth2.py308](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py#L308-L308) [fastapi/security/http.py69](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py#L69-L69) ### Settings Management FastAPI integrates with Pydantic Settings for configuration management through environment variables and configuration files. The `BaseSettings` class provides validation and type conversion for application settings. Settings can be used as dependencies, enabling easy testing and configuration management. See [Settings Management](fastapi/fastapi/2.6-settings-management.md) for detailed implementation patterns.",
  "**Sources:** [docs/en/docs/advanced/settings.md55](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L55-L55) ### Error Handling FastAPI provides structured exception handling through custom exception classes that extend Starlette's base exceptions. Key exception types include `HTTPException`, `RequestValidationError`, and `WebSocketRequestValidationError`. Exception handlers can be customized globally or per-route to control error responses and logging. See [Error Handling](fastapi/fastapi/2.7-error-handling.md) for comprehensive error management strategies. **Sources:** [fastapi/exceptions.py9](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L9-L9) ## Key Integration Points ### Starlette Foundation FastAPI builds on Starlette's ASGI foundation, inheriting: - ASGI application protocol implementation - Basic routing and middleware support - Request/Response objects - Exception handling framework - WebSocket support The `FastAPI` class extends `Starlette` while the `APIRouter` class extends `starlette.routing.Router`. ### Pydantic Integration Pydantic provides: - Data validation through `BaseModel` and `ModelField` - Type coercion and serialization - JSON Schema generation for OpenAPI - Field-level validation and constraints FastAPI creates `ModelField` instances for all parameters and uses Pydantic's validation engine throughout the request processing pipeline. **Sources:** [fastapi/applications.py34](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L34-L34) [fastapi/routing.py61-76](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L61-L76) [fastapi/utils.py63-107](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py#L63-L107) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Core Architecture](#core-architecture.md) - [Architectural Overview](#architectural-overview.md) - [Core Framework Components](#core-framework-components.md) - [Request Processing Pipeline](#request-processing-pipeline.md) - [Core Components](#core-components.md) - [FastAPI Application Class](#fastapi-application-class.md) - [APIRouter System](#apirouter-system.md) - [Request Processing Pipeline](#request-processing-pipeline-1.md) - [APIRoute and Request Handling](#apiroute-and-request-handling.md) - [Dependency Injection System](#dependency-injection-system.md) - [Dependant Structure](#dependant-structure.md) - [Dependency Resolution Process](#dependency-resolution-process.md) - [Parameter Validation and Processing](#parameter-validation-and-processing.md) - [Parameter Analysis Flow](#parameter-analysis-flow.md) - [Response Handling and Serialization](#response-handling-and-serialization.md) - [Response Serialization Process](#response-serialization-process.md) - [Security Components](#security-components.md) - [Security Integration](#security-integration.md) - [Exception Handling](#exception-handling.md) - [Key Integration Points](#key-integration-points.md) - [Starlette Foundation](#starlette-foundation.md) - [Pydantic Integration](#pydantic-integration.md) - [Core Architecture](#core-architecture-1.md) - [Architectural Overview](#architectural-overview-1.md) - [Core Components](#core-components-1.md) - [Application Layer](#application-layer.md) - [Request Processing Pipeline](#request-processing-pipeline-2.md) - [Dependency Injection System](#dependency-injection-system-1.md) - [Parameter Validation and Handling](#parameter-validation-and-handling.md) - [Response Handling](#response-handling.md) - [Security Components](#security-components-1.md) - [Settings Management](#settings-management.md) - [Error Handling](#error-handling.md) - [Key Integration Points](#key-integration-points-1.md) - [Starlette Foundation](#starlette-foundation-1.md) - [Pydantic Integration](#pydantic-integration-1.md)",
  "Documentation System | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Documentation System Relevant source files",
  "- [.github/DISCUSSION\\_TEMPLATE/translations.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/DISCUSSION_TEMPLATE/translations.yml) - [docs/en/docs/contributing.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/contributing.md) - [docs/en/mkdocs.insiders.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.insiders.yml) - [docs/en/mkdocs.maybe-insiders.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.maybe-insiders.yml) - [docs/en/mkdocs.no-insiders.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.no-insiders.yml) - [docs/en/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml) - [docs/es/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/mkdocs.yml) - [docs/fr/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/mkdocs.yml) - [docs/it/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/it/mkdocs.yml) - [docs/ja/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/mkdocs.yml) - [docs/ko/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ko/mkdocs.yml) - [docs/language\\_names.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/language_names.yml) - [docs/pt/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/mkdocs.yml) - [docs/ru/docs/tutorial/extra-data-types.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/docs/tutorial/extra-data-types.md) - [docs/ru/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/mkdocs.yml) - [docs/tr/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/tr/mkdocs.yml) - [docs/uk/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/uk/mkdocs.yml) - [docs/zh/mkdocs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/mkdocs.yml) - [requirements-docs.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-docs.txt) - [scripts/docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py) ## Purpose and Scope The Documentation System encompasses the comprehensive infrastructure for building, maintaining, and deploying FastAPI's multi-language documentation website. This system manages the conversion of Markdown source files into a fully-featured documentation site with interactive API references, community pages, and automated translation workflows. For information about CI/CD automation that builds and deploys this documentation, see [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md). For details about translation management and community coordination, see [Translation Management](fastapi/fastapi/7.2-translation-management.md). ## Architecture Overview The documentation system is built on MkDocs Material with a sophisticated multi-language inheritance model, automated content generation, and community data integration. ``` ``` **Sources:** [docs/en/mkdocs.yml1-362](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L1-L362) [scripts/docs.py1-425](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L1-L425) [docs/zh/mkdocs.yml1-2](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/mkdocs.yml#L1-L2) ## MkDocs Configuration System ### Base Configuration Structure The documentation system uses a hierarchical configuration approach where the English configuration serves as the master template. ``` ```",
  "The base English configuration at [docs/en/mkdocs.yml1-5](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L1-L5) inherits from `mkdocs.maybe-insiders.yml`, which conditionally loads insiders features based on environment variables [docs/en/mkdocs.maybe-insiders.yml3](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.maybe-insiders.yml#L3-L3) ### Theme Configuration The Material theme is configured with comprehensive feature flags and styling: | Feature Category | Configuration | Purpose | | ---------------- | ---------------------------------------- | ---------------------------- | | Navigation | `navigation.tabs`, `navigation.instant` | Enhanced navigation UX | | Content | `content.code.copy`, `content.tabs.link` | Interactive code blocks | | Search | `search.highlight`, `search.suggest` | Advanced search capabilities | | Visual | Dark/light mode toggle | User preference support | **Sources:** [docs/en/mkdocs.yml27-46](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L27-L46) [docs/en/mkdocs.yml8-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L8-L26) ### Plugin Ecosystem The documentation system integrates multiple specialized plugins: ``` ``` The `macros` plugin enables dynamic content generation by including YAML data files [docs/en/mkdocs.yml57-68](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L57-L68) while `mkdocstrings` generates API documentation from Python docstrings [docs/en/mkdocs.yml77-98](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L77-L98) **Sources:** [docs/en/mkdocs.yml54-98](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L54-L98) [requirements-docs.txt18](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-docs.txt#L18-L18) ## Multi-Language Support Architecture ### Inheritance Model Each language variant uses a minimal configuration that inherits from the English base: ``` ``` Language directories follow a consistent structure where [docs/zh/mkdocs.yml1](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/mkdocs.yml#L1-L1) contains only `INHERIT: ../en/mkdocs.yml`, inheriting all configuration from the English version. ### Language Management Functions The documentation build system provides language management through `scripts/docs.py`: | Function | Purpose | Key Operations | | -------------------- | ----------------------- | ---------------------------------------------------------- | | `new_lang()` | Create new language | Creates directory, config, index with translation template | | `build_lang()` | Build specific language | Runs MkDocs build, copies to site directory | | `build_all()` | Build all languages | Parallel builds using process pool | | `update_languages()` | Update language list | Updates alternate language links in config | **Sources:** [scripts/docs.py85-104](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L85-L104) [scripts/docs.py108-143](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L108-L143) [scripts/docs.py216-229](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L216-L229) [scripts/docs.py232-237](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L232-L237) ### Language Names and Localization Language names are managed through a centralized configuration: ``` ``` The system maintains language names in [docs/language\\_names.yml1-184](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/language_names.yml#L1-L184) and automatically generates the alternate language switcher configuration [docs/en/mkdocs.yml303-354](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L303-L354)",
  "**Sources:** [scripts/docs.py296-318](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L296-L318) [docs/language\\_names.yml1-184](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/language_names.yml#L1-L184) [scripts/docs.py321-327](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L321-L327) ## Build Process and Script Management ### Core Build Functions The `scripts/docs.py` module provides comprehensive documentation management: ``` ``` ### Build Process Flow The build system supports both development and production workflows: | Mode | Command | Purpose | Output | | ----------- | ----------- | ------------------------------- | ---------------------------- | | Development | `live` | Live reload for single language | Local server on port 8008 | | Preview | `serve` | Static preview of built site | Combined multi-language site | | Production | `build_all` | Build all languages | Complete site in `./site/` | **Sources:** [scripts/docs.py262-288](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L262-L288) [scripts/docs.py240-258](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L240-L258) [scripts/docs.py216-229](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L216-L229) ### Content Processing Pipeline ``` ``` The build process creates temporary build directories [scripts/docs.py125](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L125-L125) before copying to the final site location [scripts/docs.py140](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L140-L140) **Sources:** [scripts/docs.py136-142](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L136-L142) [scripts/docs.py44-45](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L44-L45) ## Content Organization and Structure ### Documentation Navigation Structure The navigation is hierarchically organized in the main configuration: ``` ``` ### Non-Translatable Content Management The system maintains a list of sections that should not be translated: | Section | Reason | Management | | ------------------- | ------------------------ | ---------------------------- | | `reference/` | Auto-generated API docs | Updated frequently from code | | `release-notes.md` | Version-specific content | Rapid updates | | `contributing.md` | Development guidelines | English-centric workflow | | `external-links.md` | Community resources | Centrally maintained | **Sources:** [scripts/docs.py30-39](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L30-L39) [scripts/docs.py349-368](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L349-L368) ### Content Validation System The documentation system includes comprehensive validation: ``` ``` **Sources:** [scripts/docs.py372-376](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L372-L376) [scripts/docs.py198-212](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L198-L212) [scripts/docs.py329-345](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L329-L345) ## Markdown Extensions and Processing ### Extension Configuration The documentation system uses extensive Markdown extensions for enhanced functionality: | Extension Category | Extensions | Purpose | | -------------------- | ------------------------------------------------ | --------------------------------------- | | Content Structure | `tables`, `toc`, `attr_list` | Basic formatting and navigation | | Code Highlighting | `pymdownx.highlight`, `pymdownx.superfences` | Syntax highlighting with line numbers | | Interactive Elements | `pymdownx.blocks.tab`, `pymdownx.blocks.details` | Tabbed content and collapsible sections | | Diagrams | `pymdownx.superfences` with mermaid | Diagram rendering support | ### Advanced Block Types The system supports sophisticated content blocks through PyMdown extensions [docs/en/mkdocs.yml274-289](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L274-L289): ``` ```",
  "**Sources:** [docs/en/mkdocs.yml253-290](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L253-L290) [docs/en/mkdocs.yml268-272](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L268-L272) ## Community Data Integration ### Data Source Management The documentation system integrates multiple community data sources: ``` ``` ### Template Processing The system includes sophisticated template processing for dynamic content generation, particularly for sponsor acknowledgments [scripts/docs.py145-154](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L145-L154) using Jinja2 templates [scripts/docs.py172](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L172-L172) **Sources:** [docs/en/mkdocs.yml56-68](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/mkdocs.yml#L56-L68) [scripts/docs.py157-184](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L157-L184) [requirements-docs.txt18](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-docs.txt#L18-L18) ## Development and Deployment Integration ### Local Development Workflow The documentation system provides streamlined development commands: ``` ``` The development server automatically enables line numbers [scripts/docs.py286](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L286-L286) to facilitate content editing and review. ### Production Build Process For production deployment, the system uses parallel processing for efficiency [scripts/docs.py224-228](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L224-L228): ``` ``` **Sources:** [scripts/docs.py262-288](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L262-L288) [scripts/docs.py216-229](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L216-L229) [scripts/docs.py224-228](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/docs.py#L224-L228) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Documentation System](#documentation-system.md) - [Purpose and Scope](#purpose-and-scope.md) - [Architecture Overview](#architecture-overview.md) - [MkDocs Configuration System](#mkdocs-configuration-system.md) - [Base Configuration Structure](#base-configuration-structure.md) - [Theme Configuration](#theme-configuration.md) - [Plugin Ecosystem](#plugin-ecosystem.md) - [Multi-Language Support Architecture](#multi-language-support-architecture.md) - [Inheritance Model](#inheritance-model.md) - [Language Management Functions](#language-management-functions.md) - [Language Names and Localization](#language-names-and-localization.md) - [Build Process and Script Management](#build-process-and-script-management.md) - [Core Build Functions](#core-build-functions.md) - [Build Process Flow](#build-process-flow.md) - [Content Processing Pipeline](#content-processing-pipeline.md) - [Content Organization and Structure](#content-organization-and-structure.md) - [Documentation Navigation Structure](#documentation-navigation-structure.md) - [Non-Translatable Content Management](#non-translatable-content-management.md) - [Content Validation System](#content-validation-system.md) - [Markdown Extensions and Processing](#markdown-extensions-and-processing.md) - [Extension Configuration](#extension-configuration.md) - [Advanced Block Types](#advanced-block-types.md) - [Community Data Integration](#community-data-integration.md) - [Data Source Management](#data-source-management.md) - [Template Processing](#template-processing.md) - [Development and Deployment Integration](#development-and-deployment-integration.md) - [Local Development Workflow](#local-development-workflow.md) - [Production Build Process](#production-build-process.md)",
  "Community Ecosystem | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Community Ecosystem Relevant source files - [docs/em/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/em/docs/help-fastapi.md) - [docs/en/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md) - [docs/fr/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/docs/help-fastapi.md) - [docs/ja/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/help-fastapi.md) - [docs/pl/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pl/docs/help-fastapi.md) - [docs/pt/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/help-fastapi.md) - [docs/ru/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/docs/help-fastapi.md) - [docs/zh/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/help-fastapi.md) FastAPI maintains a comprehensive community ecosystem that integrates automated data collection, community recognition systems, and multi-channel engagement platforms. This ecosystem tracks contributor activity across GitHub, manages community expertise recognition, and provides multiple pathways for users to get help and contribute to the project.",
  "The community ecosystem encompasses automated data collection scripts that analyze GitHub activity, structured data storage for community metrics, recognition systems for experts and contributors, and engagement channels including documentation, Discord, and social media platforms. For information about the translation automation specifically, see [Translation Management](fastapi/fastapi/7.2-translation-management.md). For details about external resources and sponsorship display, see [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md). For GitHub automation workflows, see [Community Automation](fastapi/fastapi/7.4-community-automation.md). ## Community Engagement Channels FastAPI provides multiple channels for community interaction, help-seeking, and contribution, documented primarily in the help system across multiple languages. ### Help and Support Infrastructure The `docs/en/docs/help-fastapi.md` file and its translations serve as the central hub for community engagement, providing structured pathways for users to get help and contribute to the project. ``` ``` The help documentation provides structured guidance for different types of community participation, from passive support (starring, watching) to active contribution (answering questions, creating pull requests). **Sources:** [docs/en/docs/help-fastapi.md1-257](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md#L1-L257) [docs/zh/docs/help-fastapi.md1-149](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/help-fastapi.md#L1-L149) [docs/fr/docs/help-fastapi.md1-105](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/docs/help-fastapi.md#L1-L105) ### Community Support Workflows The help system establishes clear workflows for community members to provide support to others, with specific guidelines for understanding questions, reproducing problems, and suggesting solutions. ``` ``` This workflow is documented across multiple language versions and emphasizes kindness and understanding in community interactions. **Sources:** [docs/en/docs/help-fastapi.md89-125](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md#L89-L125) [docs/pl/docs/help-fastapi.md89-125](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pl/docs/help-fastapi.md#L89-L125) [docs/ru/docs/help-fastapi.md84-116](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/docs/help-fastapi.md#L84-L116) ## Data Collection System The community ecosystem relies on automated data collection from GitHub's APIs to track community engagement across multiple dimensions. ### Discussion Experts Tracking The system identifies community experts by analyzing GitHub Discussions activity through the GraphQL API. The `scripts/people.py` script implements a comprehensive tracking system that monitors question-answering patterns. ``` ``` The system tracks experts across multiple time windows using counters for different periods: `last_month_commenters`, `three_months_commenters`, `six_months_commenters`, and `one_year_commenters`. **Sources:** [scripts/people.py16-61](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L16-L61) [scripts/people.py170-177](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L170-L177) [scripts/people.py195-255](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L195-L255) ### Contributors and Pull Request Analysis The contributor tracking system analyzes pull request data to identify different types of community contributions, including code contributions, translations, and translation reviews. ``` ``` The system differentiates between regular contributors and translators by checking for the `lang-all` label on pull requests, ensuring proper categorization of translation work. **Sources:** [scripts/contributors.py18-56](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L18-L56) [scripts/contributors.py175-204](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L175-L204) [scripts/contributors.py175-204](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L175-L204) ## Community Data Storage The community data is stored in structured YAML files that serve as the source of truth for community recognition and statistics. ### Data Schema and Structure The community data follows a consistent schema across different contributor types, with each file containing user information and contribution metrics.",
  "| File | Purpose | Key Fields | | ---------------------------------------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------- | | `docs/en/data/people.yml` | Discussion experts and maintainers | `maintainers`, `experts`, `last_month_experts`, `three_months_experts`, `six_months_experts`, `one_year_experts` | | `docs/en/data/contributors.yml` | Code contributors | `login`, `count`, `avatarUrl`, `url` | | `docs/en/data/translators.yml` | Translation contributors | `login`, `count`, `avatarUrl`, `url` | | `docs/en/data/translation_reviewers.yml` | Translation reviewers | `login`, `count`, `avatarUrl`, `url` | | `docs/en/data/github_sponsors.yml` | Financial sponsors | `sponsors` array with tiered structure | **Sources:** [docs/en/data/people.yml1-715](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/people.yml#L1-L715) [docs/en/data/contributors.yml1-561](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/contributors.yml#L1-L561) [docs/en/data/translators.yml1-500](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/translators.yml#L1-L500) [docs/en/data/translation\\_reviewers.yml1-500](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/translation_reviewers.yml#L1-L500) [docs/en/data/github\\_sponsors.yml1-440](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/github_sponsors.yml#L1-L440) ### User Filtering and Skip Lists The system maintains a skip list to exclude automated accounts and specific users from community statistics, ensuring accurate representation of human contributors. ``` ``` The filtering ensures that bot accounts and the repository maintainer are not included in expert rankings, providing fair recognition for community members. **Sources:** [docs/en/data/skip\\_users.yml1-6](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/skip_users.yml#L1-L6) [scripts/people.py258-279](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L258-L279) ## Community Recognition and Display The community data is rendered into a comprehensive recognition page that showcases different types of contributors across multiple categories and time periods. ### FastAPI People Page Structure The `docs/en/docs/fastapi-people.md` file serves as the main community recognition page, using Jinja2 templating to dynamically display community member information. ``` ``` The page displays experts across multiple time windows: last month, 3 months, 6 months, 1 year, and all time, providing both recent and historical recognition. **Sources:** [docs/en/docs/fastapi-people.md75-82](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md#L75-L82) [docs/en/docs/fastapi-people.md175-195](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md#L175-L195) [docs/en/docs/fastapi-people.md199-217](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md#L199-L217) ### Dynamic User Lists and Statistics The community page uses dynamic templating to display user information with avatars, contribution counts, and links to GitHub profiles. ``` ``` Each user entry includes standardized fields: `login`, `count`, `avatarUrl`, and `url`, ensuring consistent display across all community sections. **Sources:** [docs/en/docs/fastapi-people.md89-98](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md#L89-L98) [docs/en/docs/fastapi-people.md185-194](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md#L185-L194) [docs/en/docs/fastapi-people.md207-216](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/fastapi-people.md#L207-L216) ## Data Processing and Update Mechanisms The community ecosystem includes sophisticated data processing mechanisms that handle content updates, change detection, and automated commits. ### Content Update and Change Detection The system implements content comparison and update logic to prevent unnecessary file modifications and commit noise.",
  "``` ``` The system uses consistent YAML formatting with `sort_keys=False`, `width=200`, and `allow_unicode=True` to ensure stable content comparison. **Sources:** [scripts/people.py304-313](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L304-L313) [scripts/contributors.py226-235](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L226-L235) ### Automated Git Operations and Pull Request Creation The scripts include automated Git workflow management for creating pull requests with updated community data. ``` ``` The automated workflow creates descriptive commit messages like \"👥 Update FastAPI People - Contributors and Translators\" and generates random branch names using `secrets.token_hex(4)`. **Sources:** [scripts/contributors.py284-311](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/contributors.py#L284-L311) [scripts/people.py367-394](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/people.py#L367-L394) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Community Ecosystem](#community-ecosystem.md) - [Community Engagement Channels](#community-engagement-channels.md) - [Help and Support Infrastructure](#help-and-support-infrastructure.md) - [Community Support Workflows](#community-support-workflows.md) - [Data Collection System](#data-collection-system.md) - [Discussion Experts Tracking](#discussion-experts-tracking.md) - [Contributors and Pull Request Analysis](#contributors-and-pull-request-analysis.md) - [Community Data Storage](#community-data-storage.md) - [Data Schema and Structure](#data-schema-and-structure.md) - [User Filtering and Skip Lists](#user-filtering-and-skip-lists.md) - [Community Recognition and Display](#community-recognition-and-display.md) - [FastAPI People Page Structure](#fastapi-people-page-structure.md) - [Dynamic User Lists and Statistics](#dynamic-user-lists-and-statistics.md) - [Data Processing and Update Mechanisms](#data-processing-and-update-mechanisms.md) - [Content Update and Change Detection](#content-update-and-change-detection.md) - [Automated Git Operations and Pull Request Creation](#automated-git-operations-and-pull-request-creation.md)",
  "fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # FastAPI Overview Relevant source files",
  "- [README.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md) - [docs/de/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/deployment/cloud.md) - [docs/de/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/index.md) - [docs/en/data/sponsors.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/sponsors.yml) - [docs/en/data/sponsors\\_badge.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/sponsors_badge.yml) - [docs/en/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/cloud.md) - [docs/en/docs/img/sponsors/dribia.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/dribia.png) - [docs/en/docs/img/sponsors/interviewpal.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/interviewpal.png) - [docs/en/docs/img/sponsors/investsuite.svg](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/investsuite.svg) - [docs/en/docs/img/sponsors/mobbai-banner.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/mobbai-banner.png) - [docs/en/docs/img/sponsors/mobbai.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/mobbai.png) - [docs/en/docs/img/sponsors/railway-banner.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/railway-banner.png) - [docs/en/docs/img/sponsors/railway.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/railway.png) - [docs/en/docs/img/sponsors/zuplo-banner.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/zuplo-banner.png) - [docs/en/docs/img/sponsors/zuplo.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/zuplo.png) - [docs/en/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md) - [docs/en/overrides/main.html](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/overrides/main.html) - [docs/es/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/deployment/cloud.md) - [docs/es/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/index.md) - [docs/fr/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/docs/index.md) - [docs/id/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/id/docs/index.md) - [docs/it/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/it/docs/index.md) - [docs/ja/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/index.md) - [docs/ko/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ko/docs/deployment/cloud.md) - [docs/ko/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ko/docs/index.md) - [docs/pl/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pl/docs/index.md) - [docs/pt/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/deployment/cloud.md) - [docs/pt/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/index.md) - [docs/ru/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/docs/index.md) - [docs/tr/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/tr/docs/deployment/cloud.md) - [docs/tr/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/tr/docs/index.md) - [docs/uk/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/uk/docs/index.md) - [docs/vi/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/vi/docs/deployment/cloud.md) - [docs/zh-hant/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh-hant/docs/deployment/cloud.md) - [docs/zh/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/deployment/cloud.md) - [docs/zh/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/index.md)",
  "This document provides a comprehensive overview of FastAPI, a modern, high-performance web framework for building APIs with Python. It covers the framework's core architecture, key features, and fundamental concepts that developers need to understand when working with FastAPI applications. For detailed information about specific FastAPI components and subsystems, see [Core Architecture](fastapi/fastapi/2-core-architecture.md). For deployment and production considerations, see [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md). For testing approaches, see [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md). ## Purpose and Scope FastAPI is a web framework designed for building REST APIs with Python, leveraging standard Python type hints to provide automatic validation, serialization, and interactive documentation generation. The framework prioritizes developer productivity, runtime performance, and production readiness while maintaining standards compliance with OpenAPI and JSON Schema specifications. **Sources:** [README.md30-41](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L30-L41) [docs/en/docs/index.md36-47](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L36-L47) ## Architectural Foundations FastAPI is built on two foundational libraries that provide complementary capabilities: ``` ``` ### Core Dependencies The framework relies on two primary dependencies that handle different aspects of API functionality: | Component | Responsibility | Key Features | | --------- | --------------------------------- | ----------------------------------------------------------------- | | Starlette | Web layer and ASGI handling | Request routing, middleware, WebSocket support, testing utilities | | Pydantic | Data validation and serialization | Type-based validation, automatic parsing, JSON schema generation | **Sources:** [README.md126-129](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L126-L129) [docs/en/docs/index.md124-127](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L124-L127) ## Request Processing Pipeline FastAPI processes incoming requests through a structured pipeline that integrates type validation with HTTP handling: ``` ``` The framework automatically handles parameter extraction, type validation, and response serialization based on Python type annotations declared in handler functions. **Sources:** [README.md387-404](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L387-L404) [docs/en/docs/index.md385-402](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L385-L402) ## Key Framework Features FastAPI provides several integrated capabilities that distinguish it from other Python web frameworks: ### Automatic Documentation Generation ``` ``` The framework automatically generates OpenAPI-compliant documentation from type-annotated Python code, eliminating the need for separate documentation maintenance. **Sources:** [README.md261-273](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L261-L273) [docs/en/docs/index.md259-271](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L259-L271) ### Performance Characteristics FastAPI achieves high performance through several architectural decisions: | Aspect | Implementation | Benefit | | ---------------- | --------------------------------------------- | ---------------------------------- | | ASGI Foundation | Built on Starlette's ASGI implementation | Asynchronous request handling | | Type Validation | Pydantic's optimized C extensions | Fast data parsing and validation | | Minimal Overhead | Direct integration without abstraction layers | Reduced request processing latency | Independent benchmarks position FastAPI among the fastest Python web frameworks, comparable to NodeJS and Go implementations. **Sources:** [README.md449-453](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L449-L453) [docs/en/docs/index.md447-451](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L447-L451) ## Installation and Dependencies FastAPI supports multiple installation configurations to accommodate different use cases: ### Standard Installation The recommended installation includes commonly used dependencies: ``` ``` This installation includes: - `uvicorn` - ASGI server for development and production - `fastapi-cli` - Command-line interface for FastAPI applications - `httpx` - HTTP client for testing - `jinja2` - Template engine support - `python-multipart` - Form parsing capabilities ### Minimal Installation For production environments with specific dependency requirements: ``` ``` This provides only the core FastAPI functionality without optional dependencies.",
  "**Sources:** [README.md131-486](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L131-L486) [docs/en/docs/index.md129-484](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L129-L484) ## Standards Compliance FastAPI maintains full compatibility with established API standards: ``` ``` This standards compliance ensures interoperability with existing API tooling and enables automatic client generation for multiple programming languages. **Sources:** [README.md41-47](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L41-L47) [docs/en/docs/index.md41-47](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L41-L47) ## Development Workflow FastAPI supports rapid development through integrated tooling: | Tool | Purpose | Command | | ------------------------- | ----------------------------------- | -------------------------------- | | FastAPI CLI | Development server with auto-reload | `fastapi dev main.py` | | Interactive Documentation | API testing and exploration | Access `/docs` endpoint | | Type Checking | Static analysis integration | Compatible with `mypy`, `pytest` | | Testing Framework | Built-in test client | Uses `TestClient` from Starlette | The framework's development experience emphasizes fast iteration cycles with immediate feedback through automatic documentation updates and development server reloading. **Sources:** [README.md202-238](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L202-L238) [docs/en/docs/index.md200-236](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L200-L236) ## Community and Ecosystem FastAPI maintains an active community with supporting tools and resources: ### Sponsorship and Support The project receives sponsorship from cloud providers and development tool companies, ensuring continued maintenance and development. Major sponsors include infrastructure providers that offer FastAPI deployment guides and optimized hosting solutions. ### Related Projects - **Typer** - Command-line interface framework using similar design principles - **SQLModel** - Database ORM integration designed for FastAPI compatibility - **Starlette** - Underlying ASGI framework - **Pydantic** - Data validation library **Sources:** [README.md45-68](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L45-L68) [docs/en/data/sponsors.yml1-61](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/sponsors.yml#L1-L61) [docs/en/docs/index.md51-66](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L51-L66) Dismiss Refresh this wiki Enter email to refresh ### On this page - [FastAPI Overview](#fastapi-overview.md) - [Purpose and Scope](#purpose-and-scope.md) - [Architectural Foundations](#architectural-foundations.md) - [Core Dependencies](#core-dependencies.md) - [Request Processing Pipeline](#request-processing-pipeline.md) - [Key Framework Features](#key-framework-features.md) - [Automatic Documentation Generation](#automatic-documentation-generation.md) - [Performance Characteristics](#performance-characteristics.md) - [Installation and Dependencies](#installation-and-dependencies.md) - [Standard Installation](#standard-installation.md) - [Minimal Installation](#minimal-installation.md) - [Standards Compliance](#standards-compliance.md) - [Development Workflow](#development-workflow.md) - [Community and Ecosystem](#community-and-ecosystem.md) - [Sponsorship and Support](#sponsorship-and-support.md) - [Related Projects](#related-projects.md)",
  "Security Components | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Security Components Relevant source files",
  "- [docs/en/docs/tutorial/background-tasks.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md) - [docs/en/docs/tutorial/extra-data-types.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/extra-data-types.md) - [docs/en/docs/tutorial/handling-errors.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md) - [docs/en/docs/tutorial/security/first-steps.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/first-steps.md) - [docs/en/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/oauth2-jwt.md) - [docs/en/docs/tutorial/security/simple-oauth2.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/simple-oauth2.md) - [docs/en/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md) - [docs/ja/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/tutorial/security/oauth2-jwt.md) - [docs/pt/docs/tutorial/cookie-param-models.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/tutorial/cookie-param-models.md) - [docs/zh/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/tutorial/sql-databases.md) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) This document covers FastAPI's security infrastructure, including authentication schemes (OAuth2, HTTP Basic/Bearer, API Key, OpenID Connect), security dependencies, and permission scopes. For broader API documentation concepts, see [API Documentation System](fastapi/fastapi/3-api-documentation-system.md). For error handling in security contexts, see [Error Handling](fastapi/fastapi/2.7-error-handling.md). ## Overview",
  "FastAPI provides a comprehensive security system with multiple authentication schemes integrated into the dependency injection framework. The security components handle authentication, authorization, token validation, and scope-based permissions through a collection of base classes, concrete implementations, and utilities that automatically integrate with OpenAPI documentation generation. ## Security Component Architecture ``` ``` Sources: [fastapi/security/base.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/base.py) [fastapi/security/oauth2.py308-441](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py#L308-L441) [fastapi/security/http.py69-340](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py#L69-L340) [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) [fastapi/dependencies/models.py8-12](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L8-L12) [fastapi/openapi/utils.py78-92](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L78-L92) ## Base Security Classes ### SecurityBase The `SecurityBase` class serves as the foundation for all security schemes in FastAPI. It provides the basic interface that all authentication mechanisms inherit from and ensures consistent integration with the dependency injection system. Sources: [fastapi/security/base.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/base.py) ### SecurityRequirement The `SecurityRequirement` dataclass represents security requirements for operations, containing a reference to the security scheme and any required scopes: | Field | Type | Description | | ----------------- | ------------------------- | ---------------------------- | | `security_scheme` | `SecurityBase` | The security scheme instance | | `scopes` | `Optional[Sequence[str]]` | Required permission scopes | Sources: [fastapi/dependencies/models.py8-12](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L8-L12) ## Authentication Schemes ### OAuth2 Components #### OAuth2 The `OAuth2` class implements OAuth2 authentication flows. It accepts flow configurations and integrates with OpenAPI documentation generation. ``` ``` Key initialization parameters: - `flows` - OAuth2 flow definitions (`OAuthFlowsModel`) - `scheme_name` - Security scheme name for OpenAPI - `description` - Security scheme description - `auto_error` - Whether to automatically raise errors for missing auth Sources: [fastapi/security/oauth2.py308-441](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py#L308-L441) #### OAuth2PasswordRequestForm The `OAuth2PasswordRequestForm` class handles login form data according to OAuth2 password flow specifications: | Field | Type | Required | Description | | --------------- | ----- | -------- | ---------------------- | | `username` | `str` | Yes | User identifier | | `password` | `str` | Yes | User password | | `scope` | `str` | No | Space-separated scopes | | `grant_type` | `str` | No | OAuth2 grant type | | `client_id` | `str` | No | OAuth2 client ID | | `client_secret` | `str` | No | OAuth2 client secret | The form data is automatically parsed from request form fields and made available as a dependency. Sources: [fastapi/security/oauth2.py16-149](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py#L16-L149) ### HTTP Authentication Components #### HTTPBasic The `HTTPBasic` class implements HTTP Basic authentication, extracting and validating Base64-encoded credentials from the `Authorization` header. ``` ``` Returns `HTTPBasicCredentials` containing `username` and `password` fields. Sources: [fastapi/security/http.py97-217](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py#L97-L217) #### HTTPBearer The `HTTPBearer` class implements HTTP Bearer token authentication, extracting tokens from the `Authorization` header. Returns `HTTPAuthorizationCredentials` containing: - `scheme` - The authorization scheme (e.g., \"Bearer\") - `credentials` - The token value",
  "Sources: [fastapi/security/http.py220-340](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py#L220-L340) ### API Key Authentication FastAPI provides three API key authentication classes for different token locations: | Class | Token Location | Usage | | -------------- | --------------- | ----------------------- | | `APIKeyQuery` | Query parameter | `?api_key=token` | | `APIKeyHeader` | HTTP header | `X-API-Key: token` | | `APIKeyCookie` | HTTP cookie | `Cookie: api_key=token` | All API key classes inherit from `APIKeyBase` and return the extracted key value as a string. Sources: [fastapi/security/api\\_key.py23-237](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py#L23-L237) ### OpenID Connect The `OpenIdConnect` class implements OpenID Connect authentication with a configurable OpenID Connect URL. Key parameter: - `openIdConnectUrl` - The OpenID Connect discovery endpoint URL Sources: [fastapi/security/open\\_id\\_connect\\_url.py11-77](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py#L11-L77) ## Security Dependency Integration ### Dependency Resolution Flow ``` ``` The dependency system processes security components through several key functions: 1. **`get_sub_dependant()`** - Creates `SecurityRequirement` objects from `params.Security` annotations 2. **`solve_dependencies()`** - Resolves security dependencies and populates `SecurityScopes` 3. **Security scheme `__call__`** - Executes authentication logic during request processing Sources: [fastapi/dependencies/utils.py142-171](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L142-L171) [fastapi/routing.py292-298](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L292-L298) ### SecurityScopes Integration The `SecurityScopes` class aggregates all security scopes required by a request's dependency tree. It is automatically injected when security dependencies are present: ``` ``` Key attributes: - `scopes` - List of all required scope strings - `scope_str` - Space-separated scope string for WWW-Authenticate headers Sources: [fastapi/security/oauth2.py57](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py#L57-L57) [fastapi/dependencies/utils.py685-687](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L685-L687) ## OpenAPI Security Documentation ### Security Schema Generation FastAPI automatically generates OpenAPI security schemas through the `get_openapi_security_definitions()` function: ``` ``` The function processes security requirements to generate: - **Security Definitions**: OpenAPI security scheme objects - **Operation Security**: Per-operation security requirements with scopes Sources: [fastapi/openapi/utils.py78-92](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L78-L92) ### Security Schema Integration Security schemes are integrated into the OpenAPI specification through several key areas: | OpenAPI Section | Content | Source | | ---------------------------------- | ----------------------------------- | ---------------------------------- | | `components.securitySchemes` | Security scheme definitions | Security scheme `model` attributes | | `paths.{path}.{method}.security` | Per-operation security requirements | `SecurityRequirement.scopes` | | `paths.{path}.{method}.parameters` | Security parameters (API keys) | Parameter extraction logic | The integration ensures that interactive documentation (Swagger UI, ReDoc) displays proper authentication interfaces and security requirements. Sources: [fastapi/openapi/utils.py282-288](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L282-L288) [fastapi/openapi/utils.py534-537](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L534-L537) ## Token Validation Pipeline ``` ``` The token validation pipeline processes authentication through multiple stages:",
  "1. **Token Extraction**: `OAuth2PasswordBearer` extracts Bearer token from Authorization header 2. **Token Validation**: Decode and verify JWT signature and expiration 3. **Scope Extraction**: Parse scopes from token payload 4. **User Resolution**: Look up user details from token subject 5. **Scope Authorization**: Validate token scopes against required scopes via `SecurityScopes` 6. **User Status**: Verify user account is active and permitted Sources: [docs/en/docs/tutorial/security/oauth2-jwt.md158-166](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/oauth2-jwt.md#L158-L166) [docs/en/docs/advanced/security/oauth2-scopes.md155-192](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/security/oauth2-scopes.md#L155-L192) ## Integration with Dependency Injection Security components integrate seamlessly with FastAPI's dependency injection system through several mechanisms: | Component | Integration Method | Purpose | | --------------------------- | -------------------- | -------------------------------- | | `OAuth2PasswordBearer` | `Depends()` | Token extraction and validation | | `OAuth2PasswordRequestForm` | `Depends()` | Login form parsing | | `Security()` | Dependency decorator | Scope-aware authorization | | `SecurityScopes` | Dependency parameter | Scope aggregation and validation | ``` ``` The dependency system automatically: - Injects `SecurityScopes` with aggregated scope requirements - Resolves `OAuth2PasswordBearer` to extract and return tokens - Validates dependency chains for proper security configuration - Documents security requirements in OpenAPI schema Sources: [docs/en/docs/advanced/security/oauth2-scopes.md194-234](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/security/oauth2-scopes.md#L194-L234) [fastapi/\\_\\_init\\_\\_.py20](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py#L20-L20) ## OpenAPI Security Documentation FastAPI automatically generates OpenAPI security documentation from security components: ``` ``` The security documentation includes: - OAuth2 flow definitions and token URLs - Available scopes with descriptions - Security requirements for each endpoint - Interactive authentication forms in documentation UI Sources: [docs/en/docs/tutorial/security/first-steps.md177-185](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/first-steps.md#L177-L185) [docs/en/docs/advanced/security/oauth2-scopes.md76-83](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/security/oauth2-scopes.md#L76-L83) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Security Components](#security-components.md) - [Overview](#overview.md) - [Security Component Architecture](#security-component-architecture.md) - [Base Security Classes](#base-security-classes.md) - [SecurityBase](#securitybase.md) - [SecurityRequirement](#securityrequirement.md) - [Authentication Schemes](#authentication-schemes.md) - [OAuth2 Components](#oauth2-components.md) - [OAuth2](#oauth2.md) - [OAuth2PasswordRequestForm](#oauth2passwordrequestform.md) - [HTTP Authentication Components](#http-authentication-components.md) - [HTTPBasic](#httpbasic.md) - [HTTPBearer](#httpbearer.md) - [API Key Authentication](#api-key-authentication.md) - [OpenID Connect](#openid-connect.md) - [Security Dependency Integration](#security-dependency-integration.md) - [Dependency Resolution Flow](#dependency-resolution-flow.md) - [SecurityScopes Integration](#securityscopes-integration.md) - [OpenAPI Security Documentation](#openapi-security-documentation.md) - [Security Schema Generation](#security-schema-generation.md) - [Security Schema Integration](#security-schema-integration.md) - [Token Validation Pipeline](#token-validation-pipeline.md) - [Integration with Dependency Injection](#integration-with-dependency-injection.md) - [OpenAPI Security Documentation](#openapi-security-documentation-1.md)",
  "CI/CD Pipeline | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # CI/CD Pipeline Relevant source files",
  "- [.github/workflows/build-docs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/build-docs.yml) - [.github/workflows/contributors.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/contributors.yml) - [.github/workflows/deploy-docs.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/deploy-docs.yml) - [.github/workflows/issue-manager.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/issue-manager.yml) - [.github/workflows/label-approved.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/label-approved.yml) - [.github/workflows/latest-changes.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/latest-changes.yml) - [.github/workflows/notify-translations.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/notify-translations.yml) - [.github/workflows/people.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/people.yml) - [.github/workflows/publish.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/publish.yml) - [.github/workflows/smokeshow.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/smokeshow.yml) - [.github/workflows/sponsors.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/sponsors.yml) - [.github/workflows/test-redistribute.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test-redistribute.yml) - [.github/workflows/test.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test.yml) - [.github/workflows/topic-repos.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/topic-repos.yml) - [.gitignore](https://github.com/fastapi/fastapi/blob/3e2dbf91/.gitignore) - [scripts/sponsors.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/sponsors.py) This document covers the comprehensive Continuous Integration/Continuous Deployment (CI/CD) infrastructure for the FastAPI repository, including automated testing, documentation building, package publishing, and community management workflows. The CI/CD system is implemented entirely using GitHub Actions and consists of multiple interconnected workflows that handle code quality assurance, documentation generation, release automation, and community engagement. For information about the development workflow and local tooling, see [Development Workflow](fastapi/fastapi/6.3-development-workflow.md). For details about the documentation build system itself, see [Documentation System](fastapi/fastapi/6.1-documentation-system.md). ## Pipeline Architecture Overview The FastAPI CI/CD pipeline consists of four main categories of automation: core development workflows, documentation pipelines, release management, and community automation. ``` ``` Sources: [.github/workflows/test.yml1-156](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test.yml#L1-L156) [.github/workflows/build-docs.yml1-138](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/build-docs.yml#L1-L138) [.github/workflows/deploy-docs.yml1-78](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/deploy-docs.yml#L1-L78) [.github/workflows/publish.yml1-43](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/publish.yml#L1-L43) ## Core Testing and Quality Assurance The testing pipeline ensures code quality through comprehensive linting, multi-version testing, and coverage reporting. ### Test Workflow The `test.yml` workflow implements a multi-dimensional test matrix covering Python versions 3.8-3.13 and both Pydantic v1 and v2 compatibility. ``` ``` The test workflow uses specific environment variables and configurations: - `UV_SYSTEM_PYTHON: 1` for system Python usage - `COVERAGE_FILE` with unique naming per test matrix combination - Conditional Pydantic version installation based on matrix parameters",
  "Sources: [.github/workflows/test.yml46-101](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test.yml#L46-L101) [.github/workflows/test.yml102-140](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test.yml#L102-L140) ### Coverage Reporting The coverage system integrates with Smokeshow for visual coverage reporting: ``` ``` Sources: [.github/workflows/test.yml89-139](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test.yml#L89-L139) [.github/workflows/smokeshow.yml14-61](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/smokeshow.yml#L14-L61) ## Documentation Build and Deployment Pipeline The documentation system implements a sophisticated multi-language build and deployment process. ### Documentation Build Workflow The `build-docs.yml` workflow handles path-based change detection and multi-language documentation building: ``` ``` The workflow uses conditional MkDocs Material Insiders installation based on secret availability and supports caching for performance optimization. Sources: [.github/workflows/build-docs.yml14-138](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/build-docs.yml#L14-L138) [.github/workflows/build-docs.yml71-76](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/build-docs.yml#L71-L76) [.github/workflows/build-docs.yml112-124](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/build-docs.yml#L112-L124) ### Documentation Deployment The `deploy-docs.yml` workflow handles automatic deployment to Cloudflare Pages: ``` ``` Sources: [.github/workflows/deploy-docs.yml19-78](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/deploy-docs.yml#L19-L78) [.github/workflows/deploy-docs.yml58-69](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/deploy-docs.yml#L58-L69) ## Release and Publishing Pipeline The publishing system handles automated package distribution to PyPI for both `fastapi` and `fastapi-slim` variants. ### Package Publishing ``` ``` The publishing workflow uses trusted publishing with OpenID Connect tokens and supports building multiple package variants through the `TIANGOLO_BUILD_PACKAGE` environment variable. Sources: [.github/workflows/publish.yml8-43](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/publish.yml#L8-L43) [.github/workflows/publish.yml34-38](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/publish.yml#L34-L38) ### Distribution Testing The `test-redistribute.yml` workflow validates package distributions: | Test Phase | Description | Commands | | ------------------------- | -------------------------- | ---------------------------------------- | | Source Distribution Build | Build sdist package | `python -m build --sdist` | | Source Distribution Test | Test from extracted source | `bash scripts/test.sh` in dist directory | | Wheel Build | Build wheel from sdist | `pip wheel --no-deps fastapi*.tar.gz` | Sources: [.github/workflows/test-redistribute.yml13-58](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test-redistribute.yml#L13-L58) ## Community Automation Workflows The FastAPI repository includes extensive automation for community management, contributor recognition, and content updates. ### Contributor and Sponsor Management ``` ``` Sources: [.github/workflows/people.yml3-55](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/people.yml#L3-L55) [.github/workflows/contributors.yml3-54](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/contributors.yml#L3-L54) [.github/workflows/sponsors.yml3-53](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/sponsors.yml#L3-L53) [.github/workflows/topic-repos.yml3-41](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/topic-repos.yml#L3-L41) ### Sponsor Data Processing The `sponsors.py` script demonstrates the sophisticated data processing pipeline: ``` ```",
  "Sources: [scripts/sponsors.py17-45](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/sponsors.py#L17-L45) [scripts/sponsors.py119-144](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/sponsors.py#L119-L144) [scripts/sponsors.py192-217](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/sponsors.py#L192-L217) ### Issue and PR Management The repository includes automated issue and PR management workflows: | Workflow | Purpose | Trigger | Key Features | | ------------------------- | ------------------------- | -------------------------- | ----------------------------------------- | | `issue-manager.yml` | Auto-close stale issues | Schedule, labels, comments | Configurable delay, custom messages | | `label-approved.yml` | Label approved PRs | Daily schedule | Approval tracking, awaiting-review label | | `latest-changes.yml` | Update changelog | PR merge, manual | Automatic release notes generation | | `notify-translations.yml` | Translation notifications | PR labels, close | Discussion creation for translation teams | Sources: [.github/workflows/issue-manager.yml22-48](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/issue-manager.yml#L22-L48) [.github/workflows/label-approved.yml14-50](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/label-approved.yml#L14-L50) [.github/workflows/latest-changes.yml19-45](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/latest-changes.yml#L19-L45) [.github/workflows/notify-translations.yml21-60](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/notify-translations.yml#L21-L60) ## Pipeline Configuration and Dependencies The CI/CD system relies on standardized tooling and configuration across all workflows: ### Common Dependencies | Tool | Version | Purpose | Configuration | | -------------- | -------- | ------------------- | ------------------------- | | `uv` | 0.4.15 | Package management | `astral-sh/setup-uv@v6` | | Python | 3.8-3.13 | Runtime environment | `actions/setup-python@v5` | | GitHub Actions | Latest | Workflow execution | Various action versions | ### Environment Variables and Secrets ``` ``` Sources: [.github/workflows/test.yml15-16](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test.yml#L15-L16) [.github/workflows/build-docs.yml11-12](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/build-docs.yml#L11-L12) [.github/workflows/publish.yml34-35](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/publish.yml#L34-L35) ### Branch Protection and Status Checks The pipeline implements comprehensive status checking through \"all-green\" jobs that aggregate multiple workflow results: - `docs-all-green` in `build-docs.yml` - Aggregates documentation build status - `check` in `test.yml` - Aggregates test and coverage results - `test-redistribute-alls-green` in `test-redistribute.yml` - Aggregates distribution test results These jobs use the `re-actors/alls-green@release/v1` action to provide unified status reporting for branch protection rules. Sources: [.github/workflows/build-docs.yml127-137](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/build-docs.yml#L127-L137) [.github/workflows/test.yml142-155](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test.yml#L142-L155) [.github/workflows/test-redistribute.yml60-69](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/test-redistribute.yml#L60-L69) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [CI/CD Pipeline](#cicd-pipeline.md) - [Pipeline Architecture Overview](#pipeline-architecture-overview.md) - [Core Testing and Quality Assurance](#core-testing-and-quality-assurance.md) - [Test Workflow](#test-workflow.md) - [Coverage Reporting](#coverage-reporting.md) - [Documentation Build and Deployment Pipeline](#documentation-build-and-deployment-pipeline.md) - [Documentation Build Workflow](#documentation-build-workflow.md) - [Documentation Deployment](#documentation-deployment.md) - [Release and Publishing Pipeline](#release-and-publishing-pipeline.md) - [Package Publishing](#package-publishing.md) - [Distribution Testing](#distribution-testing.md) - [Community Automation Workflows](#community-automation-workflows.md) - [Contributor and Sponsor Management](#contributor-and-sponsor-management.md) - [Sponsor Data Processing](#sponsor-data-processing.md) - [Issue and PR Management](#issue-and-pr-management.md) - [Pipeline Configuration and Dependencies](#pipeline-configuration-and-dependencies.md) - [Common Dependencies](#common-dependencies.md) - [Environment Variables and Secrets](#environment-variables-and-secrets.md) - [Branch Protection and Status Checks](#branch-protection-and-status-checks.md)",
  "Parameter Validation and Handling | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Parameter Validation and Handling Relevant source files",
  "- [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/alternatives.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/alternatives.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs/en/docs/tutorial/body.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/body.md) - [docs/en/docs/tutorial/dependencies/classes-as-dependencies.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md) - [docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md) - [docs/en/docs/tutorial/dependencies/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/index.md) - [docs/en/docs/tutorial/dependencies/sub-dependencies.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/sub-dependencies.md) - [docs/en/docs/tutorial/path-params-numeric-validations.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/path-params-numeric-validations.md) - [docs/en/docs/tutorial/query-params-str-validations.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md) - [docs/en/docs/tutorial/response-status-code.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/response-status-code.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [fastapi/openapi/constants.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/constants.py) - [tests/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/__init__.py) - [tests/main.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/main.py) - [tests/test\\_application.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_application.py) - [tests/test\\_get\\_request\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_get_request_body.py) - [tests/test\\_path.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_path.py) - [tests/test\\_query.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_query.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py)",
  "This document covers FastAPI's comprehensive parameter validation and handling system, which automatically validates, converts, and documents request parameters including query parameters, path parameters, request bodies, form data, files, headers, and cookies. For information about dependency injection and parameter sharing, see [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md). For details about response handling and serialization, see [Response Handling](fastapi/fastapi/2.4-response-handling.md). ## Core Parameter Types FastAPI provides specialized functions for declaring and validating different types of request parameters. Each parameter type has its own dedicated function that handles validation, type conversion, and OpenAPI documentation generation. ### Parameter Declaration Functions The main parameter declaration functions are exported from the root FastAPI module: - `Query()` - Query string parameters - `Path()` - URL path parameters - `Body()` - Request body content - `Form()` - HTML form data - `File()` - File uploads - `Header()` - HTTP headers - `Cookie()` - HTTP cookies Sources: [fastapi/\\_\\_init\\_\\_.py12-20](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py#L12-L20) ### Parameter Validation Flow ``` ``` Sources: [docs/en/docs/tutorial/query-params-str-validations.md1-493](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L1-L493) [docs/en/docs/tutorial/path-params-numeric-validations.md1-165](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/path-params-numeric-validations.md#L1-L165) ## Query Parameter Validation Query parameters are declared using the `Query()` function with the `Annotated` type hint syntax. The system supports string validation, numeric constraints, and custom validation functions. ### String Validation Constraints Query parameters support various string validation rules: - `min_length` - Minimum string length - `max_length` - Maximum string length - `pattern` - Regular expression pattern matching - `alias` - Alternative parameter name for the URL ``` ``` Sources: [docs/en/docs/tutorial/query-params-str-validations.md88-97](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L88-L97) [docs/en/docs/tutorial/query-params-str-validations.md188-222](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L188-L222) ### List and Multiple Value Handling The `Query()` function supports receiving multiple values for the same parameter name, returning them as a Python `list`: ``` ``` Sources: [docs/en/docs/tutorial/query-params-str-validations.md273-304](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L273-L304) ## Path Parameter Validation Path parameters use the `Path()` function and support the same validation features as query parameters, plus numeric constraints for integer and float values. ### Numeric Validation Constraints Path parameters support numeric validation rules: - `gt` - Greater than - `ge` - Greater than or equal - `lt` - Less than - `le` - Less than or equal ``` ``` Sources: [docs/en/docs/tutorial/path-params-numeric-validations.md104-132](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/path-params-numeric-validations.md#L104-L132) ## Request Body Validation Request body validation primarily uses Pydantic models, which provide comprehensive validation, type conversion, and documentation generation. ### Pydantic Model Integration FastAPI automatically converts JSON request bodies to Pydantic model instances: ``` ``` The validation system automatically: - Validates data types - Converts compatible types - Generates clear error messages - Creates OpenAPI schema documentation Sources: [docs/en/docs/tutorial/body.md21-78](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/body.md#L21-L78) ### Validation Error Handling ``` ``` Sources: [docs/en/docs/tutorial/handling-errors.md120-173](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L120-L173) ## Custom Validation The system supports custom validation through Pydantic's validator functions, enabling complex business logic validation beyond basic type and constraint checking. ### AfterValidator Integration Custom validators can be applied using Pydantic's `AfterValidator`: ``` ```",
  "Sources: [docs/en/docs/tutorial/query-params-str-validations.md409-440](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L409-L440) ## Parameter Function Architecture ``` ``` Sources: [docs/en/docs/tutorial/path-params-numeric-validations.md144-164](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/path-params-numeric-validations.md#L144-L164) ## Type Conversion System FastAPI automatically handles type conversion between HTTP string values and Python types, supporting complex data types beyond basic primitives. ### Supported Data Types The system supports conversion for: - Basic types: `int`, `float`, `str`, `bool` - Date/time types: `datetime`, `date`, `time`, `timedelta` - Complex types: `UUID`, `bytes`, `Decimal` - Collections: `list`, `set`, `frozenset` Sources: [docs/en/docs/tutorial/extra-data-types.md20-52](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/extra-data-types.md#L20-L52) ## OpenAPI Integration All parameter validation rules are automatically reflected in the generated OpenAPI schema, providing accurate API documentation that matches the actual validation behavior. ### Schema Generation Flow ``` ``` Sources: [docs/en/docs/tutorial/query-params-str-validations.md104-109](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L104-L109) [docs/en/docs/tutorial/path-params-numeric-validations.md21-33](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/path-params-numeric-validations.md#L21-L33) ## Error Response Format Validation failures result in standardized HTTP 422 responses with detailed error information including field locations, error messages, and error types. ### RequestValidationError Structure The error response contains: - `detail` - Array of validation errors - `loc` - Location of the error (path, query, body, etc.) - `msg` - Human-readable error message - `type` - Error type identifier Sources: [docs/en/docs/tutorial/handling-errors.md122-156](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L122-L156) ## Advanced Configuration ### Parameter Exclusion and Documentation Parameters can be excluded from OpenAPI documentation while maintaining validation: ``` ``` Sources: [docs/en/docs/tutorial/query-params-str-validations.md403-407](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L403-L407) [docs/en/docs/tutorial/query-params-str-validations.md389-401](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L389-L401) ### Metadata and Documentation Enhancement Parameters support rich metadata for enhanced documentation: - `title` - Parameter title in documentation - `description` - Detailed parameter description - `example` - Example value for documentation Sources: [docs/en/docs/tutorial/query-params-str-validations.md347-367](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L347-L367) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [Parameter Validation and Handling](#parameter-validation-and-handling.md) - [Core Parameter Types](#core-parameter-types.md) - [Parameter Declaration Functions](#parameter-declaration-functions.md) - [Parameter Validation Flow](#parameter-validation-flow.md) - [Query Parameter Validation](#query-parameter-validation.md) - [String Validation Constraints](#string-validation-constraints.md) - [List and Multiple Value Handling](#list-and-multiple-value-handling.md) - [Path Parameter Validation](#path-parameter-validation.md) - [Numeric Validation Constraints](#numeric-validation-constraints.md) - [Request Body Validation](#request-body-validation.md) - [Pydantic Model Integration](#pydantic-model-integration.md) - [Validation Error Handling](#validation-error-handling.md) - [Custom Validation](#custom-validation.md) - [AfterValidator Integration](#aftervalidator-integration.md) - [Parameter Function Architecture](#parameter-function-architecture.md) - [Type Conversion System](#type-conversion-system.md) - [Supported Data Types](#supported-data-types.md) - [OpenAPI Integration](#openapi-integration.md) - [Schema Generation Flow](#schema-generation-flow.md) - [Error Response Format](#error-response-format.md) - [RequestValidationError Structure](#requestvalidationerror-structure.md) - [Advanced Configuration](#advanced-configuration.md) - [Parameter Exclusion and Documentation](#parameter-exclusion-and-documentation.md) - [Metadata and Documentation Enhancement](#metadata-and-documentation-enhancement.md)",
  "Database Integration | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Database Integration Relevant source files",
  "- [docs/en/docs/tutorial/background-tasks.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md) - [docs/en/docs/tutorial/extra-data-types.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/extra-data-types.md) - [docs/en/docs/tutorial/handling-errors.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md) - [docs/en/docs/tutorial/security/first-steps.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/first-steps.md) - [docs/en/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/oauth2-jwt.md) - [docs/en/docs/tutorial/security/simple-oauth2.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/simple-oauth2.md) - [docs/en/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md) - [docs/ja/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/tutorial/security/oauth2-jwt.md) - [docs/pt/docs/tutorial/cookie-param-models.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/tutorial/cookie-param-models.md) - [docs/zh/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/tutorial/sql-databases.md) This document covers FastAPI's database integration capabilities, focusing primarily on SQLModel as the recommended approach for SQL database integration. It includes session management, model patterns, CRUD operations, and security considerations for database-backed applications. For background task integration with databases, see [Background Tasks](fastapi/fastapi/4.3-background-tasks.md). For general error handling patterns including database errors, see [Error Handling](fastapi/fastapi/2.7-error-handling.md). ## Overview FastAPI provides flexible database integration through SQLModel, which combines SQLAlchemy's database capabilities with Pydantic's validation features. The integration supports both simple single-model approaches and sophisticated multi-model patterns for production applications. ## Database Integration Architecture ``` ``` **Database Integration Flow in FastAPI** This architecture shows how FastAPI integrates with databases through SQLModel, which serves as an abstraction layer over SQLAlchemy while providing Pydantic validation capabilities. Sources: [docs/en/docs/tutorial/sql-databases.md1-358](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L1-L358) ## SQLModel Foundation SQLModel serves as the primary database integration tool, combining SQLAlchemy's ORM capabilities with Pydantic's data validation. The framework distinguishes between table models and data models. ### Model Types ``` ``` **SQLModel Model Hierarchy** Table models represent actual database tables with `table=True`, while data models handle API serialization and validation without direct database mapping. Sources: [docs/en/docs/tutorial/sql-databases.md182-187](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L182-L187) ## Engine and Session Management ### Engine Configuration The database engine manages connections to the database. FastAPI applications typically create a single engine instance shared across the application. ``` ``` **Engine and Session Creation Flow** The engine configuration includes thread safety settings for SQLite and connection pooling for production databases. Sources: [docs/en/docs/tutorial/sql-databases.md74-84](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L74-L84) ### Session Dependency Pattern FastAPI uses dependency injection to provide database sessions to path operations: ``` ``` **Session Dependency Lifecycle** Each request receives its own session instance through the dependency injection system, ensuring proper transaction isolation. Sources: [docs/en/docs/tutorial/sql-databases.md92-100](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L92-L100) ## Model Patterns ### Single Model Approach The simplest pattern uses one model class for both database representation and API serialization: - Direct model usage in path operations - Simple CRUD operations - Minimal security separation",
  "Sources: [docs/en/docs/tutorial/sql-databases.md48-167](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L48-L167) ### Multiple Model Approach Production applications typically use separate models for different purposes: ``` ``` **Multi-Model Pattern Structure** This pattern provides security by controlling which fields are exposed in different contexts while avoiding code duplication through inheritance. Sources: [docs/en/docs/tutorial/sql-databases.md180-283](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L180-L283) ## CRUD Operations ### Create Operations Create operations receive data models and convert them to table models: ``` ``` **Create Operation Flow** The create flow demonstrates the conversion from input data model to table model and back to response data model. Sources: [docs/en/docs/tutorial/sql-databases.md281-291](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L281-L291) ### Read Operations Read operations use SQLModel's `select()` function with session execution: - List operations with pagination support - Single item retrieval by ID - Automatic conversion to response models Sources: [docs/en/docs/tutorial/sql-databases.md130-140](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L130-L140) [docs/en/docs/tutorial/sql-databases.md303-316](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L303-L316) ### Update Operations Update operations use partial data models with `exclude_unset=True`: ``` ``` **Update Operation Pattern** The update pattern ensures only explicitly provided fields are modified, avoiding accidental overwrites of unspecified fields. Sources: [docs/en/docs/tutorial/sql-databases.md315-326](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L315-L326) ### Delete Operations Delete operations retrieve the entity, verify existence, and remove it from the session: Sources: [docs/en/docs/tutorial/sql-databases.md325-334](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L325-L334) ## Security Considerations ### Field Exposure Control The multiple model pattern provides security by controlling field visibility: - `secret_name` fields excluded from public responses - `id` fields prevented from client input during creation - Response models ensure consistent data contracts Sources: [docs/en/docs/tutorial/sql-databases.md168-180](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L168-L180) ### Database Initialization Table creation typically occurs during application startup rather than on-demand: ``` ``` **Database Initialization Patterns** Development uses automatic table creation while production relies on migration scripts for controlled schema changes. Sources: [docs/en/docs/tutorial/sql-databases.md102-116](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L102-L116) ## Error Handling Integration Database operations integrate with FastAPI's error handling through `HTTPException`: - 404 errors for missing entities - Validation errors for invalid data - Database constraint violations For comprehensive error handling patterns, see [Error Handling](fastapi/fastapi/2.7-error-handling.md). Sources: [docs/en/docs/tutorial/handling-errors.md22-43](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L22-L43) ## Production Considerations ### Database Selection SQLModel supports multiple database backends through SQLAlchemy: - SQLite for development and simple deployments - PostgreSQL for production applications - MySQL, Oracle, SQL Server for enterprise environments Sources: [docs/en/docs/tutorial/sql-databases.md15-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L15-L26) ### Migration Management Production deployments require proper migration handling: - Alembic integration for schema changes - Version control for database schemas - Automated deployment pipelines Sources: [docs/en/docs/tutorial/sql-databases.md110-116](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L110-L116) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [Database Integration](#database-integration.md) - [Overview](#overview.md) - [Database Integration Architecture](#database-integration-architecture.md) - [SQLModel Foundation](#sqlmodel-foundation.md) - [Model Types](#model-types.md) - [Engine and Session Management](#engine-and-session-management.md) - [Engine Configuration](#engine-configuration.md) - [Session Dependency Pattern](#session-dependency-pattern.md) - [Model Patterns](#model-patterns.md) - [Single Model Approach](#single-model-approach.md) - [Multiple Model Approach](#multiple-model-approach.md) - [CRUD Operations](#crud-operations.md) - [Create Operations](#create-operations.md) - [Read Operations](#read-operations.md) - [Update Operations](#update-operations.md) - [Delete Operations](#delete-operations.md) - [Security Considerations](#security-considerations.md) - [Field Exposure Control](#field-exposure-control.md) - [Database Initialization](#database-initialization.md) - [Error Handling Integration](#error-handling-integration.md) - [Production Considerations](#production-considerations.md) - [Database Selection](#database-selection.md) - [Migration Management](#migration-management.md)",
  "Project Infrastructure | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Project Infrastructure Relevant source files - [pyproject.toml](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml) This document covers the fundamental project infrastructure of FastAPI, including the build system, packaging configuration, dependency management, and development tool configurations. The infrastructure serves as the foundation that enables FastAPI's development workflow, testing, and distribution. For information about the documentation build system, see [Documentation System](fastapi/fastapi/6.1-documentation-system.md). For CI/CD automation workflows, see [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md). For development scripts and contributor workflows, see [Development Workflow](fastapi/fastapi/6.3-development-workflow.md). ## Build System and Packaging FastAPI uses a modern Python packaging approach centered around PDM (Python Dependency Manager) as the build backend. The project configuration is entirely defined in `pyproject.toml`, following PEP 518 standards. ### Build Configuration ``` ``` **Build System Configuration** The build system is configured in [pyproject.toml1-3](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L1-L3) specifying PDM as the backend. The `pdm.backend` handles all packaging operations, from source distribution to wheel creation. **Dynamic Versioning**",
  "Version management is handled dynamically through [pyproject.toml127-128](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L127-L128) extracting the version from [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) This ensures the package version stays synchronized with the codebase version without manual updates. **Source Distribution Includes** The build includes additional directories beyond the core package [pyproject.toml132-139](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L132-L139): - `tests/` - Test suite for distribution validation - `docs_src/` - Documentation source examples - `scripts/` - Development and utility scripts - `requirements*.txt` - Dependency specifications - `docs/en/docs/img/favicon.png` - Required for testing Sources: [pyproject.toml1-139](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L1-L139) ### Package Metadata and Dependencies ``` ``` **Core Dependencies** FastAPI maintains minimal core dependencies [pyproject.toml45-49](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L45-L49): - `starlette` - ASGI framework foundation - `pydantic` - Data validation and serialization - `typing-extensions` - Enhanced type hints **Optional Dependency Sets** Three optional dependency sets provide different installation profiles [pyproject.toml58-122](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L58-L122): | Set | Purpose | Key Components | | ------------------------------- | ------------------------------ | --------------------------------------------------- | | `standard` | Common web app features | CLI, HTTP client, templates, file uploads | | `standard-no-fastapi-cloud-cli` | Standard without FastAPI Cloud | Same as standard minus cloud CLI | | `all` | Complete feature set | All standard features plus JSON, sessions, settings | **CLI Entry Point** The package provides a command-line interface through [pyproject.toml124-125](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L124-L125) mapping the `fastapi` command to `fastapi.cli:main`. Sources: [pyproject.toml5-125](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L5-L125) ## Development Tool Configuration FastAPI integrates multiple development tools through centralized configuration, ensuring consistent code quality and development experience across the project. ### Type Checking and Linting ``` ``` **MyPy Type Checking** Strict type checking is enabled globally [pyproject.toml144-145](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L144-L145) with targeted overrides for specific modules: - `fastapi.concurrency` - Relaxed import checking due to threading complexity - `fastapi.tests.*` - Allow missing imports for test isolation - `docs_src.*` - Relaxed rules for documentation examples **Ruff Linting and Formatting** Comprehensive linting rules [pyproject.toml211-226](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L211-L226) cover: - Code style enforcement (pycodestyle) - Import organization (isort) - Bug prevention (flake8-bugbear) - Code modernization (pyupgrade) Extensive per-file overrides [pyproject.toml228-258](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L228-L258) accommodate documentation examples and tutorial code that intentionally demonstrates specific patterns. Sources: [pyproject.toml144-266](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L144-L266) ### Testing and Coverage Configuration ``` ``` **Pytest Configuration** Test execution is configured for strict validation [pyproject.toml163-170](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L163-L170): - Strict configuration prevents typos in pytest options - Strict markers require all test markers to be registered - Documentation source is excluded from test discovery - XFail strict mode prevents accidentally passing expected failures **Coverage Tracking** Comprehensive coverage configuration [pyproject.toml189-210](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L189-L210) enables:",
  "- Parallel test execution with data aggregation - Source tracking across `fastapi`, `tests`, and `docs_src` - Dynamic context tracking per test function - HTML reports with test context display **Warning Filters** Extensive warning filters [pyproject.toml171-187](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L171-L187) handle known issues: - Framework deprecation warnings (Starlette, SQLAlchemy) - Library compatibility warnings (passlib, trio) - Python version-specific warnings Sources: [pyproject.toml163-210](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L163-L210) ## Project Metadata and Distribution The project maintains comprehensive metadata for PyPI distribution and ecosystem integration. ### Package Classification and Compatibility ``` ``` **Compatibility Matrix** FastAPI supports a broad compatibility matrix [pyproject.toml36-41](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L36-L41): - Python versions: 3.8 through 3.13 - Framework integrations: AsyncIO, Pydantic v1/v2 - Operating systems: Platform independent - Development status: Beta (stable API, active development) **Project URLs and Resources** The package provides comprehensive resource links [pyproject.toml51-56](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L51-L56): | Resource | URL | | ------------- | --------------------- | | Homepage | GitHub repository | | Documentation | Official docs site | | Issues | GitHub issue tracker | | Changelog | Release notes section | Sources: [pyproject.toml14-56](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L14-L56) ## Slim Package Variant FastAPI supports a minimal distribution variant for specialized deployment scenarios. ### Slim Build Configuration The project includes configuration for generating a `fastapi-slim` package [pyproject.toml141-142](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L141-L142) through the `tiangolo._internal-slim-build` tool. This variant likely excludes optional dependencies and development tools for reduced installation size. This configuration enables: - Lightweight container deployments - Minimal dependency installations - Specialized distribution channels Sources: [pyproject.toml141-142](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L141-L142) The project infrastructure provides a robust foundation for FastAPI's development, testing, and distribution processes. The configuration balances strict quality standards with practical development needs, supporting both core maintainers and the broader contributor community through comprehensive tooling and clear dependency management. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Project Infrastructure](#project-infrastructure.md) - [Build System and Packaging](#build-system-and-packaging.md) - [Build Configuration](#build-configuration.md) - [Package Metadata and Dependencies](#package-metadata-and-dependencies.md) - [Development Tool Configuration](#development-tool-configuration.md) - [Type Checking and Linting](#type-checking-and-linting.md) - [Testing and Coverage Configuration](#testing-and-coverage-configuration.md) - [Project Metadata and Distribution](#project-metadata-and-distribution.md) - [Package Classification and Compatibility](#package-classification-and-compatibility.md) - [Slim Package Variant](#slim-package-variant.md) - [Slim Build Configuration](#slim-build-configuration.md)",
  "External Resources and Sponsorship | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # External Resources and Sponsorship Relevant source files",
  "- [docs/em/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/em/docs/help-fastapi.md) - [docs/en/data/external\\_links.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/external_links.yml) - [docs/en/docs/external-links.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/external-links.md) - [docs/en/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md) - [docs/fr/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/docs/help-fastapi.md) - [docs/ja/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/help-fastapi.md) - [docs/pl/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pl/docs/help-fastapi.md) - [docs/pt/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/help-fastapi.md) - [docs/ru/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/docs/help-fastapi.md) - [docs/zh/docs/help-fastapi.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/help-fastapi.md) This document covers the FastAPI project's external resources management system and sponsorship infrastructure. It explains how the project organizes and maintains community-contributed content, manages sponsorship information, and facilitates community engagement across multiple languages. For information about contributor recognition and GitHub discussions experts, see [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md). For details about translation coordination, see [Translation Management](fastapi/fastapi/7.2-translation-management.md). ## External Links Management System The FastAPI project maintains a comprehensive database of external resources including articles, podcasts, talks, and GitHub repositories. This system is implemented through a structured YAML data file that feeds into documentation generation. ### Data Structure and Organization The external links system uses a hierarchical YAML structure to organize content by type and language: ``` ``` **External Links Data Flow Architecture** Sources: [docs/en/data/external\\_links.yml1-419](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/external_links.yml#L1-L419) [docs/en/docs/external-links.md1-40](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/external-links.md#L1-L40) ### Content Categories and Structure The system organizes external resources into three main categories: | Category | Purpose | Data Fields | | -------- | -------------------------------- | ---------------------------------------- | | Articles | Blog posts, tutorials, guides | `author`, `author_link`, `link`, `title` | | Podcasts | Audio content about FastAPI | `author`, `author_link`, `link`, `title` | | Talks | Conference presentations, videos | `author`, `author_link`, `link`, `title` | Each content item contains standardized metadata fields that enable consistent rendering and attribution across all languages. ### GitHub Repository Integration The system automatically fetches and displays GitHub repositories with the `fastapi` topic: ``` ``` **GitHub Repository Data Integration** Sources: [docs/en/docs/external-links.md31-39](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/external-links.md#L31-L39) ## Sponsorship Management Infrastructure The FastAPI project implements a multi-tiered sponsorship system that supports both direct project sponsorship and ecosystem tool sponsorship. ### Primary Sponsorship Structure ``` ``` **Sponsorship Ecosystem Architecture** The sponsorship system recognizes that FastAPI depends on foundational tools and encourages supporting the entire ecosystem. Sources: [docs/en/docs/help-fastapi.md250-257](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md#L250-L257) [docs/zh/docs/help-fastapi.md129-145](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/help-fastapi.md#L129-L145) ### Multi-Language Sponsorship Documentation The sponsorship information is maintained across multiple language versions with consistent messaging:",
  "| Language | File Path | Key Sections | | ---------- | ------------------------------ | ------------------------------- | | English | `docs/en/docs/help-fastapi.md` | Sponsor author, ecosystem tools | | Chinese | `docs/zh/docs/help-fastapi.md` | 赞助作者, 赞助工具 | | French | `docs/fr/docs/help-fastapi.md` | Parrainer l'auteur, outils | | Polish | `docs/pl/docs/help-fastapi.md` | Wspieraj autora, narzędzia | | Russian | `docs/ru/docs/help-fastapi.md` | Спонсировать автора | | Portuguese | `docs/pt/docs/help-fastapi.md` | Patrocine o autor | | Japanese | `docs/ja/docs/help-fastapi.md` | スポンサーになる | Sources: [docs/en/docs/help-fastapi.md250-257](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md#L250-L257) [docs/zh/docs/help-fastapi.md129-148](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/help-fastapi.md#L129-L148) [docs/fr/docs/help-fastapi.md87-104](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/docs/help-fastapi.md#L87-L104) ## Community Engagement Systems The project implements comprehensive systems for community engagement that integrate with external platforms and resources. ### Help and Support Infrastructure ``` ``` **Community Engagement Flow** Sources: [docs/en/docs/help-fastapi.md72-125](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md#L72-L125) [docs/en/docs/help-fastapi.md213-227](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md#L213-L227) ### External Content Contribution Process Contributors can add their FastAPI-related content through a structured process: 1. **Content Creation**: Authors create articles, videos, podcasts, or talks about FastAPI 2. **Submission**: Contributors edit the `external_links.yml` file via GitHub PR 3. **Placement**: New links are added to the beginning of the appropriate section 4. **Review**: The FastAPI team reviews and merges the contribution 5. **Publication**: Content appears on the external links documentation page ``` ``` **External Content Contribution Workflow** Sources: [docs/en/docs/help-fastapi.md201-203](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md#L201-L203) [docs/en/docs/external-links.md10-12](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/external-links.md#L10-L12) ## Implementation Details ### Data Processing Pipeline The external resources system uses a template-based approach to render the YAML data into documentation: ``` ``` **Data Processing and Rendering Pipeline** The template system iterates through the hierarchical YAML structure to generate organized documentation sections for each content type and language. Sources: [docs/en/docs/external-links.md15-29](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/external-links.md#L15-L29) [docs/en/docs/external-links.md35-39](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/external-links.md#L35-L39) ### Maintenance and Quality Assurance The system includes several mechanisms to ensure content quality and relevance: - **Structured Data Validation**: YAML schema enforcement for required fields - **Link Placement Rules**: New content added to section beginnings for visibility - **Multi-language Consistency**: Parallel structure across all language versions - **Community Review**: Pull request review process for all submissions - **Automated GitHub Integration**: Dynamic repository listings via GitHub API Sources: [docs/en/data/external\\_links.yml1-419](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/external_links.yml#L1-L419) [docs/en/docs/help-fastapi.md201-203](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/help-fastapi.md#L201-L203) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [External Resources and Sponsorship](#external-resources-and-sponsorship.md) - [External Links Management System](#external-links-management-system.md) - [Data Structure and Organization](#data-structure-and-organization.md) - [Content Categories and Structure](#content-categories-and-structure.md) - [GitHub Repository Integration](#github-repository-integration.md) - [Sponsorship Management Infrastructure](#sponsorship-management-infrastructure.md) - [Primary Sponsorship Structure](#primary-sponsorship-structure.md) - [Multi-Language Sponsorship Documentation](#multi-language-sponsorship-documentation.md) - [Community Engagement Systems](#community-engagement-systems.md) - [Help and Support Infrastructure](#help-and-support-infrastructure.md) - [External Content Contribution Process](#external-content-contribution-process.md) - [Implementation Details](#implementation-details.md) - [Data Processing Pipeline](#data-processing-pipeline.md) - [Maintenance and Quality Assurance](#maintenance-and-quality-assurance.md)",
  "Development Workflow | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Development Workflow Relevant source files - [pyproject.toml](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml) - [requirements.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements.txt) - [scripts/format.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh) - [scripts/lint.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh) - [scripts/test-cov-html.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test-cov-html.sh) - [scripts/test.sh](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test.sh) This document covers the local development workflow, tooling, and scripts used for contributing to the FastAPI codebase. It explains how developers use the project's build system, development scripts, and quality tools during the development process. For information about automated CI/CD pipelines, see [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md). For details about code quality tools configuration, see [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md). For testing patterns and frameworks, see [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md). ## Build System and Project Configuration",
  "FastAPI uses PDM (Python Dependency Management) as its build system, configured through `pyproject.toml`. The project follows modern Python packaging standards with comprehensive tooling configuration. ### Build System Configuration The build system is configured using PDM backend with dynamic versioning: ``` ``` **PDM Build System Configuration** The build system specifies PDM as the backend and includes development sources in the distribution package. Sources: [pyproject.toml1-3](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L1-L3) [pyproject.toml127-140](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L127-L140) ### Dependency Management FastAPI defines multiple dependency groups for different use cases: | Dependency Group | Purpose | Key Packages | | ----------------- | ------------------------------ | -------------------------------------------------------- | | Core Dependencies | Essential runtime requirements | `starlette`, `pydantic`, `typing-extensions` | | `standard` | Standard FastAPI installation | `fastapi-cli`, `httpx`, `jinja2`, `uvicorn` | | `all` | Complete feature set | All standard plus `orjson`, `ujson`, `pydantic-settings` | | Development | Local development tools | `pre-commit`, `playwright` | Sources: [pyproject.toml45-48](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L45-L48) [pyproject.toml60-77](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L60-L77) [pyproject.toml98-122](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L98-L122) [requirements.txt1-7](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements.txt#L1-L7) ## Development Scripts Overview The project provides shell scripts in the `scripts/` directory to standardize common development tasks: ``` ``` **Development Script Ecosystem** Each script serves a specific purpose in the development workflow, with clear separation of concerns. Sources: [scripts/test.sh1-8](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test.sh#L1-L8) [scripts/lint.sh1-9](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh#L1-L9) [scripts/format.sh1-6](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh#L1-L6) [scripts/test-cov-html.sh1-10](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test-cov-html.sh#L1-L10) ## Local Development Workflow The typical development workflow follows this sequence: ``` ``` **Local Development Process Flow** The workflow ensures code quality through multiple validation stages before committing changes. Sources: [scripts/format.sh1-6](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh#L1-L6) [scripts/lint.sh1-9](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh#L1-L9) [scripts/test.sh1-8](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test.sh#L1-L8) [requirements.txt4](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements.txt#L4-L4) ### Development Environment Setup 1. **Dependency Installation**: Install using the development requirements which include all optional dependencies and development tools 2. **Pre-commit Setup**: Install pre-commit hooks to enforce quality checks before commits 3. **Script Permissions**: Ensure shell scripts have execute permissions Sources: [requirements.txt1-7](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements.txt#L1-L7) ## Code Quality Workflow The code quality workflow uses multiple tools orchestrated through shell scripts: ### Formatting Workflow The `scripts/format.sh` script performs automatic code formatting: ``` ``` This two-step process first applies automatic fixes for linting violations, then formats the code according to style guidelines. Sources: [scripts/format.sh4-5](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/format.sh#L4-L5) ### Linting Workflow The `scripts/lint.sh` script runs comprehensive code quality checks: ``` ```",
  "This validates type annotations with MyPy, checks code quality with Ruff, and verifies formatting compliance. Sources: [scripts/lint.sh6-8](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/lint.sh#L6-L8) ### Tool Configuration Integration ``` ``` **Tool Configuration Architecture** All development tools are configured centrally in `pyproject.toml` with tool-specific sections. Sources: [pyproject.toml144-270](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L144-L270) ## Testing Workflow The testing workflow uses pytest with coverage tracking and custom configuration: ### Test Execution The `scripts/test.sh` script sets up the testing environment: ``` ``` This configures the Python path to include documentation source code and runs tests with coverage tracking. Sources: [scripts/test.sh6-7](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test.sh#L6-L7) ### Test Configuration Key pytest configuration elements: | Configuration | Purpose | | --------------------- | ---------------------------------------------- | | `--strict-config` | Enforce strict configuration validation | | `--strict-markers` | Require marker registration | | `--ignore=docs_src` | Exclude documentation code from test discovery | | `xfail_strict = true` | Treat expected failures strictly | | `filterwarnings` | Suppress specific deprecation warnings | Sources: [pyproject.toml163-187](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L163-L187) ## Coverage Reporting The coverage system tracks code coverage across multiple contexts: ``` ``` **Coverage Reporting Pipeline** Coverage data is collected during test runs and can be combined and reported in multiple formats. ### Coverage Configuration The coverage system is configured for parallel execution and comprehensive source tracking: - **Data Collection**: Tracks `docs_src`, `tests`, and `fastapi` directories - **Context Tracking**: Uses dynamic context based on test functions - **Parallel Support**: Enables parallel test execution with data aggregation - **HTML Reports**: Generates detailed HTML reports with context information Sources: [pyproject.toml189-210](https://github.com/fastapi/fastapi/blob/3e2dbf91/pyproject.toml#L189-L210) [scripts/test-cov-html.sh6-9](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test-cov-html.sh#L6-L9) ### Coverage Output The `scripts/test-cov-html.sh` script generates comprehensive coverage reports: 1. **Combine**: Merges parallel coverage data files 2. **Report**: Displays terminal coverage summary with missing lines 3. **HTML**: Creates interactive HTML coverage report Sources: [scripts/test-cov-html.sh7-9](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/test-cov-html.sh#L7-L9) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Development Workflow](#development-workflow.md) - [Build System and Project Configuration](#build-system-and-project-configuration.md) - [Build System Configuration](#build-system-configuration.md) - [Dependency Management](#dependency-management.md) - [Development Scripts Overview](#development-scripts-overview.md) - [Local Development Workflow](#local-development-workflow.md) - [Development Environment Setup](#development-environment-setup.md) - [Code Quality Workflow](#code-quality-workflow.md) - [Formatting Workflow](#formatting-workflow.md) - [Linting Workflow](#linting-workflow.md) - [Tool Configuration Integration](#tool-configuration-integration.md) - [Testing Workflow](#testing-workflow.md) - [Test Execution](#test-execution.md) - [Test Configuration](#test-configuration.md) - [Coverage Reporting](#coverage-reporting.md) - [Coverage Configuration](#coverage-configuration.md) - [Coverage Output](#coverage-output.md)",
  "Testing Infrastructure | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Testing Infrastructure Relevant source files - [.pre-commit-config.yaml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml) - [requirements-tests.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt) - [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py) - [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py) - [tests/test\\_typing\\_python39.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_typing_python39.py) - [tests/test\\_union\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_body.py) - [tests/test\\_union\\_inherited\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py) - [tests/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py) This document covers FastAPI's comprehensive testing infrastructure, including the test framework setup, code quality tools, and automated quality assurance processes. The testing infrastructure ensures code reliability through automated testing, linting, type checking, and pre-commit validation hooks.",
  "For information about specific test framework usage patterns and TestClient implementation, see [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md). For details about linting, formatting, and pre-commit hook configuration, see [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md). ## Overview FastAPI's testing infrastructure is built around `pytest` as the primary testing framework, with `TestClient` providing HTTP request simulation capabilities. The system includes comprehensive code quality tools, version compatibility testing, and automated validation through pre-commit hooks. **Testing Framework Architecture** ``` ``` Sources: [requirements-tests.txt1-17](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L1-L17) [tests/utils.py1-35](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py#L1-L35) ## Testing Dependencies and Requirements The testing infrastructure relies on a carefully curated set of dependencies defined in `requirements-tests.txt`. These dependencies support various testing scenarios including async operations, database interactions, and security features. | Category | Package | Version | Purpose | | -------------- | ----------------- | ---------------- | --------------------------- | | Core Testing | `pytest` | `>=7.1.3,<9.0.0` | Primary testing framework | | Coverage | `coverage[toml]` | `>= 6.5.0,< 8.0` | Test coverage measurement | | Type Checking | `mypy` | `==1.8.0` | Static type analysis | | Assertions | `dirty-equals` | `==0.9.0` | Flexible assertion matching | | Snapshots | `inline-snapshot` | `>=0.21.1` | Snapshot testing | | Database | `sqlmodel` | `==0.0.24` | Database model testing | | Async | `anyio[trio]` | `>=3.2.1,<5.0.0` | Async testing support | | Security | `PyJWT` | `==2.8.0` | JWT token testing | | Authentication | `passlib[bcrypt]` | `>=1.7.2,<2.0.0` | Password hashing testing | Sources: [requirements-tests.txt1-17](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L1-L17) ## Version Compatibility Testing The testing infrastructure includes sophisticated version compatibility utilities to ensure FastAPI works across different Python and Pydantic versions. **Version Compatibility System** ``` ``` The `tests/utils.py` module provides version-specific testing utilities: - `needs_py39`: Skips tests requiring Python 3.9+ - `needs_py310`: Skips tests requiring Python 3.10+ - `needs_pydanticv1`: Skips tests requiring Pydantic v1 - `needs_pydanticv2`: Skips tests requiring Pydantic v2 - `pydantic_snapshot()`: Provides version-specific snapshot testing Sources: [tests/utils.py7-34](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py#L7-L34) ## Pre-commit Quality Assurance The testing infrastructure includes automated code quality checks through pre-commit hooks configured in `.pre-commit-config.yaml`. **Pre-commit Hook Pipeline** ``` ``` Sources: [.pre-commit-config.yaml1-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml#L1-L26) ## Test Patterns and Utilities FastAPI tests follow consistent patterns for HTTP testing, OpenAPI schema validation, and cross-version compatibility. **Common Testing Patterns** ``` ``` Key testing utilities include:",
  "- **TestClient**: HTTP client for simulating requests [tests/test\\_union\\_inherited\\_body.py24](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L24-L24) - **dirty-equals**: Flexible assertion matching [tests/test\\_union\\_inherited\\_body.py89-98](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L89-L98) - **inline-snapshot**: Snapshot testing for OpenAPI schemas [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py71-73](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py#L71-L73) - **Parametrized fixtures**: Version compatibility testing [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py17-36](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py#L17-L36) Sources: [tests/test\\_union\\_inherited\\_body.py1-137](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L1-L137) [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py1-482](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py#L1-L482) [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py1-244](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py#L1-L244) ## Type Checking Integration The testing infrastructure includes `mypy` for static type analysis, ensuring type safety across the codebase. Type checking is integrated with specific type stub packages for external dependencies. **Type Checking Dependencies** | Package | Version | Purpose | | -------------- | ------------------- | --------------------- | | `mypy` | `==1.8.0` | Static type checker | | `types-ujson` | `==5.10.0.20240515` | Type stubs for ujson | | `types-orjson` | `==3.6.2` | Type stubs for orjson | Advanced type testing includes support for Python 3.10+ syntax using generics like `list[int]` and `dict[str, list[int]]` as demonstrated in the type compatibility tests. Sources: [requirements-tests.txt14-16](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L14-L16) [tests/test\\_typing\\_python39.py1-25](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_typing_python39.py#L1-L25) ## Test Organization Structure Tests are organized by feature area with consistent naming conventions and import patterns. The test suite covers core functionality, tutorial examples, and edge cases across different Python and Pydantic versions. **Test File Categories** - **Core functionality tests**: `tests/test_*.py` - **Tutorial tests**: `tests/test_tutorial/*/test_*.py` - **Version-specific tests**: Files with `_py39`, `_py310`, `_an` suffixes - **Pydantic compatibility**: Files with `_pv1` suffixes Each test file follows the pattern of importing required dependencies, creating a FastAPI app and TestClient, and implementing test functions with descriptive names and comprehensive assertions. Sources: [tests/test\\_union\\_inherited\\_body.py1-8](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L1-L8) [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py1-13](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py#L1-L13) [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py1-14](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py#L1-L14) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [Testing Infrastructure](#testing-infrastructure.md) - [Overview](#overview.md) - [Testing Dependencies and Requirements](#testing-dependencies-and-requirements.md) - [Version Compatibility Testing](#version-compatibility-testing.md) - [Pre-commit Quality Assurance](#pre-commit-quality-assurance.md) - [Test Patterns and Utilities](#test-patterns-and-utilities.md) - [Type Checking Integration](#type-checking-integration.md) - [Test Organization Structure](#test-organization-structure.md)",
  "fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # FastAPI Overview Relevant source files",
  "- [README.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md) - [docs/de/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/deployment/cloud.md) - [docs/de/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/index.md) - [docs/en/data/sponsors.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/sponsors.yml) - [docs/en/data/sponsors\\_badge.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/sponsors_badge.yml) - [docs/en/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/cloud.md) - [docs/en/docs/img/sponsors/dribia.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/dribia.png) - [docs/en/docs/img/sponsors/interviewpal.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/interviewpal.png) - [docs/en/docs/img/sponsors/investsuite.svg](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/investsuite.svg) - [docs/en/docs/img/sponsors/mobbai-banner.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/mobbai-banner.png) - [docs/en/docs/img/sponsors/mobbai.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/mobbai.png) - [docs/en/docs/img/sponsors/railway-banner.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/railway-banner.png) - [docs/en/docs/img/sponsors/railway.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/railway.png) - [docs/en/docs/img/sponsors/zuplo-banner.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/zuplo-banner.png) - [docs/en/docs/img/sponsors/zuplo.png](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/img/sponsors/zuplo.png) - [docs/en/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md) - [docs/en/overrides/main.html](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/overrides/main.html) - [docs/es/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/deployment/cloud.md) - [docs/es/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/index.md) - [docs/fr/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/docs/index.md) - [docs/id/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/id/docs/index.md) - [docs/it/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/it/docs/index.md) - [docs/ja/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/index.md) - [docs/ko/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ko/docs/deployment/cloud.md) - [docs/ko/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ko/docs/index.md) - [docs/pl/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pl/docs/index.md) - [docs/pt/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/deployment/cloud.md) - [docs/pt/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/index.md) - [docs/ru/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/docs/index.md) - [docs/tr/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/tr/docs/deployment/cloud.md) - [docs/tr/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/tr/docs/index.md) - [docs/uk/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/uk/docs/index.md) - [docs/vi/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/vi/docs/deployment/cloud.md) - [docs/zh-hant/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh-hant/docs/deployment/cloud.md) - [docs/zh/docs/deployment/cloud.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/deployment/cloud.md) - [docs/zh/docs/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/index.md)",
  "This document provides a comprehensive overview of FastAPI, a modern, high-performance web framework for building APIs with Python. It covers the framework's core architecture, key features, and fundamental concepts that developers need to understand when working with FastAPI applications. For detailed information about specific FastAPI components and subsystems, see [Core Architecture](fastapi/fastapi/2-core-architecture.md). For deployment and production considerations, see [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md). For testing approaches, see [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md). ## Purpose and Scope FastAPI is a web framework designed for building REST APIs with Python, leveraging standard Python type hints to provide automatic validation, serialization, and interactive documentation generation. The framework prioritizes developer productivity, runtime performance, and production readiness while maintaining standards compliance with OpenAPI and JSON Schema specifications. **Sources:** [README.md30-41](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L30-L41) [docs/en/docs/index.md36-47](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L36-L47) ## Architectural Foundations FastAPI is built on two foundational libraries that provide complementary capabilities: ``` ``` ### Core Dependencies The framework relies on two primary dependencies that handle different aspects of API functionality: | Component | Responsibility | Key Features | | --------- | --------------------------------- | ----------------------------------------------------------------- | | Starlette | Web layer and ASGI handling | Request routing, middleware, WebSocket support, testing utilities | | Pydantic | Data validation and serialization | Type-based validation, automatic parsing, JSON schema generation | **Sources:** [README.md126-129](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L126-L129) [docs/en/docs/index.md124-127](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L124-L127) ## Request Processing Pipeline FastAPI processes incoming requests through a structured pipeline that integrates type validation with HTTP handling: ``` ``` The framework automatically handles parameter extraction, type validation, and response serialization based on Python type annotations declared in handler functions. **Sources:** [README.md387-404](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L387-L404) [docs/en/docs/index.md385-402](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L385-L402) ## Key Framework Features FastAPI provides several integrated capabilities that distinguish it from other Python web frameworks: ### Automatic Documentation Generation ``` ``` The framework automatically generates OpenAPI-compliant documentation from type-annotated Python code, eliminating the need for separate documentation maintenance. **Sources:** [README.md261-273](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L261-L273) [docs/en/docs/index.md259-271](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L259-L271) ### Performance Characteristics FastAPI achieves high performance through several architectural decisions: | Aspect | Implementation | Benefit | | ---------------- | --------------------------------------------- | ---------------------------------- | | ASGI Foundation | Built on Starlette's ASGI implementation | Asynchronous request handling | | Type Validation | Pydantic's optimized C extensions | Fast data parsing and validation | | Minimal Overhead | Direct integration without abstraction layers | Reduced request processing latency | Independent benchmarks position FastAPI among the fastest Python web frameworks, comparable to NodeJS and Go implementations. **Sources:** [README.md449-453](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L449-L453) [docs/en/docs/index.md447-451](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L447-L451) ## Installation and Dependencies FastAPI supports multiple installation configurations to accommodate different use cases: ### Standard Installation The recommended installation includes commonly used dependencies: ``` ``` This installation includes: - `uvicorn` - ASGI server for development and production - `fastapi-cli` - Command-line interface for FastAPI applications - `httpx` - HTTP client for testing - `jinja2` - Template engine support - `python-multipart` - Form parsing capabilities ### Minimal Installation For production environments with specific dependency requirements: ``` ``` This provides only the core FastAPI functionality without optional dependencies.",
  "**Sources:** [README.md131-486](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L131-L486) [docs/en/docs/index.md129-484](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L129-L484) ## Standards Compliance FastAPI maintains full compatibility with established API standards: ``` ``` This standards compliance ensures interoperability with existing API tooling and enables automatic client generation for multiple programming languages. **Sources:** [README.md41-47](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L41-L47) [docs/en/docs/index.md41-47](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L41-L47) ## Development Workflow FastAPI supports rapid development through integrated tooling: | Tool | Purpose | Command | | ------------------------- | ----------------------------------- | -------------------------------- | | FastAPI CLI | Development server with auto-reload | `fastapi dev main.py` | | Interactive Documentation | API testing and exploration | Access `/docs` endpoint | | Type Checking | Static analysis integration | Compatible with `mypy`, `pytest` | | Testing Framework | Built-in test client | Uses `TestClient` from Starlette | The framework's development experience emphasizes fast iteration cycles with immediate feedback through automatic documentation updates and development server reloading. **Sources:** [README.md202-238](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L202-L238) [docs/en/docs/index.md200-236](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L200-L236) ## Community and Ecosystem FastAPI maintains an active community with supporting tools and resources: ### Sponsorship and Support The project receives sponsorship from cloud providers and development tool companies, ensuring continued maintenance and development. Major sponsors include infrastructure providers that offer FastAPI deployment guides and optimized hosting solutions. ### Related Projects - **Typer** - Command-line interface framework using similar design principles - **SQLModel** - Database ORM integration designed for FastAPI compatibility - **Starlette** - Underlying ASGI framework - **Pydantic** - Data validation library **Sources:** [README.md45-68](https://github.com/fastapi/fastapi/blob/3e2dbf91/README.md#L45-L68) [docs/en/data/sponsors.yml1-61](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/data/sponsors.yml#L1-L61) [docs/en/docs/index.md51-66](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/index.md#L51-L66) Dismiss Refresh this wiki Enter email to refresh ### On this page - [FastAPI Overview](#fastapi-overview.md) - [Purpose and Scope](#purpose-and-scope.md) - [Architectural Foundations](#architectural-foundations.md) - [Core Dependencies](#core-dependencies.md) - [Request Processing Pipeline](#request-processing-pipeline.md) - [Key Framework Features](#key-framework-features.md) - [Automatic Documentation Generation](#automatic-documentation-generation.md) - [Performance Characteristics](#performance-characteristics.md) - [Installation and Dependencies](#installation-and-dependencies.md) - [Standard Installation](#standard-installation.md) - [Minimal Installation](#minimal-installation.md) - [Standards Compliance](#standards-compliance.md) - [Development Workflow](#development-workflow.md) - [Community and Ecosystem](#community-and-ecosystem.md) - [Sponsorship and Support](#sponsorship-and-support.md) - [Related Projects](#related-projects.md)",
  "Translation Management | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Translation Management Relevant source files",
  "- [.github/workflows/translate.yml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/translate.yml) - [docs/es/llm-prompt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/llm-prompt.md) - [docs\\_src/configure\\_swagger\\_ui/tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/configure_swagger_ui/tutorial002.py) - [requirements-translations.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-translations.txt) - [scripts/deploy\\_docs\\_status.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/deploy_docs_status.py) - [scripts/notify\\_translations.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py) - [scripts/translate.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py) - [tests/test\\_enforce\\_once\\_required\\_parameter.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_enforce_once_required_parameter.py) - [tests/test\\_generic\\_parameterless\\_depends.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_generic_parameterless_depends.py) - [tests/test\\_repeated\\_dependency\\_schema.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_repeated_dependency_schema.py) - [tests/test\\_tutorial/test\\_configure\\_swagger\\_ui/test\\_tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_configure_swagger_ui/test_tutorial001.py) - [tests/test\\_tutorial/test\\_configure\\_swagger\\_ui/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_configure_swagger_ui/test_tutorial002.py) - [tests/test\\_tutorial/test\\_configure\\_swagger\\_ui/test\\_tutorial003.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_configure_swagger_ui/test_tutorial003.py) This document covers FastAPI's AI-powered translation workflow, which automatically translates documentation into multiple languages and coordinates community review through GitHub Discussions and automated workflows. For information about the broader documentation system architecture, see [Documentation System](fastapi/fastapi/6.1-documentation-system.md). For community management aspects, see [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md). ## Overview FastAPI maintains documentation in 11+ languages through an automated translation system that combines AI-powered translation with community review processes. The system uses OpenAI's GPT-4o model to translate English documentation, manages file synchronization across languages, and coordinates review workflows through GitHub Discussions. ## Core Translation Engine ### AI Translation Agent The translation system centers around the `Agent` class from pydantic-ai, configured with OpenAI's GPT-4o model. The `translate_page()` function in [scripts/translate.py97-158](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L97-L158) handles individual page translation with sophisticated prompt engineering. ``` ``` **Translation Pipeline Architecture** The system uses a multi-layered prompting approach. The `general_prompt` variable [scripts/translate.py26-66](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L26-L66) provides base translation instructions, while language-specific prompts from `docs/{lang}/llm-prompt.md` files add terminology guidelines and style preferences. Sources: [scripts/translate.py122-157](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L122-L157) [scripts/translate.py26-66](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L26-L66) ### File Organization and Path Mapping The translation system maintains a structured file organization where English documentation in `docs/en/docs/` maps to translated versions in `docs/{lang}/docs/`. Two key functions handle this mapping:",
  "| Function | Purpose | Input | Output | | ---------------------- | ------------------------- | -------------------------------------- | -------------------------------------- | | `generate_lang_path()` | English → Translated path | `docs/en/docs/tutorial/first-steps.md` | `docs/es/docs/tutorial/first-steps.md` | | `generate_en_path()` | Translated → English path | `docs/es/docs/tutorial/first-steps.md` | `docs/en/docs/tutorial/first-steps.md` | The `non_translated_sections` tuple [scripts/translate.py14-23](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L14-L23) excludes specific content types like API reference, release notes, and management documentation from automatic translation. Sources: [scripts/translate.py76-94](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L76-L94) [scripts/translate.py14-23](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L14-L23) ### Translation Commands and Workflows The CLI interface provides multiple translation commands through the `typer` app: ``` ``` **Translation Command Architecture** The `list_outdated()` function [scripts/translate.py276-295](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L276-L295) uses Git commit timestamps to identify translations that need updates when English source files have been modified more recently than their translated counterparts. Sources: [scripts/translate.py192-324](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L192-L324) [scripts/translate.py276-295](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L276-L295) ## GitHub Actions Integration ### Automated Translation Workflow The GitHub Actions workflow `.github/workflows/translate.yml` provides a manual dispatch interface for running translation operations with different commands and target languages. ``` ``` **GitHub Actions Translation Workflow** The workflow supports command options including `translate-page`, `translate-lang`, `update-outdated`, `add-missing`, `update-and-add`, and `remove-all-removable` [.github/workflows/translate.yml10-19](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/translate.yml#L10-L19) Sources: [.github/workflows/translate.yml1-78](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/translate.yml#L1-L78) ### Pull Request Creation The `make_pr()` function [scripts/translate.py328-367](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L328-L367) handles automated PR creation with Git configuration, branch management, and GitHub API integration through the `PyGithub` library. Sources: [scripts/translate.py328-367](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L328-L367) ## Community Coordination System ### GitHub Discussions Integration The notification system in `scripts/notify_translations.py` coordinates translation reviews through GitHub Discussions using GraphQL queries to track translation PRs and notify community reviewers. ``` ``` **GitHub Discussions Coordination Architecture** The system uses specific labels for translation workflow management: `awaiting-review`, `lang-all`, and `approved-1` [scripts/notify\\_translations.py13-15](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L13-L15) The `questions_translations_category_id` constant [scripts/notify\\_translations.py19](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L19-L19) identifies the GitHub Discussions category for translation coordination. Sources: [scripts/notify\\_translations.py13-15](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L13-L15) [scripts/notify\\_translations.py21-84](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L21-L84) [scripts/notify\\_translations.py349-373](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L349-L373) ### Review Workflow States The notification system tracks three primary states for translation PRs:",
  "| State | Trigger | Action | Message Type | | -------------------- | ---------------------------- | ------------------- | -------------------------- | | **Awaiting Review** | `awaiting-review` label | Create notification | `new_translation_message` | | **Approved/Closed** | `approved-1` label or closed | Update to done | `done_translation_message` | | **Already Notified** | Existing comment | Skip action | No change | Sources: [scripts/notify\\_translations.py360-427](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L360-L427) ## Language Configuration ### Language-Specific Prompts Each supported language has a dedicated prompt file at `docs/{lang}/llm-prompt.md` that provides translation guidelines, terminology preferences, and style instructions. The Spanish prompt file [docs/es/llm-prompt.md1-99](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/llm-prompt.md#L1-L99) exemplifies this approach with specific translation rules for technical terms. ### Language Registry The `get_langs()` function [scripts/translate.py72-73](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L72-L73) loads language configurations from `docs/language_names.yml`, providing the mapping between language codes and display names used throughout the translation system. Sources: [scripts/translate.py72-73](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L72-L73) [docs/es/llm-prompt.md1-99](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/llm-prompt.md#L1-L99) ## Quality Control and Diff Minimization ### Incremental Translation Updates The translation system implements sophisticated diff minimization to preserve existing translations when updating content. When `old_translation` exists [scripts/translate.py128-144](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L128-L144) the system instructs the AI to minimize changes by preserving correct lines and only updating content that reflects changes in the English source. ### Technical Term Preservation The `general_prompt` includes specific instructions for handling code snippets, technical terms, and markdown formatting [scripts/translate.py27-37](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L27-L37) Code fragments surrounded by backticks remain untranslated, and console/terminal examples preserve their original English content. Sources: [scripts/translate.py128-144](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L128-L144) [scripts/translate.py27-37](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L27-L37) ## Integration Points The translation management system integrates with several other FastAPI infrastructure components: - **Documentation Build System**: Translated files feed into the MkDocs build pipeline covered in [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - **CI/CD Pipeline**: Translation workflows integrate with the broader automation system described in [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - **Community Management**: Translation coordination connects with contributor recognition systems detailed in [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) Sources: [scripts/translate.py1-371](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/translate.py#L1-L371) [.github/workflows/translate.yml1-78](https://github.com/fastapi/fastapi/blob/3e2dbf91/.github/workflows/translate.yml#L1-L78) [scripts/notify\\_translations.py1-433](https://github.com/fastapi/fastapi/blob/3e2dbf91/scripts/notify_translations.py#L1-L433) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [Translation Management](#translation-management.md) - [Overview](#overview.md) - [Core Translation Engine](#core-translation-engine.md) - [AI Translation Agent](#ai-translation-agent.md) - [File Organization and Path Mapping](#file-organization-and-path-mapping.md) - [Translation Commands and Workflows](#translation-commands-and-workflows.md) - [GitHub Actions Integration](#github-actions-integration.md) - [Automated Translation Workflow](#automated-translation-workflow.md) - [Pull Request Creation](#pull-request-creation.md) - [Community Coordination System](#community-coordination-system.md) - [GitHub Discussions Integration](#github-discussions-integration.md) - [Review Workflow States](#review-workflow-states.md) - [Language Configuration](#language-configuration.md) - [Language-Specific Prompts](#language-specific-prompts.md) - [Language Registry](#language-registry.md) - [Quality Control and Diff Minimization](#quality-control-and-diff-minimization.md) - [Incremental Translation Updates](#incremental-translation-updates.md) - [Technical Term Preservation](#technical-term-preservation.md) - [Integration Points](#integration-points.md)",
  "Dependency Injection | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Dependency Injection Relevant source files",
  "- [docs/en/docs/alternatives.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/alternatives.md) - [docs/en/docs/tutorial/body.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/body.md) - [docs/en/docs/tutorial/dependencies/classes-as-dependencies.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md) - [docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md) - [docs/en/docs/tutorial/dependencies/index.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/index.md) - [docs/en/docs/tutorial/dependencies/sub-dependencies.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/sub-dependencies.md) - [docs/en/docs/tutorial/path-params-numeric-validations.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/path-params-numeric-validations.md) - [docs/en/docs/tutorial/query-params-str-validations.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/constants.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/constants.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_get\\_request\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_get_request_body.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) This document covers FastAPI's dependency injection system, which provides automatic resolution and injection of dependencies into path operation functions. The system analyzes function signatures to identify dependencies, validates parameters, and manages the lifecycle of dependency instances including caching and cleanup. For information about parameter validation and handling, see [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md). For security-specific dependency injection, see [Security Components](fastapi/fastapi/2.5-security-components.md). ## System Architecture",
  "FastAPI's dependency injection system consists of three main components: dependency analysis, dependency resolution, and lifecycle management. The system automatically discovers dependencies through function signature inspection and resolves them recursively during request processing. ### Dependency Injection Architecture ``` ``` Sources: [fastapi/routing.py292-299](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L292-L299) [fastapi/dependencies/utils.py572-695](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L572-L695) [fastapi/dependencies/models.py15-37](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L15-L37) ## Core Components ### Dependant Model The `Dependant` dataclass represents the dependency structure of a function, containing categorized parameters and sub-dependencies. Each dependant tracks parameter types, security requirements, and caching behavior. | Field | Type | Purpose | | ----------------------- | --------------------------- | ----------------------------------- | | `path_params` | `List[ModelField]` | Path parameter definitions | | `query_params` | `List[ModelField]` | Query parameter definitions | | `header_params` | `List[ModelField]` | Header parameter definitions | | `cookie_params` | `List[ModelField]` | Cookie parameter definitions | | `body_params` | `List[ModelField]` | Request body parameter definitions | | `dependencies` | `List[Dependant]` | Nested dependency structures | | `security_requirements` | `List[SecurityRequirement]` | Security-related dependencies | | `call` | `Optional[Callable]` | The actual function to call | | `use_cache` | `bool` | Whether to cache dependency results | Sources: [fastapi/dependencies/models.py15-37](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L15-L37) ### Depends Mechanism The `Depends` class marks function parameters as dependencies, triggering automatic resolution by the dependency injection system. ``` ``` The `dependency` parameter specifies the callable to invoke, while `use_cache` controls whether results should be cached for the request duration. Sources: [fastapi/params.py1-774](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py#L1-L774) ## Dependency Analysis Process ### Function Signature Analysis The `get_dependant` function analyzes function signatures to extract dependency information, categorizing parameters by their types and annotations. ``` ``` Sources: [fastapi/dependencies/utils.py265-314](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L265-L314) [fastapi/dependencies/utils.py348-511](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L348-L511) ### Parameter Classification The `analyze_param` function classifies function parameters into dependency types based on annotations and default values: - **Explicit Dependencies**: Parameters with `Depends()` annotations - **Request Objects**: `Request`, `WebSocket`, `Response`, `BackgroundTasks` types - **Path Parameters**: Parameters matching path template variables - **Query Parameters**: Scalar types without special annotations - **Body Parameters**: Complex types or explicit `Body()` annotations - **Header/Cookie Parameters**: Parameters with `Header()` or `Cookie()` annotations Sources: [fastapi/dependencies/utils.py348-511](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L348-L511) [fastapi/dependencies/utils.py317-338](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L317-L338) ## Dependency Resolution ### Resolution Algorithm The `solve_dependencies` function recursively resolves dependencies using a depth-first approach with caching and lifecycle management. ``` ``` Sources: [fastapi/dependencies/utils.py572-695](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L572-L695) ### SolvedDependency Result The dependency resolution process returns a `SolvedDependency` object containing all resolved values and metadata:",
  "| Field | Type | Purpose | | ------------------ | ----------------- | ---------------------------------- | | `values` | `Dict[str, Any]` | Resolved dependency values | | `errors` | `List[Any]` | Validation errors encountered | | `background_tasks` | `BackgroundTasks` | Background task manager | | `response` | `Response` | Response object for headers/status | | `dependency_cache` | `Dict` | Cache of resolved dependencies | Sources: [fastapi/dependencies/utils.py563-570](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L563-L570) ## Advanced Features ### Dependency Caching Dependencies are cached by default using a cache key derived from the function and security scopes. Caching prevents redundant computations when the same dependency is used multiple times in a request. ``` ``` Cache behavior is controlled by the `use_cache` parameter in `Depends()` and can be disabled for dependencies that should be called multiple times. Sources: [fastapi/dependencies/models.py36-37](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L36-L37) [fastapi/dependencies/utils.py631-644](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L631-L644) ### Generator Dependencies Generator dependencies support resource management with automatic cleanup using context managers. The system distinguishes between sync and async generators: - **Sync Generators**: Wrapped with `contextmanager_in_threadpool` - **Async Generators**: Used directly as async context managers Sources: [fastapi/dependencies/utils.py553-560](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L553-L560) [fastapi/dependencies/utils.py633-636](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L633-L636) ### Security Dependencies Security dependencies integrate with FastAPI's security system through `SecurityRequirement` objects, which specify security schemes and required scopes. Sources: [fastapi/dependencies/models.py9-11](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L9-L11) [fastapi/dependencies/utils.py150-171](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L150-L171) ## Integration with Routing ### Route Handler Integration The routing system integrates dependency injection through the `get_request_handler` function, which creates request handlers that automatically resolve dependencies. ``` ``` The route analysis phase extracts dependency information and creates optimized structures for runtime resolution. Sources: [fastapi/routing.py555-561](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L555-L561) [fastapi/routing.py292-299](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L292-L299) [fastapi/routing.py218-358](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L218-L358) ### Dependency Overrides The system supports dependency overrides through the `dependency_overrides_provider`, allowing replacement of dependencies during testing or runtime configuration. Sources: [fastapi/dependencies/utils.py599-613](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L599-L613) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Dependency Injection](#dependency-injection.md) - [System Architecture](#system-architecture.md) - [Dependency Injection Architecture](#dependency-injection-architecture.md) - [Core Components](#core-components.md) - [Dependant Model](#dependant-model.md) - [Depends Mechanism](#depends-mechanism.md) - [Dependency Analysis Process](#dependency-analysis-process.md) - [Function Signature Analysis](#function-signature-analysis.md) - [Parameter Classification](#parameter-classification.md) - [Dependency Resolution](#dependency-resolution.md) - [Resolution Algorithm](#resolution-algorithm.md) - [SolvedDependency Result](#solveddependency-result.md) - [Advanced Features](#advanced-features.md) - [Dependency Caching](#dependency-caching.md) - [Generator Dependencies](#generator-dependencies.md) - [Security Dependencies](#security-dependencies.md) - [Integration with Routing](#integration-with-routing.md) - [Route Handler Integration](#route-handler-integration.md) - [Dependency Overrides](#dependency-overrides.md)",
  "Settings Management | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Settings Management Relevant source files",
  "- [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py) FastAPI's settings management system provides type-safe configuration handling through Pydantic's `BaseSettings` class. The system automatically reads environment variables, validates configuration values, and integrates with FastAPI's dependency injection system for clean application architecture. This system centers around the `BaseSettings` class from `pydantic-settings`, dependency injection using `Depends()`, and performance optimization through `@lru_cache` decorators. ## BaseSettings Architecture The settings system is built around `BaseSettings` from `pydantic-settings`, which provides automatic environment variable reading and type validation. Configuration flows from environment variables through `BaseSettings` subclasses to application components via dependency injection. **BaseSettings Implementation Flow** ``` ``` Sources: [docs/en/docs/advanced/settings.md55-90](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L55-L90) [docs/en/docs/advanced/settings.md141-172](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L141-L172) ## BaseSettings Class Implementation The `BaseSettings` class from `pydantic-settings` provides the core functionality for configuration management. It automatically reads environment variables, performs type conversion, and validates configuration values. ### Settings Class Definition Settings classes inherit from `BaseSettings` and declare configuration as typed class attributes: ``` ``` **Settings Class Structure** ``` ```",
  "Sources: [docs/en/docs/advanced/settings.md55-90](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L55-L90) [docs/en/docs/advanced/settings.md218-249](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L218-L249) ### Environment Variable Mapping `BaseSettings` automatically maps environment variables to class attributes using case-insensitive matching. The system performs type conversion based on the declared type annotations. | Class Attribute | Environment Variable | Type Conversion | Example | | ----------------------- | -------------------- | ---------------- | --------------------- | | `app_name: str` | `APP_NAME` | String | `\"FastAPI App\"` | | `debug: bool` | `DEBUG` | Boolean parsing | `\"true\"` → `True` | | `items_per_user: int` | `ITEMS_PER_USER` | Integer parsing | `\"50\"` → `50` | | `admin_email: EmailStr` | `ADMIN_EMAIL` | Email validation | `\"admin@example.com\"` | | `database_url: str` | `DATABASE_URL` | String | `\"postgresql://...\"` | The mapping follows Python naming conventions (snake\\_case) for attributes while accepting standard environment variable naming (UPPER\\_CASE). Sources: [docs/en/docs/advanced/settings.md87-89](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L87-L89) ## Settings Integration Patterns ### Module-Level Settings The simplest pattern creates a settings instance at module level that can be imported across the application: ``` ``` This pattern works for simple applications but creates global state that complicates testing. Sources: [docs/en/docs/advanced/settings.md124-139](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L124-L139) ### Dependency Injection Pattern The recommended pattern uses FastAPI's dependency system with `Depends()` to inject settings into path operations. This enables testing through dependency overrides and performance optimization through caching. **Settings Dependency Implementation** ``` ``` This pattern provides clean separation of concerns and supports dependency overrides for testing. Sources: [docs/en/docs/advanced/settings.md141-182](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L141-L182) [docs/en/docs/advanced/settings.md250-275](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L250-L275) ## Configuration Sources ### Environment Variables `BaseSettings` automatically reads environment variables as the primary configuration source. All environment variables are initially strings and are converted to declared types through Pydantic's type conversion system. ### .env File Integration The system supports `.env` files through `python-dotenv` integration, configured via `SettingsConfigDict`: ``` ``` **Configuration Source Resolution** ``` ``` Configuration follows a strict precedence: environment variables override `.env` file values, which override class defaults. Sources: [docs/en/docs/advanced/settings.md183-249](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L183-L249) ## Performance Optimization with @lru\\_cache ### LRU Cache Implementation The `@lru_cache` decorator from `functools` prevents repeated `Settings()` instantiation and file system access, providing significant performance benefits for frequently accessed configuration. ``` ``` **@lru\\_cache Optimization Flow** ``` ``` The `@lru_cache` decorator ensures `Settings()` is only called once, eliminating repeated file I/O and object instantiation overhead. Sources: [docs/en/docs/advanced/settings.md250-339](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L250-L339) ## Testing Patterns ### Dependency Overrides for Testing The dependency injection pattern enables clean testing through `app.dependency_overrides`, allowing test-specific configuration without modifying global state. ``` ``` **Testing Override Pattern** ``` ``` This pattern ensures test isolation and enables testing with different configuration scenarios. Sources: [docs/en/docs/advanced/settings.md173-182](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L173-L182) ## Security Considerations Settings management often involves sensitive configuration like database credentials, API keys, and secret tokens. The system supports secure practices through:",
  "- Environment variable isolation from code - `.env` file exclusion from version control - Type validation preventing configuration errors - Dependency injection enabling secure testing practices For specific security implementations, see [Security Components](fastapi/fastapi/2.5-security-components.md) which covers OAuth2, JWT tokens, and authentication configuration patterns. Sources: [docs/en/docs/advanced/settings.md1-7](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L1-L7) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Settings Management](#settings-management.md) - [BaseSettings Architecture](#basesettings-architecture.md) - [BaseSettings Class Implementation](#basesettings-class-implementation.md) - [Settings Class Definition](#settings-class-definition.md) - [Environment Variable Mapping](#environment-variable-mapping.md) - [Settings Integration Patterns](#settings-integration-patterns.md) - [Module-Level Settings](#module-level-settings.md) - [Dependency Injection Pattern](#dependency-injection-pattern.md) - [Configuration Sources](#configuration-sources.md) - [Environment Variables](#environment-variables.md) - [.env File Integration](#env-file-integration.md) - [Performance Optimization with @lru\\_cache](#performance-optimization-with-lru_cache.md) - [LRU Cache Implementation](#lru-cache-implementation.md) - [Testing Patterns](#testing-patterns.md) - [Dependency Overrides for Testing](#dependency-overrides-for-testing.md) - [Security Considerations](#security-considerations.md)",
  "Deployment and Production Considerations | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Deployment and Production Considerations Relevant source files",
  "- [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py) ## Purpose and Scope This document covers deployment and production configuration for FastAPI applications, focusing on proxy integration, HTTPS handling, environment management, and production-ready response configuration. For information about background tasks and async processing patterns, see [Background Tasks](fastapi/fastapi/4.3-background-tasks.md). For database integration patterns in production, see [Database Integration](fastapi/fastapi/4.2-database-integration.md). The material addresses the infrastructure layer concerns that arise when deploying FastAPI applications behind reverse proxies, load balancers, and TLS termination points in production environments. ## Proxy Configuration ### Proxy Forwarded Headers FastAPI applications commonly run behind reverse proxies like Traefik, Nginx, or cloud load balancers. These proxies forward requests to the application server but modify request metadata in the process. **Proxy Header Mechanism** ``` ``` The proxy sets three critical headers: - `X-Forwarded-For`: Original client IP address - `X-Forwarded-Proto`: Original protocol (`https`) - `X-Forwarded-Host`: Original host domain For security, FastAPI CLI requires explicit configuration to trust these headers using the `--forwarded-allow-ips` option. In production behind a trusted proxy, this is typically set to `--forwarded-allow-ips=\"*\"`. Sources: [docs/en/docs/advanced/behind-a-proxy.md7-99](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md#L7-L99) [docs/en/docs/deployment/https.md193-223](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md#L193-L223) ### Root Path Configuration",
  "When applications are mounted under a path prefix (e.g., `/api/v1`), the `root_path` mechanism ensures correct URL generation for OpenAPI schemas and redirects. **Root Path Architecture** ``` ``` The `root_path` parameter can be configured in two ways: 1. **CLI Option**: `fastapi run --root-path /api/v1` 2. **Application Parameter**: `FastAPI(root_path=\"/api/v1\")` The application uses `request.scope[\"root_path\"]` to access the current root path value for URL generation. Sources: [docs/en/docs/advanced/behind-a-proxy.md100-243](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md#L100-L243) [docs\\_src/behind\\_a\\_proxy/tutorial001.py1-9](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001.py#L1-L9) ### TLS Termination Proxies Production deployments typically use TLS termination proxies to handle certificate management and encryption/decryption, allowing the FastAPI application to operate over plain HTTP internally. **TLS Termination Flow** ``` ``` This architecture provides several benefits: - Certificate management centralized in proxy - Application server remains simple (HTTP only) - Support for multiple domains/certificates via SNI - Automatic certificate renewal without application downtime Sources: [docs/en/docs/deployment/https.md36-192](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md#L36-L192) [docs/en/docs/advanced/behind-a-proxy.md252-366](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md#L252-L366) ## HTTPS and Certificate Management ### Certificate Handling HTTPS certificates in production are typically managed by the TLS termination proxy rather than the FastAPI application directly. The proxy handles the TLS handshake and certificate validation process. **Certificate Lifecycle Management** ``` ``` Certificate properties: - **Domain Association**: Certificates are tied to specific domains, not IP addresses - **Expiration**: Typically 90 days for Let's Encrypt certificates - **Validation**: Requires proof of domain ownership for renewal - **SNI Support**: Single proxy can handle multiple domain certificates Sources: [docs/en/docs/deployment/https.md46-59](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md#L46-L59) [docs/en/docs/deployment/https.md170-192](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md#L170-L192) ### TLS Handshake Process The TLS handshake establishes encrypted communication before HTTP traffic flows. Understanding this process is crucial for debugging production connectivity issues. **TLS Handshake Sequence** ``` ``` Key handshake components: - **SNI Extension**: Allows proxy to select correct certificate for domain - **Certificate Verification**: Client validates certificate against trusted authorities - **Key Exchange**: Establishes symmetric encryption keys for session - **HTTP Over TLS**: Application-layer HTTP runs over encrypted TCP connection Sources: [docs/en/docs/deployment/https.md90-129](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md#L90-L129) [docs/en/docs/deployment/https.md130-159](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md#L130-L159) ## Environment and Settings Management ### Pydantic Settings Production FastAPI applications use `pydantic-settings` for configuration management, allowing environment variables to be validated and type-converted automatically. **Settings Architecture** ``` ``` Key configuration patterns: - **Environment Variables**: Automatically read and converted to appropriate types - **Dependency Injection**: Settings provided via dependency for easy testing overrides - **Caching**: `@lru_cache` decorator prevents repeated file reads - **Validation**: Pydantic validation rules applied to all configuration values Sources: [docs/en/docs/advanced/settings.md55-122](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L55-L122) [docs/en/docs/advanced/settings.md141-182](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L141-L182) ### Environment Variables Production deployments typically separate configuration from code using environment variables or `.env` files. **Configuration Loading Process** ``` ``` Configuration best practices:",
  "- **Separation**: Keep secrets in environment variables, not code - **Type Safety**: Use Pydantic models for automatic validation and conversion - **Testing**: Override settings via dependency injection in tests - **Performance**: Cache settings object to avoid repeated environment reads Sources: [docs/en/docs/advanced/settings.md183-275](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L183-L275) [docs/en/docs/advanced/settings.md250-275](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md#L250-L275) ## Production Deployment Patterns ### Common Architectures Production FastAPI deployments follow established patterns that separate concerns between proxy handling, application serving, and data storage. **Multi-Service Production Architecture** ``` ``` Architecture components: - **Load Balancer**: Distributes traffic across multiple proxy instances - **Reverse Proxy**: Handles TLS termination, static file serving, request routing - **Application Instances**: Multiple FastAPI processes for horizontal scaling - **Shared Data Layer**: Database and cache accessible to all application instances Sources: [docs/en/docs/deployment/https.md160-169](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md#L160-L169) [docs/en/docs/advanced/behind-a-proxy.md387-458](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md#L387-L458) ### Response Configuration Production applications often require custom response handling for performance, caching, or format requirements. **Response Class Hierarchy** ``` ``` Production response considerations: - **Performance**: `ORJSONResponse` for high-throughput JSON APIs - **Streaming**: `StreamingResponse` for large files or real-time data - **Custom Headers**: Direct `Response` usage for cache control, CORS - **Default Response Class**: Set at application level via `default_response_class` Sources: [docs/en/docs/advanced/custom-response.md21-49](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md#L21-L49) [docs/en/docs/advanced/custom-response.md216-246](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md#L216-L246) [docs/en/docs/advanced/custom-response.md295-309](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md#L295-L309) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Deployment and Production Considerations](#deployment-and-production-considerations.md) - [Purpose and Scope](#purpose-and-scope.md) - [Proxy Configuration](#proxy-configuration.md) - [Proxy Forwarded Headers](#proxy-forwarded-headers.md) - [Root Path Configuration](#root-path-configuration.md) - [TLS Termination Proxies](#tls-termination-proxies.md) - [HTTPS and Certificate Management](#https-and-certificate-management.md) - [Certificate Handling](#certificate-handling.md) - [TLS Handshake Process](#tls-handshake-process.md) - [Environment and Settings Management](#environment-and-settings-management.md) - [Pydantic Settings](#pydantic-settings.md) - [Environment Variables](#environment-variables.md) - [Production Deployment Patterns](#production-deployment-patterns.md) - [Common Architectures](#common-architectures.md) - [Response Configuration](#response-configuration.md)",
  "Application and Routing System | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Application and Routing System Relevant source files",
  "- [docs/en/docs/advanced/additional-responses.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/additional-responses.md) - [docs/en/docs/advanced/behind-a-proxy.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/behind-a-proxy.md) - [docs/en/docs/advanced/custom-response.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/custom-response.md) - [docs/en/docs/advanced/path-operation-advanced-configuration.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/path-operation-advanced-configuration.md) - [docs/en/docs/advanced/response-directly.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/response-directly.md) - [docs/en/docs/advanced/settings.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/advanced/settings.md) - [docs/en/docs/deployment/https.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/deployment/https.md) - [docs/en/docs/release-notes.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/release-notes.md) - [docs\\_src/additional\\_responses/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/additional_responses/tutorial001.py) - [docs\\_src/behind\\_a\\_proxy/tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/behind_a_proxy/tutorial001_01.py) - [docs\\_src/custom\\_response/tutorial001b.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial001b.py) - [docs\\_src/custom\\_response/tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial009c.py) - [docs\\_src/custom\\_response/tutorial010.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_response/tutorial010.py) - [fastapi/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py) - [fastapi/applications.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py) - [fastapi/dependencies/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py) - [fastapi/dependencies/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py) - [fastapi/encoders.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/encoders.py) - [fastapi/openapi/models.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/models.py) - [fastapi/openapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py) - [fastapi/param\\_functions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/param_functions.py) - [fastapi/params.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/params.py) - [fastapi/routing.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py) - [fastapi/security/api\\_key.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/api_key.py) - [fastapi/security/http.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/http.py) - [fastapi/security/oauth2.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/oauth2.py) - [fastapi/security/open\\_id\\_connect\\_url.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/security/open_id_connect_url.py) - [fastapi/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/utils.py) - [tests/test\\_datetime\\_custom\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_datetime_custom_encoder.py) - [tests/test\\_jsonable\\_encoder.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_jsonable_encoder.py) - [tests/test\\_tutorial/test\\_behind\\_a\\_proxy/test\\_tutorial001\\_01.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_behind_a_proxy/test_tutorial001_01.py) - [tests/test\\_tutorial/test\\_custom\\_response/test\\_tutorial009c.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_response/test_tutorial009c.py)",
  "This document covers FastAPI's application and routing system, including the core `FastAPI` application class, route organization through `APIRouter`, individual route handling via `APIRoute` and `APIWebSocketRoute`, and the request processing pipeline. For information about dependency injection mechanics, see [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md). For details about parameter validation and handling, see [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md). ## FastAPI Application Class The `FastAPI` class serves as the main application entry point, inheriting from Starlette's `Starlette` class while adding FastAPI-specific functionality including automatic API documentation, dependency injection, and enhanced routing capabilities. ### Application Structure ``` ``` The `FastAPI` constructor accepts extensive configuration options for OpenAPI documentation, CORS, middleware, and routing behavior. Key configuration includes `title`, `description`, `version` for API metadata, `docs_url` and `redoc_url` for documentation endpoints, and `default_response_class` for response handling. Sources: [fastapi/applications.py48-640](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L48-L640) [fastapi/\\_\\_init\\_\\_.py7](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/__init__.py#L7-L7) ### Route Definition Methods The `FastAPI` class provides HTTP method decorators that create `APIRoute` instances: ``` ``` Each decorator method creates an `APIRoute` instance with the specified HTTP method, path, and endpoint function, then adds it to the application's router. Sources: [fastapi/applications.py697-1007](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L697-L1007) ## APIRouter System The `APIRouter` class enables modular route organization by grouping related path operations that can be included in the main application or other routers. ### Router Hierarchy ``` ``` The `APIRouter` constructor accepts parameters including `prefix` for path prefixing, `tags` for OpenAPI organization, `dependencies` for shared dependencies, and `default_response_class` for response handling. Sources: [fastapi/routing.py596-621](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L596-L621) [fastapi/routing.py623-740](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L623-L740) ### Router Registration The `include_router` method merges an `APIRouter` into the application by copying its routes and applying prefix, tag, and dependency transformations: | Parameter | Purpose | Example | | -------------- | --------------------------------- | ----------------------------- | | `router` | APIRouter instance to include | `user_router` | | `prefix` | Path prefix for all routes | `\"/api/v1\"` | | `tags` | OpenAPI tags to apply | `[\"users\"]` | | `dependencies` | Dependencies to add to all routes | `[Depends(get_current_user)]` | Sources: [fastapi/applications.py1009-1106](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/applications.py#L1009-L1106) ## Route Classes ### APIRoute The `APIRoute` class represents individual HTTP endpoints, handling path compilation, dependency analysis, and request processing setup. ``` ``` The `APIRoute` constructor analyzes the endpoint function signature using `get_dependant()` to extract parameter information and build the dependency tree. Sources: [fastapi/routing.py429-593](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L429-L593) ### APIWebSocketRoute The `APIWebSocketRoute` class handles WebSocket connections with similar dependency resolution but different connection lifecycle: ``` ``` Sources: [fastapi/routing.py389-427](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L389-L427) ## Request Processing Pipeline ### Request Handler Creation The `get_request_handler` function creates the actual ASGI application that processes HTTP requests: ``` ``` Sources: [fastapi/routing.py218-358](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L218-L358) ### Request Flow The generated request handler follows this processing sequence: ``` ```",
  "Sources: [fastapi/routing.py241-356](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L241-L356) [fastapi/dependencies/utils.py572-689](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L572-L689) ## Route Registration Process ### Route Creation and Registration When routes are defined using decorators, the following process occurs: ``` ``` The route registration process includes path compilation using Starlette's `compile_path`, dependency analysis via `get_dependant`, and OpenAPI schema preparation. Sources: [fastapi/routing.py430-571](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L430-L571) [fastapi/dependencies/utils.py265-314](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L265-L314) ### Dependency Tree Construction The `get_dependant` function recursively builds a dependency tree by analyzing function signatures: | Component | Purpose | Location | | --------------- | ------------------------ | ------------------------- | | `path_params` | URL path parameters | `dependant.path_params` | | `query_params` | Query string parameters | `dependant.query_params` | | `header_params` | HTTP header parameters | `dependant.header_params` | | `cookie_params` | Cookie parameters | `dependant.cookie_params` | | `body_params` | Request body parameters | `dependant.body_params` | | `dependencies` | Sub-dependency functions | `dependant.dependencies` | Sources: [fastapi/dependencies/utils.py265-314](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/utils.py#L265-L314) [fastapi/dependencies/models.py15-37](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/dependencies/models.py#L15-L37) ## OpenAPI Integration ### Schema Generation The routing system automatically generates OpenAPI schemas through the `get_openapi_path` function: ``` ``` Each `APIRoute` contributes to the OpenAPI schema by providing operation metadata, parameter schemas, request/response body schemas, and security definitions. Sources: [fastapi/openapi/utils.py254-439](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/utils.py#L254-L439) ### Route Matching The route matching process uses Starlette's routing system with FastAPI enhancements: ``` ``` The `matches` method on `APIRoute` and `APIWebSocketRoute` determines if a route should handle a specific request based on path pattern and HTTP method. Sources: [fastapi/routing.py589-593](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L589-L593) [fastapi/routing.py422-426](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/routing.py#L422-L426) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Application and Routing System](#application-and-routing-system.md) - [FastAPI Application Class](#fastapi-application-class.md) - [Application Structure](#application-structure.md) - [Route Definition Methods](#route-definition-methods.md) - [APIRouter System](#apirouter-system.md) - [Router Hierarchy](#router-hierarchy.md) - [Router Registration](#router-registration.md) - [Route Classes](#route-classes.md) - [APIRoute](#apiroute.md) - [APIWebSocketRoute](#apiwebsocketroute.md) - [Request Processing Pipeline](#request-processing-pipeline.md) - [Request Handler Creation](#request-handler-creation.md) - [Request Flow](#request-flow.md) - [Route Registration Process](#route-registration-process.md) - [Route Creation and Registration](#route-creation-and-registration.md) - [Dependency Tree Construction](#dependency-tree-construction.md) - [OpenAPI Integration](#openapi-integration.md) - [Schema Generation](#schema-generation.md) - [Route Matching](#route-matching.md)",
  "Customizing API Documentation UI | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Customizing API Documentation UI Relevant source files - [docs/de/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/how-to/custom-docs-ui-assets.md) - [docs/en/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md) - [docs/es/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/how-to/custom-docs-ui-assets.md) - [docs/pt/docs/how-to/custom-docs-ui-assets.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/how-to/custom-docs-ui-assets.md) - [docs\\_src/custom\\_docs\\_ui/tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py) - [fastapi/openapi/docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py) - [tests/test\\_local\\_docs.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_local_docs.py) - [tests/test\\_tutorial/test\\_custom\\_docs\\_ui/test\\_tutorial001.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py)",
  "This document covers the customization of FastAPI's interactive API documentation interfaces, specifically Swagger UI and ReDoc. It explains how to modify asset loading, customize appearance parameters, and implement self-hosted documentation assets. For information about the automatic generation of OpenAPI schemas that power these documentation interfaces, see [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md). ## Documentation UI Architecture FastAPI provides two built-in documentation interfaces that consume OpenAPI schemas to generate interactive API documentation. The system allows flexible customization of both the visual presentation and asset delivery. ``` ``` **Documentation UI Generation Flow** Sources: [fastapi/openapi/docs.py26-158](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L26-L158) [fastapi/openapi/docs.py161-253](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L161-L253) ## Core Documentation Functions The documentation system centers around three primary functions that generate HTML responses for different documentation interfaces. ### Swagger UI Generation The `get_swagger_ui_html()` function creates the complete HTML page for Swagger UI documentation. It accepts multiple customization parameters and generates a self-contained HTML response. ``` ``` **Swagger UI Parameter Flow** Sources: [fastapi/openapi/docs.py26-158](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L26-L158) [fastapi/openapi/docs.py8-23](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L8-L23) ### ReDoc Generation The `get_redoc_html()` function provides an alternative documentation interface with different styling and layout characteristics. | Parameter | Type | Default | Purpose | | ------------------- | ------ | --------------- | ----------------------- | | `openapi_url` | `str` | Required | OpenAPI schema endpoint | | `title` | `str` | Required | HTML page title | | `redoc_js_url` | `str` | CDN URL | ReDoc JavaScript bundle | | `redoc_favicon_url` | `str` | FastAPI favicon | Page favicon | | `with_google_fonts` | `bool` | `True` | Load Google Fonts CSS | Sources: [fastapi/openapi/docs.py161-253](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L161-L253) ## Asset Delivery Strategies FastAPI supports three primary approaches for delivering documentation assets: default CDN, custom CDN, and self-hosting. ### Default CDN Configuration By default, FastAPI loads documentation assets from public CDNs: - Swagger UI JavaScript: `https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js` - Swagger UI CSS: `https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css` - ReDoc JavaScript: `https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js` Sources: [fastapi/openapi/docs.py56](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L56-L56) [fastapi/openapi/docs.py66](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L66-L66) [fastapi/openapi/docs.py191](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L191-L191) ### Custom CDN Implementation To use alternative CDNs, applications must disable default documentation endpoints and create custom path operations. ``` ``` **Custom CDN Setup Flow** Sources: [docs\\_src/custom\\_docs\\_ui/tutorial001.py8](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L8-L8) [docs\\_src/custom\\_docs\\_ui/tutorial001.py11-19](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L11-L19) [docs\\_src/custom\\_docs\\_ui/tutorial001.py27-33](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L27-L33) ### Self-Hosting Static Files Self-hosting involves serving documentation assets directly from the FastAPI application using `StaticFiles` mounting. Required static files: - `swagger-ui-bundle.js` - `swagger-ui.css` - `redoc.standalone.js`",
  "Sources: [docs/en/docs/how-to/custom-docs-ui-assets.md94-101](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/how-to/custom-docs-ui-assets.md#L94-L101) ## Swagger UI Configuration Parameters The `swagger_ui_default_parameters` dictionary defines the base configuration for Swagger UI behavior and appearance. ### Default Configuration ``` ``` **Swagger UI Parameter Merging** Sources: [fastapi/openapi/docs.py17-23](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L17-L23) [fastapi/openapi/docs.py113-115](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L113-L115) ### OAuth2 Integration OAuth2 authentication requires special handling through the redirect mechanism and initialization parameters. | Component | Function | Purpose | | --------------------------------------- | --------------------------- | ----------------------------------- | | `oauth2_redirect_url` | OAuth2 callback handling | Processes authentication responses | | `init_oauth` | OAuth2 client configuration | Configures OAuth2 client parameters | | `get_swagger_ui_oauth2_redirect_html()` | Redirect page generation | Handles OAuth2 authorization flow | Sources: [fastapi/openapi/docs.py75-82](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L75-L82) [fastapi/openapi/docs.py84-90](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L84-L90) [fastapi/openapi/docs.py256-344](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/openapi/docs.py#L256-L344) ## Implementation Patterns ### Disabling Default Documentation To implement custom documentation, applications must first disable the default endpoints by setting them to `None` during FastAPI instantiation. Sources: [docs\\_src/custom\\_docs\\_ui/tutorial001.py8](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L8-L8) ### Custom Path Operations Custom documentation requires creating new path operations that call the documentation generation functions with custom parameters. The standard pattern includes three endpoints: - Main documentation endpoint (`/docs`) - Alternative documentation endpoint (`/redoc`) - OAuth2 redirect endpoint (`/docs/oauth2-redirect`) Sources: [docs\\_src/custom\\_docs\\_ui/tutorial001.py11-24](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L11-L24) [docs\\_src/custom\\_docs\\_ui/tutorial001.py27-33](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs_src/custom_docs_ui/tutorial001.py#L27-L33) ### Testing Documentation Customization The test infrastructure validates that custom URLs appear in the generated HTML responses and that OAuth2 redirect functionality operates correctly. Key test validations: - Custom asset URLs in HTML content - OAuth2 redirect JavaScript presence - API endpoint functionality Sources: [tests/test\\_tutorial/test\\_custom\\_docs\\_ui/test\\_tutorial001.py20-42](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py#L20-L42) [tests/test\\_local\\_docs.py18-32](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_local_docs.py#L18-L32) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Customizing API Documentation UI](#customizing-api-documentation-ui.md) - [Documentation UI Architecture](#documentation-ui-architecture.md) - [Core Documentation Functions](#core-documentation-functions.md) - [Swagger UI Generation](#swagger-ui-generation.md) - [ReDoc Generation](#redoc-generation.md) - [Asset Delivery Strategies](#asset-delivery-strategies.md) - [Default CDN Configuration](#default-cdn-configuration.md) - [Custom CDN Implementation](#custom-cdn-implementation.md) - [Self-Hosting Static Files](#self-hosting-static-files.md) - [Swagger UI Configuration Parameters](#swagger-ui-configuration-parameters.md) - [Default Configuration](#default-configuration.md) - [OAuth2 Integration](#oauth2-integration.md) - [Implementation Patterns](#implementation-patterns.md) - [Disabling Default Documentation](#disabling-default-documentation.md) - [Custom Path Operations](#custom-path-operations.md) - [Testing Documentation Customization](#testing-documentation-customization.md)",
  "Test Framework and Tools | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Test Framework and Tools Relevant source files",
  "- [.pre-commit-config.yaml](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml) - [docs/en/docs/tutorial/response-status-code.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/response-status-code.md) - [requirements-tests.txt](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt) - [tests/\\_\\_init\\_\\_.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/__init__.py) - [tests/main.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/main.py) - [tests/test\\_application.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_application.py) - [tests/test\\_path.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_path.py) - [tests/test\\_query.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_query.py) - [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py) - [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py) - [tests/test\\_typing\\_python39.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_typing_python39.py) - [tests/test\\_union\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_body.py) - [tests/test\\_union\\_inherited\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py) - [tests/utils.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py) This document covers FastAPI's comprehensive testing infrastructure, including the test framework setup, testing tools, quality assurance automation, and testing patterns used throughout the codebase. This infrastructure ensures code quality through automated testing, linting, formatting, and type checking. For information about the broader CI/CD pipeline that runs these tests, see [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md). For development workflow and tooling, see [Development Workflow](fastapi/fastapi/6.3-development-workflow.md). ## Testing Framework Overview FastAPI uses a multi-layered testing approach combining pytest, custom test utilities, and quality assurance tools to ensure comprehensive coverage and code quality. ### Core Testing Architecture ``` ``` **Testing Framework Components** The testing infrastructure consists of several integrated components that work together to provide comprehensive test coverage and code quality assurance. Sources: [.pre-commit-config.yaml1-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml#L1-L26) [requirements-tests.txt1-17](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L1-L17) [tests/utils.py1-35](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py#L1-L35) ## Core Testing Tools ### pytest and TestClient Setup The primary testing framework uses `pytest` with FastAPI's `TestClient` for HTTP endpoint testing: ``` ``` **Key Testing Components** | Component | Purpose | Usage Pattern | | ------------------------- | --------------------- | ------------------------------ | | `TestClient` | HTTP endpoint testing | `client = TestClient(app)` | | `pytest.mark.parametrize` | Test parameterization | Version-specific test variants | | `dirty_equals.IsDict` | Flexible assertions | Pydantic version compatibility | | `inline_snapshot` | Snapshot testing | Large response validation | Sources: [requirements-tests.txt3-17](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L3-L17) [tests/test\\_application.py3-7](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_application.py#L3-L7) [tests/test\\_query.py1-6](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_query.py#L1-L6) ### Test Application Structure The main test application serves as a comprehensive example for testing various FastAPI features: ``` ``` **Route Coverage Patterns**",
  "The test application systematically covers different parameter types, validation constraints, and routing methods to ensure comprehensive testing of FastAPI's core functionality. Sources: [tests/main.py1-205](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/main.py#L1-L205) [tests/test\\_application.py10-22](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_application.py#L10-L22) ## Testing Patterns and Utilities ### Version Compatibility Testing FastAPI maintains compatibility across multiple Python and Pydantic versions using custom test markers: ``` ``` **Version-Specific Testing Implementation** ``` ``` Sources: [tests/utils.py7-35](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/utils.py#L7-L35) [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py17-31](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py#L17-L31) ### Assertion Strategies FastAPI tests use multiple assertion libraries to handle different testing scenarios: ``` ``` **Example Assertion Patterns** The testing framework uses sophisticated assertion patterns to handle cross-version compatibility: ``` ``` Sources: [tests/test\\_query.py12-34](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_query.py#L12-L34) [tests/test\\_path.py48-70](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_path.py#L48-L70) [tests/test\\_union\\_inherited\\_body.py89-98](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_union_inherited_body.py#L89-L98) ## Quality Assurance Tools ### Pre-commit Hook Configuration The project uses pre-commit hooks to ensure code quality before commits: ``` ``` **Pre-commit Tool Configuration** | Tool | Version | Purpose | | ------------------ | -------- | --------------------- | | `ruff` | v0.12.10 | Linting with auto-fix | | `ruff-format` | v0.12.10 | Code formatting | | `pre-commit-hooks` | v6.0.0 | File validation | Sources: [.pre-commit-config.yaml1-26](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml#L1-L26) ### Static Analysis Integration The testing infrastructure includes static analysis tools for comprehensive code quality: ``` ``` **Quality Metrics and Enforcement** The testing framework enforces quality standards through multiple layers of automated checking, ensuring consistent code quality across the entire codebase. Sources: [requirements-tests.txt5-17](https://github.com/fastapi/fastapi/blob/3e2dbf91/requirements-tests.txt#L5-L17) [.pre-commit-config.yaml16-22](https://github.com/fastapi/fastapi/blob/3e2dbf91/.pre-commit-config.yaml#L16-L22) ## Test Organization and Execution ### Test Module Structure FastAPI organizes tests into logical modules that mirror the framework's feature areas: ``` ``` **Test Execution Patterns** Each test module follows consistent patterns for setup, execution, and assertion, making the test suite maintainable and predictable. Sources: [tests/test\\_application.py1-53](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_application.py#L1-L53) [tests/test\\_query.py1-422](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_query.py#L1-L422) [tests/test\\_path.py1-1005](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_path.py#L1-L1005) [tests/test\\_tutorial/test\\_sql\\_databases/test\\_tutorial002.py1-482](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_sql_databases/test_tutorial002.py#L1-L482) ### Parametrized Testing Strategy The framework extensively uses pytest parametrization for comprehensive coverage: ``` ``` **Example Parametrized Test Structure** ``` ``` Sources: [tests/test\\_application.py10-22](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_application.py#L10-L22) [tests/test\\_tutorial/test\\_cookie\\_param\\_models/test\\_tutorial002.py17-36](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_cookie_param_models/test_tutorial002.py#L17-L36) Dismiss",
  "Refresh this wiki Enter email to refresh ### On this page - [Test Framework and Tools](#test-framework-and-tools.md) - [Testing Framework Overview](#testing-framework-overview.md) - [Core Testing Architecture](#core-testing-architecture.md) - [Core Testing Tools](#core-testing-tools.md) - [pytest and TestClient Setup](#pytest-and-testclient-setup.md) - [Test Application Structure](#test-application-structure.md) - [Testing Patterns and Utilities](#testing-patterns-and-utilities.md) - [Version Compatibility Testing](#version-compatibility-testing.md) - [Assertion Strategies](#assertion-strategies.md) - [Quality Assurance Tools](#quality-assurance-tools.md) - [Pre-commit Hook Configuration](#pre-commit-hook-configuration.md) - [Static Analysis Integration](#static-analysis-integration.md) - [Test Organization and Execution](#test-organization-and-execution.md) - [Test Module Structure](#test-module-structure.md) - [Parametrized Testing Strategy](#parametrized-testing-strategy.md)",
  "Error Handling | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Error Handling Relevant source files",
  "- [docs/en/docs/tutorial/background-tasks.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md) - [docs/en/docs/tutorial/extra-data-types.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/extra-data-types.md) - [docs/en/docs/tutorial/handling-errors.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md) - [docs/en/docs/tutorial/security/first-steps.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/first-steps.md) - [docs/en/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/oauth2-jwt.md) - [docs/en/docs/tutorial/security/simple-oauth2.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/security/simple-oauth2.md) - [docs/en/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md) - [docs/ja/docs/tutorial/security/oauth2-jwt.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/tutorial/security/oauth2-jwt.md) - [docs/pt/docs/tutorial/cookie-param-models.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/tutorial/cookie-param-models.md) - [docs/zh/docs/tutorial/sql-databases.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/tutorial/sql-databases.md) - [fastapi/exception\\_handlers.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exception_handlers.py) - [fastapi/exceptions.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py) - [tests/test\\_multi\\_body\\_errors.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_multi_body_errors.py) - [tests/test\\_multi\\_query\\_errors.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_multi_query_errors.py) - [tests/test\\_put\\_no\\_body.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_put_no_body.py) - [tests/test\\_tutorial/test\\_handling\\_errors/test\\_tutorial003.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_handling_errors/test_tutorial003.py) - [tests/test\\_tutorial/test\\_handling\\_errors/test\\_tutorial004.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_handling_errors/test_tutorial004.py) - [tests/test\\_tutorial/test\\_handling\\_errors/test\\_tutorial005.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_handling_errors/test_tutorial005.py) - [tests/test\\_tutorial/test\\_handling\\_errors/test\\_tutorial006.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_tutorial/test_handling_errors/test_tutorial006.py) - [tests/test\\_ws\\_router.py](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_ws_router.py) FastAPI implements a comprehensive exception hierarchy and handler system that manages errors from request validation, application logic, and WebSocket connections. The system centers around specific exception classes and handler functions that process different error types while maintaining automatic OpenAPI documentation integration. For information about parameter validation that triggers errors, see [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md). For broader request processing context, see [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md). ## Exception Class Hierarchy FastAPI defines a complete exception hierarchy that extends Starlette's base exceptions while adding framework-specific error handling capabilities. ### Core Exception Classes ``` ``` **FastAPI Exception Class Hierarchy with Code Entity Names** Sources: [fastapi/exceptions.py9-177](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L9-L177)",
  "The `HTTPException` class [fastapi/exceptions.py9-66](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L9-L66) extends Starlette's version to accept any JSON-serializable data in the `detail` field, while `WebSocketException` [fastapi/exceptions.py68-137](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L68-L137) provides WebSocket-specific error handling with RFC 6455 compliant close codes. ### Validation Exception Architecture ``` ``` **Validation Exception Structure with Actual Class Methods** Sources: [fastapi/exceptions.py149-177](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L149-L177) The `ValidationException` base class [fastapi/exceptions.py149-155](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L149-L155) provides the `errors()` method interface, while `RequestValidationError` [fastapi/exceptions.py157-161](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L157-L161) and `ResponseValidationError` [fastapi/exceptions.py167-177](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exceptions.py#L167-L177) store the invalid request/response body for debugging purposes. ## Exception Handlers FastAPI provides default exception handlers for framework exceptions and enables registration of custom handlers for application-specific error processing. ### Default Exception Handler Functions ``` ``` **Default Exception Handler Function Signatures** Sources: [fastapi/exception\\_handlers.py11-35](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exception_handlers.py#L11-L35) The `http_exception_handler` [fastapi/exception\\_handlers.py11-18](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exception_handlers.py#L11-L18) uses `is_body_allowed_for_status_code()` to determine response format, while `request_validation_exception_handler` [fastapi/exception\\_handlers.py20-27](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exception_handlers.py#L20-L27) returns 422 status with `jsonable_encoder(exc.errors())`. WebSocket validation errors [fastapi/exception\\_handlers.py29-35](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exception_handlers.py#L29-L35) close the connection with `WS_1008_POLICY_VIOLATION`. ### Custom Exception Handler Registration ``` ``` **Exception Handler Registration with Actual Import Paths** Sources: [docs/en/docs/tutorial/handling-errors.md82-102](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L82-L102) [docs/en/docs/tutorial/handling-errors.md249-256](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L249-L256) Custom handlers are registered with `@app.exception_handler()` and can import default handlers from `fastapi.exception_handlers` for reuse. Registering handlers for Starlette exceptions catches both FastAPI and Starlette internal exceptions. ### WebSocket Exception Handling ``` ``` **WebSocket Exception Handling Flow with Status Codes** Sources: [tests/test\\_ws\\_router.py210-272](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_ws_router.py#L210-L272) [fastapi/exception\\_handlers.py29-35](https://github.com/fastapi/fastapi/blob/3e2dbf91/fastapi/exception_handlers.py#L29-L35) WebSocket validation errors trigger `WS_1008_POLICY_VIOLATION` close codes, while custom WebSocket exception handlers [tests/test\\_ws\\_router.py257-272](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_ws_router.py#L257-L272) can define custom close codes and reasons. WebSocket middleware can catch dependency errors [tests/test\\_ws\\_router.py236-255](https://github.com/fastapi/fastapi/blob/3e2dbf91/tests/test_ws_router.py#L236-L255) ## Error Response Integration Error handling integrates with FastAPI's broader request processing pipeline and OpenAPI documentation generation. ### Error Flow in Request Processing Pipeline ``` ```",
  "**Error Handling Integration with Request Processing** Sources: [docs/en/docs/tutorial/handling-errors.md1-256](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L1-L256) [docs/en/docs/tutorial/dependencies/index.md32-42](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/dependencies/index.md#L32-L42) Errors can occur at multiple stages of request processing: during parameter validation, dependency injection, or within path operation functions. Each error type is handled by appropriate handlers that can be customized or extended while maintaining the overall request processing flow. ### Exception Handler Inheritance and Reuse ``` ``` **Exception Handler Reuse Pattern** Sources: [docs/en/docs/tutorial/handling-errors.md249-256](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L249-L256) FastAPI provides importable default exception handlers from `fastapi.exception_handlers` that can be reused within custom exception handling logic. This allows developers to add custom processing (like logging) while maintaining standard error response formats. ## OpenAPI Documentation Integration Error responses declared in exception handlers and path operations are automatically included in the generated OpenAPI schema, providing comprehensive API documentation that includes both success and error scenarios. ``` ``` **Error Documentation Generation Flow** Sources: [docs/en/docs/tutorial/handling-errors.md1-256](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/handling-errors.md#L1-L256) [docs/en/docs/tutorial/query-params-str-validations.md104-109](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/query-params-str-validations.md#L104-L109) The framework automatically generates OpenAPI documentation for validation errors (422 responses) and incorporates custom error responses defined in path operations. This ensures that API consumers have complete information about both successful and error response formats. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Error Handling](#error-handling.md) - [Exception Class Hierarchy](#exception-class-hierarchy.md) - [Core Exception Classes](#core-exception-classes.md) - [Validation Exception Architecture](#validation-exception-architecture.md) - [Exception Handlers](#exception-handlers.md) - [Default Exception Handler Functions](#default-exception-handler-functions.md) - [Custom Exception Handler Registration](#custom-exception-handler-registration.md) - [WebSocket Exception Handling](#websocket-exception-handling.md) - [Error Response Integration](#error-response-integration.md) - [Error Flow in Request Processing Pipeline](#error-flow-in-request-processing-pipeline.md) - [Exception Handler Inheritance and Reuse](#exception-handler-inheritance-and-reuse.md) - [OpenAPI Documentation Integration](#openapi-documentation-integration.md)",
  "Advanced Features | fastapi/fastapi | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [fastapi/fastapi](https://github.com/fastapi/fastapi \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 5 September 2025 ([3e2dbf](https://github.com/fastapi/fastapi/commits/3e2dbf91)) - [FastAPI Overview](fastapi/fastapi/1-fastapi-overview.md) - [Core Architecture](fastapi/fastapi/2-core-architecture.md) - [Application and Routing System](fastapi/fastapi/2.1-application-and-routing-system.md) - [Dependency Injection](fastapi/fastapi/2.2-dependency-injection.md) - [Parameter Validation and Handling](fastapi/fastapi/2.3-parameter-validation-and-handling.md) - [Response Handling](fastapi/fastapi/2.4-response-handling.md) - [Security Components](fastapi/fastapi/2.5-security-components.md) - [Settings Management](fastapi/fastapi/2.6-settings-management.md) - [Error Handling](fastapi/fastapi/2.7-error-handling.md) - [API Documentation System](fastapi/fastapi/3-api-documentation-system.md) - [OpenAPI Schema Generation](fastapi/fastapi/3.1-openapi-schema-generation.md) - [Customizing API Documentation UI](fastapi/fastapi/3.2-customizing-api-documentation-ui.md) - [Advanced Features](fastapi/fastapi/4-advanced-features.md) - [Asynchronous Support](fastapi/fastapi/4.1-asynchronous-support.md) - [Database Integration](fastapi/fastapi/4.2-database-integration.md) - [Background Tasks](fastapi/fastapi/4.3-background-tasks.md) - [Deployment and Production Considerations](fastapi/fastapi/4.4-deployment-and-production-considerations.md) - [Testing Infrastructure](fastapi/fastapi/5-testing-infrastructure.md) - [Test Framework and Tools](fastapi/fastapi/5.1-test-framework-and-tools.md) - [Code Quality and Pre-commit](fastapi/fastapi/5.2-code-quality-and-pre-commit.md) - [Project Infrastructure](fastapi/fastapi/6-project-infrastructure.md) - [Documentation System](fastapi/fastapi/6.1-documentation-system.md) - [CI/CD Pipeline](fastapi/fastapi/6.2-cicd-pipeline.md) - [Development Workflow](fastapi/fastapi/6.3-development-workflow.md) - [Community Ecosystem](fastapi/fastapi/7-community-ecosystem.md) - [Contributors and Experts Management](fastapi/fastapi/7.1-contributors-and-experts-management.md) - [Translation Management](fastapi/fastapi/7.2-translation-management.md) - [External Resources and Sponsorship](fastapi/fastapi/7.3-external-resources-and-sponsorship.md) - [Community Automation](fastapi/fastapi/7.4-community-automation.md) Menu # Advanced Features Relevant source files",
  "- [docs/de/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/de/docs/async.md) - [docs/em/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/em/docs/async.md) - [docs/en/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md) - [docs/es/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/async.md) - [docs/fa/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fa/docs/async.md) - [docs/fr/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/fr/docs/async.md) - [docs/ja/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ja/docs/async.md) - [docs/ko/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ko/docs/async.md) - [docs/pt/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/pt/docs/async.md) - [docs/ru/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/ru/docs/async.md) - [docs/tr/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/tr/docs/async.md) - [docs/zh/docs/async.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/zh/docs/async.md) This document covers advanced FastAPI capabilities designed for complex, production-ready applications. These features enable sophisticated request processing, database integration, asynchronous operations, and advanced response handling patterns that go beyond basic CRUD operations. For core framework concepts like routing and dependency injection, see [Core Architecture](fastapi/fastapi/2-core-architecture.md). For API documentation features, see [API Documentation System](fastapi/fastapi/3-api-documentation-system.md). ## Asynchronous Programming Support FastAPI provides comprehensive asynchronous programming support through Python's coroutine system, leveraging Starlette's ASGI foundation and AnyIO compatibility for high-concurrency applications. ### Path Operation Function Execution Model FastAPI automatically detects whether path operation functions are defined with `def` or `async def` and handles execution appropriately. Functions defined with `def` are executed in external threadpool to avoid blocking the event loop, while `async def` functions execute directly in the main event loop. ``` ``` **FastAPI Path Operation Execution Flow** | Function Type | Execution Context | Use Case | Performance Impact | | ------------------------ | ------------------- | ---------------------------- | ---------------------------- | | `def` | External threadpool | CPU-bound, blocking I/O | Prevents event loop blocking | | `async def` | Event loop | Non-blocking I/O, coroutines | Maximum concurrency | | `async def` with `await` | Event loop | Database calls, API requests | Concurrent I/O operations | Sources: [docs/en/docs/async.md416-439](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L416-L439) [docs/en/docs/async.md418-422](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L418-L422) ### Concurrency vs Parallelism Implementation FastAPI distinguishes between concurrency (handling multiple I/O operations simultaneously) and parallelism (utilizing multiple CPU cores). The framework optimizes for web application patterns where requests spend most time waiting for I/O operations. ``` ``` **Concurrency and Parallelism in FastAPI Applications** Sources: [docs/en/docs/async.md96-255](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L96-L255) [docs/en/docs/async.md293-301](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L293-L301) [docs/en/docs/async.md238-254](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L238-L254) ### Dependency System Async Handling FastAPI's dependency injection system seamlessly handles mixed `def` and `async def` dependencies, automatically managing execution contexts and dependency resolution order. ``` ``` **Dependency System Async Execution**",
  "Sources: [docs/en/docs/async.md424-430](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L424-L430) [docs/en/docs/async.md432-438](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L432-L438) ### AnyIO Integration and Compatibility FastAPI and Starlette are built on AnyIO, providing compatibility with both Python's standard `asyncio` and `trio` async libraries. This enables advanced concurrency patterns and structured concurrency approaches. ``` ``` **AnyIO-Based Async Architecture** Sources: [docs/en/docs/async.md364-372](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L364-L372) [docs/en/docs/async.md366-370](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L366-L370) \\</old\\_str> \\<old\\_str> ## Deployment and Production Considerations FastAPI applications require specific configuration and architectural decisions for production deployment, including ASGI server selection, proxy configuration, and performance optimization strategies. ### ASGI Server Architecture FastAPI applications run on ASGI servers that handle the interface between the web server and Python application. The choice of ASGI server and configuration impacts performance, scalability, and feature availability. ``` ``` **ASGI Deployment Architecture** ### Production Deployment Patterns FastAPI supports various deployment strategies depending on application requirements, from single-instance containers to multi-process, load-balanced configurations. ``` ``` **Production Deployment and Scaling Patterns** ### Performance Optimization in Production Production FastAPI applications benefit from specific optimizations including connection pooling, static file serving, caching strategies, and monitoring integration. | Optimization Area | Implementation | Performance Impact | | -------------------- | ----------------------------------------- | --------------------------- | | Database Connections | SQLAlchemy engine with connection pooling | Reduced connection overhead | | Static File Serving | Nginx/CDN for static assets | Faster asset delivery | | Response Caching | Redis/Memcached integration | Reduced computation load | | Process Management | Gunicorn with uvicorn workers | Better resource utilization | | Monitoring | Prometheus metrics collection | Performance visibility | ``` ``` **Production Performance Monitoring and Optimization** Sources: [docs/en/docs/async.md250-254](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L250-L254) [docs/en/docs/async.md418-422](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L418-L422) The advanced capabilities of FastAPI enable sophisticated production applications with high-performance async processing, robust database integration, flexible background task handling, and comprehensive deployment options for scalable web API development. \\</old\\_str> \\<new\\_str> ### Background Task Execution Architecture FastAPI's `BackgroundTasks` class enables post-response processing through task queuing that executes after the HTTP response is sent to the client, preventing response delays while ensuring important side-effects are handled. ``` ``` **BackgroundTasks Processing Pipeline** The `BackgroundTasks` class integrates with dependency injection, allowing tasks to be added from path operations, dependencies, and sub-dependencies. Tasks are collected and executed after response completion. ``` ``` **Background Tasks Dependency Integration Pattern** Sources: [docs/en/docs/tutorial/background-tasks.md14-46](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L14-L46) [docs/en/docs/tutorial/background-tasks.md48-63](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L48-L63) [docs/en/docs/tutorial/background-tasks.md76-83](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L76-L83) ## Database Integration FastAPI integrates seamlessly with SQL databases through SQLModel, providing type-safe database operations with automatic validation and serialization. ### SQLModel Architecture ``` ``` **SQLModel Integration Architecture** The database integration follows a multi-model pattern where different Pydantic models serve specific purposes:",
  "| Model Type | Purpose | Example | Usage | | ------------ | ----------------------- | ------------------ | --------------------------------------- | | Base Model | Shared fields | `HeroBase` | Common attributes across models | | Table Model | Database representation | `Hero(table=True)` | ORM mapping with `id` and `secret_name` | | Public Model | API responses | `HeroPublic` | Excludes sensitive fields | | Create Model | Input validation | `HeroCreate` | Accepts data without `id` | | Update Model | Partial updates | `HeroUpdate` | All fields optional | Sources: [docs/en/docs/tutorial/sql-databases.md180-283](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L180-L283) [docs/en/docs/tutorial/sql-databases.md74-101](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L74-L101) ### Session Management Pattern FastAPI employs a session-per-request pattern using dependency injection to ensure database connections are properly managed. ``` ``` **Database Session Management** Sources: [docs/en/docs/tutorial/sql-databases.md92-101](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L92-L101) [docs/en/docs/tutorial/sql-databases.md118-149](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L118-L149) ## Background Tasks FastAPI provides built-in support for background task execution through the `BackgroundTasks` class, enabling post-response processing without blocking the client. ### Background Task Processing ``` ``` **Background Task Execution Flow** Background tasks integrate with FastAPI's dependency injection system, allowing tasks to be added at multiple levels of the application hierarchy. Sources: [docs/en/docs/tutorial/background-tasks.md14-46](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L14-L46) [docs/en/docs/tutorial/background-tasks.md48-63](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L48-L63) ### Background Task Dependency Pattern ``` ``` **Background Tasks Dependency Integration** Sources: [docs/en/docs/tutorial/background-tasks.md48-63](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L48-L63) [docs/en/docs/tutorial/background-tasks.md76-83](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/background-tasks.md#L76-L83) ## Advanced Response and Middleware FastAPI provides sophisticated response handling capabilities and middleware integration for complex application requirements. ### Response Processing Pipeline ``` ``` **Advanced Response Processing** FastAPI supports multiple response patterns including automatic JSON serialization, direct response objects, and custom response classes for different content types. Sources: [docs/es/docs/advanced/response-directly.md13-28](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/advanced/response-directly.md#L13-L28) [docs/es/docs/advanced/additional-status-codes.md8-16](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/advanced/additional-status-codes.md#L8-L16) ### Middleware Integration Points ``` ``` **Middleware Processing Pipeline** Sources: [docs/es/docs/advanced/response-headers.md37-41](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/advanced/response-headers.md#L37-L41) [docs/es/docs/tutorial/cors.md](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/es/docs/tutorial/cors.md) ## Performance Considerations FastAPI's advanced features are designed with performance in mind, leveraging Starlette's ASGI foundation and Pydantic's validation system. ### Async Performance Patterns | Pattern | Use Case | Performance Impact | | ------------------------ | ------------------------ | ------------------------------ | | `async def` with `await` | I/O bound operations | High concurrency, non-blocking | | `def` functions | CPU bound operations | Thread pool execution | | Background tasks | Post-response processing | No client blocking | | Dependency caching | Expensive operations | Reduced computation overhead | ### Database Performance Optimization ``` ``` **Database Performance Optimization**",
  "Sources: [docs/en/docs/tutorial/sql-databases.md80-85](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/tutorial/sql-databases.md#L80-L85) [docs/en/docs/async.md250-254](https://github.com/fastapi/fastapi/blob/3e2dbf91/docs/en/docs/async.md#L250-L254) The advanced features in FastAPI work together to provide a robust foundation for building high-performance, scalable web APIs with sophisticated data handling, asynchronous processing, and flexible response management capabilities. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Advanced Features](#advanced-features.md) - [Asynchronous Programming Support](#asynchronous-programming-support.md) - [Path Operation Function Execution Model](#path-operation-function-execution-model.md) - [Concurrency vs Parallelism Implementation](#concurrency-vs-parallelism-implementation.md) - [Dependency System Async Handling](#dependency-system-async-handling.md) - [AnyIO Integration and Compatibility](#anyio-integration-and-compatibility.md) - [ASGI Server Architecture](#asgi-server-architecture.md) - [Production Deployment Patterns](#production-deployment-patterns.md) - [Performance Optimization in Production](#performance-optimization-in-production.md) - [Background Task Execution Architecture](#background-task-execution-architecture.md) - [Database Integration](#database-integration.md) - [SQLModel Architecture](#sqlmodel-architecture.md) - [Session Management Pattern](#session-management-pattern.md) - [Background Tasks](#background-tasks.md) - [Background Task Processing](#background-task-processing.md) - [Background Task Dependency Pattern](#background-task-dependency-pattern.md) - [Advanced Response and Middleware](#advanced-response-and-middleware.md) - [Response Processing Pipeline](#response-processing-pipeline.md) - [Middleware Integration Points](#middleware-integration-points.md) - [Performance Considerations](#performance-considerations.md) - [Async Performance Patterns](#async-performance-patterns.md) - [Database Performance Optimization](#database-performance-optimization.md)",
  "FastMCP Server Core | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # FastMCP Server Core Relevant source files - [src/fastmcp/\\_\\_init\\_\\_.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py) - [src/fastmcp/server/server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py) - [src/fastmcp/settings.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py) - [tests/server/test\\_import\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py) - [tests/server/test\\_mount.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py) - [tests/server/test\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py) ## Purpose and Scope The FastMCP Server Core is the central orchestrating component of the FastMCP framework, implemented primarily in the `FastMCP` class. This document covers the core server architecture, component management, MCP protocol integration, server composition patterns, and lifecycle management. For information about individual component types (Tools, Resources, Prompts), see [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md). For client-side interaction with FastMCP servers, see [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md). For HTTP deployment and authentication, see [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md). ## Core Server Architecture The `FastMCP` class serves as the primary interface for creating MCP servers, providing a high-level, Pythonic API that wraps the low-level MCP protocol implementation. ### FastMCP Server Structure ``` ``` The `FastMCP` class maintains three specialized managers for different component types, wraps a low-level MCP server for protocol handling, and supports server composition through mounting and importing.",
  "**Sources:** [src/fastmcp/server/server.py125-202](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L125-L202) [src/fastmcp/server/server.py176-188](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L176-L188) ### Component Registration Flow ``` ``` Component registration flows from high-level decorators through component creation to manager-specific storage dictionaries. **Sources:** [src/fastmcp/server/server.py858-881](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L858-L881) [src/fastmcp/server/server.py945-1058](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L945-L1058) [tests/server/test\\_server.py141-151](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py#L141-L151) ## MCP Protocol Integration FastMCP integrates with the Model Context Protocol by wrapping a `LowLevelServer` and implementing the required MCP handlers. ### Protocol Handler Architecture ``` ``` The protocol integration uses a two-layer approach: MCP handlers that manage protocol specifics and internal handlers that apply middleware and delegate to component managers. **Sources:** [src/fastmcp/server/server.py387-396](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L387-L396) [src/fastmcp/server/server.py522-533](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L522-L533) [src/fastmcp/server/server.py701-727](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L701-L727) ### Handler Registration Process During server initialization, the `_setup_handlers()` method registers protocol handlers with the underlying `LowLevelServer`: | Handler Method | MCP Operation | Component Type | | --------------------- | ---------------- | -------------- | | `_mcp_list_tools` | `tools/list` | Tools | | `_mcp_call_tool` | `tools/call` | Tools | | `_mcp_list_resources` | `resources/list` | Resources | | `_mcp_read_resource` | `resources/read` | Resources | | `_mcp_list_prompts` | `prompts/list` | Prompts | | `_mcp_get_prompt` | `prompts/get` | Prompts | **Sources:** [src/fastmcp/server/server.py387-396](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L387-L396) ## Server Composition and Mounting FastMCP supports two patterns for combining multiple servers: **mounting** (live delegation) and **importing** (static copying). ### Mount vs Import Architecture ``` ``` Mounting creates live links to other servers, while importing creates static copies of components. **Sources:** [src/fastmcp/server/server.py175](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L175-L175) [tests/server/test\\_mount.py19-47](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py#L19-L47) [tests/server/test\\_import\\_server.py10-34](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py#L10-L34) ### Component Prefixing Behavior When servers are mounted or imported with prefixes, component names are prefixed according to these patterns: | Component Type | Prefix Format | Example | | ------------------ | ---------------------------------- | ----------------------- | | Tools | `{prefix}_{tool_name}` | `api_get_data` | | Resources | `{protocol}://{prefix}/{path}` | `data://api/users` | | Resource Templates | `{protocol}://{prefix}/{template}` | `users://api/{user_id}` | | Prompts | `{prefix}_{prompt_name}` | `api_greeting` |",
  "**Sources:** [src/fastmcp/server/server.py1395-1420](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1395-L1420) [tests/server/test\\_mount.py978-1024](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py#L978-L1024) ## Middleware System FastMCP implements a middleware system that allows request processing to be modified through a chain of middleware functions. ### Middleware Execution Flow ``` ``` Middleware functions receive a `MiddlewareContext` and a `call_next` function, allowing them to process requests before and after the main handler. **Sources:** [src/fastmcp/server/server.py397-406](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L397-L406) [src/fastmcp/server/server.py553-564](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L553-L564) ### MiddlewareContext Structure The `MiddlewareContext` provides access to: - `message`: The MCP request parameters - `source`: Request source (\"client\") - `type`: Request type (\"request\") - `method`: MCP method name (e.g., \"tools/call\") - `fastmcp_context`: Current FastMCP context object **Sources:** [src/fastmcp/server/server.py555-561](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L555-L561) ## Lifecycle Management FastMCP servers support lifecycle management through lifespan context managers, similar to FastAPI applications. ### Lifespan Context Pattern ``` ``` Lifespan functions allow setup and cleanup operations to be performed when servers start and stop. **Sources:** [src/fastmcp/server/server.py93-123](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L93-L123) [src/fastmcp/server/server.py191-202](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L191-L202) ## Configuration and Settings FastMCP server behavior is controlled through the global `Settings` object and constructor parameters. ### Key Configuration Areas | Setting Category | Key Parameters | Purpose | | ------------------- | ------------------------------ | ------------------------------------- | | Component Filtering | `include_tags`, `exclude_tags` | Control which components are exposed | | Error Handling | `mask_error_details` | Control error information disclosure | | Resource Prefixing | `resource_prefix_format` | Control URI prefixing behavior | | Authentication | `server_auth` | Automatic auth provider configuration | | Metadata | `include_fastmcp_meta` | Control FastMCP metadata inclusion | **Sources:** [src/fastmcp/settings.py293-333](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py#L293-L333) [src/fastmcp/server/server.py126-169](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L126-L169) ### Component Enablement Logic The `_should_enable_component()` method determines whether components are exposed based on: 1. Component `enabled` status 2. Global `include_tags` filtering (if any component tags match) 3. Global `exclude_tags` filtering (if any component tags match) Components are enabled if they pass all filtering criteria. **Sources:** [src/fastmcp/server/server.py1507-1530](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1507-L1530) ## Transport Integration FastMCP servers can run over multiple transport protocols through the `run()` and `run_async()` methods. ### Supported Transports ``` ``` The transport is selected via the `transport` parameter to `run()` or `run_async()`. **Sources:** [src/fastmcp/server/server.py336-364](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L336-L364) [src/fastmcp/server/server.py1567-1583](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1567-L1583) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [FastMCP Server Core](#fastmcp-server-core.md) - [Purpose and Scope](#purpose-and-scope.md) - [Core Server Architecture](#core-server-architecture.md) - [FastMCP Server Structure](#fastmcp-server-structure.md) - [Component Registration Flow](#component-registration-flow.md) - [MCP Protocol Integration](#mcp-protocol-integration.md) - [Protocol Handler Architecture](#protocol-handler-architecture.md) - [Handler Registration Process](#handler-registration-process.md) - [Server Composition and Mounting](#server-composition-and-mounting.md) - [Mount vs Import Architecture](#mount-vs-import-architecture.md) - [Component Prefixing Behavior](#component-prefixing-behavior.md) - [Middleware System](#middleware-system.md) - [Middleware Execution Flow](#middleware-execution-flow.md) - [MiddlewareContext Structure](#middlewarecontext-structure.md) - [Lifecycle Management](#lifecycle-management.md) - [Lifespan Context Pattern](#lifespan-context-pattern.md) - [Configuration and Settings](#configuration-and-settings.md) - [Key Configuration Areas](#key-configuration-areas.md) - [Component Enablement Logic](#component-enablement-logic.md) - [Transport Integration](#transport-integration.md) - [Supported Transports](#supported-transports.md)",
  "Client Authentication | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Client Authentication Relevant source files - [docs/integrations/auth0.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/integrations/auth0.mdx) - [src/fastmcp/client/auth/oauth.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py) - [src/fastmcp/server/auth/oidc\\_proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oidc_proxy.py) - [src/fastmcp/server/auth/providers/auth0.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/auth0.py) - [tests/client/auth/test\\_oauth\\_token\\_expiry.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/auth/test_oauth_token_expiry.py) - [tests/server/auth/providers/test\\_auth0.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/providers/test_auth0.py) - [tests/server/auth/test\\_oidc\\_proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/test_oidc_proxy.py) This page covers client-side authentication in FastMCP, focusing on OAuth flows, token storage, browser-based authentication, and integration with identity providers. This documentation explains how FastMCP clients authenticate with protected servers using industry-standard OAuth 2.0 and OpenID Connect protocols. For server-side authentication configuration and identity providers, see [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md). For transport-specific authentication mechanisms, see [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md). ## Overview FastMCP client authentication is built around OAuth 2.0 with OpenID Connect support, providing secure token-based authentication for MCP clients connecting to protected servers. The authentication system handles the complete OAuth flow, from initial authorization to token refresh and storage. ### Client Authentication Architecture ``` ```",
  "Sources: [src/fastmcp/client/auth/oauth.py242-428](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L242-L428) [src/fastmcp/client/oauth\\_callback.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/oauth_callback.py) [src/fastmcp/utilities/storage.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/storage.py) ## OAuth Flow Implementation The `OAuth` class implements the complete OAuth 2.0 authorization code flow with PKCE support, handling dynamic client registration, browser-based authorization, and token management. ### OAuth Provider Class Structure ``` ``` Sources: [src/fastmcp/client/auth/oauth.py242-311](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L242-L311) [src/fastmcp/client/auth/oauth.py322-374](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L322-L374) [src/fastmcp/client/auth/oauth.py376-427](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L376-L427) ### Authorization Flow Process The OAuth authorization flow follows these steps: | Step | Method | Description | Error Handling | | ---- | -------------------- | ------------------------------------ | --------------------------------------- | | 1 | `redirect_handler()` | Pre-flight validation, opens browser | Detects stale client\\_id (400 response) | | 2 | `callback_handler()` | Starts local callback server | 5-minute timeout with graceful shutdown | | 3 | Token Exchange | Exchanges auth code for tokens | Automatic retry on client errors | | 4 | Token Storage | Saves tokens with absolute expiry | Validates token format and expiry | Sources: [src/fastmcp/client/auth/oauth.py322-341](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L322-L341) [src/fastmcp/client/auth/oauth.py343-374](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L343-L374) ## Token Storage and Management FastMCP implements sophisticated token storage with automatic expiry handling, server isolation, and format validation through the `FileTokenStorage` class. ### Token Storage Architecture ``` ``` Sources: [src/fastmcp/client/auth/oauth.py59-196](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L59-L196) [src/fastmcp/client/auth/oauth.py44-52](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L44-L52) ### Token Expiry Handling The token storage system uses absolute timestamps rather than relative `expires_in` values to ensure accurate expiry checking across application restarts: ``` ``` Sources: [src/fastmcp/client/auth/oauth.py132-147](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L132-L147) [src/fastmcp/client/auth/oauth.py96-130](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L96-L130) [tests/client/auth/test\\_oauth\\_token\\_expiry.py13-164](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/auth/test_oauth_token_expiry.py#L13-L164) ## Browser-Based Authentication FastMCP uses a browser-based OAuth flow that opens the user's default browser for authorization and runs a temporary local server to receive the OAuth callback. ### Browser Flow Implementation ``` ``` Sources: [src/fastmcp/client/auth/oauth.py322-341](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L322-L341) [src/fastmcp/client/auth/oauth.py343-374](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L343-L374) [src/fastmcp/client/auth/oauth.py395-427](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L395-L427) ### Callback Server Configuration The OAuth callback server uses dynamic port allocation and graceful shutdown:",
  "| Configuration | Default | Description | | ------------- | ---------------------------------- | ---------------------------------------- | | Port | `find_available_port()` | Dynamically allocated available port | | Timeout | 300 seconds | Maximum wait time for user authorization | | Redirect URI | `http://localhost:{port}/callback` | OAuth callback endpoint | | Server Type | `uvicorn.Server` | ASGI server for handling callbacks | Sources: [src/fastmcp/client/auth/oauth.py275-276](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L275-L276) [src/fastmcp/utilities/http.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/http.py) [src/fastmcp/client/oauth\\_callback.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/oauth_callback.py) ## Identity Provider Integration FastMCP supports multiple identity providers through standardized OAuth 2.0 and OpenID Connect protocols. The authentication system is provider-agnostic, requiring only standard OAuth endpoints. ### Provider Configuration ``` ``` Sources: [src/fastmcp/server/auth/oidc\\_proxy.py27-169](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oidc_proxy.py#L27-L169) [src/fastmcp/server/auth/providers/auth0.py36-175](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/auth0.py#L36-L175) ### Authentication Pre-flight Check Before initiating OAuth flows, FastMCP can check if authentication is required: ``` ``` This function tests the endpoint and returns `True` if authentication appears required based on HTTP status codes (401, 403) or WWW-Authenticate headers. Sources: [src/fastmcp/client/auth/oauth.py212-240](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L212-L240) ## Configuration and Usage ### Basic OAuth Configuration ``` ``` ### Client Integration ``` ``` ### Token Storage Locations The `FileTokenStorage` class stores tokens in server-specific files: | File Type | Path Pattern | Purpose | | ----------- | ------------------------------------ | --------------------------------- | | Tokens | `{base_url}_tokens.json` | Access/refresh tokens with expiry | | Client Info | `{base_url}_client_info.json` | OAuth client registration data | | Cache Dir | `~/.fastmcp/oauth-mcp-client-cache/` | Default storage location | Sources: [src/fastmcp/client/auth/oauth.py250-311](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L250-L311) [src/fastmcp/client/auth/oauth.py55-86](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L55-L86) ### Error Handling and Recovery The OAuth implementation includes automatic error recovery: - **Stale Credentials**: Detects invalid client\\_id and clears cache for retry - **Token Expiry**: Automatically refreshes expired tokens - **Network Errors**: Graceful handling of connection issues - **Timeout Handling**: 5-minute timeout with user-friendly messages Sources: [src/fastmcp/client/auth/oauth.py376-427](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L376-L427) [src/fastmcp/client/auth/oauth.py38-41](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/auth/oauth.py#L38-L41) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [Client Authentication](#client-authentication.md) - [Overview](#overview.md) - [Client Authentication Architecture](#client-authentication-architecture.md) - [OAuth Flow Implementation](#oauth-flow-implementation.md) - [OAuth Provider Class Structure](#oauth-provider-class-structure.md) - [Authorization Flow Process](#authorization-flow-process.md) - [Token Storage and Management](#token-storage-and-management.md) - [Token Storage Architecture](#token-storage-architecture.md) - [Token Expiry Handling](#token-expiry-handling.md) - [Browser-Based Authentication](#browser-based-authentication.md) - [Browser Flow Implementation](#browser-flow-implementation.md) - [Callback Server Configuration](#callback-server-configuration.md) - [Identity Provider Integration](#identity-provider-integration.md) - [Provider Configuration](#provider-configuration.md) - [Authentication Pre-flight Check](#authentication-pre-flight-check.md) - [Configuration and Usage](#configuration-and-usage.md) - [Basic OAuth Configuration](#basic-oauth-configuration.md) - [Client Integration](#client-integration.md) - [Token Storage Locations](#token-storage-locations.md) - [Error Handling and Recovery](#error-handling-and-recovery.md)",
  "Middleware System | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Middleware System Relevant source files - [src/fastmcp/cli/install/gemini\\_cli.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/gemini_cli.py) - [src/fastmcp/server/middleware/error\\_handling.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/error_handling.py) - [src/fastmcp/server/middleware/logging.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/logging.py) - [src/fastmcp/server/middleware/rate\\_limiting.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/rate_limiting.py) - [src/fastmcp/server/middleware/timing.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/timing.py) - [src/fastmcp/utilities/logging.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/logging.py) - [tests/server/middleware/test\\_error\\_handling.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_error_handling.py) - [tests/server/middleware/test\\_logging.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_logging.py) - [tests/server/middleware/test\\_timing.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_timing.py) - [tests/utilities/test\\_logging.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/test_logging.py) The FastMCP middleware system provides a flexible framework for intercepting, monitoring, and modifying MCP message processing. This system allows developers to add cross-cutting concerns like logging, timing, error handling, and rate limiting without modifying core server logic. This document covers the middleware architecture, built-in middleware implementations, and patterns for creating custom middleware. For authentication-specific middleware functionality, see [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md). For HTTP server deployment patterns, see [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md).",
  "## Core Middleware Architecture The middleware system is built around a pipeline pattern where each middleware can inspect, modify, or handle MCP messages before passing control to the next middleware in the chain. ### Middleware Pipeline Flow ``` ``` Sources: [src/fastmcp/server/middleware/middleware.py1-200](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/middleware.py#L1-L200) [tests/server/middleware/test\\_logging.py506-775](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_logging.py#L506-L775) ### Core Middleware Components ``` ``` Sources: [src/fastmcp/server/middleware/middleware.py11-50](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/middleware.py#L11-L50) The `Middleware` base class provides hook methods for different MCP operations. The `MiddlewareContext[T]` carries message data and metadata through the pipeline, while `CallNext[T, R]` represents the continuation of the middleware chain. ## Built-in Middleware Types FastMCP includes several production-ready middleware implementations for common server needs. ### Logging Middleware The logging system provides two complementary approaches for request monitoring and debugging. ``` ``` Sources: [src/fastmcp/server/middleware/logging.py143-196](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/logging.py#L143-L196) [src/fastmcp/server/middleware/logging.py198-246](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/logging.py#L198-L246) | Middleware | Logger Name | Output Format | Use Case | | ----------------------------- | -------------------- | --------------- | ---------------------------- | | `LoggingMiddleware` | `fastmcp.requests` | Key-value pairs | Development, human debugging | | `StructuredLoggingMiddleware` | `fastmcp.structured` | JSON objects | Production, log aggregation | Key features include payload serialization via `default_serializer()` using `pydantic_core.to_json()`, token estimation at approximately 4 characters per token, and configurable payload truncation via `max_payload_length`. ### Timing and Performance Middleware Performance monitoring middleware provides request timing and operation-specific measurements. ``` ``` Sources: [src/fastmcp/server/middleware/timing.py10-58](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/timing.py#L10-L58) [src/fastmcp/server/middleware/timing.py60-157](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/timing.py#L60-L157) Both middleware use `time.perf_counter()` for high-precision timing measurements and log results in milliseconds with 2 decimal precision. ### Error Handling and Retry Middleware Error management middleware provides consistent error transformation and automatic retry capabilities. ``` ``` Sources: [src/fastmcp/server/middleware/error\\_handling.py15-124](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/error_handling.py#L15-L124) [src/fastmcp/server/middleware/error\\_handling.py126-207](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/error_handling.py#L126-L207) The `ErrorHandlingMiddleware` transforms Python exceptions into MCP-compliant `McpError` instances with appropriate error codes, while `RetryMiddleware` implements exponential backoff retry logic for transient failures. ### Rate Limiting Middleware Rate limiting middleware protects servers from abuse using token bucket and sliding window algorithms. ``` ``` Sources: [src/fastmcp/server/middleware/rate\\_limiting.py92-168](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/rate_limiting.py#L92-L168) [src/fastmcp/server/middleware/rate\\_limiting.py170-232](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/rate_limiting.py#L170-L232) Both implementations support per-client rate limiting via `get_client_id` functions and use `asyncio.Lock()` for thread-safe operation. ## Custom Middleware Development Creating custom middleware involves extending the `Middleware` base class and implementing the appropriate hook methods. ### Middleware Hook Methods",
  "| Hook Method | Trigger | Context Type | Use Case | | -------------------- | --------------------- | --------------------- | --------------------------------- | | `on_message()` | All messages | Generic | Universal logging, authentication | | `on_request()` | Request messages | Generic | Timing, rate limiting | | `on_notification()` | Notification messages | Generic | Event tracking | | `on_call_tool()` | Tool execution | `CallToolRequest` | Tool-specific logic | | `on_read_resource()` | Resource access | `ReadResourceRequest` | Resource security | | `on_get_prompt()` | Prompt retrieval | `GetPromptRequest` | Prompt customization | Sources: [src/fastmcp/server/middleware/middleware.py11-200](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/middleware/middleware.py#L11-L200) ### Custom Middleware Example Pattern ``` ``` Sources: [tests/server/middleware/test\\_logging.py110-141](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_logging.py#L110-L141) [tests/server/middleware/test\\_timing.py47-70](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_timing.py#L47-L70) Custom middleware should call `await call_next(context)` to continue the pipeline and can modify the context or result before/after the call. ## Integration with FastMCP Server Middleware integration occurs through the `FastMCP.add_middleware()` method, which builds the middleware pipeline in registration order. ### Middleware Registration and Execution ``` ``` Sources: [tests/server/middleware/test\\_logging.py543-575](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_logging.py#L543-L575) [tests/server/middleware/test\\_timing.py192-224](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_timing.py#L192-L224) Middleware executes in the order registered, forming a chain where each middleware can inspect, modify, or terminate request processing. The system supports both synchronous and asynchronous middleware operations through the `CallNext` continuation pattern. ## Middleware Configuration Patterns Production deployments typically combine multiple middleware types for comprehensive server monitoring and protection. ### Common Middleware Stack Configuration ``` ``` Sources: [tests/server/middleware/test\\_error\\_handling.py589-624](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_error_handling.py#L589-L624) [tests/server/middleware/test\\_logging.py710-744](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/middleware/test_logging.py#L710-L744) This ordering ensures that rate limiting occurs first to protect server resources, followed by comprehensive monitoring and error handling capabilities. The middleware system's flexibility allows for custom combinations based on specific deployment requirements. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Middleware System](#middleware-system.md) - [Core Middleware Architecture](#core-middleware-architecture.md) - [Middleware Pipeline Flow](#middleware-pipeline-flow.md) - [Core Middleware Components](#core-middleware-components.md) - [Built-in Middleware Types](#built-in-middleware-types.md) - [Logging Middleware](#logging-middleware.md) - [Timing and Performance Middleware](#timing-and-performance-middleware.md) - [Error Handling and Retry Middleware](#error-handling-and-retry-middleware.md) - [Rate Limiting Middleware](#rate-limiting-middleware.md) - [Custom Middleware Development](#custom-middleware-development.md) - [Middleware Hook Methods](#middleware-hook-methods.md) - [Custom Middleware Example Pattern](#custom-middleware-example-pattern.md) - [Integration with FastMCP Server](#integration-with-fastmcp-server.md) - [Middleware Registration and Execution](#middleware-registration-and-execution.md) - [Middleware Configuration Patterns](#middleware-configuration-patterns.md) - [Common Middleware Stack Configuration](#common-middleware-stack-configuration.md)",
  "jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # FastMCP Overview Relevant source files - [README.md](https://github.com/jlowin/fastmcp/blob/66221ed3/README.md) - [docs/docs.json](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/docs.json) - [docs/getting-started/welcome.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/getting-started/welcome.mdx) - [src/fastmcp/\\_\\_init\\_\\_.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py) - [src/fastmcp/server/server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py) - [src/fastmcp/settings.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py) - [tests/server/test\\_import\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py) - [tests/server/test\\_mount.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py) - [tests/server/test\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py) This document provides a high-level introduction to the FastMCP framework architecture, covering its core purpose, major system components, and how they work together to enable production-ready Model Context Protocol (MCP) applications. For detailed server implementation patterns, see [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md). For client usage and transport mechanisms, see [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md). For deployment and configuration specifics, see [Configuration Management](jlowin/fastmcp/7-configuration-management.md). ## What is FastMCP? FastMCP is a comprehensive Python framework for building production-ready MCP servers and clients. The Model Context Protocol (MCP) is a standardized way to connect LLMs to tools and data sources, and FastMCP provides the infrastructure to make these connections robust, secure, and scalable.",
  "At its core, FastMCP wraps the low-level MCP protocol with a high-level, Pythonic interface. The framework handles protocol details, authentication, deployment, and advanced patterns like server composition and proxying. Sources: [src/fastmcp/server/server.py1-84](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1-L84) [README.md37-54](https://github.com/jlowin/fastmcp/blob/66221ed3/README.md#L37-L54) [docs/getting-started/welcome.mdx21-57](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/getting-started/welcome.mdx#L21-L57) ## Core Architecture Overview FastMCP follows a layered architecture with clear separation between the high-level developer interface, protocol implementation, and transport layers. ### FastMCP System Components ``` ``` Sources: [src/fastmcp/server/server.py125-266](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L125-L266) [src/fastmcp/\\_\\_init\\_\\_.py15-20](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py#L15-L20) [src/fastmcp/server/low\\_level.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/low_level.py) [src/fastmcp/tools/tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py) [src/fastmcp/resources/resource\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py) [src/fastmcp/prompts/prompt\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py) ### Request Flow Architecture ``` ``` Sources: [src/fastmcp/server/server.py701-752](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L701-L752) [src/fastmcp/server/server.py397-406](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L397-L406) [src/fastmcp/tools/tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py) ## FastMCP Server Components The `FastMCP` class serves as the central orchestrator, managing three core component types and their lifecycle. ### Component Manager System | Component | Manager Class | Decorator | Key Methods | | --------- | ----------------- | ------------------ | ----------------------------------- | | Tools | `ToolManager` | `@server.tool` | `add_tool()`, `call_tool()` | | Resources | `ResourceManager` | `@server.resource` | `add_resource()`, `read_resource()` | | Prompts | `PromptManager` | `@server.prompt` | `add_prompt()`, `render_prompt()` | The server initializes these managers in its constructor: ``` ``` Sources: [src/fastmcp/server/server.py176-188](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L176-L188) [src/fastmcp/tools/tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py) [src/fastmcp/resources/resource\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py) [src/fastmcp/prompts/prompt\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py) ### Protocol Handler Registration FastMCP registers MCP protocol handlers during initialization via `_setup_handlers()`: ``` ``` Sources: [src/fastmcp/server/server.py387-395](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L387-L395) [src/fastmcp/server/low\\_level.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/low_level.py) ## Transport and Client Architecture FastMCP supports multiple transport mechanisms for different deployment scenarios: ### Transport Types",
  "| Transport | Use Case | Implementation | | ------------------ | ----------------------------- | -------------------------------------------------- | | `stdio` | Local development, CLI tools | `stdio_server()` from MCP SDK | | `http`/`sse` | Web deployment, remote access | `create_sse_app()`, `create_streamable_http_app()` | | `FastMCPTransport` | In-memory testing, embedding | Direct server instance connection | ### Client Transport Resolution The client automatically selects appropriate transports via `infer_transport()` based on the connection target: ``` ``` Sources: [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) [src/fastmcp/server/http.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py) [src/fastmcp/client/client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py) ## Advanced Server Patterns FastMCP provides sophisticated patterns for building complex applications: ### Server Composition FastMCP supports two composition patterns: 1. **Mounting (`mount`)**: Live delegation to child servers 2. **Importing (`import_server`)**: Static copying of components ``` ``` ### Proxy Servers The `FastMCP.as_proxy()` method creates servers that act as intermediaries: ``` ``` Sources: [tests/server/test\\_mount.py19-67](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py#L19-L67) [tests/server/test\\_import\\_server.py10-34](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py#L10-L34) [src/fastmcp/server/proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py) ## Configuration and Settings FastMCP uses a hierarchical settings system with environment variable support: ### Settings Structure The `Settings` class provides configuration via environment variables prefixed with `FASTMCP_`: - `FASTMCP_LOG_LEVEL`: Logging configuration - `FASTMCP_SERVER_AUTH`: Authentication provider class path - `FASTMCP_INCLUDE_TAGS`/`FASTMCP_EXCLUDE_TAGS`: Component filtering - `FASTMCP_HOST`/`FASTMCP_PORT`: HTTP server configuration ### Global Settings Instance FastMCP maintains a global settings instance accessible via `fastmcp.settings`: ``` ``` Sources: [src/fastmcp/settings.py80-381](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py#L80-L381) [src/fastmcp/\\_\\_init\\_\\_.py8](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py#L8-L8) ## Authentication and Security FastMCP provides enterprise-grade authentication through the `AuthProvider` system: ### Authentication Providers The framework includes built-in providers for major identity systems: - `GoogleProvider` - `GitHubProvider` - `AzureProvider` - `Auth0Provider` - `WorkOSProvider` - `JWTVerifier` ### Auth Integration Authentication providers integrate with the server at initialization: ``` ``` Sources: [src/fastmcp/server/server.py204-211](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L204-L211) [src/fastmcp/server/auth/](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/) [src/fastmcp/settings.py363-380](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py#L363-L380) ## Testing and Development Framework FastMCP provides comprehensive testing utilities through direct server instance connections: ### In-Memory Testing The `FastMCPTransport` enables efficient testing without process management: ``` ``` ### Test Utilities The framework includes testing helpers in `fastmcp.utilities.tests`: - `caplog_for_fastmcp()`: FastMCP-specific log capture - `temporary_settings()`: Settings isolation for tests",
  "Sources: [tests/server/test\\_server.py14-67](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py#L14-L67) [src/fastmcp/utilities/tests.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/tests.py) [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) Dismiss Refresh this wiki Enter email to refresh ### On this page - [FastMCP Overview](#fastmcp-overview.md) - [What is FastMCP?](#what-is-fastmcp.md) - [Core Architecture Overview](#core-architecture-overview.md) - [FastMCP System Components](#fastmcp-system-components.md) - [Request Flow Architecture](#request-flow-architecture.md) - [FastMCP Server Components](#fastmcp-server-components.md) - [Component Manager System](#component-manager-system.md) - [Protocol Handler Registration](#protocol-handler-registration.md) - [Transport and Client Architecture](#transport-and-client-architecture.md) - [Transport Types](#transport-types.md) - [Client Transport Resolution](#client-transport-resolution.md) - [Advanced Server Patterns](#advanced-server-patterns.md) - [Server Composition](#server-composition.md) - [Proxy Servers](#proxy-servers.md) - [Configuration and Settings](#configuration-and-settings.md) - [Settings Structure](#settings-structure.md) - [Global Settings Instance](#global-settings-instance.md) - [Authentication and Security](#authentication-and-security.md) - [Authentication Providers](#authentication-providers.md) - [Auth Integration](#auth-integration.md) - [Testing and Development Framework](#testing-and-development-framework.md) - [In-Memory Testing](#in-memory-testing.md) - [Test Utilities](#test-utilities.md)",
  "Server Composition and Proxying | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Server Composition and Proxying Relevant source files - [src/fastmcp/\\_\\_init\\_\\_.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py) - [src/fastmcp/client/client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py) - [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) - [src/fastmcp/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/mcp_config.py) - [src/fastmcp/server/proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py) - [src/fastmcp/server/server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py) - [src/fastmcp/settings.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py) - [src/fastmcp/utilities/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/mcp_config.py) - [tests/client/test\\_client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_client.py) - [tests/client/test\\_stdio.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_stdio.py) - [tests/server/test\\_import\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py) - [tests/server/test\\_mount.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py) - [tests/server/test\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py) Server composition and proxying enables FastMCP servers to combine functionality from multiple other servers, either through live delegation (mounting) or static copying (importing). This system allows complex applications to be built by composing smaller, focused servers while maintaining clean separation of concerns.",
  "For information about the core FastMCP server architecture, see [2](jlowin/fastmcp/2-fastmcp-server-core.md). For details about component management and registration, see [2.1](jlowin/fastmcp/2.1-component-system-architecture.md). ## Overview FastMCP provides three primary mechanisms for server composition: - **Mounting** - Live delegation to child servers with automatic prefix handling - **Importing** - Static copying of components from other servers - **Proxying** - Transparent forwarding to remote MCP-compliant servers All composition methods support automatic prefixing of component names to avoid conflicts and provide clear namespacing. ## Mount System Architecture The mount system enables live delegation to child FastMCP servers. When a component is requested, the parent server forwards the request to the appropriate mounted server in real-time. ### Mount System Core Components ``` ``` **Sources:** [src/fastmcp/server/server.py175](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L175-L175) [src/fastmcp/server/server.py1260-1332](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1260-L1332) ### Mount Method Implementation The `mount` method in `FastMCP` registers child servers for live delegation: ``` ``` **Sources:** [src/fastmcp/server/server.py1260-1332](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1260-L1332) [tests/server/test\\_mount.py16-68](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py#L16-L68) ## Import System Architecture The import system performs static copying of components from other servers. Components are copied once at import time and become part of the importing server. ### Import vs Mount Comparison ``` ``` **Sources:** [src/fastmcp/server/server.py1334-1421](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1334-L1421) [tests/server/test\\_import\\_server.py10-34](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py#L10-L34) ### Import Method Implementation The `import_server` method copies components with prefix handling: ``` ``` **Sources:** [src/fastmcp/server/server.py1334-1421](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1334-L1421) [tests/server/test\\_import\\_server.py61-89](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py#L61-L89) ## Proxy System Architecture The proxy system enables FastMCP servers to act as transparent proxies to remote MCP-compliant servers. This is implemented through specialized managers and components. ### Proxy System Core Components ``` ``` **Sources:** [src/fastmcp/server/proxy.py454-519](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py#L454-L519) [src/fastmcp/server/proxy.py69-121](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py#L69-L121) ### FastMCPProxy Creation Methods FastMCP provides two ways to create proxy servers: ``` ``` **Sources:** [src/fastmcp/server/server.py1555-1610](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1555-L1610) [src/fastmcp/server/proxy.py460-508](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py#L460-L508) ## Prefix Handling System All composition methods support automatic prefixing to avoid component name conflicts. The prefix handling varies by component type. ### Prefix Application Rules ``` ``` **Sources:** [src/fastmcp/server/server.py1423-1553](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1423-L1553) [src/fastmcp/server/server.py2157-2205](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L2157-L2205) ### Resource Prefix Utilities FastMCP provides utility functions for resource prefix manipulation:",
  "| Function | Purpose | Example | | -------------------------- | -------------------------- | ------------------------------------- | | `add_resource_prefix()` | Add prefix to resource URI | `data://users` → `data://api/users` | | `remove_resource_prefix()` | Remove prefix from URI | `data://api/users` → `data://users` | | `has_resource_prefix()` | Check if URI has prefix | Returns `True` for `data://api/users` | **Sources:** [src/fastmcp/server/server.py2157-2205](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L2157-L2205) [tests/server/test\\_server.py22-26](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py#L22-L26) ## Component Request Flow The following diagram shows how requests flow through the composition system: ``` ``` **Sources:** [src/fastmcp/server/server.py729-752](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L729-L752) [src/fastmcp/server/proxy.py107-121](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py#L107-L121) [src/fastmcp/server/proxy.py280-296](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py#L280-L296) ## Advanced Composition Patterns ### Multi-Level Composition Servers can be composed in multiple levels, with prefixes accumulating: ``` ``` **Sources:** [tests/server/test\\_import\\_server.py249-283](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py#L249-L283) [tests/server/test\\_mount.py466-509](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py#L466-L509) ### Mixed Composition Strategies A single parent server can use multiple composition strategies simultaneously: ``` ``` **Sources:** [tests/server/test\\_mount.py210-238](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py#L210-L238) [tests/server/test\\_import\\_server.py36-58](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py#L36-L58) [src/fastmcp/server/proxy.py454-519](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py#L454-L519) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Server Composition and Proxying](#server-composition-and-proxying.md) - [Overview](#overview.md) - [Mount System Architecture](#mount-system-architecture.md) - [Mount System Core Components](#mount-system-core-components.md) - [Mount Method Implementation](#mount-method-implementation.md) - [Import System Architecture](#import-system-architecture.md) - [Import vs Mount Comparison](#import-vs-mount-comparison.md) - [Import Method Implementation](#import-method-implementation.md) - [Proxy System Architecture](#proxy-system-architecture.md) - [Proxy System Core Components](#proxy-system-core-components.md) - [FastMCPProxy Creation Methods](#fastmcpproxy-creation-methods.md) - [Prefix Handling System](#prefix-handling-system.md) - [Prefix Application Rules](#prefix-application-rules.md) - [Resource Prefix Utilities](#resource-prefix-utilities.md) - [Component Request Flow](#component-request-flow.md) - [Advanced Composition Patterns](#advanced-composition-patterns.md) - [Multi-Level Composition](#multi-level-composition.md) - [Mixed Composition Strategies](#mixed-composition-strategies.md)",
  "Component System Architecture | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Component System Architecture Relevant source files",
  "- [docs/patterns/tool-transformation.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/patterns/tool-transformation.mdx) - [src/fastmcp/prompts/prompt.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt.py) - [src/fastmcp/prompts/prompt\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py) - [src/fastmcp/resources/resource.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource.py) - [src/fastmcp/resources/resource\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py) - [src/fastmcp/resources/template.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/template.py) - [src/fastmcp/resources/types.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/types.py) - [src/fastmcp/tools/tool.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool.py) - [src/fastmcp/tools/tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py) - [src/fastmcp/tools/tool\\_transform.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_transform.py) - [src/fastmcp/utilities/components.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/components.py) - [tests/prompts/test\\_prompt.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/prompts/test_prompt.py) - [tests/prompts/test\\_prompt\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/prompts/test_prompt_manager.py) - [tests/resources/test\\_function\\_resources.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/resources/test_function_resources.py) - [tests/resources/test\\_resource\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/resources/test_resource_manager.py) - [tests/resources/test\\_resource\\_template.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/resources/test_resource_template.py) - [tests/resources/test\\_resources.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/resources/test_resources.py) - [tests/server/test\\_server\\_interactions.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server_interactions.py) - [tests/tools/test\\_tool.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/tools/test_tool.py) - [tests/tools/test\\_tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/tools/test_tool_manager.py) - [tests/tools/test\\_tool\\_transform.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/tools/test_tool_transform.py) This document covers the FastMCP component system, which provides a unified framework for managing Tools, Resources, Prompts, and Resource Templates. It explains how these components are created, registered, managed, and composed within FastMCP servers. For information about server composition and mounting mechanisms, see [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md). For details about dependency injection and the Context system, see [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md). ## Component Type Hierarchy FastMCP organizes all server capabilities into four main component types, each sharing common functionality through a base class architecture. ### Component Class Structure ``` ```",
  "**Sources**: [src/fastmcp/utilities/components.py28-125](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/components.py#L28-L125) [src/fastmcp/tools/tool.py105-240](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool.py#L105-L240) [src/fastmcp/resources/resource.py34-219](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource.py#L34-L219) [src/fastmcp/resources/template.py53-314](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/template.py#L53-L314) [src/fastmcp/prompts/prompt.py65-262](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt.py#L65-L262) ### Base Component Properties All FastMCP components inherit from `FastMCPComponent` and share these properties: | Property | Type | Purpose | | ------------- | ------------------------ | ------------------------------------------------------ | | `name` | `str` | Unique identifier for the component | | `title` | `str \\| None` | Display title for UI purposes | | `description` | `str \\| None` | Human-readable description | | `tags` | `set[str]` | Categorization tags for filtering | | `meta` | `dict[str, Any] \\| None` | Additional metadata | | `enabled` | `bool` | Whether component is active | | `key` | `str` | Internal bookkeeping identifier (may include prefixes) | **Sources**: [src/fastmcp/utilities/components.py28-69](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/components.py#L28-L69) ## Component Manager Architecture Each component type has a dedicated manager class that handles registration, retrieval, and execution. The managers follow a consistent pattern and support server composition through mounting. ### Manager System Overview ``` ``` **Sources**: [src/fastmcp/tools/tool\\_manager.py25-255](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py#L25-L255) [src/fastmcp/resources/resource\\_manager.py28-344](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py#L28-L344) [src/fastmcp/prompts/prompt\\_manager.py21-204](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py#L21-L204) ### Manager Responsibilities Each manager provides these core operations: | Operation | Tool Manager | Resource Manager | Prompt Manager | | ------------------- | ---------------------- | ------------------------------ | --------------------------- | | **Add Component** | `add_tool(tool)` | `add_resource(resource)` | `add_prompt(prompt)` | | **Get Component** | `get_tool(key)` | `read_resource(uri)` | `get_prompt(key)` | | **List Components** | `list_tools()` | `list_resources()` | `list_prompts()` | | **Execute/Use** | `call_tool(key, args)` | Templates: `create_resource()` | `render_prompt(name, args)` | **Sources**: [src/fastmcp/tools/tool\\_manager.py108-254](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py#L108-L254) [src/fastmcp/resources/resource\\_manager.py275-344](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py#L275-L344) [src/fastmcp/prompts/prompt\\_manager.py91-204](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py#L91-L204) ## Component Creation from Functions FastMCP provides a consistent pattern for creating components from Python functions using static factory methods. ### Function-to-Component Creation Flow ``` ```",
  "**Sources**: [src/fastmcp/tools/tool.py354-491](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool.py#L354-L491) [src/fastmcp/resources/resource.py168-219](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource.py#L168-L219) [src/fastmcp/prompts/prompt.py156-262](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt.py#L156-L262) [src/fastmcp/resources/template.py214-313](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/template.py#L214-L313) ### Context Injection All function-based components support automatic Context injection for accessing server capabilities: ``` ``` The parameter detection uses `find_kwarg_by_type()` to identify Context parameters and excludes them from the component's public schema. **Sources**: [src/fastmcp/utilities/types.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#LNaN-LNaN) [src/fastmcp/tools/tool.py407-412](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool.py#L407-L412) [src/fastmcp/resources/template.py245-246](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/template.py#L245-L246) ## Tool Transformation System Tools can be transformed to create modified versions with different schemas, argument mappings, or custom behavior. This enables adaptation without code duplication. ### Tool Transformation Architecture ``` ``` **Sources**: [src/fastmcp/tools/tool\\_transform.py232-517](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_transform.py#L232-L517) [src/fastmcp/tools/tool\\_transform.py37-91](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_transform.py#L37-L91) [src/fastmcp/tools/tool\\_transform.py93-207](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_transform.py#L93-L207) ### Argument Transformation Options The `ArgTransform` class provides fine-grained control over individual arguments: | Transform Type | Purpose | Example | | ------------------- | ------------------------- | ------------------------------------- | | **Rename** | Change argument name | `name=\"new_name\"` | | **Hide** | Remove from public schema | `hide=True, default=\"constant\"` | | **Default Value** | Add/change default | `default=42` | | **Default Factory** | Dynamic defaults | `default_factory=lambda: time.time()` | | **Type Change** | Modify expected type | `type=str` | | **Make Required** | Remove default value | `required=True` | **Sources**: [src/fastmcp/tools/tool\\_transform.py93-207](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_transform.py#L93-L207) ## Server Composition and Component Mounting Managers support mounting other servers to create hierarchical component structures. This enables composition of multiple FastMCP servers into larger systems. ### Component Loading Paths ``` ``` **Sources**: [src/fastmcp/tools/tool\\_manager.py55-101](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py#L55-L101) [src/fastmcp/resources/resource\\_manager.py72-190](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py#L72-L190) [src/fastmcp/prompts/prompt\\_manager.py49-89](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py#L49-L89) ## Component Lifecycle Management Components support enable/disable operations and automatic notifications to trigger list change events in the MCP protocol. ### Component State Management Each component can be enabled or disabled, and state changes automatically notify the Context system: ``` ``` This ensures that MCP clients receive updated component lists when components are dynamically enabled or disabled.",
  "**Sources**: [src/fastmcp/tools/tool.py123-137](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool.py#L123-L137) [src/fastmcp/resources/resource.py53-67](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource.py#L53-L67) [src/fastmcp/prompts/prompt.py72-86](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt.py#L72-L86) [src/fastmcp/resources/template.py72-86](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/template.py#L72-L86) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Component System Architecture](#component-system-architecture.md) - [Component Type Hierarchy](#component-type-hierarchy.md) - [Component Class Structure](#component-class-structure.md) - [Base Component Properties](#base-component-properties.md) - [Component Manager Architecture](#component-manager-architecture.md) - [Manager System Overview](#manager-system-overview.md) - [Manager Responsibilities](#manager-responsibilities.md) - [Component Creation from Functions](#component-creation-from-functions.md) - [Function-to-Component Creation Flow](#function-to-component-creation-flow.md) - [Context Injection](#context-injection.md) - [Tool Transformation System](#tool-transformation-system.md) - [Tool Transformation Architecture](#tool-transformation-architecture.md) - [Argument Transformation Options](#argument-transformation-options.md) - [Server Composition and Component Mounting](#server-composition-and-component-mounting.md) - [Component Loading Paths](#component-loading-paths.md) - [Component Lifecycle Management](#component-lifecycle-management.md) - [Component State Management](#component-state-management.md)",
  "# jlowin_fastmcp - Documentation Index - [/jlowin/fastmcp](./_jlowin_fastmcp.md) - [/jlowin/fastmcp/1-fastmcp-overview](./_jlowin_fastmcp_1-fastmcp-overview.md) - [/jlowin/fastmcp/2.1-component-system-architecture](./_jlowin_fastmcp_2.1-component-system-architecture.md) - [/jlowin/fastmcp/2-fastmcp-server-core](./_jlowin_fastmcp_2-fastmcp-server-core.md) - [/jlowin/fastmcp/1.1-installation-and-setup](./_jlowin_fastmcp_1.1-installation-and-setup.md) - [/jlowin/fastmcp/2.2-context-system-and-dependencies](./_jlowin_fastmcp_2.2-context-system-and-dependencies.md) - [/jlowin/fastmcp/2.3-server-composition-and-proxying](./_jlowin_fastmcp_2.3-server-composition-and-proxying.md) - [/jlowin/fastmcp/3-fastmcp-client-system](./_jlowin_fastmcp_3-fastmcp-client-system.md) - [/jlowin/fastmcp/3.2-client-authentication](./_jlowin_fastmcp_3.2-client-authentication.md) - [/jlowin/fastmcp/3.1-transport-mechanisms](./_jlowin_fastmcp_3.1-transport-mechanisms.md) - [/jlowin/fastmcp/4.1-authentication-and-security](./_jlowin_fastmcp_4.1-authentication-and-security.md) - [/jlowin/fastmcp/4.2-middleware-system](./_jlowin_fastmcp_4.2-middleware-system.md) - [/jlowin/fastmcp/5-command-line-interface](./_jlowin_fastmcp_5-command-line-interface.md) - [/jlowin/fastmcp/4-http-server-and-deployment](./_jlowin_fastmcp_4-http-server-and-deployment.md) - [/jlowin/fastmcp/6-openapi-integration](./_jlowin_fastmcp_6-openapi-integration.md) - [/jlowin/fastmcp/7-configuration-management](./_jlowin_fastmcp_7-configuration-management.md) - [/jlowin/fastmcp/8-testing-and-development-framework](./_jlowin_fastmcp_8-testing-and-development-framework.md) - [/jlowin/fastmcp/9-project-infrastructure](./_jlowin_fastmcp_9-project-infrastructure.md) - [/jlowin/fastmcp/10-documentation-and-updates](./_jlowin_fastmcp_10-documentation-and-updates.md)",
  "Transport Mechanisms | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Transport Mechanisms Relevant source files - [src/fastmcp/client/client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py) - [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) - [src/fastmcp/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/mcp_config.py) - [src/fastmcp/server/proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py) - [src/fastmcp/utilities/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/mcp_config.py) - [tests/client/test\\_client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_client.py) - [tests/client/test\\_stdio.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_stdio.py) This document covers the transport layer of the FastMCP client system, which handles connection establishment and communication with MCP servers. Transport mechanisms are responsible for the underlying connection details (subprocess management, HTTP connections, in-memory calls), while the `Client` class handles MCP protocol operations. For information about client operations like calling tools and reading resources, see [Client Operations and Testing](jlowin/fastmcp/3.2-client-authentication.md). For server-side HTTP infrastructure, see [HTTP Server and Deployment](jlowin/fastmcp/6-openapi-integration.md). ## Architecture Overview The FastMCP client system separates concerns between protocol handling and connection management through a two-layer architecture: ### Core Transport Architecture ``` ```",
  "**Sources:** [src/fastmcp/client/client.py97-155](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L97-L155) [src/fastmcp/client/transports.py75-119](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L75-L119) [src/fastmcp/client/transports.py301-417](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L301-L417) The `Client` class is a generic type `Client[ClientTransportT]` that accepts any transport instance or transport-inferrable input and delegates connection management to the transport while handling all MCP protocol details itself. The transport layer provides connection abstraction while the client handles session management including reentrant context managers and initialization. ## Transport Inference System The client system automatically selects appropriate transports based on input types through the `infer_transport` function: ### Transport Selection Logic ``` ``` **Sources:** [src/fastmcp/client/transports.py957-1016](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L957-L1016) [src/fastmcp/client/client.py231](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L231-L231) [src/fastmcp/mcp\\_config.py56-74](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/mcp_config.py#L56-L74) The `infer_transport` function provides automatic transport selection with intelligent defaults. HTTP URLs are analyzed for SSE paths (containing `/sse/`) while other HTTP URLs default to `StreamableHttpTransport`. File paths use extension-based selection, and the system gracefully handles edge cases by falling back to sensible defaults. ## Transport Types and Use Cases ### Transport Comparison Matrix | Transport Type | Best For | Connection Model | Session Persistence | Authentication Support | | ------------------------- | ---------------------------------- | ---------------- | --------------------------- | ------------------------ | | `FastMCPTransport` | Testing, development, in-process | In-memory | N/A | N/A | | `StreamableHttpTransport` | Production HTTP servers | Remote network | Stateless | Yes (Bearer, OAuth) | | `SSETransport` | Legacy HTTP servers, SSE endpoints | Remote network | Stateless | Yes (Bearer, OAuth) | | `StdioTransport` | Local MCP servers, subprocesses | Subprocess pipes | Configurable (`keep_alive`) | N/A | | `MCPConfigTransport` | Multi-server applications | Mixed transports | Varies by server | Per-server configuration | ### Transport Capabilities | Transport | Header Forwarding | Timeout Control | Environment Variables | Keep-Alive | | ------------------------- | -------------------------- | ------------------------ | ---------------------- | ------------------ | | `StreamableHttpTransport` | Yes (`get_http_headers()`) | Yes (`sse_read_timeout`) | N/A | N/A | | `SSETransport` | Yes (`get_http_headers()`) | Yes (`sse_read_timeout`) | N/A | N/A | | `StdioTransport` | N/A | N/A | Yes (`env` parameter) | Yes (configurable) | | `FastMCPTransport` | N/A | N/A | Inherited from process | N/A | **Sources:** [src/fastmcp/client/transports.py160-227](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L160-L227) [src/fastmcp/client/transports.py230-298](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L230-L298) [src/fastmcp/client/transports.py301-417](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L301-L417) [src/fastmcp/client/transports.py783-835](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L783-L835) ## Stdio Transport Family Stdio transports manage local MCP servers through subprocess execution, communicating via stdin/stdout pipes. ### Base Stdio Transport ``` ```",
  "**Sources:** [src/fastmcp/client/transports.py301-417](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L301-L417) [src/fastmcp/client/transports.py419-463](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L419-L463) The `StdioTransport` class provides the foundation for all subprocess-based transports. Key features include: - **Session Persistence**: Controlled via `keep_alive` parameter [src/fastmcp/client/transports.py315-336](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L315-L336) - **Environment Isolation**: Explicit environment variable passing [src/fastmcp/client/transports.py312-314](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L312-L314) - **Async Task Management**: Background connection task [src/fastmcp/client/transports.py419-463](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L419-L463) ### Specialized Stdio Implementations | Class | Command | File Extension | Use Case | | ----------------------- | --------- | -------------- | ------------------------ | | `PythonStdioTransport` | `python` | `.py` | Python MCP servers | | `NodeStdioTransport` | `node` | `.js` | JavaScript MCP servers | | `FastMCPStdioTransport` | `fastmcp` | `.py` | FastMCP CLI execution | | `UvStdioTransport` | `uv` | N/A | Python package execution | | `UvxStdioTransport` | `uvx` | N/A | Python tool execution | | `NpxStdioTransport` | `npx` | N/A | Node package execution | **Sources:** [src/fastmcp/client/transports.py465-509](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L465-L509) [src/fastmcp/client/transports.py511-536](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L511-L536) [src/fastmcp/client/transports.py538-577](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L538-L577) ## Remote Transport Types Remote transports connect to MCP servers running as web services over HTTP connections. ### StreamableHttpTransport Architecture ``` ``` **Sources:** [src/fastmcp/client/transports.py228-298](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L228-L298) The `StreamableHttpTransport` provides efficient bidirectional communication for production deployments: - **Authentication Support**: OAuth and Bearer token authentication [src/fastmcp/client/transports.py256-261](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L256-L261) - **Header Forwarding**: Automatic forwarding of HTTP headers in proxy scenarios [src/fastmcp/client/transports.py274](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L274-L274) - **Timeout Configuration**: Configurable request timeouts [src/fastmcp/client/transports.py280-281](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L280-L281) ### SSETransport (Legacy) The `SSETransport` maintains compatibility with older Server-Sent Events implementations but is superseded by `StreamableHttpTransport` for new deployments [src/fastmcp/client/transports.py156-226](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L156-L226) ## In-Memory Transport The `FastMCPTransport` enables direct communication with FastMCP server instances within the same Python process. ### In-Memory Communication Flow ``` ``` **Sources:** [src/fastmcp/client/transports.py763-815](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L763-L815) Key characteristics of in-memory transport:",
  "- **Zero Network Overhead**: Direct method calls within same process - **Shared Environment**: Full access to client process environment variables - **Exception Control**: Configurable exception raising via `raise_exceptions` parameter [src/fastmcp/client/transports.py772](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L772-L772) ## Multi-Server Configuration Transport The `MCPConfigTransport` enables connections to multiple MCP servers through configuration-based routing. ### MCPConfig Architecture ``` ``` **Sources:** [src/fastmcp/client/transports.py817-926](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L817-L926) The transport automatically handles server composition: - **Single Server**: Direct transport to the configured server - **Multiple Servers**: Creates composite server with prefixed component names - **Flexible Configuration**: Supports all transport types within the configuration ### Configuration Schema Support ``` ``` **Sources:** [src/fastmcp/client/transports.py865-887](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L865-L887) ## Session Management and Connection Lifecycle ### Session Context Management The transport layer provides async context manager support for proper session lifecycle, with sophisticated reentrant session management in the `Client` class: ### Client Session State Management ``` ``` **Sources:** [src/fastmcp/client/client.py80-96](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L80-L96) [src/fastmcp/client/client.py373-463](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L373-L463) [src/fastmcp/client/client.py465-488](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L465-L488) The `Client` implements sophisticated reentrant context manager support using: - `ClientSessionState` with `nesting_counter`, `session_task`, `ready_event`, and `stop_event` - Background `_session_runner()` task for session lifecycle management - Thread-safe session sharing across multiple concurrent `async with client:` blocks - Automatic cleanup when the last context exits ### Transport Connect Session Protocol All transports implement the `connect_session` async context manager method: ``` ``` **Sources:** [src/fastmcp/client/transports.py84-106](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L84-L106) This protocol ensures consistent connection lifecycle across all transport types while allowing transport-specific connection details. ### Authentication Integration Remote transports support multiple authentication mechanisms: | Auth Type | Implementation | Usage | | -------------- | --------------------- | ------------------------------------------- | | Bearer Token | `BearerAuth` class | String token passed to `auth` parameter | | OAuth | `OAuth` class | `auth=\"oauth\"` with URL-based configuration | | Custom Headers | Direct header passing | Custom authentication schemes | **Sources:** [src/fastmcp/client/transports.py184-189](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L184-L189) [src/fastmcp/client/transports.py256-261](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L256-L261) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [Transport Mechanisms](#transport-mechanisms.md) - [Architecture Overview](#architecture-overview.md) - [Core Transport Architecture](#core-transport-architecture.md) - [Transport Inference System](#transport-inference-system.md) - [Transport Selection Logic](#transport-selection-logic.md) - [Transport Types and Use Cases](#transport-types-and-use-cases.md) - [Transport Comparison Matrix](#transport-comparison-matrix.md) - [Transport Capabilities](#transport-capabilities.md) - [Stdio Transport Family](#stdio-transport-family.md) - [Base Stdio Transport](#base-stdio-transport.md) - [Specialized Stdio Implementations](#specialized-stdio-implementations.md) - [Remote Transport Types](#remote-transport-types.md) - [StreamableHttpTransport Architecture](#streamablehttptransport-architecture.md) - [SSETransport (Legacy)](#ssetransport-legacy.md) - [In-Memory Transport](#in-memory-transport.md) - [In-Memory Communication Flow](#in-memory-communication-flow.md) - [Multi-Server Configuration Transport](#multi-server-configuration-transport.md) - [MCPConfig Architecture](#mcpconfig-architecture.md) - [Configuration Schema Support](#configuration-schema-support.md) - [Session Management and Connection Lifecycle](#session-management-and-connection-lifecycle.md) - [Session Context Management](#session-context-management.md) - [Client Session State Management](#client-session-state-management.md) - [Transport Connect Session Protocol](#transport-connect-session-protocol.md) - [Authentication Integration](#authentication-integration.md)",
  "Project Infrastructure | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Project Infrastructure Relevant source files - [.github/workflows/auto-close-duplicates.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/auto-close-duplicates.yml) - [.github/workflows/marvin-dedupe-issues.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin-dedupe-issues.yml) - [.github/workflows/marvin-label-triage.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin-label-triage.yml) - [.github/workflows/marvin.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin.yml) - [.github/workflows/publish.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/publish.yml) - [.github/workflows/update-config-schema.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/update-config-schema.yml) - [.github/workflows/update-sdk-docs.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/update-sdk-docs.yml) - [scripts/auto\\_close\\_duplicates.py](https://github.com/jlowin/fastmcp/blob/66221ed3/scripts/auto_close_duplicates.py) This document covers the automated infrastructure and workflows that maintain the FastMCP project, including AI-driven automation, documentation generation, issue management, and CI/CD pipelines. The infrastructure is primarily built around GitHub Actions workflows and integrates with external AI services for intelligent project maintenance. For information about testing infrastructure and development workflows, see [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md). ## AI-Driven Automation System The core of FastMCP's infrastructure is the Marvin Context Protocol system, which provides AI-powered assistance for project maintenance, issue triage, and development tasks. ### Marvin Context Protocol Workflow ``` ```",
  "The main Marvin workflow is defined in [.github/workflows/marvin.yml1-72](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin.yml#L1-L72) and triggers on various GitHub events when the `/marvin` phrase is detected. The workflow uses the `anthropics/claude-code-action@beta` action with extensive tool permissions for code analysis and repository interaction. **Sources:** [.github/workflows/marvin.yml1-72](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin.yml#L1-L72) ### Issue Triage Automation ``` ``` The triage system is implemented in [.github/workflows/marvin-label-triage.yml1-158](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin-label-triage.yml#L1-L158) and uses sophisticated rules to categorize issues and PRs automatically. The system enforces mutually exclusive core categories and applies area labels only when thematically central. **Sources:** [.github/workflows/marvin-label-triage.yml1-158](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin-label-triage.yml#L1-L158) ## Documentation Automation ### SDK Documentation Pipeline ``` ``` The SDK documentation workflow [.github/workflows/update-sdk-docs.yml1-75](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/update-sdk-docs.yml#L1-L75) automatically generates API reference documentation from source code docstrings and type annotations using the `just api-ref-all` command. **Sources:** [.github/workflows/update-sdk-docs.yml1-75](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/update-sdk-docs.yml#L1-L75) ### Configuration Schema Updates The schema update workflow [.github/workflows/update-config-schema.yml1-92](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/update-config-schema.yml#L1-L92) maintains the `fastmcp.json` configuration schema by generating it from the `MCPServerConfig` class definition: ``` ``` **Sources:** [.github/workflows/update-config-schema.yml1-92](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/update-config-schema.yml#L1-L92) ## Issue Management Automation ### Duplicate Detection System ``` ``` The duplicate detection system [.github/workflows/marvin-dedupe-issues.yml1-81](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin-dedupe-issues.yml#L1-L81) uses a multi-agent approach with the Task tool to coordinate parallel searches and intelligent filtering. **Sources:** [.github/workflows/marvin-dedupe-issues.yml1-81](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/marvin-dedupe-issues.yml#L1-L81) ### Auto-Close Implementation The auto-close mechanism is implemented in [scripts/auto\\_close\\_duplicates.py1-332](https://github.com/jlowin/fastmcp/blob/66221ed3/scripts/auto_close_duplicates.py#L1-L332) with the following key components: | Component | Class | Purpose | | ----------------- | -------------- | ---------------------------- | | Issue Management | `Issue` | Represents GitHub issue data | | Comment Handling | `Comment` | Manages issue comments | | Reaction Tracking | `Reaction` | Tracks user reactions | | API Client | `GitHubClient` | GitHub API interaction | The script implements sophisticated logic in `should_close_as_duplicate()` [scripts/auto\\_close\\_duplicates.py216-254](https://github.com/jlowin/fastmcp/blob/66221ed3/scripts/auto_close_duplicates.py#L216-L254) to check for preventing conditions before auto-closing issues. **Sources:** [scripts/auto\\_close\\_duplicates.py1-332](https://github.com/jlowin/fastmcp/blob/66221ed3/scripts/auto_close_duplicates.py#L1-L332) [.github/workflows/auto-close-duplicates.yml1-29](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/auto-close-duplicates.yml#L1-L29) ## CI/CD Pipeline ### Publishing Workflow ``` ```",
  "The publishing workflow [.github/workflows/publish.yml1-27](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/publish.yml#L1-L27) uses PyPI's trusted publishing feature for secure package deployment without managing API tokens. **Sources:** [.github/workflows/publish.yml1-27](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/publish.yml#L1-L27) ## Infrastructure Components ### GitHub App Integration The Marvin Context Protocol system relies on a GitHub App for authentication: - **App ID**: Stored as `MARVIN_APP_ID` secret - **Private Key**: Stored as `MARVIN_APP_PRIVATE_KEY` secret - **Token Generation**: Uses `actions/create-github-app-token@v2` - **Permissions**: Comprehensive access to contents, issues, pull-requests, discussions, and actions ### External Service Dependencies | Service | Purpose | Authentication | | ---------------------- | --------------------------------------- | ------------------------- | | Anthropic Claude | AI-powered code analysis and automation | `ANTHROPIC_API_KEY` | | GitHub Docker Registry | MCP server containers | App token | | PyPI | Package publishing | Trusted publishing (OIDC) | ### Automation Bot Identity All automated actions use the bot identity: - **Name**: `marvin-context-protocol[bot]` - **Email**: `225465937+marvin-context-protocol[bot]@users.noreply.github.com` - **User ID**: `225465937` This ensures consistent attribution for automated contributions and proper GitHub integration. **Sources:** [.github/workflows/update-sdk-docs.yml68-69](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/update-sdk-docs.yml#L68-L69) [.github/workflows/update-config-schema.yml85-86](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/update-config-schema.yml#L85-L86) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Project Infrastructure](#project-infrastructure.md) - [AI-Driven Automation System](#ai-driven-automation-system.md) - [Marvin Context Protocol Workflow](#marvin-context-protocol-workflow.md) - [Issue Triage Automation](#issue-triage-automation.md) - [Documentation Automation](#documentation-automation.md) - [SDK Documentation Pipeline](#sdk-documentation-pipeline.md) - [Configuration Schema Updates](#configuration-schema-updates.md) - [Issue Management Automation](#issue-management-automation.md) - [Duplicate Detection System](#duplicate-detection-system.md) - [Auto-Close Implementation](#auto-close-implementation.md) - [CI/CD Pipeline](#cicd-pipeline.md) - [Publishing Workflow](#publishing-workflow.md) - [Infrastructure Components](#infrastructure-components.md) - [GitHub App Integration](#github-app-integration.md) - [External Service Dependencies](#external-service-dependencies.md) - [Automation Bot Identity](#automation-bot-identity.md)",
  "Command Line Interface | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Command Line Interface Relevant source files - [docs/patterns/cli.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/patterns/cli.mdx) - [src/fastmcp/cli/claude.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/claude.py) - [src/fastmcp/cli/cli.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py) - [src/fastmcp/cli/install/claude\\_code.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/claude_code.py) - [src/fastmcp/cli/install/claude\\_desktop.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/claude_desktop.py) - [src/fastmcp/cli/install/cursor.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/cursor.py) - [src/fastmcp/cli/install/mcp\\_json.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/mcp_json.py) - [src/fastmcp/cli/run.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py) - [tests/cli/test\\_cli.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/cli/test_cli.py) - [tests/cli/test\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/cli/test_config.py) - [tests/cli/test\\_cursor.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/cli/test_cursor.py) - [tests/cli/test\\_run\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/cli/test_run_config.py) - [tests/utilities/test\\_cli.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/test_cli.py)",
  "The FastMCP CLI provides a comprehensive command-line interface for running, developing, installing, and inspecting MCP servers. Built with `cyclopts`, it serves as the primary entry point for all FastMCP operations from development to production deployment. For information about the underlying server architecture that the CLI manages, see [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md). For details about client-server communication patterns, see [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md). ## CLI Application Architecture The FastMCP CLI is implemented as a `cyclopts.App` with modular command structure supporting both direct execution and subprocess delegation through `uv`. ### Main CLI Application Structure ``` ``` **Sources:** [src/fastmcp/cli/cli.py36-40](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L36-L40) [src/fastmcp/cli/cli.py781-782](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L781-L782) [src/fastmcp/cli/cli.py871-874](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L871-L874) ### Configuration and Environment Management ``` ``` **Sources:** [src/fastmcp/utilities/cli.py23](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/cli.py#L23-L23) [src/fastmcp/cli/cli.py465-469](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L465-L469) [src/fastmcp/cli/cli.py497-517](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L497-L517) ## Core CLI Commands ### Version Command The `version()` command provides comprehensive version and platform information for debugging and support purposes. | Option | Flag | Description | | ------ | -------- | ------------------------------------------------------- | | Copy | `--copy` | Copy version information to clipboard using `pyperclip` | Information displayed: - `fastmcp.__version__` - FastMCP version - `importlib.metadata.version(\"mcp\")` - MCP protocol version - `platform.python_version()` - Python version - `platform.platform()` - Platform details - `Path(fastmcp.__file__).resolve().parents[1]` - FastMCP root path **Sources:** [src/fastmcp/cli/cli.py92-127](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L92-L127) ### Run Command The `run()` command executes MCP servers with flexible server specification parsing and multiple execution modes. #### Server Specification Resolution ``` ``` **Sources:** [src/fastmcp/cli/run.py79-198](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py#L79-L198) [src/fastmcp/cli/run.py25-29](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py#L25-L29) [src/fastmcp/cli/run.py31-49](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py#L31-L49) [src/fastmcp/cli/run.py51-60](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py#L51-L60) #### Transport Configuration | Transport | Default Host | Default Port | Default Path | | -------------------------- | ------------ | ------------ | ------------ | | `stdio` | N/A | N/A | N/A | | `http` / `streamable-http` | `127.0.0.1` | `8000` | `/mcp/` | | `sse` | `127.0.0.1` | `8000` | `/sse/` | The run command supports both direct execution and `uv run` subprocess execution based on environment configuration. **Sources:** [src/fastmcp/cli/cli.py313-333](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L313-L333) [src/fastmcp/cli/cli.py465-517](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L465-L517) ### Dev Command",
  "The `dev()` command launches the MCP Inspector with automatic environment setup and dependency management. #### Development Workflow ``` ``` The `dev` command always runs via `uv run` subprocess and includes deprecation warnings for servers using the legacy `dependencies` parameter. **Sources:** [src/fastmcp/cli/cli.py129-307](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L129-L307) [src/fastmcp/cli/cli.py43-56](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L43-L56) [src/fastmcp/cli/cli.py234-251](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L234-L251) ### Inspect Command The `inspect()` command analyzes FastMCP servers and generates detailed reports in multiple formats. | Option | Flag | Description | | ------ | ----------------- | ---------------------------------- | | Format | `--format` / `-f` | Output format: `fastmcp` or `mcp` | | Output | `--output` / `-o` | Save to file (requires `--format`) | #### Inspection Process ``` ``` **Sources:** [src/fastmcp/cli/cli.py543-777](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L543-L777) [src/fastmcp/utilities/inspect.py26-28](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/inspect.py#L26-L28) ## Install Commands The FastMCP CLI provides installation commands for multiple MCP clients through a dedicated install subcommand structure. ### Install Command Architecture ``` ``` **Sources:** [src/fastmcp/cli/cli.py874](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L874-L874) [src/fastmcp/cli/install/claude\\_code.py153-244](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/claude_code.py#L153-L244) [src/fastmcp/cli/install/claude\\_desktop.py125-214](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/claude_desktop.py#L125-L214) [src/fastmcp/cli/install/cursor.py234-331](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/cursor.py#L234-L331) [src/fastmcp/cli/install/mcp\\_json.py98-196](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/mcp_json.py#L98-L196) ### Client-Specific Installation #### Claude Desktop Integration ``` ``` **Sources:** [src/fastmcp/cli/install/claude\\_desktop.py20-36](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/claude_desktop.py#L20-L36) [src/fastmcp/cli/install/claude\\_desktop.py38-123](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/claude_desktop.py#L38-L123) #### Cursor Integration ``` ``` **Sources:** [src/fastmcp/cli/install/cursor.py21-43](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/cursor.py#L21-L43) [src/fastmcp/cli/install/cursor.py45-66](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/cursor.py#L45-L66) ### Project Preparation The `project prepare` command creates persistent environments for repeated server execution. #### Project Prepare Flow ``` ```",
  "**Sources:** [src/fastmcp/cli/cli.py784-867](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L784-L867) [src/fastmcp/utilities/mcp\\_server\\_config/\\_\\_init\\_\\_.py31](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/mcp_server_config/__init__.py#L31-L31) [src/fastmcp/utilities/mcp\\_server\\_config/\\_\\_init\\_\\_.py55-57](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/mcp_server_config/__init__.py#L55-L57) ## Configuration System Integration ### Configuration Loading and Merging The CLI integrates with the FastMCP configuration system to provide seamless operation across different deployment scenarios. ``` ``` **Sources:** [src/fastmcp/utilities/cli.py23](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/cli.py#L23-L23) [src/fastmcp/cli/cli.py424-439](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L424-L439) [src/fastmcp/cli/cli.py467-469](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L467-L469) ## Error Handling and Platform Support ### Cross-Platform Command Detection The CLI handles platform-specific differences for external tool detection and subprocess execution. ``` ``` **Sources:** [src/fastmcp/cli/cli.py43-56](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L43-L56) [src/fastmcp/cli/install/claude\\_code.py20-66](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/claude_code.py#L20-L66) [src/fastmcp/cli/install/cursor.py45-66](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/install/cursor.py#L45-L66) ## Command Execution Patterns ### UV Integration The CLI leverages `uv` for modern Python dependency management and isolated execution environments: ``` ``` **Sources:** [src/fastmcp/cli/cli.py60-100](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L60-L100) [src/fastmcp/cli/cli.py389-413](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L389-L413) [src/fastmcp/cli/run.py174-250](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py#L174-L250) ### Cross-Platform Considerations The CLI handles platform-specific differences, particularly for Windows systems: | Platform | NPX Detection | Shell Usage | Path Handling | | --------- | ------------------------------- | ------------- | --------------------------- | | Windows | Try `npx.cmd`, `npx.exe`, `npx` | `shell=True` | Drive letter colon handling | | Unix-like | Use `npx` directly | `shell=False` | Standard path parsing | **Sources:** [src/fastmcp/cli/cli.py35-49](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L35-L49) [src/fastmcp/cli/cli.py257-262](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L257-L262) ## Error Handling and Validation The CLI implements comprehensive error handling with structured logging: - **File validation**: Checks for file existence and type during path parsing - **Module import errors**: Graceful handling of import failures with descriptive messages - **Server validation**: Ensures imported objects are valid FastMCP instances - **Subprocess errors**: Captures and reports subprocess execution failures - **Configuration validation**: Validates MCP config files using Pydantic models Exit codes follow standard conventions: - `0`: Success - `1`: General errors (file not found, import failures, validation errors)",
  "**Sources:** [src/fastmcp/cli/run.py52-57](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py#L52-L57) [src/fastmcp/cli/run.py94-100](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py#L94-L100) [src/fastmcp/cli/run.py118-124](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/run.py#L118-L124) [src/fastmcp/cli/cli.py265-282](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/cli/cli.py#L265-L282) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Command Line Interface](#command-line-interface.md) - [CLI Application Architecture](#cli-application-architecture.md) - [Main CLI Application Structure](#main-cli-application-structure.md) - [Configuration and Environment Management](#configuration-and-environment-management.md) - [Core CLI Commands](#core-cli-commands.md) - [Version Command](#version-command.md) - [Run Command](#run-command.md) - [Server Specification Resolution](#server-specification-resolution.md) - [Transport Configuration](#transport-configuration.md) - [Dev Command](#dev-command.md) - [Development Workflow](#development-workflow.md) - [Inspect Command](#inspect-command.md) - [Inspection Process](#inspection-process.md) - [Install Commands](#install-commands.md) - [Install Command Architecture](#install-command-architecture.md) - [Client-Specific Installation](#client-specific-installation.md) - [Claude Desktop Integration](#claude-desktop-integration.md) - [Cursor Integration](#cursor-integration.md) - [Project Preparation](#project-preparation.md) - [Project Prepare Flow](#project-prepare-flow.md) - [Configuration System Integration](#configuration-system-integration.md) - [Configuration Loading and Merging](#configuration-loading-and-merging.md) - [Error Handling and Platform Support](#error-handling-and-platform-support.md) - [Cross-Platform Command Detection](#cross-platform-command-detection.md) - [Command Execution Patterns](#command-execution-patterns.md) - [UV Integration](#uv-integration.md) - [Cross-Platform Considerations](#cross-platform-considerations.md) - [Error Handling and Validation](#error-handling-and-validation.md)",
  "FastMCP Client System | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # FastMCP Client System Relevant source files - [docs/clients/client.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/clients/client.mdx) - [docs/clients/transports.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/clients/transports.mdx) - [docs/servers/composition.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/servers/composition.mdx) - [docs/servers/proxy.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/servers/proxy.mdx) - [examples/in\\_memory\\_proxy\\_example.py](https://github.com/jlowin/fastmcp/blob/66221ed3/examples/in_memory_proxy_example.py) - [src/fastmcp/client/client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py) - [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) - [src/fastmcp/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/mcp_config.py) - [src/fastmcp/server/proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py) - [src/fastmcp/utilities/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/mcp_config.py) - [tests/client/test\\_client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_client.py) - [tests/client/test\\_stdio.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_stdio.py) The FastMCP Client System provides a programmatic interface for interacting with Model Context Protocol (MCP) servers through a well-typed, Pythonic API. This system handles protocol operations, connection management, and session lifecycle while abstracting away transport-specific implementation details.",
  "For information about creating and configuring MCP servers, see [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md). For details about HTTP server deployment and authentication, see [HTTP Server and Deployment](jlowin/fastmcp/6-openapi-integration.md). ## Core Architecture The FastMCP Client System implements a separation of concerns between protocol handling and connection management through two primary components: | Component | Responsibility | Key Classes | | ------------- | -------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- | | **Client** | MCP protocol operations, session management, callback handling | `Client` | | **Transport** | Connection establishment, communication channel management | `ClientTransport`, `SSETransport`, `StreamableHttpTransport`, `StdioTransport`, `FastMCPTransport` | ### Client-Transport Relationship ``` ``` **Sources**: [src/fastmcp/client/client.py90-149](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L90-L149) [src/fastmcp/client/transports.py71-115](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L71-L115) The `Client` class uses generic typing to preserve specific transport types, enabling transport-specific configuration while maintaining a consistent protocol interface. ### Transport Inference The client automatically selects appropriate transports based on input type: ``` ``` **Sources**: [src/fastmcp/client/transports.py888-924](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L888-L924) [src/fastmcp/client/client.py150-221](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L150-L221) ## Client Session Management The `Client` implements a sophisticated session management system supporting reentrant context managers and concurrent usage patterns. ### Session State Architecture ``` ``` **Sources**: [src/fastmcp/client/client.py73-88](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L73-L88) [src/fastmcp/client/client.py451-474](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L451-L474) ### Connection Lifecycle The client manages connection lifecycle through reference counting and background session management: ``` ``` **Sources**: [src/fastmcp/client/client.py367-411](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L367-L411) [src/fastmcp/client/client.py413-449](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L413-L449) ## Transport System ### Transport Interface All transports implement the `ClientTransport` abstract base class: ``` ``` **Sources**: [src/fastmcp/client/transports.py71-115](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L71-L115) [src/fastmcp/client/transports.py301-417](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L301-L417) ### STDIO Transport Environment Management STDIO transports implement environment isolation for security: ``` ``` **Sources**: [src/fastmcp/client/transports.py301-417](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L301-L417) [src/fastmcp/client/transports.py465-508](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L465-L508) ## Client Protocol Operations The `Client` class provides methods for all MCP protocol operations, with both raw protocol and convenience variants: ### Tool Operations | Method | Return Type | Description | | ------------------ | --------------------------- | --------------------------------- | | `list_tools()` | `list[mcp.types.Tool]` | List available tools | | `list_tools_mcp()` | `mcp.types.ListToolsResult` | Raw MCP protocol result | | `call_tool()` | `CallToolResult` | Execute tool with type conversion | | `call_tool_mcp()` | `mcp.types.CallToolResult` | Raw MCP tool execution |",
  "**Sources**: [src/fastmcp/client/client.py763-895](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L763-L895) ### Resource Operations | Method | Return Type | Description | | --------------------------- | -------------------------------------------------------------- | ------------------------ | | `list_resources()` | `list[mcp.types.Resource]` | List available resources | | `list_resource_templates()` | `list[mcp.types.ResourceTemplate]` | List URI templates | | `read_resource()` | `list[mcp.types.TextResourceContents \\| BlobResourceContents]` | Read resource contents | **Sources**: [src/fastmcp/client/client.py525-636](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L525-L636) ### Prompt Operations | Method | Return Type | Description | | ---------------- | --------------------------- | ---------------------------- | | `list_prompts()` | `list[mcp.types.Prompt]` | List available prompts | | `get_prompt()` | `mcp.types.GetPromptResult` | Render prompt with arguments | **Sources**: [src/fastmcp/client/client.py639-716](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L639-L716) ### Tool Result Processing The client provides structured result handling through the `CallToolResult` dataclass: ``` ``` **Sources**: [src/fastmcp/client/client.py826-894](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L826-L894) [src/fastmcp/client/client.py897-903](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L897-L903) ## Client Configuration and Handlers ### Handler System The client supports multiple callback handlers for server interactions: | Handler Type | Purpose | Interface | | ----------------- | -------------------------------- | ------------------------------------------ | | `LogHandler` | Process server log messages | `(LogMessage) -> Awaitable[None]` | | `ProgressHandler` | Monitor operation progress | `(float, float?, str?) -> Awaitable[None]` | | `SamplingHandler` | Respond to LLM sampling requests | Complex sampling interface | | `RootsHandler` | Provide filesystem roots | `() -> RootsList` | **Sources**: [src/fastmcp/client/client.py210-267](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L210-L267) ### Client Factory Pattern The client constructor uses overloaded signatures to support transport inference while maintaining type safety: ``` ``` **Sources**: [src/fastmcp/client/client.py150-221](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py#L150-L221) [src/fastmcp/client/transports.py888-924](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L888-L924) ## Integration with Server Composition The client system integrates with FastMCP's server composition patterns through several mechanisms: ### Proxy Client Usage ``` ``` **Sources**: [docs/servers/proxy.mdx278-329](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/servers/proxy.mdx#L278-L329) [examples/in\\_memory\\_proxy\\_example.py40-50](https://github.com/jlowin/fastmcp/blob/66221ed3/examples/in_memory_proxy_example.py#L40-L50) ### Multi-Server Configuration The `MCPConfigTransport` enables single-client access to multiple servers through automatic composition: ``` ``` **Sources**: [src/fastmcp/client/transports.py817-887](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py#L817-L887) [docs/clients/client.mdx124-142](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/clients/client.mdx#L124-L142) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [FastMCP Client System](#fastmcp-client-system.md) - [Core Architecture](#core-architecture.md) - [Client-Transport Relationship](#client-transport-relationship.md) - [Transport Inference](#transport-inference.md) - [Client Session Management](#client-session-management.md) - [Session State Architecture](#session-state-architecture.md) - [Connection Lifecycle](#connection-lifecycle.md) - [Transport System](#transport-system.md) - [Transport Interface](#transport-interface.md) - [STDIO Transport Environment Management](#stdio-transport-environment-management.md) - [Client Protocol Operations](#client-protocol-operations.md) - [Tool Operations](#tool-operations.md) - [Resource Operations](#resource-operations.md) - [Prompt Operations](#prompt-operations.md) - [Tool Result Processing](#tool-result-processing.md) - [Client Configuration and Handlers](#client-configuration-and-handlers.md) - [Handler System](#handler-system.md) - [Client Factory Pattern](#client-factory-pattern.md) - [Integration with Server Composition](#integration-with-server-composition.md) - [Proxy Client Usage](#proxy-client-usage.md) - [Multi-Server Configuration](#multi-server-configuration.md)",
  "Testing and Development Framework | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Testing and Development Framework Relevant source files - [src/fastmcp/utilities/tests.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/tests.py) - [tests/client/auth/test\\_oauth\\_client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/auth/test_oauth_client.py) - [tests/client/test\\_openapi\\_experimental.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_openapi_experimental.py) - [tests/client/test\\_openapi\\_legacy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_openapi_legacy.py) - [tests/client/test\\_sse.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_sse.py) - [tests/client/test\\_streamable\\_http.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_streamable_http.py) - [tests/conftest.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/conftest.py) - [tests/contrib/test\\_bulk\\_tool\\_caller.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/contrib/test_bulk_tool_caller.py) - [tests/server/auth/providers/test\\_descope.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/providers/test_descope.py) - [tests/server/auth/providers/test\\_workos.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/providers/test_workos.py) - [tests/server/auth/test\\_jwt\\_provider.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/test_jwt_provider.py) - [tests/server/http/test\\_http\\_dependencies.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/http/test_http_dependencies.py) This document covers FastMCP's comprehensive testing infrastructure, development utilities, and testing patterns. It explains the testing utilities, fixtures, and methodologies used to test FastMCP servers, clients, transports, and integrations.",
  "For information about deployment and production configuration, see [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md). For development workflow tools like the CLI, see [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md). ## Testing Infrastructure Overview FastMCP provides a robust testing framework designed to handle the complexities of testing distributed MCP systems, including process isolation, network communication, authentication flows, and transport mechanisms. ``` ``` **Testing Framework Architecture** Sources: [src/fastmcp/utilities/tests.py1-200](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/tests.py#L1-L200) [tests/conftest.py1-60](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/conftest.py#L1-L60) ## Core Testing Utilities ### Process Management The `run_server_in_process()` function provides isolated server testing by running FastMCP servers in separate processes: ``` ``` **Process Isolation for Server Testing** The utility handles server lifecycle, port allocation, and cleanup automatically: | Function | Purpose | Key Parameters | | ------------------------- | -------------------------------------- | --------------------------------------- | | `run_server_in_process()` | Spawns server in separate process | `server_fn`, `host`, `port`, `**kwargs` | | Socket readiness check | Waits for server to accept connections | `max_attempts=30` | | Process cleanup | Terminates server process | `timeout=5` for graceful, then `kill()` | Sources: [src/fastmcp/utilities/tests.py74-140](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/tests.py#L74-L140) ### Settings Override System The `temporary_settings()` context manager allows safe modification of FastMCP configuration during tests: ``` ``` Sources: [src/fastmcp/utilities/tests.py24-55](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/tests.py#L24-L55) ### Authentication Testing The `HeadlessOAuth` class simulates OAuth flows without browser interaction: ``` ``` **Headless OAuth Flow for Testing** The implementation bypasses browser interaction by making direct HTTP requests and parsing redirect responses: | Method | Purpose | Returns | | -------------------- | -------------------------------- | -------------------- | | `redirect_handler()` | Makes HTTP request to auth URL | Stores response | | `callback_handler()` | Extracts auth code from redirect | `(auth_code, state)` | Sources: [src/fastmcp/utilities/tests.py154-200](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/tests.py#L154-L200) ## Test Fixtures and Configuration ### Port Management FastMCP provides utilities for managing network ports in test environments: ``` ``` The `free_port_factory` tracks used ports to prevent conflicts in parallel test execution. Sources: [tests/conftest.py34-59](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/conftest.py#L34-L59) ### Integration Test Marking Tests are automatically categorized based on their location: ``` ``` Sources: [tests/conftest.py8-13](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/conftest.py#L8-L13) ## Transport Testing Patterns ### HTTP Transport Testing FastMCP tests HTTP transports using real server instances with comprehensive scenarios: ``` ``` **HTTP Transport Testing Architecture** Key test patterns include: - **Parameterized testing**: Tests run against both stateless and stateful HTTP modes - **Header propagation**: Verification that client headers reach server components - **Timeout handling**: Testing both client-level and operation-level timeouts - **Progress reporting**: Async progress updates during long-running operations Sources: [tests/client/test\\_streamable\\_http.py21-248](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_streamable_http.py#L21-L248) ### SSE Transport Testing Server-Sent Events transport testing follows similar patterns with transport-specific considerations: | Test Category | Key Features | Example Test | | ------------------ | ---------------------------------- | --------------------------------------------- | | Basic connectivity | Ping, list operations | `test_ping()` | | Header handling | Client header propagation | `test_http_headers()` | | Timeout behavior | Platform-specific timeout handling | `TestTimeout` class | | Nested routing | Complex URL path resolution | `test_nested_sse_server_resolves_correctly()` |",
  "Sources: [tests/client/test\\_sse.py19-167](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_sse.py#L19-L167) ## Authentication Testing Framework ### JWT Provider Testing FastMCP includes comprehensive JWT testing with both RSA and symmetric key scenarios: ``` ``` **JWT Authentication Testing Framework** The testing framework provides helpers for various JWT scenarios: - **RSA key management**: `RSAKeyPair.generate()` creates test key pairs - **Symmetric keys**: `SymmetricKeyHelper` for HMAC algorithms - **Token validation**: Comprehensive issuer, audience, and scope testing - **JWKS mocking**: HTTP mocking for JWKS URI endpoints Sources: [tests/server/auth/test\\_jwt\\_provider.py14-871](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/test_jwt_provider.py#L14-L871) ### OAuth Provider Testing OAuth providers are tested using integration patterns with real HTTP servers: ``` ``` Sources: [tests/server/auth/providers/test\\_descope.py121-141](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/providers/test_descope.py#L121-L141) [tests/server/auth/providers/test\\_workos.py160-178](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/providers/test_workos.py#L160-L178) ## Component Testing Patterns ### Tool Testing with BulkToolCaller The `BulkToolCaller` provides patterns for testing tool execution at scale: ``` ``` **Bulk Tool Testing Framework** Key testing patterns include: - **Live server integration**: Tests use actual `FastMCP` instances with registered tools - **Error propagation**: Testing both fail-fast and continue-on-error modes - **Result validation**: Snapshot testing for consistent output verification Sources: [tests/contrib/test\\_bulk\\_tool\\_caller.py70-289](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/contrib/test_bulk_tool_caller.py#L70-L289) ### HTTP Dependencies Testing FastMCP tests dependency injection in HTTP contexts across multiple transports: | Component | Test Pattern | Verification | | -------------------- | ---------------------------- | ----------------------------------- | | `get_http_request()` | Tool, Resource, Prompt usage | Header extraction from HTTP request | | StreamableHttp | Direct header propagation | Client headers in server context | | SSE | Event stream headers | Header preservation across SSE | Sources: [tests/server/http/test\\_http\\_dependencies.py13-124](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/http/test_http_dependencies.py#L13-L124) ## Development Workflow Testing ### OpenAPI Integration Testing FastMCP tests OpenAPI server generation with both legacy and experimental parsers: ``` ``` The testing verifies: - **Route mapping**: HTTP routes to MCP components - **Header propagation**: Client and server headers through proxy chains - **Resource templates**: Dynamic URI pattern matching Sources: [tests/client/test\\_openapi\\_legacy.py13-47](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_openapi_legacy.py#L13-L47) [tests/client/test\\_openapi\\_experimental.py14-46](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_openapi_experimental.py#L14-L46) ## Best Practices and Patterns ### Test Organization FastMCP follows these testing organization principles: 1. **Fixture-based setup**: Reusable server and client configurations 2. **Process isolation**: Each test gets clean server instances 3. **Transport agnostic**: Tests run across multiple transport types 4. **Integration marking**: Automatic categorization of integration vs unit tests 5. **Parallel execution**: xdist compatibility with port management ### Error Testing Patterns ``` ``` ### Authentication Test Patterns ``` ``` Sources: [tests/client/test\\_streamable\\_http.py222-248](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/client/test_streamable_http.py#L222-L248) [tests/server/auth/providers/test\\_descope.py156-164](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/providers/test_descope.py#L156-L164) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [Testing and Development Framework](#testing-and-development-framework.md) - [Testing Infrastructure Overview](#testing-infrastructure-overview.md) - [Core Testing Utilities](#core-testing-utilities.md) - [Process Management](#process-management.md) - [Settings Override System](#settings-override-system.md) - [Authentication Testing](#authentication-testing.md) - [Test Fixtures and Configuration](#test-fixtures-and-configuration.md) - [Port Management](#port-management.md) - [Integration Test Marking](#integration-test-marking.md) - [Transport Testing Patterns](#transport-testing-patterns.md) - [HTTP Transport Testing](#http-transport-testing.md) - [SSE Transport Testing](#sse-transport-testing.md) - [Authentication Testing Framework](#authentication-testing-framework.md) - [JWT Provider Testing](#jwt-provider-testing.md) - [OAuth Provider Testing](#oauth-provider-testing.md) - [Component Testing Patterns](#component-testing-patterns.md) - [Tool Testing with BulkToolCaller](#tool-testing-with-bulktoolcaller.md) - [HTTP Dependencies Testing](#http-dependencies-testing.md) - [Development Workflow Testing](#development-workflow-testing.md) - [OpenAPI Integration Testing](#openapi-integration-testing.md) - [Best Practices and Patterns](#best-practices-and-patterns.md) - [Test Organization](#test-organization.md) - [Error Testing Patterns](#error-testing-patterns.md) - [Authentication Test Patterns](#authentication-test-patterns.md)",
  "OpenAPI Integration | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # OpenAPI Integration Relevant source files - [src/fastmcp/server/openapi.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py) - [src/fastmcp/utilities/openapi.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py) - [tests/server/openapi/test\\_optional\\_parameters.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/openapi/test_optional_parameters.py) - [tests/utilities/openapi/test\\_openapi.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/openapi/test_openapi.py) - [tests/utilities/openapi/test\\_openapi\\_advanced.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/openapi/test_openapi_advanced.py) - [tests/utilities/openapi/test\\_openapi\\_fastapi.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/openapi/test_openapi_fastapi.py) FastMCP's OpenAPI integration enables automatic generation of FastMCP servers from OpenAPI specifications, converting HTTP API definitions into MCP Tools, Resources, and ResourceTemplates. This system parses OpenAPI schemas and creates appropriate MCP components based on configurable route mapping rules. For general FastMCP server functionality, see [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md). For HTTP server deployment, see [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md). For client-side API consumption, see [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md). ## Architecture Overview The OpenAPI integration consists of three main layers: schema parsing, route mapping, and component generation. The system transforms OpenAPI specifications into FastMCP components through an intermediate representation. ``` ```",
  "**Sources:** [src/fastmcp/server/openapi.py1-100](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L1-L100) [src/fastmcp/utilities/openapi.py200-250](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py#L200-L250) ## Core Components ### FastMCPOpenAPI Server Class The `FastMCPOpenAPI` class extends `FastMCP` to provide OpenAPI-based server creation. It parses OpenAPI specifications and automatically generates appropriate MCP components. ``` ``` **Sources:** [src/fastmcp/server/openapi.py696-831](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L696-L831) [src/fastmcp/server/openapi.py833-887](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L833-L887) ### OpenAPI Component Types Three specialized component classes handle different types of HTTP endpoints: | Component | Purpose | HTTP Methods | Use Case | | ------------------------- | --------------------- | ------------------------ | ------------------------------ | | `OpenAPITool` | Executable operations | POST, PUT, PATCH, DELETE | API actions, data modification | | `OpenAPIResource` | Static data endpoints | GET (no path params) | Fixed data retrieval | | `OpenAPIResourceTemplate` | Parameterized data | GET (with path params) | Dynamic data retrieval | **Sources:** [src/fastmcp/server/openapi.py229-521](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L229-L521) [src/fastmcp/server/openapi.py523-640](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L523-L640) [src/fastmcp/server/openapi.py642-694](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L642-L694) ## Route Mapping System ### MCPType Enumeration The `MCPType` enum defines the target component types for HTTP routes: ``` ``` **Sources:** [src/fastmcp/server/openapi.py78-94](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L78-L94) ### RouteMap Configuration `RouteMap` objects define mapping rules from HTTP routes to MCP component types: ``` ``` **Sources:** [src/fastmcp/server/openapi.py110-182](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L110-L182) [src/fastmcp/server/openapi.py184-227](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L184-L227) ### Default Route Mapping By default, all routes are converted to Tools unless custom mappings specify otherwise: ``` ``` **Sources:** [src/fastmcp/server/openapi.py177-181](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L177-L181) ## Schema Parsing System ### HTTPRoute Intermediate Representation The parsing system converts OpenAPI specifications into `HTTPRoute` objects that capture all necessary information for component generation: ``` ``` **Sources:** [src/fastmcp/utilities/openapi.py201-253](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py#L201-L253) [src/fastmcp/utilities/openapi.py379-477](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py#L379-L477) [src/fastmcp/utilities/openapi.py479-543](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py#L479-L543) ### Parameter Processing The system handles complex parameter scenarios including location conflicts and array formatting:",
  "| Parameter Location | Handling | Example | | ------------------ | -------------------------- | -------------------- | | `path` | Required, URL substitution | `/users/{userId}` | | `query` | Optional, query string | `?limit=10&offset=0` | | `header` | Optional, HTTP headers | `X-API-Key: secret` | | `cookie` | Optional, cookie values | `session=abc123` | **Sources:** [src/fastmcp/utilities/openapi.py124-135](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py#L124-L135) [src/fastmcp/server/openapi.py264-418](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L264-L418) ## Component Creation Process ### Schema Combination The `_combine_schemas` function merges parameter schemas with request body schemas, handling name collisions by suffixing parameter names with their location: ``` ``` **Sources:** [src/fastmcp/utilities/openapi.py892-1050](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py#L892-L1050) ### Name Generation and Collision Handling The system generates unique component names using operation IDs, summaries, or path-based naming with collision detection: ``` ``` **Sources:** [src/fastmcp/server/openapi.py833-856](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L833-L856) [src/fastmcp/server/openapi.py858-886](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L858-L886) [src/fastmcp/server/openapi.py44-64](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L44-L64) ## HTTP Request Execution ### Parameter Serialization OpenAPI components handle complex parameter serialization including arrays, objects, and style-specific formatting: ``` ``` **Sources:** [src/fastmcp/server/openapi.py288-417](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L288-L417) [src/fastmcp/utilities/openapi.py41-121](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py#L41-L121) ### Response Processing The system handles various response types and content negotiation: | Content Type | Processing | Output | | ------------------ | ------------------------------- | ------------------------------------ | | `application/json` | JSON parsing, structured output | `ToolResult(structured_content=...)` | | `text/*` | Text content | `ToolResult(content=...)` | | `application/xml` | Text content | `ToolResult(content=...)` | | Binary | Raw bytes | `ToolResult(content=...)` | **Sources:** [src/fastmcp/server/openapi.py482-502](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L482-L502) [src/fastmcp/server/openapi.py614-621](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L614-L621) ## Advanced Features ### Custom Route Mapping Functions Advanced route mapping through `route_map_fn` and `mcp_component_fn` callbacks: ``` ``` **Sources:** [src/fastmcp/server/openapi.py798-812](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L798-L812) [src/fastmcp/server/openapi.py930-939](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L930-L939) ### Output Schema Generation The system extracts output schemas from OpenAPI response definitions for structured tool results: ``` ``` **Sources:** [src/fastmcp/utilities/openapi.py1098-1200](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/openapi.py#L1098-L1200) ### Error Handling Comprehensive error handling for HTTP requests, parameter validation, and schema resolution:",
  "- **Parameter Validation**: Missing required path parameters raise `ToolError` - **HTTP Errors**: 4xx/5xx responses converted to `ValueError` with detailed messages - **Schema Resolution**: External references raise clear error messages - **Connection Errors**: Network issues converted to `ValueError` **Sources:** [src/fastmcp/server/openapi.py504-520](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L504-L520) [src/fastmcp/server/openapi.py623-639](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/openapi.py#L623-L639) [tests/utilities/openapi/test\\_openapi\\_advanced.py655-665](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/openapi/test_openapi_advanced.py#L655-L665) Dismiss Refresh this wiki Enter email to refresh ### On this page - [OpenAPI Integration](#openapi-integration.md) - [Architecture Overview](#architecture-overview.md) - [Core Components](#core-components.md) - [FastMCPOpenAPI Server Class](#fastmcpopenapi-server-class.md) - [OpenAPI Component Types](#openapi-component-types.md) - [Route Mapping System](#route-mapping-system.md) - [MCPType Enumeration](#mcptype-enumeration.md) - [RouteMap Configuration](#routemap-configuration.md) - [Default Route Mapping](#default-route-mapping.md) - [Schema Parsing System](#schema-parsing-system.md) - [HTTPRoute Intermediate Representation](#httproute-intermediate-representation.md) - [Parameter Processing](#parameter-processing.md) - [Component Creation Process](#component-creation-process.md) - [Schema Combination](#schema-combination.md) - [Name Generation and Collision Handling](#name-generation-and-collision-handling.md) - [HTTP Request Execution](#http-request-execution.md) - [Parameter Serialization](#parameter-serialization.md) - [Response Processing](#response-processing.md) - [Advanced Features](#advanced-features.md) - [Custom Route Mapping Functions](#custom-route-mapping-functions.md) - [Output Schema Generation](#output-schema-generation.md) - [Error Handling](#error-handling.md)",
  "Documentation and Updates | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Documentation and Updates Relevant source files - [.github/workflows/run-static.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-static.yml) - [.pre-commit-config.yaml](https://github.com/jlowin/fastmcp/blob/66221ed3/.pre-commit-config.yaml) - [docs/assets/updates/release-2-7.png](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/assets/updates/release-2-7.png) - [docs/changelog.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/changelog.mdx) - [docs/updates.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx) - [src/fastmcp/contrib/mcp\\_mixin/README.md](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/contrib/mcp_mixin/README.md) This page covers the FastMCP documentation system, release management, and how documentation is structured and maintained within the project. It explains the technical infrastructure behind documentation generation, changelog management, and the various output formats designed for both human and LLM consumption. For information about the CLI system and commands, see [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md). For details about project infrastructure and automation, see [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md). ## Documentation Architecture The FastMCP documentation system consists of several interconnected components that generate and maintain documentation across multiple formats and platforms. ### Documentation Structure Overview ``` ``` **Sources:** [docs/changelog.mdx1-10](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/changelog.mdx#L1-L10) [docs/updates.mdx1-10](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx#L1-L10) [.github/workflows/run-static.yml1-20](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-static.yml#L1-L20) [.pre-commit-config.yaml1-15](https://github.com/jlowin/fastmcp/blob/66221ed3/.pre-commit-config.yaml#L1-L15) ### Documentation File Organization",
  "The documentation follows a structured hierarchy with specific file types and naming conventions: | File Type | Location | Purpose | Example | | -------------------- | -------------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ | | Release Notes | `docs/changelog.mdx` | Detailed changelog entries | [docs/changelog.mdx7-79](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/changelog.mdx#L7-L79) | | Update Cards | `docs/updates.mdx` | Visual release summaries | [docs/updates.mdx8-22](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx#L8-L22) | | Navigation Schema | `docs.json` | Site structure definition | Referenced in architecture | | README Documentation | `*/README.md` | Component-specific docs | [src/fastmcp/contrib/mcp\\_mixin/README.md1-117](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/contrib/mcp_mixin/README.md#L1-L117) | **Sources:** [docs/changelog.mdx1-5](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/changelog.mdx#L1-L5) [docs/updates.mdx1-6](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx#L1-L6) [src/fastmcp/contrib/mcp\\_mixin/README.md1-10](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/contrib/mcp_mixin/README.md#L1-L10) ## Release Management and Updates FastMCP uses a structured approach to managing releases and communicating updates to users and developers. ### Changelog Structure The changelog follows a consistent format with version-specific entries: ``` ``` **Sources:** [docs/changelog.mdx7-79](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/changelog.mdx#L7-L79) [docs/changelog.mdx81-123](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/changelog.mdx#L81-L123) ### Update Card System The updates system provides visual summaries of releases through structured cards: ``` ``` **Sources:** [docs/updates.mdx8-22](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx#L8-L22) [docs/updates.mdx54-68](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx#L54-L68) ## Documentation Generation and Maintenance FastMCP employs automated systems for maintaining documentation quality and consistency. ### Static Analysis and Quality Gates The documentation maintenance relies on automated quality checks: ``` ``` **Sources:** [.pre-commit-config.yaml3-48](https://github.com/jlowin/fastmcp/blob/66221ed3/.pre-commit-config.yaml#L3-L48) [.github/workflows/run-static.yml26-54](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-static.yml#L26-L54) ### Automated Documentation Updates The project uses automated workflows to maintain documentation currency: | Automation Type | Trigger | Purpose | Implementation | | ----------------- | ------------ | -------------------- | --------------------------------------------------------------------------------------------------------------------------------- | | Schema Updates | Code changes | Keep schemas current | PR-based automation | | SDK Documentation | Post-merge | Generate API docs | GitHub Actions | | Static Analysis | PR/Push | Quality validation | [.github/workflows/run-static.yml18-20](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-static.yml#L18-L20) | | Spell Checking | Pre-commit | Content quality | [.pre-commit-config.yaml43-48](https://github.com/jlowin/fastmcp/blob/66221ed3/.pre-commit-config.yaml#L43-L48) | **Sources:** [.github/workflows/run-static.yml8-22](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-static.yml#L8-L22) [.pre-commit-config.yaml25-42](https://github.com/jlowin/fastmcp/blob/66221ed3/.pre-commit-config.yaml#L25-L42) ## LLM-Friendly Documentation Formats FastMCP generates documentation in formats optimized for consumption by Large Language Models and AI assistants. ### Documentation Format Bridge ``` ```",
  "**Sources:** [src/fastmcp/contrib/mcp\\_mixin/README.md1-25](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/contrib/mcp_mixin/README.md#L1-L25) [docs/updates.mdx1-6](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/updates.mdx#L1-L6) ### Component Documentation Pattern FastMCP components follow a standardized documentation pattern, as exemplified by the MCP Mixin: ``` ``` **Sources:** [src/fastmcp/contrib/mcp\\_mixin/README.md3-25](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/contrib/mcp_mixin/README.md#L3-L25) [src/fastmcp/contrib/mcp\\_mixin/README.md26-117](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/contrib/mcp_mixin/README.md#L26-L117) The documentation system ensures that FastMCP maintains comprehensive, up-to-date, and accessible documentation across multiple formats and audiences, supporting both human developers and AI systems that need to understand and work with the codebase. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Documentation and Updates](#documentation-and-updates.md) - [Documentation Architecture](#documentation-architecture.md) - [Documentation Structure Overview](#documentation-structure-overview.md) - [Documentation File Organization](#documentation-file-organization.md) - [Release Management and Updates](#release-management-and-updates.md) - [Changelog Structure](#changelog-structure.md) - [Update Card System](#update-card-system.md) - [Documentation Generation and Maintenance](#documentation-generation-and-maintenance.md) - [Static Analysis and Quality Gates](#static-analysis-and-quality-gates.md) - [Automated Documentation Updates](#automated-documentation-updates.md) - [LLM-Friendly Documentation Formats](#llm-friendly-documentation-formats.md) - [Documentation Format Bridge](#documentation-format-bridge.md) - [Component Documentation Pattern](#component-documentation-pattern.md)",
  "HTTP Server and Deployment | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # HTTP Server and Deployment Relevant source files - [src/fastmcp/server/auth/\\_\\_init\\_\\_.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/__init__.py) - [src/fastmcp/server/auth/auth.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/auth.py) - [src/fastmcp/server/dependencies.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/dependencies.py) - [src/fastmcp/server/http.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py) - [tests/server/auth/test\\_remote\\_auth\\_provider.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/test_remote_auth_provider.py) - [tests/server/auth/test\\_static\\_token\\_verifier.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/test_static_token_verifier.py) - [tests/server/http/test\\_bearer\\_auth\\_backend.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/http/test_bearer_auth_backend.py) This page covers the HTTP server architecture and deployment patterns in FastMCP. It explains how FastMCP servers expose MCP protocols over HTTP using Starlette/ASGI applications, including support for Server-Sent Events (SSE) and Streamable HTTP transports. For client-side HTTP communication, see [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md). For authentication and security configuration, see [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md). ## HTTP Server Architecture FastMCP provides HTTP server functionality through ASGI applications built on Starlette. The system supports two primary HTTP transport mechanisms for the MCP protocol: SSE (Server-Sent Events) and Streamable HTTP. ``` ```",
  "Sources: [src/fastmcp/server/http.py98-123](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L98-L123) [src/fastmcp/server/http.py126-228](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L126-L228) [src/fastmcp/server/http.py231-321](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L231-L321) ## Transport Mechanisms ### SSE (Server-Sent Events) Transport SSE transport provides real-time bidirectional communication using Server-Sent Events for server-to-client messages and HTTP POST for client-to-server messages. ``` ``` Sources: [src/fastmcp/server/http.py126-228](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L126-L228) [src/fastmcp/server/http.py152-163](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L152-L163) ### Streamable HTTP Transport Streamable HTTP transport provides session-based communication over standard HTTP requests with optional JSON response formatting. ``` ``` Sources: [src/fastmcp/server/http.py231-321](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L231-L321) [src/fastmcp/server/http.py261-267](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L261-L267) [src/fastmcp/server/http.py304-314](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L304-L314) ## ASGI Application Structure ### Base Application Factory The `create_base_app()` function creates the foundational Starlette application with common middleware and routing. | Component | Purpose | Implementation | | -------------------------- | --------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | | `StarletteWithLifespan` | Extended Starlette app with lifespan property | [src/fastmcp/server/http.py67-71](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L67-L71) | | `RequestContextMiddleware` | Stores HTTP request in context variable | [src/fastmcp/server/http.py82-95](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L82-L95) | | Route configuration | Custom routes with MCP endpoints | [src/fastmcp/server/http.py98-123](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L98-L123) | | Middleware stack | Authentication and custom middleware | [src/fastmcp/server/http.py115-116](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L115-L116) | ### Request Context System FastMCP maintains HTTP request context through context variables for dependency injection in tools and resources. ``` ``` Sources: [src/fastmcp/server/http.py61-79](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L61-L79) [src/fastmcp/server/dependencies.py42-53](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/dependencies.py#L42-L53) [src/fastmcp/server/dependencies.py56-99](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/dependencies.py#L56-L99) ## Authentication Integration ### Auth Provider Routes Authentication providers integrate with HTTP apps through route and middleware systems. ``` ``` Sources: [src/fastmcp/server/auth/auth.py81-119](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/auth.py#L81-L119) [src/fastmcp/server/auth/auth.py121-133](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/auth.py#L121-L133) [src/fastmcp/server/http.py166-189](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L166-L189) ### Route Configuration with Authentication",
  "| Auth Type | Route Creation | Middleware | Protected Endpoints | | -------------------- | --------------------------- | --------------------------------------------- | ------------------------- | | No Auth | Direct route creation | `RequestContextMiddleware` only | None | | `TokenVerifier` | Base routes + protected MCP | `BearerAuthBackend` + `AuthContextMiddleware` | MCP endpoint | | `RemoteAuthProvider` | Protected resource metadata | Same as TokenVerifier | MCP + metadata endpoints | | `OAuthProvider` | Full OAuth server routes | Same as TokenVerifier | All OAuth + MCP endpoints | Sources: [src/fastmcp/server/http.py190-207](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L190-L207) [src/fastmcp/server/http.py273-284](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L273-L284) [src/fastmcp/server/auth/auth.py225-252](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/auth.py#L225-L252) ## Deployment Patterns ### Standalone ASGI Deployment FastMCP HTTP apps can be deployed directly with ASGI servers: ``` ``` ### Parent ASGI Application Integration FastMCP apps can be mounted within larger ASGI applications like FastAPI: ``` ``` Sources: [src/fastmcp/server/http.py29-58](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L29-L58) [src/fastmcp/server/http.py304-314](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L304-L314) ## Error Handling and Diagnostics ### Streamable HTTP Task Group Error The `StreamableHTTPASGIApp` provides detailed error messages for common deployment issues: | Error Condition | Root Cause | Error Message | Solution | | ---------------------------- | ----------------------------------- | ----------------------------------------------------------------------- | --------------------------------------------- | | Task group not initialized | Parent app doesn't use MCP lifespan | \"FastMCP's StreamableHTTPSessionManager task group was not initialized\" | Set `lifespan=mcp_app.lifespan` in parent app | | Runtime error during request | MCP library internal error | Original error message preserved | Check MCP library documentation | | General ASGI errors | Various deployment issues | Standard ASGI error handling | Review ASGI server logs | Sources: [src/fastmcp/server/http.py35-58](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py#L35-L58) ### Request Context Errors | Function | Error Condition | Exception | Solution | | -------------------- | ------------------------- | ------------------ | ------------------------------------------- | | `get_http_request()` | No active HTTP request | `RuntimeError` | Ensure called within HTTP request context | | `get_http_headers()` | No active HTTP request | Returns empty dict | Check for HTTP context before using headers | | `get_context()` | No active FastMCP context | `RuntimeError` | Ensure called within FastMCP tool/resource | Sources: [src/fastmcp/server/dependencies.py42-53](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/dependencies.py#L42-L53) [src/fastmcp/server/dependencies.py56-99](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/dependencies.py#L56-L99) [src/fastmcp/server/dependencies.py30-36](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/dependencies.py#L30-L36) Dismiss Refresh this wiki Enter email to refresh ### On this page",
  "- [HTTP Server and Deployment](#http-server-and-deployment.md) - [HTTP Server Architecture](#http-server-architecture.md) - [Transport Mechanisms](#transport-mechanisms.md) - [SSE (Server-Sent Events) Transport](#sse-server-sent-events-transport.md) - [Streamable HTTP Transport](#streamable-http-transport.md) - [ASGI Application Structure](#asgi-application-structure.md) - [Base Application Factory](#base-application-factory.md) - [Request Context System](#request-context-system.md) - [Authentication Integration](#authentication-integration.md) - [Auth Provider Routes](#auth-provider-routes.md) - [Route Configuration with Authentication](#route-configuration-with-authentication.md) - [Deployment Patterns](#deployment-patterns.md) - [Standalone ASGI Deployment](#standalone-asgi-deployment.md) - [Parent ASGI Application Integration](#parent-asgi-application-integration.md) - [Error Handling and Diagnostics](#error-handling-and-diagnostics.md) - [Streamable HTTP Task Group Error](#streamable-http-task-group-error.md) - [Request Context Errors](#request-context-errors.md)",
  "Installation and Setup | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Installation and Setup Relevant source files - [.github/workflows/run-tests.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-tests.yml) - [pyproject.toml](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml) - [tests/test\\_mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py) - [uv.lock](https://github.com/jlowin/fastmcp/blob/66221ed3/uv.lock) This document covers the installation procedures, dependency management, and initial configuration for the FastMCP framework. It provides step-by-step instructions for setting up a development or production environment. For information about running FastMCP servers and CLI commands, see [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md). For details about server configuration and settings, see [Configuration Management](jlowin/fastmcp/8-testing-and-development-framework.md). ## System Requirements FastMCP requires Python 3.10 or higher and uses UV as the primary package manager for dependency resolution and virtual environment management. ### Python Version Support | Python Version | Support Status | | -------------- | --------------- | | 3.10 | ✅ Supported | | 3.11 | ✅ Supported | | 3.12 | ✅ Supported | | < 3.10 | ❌ Not supported | **Sources:** [pyproject.toml20](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L20-L20) [pyproject.toml37-39](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L37-L39) ## Installation Methods ### UV Package Manager Installation The recommended installation method uses UV for optimal dependency resolution and environment isolation: ``` ``` ### Development Installation For development work, install with development dependencies: ``` ``` **Sources:** [.github/workflows/run-tests.yml46-48](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-tests.yml#L46-L48) [pyproject.toml47-71](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L47-L71)",
  "## Dependency Architecture The following diagram shows the core dependency structure and how packages map to FastMCP functionality: ``` ``` **Sources:** [pyproject.toml6-18](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L6-L18) [pyproject.toml43-46](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L43-L46) [pyproject.toml47-71](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L47-L71) ## Project Configuration Files FastMCP uses several configuration files for different aspects of the development and runtime environment: ### Build and Dependency Configuration ``` ``` **Sources:** [pyproject.toml1-143](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L1-L143) [uv.lock1-8](https://github.com/jlowin/fastmcp/blob/66221ed3/uv.lock#L1-L8) [.pre-commit-config.yaml1-42](https://github.com/jlowin/fastmcp/blob/66221ed3/.pre-commit-config.yaml#L1-L42) ### CLI Script Configuration The `fastmcp` command-line interface is configured as an entry point script: | Configuration | Value | Purpose | | ------------- | --------------------------------- | ----------------------------------- | | Script name | `fastmcp` | CLI command name | | Entry point | `fastmcp.cli:app` | Module and function path | | Dependencies | `cyclopts>=3.0.0`, `rich>=13.9.4` | CLI framework and output formatting | **Sources:** [pyproject.toml73-74](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L73-L74) [pyproject.toml12-13](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L12-L13) ## Environment Setup ### Environment Variables FastMCP supports several environment variables for configuration: | Variable | Purpose | Default | | -------------------------------- | ---------------------------- | ------- | | `FASTMCP_TEST_MODE` | Enable test mode | `0` | | `FASTMCP_LOG_LEVEL` | Set logging level | `INFO` | | `FASTMCP_ENABLE_RICH_TRACEBACKS` | Enable rich error formatting | `1` | ### Testing Environment The testing environment is configured with specific settings: ``` ``` **Sources:** [pyproject.toml98-119](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L98-L119) [.github/workflows/run-tests.yml25-82](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-tests.yml#L25-L82) [.github/workflows/run-static.yml26-55](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-static.yml#L26-L55) ## Authentication Setup For development and testing with authentication providers, additional environment variables are required: ### GitHub OAuth Configuration | Variable | Purpose | Required For | | ---------------------------------------- | ------------------- | ------------------- | | `FASTMCP_GITHUB_TOKEN` | GitHub API access | GitHub integrations | | `FASTMCP_TEST_AUTH_GITHUB_CLIENT_ID` | OAuth client ID | GitHub auth testing | | `FASTMCP_TEST_AUTH_GITHUB_CLIENT_SECRET` | OAuth client secret | GitHub auth testing | **Sources:** [tests/integration\\_tests/auth/test\\_github\\_provider\\_integration.py25-28](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/integration_tests/auth/test_github_provider_integration.py#L25-L28) [.github/workflows/run-tests.yml79-81](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-tests.yml#L79-L81) ## Installation Verification After installation, verify the setup using these commands: ### Basic Verification ``` ``` ### Development Environment Verification ``` ```",
  "**Sources:** [.github/workflows/run-tests.yml50-54](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-tests.yml#L50-L54) [.github/workflows/run-static.yml44-54](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-static.yml#L44-L54) [.pre-commit-config.yaml27-34](https://github.com/jlowin/fastmcp/blob/66221ed3/.pre-commit-config.yaml#L27-L34) ## Troubleshooting Common Issues ### Dependency Resolution Issues If UV fails to resolve dependencies, ensure the lockfile is up to date: ``` ``` ### Python Version Compatibility Verify Python version compatibility if installation fails: ``` ``` **Sources:** [.github/workflows/run-static.yml44-50](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-static.yml#L44-L50) [pyproject.toml20](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L20-L20) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Installation and Setup](#installation-and-setup.md) - [System Requirements](#system-requirements.md) - [Python Version Support](#python-version-support.md) - [Installation Methods](#installation-methods.md) - [UV Package Manager Installation](#uv-package-manager-installation.md) - [Development Installation](#development-installation.md) - [Dependency Architecture](#dependency-architecture.md) - [Project Configuration Files](#project-configuration-files.md) - [Build and Dependency Configuration](#build-and-dependency-configuration.md) - [CLI Script Configuration](#cli-script-configuration.md) - [Environment Setup](#environment-setup.md) - [Environment Variables](#environment-variables.md) - [Testing Environment](#testing-environment.md) - [Authentication Setup](#authentication-setup.md) - [GitHub OAuth Configuration](#github-oauth-configuration.md) - [Installation Verification](#installation-verification.md) - [Basic Verification](#basic-verification.md) - [Development Environment Verification](#development-environment-verification.md) - [Troubleshooting Common Issues](#troubleshooting-common-issues.md) - [Dependency Resolution Issues](#dependency-resolution-issues.md) - [Python Version Compatibility](#python-version-compatibility.md)",
  "Context System and Dependencies | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Context System and Dependencies Relevant source files - [examples/get\\_file.py](https://github.com/jlowin/fastmcp/blob/66221ed3/examples/get_file.py) - [src/fastmcp/server/context.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py) - [src/fastmcp/utilities/types.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py) - [tests/server/test\\_context.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_context.py) - [tests/utilities/test\\_types.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/test_types.py) This section covers the Context object system and dependency injection mechanisms in FastMCP. The `Context` class provides tools and resources with access to MCP protocol capabilities like logging, sampling, and resource reading, while the dependency injection system automatically provides these capabilities to user functions based on type annotations. For information about how components (tools, resources, prompts) are created and managed, see [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md). For details about server composition and mounting, see [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md). ## Context Object Architecture The `Context` class serves as the primary interface between user-defined tools/resources and the underlying MCP protocol capabilities. It provides a clean, Pythonic API for accessing server session functionality. ``` ``` **Sources:** [src/fastmcp/server/context.py79-123](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L79-L123) [src/fastmcp/server/context.py159-169](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L159-L169) ### Context Lifecycle Management The `Context` object implements async context manager semantics with inheritance-based state management: ``` ```",
  "**Sources:** [src/fastmcp/server/context.py53](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L53-L53) [src/fastmcp/server/context.py138-157](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L138-L157) [src/fastmcp/server/context.py584-590](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L584-L590) ## Dependency Injection System FastMCP uses type annotation-based dependency injection to automatically provide `Context` objects and other dependencies to user functions. ``` ``` **Sources:** [src/fastmcp/utilities/types.py152-176](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L152-L176) [src/fastmcp/utilities/types.py130-149](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L130-L149) ### Type Annotation Processing The system handles complex type annotations including unions, forward references, and `Annotated` types: | Type Pattern | Example | Processing | | ----------------- | ---------------------------------------- | ------------------------------------- | | Direct Type | `ctx: Context` | Direct match via `issubclass_safe()` | | Union Type | `ctx: Context \\| None` | Check each union member | | Annotated Type | `ctx: Annotated[Context, \"description\"]` | Extract base type from first argument | | Forward Reference | `ctx: \"Context\"` | Resolve via `get_type_hints()` | **Sources:** [src/fastmcp/utilities/types.py120-128](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L120-L128) [src/fastmcp/utilities/types.py54-117](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L54-L117) ## MCP Capabilities Access The `Context` object provides access to core MCP protocol capabilities through a clean interface: ### Logging and Progress ``` ``` **Sources:** [src/fastmcp/server/context.py57-67](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L57-L67) [src/fastmcp/server/context.py210-234](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L210-L234) [src/fastmcp/server/context.py170-195](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L170-L195) ### AI Sampling and Elicitation ``` ``` **Sources:** [src/fastmcp/server/context.py361-442](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L361-L442) [src/fastmcp/server/context.py444-567](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L444-L567) ### Session and Resource Management ``` ``` **Sources:** [src/fastmcp/server/context.py250-292](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L250-L292) [src/fastmcp/server/context.py197-208](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L197-L208) [src/fastmcp/server/context.py344-347](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L344-L347) ## State Management The Context system provides request-scoped state management with inheritance semantics: ``` ``` **Sources:** [src/fastmcp/server/context.py113-117](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L113-L117) [src/fastmcp/server/context.py140-144](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/context.py#L140-L144) [tests/server/test\\_context.py134-180](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_context.py#L134-L180) ## Type System Integration",
  "FastMCP's type system supports the Context dependency injection through several utility functions: ### Type Adapter Caching ``` ``` **Sources:** [src/fastmcp/utilities/types.py44-117](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L44-L117) [tests/utilities/test\\_types.py624-695](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/test_types.py#L624-L695) ### Helper Type Classes FastMCP provides helper classes for common content types that integrate with the Context system: | Class | Purpose | Key Methods | | ------- | ---------------------- | -------------------------------------------- | | `Image` | Image content handling | `to_image_content()` → `ImageContent` | | `Audio` | Audio content handling | `to_audio_content()` → `AudioContent` | | `File` | File resource handling | `to_resource_content()` → `EmbeddedResource` | **Sources:** [src/fastmcp/utilities/types.py178-379](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L178-L379) [examples/get\\_file.py4](https://github.com/jlowin/fastmcp/blob/66221ed3/examples/get_file.py#L4-L4) [examples/get\\_file.py15](https://github.com/jlowin/fastmcp/blob/66221ed3/examples/get_file.py#L15-L15) [examples/get\\_file.py27](https://github.com/jlowin/fastmcp/blob/66221ed3/examples/get_file.py#L27-L27) ### Type Replacement System ``` ``` **Sources:** [src/fastmcp/utilities/types.py381-415](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/types.py#L381-L415) [tests/utilities/test\\_types.py598-622](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/utilities/test_types.py#L598-L622) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Context System and Dependencies](#context-system-and-dependencies.md) - [Context Object Architecture](#context-object-architecture.md) - [Context Lifecycle Management](#context-lifecycle-management.md) - [Dependency Injection System](#dependency-injection-system.md) - [Type Annotation Processing](#type-annotation-processing.md) - [MCP Capabilities Access](#mcp-capabilities-access.md) - [Logging and Progress](#logging-and-progress.md) - [AI Sampling and Elicitation](#ai-sampling-and-elicitation.md) - [Session and Resource Management](#session-and-resource-management.md) - [State Management](#state-management.md) - [Type System Integration](#type-system-integration.md) - [Type Adapter Caching](#type-adapter-caching.md) - [Helper Type Classes](#helper-type-classes.md) - [Type Replacement System](#type-replacement-system.md)",
  "jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # FastMCP Overview Relevant source files - [README.md](https://github.com/jlowin/fastmcp/blob/66221ed3/README.md) - [docs/docs.json](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/docs.json) - [docs/getting-started/welcome.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/getting-started/welcome.mdx) - [src/fastmcp/\\_\\_init\\_\\_.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py) - [src/fastmcp/server/server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py) - [src/fastmcp/settings.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py) - [tests/server/test\\_import\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py) - [tests/server/test\\_mount.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py) - [tests/server/test\\_server.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py) This document provides a high-level introduction to the FastMCP framework architecture, covering its core purpose, major system components, and how they work together to enable production-ready Model Context Protocol (MCP) applications. For detailed server implementation patterns, see [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md). For client usage and transport mechanisms, see [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md). For deployment and configuration specifics, see [Configuration Management](jlowin/fastmcp/7-configuration-management.md). ## What is FastMCP? FastMCP is a comprehensive Python framework for building production-ready MCP servers and clients. The Model Context Protocol (MCP) is a standardized way to connect LLMs to tools and data sources, and FastMCP provides the infrastructure to make these connections robust, secure, and scalable.",
  "At its core, FastMCP wraps the low-level MCP protocol with a high-level, Pythonic interface. The framework handles protocol details, authentication, deployment, and advanced patterns like server composition and proxying. Sources: [src/fastmcp/server/server.py1-84](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L1-L84) [README.md37-54](https://github.com/jlowin/fastmcp/blob/66221ed3/README.md#L37-L54) [docs/getting-started/welcome.mdx21-57](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/getting-started/welcome.mdx#L21-L57) ## Core Architecture Overview FastMCP follows a layered architecture with clear separation between the high-level developer interface, protocol implementation, and transport layers. ### FastMCP System Components ``` ``` Sources: [src/fastmcp/server/server.py125-266](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L125-L266) [src/fastmcp/\\_\\_init\\_\\_.py15-20](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py#L15-L20) [src/fastmcp/server/low\\_level.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/low_level.py) [src/fastmcp/tools/tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py) [src/fastmcp/resources/resource\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py) [src/fastmcp/prompts/prompt\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py) ### Request Flow Architecture ``` ``` Sources: [src/fastmcp/server/server.py701-752](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L701-L752) [src/fastmcp/server/server.py397-406](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L397-L406) [src/fastmcp/tools/tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py) ## FastMCP Server Components The `FastMCP` class serves as the central orchestrator, managing three core component types and their lifecycle. ### Component Manager System | Component | Manager Class | Decorator | Key Methods | | --------- | ----------------- | ------------------ | ----------------------------------- | | Tools | `ToolManager` | `@server.tool` | `add_tool()`, `call_tool()` | | Resources | `ResourceManager` | `@server.resource` | `add_resource()`, `read_resource()` | | Prompts | `PromptManager` | `@server.prompt` | `add_prompt()`, `render_prompt()` | The server initializes these managers in its constructor: ``` ``` Sources: [src/fastmcp/server/server.py176-188](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L176-L188) [src/fastmcp/tools/tool\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/tools/tool_manager.py) [src/fastmcp/resources/resource\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/resources/resource_manager.py) [src/fastmcp/prompts/prompt\\_manager.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/prompts/prompt_manager.py) ### Protocol Handler Registration FastMCP registers MCP protocol handlers during initialization via `_setup_handlers()`: ``` ``` Sources: [src/fastmcp/server/server.py387-395](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L387-L395) [src/fastmcp/server/low\\_level.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/low_level.py) ## Transport and Client Architecture FastMCP supports multiple transport mechanisms for different deployment scenarios: ### Transport Types",
  "| Transport | Use Case | Implementation | | ------------------ | ----------------------------- | -------------------------------------------------- | | `stdio` | Local development, CLI tools | `stdio_server()` from MCP SDK | | `http`/`sse` | Web deployment, remote access | `create_sse_app()`, `create_streamable_http_app()` | | `FastMCPTransport` | In-memory testing, embedding | Direct server instance connection | ### Client Transport Resolution The client automatically selects appropriate transports via `infer_transport()` based on the connection target: ``` ``` Sources: [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) [src/fastmcp/server/http.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/http.py) [src/fastmcp/client/client.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/client.py) ## Advanced Server Patterns FastMCP provides sophisticated patterns for building complex applications: ### Server Composition FastMCP supports two composition patterns: 1. **Mounting (`mount`)**: Live delegation to child servers 2. **Importing (`import_server`)**: Static copying of components ``` ``` ### Proxy Servers The `FastMCP.as_proxy()` method creates servers that act as intermediaries: ``` ``` Sources: [tests/server/test\\_mount.py19-67](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_mount.py#L19-L67) [tests/server/test\\_import\\_server.py10-34](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_import_server.py#L10-L34) [src/fastmcp/server/proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/proxy.py) ## Configuration and Settings FastMCP uses a hierarchical settings system with environment variable support: ### Settings Structure The `Settings` class provides configuration via environment variables prefixed with `FASTMCP_`: - `FASTMCP_LOG_LEVEL`: Logging configuration - `FASTMCP_SERVER_AUTH`: Authentication provider class path - `FASTMCP_INCLUDE_TAGS`/`FASTMCP_EXCLUDE_TAGS`: Component filtering - `FASTMCP_HOST`/`FASTMCP_PORT`: HTTP server configuration ### Global Settings Instance FastMCP maintains a global settings instance accessible via `fastmcp.settings`: ``` ``` Sources: [src/fastmcp/settings.py80-381](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py#L80-L381) [src/fastmcp/\\_\\_init\\_\\_.py8](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/__init__.py#L8-L8) ## Authentication and Security FastMCP provides enterprise-grade authentication through the `AuthProvider` system: ### Authentication Providers The framework includes built-in providers for major identity systems: - `GoogleProvider` - `GitHubProvider` - `AzureProvider` - `Auth0Provider` - `WorkOSProvider` - `JWTVerifier` ### Auth Integration Authentication providers integrate with the server at initialization: ``` ``` Sources: [src/fastmcp/server/server.py204-211](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/server.py#L204-L211) [src/fastmcp/server/auth/](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/) [src/fastmcp/settings.py363-380](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/settings.py#L363-L380) ## Testing and Development Framework FastMCP provides comprehensive testing utilities through direct server instance connections: ### In-Memory Testing The `FastMCPTransport` enables efficient testing without process management: ``` ``` ### Test Utilities The framework includes testing helpers in `fastmcp.utilities.tests`: - `caplog_for_fastmcp()`: FastMCP-specific log capture - `temporary_settings()`: Settings isolation for tests",
  "Sources: [tests/server/test\\_server.py14-67](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/test_server.py#L14-L67) [src/fastmcp/utilities/tests.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/tests.py) [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) Dismiss Refresh this wiki Enter email to refresh ### On this page - [FastMCP Overview](#fastmcp-overview.md) - [What is FastMCP?](#what-is-fastmcp.md) - [Core Architecture Overview](#core-architecture-overview.md) - [FastMCP System Components](#fastmcp-system-components.md) - [Request Flow Architecture](#request-flow-architecture.md) - [FastMCP Server Components](#fastmcp-server-components.md) - [Component Manager System](#component-manager-system.md) - [Protocol Handler Registration](#protocol-handler-registration.md) - [Transport and Client Architecture](#transport-and-client-architecture.md) - [Transport Types](#transport-types.md) - [Client Transport Resolution](#client-transport-resolution.md) - [Advanced Server Patterns](#advanced-server-patterns.md) - [Server Composition](#server-composition.md) - [Proxy Servers](#proxy-servers.md) - [Configuration and Settings](#configuration-and-settings.md) - [Settings Structure](#settings-structure.md) - [Global Settings Instance](#global-settings-instance.md) - [Authentication and Security](#authentication-and-security.md) - [Authentication Providers](#authentication-providers.md) - [Auth Integration](#auth-integration.md) - [Testing and Development Framework](#testing-and-development-framework.md) - [In-Memory Testing](#in-memory-testing.md) - [Test Utilities](#test-utilities.md)",
  "Configuration Management | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Configuration Management Relevant source files - [.github/workflows/run-tests.yml](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-tests.yml) - [pyproject.toml](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml) - [tests/test\\_mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py) - [uv.lock](https://github.com/jlowin/fastmcp/blob/66221ed3/uv.lock) This document covers FastMCP's configuration management system, which enables declarative server definitions, multi-server orchestration, and standardized MCP client configurations. The system provides both programmatic and file-based configuration approaches for defining MCP servers, their connections, authentication, and behavioral transformations. For information about HTTP server deployment configuration, see [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md). For CLI-based configuration commands, see [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md). For project build and dependency configuration, see [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md). ## Configuration System Architecture The configuration management system centers around the `MCPConfig` class hierarchy, which provides both standard and canonical configuration formats for defining MCP servers and their properties. ``` ``` Sources: [tests/test\\_mcp\\_config.py25-33](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L25-L33) [src/fastmcp/mcp\\_config.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/mcp_config.py) ## Server Configuration Types FastMCP supports three primary server configuration types, each designed for different deployment scenarios and capability requirements. ### StdioMCPServer Configuration `StdioMCPServer` configurations define local subprocess-based MCP servers that communicate via standard input/output streams. ``` ``` Example configuration structure: ``` ```",
  "Sources: [tests/test\\_mcp\\_config.py50-63](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L50-L63) [tests/test\\_mcp\\_config.py177-202](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L177-L202) ### RemoteMCPServer Configuration `RemoteMCPServer` configurations define HTTP-based remote MCP servers with automatic transport inference and authentication support. ``` ``` The system automatically infers `SSETransport` for URLs containing `/sse/` paths, while defaulting to `StreamableHttpTransport` for other HTTP endpoints. Sources: [tests/test\\_mcp\\_config.py134-175](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L134-L175) [tests/test\\_mcp\\_config.py412-467](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L412-L467) ### TransformingStdioMCPServer Configuration `TransformingStdioMCPServer` extends stdio servers with tool and resource transformation capabilities, enabling name remapping, argument transformation, and selective inclusion/exclusion. ``` ``` Sources: [tests/test\\_mcp\\_config.py534-588](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L534-L588) [tests/test\\_mcp\\_config.py639-698](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L639-L698) ## Configuration File Formats FastMCP supports multiple configuration input formats with automatic normalization and validation. ### Dictionary-based Configuration The system accepts both nested `mcpServers` format and root-level server definitions: ``` ``` The parser automatically detects and normalizes root-level server definitions to the standard nested format. Sources: [tests/test\\_mcp\\_config.py86-99](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L86-L99) [tests/test\\_mcp\\_config.py66-84](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L66-L84) ### Configuration Discrimination The system uses discriminated unions to automatically select appropriate server types based on configuration content: ``` ``` Sources: [tests/test\\_mcp\\_config.py101-132](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L101-L132) ## Transport Configuration and Generation The configuration system generates appropriate transport instances based on server definitions, with automatic inference and override capabilities. ### Transport Generation Pipeline ``` ``` Sources: [tests/test\\_mcp\\_config.py142-175](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L142-L175) [src/fastmcp/client/transports.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/client/transports.py) ## Authentication Configuration FastMCP provides flexible authentication configuration supporting bearer tokens and OAuth flows for remote servers. ### Authentication Types ``` ``` Authentication is automatically applied to both `StreamableHttpTransport` and `SSETransport` instances based on the remote server configuration. Sources: [tests/test\\_mcp\\_config.py425-467](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L425-L467) ## Multi-Server Orchestration The `MCPConfigTransport` enables simultaneous connection to multiple MCP servers with unified tool/resource/prompt namespacing. ### Multi-Server Architecture ``` ``` Each server's tools, resources, and prompts are prefixed with the server name (e.g., `server_name_tool_name`) to avoid conflicts while maintaining clear attribution. Sources: [tests/test\\_mcp\\_config.py204-244](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L204-L244) [tests/test\\_mcp\\_config.py469-532](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L469-L532) [tests/test\\_mcp\\_config.py700-740](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/test_mcp_config.py#L700-L740) ## Environment and Project Configuration FastMCP integrates with standard Python project configuration through `pyproject.toml` and supports environment-based configuration management. ### Project Configuration Structure",
  "``` ``` The configuration system supports environment variable-based test configuration through `FASTMCP_TEST_MODE`, `FASTMCP_LOG_LEVEL`, and other `FASTMCP_*` prefixed variables. Sources: [pyproject.toml1-147](https://github.com/jlowin/fastmcp/blob/66221ed3/pyproject.toml#L1-L147) [.github/workflows/run-tests.yml78-81](https://github.com/jlowin/fastmcp/blob/66221ed3/.github/workflows/run-tests.yml#L78-L81) Dismiss Refresh this wiki Enter email to refresh ### On this page - [Configuration Management](#configuration-management.md) - [Configuration System Architecture](#configuration-system-architecture.md) - [Server Configuration Types](#server-configuration-types.md) - [StdioMCPServer Configuration](#stdiomcpserver-configuration.md) - [RemoteMCPServer Configuration](#remotemcpserver-configuration.md) - [TransformingStdioMCPServer Configuration](#transformingstdiomcpserver-configuration.md) - [Configuration File Formats](#configuration-file-formats.md) - [Dictionary-based Configuration](#dictionary-based-configuration.md) - [Configuration Discrimination](#configuration-discrimination.md) - [Transport Configuration and Generation](#transport-configuration-and-generation.md) - [Transport Generation Pipeline](#transport-generation-pipeline.md) - [Authentication Configuration](#authentication-configuration.md) - [Authentication Types](#authentication-types.md) - [Multi-Server Orchestration](#multi-server-orchestration.md) - [Multi-Server Architecture](#multi-server-architecture.md) - [Environment and Project Configuration](#environment-and-project-configuration.md) - [Project Configuration Structure](#project-configuration-structure.md)",
  "Authentication and Security | jlowin/fastmcp | DeepWiki [Index your code with Devin](private-repo.md) [DeepWiki](https://deepwiki.com) [DeepWiki](.md) [jlowin/fastmcp](https://github.com/jlowin/fastmcp \"Open repository\") [Index your code with](private-repo.md) [Devin](private-repo.md) Share Last indexed: 30 September 2025 ([66221e](https://github.com/jlowin/fastmcp/commits/66221ed3)) - [FastMCP Overview](jlowin/fastmcp/1-fastmcp-overview.md) - [Installation and Setup](jlowin/fastmcp/1.1-installation-and-setup.md) - [FastMCP Server Core](jlowin/fastmcp/2-fastmcp-server-core.md) - [Component System Architecture](jlowin/fastmcp/2.1-component-system-architecture.md) - [Context System and Dependencies](jlowin/fastmcp/2.2-context-system-and-dependencies.md) - [Server Composition and Proxying](jlowin/fastmcp/2.3-server-composition-and-proxying.md) - [FastMCP Client System](jlowin/fastmcp/3-fastmcp-client-system.md) - [Transport Mechanisms](jlowin/fastmcp/3.1-transport-mechanisms.md) - [Client Authentication](jlowin/fastmcp/3.2-client-authentication.md) - [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md) - [Authentication and Security](jlowin/fastmcp/4.1-authentication-and-security.md) - [Middleware System](jlowin/fastmcp/4.2-middleware-system.md) - [Command Line Interface](jlowin/fastmcp/5-command-line-interface.md) - [OpenAPI Integration](jlowin/fastmcp/6-openapi-integration.md) - [Configuration Management](jlowin/fastmcp/7-configuration-management.md) - [Testing and Development Framework](jlowin/fastmcp/8-testing-and-development-framework.md) - [Project Infrastructure](jlowin/fastmcp/9-project-infrastructure.md) - [Documentation and Updates](jlowin/fastmcp/10-documentation-and-updates.md) Menu # Authentication and Security Relevant source files - [docs/servers/auth/oauth-proxy.mdx](https://github.com/jlowin/fastmcp/blob/66221ed3/docs/servers/auth/oauth-proxy.mdx) - [src/fastmcp/server/auth/oauth\\_proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py) - [src/fastmcp/server/auth/providers/azure.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/azure.py) - [src/fastmcp/server/auth/providers/github.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/github.py) - [src/fastmcp/server/auth/providers/google.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/google.py) - [src/fastmcp/server/auth/providers/workos.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/workos.py) - [src/fastmcp/utilities/storage.py](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/storage.py) - [tests/server/auth/test\\_oauth\\_proxy.py](https://github.com/jlowin/fastmcp/blob/66221ed3/tests/server/auth/test_oauth_proxy.py) This document covers FastMCP's comprehensive authentication and security system, including OAuth integration, token verification, and security mechanisms. The system enables FastMCP servers to authenticate with traditional OAuth providers (GitHub, Google, Azure, etc.) while maintaining compatibility with MCP's Dynamic Client Registration requirements. For HTTP server deployment patterns, see [HTTP Server and Deployment](jlowin/fastmcp/4-http-server-and-deployment.md). For middleware-based security features like rate limiting and request validation, see [Middleware System](jlowin/fastmcp/4.2-middleware-system.md). ## Architecture Overview FastMCP's authentication system centers around the **OAuth Proxy** pattern, which bridges the gap between traditional OAuth providers (that require pre-registered applications) and MCP clients (that expect Dynamic Client Registration). The system consists of several key components working together to provide secure, transparent authentication. ### Core Authentication Flow ``` ```",
  "Sources: [src/fastmcp/server/auth/oauth\\_proxy.py125-231](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L125-L231) [src/fastmcp/server/auth/providers/github.py167-193](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/github.py#L167-L193) [src/fastmcp/server/auth/providers/google.py183-209](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/google.py#L183-L209) ## OAuth Proxy System The `OAuthProxy` class is the cornerstone of FastMCP's authentication system, implementing a transparent proxy that presents a DCR-compliant interface to MCP clients while using pre-registered credentials with upstream OAuth providers. ### OAuth Proxy Architecture ``` ``` Sources: [src/fastmcp/server/auth/oauth\\_proxy.py125-371](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L125-L371) [src/fastmcp/server/auth/oauth\\_proxy.py464-559](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L464-L559) ### Dynamic Client Registration Implementation The proxy implements local DCR through the `ProxyDCRClient` class, which validates redirect URIs against configurable patterns while maintaining compatibility with upstream providers that only accept fixed redirect URIs. ``` ``` Sources: [src/fastmcp/server/auth/oauth\\_proxy.py60-115](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L60-L115) [src/fastmcp/server/auth/oauth\\_proxy.py396-459](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L396-L459) ### Authorization Code Exchange The proxy implements a dual-layer authorization flow that maintains security while bridging DCR requirements with traditional OAuth constraints. ``` ``` Sources: [src/fastmcp/server/auth/oauth\\_proxy.py464-669](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L464-L669) [src/fastmcp/server/auth/oauth\\_proxy.py876-1061](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L876-L1061) ## Token Verification System FastMCP supports multiple token verification strategies through the `TokenVerifier` base class and provider-specific implementations that handle different token formats and validation mechanisms. ### Token Verifier Architecture ``` ``` Sources: [src/fastmcp/server/auth/providers/jwt.py1-200](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/jwt.py#L1-L200) [src/fastmcp/server/auth/providers/github.py62-165](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/github.py#L62-L165) [src/fastmcp/server/auth/providers/google.py64-181](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/google.py#L64-L181) ### Access Token Structure The `AccessToken` class provides a unified representation of validated tokens across all providers: ``` ``` Sources: [src/fastmcp/server/auth/auth.py50-85](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/auth.py#L50-L85) [src/fastmcp/server/auth/providers/github.py144-157](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/github.py#L144-L157) [src/fastmcp/server/auth/providers/google.py152-173](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/google.py#L152-L173) ## Built-in Provider Implementations FastMCP includes ready-to-use provider implementations for major OAuth services, each handling provider-specific requirements and token formats. ### Provider Class Hierarchy ``` ```",
  "Sources: [src/fastmcp/server/auth/providers/github.py167-284](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/github.py#L167-L284) [src/fastmcp/server/auth/providers/google.py183-303](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/google.py#L183-L303) [src/fastmcp/server/auth/providers/azure.py118-266](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/azure.py#L118-L266) [src/fastmcp/server/auth/providers/workos.py128-262](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/providers/workos.py#L128-L262) ## Security Features FastMCP implements multiple layers of security to protect OAuth flows and ensure secure token handling. ### PKCE (Proof Key for Code Exchange) The proxy implements dual-layer PKCE protection, maintaining security between client-to-proxy and proxy-to-provider connections: ``` ``` Sources: [src/fastmcp/server/auth/oauth\\_proxy.py377-391](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L377-L391) [src/fastmcp/server/auth/oauth\\_proxy.py481-530](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L481-L530) ### Redirect URI Validation The `ProxyDCRClient` class implements configurable redirect URI validation to prevent authorization code interception while maintaining DCR compatibility: ``` ``` Sources: [src/fastmcp/server/auth/oauth\\_proxy.py60-115](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L60-L115) [src/fastmcp/server/auth/redirect\\_validation.py1-50](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/redirect_validation.py#L1-L50) ### Token Management and Revocation The proxy maintains comprehensive token lifecycle management with cleanup and revocation capabilities: ``` ``` Sources: [src/fastmcp/server/auth/oauth\\_proxy.py775-818](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L775-L818) [src/fastmcp/server/auth/oauth\\_proxy.py674-753](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L674-L753) ## Storage and Persistence FastMCP provides pluggable storage backends for persisting OAuth client registrations and maintaining session state across server restarts. ### Storage Architecture ``` ``` Sources: [src/fastmcp/utilities/storage.py16-205](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/utilities/storage.py#L16-L205) [src/fastmcp/server/auth/oauth\\_proxy.py345-349](https://github.com/jlowin/fastmcp/blob/66221ed3/src/fastmcp/server/auth/oauth_proxy.py#L345-L349) The authentication system provides a robust, secure foundation for FastMCP servers while maintaining compatibility with both traditional OAuth providers and MCP's Dynamic Client Registration requirements. The modular design allows for easy extension with new providers and verification methods as needed. Dismiss Refresh this wiki Enter email to refresh ### On this page - [Authentication and Security](#authentication-and-security.md) - [Architecture Overview](#architecture-overview.md) - [Core Authentication Flow](#core-authentication-flow.md) - [OAuth Proxy System](#oauth-proxy-system.md) - [OAuth Proxy Architecture](#oauth-proxy-architecture.md) - [Dynamic Client Registration Implementation](#dynamic-client-registration-implementation.md) - [Authorization Code Exchange](#authorization-code-exchange.md) - [Token Verification System](#token-verification-system.md) - [Token Verifier Architecture](#token-verifier-architecture.md) - [Access Token Structure](#access-token-structure.md) - [Built-in Provider Implementations](#built-in-provider-implementations.md) - [Provider Class Hierarchy](#provider-class-hierarchy.md) - [Security Features](#security-features.md) - [PKCE (Proof Key for Code Exchange)](#pkce-proof-key-for-code-exchange.md) - [Redirect URI Validation](#redirect-uri-validation.md) - [Token Management and Revocation](#token-management-and-revocation.md) - [Storage and Persistence](#storage-and-persistence.md) - [Storage Architecture](#storage-architecture.md)"
]