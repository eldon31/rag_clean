[
  {
    "text": "Validation and Serialization | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# Validation and Serialization\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_4-validation-and-serialization.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 747,
      "character_count": 2480,
      "created_at": "2025-10-16T17:42:20.281156",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_4-validation-and-serialization.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py)\n- [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py)\n- [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py)\n- [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py)\n- [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py)\n- [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py)\n- [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py)\n- [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py)\n- [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py)\n- [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py)\n- [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py)\n- [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py)\n- [tests/test\\_serialize.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py)\n- [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py)\n- [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py)\n- [tests/test\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py)\n\nThis page provides an overview of Pydantic's validation and serialization architecture, explaining how data is validated when creating models and serialized when outputting data. For information on schema generation, see [Schema Generation](pydantic/pydantic/5-schema-generation.md).\n\n## Overview\n\nAt the core of Pydantic's functionality are two fundamental processes:\n\n1. **Validation**: Converting and validating input data against model schema definitions\n2. **Serialization**: Converting validated models into standard formats like Python dictionaries and JSON\n\nThese processes work together to ensure that data flowing into and out of your application is consistent, type-safe, and properly formatted.\n\n```\n```\n\nSources: [pydantic/functional\\_validators.py27-323](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py#L27-L323) [pydantic/functional\\_serializers.py19-89](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L19-L89)\n\n## Validation Architecture\n\nValidation ensures that input data conforms to the defined model schema. Pydantic leverages a layered architecture that processes data through several validation stages.\n\n### Core Validation Components\n\n```\n```\n\nSources: [pydantic/functional\\_validators.py27-156](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py#L27-L156) [pydantic/\\_internal/\\_decorators.py30-154](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L30-L154)\n\n### Validator Types and Functions\n\nPydantic offers several types of validators that can be applied at different stages of the validation process:\n\n1. **Field Validators**: Apply to specific fields using the `@field_validator` decorator\n2. **Model Validators**: Apply to the entire model using the `@model_validator` decorator\n3. **Functional Validators**: Used with `Annotated` types to apply validation to specific types\n\nThe functional validators include:",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_4-validation-and-serialization.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1013,
      "character_count": 3855,
      "created_at": "2025-10-16T17:42:20.287062",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_4-validation-and-serialization.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- **BeforeValidator**: Executes before the standard validation\n- **AfterValidator**: Executes after the standard validation\n- **PlainValidator**: Replaces the standard validation\n- **WrapValidator**: Wraps around the standard validation, providing access to both the input and the standard validation function\n\n```\n```\n\nSources: [pydantic/functional\\_validators.py70-327](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py#L70-L327) [tests/test\\_validators.py51-156](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L51-L156)\n\n### Validation Process\n\nWhen validating data, Pydantic follows this general process:\n\n1. Apply any `BeforeValidator` or `WrapValidator` functions\n2. Perform standard type coercion and validation\n3. Apply any `AfterValidator` functions\n4. Apply model-level validators\n5. Construct the validated model\n\nThis pipeline allows for powerful and flexible validation at different stages.\n\n```\n```\n\nSources: [tests/test\\_validators.py87-156](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L87-L156) [tests/test\\_validators.py192-300](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L192-L300)\n\n## Serialization Architecture\n\nSerialization converts validated Pydantic models into Python dictionaries, JSON, or other formats. Like validation, serialization uses a modular architecture.\n\n### Core Serialization Components\n\n```\n```\n\nSources: [pydantic/functional\\_serializers.py19-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L19-L195) [tests/test\\_serialize.py33-109](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L33-L109)\n\n### Serializer Types\n\nPydantic offers several types of serializers:\n\n1. **Field Serializers**: Customize serialization for specific fields using the `@field_serializer` decorator\n2. **Model Serializers**: Customize serialization for the entire model using the `@model_serializer` decorator\n3. **Functional Serializers**: Used with `Annotated` types to apply serialization to specific types\n\nThe functional serializers include:\n\n- **PlainSerializer**: Directly determines the serialized output\n- **WrapSerializer**: Wraps around the standard serialization, providing access to both the input and the standard serialization function\n\n```\n```\n\nSources: [pydantic/functional\\_serializers.py19-89](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L19-L89) [pydantic/functional\\_serializers.py89-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L89-L195)\n\n### Serialization Process\n\nWhen serializing data, Pydantic follows this general process:\n\n1. Determine the serialization mode (Python, JSON)\n2. Apply field-specific serializers\n3. Apply model-level serializers\n4. Convert to the target format (dict, JSON string)\n\nThis pipeline allows for customizable serialization at different levels.\n\n```\n```\n\nSources: [tests/test\\_serialize.py82-109](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L82-L109) [tests/test\\_serialize.py148-198](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L148-L198)\n\n## TypeAdapter Integration\n\nThe `TypeAdapter` class extends validation and serialization capabilities to arbitrary Python types, not just Pydantic models.\n\n```\n```\n\nTypeAdapter leverages the same core validation and serialization mechanisms as Pydantic models, but applies them to arbitrary types:\n\n```\n```\n\nSources: [pydantic/type\\_adapter.py69-476](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py#L69-L476) [tests/test\\_type\\_adapter.py42-112](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L42-L112)\n\n## Validation and Serialization with Dataclasses\n\nPydantic's validation and serialization also work with dataclasses through the `@pydantic.dataclasses.dataclass` decorator.\n\n```\n```\n\nThe dataclass implementation uses the same validation and serialization mechanism as regular Pydantic models:\n\n```\n```",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_4-validation-and-serialization.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 987,
      "character_count": 4121,
      "created_at": "2025-10-16T17:42:20.296484",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_4-validation-and-serialization.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Sources: [pydantic/dataclasses.py98-282](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L98-L282) [pydantic/\\_internal/\\_dataclasses.py64-112](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L64-L112) [tests/test\\_dataclasses.py62-147](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L62-L147)\n\n## Common Validation and Serialization Scenarios\n\n### Field-Level Validation\n\n```\n```\n\n### Model-Level Validation\n\n```\n```\n\n### Custom Serialization\n\n```\n```\n\nSources: [tests/test\\_validators.py192-216](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L192-L216) [tests/test\\_serialize.py148-170](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L148-L170)\n\n## Using Annotated for Validation and Serialization\n\nPydantic supports using the `Annotated` type to attach validators and serializers directly to type annotations:\n\n```\n```\n\nThis approach allows for reusable validation and serialization logic that can be applied to multiple fields across different models.\n\nSources: [tests/test\\_validators.py51-87](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py#L51-L87) [tests/test\\_serialize.py82-96](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L82-L96)\n\n## Validation and Serialization Modes\n\nBoth validation and serialization offer different modes:\n\n### Validation Modes:\n\n- **Standard**: Regular field-by-field validation\n- **Strict**: Enforces exact type matches without coercion\n\n### Serialization Modes:\n\n- **python**: Serializes to Python native types (dict, list, etc.)\n- **json**: Serializes to JSON-compatible Python types\n- **json string**: Directly serializes to a JSON string\n\n```\n```\n\nSources: [tests/test\\_serialize.py82-109](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L82-L109) [tests/test\\_serialize.py171-197](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L171-L197)\n\n## Conclusion\n\nPydantic's validation and serialization systems provide a robust foundation for ensuring data quality and consistency. The architecture allows for customization at various levels, from field-specific validators to model-wide serializers. These systems work together to provide a seamless flow from raw input data to validated models and then to serialized output.\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [Validation and Serialization](#validation-and-serialization.md)\n- [Overview](#overview.md)\n- [Validation Architecture](#validation-architecture.md)\n- [Core Validation Components](#core-validation-components.md)\n- [Validator Types and Functions](#validator-types-and-functions.md)\n- [Validation Process](#validation-process.md)\n- [Serialization Architecture](#serialization-architecture.md)\n- [Core Serialization Components](#core-serialization-components.md)\n- [Serializer Types](#serializer-types.md)\n- [Serialization Process](#serialization-process.md)\n- [TypeAdapter Integration](#typeadapter-integration.md)\n- [Validation and Serialization with Dataclasses](#validation-and-serialization-with-dataclasses.md)\n- [Common Validation and Serialization Scenarios](#common-validation-and-serialization-scenarios.md)\n- [Field-Level Validation](#field-level-validation.md)\n- [Model-Level Validation](#model-level-validation.md)\n- [Custom Serialization](#custom-serialization.md)\n- [Using Annotated for Validation and Serialization](#using-annotated-for-validation-and-serialization.md)\n- [Validation and Serialization Modes](#validation-and-serialization-modes.md)\n- [Validation Modes:](#validation-modes.md)\n- [Serialization Modes:](#serialization-modes.md)\n- [Conclusion](#conclusion.md)",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_4-validation-and-serialization.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 895,
      "character_count": 3832,
      "created_at": "2025-10-16T17:42:20.301296",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_4-validation-and-serialization.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]