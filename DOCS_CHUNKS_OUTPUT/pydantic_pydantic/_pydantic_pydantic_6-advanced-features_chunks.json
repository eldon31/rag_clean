[
  {
    "text": "Advanced Features | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# Advanced Features\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 745,
      "character_count": 2458,
      "created_at": "2025-10-16T17:42:20.481381",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [pydantic/\\_internal/\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py)\n- [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py)\n- [pydantic/\\_internal/\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generics.py)\n- [pydantic/\\_internal/\\_typing\\_extra.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_typing_extra.py)\n- [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py)\n- [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py)\n- [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py)\n- [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py)\n- [pydantic/generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/generics.py)\n- [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py)\n- [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py)\n- [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py)\n- [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py)\n- [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py)\n- [tests/test\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py)\n- [tests/test\\_forward\\_ref.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_forward_ref.py)\n- [tests/test\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_generics.py)\n- [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py)\n- [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py)\n- [tests/test\\_typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_typing.py)\n- [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py)\n\nThis page documents advanced Pydantic features that extend beyond basic models. We cover enhanced dataclasses, function validation, root models with computed fields, and the plugin system for customizing validation behavior.\n\n## Dataclass Support\n\nPydantic provides the `@pydantic.dataclasses.dataclass` decorator that enhances Python's standard dataclasses with validation capabilities while maintaining compatibility with the standard library's `dataclasses` module.\n\n```\n```\n\n### Creating Pydantic Dataclasses\n\nThe `@pydantic.dataclasses.dataclass` decorator wraps the standard library `dataclasses.dataclass` and adds validation:\n\n```\n```\n\nThe decorator creates a custom `__init__` that validates input using a `__pydantic_validator__` attribute. The actual dataclass creation happens via `dataclasses.dataclass()` after field processing.\n\nSources: [pydantic/dataclasses.py98-250](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L98-L250) [pydantic/\\_internal/\\_dataclasses.py85-190](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L190)\n\n### Configuration Options",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1021,
      "character_count": 3560,
      "created_at": "2025-10-16T17:42:20.485888",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Dataclass configuration is provided via the `config` parameter, which accepts a `ConfigDict`:\n\n| Configuration             | Description                                                            |\n| ------------------------- | ---------------------------------------------------------------------- |\n| `validate_assignment`     | When `True`, validates field values on assignment after initialization |\n| `frozen`                  | Creates immutable dataclass instances                                  |\n| `str_max_length`          | Maximum string length for all string fields                            |\n| `arbitrary_types_allowed` | Allows arbitrary types that don't have Pydantic validation             |\n\nThe `frozen` parameter can be set on both the decorator and in config. The decorator value takes precedence.\n\nSources: [pydantic/dataclasses.py99-221](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L99-L221) [tests/test\\_dataclasses.py108-130](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L108-L130)\n\n### Converting Standard Dataclasses\n\nExisting standard library dataclasses can be wrapped to add validation without modifying the original class:\n\n```\n```\n\nWhen wrapping a standard dataclass, Pydantic creates a new subclass (not modifying the original) and processes it through the same field collection and schema generation pipeline as regular Pydantic dataclasses.\n\nSources: [pydantic/dataclasses.py194-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L194-L206) [tests/test\\_dataclasses.py807-840](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L807-L840)\n\n### Field Collection\n\nPydantic dataclasses collect fields using `collect_dataclass_fields()`, which:\n\n1. Iterates through the dataclass MRO (Method Resolution Order) in reverse\n2. Processes `__dataclass_fields__` from each dataclass in the hierarchy\n3. Evaluates field annotations using the namespace resolver\n4. Creates `FieldInfo` instances for each field\n5. Applies typevars mapping for generic dataclasses\n\nThe process respects both `dataclasses.field()` and `pydantic.Field()` for defining field metadata.\n\nSources: [pydantic/\\_internal/\\_fields.py460-539](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L460-L539) [pydantic/\\_internal/\\_dataclasses.py65-83](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L65-L83)\n\n### Dataclass-Specific Features\n\n#### InitVar Support\n\nPydantic dataclasses support `dataclasses.InitVar` for initialization-only fields:\n\n```\n```\n\nInitVar fields are validated during initialization but are not stored on the instance.\n\nSources: [tests/test\\_dataclasses.py673-687](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L673-L687)\n\n#### Post-Init Processing\n\nThe `__post_init__` method is called after validation completes, allowing for derived field computation:\n\n```\n```\n\nSources: [tests/test\\_dataclasses.py689-702](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L689-L702)\n\n#### Validate Assignment\n\nWhen `validate_assignment=True`, field assignments after initialization are validated:\n\n```\n```\n\nThe implementation wraps `__setattr__` with validation logic that calls `__pydantic_validator__.validate_assignment()`.\n\nSources: [pydantic/dataclasses.py251-268](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L251-L268) [tests/test\\_dataclasses.py120-149](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L120-L149)\n\n### Schema Generation\n\nDataclass schemas are built by `complete_dataclass()`, which:\n\n1. Collects fields via `set_dataclass_fields()`\n2. Creates a `GenerateSchema` instance with the config wrapper\n3. Generates the core schema\n4. Creates `SchemaValidator` and `SchemaSerializer` instances\n5. Sets completion attributes like `__pydantic_complete__`\n\nIf schema generation fails (e.g., due to undefined forward references), mock validators are set and `__pydantic_complete__` remains `False`.\n\nSources: [pydantic/\\_internal/\\_dataclasses.py85-191](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L191)\n\n## Function Validation",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1016,
      "character_count": 4297,
      "created_at": "2025-10-16T17:42:20.496939",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "The `@validate_call` decorator validates function arguments and optionally return values against type annotations.\n\n```\n```\n\n### The `@validate_call` Decorator\n\nThe decorator creates a `ValidateCallWrapper` that intercepts function calls:\n\n```\n```\n\nThe wrapper validates arguments using `ArgsKwargs` and converts them to match the function signature.\n\nSources: [pydantic/validate\\_call\\_decorator.py57-116](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L57-L116) [pydantic/\\_internal/\\_validate\\_call.py49-90](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L49-L90)\n\n### ValidateCallWrapper Implementation\n\nThe `ValidateCallWrapper` class implements the validation logic:\n\n| Attribute                       | Purpose                                       |\n| ------------------------------- | --------------------------------------------- |\n| `function`                      | The original function being wrapped           |\n| `validate_return`               | Whether to validate return values             |\n| `__pydantic_validator__`        | SchemaValidator for arguments                 |\n| `__return_pydantic_validator__` | SchemaValidator for return value (if enabled) |\n\nThe wrapper:\n\n1. Creates a schema from the function signature\n2. Validates input as `ArgsKwargs` containing positional and keyword arguments\n3. Calls the original function with validated arguments\n4. Optionally validates the return value\n\nSources: [pydantic/\\_internal/\\_validate\\_call.py49-125](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L49-L125)\n\n### Function Schema Generation\n\nSchema generation for functions happens in `GenerateSchema.validate_call_schema()`:\n\n1. Extracts function signature via `inspect.signature()`\n2. Processes each parameter to create argument schemas\n3. Handles special parameter types (VAR\\_POSITIONAL, VAR\\_KEYWORD)\n4. Creates an `arguments_schema` for validation\n5. Optionally creates a return schema if `validate_return=True`\n\nThe generated schema validates arguments as an `ArgsKwargs` structure that gets unpacked to call the function.\n\nSources: [pydantic/\\_internal/\\_generate\\_schema.py1547-1651](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L1547-L1651)\n\n### Validating Return Values\n\nEnable return value validation with `validate_return=True`:\n\n```\n```\n\nReturn validation uses a separate `__return_pydantic_validator__` created from the return type annotation.\n\nSources: [pydantic/\\_internal/\\_validate\\_call.py91-125](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L91-L125) [tests/test\\_validate\\_call.py547-575](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L547-L575)\n\n### Configuration\n\nConfiguration is passed via the `config` parameter:\n\n```\n```\n\nThe configuration affects both argument and return value validation.\n\nSources: [pydantic/validate\\_call\\_decorator.py57-116](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L57-L116) [tests/test\\_validate\\_call.py618-641](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L618-L641)\n\n### Supported Function Types\n\nThe decorator supports:\n\n- Regular functions\n- Async functions\n- Methods (instance, class, static)\n- Lambda functions\n- `functools.partial` objects\n\nIt does not support:\n\n- Built-in functions (e.g., `breakpoint`)\n- Classes (use on `__init__` or `__new__` instead)\n- Non-callable objects\n\nSources: [pydantic/validate\\_call\\_decorator.py24-95](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L24-L95) [tests/test\\_validate\\_call.py42-97](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L42-L97)\n\n## RootModel and Computed Fields\n\n### RootModel\n\nThe `RootModel` class validates a single root-level value rather than multiple fields. It's a `BaseModel` subclass with a single field named `root`.\n\n**RootModel Validation Flow**\n\n```\n```\n\nThe `RootModel` class:",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1002,
      "character_count": 4123,
      "created_at": "2025-10-16T17:42:20.507494",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- Sets `__pydantic_root_model__ = True`\n- Has a single field `root: RootModelRootType`\n- Does not support `model_config['extra']`\n- Accepts either positional or keyword arguments in `__init__`\n\nSources: [pydantic/root\\_model.py32-86](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L86)\n\n#### Creating RootModels\n\n```\n```\n\nThe root type is specified as a generic parameter. The model validates that the input matches the root type.\n\nSources: [pydantic/root\\_model.py32-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L69)\n\n#### Serialization\n\nRootModel serialization methods return the root value directly:\n\n| Method              | Returns                       |\n| ------------------- | ----------------------------- |\n| `model_dump()`      | Python representation of root |\n| `model_dump_json()` | JSON string of root           |\n\n```\n```\n\nSources: [pydantic/root\\_model.py109-158](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L109-L158)\n\n### Computed Fields\n\nThe `@computed_field` decorator creates dynamic properties that appear in serialization but are not part of the model's validated fields.\n\n**Computed Field Lifecycle**\n\n```\n```\n\nComputed fields:\n\n- Are evaluated during serialization, not validation\n- Appear in `model_dump()` and `model_dump_json()` output\n- Can be cached with `@cached_property`\n- Support custom serializers via `@field_serializer`\n\nSources: [pydantic/fields.py745-894](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L745-L894)\n\n#### Basic Usage\n\n```\n```\n\nThe `@computed_field` decorator must be applied to a `@property`. The computed value is included in serialization output.\n\nSources: [pydantic/fields.py745-810](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L745-L810)\n\n#### JSON Schema\n\nComputed fields appear in JSON schema with `readOnly: true` in serialization mode:\n\n```\n```\n\nSources: [tests/test\\_dataclasses.py1285-1329](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L1285-L1329)\n\n#### Return Type Annotation\n\nComputed fields require return type annotations. The annotation determines the schema used for serialization:\n\n```\n```\n\nWithout a return type annotation, Pydantic cannot generate the correct schema.\n\nSources: [pydantic/fields.py745-810](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L745-L810)\n\n## Plugin System\n\nPydantic provides a plugin system that allows you to customize validation, serialization, and other behaviors. This is particularly useful for integrating Pydantic with other libraries or adding custom validation logic.\n\n```\n```\n\n### Creating a Plugin\n\n```\n```\n\n### Validation Handlers\n\nPlugins can provide handlers for different validation methods:\n\n```\n```\n\n### Using Plugins\n\nPlugins are configured through model config:\n\n```\n```\n\nSources: [pydantic/plugin/\\_\\_init\\_\\_.py38-71](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py#L38-L71) [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py)\n\n## Integration with Other Libraries\n\nPydantic integrates well with many Python libraries and frameworks. Here are some common integrations:\n\n### FastAPI Integration\n\nFastAPI leverages Pydantic models for request validation and OpenAPI schema generation:\n\n```\n```\n\n### Dataframe Validation\n\nUsing TypeAdapter with pandas DataFrames:\n\n```\n```\n\n### ORM Integration\n\nPydantic models can work with ORMs using `from_attributes`:\n\n```\n```\n\nThese integrations showcase Pydantic's versatility and how it can be used as a validation layer in various Python applications and frameworks.\n\nSources: [tests/test\\_type\\_adapter.py385-430](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py#L385-L430) [tests/test\\_validate\\_call.py385-430](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L385-L430)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1020,
      "character_count": 4119,
      "created_at": "2025-10-16T17:42:20.524874",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [Advanced Features](#advanced-features.md)\n- [Dataclass Support](#dataclass-support.md)\n- [Creating Pydantic Dataclasses](#creating-pydantic-dataclasses.md)\n- [Configuration Options](#configuration-options.md)\n- [Converting Standard Dataclasses](#converting-standard-dataclasses.md)\n- [Field Collection](#field-collection.md)\n- [Dataclass-Specific Features](#dataclass-specific-features.md)\n- [InitVar Support](#initvar-support.md)\n- [Post-Init Processing](#post-init-processing.md)\n- [Validate Assignment](#validate-assignment.md)\n- [Schema Generation](#schema-generation.md)\n- [Function Validation](#function-validation.md)\n- [The \\`@validate\\_call\\` Decorator](#the-validate_call-decorator.md)\n- [ValidateCallWrapper Implementation](#validatecallwrapper-implementation.md)\n- [Function Schema Generation](#function-schema-generation.md)\n- [Validating Return Values](#validating-return-values.md)\n- [Configuration](#configuration.md)\n- [Supported Function Types](#supported-function-types.md)\n- [RootModel and Computed Fields](#rootmodel-and-computed-fields.md)\n- [RootModel](#rootmodel.md)\n- [Creating RootModels](#creating-rootmodels.md)\n- [Serialization](#serialization.md)\n- [Computed Fields](#computed-fields.md)\n- [Basic Usage](#basic-usage.md)\n- [JSON Schema](#json-schema.md)\n- [Return Type Annotation](#return-type-annotation.md)\n- [Plugin System](#plugin-system.md)\n- [Creating a Plugin](#creating-a-plugin.md)\n- [Validation Handlers](#validation-handlers.md)\n- [Using Plugins](#using-plugins.md)\n- [Integration with Other Libraries](#integration-with-other-libraries.md)\n- [FastAPI Integration](#fastapi-integration.md)\n- [Dataframe Validation](#dataframe-validation.md)\n- [ORM Integration](#orm-integration.md)",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 418,
      "character_count": 1725,
      "created_at": "2025-10-16T17:42:20.525111",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6-advanced-features.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]