[
  {
    "text": "Core Model System | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# Core Model System\n\nRelevant source files\n\n- [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py)\n- [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py)\n- [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py)\n- [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py)\n- [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py)\n- [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py)\n- [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py)\n\n## Purpose and Scope",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 988,
      "character_count": 3247,
      "created_at": "2025-10-16T17:42:19.939484",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "This document covers the foundational model system that powers Pydantic's validation and serialization capabilities. The Core Model System encompasses `BaseModel` (the base class for all Pydantic models), the metaclass-based model construction pipeline, field collection and management, and the model lifecycle from instantiation through validation to serialization.\n\nFor information about specific field types and constraints, see [Type System](pydantic/pydantic/3-type-system.md). For details on validators and serializers that customize the data transformation pipeline, see [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md). For schema generation internals, see [Schema Generation](pydantic/pydantic/5-schema-generation.md).\n\n---\n\n## System Overview\n\nThe Core Model System is built on three foundational components that work together to provide Pydantic's declarative validation framework:\n\n**BaseModel Class Hierarchy**\n\n```\n```\n\nSources: [pydantic/main.py118-239](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L239) [pydantic/\\_internal/\\_model\\_construction.py79-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L277)\n\n---\n\n## BaseModel Class\n\n`BaseModel` is the foundational class that all Pydantic models inherit from. It provides the core validation, serialization, and model management capabilities.\n\n### Class Attributes\n\nThe `BaseModel` class maintains several class-level attributes that define model structure and behavior:\n\n| Attribute                      | Type                                          | Purpose                                             |\n| ------------------------------ | --------------------------------------------- | --------------------------------------------------- |\n| `model_config`                 | `ConfigDict`                                  | Configuration dictionary controlling model behavior |\n| `__pydantic_fields__`          | `dict[str, FieldInfo]`                        | Field definitions and metadata                      |\n| `__pydantic_computed_fields__` | `dict[str, ComputedFieldInfo]`                | Computed field definitions                          |\n| `__pydantic_decorators__`      | `DecoratorInfos`                              | Collected validators and serializers                |\n| `__pydantic_validator__`       | `SchemaValidator \\| PluggableSchemaValidator` | pydantic-core validator instance                    |\n| `__pydantic_serializer__`      | `SchemaSerializer`                            | pydantic-core serializer instance                   |\n| `__pydantic_core_schema__`     | `CoreSchema`                                  | Generated validation schema                         |\n| `__private_attributes__`       | `dict[str, ModelPrivateAttr]`                 | Private attribute definitions                       |\n| `__class_vars__`               | `set[str]`                                    | Names of class variables                            |\n\nSources: [pydantic/main.py151-219](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L151-L219)\n\n### Instance Attributes\n\nEach `BaseModel` instance maintains these attributes:\n\n| Attribute                 | Type                     | Purpose                                              |\n| ------------------------- | ------------------------ | ---------------------------------------------------- |\n| `__dict__`                | `dict[str, Any]`         | Field values                                         |\n| `__pydantic_fields_set__` | `set[str]`               | Names of fields explicitly set during initialization |\n| `__pydantic_extra__`      | `dict[str, Any] \\| None` | Extra fields (when `extra='allow'`)                  |\n| `__pydantic_private__`    | `dict[str, Any] \\| None` | Private attribute values                             |\n\nSources: [pydantic/main.py211-218](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L218)\n\n### Core Methods\n\n**BaseModel Method Mapping**\n\n```\n```\n\nSources: [pydantic/main.py240-782](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L782)\n\n#### Initialization: `__init__`\n\nThe `__init__` method validates input data and creates a model instance:\n\n```\n```\n\n- Takes keyword arguments as input data\n- Delegates to `__pydantic_validator__.validate_python()`\n- Returns `self` after validation\n- Raises `ValidationError` if validation fails\n\nSources: [pydantic/main.py240-260](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L260)\n\n#### Construction Without Validation: `model_construct`\n\n`model_construct` creates instances from trusted data without validation:\n\n```\n```",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 982,
      "character_count": 4767,
      "created_at": "2025-10-16T17:42:19.949345",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- Respects `model_config.extra` setting\n- Handles field aliases (both `alias` and `validation_alias`)\n- Applies default values for missing fields\n- Useful for creating instances from database records or API responses\n- Calls `model_post_init()` if defined\n\nSources: [pydantic/main.py304-382](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L304-L382)\n\n#### Validation Methods\n\nThree validation methods handle different input formats:\n\n| Method                           | Input Type                             | Use Case                        |\n| -------------------------------- | -------------------------------------- | ------------------------------- |\n| `model_validate(obj)`            | Python objects (dict, model instances) | General validation              |\n| `model_validate_json(json_data)` | JSON strings/bytes                     | API request parsing             |\n| `model_validate_strings(obj)`    | String-valued dictionaries             | URL query parameters, form data |\n\nAll support common parameters: `strict`, `extra`, `from_attributes`, `context`, `by_alias`, `by_name`.\n\nSources: [pydantic/main.py652-781](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L652-L781)\n\n#### Serialization Methods\n\n| Method                      | Output Format | Parameters                                                                |\n| --------------------------- | ------------- | ------------------------------------------------------------------------- |\n| `model_dump(mode='python')` | Python dict   | `include`, `exclude`, `exclude_unset`, `exclude_defaults`, `exclude_none` |\n| `model_dump_json()`         | JSON string   | Same as `model_dump` plus `indent`, `ensure_ascii`                        |\n\nBoth methods delegate to `__pydantic_serializer__` with configurable filtering and formatting options.\n\nSources: [pydantic/main.py418-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L534)\n\n---\n\n## Model Construction Pipeline\n\nThe model construction process is orchestrated by `ModelMetaclass`, which transforms a class definition into a fully-functional Pydantic model.\n\n### ModelMetaclass Pipeline\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_model\\_construction.py80-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L277)\n\n### Namespace Inspection\n\nThe `inspect_namespace` function processes the class namespace to identify and categorize attributes:\n\n**Namespace Inspection Flow**\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_model\\_construction.py384-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L384-L518)\n\n### Field Collection\n\nThe `collect_model_fields` function (in `_internal/_fields.py`) processes type annotations to build the field dictionary:\n\n1. **Gather annotations** from the class and its bases\n2. **Resolve forward references** using the namespace resolver\n3. **Create FieldInfo instances** via `FieldInfo.from_annotation()` or `FieldInfo.from_annotated_attribute()`\n4. **Apply type variable substitutions** for generic models\n5. **Identify class variables** (annotated with `ClassVar`)\n6. **Validate field names** (no leading underscores except for private attrs)\n\nSources: [pydantic/\\_internal/\\_fields.py84-223](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L84-L223)\n\n### Schema Building and Completion\n\nThe `complete_model_class` function finalizes the model by:\n\n1. Generating the core schema via `GenerateSchema`\n2. Creating the `SchemaValidator` from the core schema\n3. Creating the `SchemaSerializer` from the core schema\n4. Generating the `__signature__` for `__init__`\n5. Setting up computed fields\n6. Configuring `__setattr__` handlers\n\n**Schema and Validator Creation**\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_model\\_construction.py580-678](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L580-L678)\n\n---\n\n## Model Lifecycle\n\nA model instance progresses through several stages from creation to serialization.\n\n### Initialization Flow\n\n```\n```\n\nSources: [pydantic/main.py240-260](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L260) [pydantic/\\_internal/\\_model\\_construction.py354-370](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L354-L370)\n\n### Attribute Access and Assignment",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1017,
      "character_count": 4455,
      "created_at": "2025-10-16T17:42:19.961241",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "`BaseModel` customizes attribute access through `__setattr__` and `__delattr__`:\n\n**Setattr Handler Selection**\n\nThe model maintains `__pydantic_setattr_handlers__` mapping field names to handler functions:\n\n| Handler Type            | Condition                           | Action                                                             |\n| ----------------------- | ----------------------------------- | ------------------------------------------------------------------ |\n| `'model_field'`         | Regular field, no validation        | Set `__dict__[name] = val` and add to `__pydantic_fields_set__`    |\n| `'validate_assignment'` | `validate_assignment=True`          | Call `__pydantic_validator__.validate_assignment(self, name, val)` |\n| `'private'`             | Private attribute (starts with `_`) | Set in `__pydantic_private__` dict                                 |\n| `'cached_property'`     | `functools.cached_property`         | Set in `__dict__` directly                                         |\n| `'extra_known'`         | Extra field (when `extra='allow'`)  | Use `object.__setattr__`                                           |\n\nThe handler is selected and memoized in `__pydantic_setattr_handlers__` for performance.\n\nSources: [pydantic/main.py837-933](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L837-L933) [pydantic/main.py94-115](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L94-L115)\n\n### Private Attributes\n\nPrivate attributes (prefixed with `_`) are stored separately in `__pydantic_private__` and are not validated or serialized:\n\n**Private Attribute Handling**\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_model\\_construction.py354-370](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L354-L370) [pydantic/main.py994-1019](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L994-L1019)\n\nPrivate attributes support:\n\n- Default values via `PrivateAttr(default=...)`\n- Factory functions via `PrivateAttr(default_factory=...)`\n- Descriptors implementing `__get__`, `__set__`, `__delete__`\n- Type annotations without assignments\n\nSources: [pydantic/fields.py1128-1237](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L1128-L1237)\n\n---\n\n## Configuration System\n\nModel behavior is controlled through `model_config`, a `ConfigDict` instance.\n\n### Configuration Inheritance\n\nConfiguration is inherited and merged through the model hierarchy:\n\n**Config Wrapper Creation**\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_config.py71-121](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py#L71-L121)\n\n### Key Configuration Options\n\n| Option                 | Default       | Effect on Model Construction                                                |\n| ---------------------- | ------------- | --------------------------------------------------------------------------- |\n| `strict`               | `False`       | Enables strict validation mode                                              |\n| `extra`                | `'ignore'`    | Controls handling of extra fields: `'allow'`, `'ignore'`, `'forbid'`        |\n| `frozen`               | `False`       | Makes instances immutable; raises `ValidationError` on attribute assignment |\n| `validate_assignment`  | `False`       | Validates field values on attribute assignment                              |\n| `validate_default`     | `False`       | Validates default values during model construction                          |\n| `from_attributes`      | `False`       | Allows populating fields from object attributes (for ORM integration)       |\n| `defer_build`          | `False`       | Delays schema building until first use                                      |\n| `protected_namespaces` | `('model_',)` | Warns about field names conflicting with these prefixes                     |\n\nSources: [pydantic/config.py31-286](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py#L31-L286)\n\n---\n\n## Model Field Management\n\n### FieldInfo Structure\n\nEach field is represented by a `FieldInfo` instance containing:",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 922,
      "character_count": 4154,
      "created_at": "2025-10-16T17:42:19.970972",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "| Attribute             | Purpose                                            |\n| --------------------- | -------------------------------------------------- |\n| `annotation`          | The field's type annotation                        |\n| `default`             | Default value (if not required)                    |\n| `default_factory`     | Callable to generate default value                 |\n| `alias`               | Alternative name for serialization                 |\n| `validation_alias`    | Alternative name(s) for validation input           |\n| `serialization_alias` | Alternative name for serialization output          |\n| `title`               | Field title for JSON schema                        |\n| `description`         | Field description for JSON schema                  |\n| `metadata`            | List of metadata objects (constraints, validators) |\n| `frozen`              | Whether field is immutable                         |\n| `validate_default`    | Whether to validate the default value              |\n\nSources: [pydantic/fields.py98-265](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L98-L265)\n\n### Field Creation Methods\n\n`FieldInfo` instances are created through three factory methods:\n\n**FieldInfo Factory Methods**\n\n```\n```\n\nSources: [pydantic/fields.py295-521](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L295-L521)\n\n1. **`from_annotation(annotation)`**: For bare type annotations without default values\n2. **`from_annotated_attribute(annotation, default)`**: For annotations with assigned values\n3. **`_construct(metadata, **attr_overrides)`**: Merges multiple `FieldInfo` instances from `Annotated` metadata\n\n### Field Metadata Collection\n\nThe `_collect_metadata` method transforms Field arguments into metadata objects:\n\n| Argument                         | Metadata Type                          |\n| -------------------------------- | -------------------------------------- |\n| `gt`, `ge`, `lt`, `le`           | `annotated_types.Gt`, `Ge`, `Lt`, `Le` |\n| `multiple_of`                    | `annotated_types.MultipleOf`           |\n| `min_length`, `max_length`       | `annotated_types.MinLen`, `MaxLen`     |\n| `strict`                         | `types.Strict`                         |\n| `pattern`, `allow_inf_nan`, etc. | `PydanticGeneralMetadata`              |\n\nSources: [pydantic/fields.py622-649](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L622-L649)\n\n---\n\n## Advanced Topics\n\n### Model Rebuilding\n\nThe `model_rebuild()` method regenerates the schema and validator when forward references couldn't be resolved during initial construction:\n\n```\n```\n\nProcess:\n\n1. Check if model is already complete (skip if `force=False`)\n2. Delete existing schema/validator/serializer\n3. Resolve parent namespace\n4. Call `complete_model_class()` again with namespace resolver\n\nSources: [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650)\n\n### Dynamic Model Creation\n\nThe `create_model` function creates model classes programmatically:\n\n```\n```\n\nThe function:\n\n1. Creates a new namespace dict\n2. Processes field definitions into `FieldInfo` objects\n3. Calls `ModelMetaclass.__new__` to construct the class\n4. Optionally sets `__module__` for proper pickle support\n\nSources: [pydantic/main.py1367-1533](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1367-L1533)\n\n### Frozen Models and Hashing\n\nWhen `frozen=True`, the metaclass automatically generates a `__hash__` method:\n\n**Hash Function Generation**\n\n```\n```\n\nThe hash function:\n\n- Uses `operator.itemgetter` to extract field values\n- Hashes only the model fields (not extras or private attrs)\n- Handles missing keys gracefully via `SafeGetItemProxy`\n\nSources: [pydantic/\\_internal/\\_model\\_construction.py521-547](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L521-L547)\n\n---\n\n## Key Implementation Details\n\n### Mock Validators and Serializers\n\nBefore schema building completes, models use mock validators/serializers that raise helpful errors:\n\n```\n```\n\nThis prevents instantiation of incomplete models and provides clear error messages.",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 943,
      "character_count": 4214,
      "created_at": "2025-10-16T17:42:19.985943",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Sources: [pydantic/main.py220-236](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L220-L236) [pydantic/\\_internal/\\_mock\\_val\\_ser.py1-100](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_mock_val_ser.py#L1-L100)\n\n### Setattr Handler Memoization\n\nFor performance, `__setattr__` memoizes handler selection in `__pydantic_setattr_handlers__`:\n\n```\n```\n\nThis avoids repeated isinstance checks and configuration lookups.\n\nSources: [pydantic/main.py837-933](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L837-L933)\n\n### Model Copy\n\nThe `model_copy()` method creates a shallow or deep copy:\n\n```\n```\n\n- Copies `__dict__` (may have unexpected effects for cached properties)\n- Optionally applies updates (not validated)\n- Handles `extra='allow'` by distinguishing fields from extras\n\nSources: [pydantic/main.py384-416](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L384-L416)\n\n---\n\n## Summary\n\nThe Core Model System provides a comprehensive framework for declarative data validation through:\n\n1. **`BaseModel`** - The base class with validation, serialization, and configuration\n2. **`ModelMetaclass`** - The metaclass orchestrating field collection, schema generation, and model completion\n3. **`FieldInfo`** - Rich field metadata supporting aliases, defaults, and constraints\n4. **Private Attributes** - Separate storage for non-validated instance data\n5. **Configuration** - Flexible behavior control through `ConfigDict`\n6. **Model Lifecycle** - Well-defined stages from construction to validation to serialization\n\nThe system leverages `pydantic-core` (Rust) for the performance-critical validation and serialization operations, while the Python layer handles declarative schema definition and model construction.\n\nFor field-level customization through validators and serializers, see [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md). For understanding how Python types are converted to validation schemas, see [Schema Generation](pydantic/pydantic/5-schema-generation.md).\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [Core Model System](#core-model-system.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [System Overview](#system-overview.md)\n- [BaseModel Class](#basemodel-class.md)\n- [Class Attributes](#class-attributes.md)\n- [Instance Attributes](#instance-attributes.md)\n- [Core Methods](#core-methods.md)\n- [Initialization: \\`\\_\\_init\\_\\_\\`](#initialization-__init__.md)\n- [Construction Without Validation: \\`model\\_construct\\`](#construction-without-validation-model_construct.md)\n- [Validation Methods](#validation-methods.md)\n- [Serialization Methods](#serialization-methods.md)\n- [Model Construction Pipeline](#model-construction-pipeline.md)\n- [ModelMetaclass Pipeline](#modelmetaclass-pipeline.md)\n- [Namespace Inspection](#namespace-inspection.md)\n- [Field Collection](#field-collection.md)\n- [Schema Building and Completion](#schema-building-and-completion.md)\n- [Model Lifecycle](#model-lifecycle.md)\n- [Initialization Flow](#initialization-flow.md)\n- [Attribute Access and Assignment](#attribute-access-and-assignment.md)\n- [Private Attributes](#private-attributes.md)\n- [Configuration System](#configuration-system.md)\n- [Configuration Inheritance](#configuration-inheritance.md)\n- [Key Configuration Options](#key-configuration-options.md)\n- [Model Field Management](#model-field-management.md)\n- [FieldInfo Structure](#fieldinfo-structure.md)\n- [Field Creation Methods](#field-creation-methods.md)\n- [Field Metadata Collection](#field-metadata-collection.md)\n- [Advanced Topics](#advanced-topics.md)\n- [Model Rebuilding](#model-rebuilding.md)\n- [Dynamic Model Creation](#dynamic-model-creation.md)\n- [Frozen Models and Hashing](#frozen-models-and-hashing.md)\n- [Key Implementation Details](#key-implementation-details.md)\n- [Mock Validators and Serializers](#mock-validators-and-serializers.md)\n- [Setattr Handler Memoization](#setattr-handler-memoization.md)\n- [Model Copy](#model-copy.md)\n- [Summary](#summary.md)",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 991,
      "character_count": 4135,
      "created_at": "2025-10-16T17:42:19.989937",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_2-core-model-system.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]