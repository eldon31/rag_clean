[
  {
    "text": "Generics and Forward References | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# Generics and Forward References\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3.4-generics-and-forward-references.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 751,
      "character_count": 2486,
      "created_at": "2025-10-16T17:42:20.244465",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3.4-generics-and-forward-references.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [pydantic/\\_internal/\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py)\n- [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py)\n- [pydantic/\\_internal/\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generics.py)\n- [pydantic/\\_internal/\\_typing\\_extra.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_typing_extra.py)\n- [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py)\n- [pydantic/generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/generics.py)\n- [tests/test\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py)\n- [tests/test\\_forward\\_ref.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_forward_ref.py)\n- [tests/test\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_generics.py)\n- [tests/test\\_typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_typing.py)\n\nThis page documents Pydantic's implementation of generic models and forward references, which are advanced typing features that enhance model reusability and enable self-referential data structures. These features are essential parts of Pydantic's type system, complementing the fundamental types covered in [Constrained Types](pydantic/pydantic/3.1-constrained-types.md) and [Network Types](pydantic/pydantic/3.2-network-types.md).\n\n## Generic Models\n\nGeneric models in Pydantic allow you to create model templates that can be parameterized with different types, similar to how generic classes work in languages like Java or C#. This enables type-safe reuse of model structures across different data types.\n\n### Basic Usage\n\nTo create a generic model, inherit from both `BaseModel` and `Generic[T]` (where `T` is a type variable):\n\n```\n```\n\nWhen you parameterize a generic model with a specific type (e.g., `Container[int]`), Pydantic creates a specialized model class with validation specifically for that type.\n\n```\n```\n\nSources:\n\n- `tests/test_generics.py:83-92`\n- `tests/test_generics.py:580-648`\n\n### Implementation Mechanics\n\nWhen you parameterize a generic model like `Container[int]`, several key processes occur:\n\n1. **Type Substitution**: All occurrences of the type variable `T` in the model are replaced with the concrete type `int`\n2. **Class Creation**: A new subclass of the original model is created with the concrete types\n3. **Caching**: The created class is cached to ensure the same parameterization returns the same class\n\n```\n```\n\nSources:\n\n- `pydantic/_internal/_generics.py:106-150`\n- `pydantic/_internal/_generics.py:246-340`\n- `pydantic/_internal/_generics.py:439-547`\n\n### Type Substitution in Depth\n\nThe `replace_types` function recursively traverses type annotations and substitutes type variables with concrete types:\n\n```\n```\n\nThis handles complex nested types like `List[Dict[str, T]]` â†’ `List[Dict[str, int]]` when substituting `T` with `int`.\n\nSources:\n\n- `pydantic/_internal/_generics.py:178-195`\n- `pydantic/_internal/_generics.py:246-340`\n\n### Caching System\n\nPydantic employs a sophisticated caching mechanism to ensure that:\n\n1. The same parameterization of a generic model returns the same class\n2. Memory usage is optimized by using weak references\n3. The system can handle recursive generic types\n\n```\n```\n\nThe caching system uses a two-stage lookup to optimize performance:\n\n1. An \"early\" cache key for quick lookups\n2. A \"late\" cache key that handles more complex equivalence relationships\n\nSources:\n\n- `pydantic/_internal/_generics.py:42-57`\n- `pydantic/_internal/_generics.py:97-97`\n- `pydantic/_internal/_generics.py:439-547`\n- `tests/test_generics.py:352-456`\n\n## Forward References",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3.4-generics-and-forward-references.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1014,
      "character_count": 3854,
      "created_at": "2025-10-16T17:42:20.254940",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3.4-generics-and-forward-references.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Forward references allow referencing types that haven't been fully defined yet, which is essential for recursive models and handling circular dependencies.\n\n### Basic Usage\n\nIn Python, forward references are typically written as string literals:\n\n```\n```\n\nThis creates a recursive data structure where a `Person` can have a list of `Person` objects as friends.\n\n```\n```\n\nSources:\n\n- `tests/test_forward_ref.py:128-166`\n- `tests/test_forward_ref.py:261-289`\n\n### Forward Reference Resolution\n\nWhen Pydantic encounters a string annotation, it:\n\n1. Records the original string annotation\n2. Marks the field as incomplete (`_complete = False`)\n3. Attempts to resolve the reference when needed\n\nThe resolution process happens:\n\n- **Automatically** during validation if a model has unresolved references\n- **Explicitly** when calling `Model.model_rebuild()`\n\n```\n```\n\nSources:\n\n- `pydantic/_internal/_fields.py:78-282`\n- `pydantic/_internal/_fields.py:300-337`\n- `tests/test_forward_ref.py:42-75`\n\n### Type Evaluation\n\nPydantic evaluates string annotations by:\n\n1. Using the `eval_type` function to convert the string to a type object\n2. Searching for the referenced type in appropriate namespaces\n3. Handling failure gracefully if a type can't be resolved immediately\n\n```\n```\n\nSources:\n\n- `pydantic/_internal/_typing_extra.py:290-457`\n- `pydantic/_internal/_typing_extra.py:209-271`\n\n### Recursive Models and Circular Dependencies\n\nPydantic efficiently handles recursive models (like trees or graphs) and circular dependencies between models by:\n\n1. Detecting recursion during schema generation\n2. Using special schema references to avoid infinite recursion\n3. Auto-rebuilding models as necessary to resolve circular dependencies\n\n```\n```\n\nSources:\n\n- `tests/test_forward_ref.py:111-166`\n- `tests/test_forward_ref.py:205-260`\n- `tests/test_forward_ref.py:261-411`\n- `tests/test_forward_ref.py:697-714`\n\n## Combining Generics and Forward References\n\n### Generic Models with Forward References\n\nCombining generics and forward references enables powerful type patterns:\n\n```\n```\n\nWhen this forward reference is resolved, the type variable `T` is correctly substituted with the concrete type.\n\n```\n```\n\nSources:\n\n- `tests/test_generics.py:664-794`\n- `pydantic/_internal/_fields.py:327-328`\n- `pydantic/_internal/_generics.py:396-437`\n\n### Handling Recursive Generic Types\n\nFor recursive generic types, Pydantic implements special handling to prevent infinite recursion:\n\n```\n```\n\nThis allows for properly handling complex structures like trees where nodes can contain other nodes of the same type.\n\nSources:\n\n- `pydantic/_internal/_generics.py:396-437`\n- `tests/test_generics.py:458-486`\n\n## Advanced Usage Patterns\n\n### Bounded Type Variables\n\nYou can restrict the allowed types by using bounded type variables:\n\n```\n```\n\nThis ensures that only types compatible with the bound can be used as parameters.\n\nSources:\n\n- `tests/test_generics.py:881-912`\n\n### Default Type Arguments\n\nGeneric models can have default type arguments using Python 3.12+ syntax:\n\n```\n```\n\nThis allows users to only specify some type arguments while others default to predefined types.\n\nSources:\n\n- `tests/test_generics.py:297-349`\n\n### Partial Specialization\n\nYou can partially specialize a generic model with multiple type variables:\n\n```\n```\n\nPartial specialization allows for creating intermediate template models.\n\nSources:\n\n- `tests/test_generics.py:797-878`\n\n## Implementation Details\n\n### Generic Model Creation Internals\n\nWhen a generic model is parameterized, the `create_generic_submodel` function creates a new subclass:\n\n```\n```\n\nThe created model contains metadata about its generic origin, arguments, and parameters to support further operations.\n\nSources:\n\n- `pydantic/_internal/_generics.py:100-150`\n- `pydantic/_internal/_generics.py:343-393`\n\n### Forward Reference Handling Internals\n\nThe handling of forward references is primarily implemented in the `_fields.py` and `_typing_extra.py` modules:\n\n```\n```\n\nThe resolution process uses Python's introspection capabilities to find the right namespace context for evaluating the string annotations.\n\nSources:\n\n- `pydantic/_internal/_fields.py:78-167`\n- `pydantic/_internal/_fields.py:300-337`\n- `pydantic/_internal/_typing_extra.py:290-464`\n\n## Conclusion\n\nGenerics and forward references are powerful features in Pydantic that enable complex type patterns while maintaining type safety. They allow for:\n\n1. Creating reusable model templates with generics\n2. Building recursive data structures with forward references\n3. Combining both to create sophisticated type systems",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3.4-generics-and-forward-references.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1013,
      "character_count": 4604,
      "created_at": "2025-10-16T17:42:20.276053",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3.4-generics-and-forward-references.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Understanding these features is essential for advanced Pydantic usage, especially when building models with complex relationships or when creating reusable model libraries.\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [Generics and Forward References](#generics-and-forward-references.md)\n- [Generic Models](#generic-models.md)\n- [Basic Usage](#basic-usage.md)\n- [Implementation Mechanics](#implementation-mechanics.md)\n- [Type Substitution in Depth](#type-substitution-in-depth.md)\n- [Caching System](#caching-system.md)\n- [Forward References](#forward-references.md)\n- [Basic Usage](#basic-usage-1.md)\n- [Forward Reference Resolution](#forward-reference-resolution.md)\n- [Type Evaluation](#type-evaluation.md)\n- [Recursive Models and Circular Dependencies](#recursive-models-and-circular-dependencies.md)\n- [Combining Generics and Forward References](#combining-generics-and-forward-references.md)\n- [Generic Models with Forward References](#generic-models-with-forward-references.md)\n- [Handling Recursive Generic Types](#handling-recursive-generic-types.md)\n- [Advanced Usage Patterns](#advanced-usage-patterns.md)\n- [Bounded Type Variables](#bounded-type-variables.md)\n- [Default Type Arguments](#default-type-arguments.md)\n- [Partial Specialization](#partial-specialization.md)\n- [Implementation Details](#implementation-details.md)\n- [Generic Model Creation Internals](#generic-model-creation-internals.md)\n- [Forward Reference Handling Internals](#forward-reference-handling-internals.md)\n- [Conclusion](#conclusion.md)",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3.4-generics-and-forward-references.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 359,
      "character_count": 1603,
      "created_at": "2025-10-16T17:42:20.276570",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3.4-generics-and-forward-references.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]