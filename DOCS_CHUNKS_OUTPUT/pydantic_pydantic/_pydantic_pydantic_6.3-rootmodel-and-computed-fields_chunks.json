[
  {
    "text": "RootModel and Computed Fields | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# RootModel and Computed Fields\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 753,
      "character_count": 2482,
      "created_at": "2025-10-16T17:42:20.607737",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py)\n- [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py)\n- [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py)\n- [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py)\n- [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py)\n- [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py)\n- [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py)\n- [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py)\n- [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py)\n- [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py)\n- [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py)\n- [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py)\n- [tests/test\\_serialize.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py)\n- [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py)\n- [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py)\n- [tests/test\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py)\n\nThis page documents two distinct but complementary features: **RootModel** for validating root-level values, and **Computed Fields** for adding dynamic, read-only properties to models that appear during serialization.\n\nFor basic model functionality, see [BaseModel](pydantic/pydantic/2.1-basemodel.md). For field configuration and metadata, see [Field System](pydantic/pydantic/2.2-field-system.md). For serialization customization, see [Serializers](pydantic/pydantic/4.2-serializers.md).\n\n---\n\n## Overview\n\n**RootModel** enables validation of types that don't naturally fit into Pydantic's field-based structure. Instead of defining multiple fields, a RootModel wraps a single root value of any type (primitives, collections, custom types, etc.).\n\n**Computed Fields** are dynamic properties decorated with `@computed_field` that are calculated on-access and automatically included in serialization output. Unlike regular properties, computed fields appear in `model_dump()`, `model_dump_json()`, and JSON schema generation.\n\n---\n\n## RootModel\n\n### Purpose and Design\n\nRootModel provides a way to validate and serialize root-level values that are not traditional models with named fields. This is useful for:\n\n- Wrapping primitive types with validation logic\n- Validating collection types (lists, dicts) at the root level\n- Creating type aliases with custom validation\n- Building discriminated union handlers\n- Parsing configuration formats where the entire structure is a single type\n\n**Sources:** [pydantic/root\\_model.py1-155](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L1-L155)\n\n### Core Architecture\n\n```\n```\n\n**Sources:** [pydantic/root\\_model.py32-155](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L155) [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py)\n\n### Basic Usage",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1011,
      "character_count": 3801,
      "created_at": "2025-10-16T17:42:20.613921",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "The `root` field contains the validated value. RootModel can be instantiated with either a positional argument or keyword arguments:\n\n```\n```\n\n**Sources:** [pydantic/root\\_model.py60-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L60-L69) [tests/test\\_root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_root_model.py)\n\n### Key Characteristics\n\n| Characteristic     | Behavior                                             | Rationale                                  |\n| ------------------ | ---------------------------------------------------- | ------------------------------------------ |\n| Single field       | Only `root` field exists                             | RootModel represents a single value        |\n| Extra fields       | Not supported (`model_config['extra']` raises error) | Would conflict with root-level validation  |\n| Private attributes | Set to `None`                                        | Root models don't support `_private` attrs |\n| Initialization     | Accepts positional or keyword args                   | Flexible instantiation patterns            |\n| Validation         | Applied to `root` value                              | Standard validation pipeline               |\n| Serialization      | Returns root value directly in `model_dump()`        | Not wrapped in a dict                      |\n\n**Sources:** [pydantic/root\\_model.py52-58](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L52-L58) [pydantic/root\\_model.py60-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L60-L69)\n\n### Initialization Flow\n\n```\n```\n\n**Sources:** [pydantic/root\\_model.py60-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L60-L69) [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py)\n\n### Construction and Copying\n\nRootModel provides special methods for construction and copying:\n\n**model\\_construct**: Creates instances without validation\n\n```\n```\n\n**Copy operations**: Shallow and deep copy support via `__copy__` and `__deepcopy__`\n\n**Pickle support**: Via `__getstate__` and `__setstate__` for serialization\n\n**Sources:** [pydantic/root\\_model.py72-114](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L72-L114) [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py)\n\n### Serialization Behavior\n\nUnlike regular models, RootModel's `model_dump()` returns the root value directly, not a dictionary:\n\n```\n```\n\nThis behavior is controlled by the model's serialization schema and differs from BaseModel to match the semantic meaning of a \"root\" value.\n\n**Sources:** [pydantic/root\\_model.py116-144](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L116-L144) [tests/test\\_root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_root_model.py)\n\n---\n\n## Computed Fields\n\n### Purpose and Design\n\nComputed fields are dynamic properties that:\n\n1. Are calculated on-access (not stored in `__dict__`)\n2. Automatically appear in serialization (`model_dump()`, `model_dump_json()`)\n3. Generate JSON schema with `readOnly: true`\n4. Can have custom serializers applied\n5. Support property setters and deleters\n\nThey bridge the gap between regular properties (not serialized) and model fields (stored and validated).\n\n**Sources:** [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66)\n\n### Core Components\n\n```\n```\n\n**Sources:** [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) [pydantic/\\_internal/\\_decorators.py427](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L427-L427) [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py)\n\n### Basic Usage\n\nThe `@computed_field` decorator can be used directly or with the `@property` decorator:\n\n```\n```",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1021,
      "character_count": 4163,
      "created_at": "2025-10-16T17:42:20.623476",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "**Sources:** [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66)\n\n### Field Metadata and Configuration\n\nComputed fields support the same metadata as regular fields:\n\n| Parameter           | Type   | Purpose                                 | Example                         |\n| ------------------- | ------ | --------------------------------------- | ------------------------------- |\n| `title`             | `str`  | JSON schema title                       | `title='Area'`                  |\n| `description`       | `str`  | Documentation                           | `description='Calculated area'` |\n| `examples`          | `list` | Example values                          | `examples=[100, 200]`           |\n| `json_schema_extra` | `dict` | Additional JSON schema properties       | `json_schema_extra={'foo': 42}` |\n| `alias`             | `str`  | Serialization alias                     | `alias='the_area'`              |\n| `repr`              | `bool` | Include in `__repr__` (default: `True`) | `repr=False`                    |\n| `return_type`       | `type` | Override inferred return type           | `return_type=float`             |\n\n**Sources:** [tests/test\\_computed\\_fields.py68-121](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L68-L121) [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py)\n\n### Computed Field Lifecycle\n\n```\n```\n\n**Sources:** [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py)\n\n### Property Setters and Deleters\n\nComputed fields can have setters and deleters like regular properties:\n\n```\n```\n\n**Sources:** [tests/test\\_computed\\_fields.py123-176](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L123-L176)\n\n### Serialization Customization\n\nComputed fields can be customized with `@field_serializer`:\n\n```\n```\n\n**Sources:** [tests/test\\_computed\\_fields.py123-150](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L123-L150) [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py)\n\n### Cached Properties\n\nComputed fields work with `functools.cached_property` for performance:\n\n```\n```\n\n**Sources:** [tests/test\\_computed\\_fields.py178-214](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L178-L214)\n\n### JSON Schema Generation\n\nComputed fields appear in JSON schema with `readOnly: true`:\n\n```\n```\n\nThe `readOnly` flag indicates that the field is computed during serialization and cannot be provided during validation.\n\n**Sources:** [tests/test\\_computed\\_fields.py68-121](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L68-L121) [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py)\n\n### Include/Exclude Behavior\n\nComputed fields respect include/exclude parameters in serialization:\n\n```\n```\n\n**Sources:** [tests/test\\_computed\\_fields.py287-309](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L287-L309) [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py)\n\n---\n\n## Storage and Access Patterns\n\n### Field vs Computed Field Comparison\n\n```\n```",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 903,
      "character_count": 3564,
      "created_at": "2025-10-16T17:42:20.633113",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "| Feature              | Regular Field | Computed Field | Regular Property |\n| -------------------- | ------------- | -------------- | ---------------- |\n| Validated at init    | ✓             | ✗              | ✗                |\n| Stored in `__dict__` | ✓             | ✗              | ✗                |\n| In `model_dump()`    | ✓             | ✓              | ✗                |\n| In JSON schema       | ✓             | ✓ (readOnly)   | ✗                |\n| Can have setter      | ✗             | ✓              | ✓                |\n| Cached by default    | ✓             | ✗              | ✗                |\n| Computed on access   | ✗             | ✓              | ✓                |\n\n**Sources:** [tests/test\\_computed\\_fields.py27-66](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py#L27-L66) [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py)\n\n---\n\n## Integration with Validation and Serialization\n\n### Computed Fields in Validation Pipeline\n\nComputed fields are **not** part of the validation pipeline. They are only evaluated during serialization or when accessed as properties.\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py)\n\n### Decorator Processing Flow\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_decorators.py427](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L427-L427) [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py)\n\n---\n\n## Code Entity Reference\n\n### RootModel Implementation\n\n| Class/Function                | Location                                                                                                          | Purpose                         |\n| ----------------------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------------------- |\n| `RootModel`                   | [pydantic/root\\_model.py32](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L32-L32)    | Main RootModel class definition |\n| `RootModel.__init__`          | [pydantic/root\\_model.py60-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L60-L69) | Initialize with root value      |\n| `RootModel.model_construct`   | [pydantic/root\\_model.py72-86](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L72-L86) | Construct without validation    |\n| `RootModel.__init_subclass__` | [pydantic/root\\_model.py52-58](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L52-L58) | Check extra config not set      |\n| `_RootModelMetaclass`         | [pydantic/root\\_model.py25](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L25-L25)    | Metaclass for RootModel         |\n\n**Sources:** [pydantic/root\\_model.py1-155](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py#L1-L155)\n\n### Computed Field Implementation",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 852,
      "character_count": 3415,
      "created_at": "2025-10-16T17:42:20.637901",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "| Class/Function                   | Location                                                                                                                                 | Purpose                                |\n| -------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- |\n| `@computed_field`                | [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py)                                              | Decorator for computed fields          |\n| `ComputedFieldInfo`              | [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py)                                              | Metadata container for computed fields |\n| `DecoratorInfos.computed_fields` | [pydantic/\\_internal/\\_decorators.py427](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py#L427-L427) | Storage in decorator info              |\n| `model_computed_fields`          | [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py)                                                  | ClassVar dict of computed fields       |\n\n**Sources:** [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py)\n\n### Schema Generation\n\n| Function                          | Location                                                                                                                               | Purpose                            |\n| --------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------- |\n| `computed_field_schema()`         | [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) | Generate schema for computed field |\n| `_computed_field_common_schema()` | [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) | Common schema logic                |\n\n**Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [RootModel and Computed Fields](#rootmodel-and-computed-fields.md)\n- [Overview](#overview.md)\n- [RootModel](#rootmodel.md)\n- [Purpose and Design](#purpose-and-design.md)\n- [Core Architecture](#core-architecture.md)\n- [Basic Usage](#basic-usage.md)\n- [Key Characteristics](#key-characteristics.md)\n- [Initialization Flow](#initialization-flow.md)\n- [Construction and Copying](#construction-and-copying.md)\n- [Serialization Behavior](#serialization-behavior.md)\n- [Computed Fields](#computed-fields.md)\n- [Purpose and Design](#purpose-and-design-1.md)\n- [Core Components](#core-components.md)\n- [Basic Usage](#basic-usage-1.md)\n- [Field Metadata and Configuration](#field-metadata-and-configuration.md)\n- [Computed Field Lifecycle](#computed-field-lifecycle.md)\n- [Property Setters and Deleters](#property-setters-and-deleters.md)\n- [Serialization Customization](#serialization-customization.md)\n- [Cached Properties](#cached-properties.md)\n- [JSON Schema Generation](#json-schema-generation.md)\n- [Include/Exclude Behavior](#includeexclude-behavior.md)\n- [Storage and Access Patterns](#storage-and-access-patterns.md)\n- [Field vs Computed Field Comparison](#field-vs-computed-field-comparison.md)\n- [Integration with Validation and Serialization](#integration-with-validation-and-serialization.md)\n- [Computed Fields in Validation Pipeline](#computed-fields-in-validation-pipeline.md)\n- [Decorator Processing Flow](#decorator-processing-flow.md)\n- [Code Entity Reference](#code-entity-reference.md)\n- [RootModel Implementation](#rootmodel-implementation.md)\n- [Computed Field Implementation](#computed-field-implementation.md)\n- [Schema Generation](#schema-generation.md)",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 898,
      "character_count": 4344,
      "created_at": "2025-10-16T17:42:20.640996",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]