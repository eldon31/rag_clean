[
  {
    "text": "Extraction Pipeline | docling-project/docling | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[docling-project/docling](https://github.com/docling-project/docling \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 115,
      "character_count": 420,
      "created_at": "2025-10-16T17:42:17.311382",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [Overview](docling-project/docling/1-overview.md)\n- [Installation](docling-project/docling/1.1-installation.md)\n- [Quick Start](docling-project/docling/1.2-quick-start.md)\n- [Core Architecture](docling-project/docling/2-core-architecture.md)\n- [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md)\n- [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md)\n- [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md)\n- [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md)\n- [Document Backends](docling-project/docling/3-document-backends.md)\n- [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md)\n- [Office Document Backends](docling-project/docling/3.2-office-document-backends.md)\n- [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md)\n- [AI/ML Models](docling-project/docling/4-aiml-models.md)\n- [OCR Models](docling-project/docling/4.1-ocr-models.md)\n- [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md)\n- [Vision Language Models](docling-project/docling/4.3-vision-language-models.md)\n- [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md)\n- [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md)\n- [Enrichment Models](docling-project/docling/4.4-enrichment-models.md)\n- [Processing Pipelines](docling-project/docling/5-processing-pipelines.md)\n- [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md)\n- [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md)\n- [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md)\n- [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md)\n- [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md)\n- [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md)\n- [Command Line Interface](docling-project/docling/6-command-line-interface.md)\n- [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md)\n- [Model Management CLI](docling-project/docling/6.2-model-management-cli.md)\n- [Python SDK](docling-project/docling/7-python-sdk.md)\n- [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md)\n- [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md)\n- [Usage Examples](docling-project/docling/7.3-usage-examples.md)\n- [Output and Integration](docling-project/docling/8-output-and-integration.md)\n- [Export Formats](docling-project/docling/8.1-export-formats.md)\n- [Document Chunking](docling-project/docling/8.2-document-chunking.md)\n- [Framework Integrations](docling-project/docling/8.3-framework-integrations.md)\n- [Development and Testing](docling-project/docling/9-development-and-testing.md)\n- [Testing Framework](docling-project/docling/9.1-testing-framework.md)\n- [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md)\n- [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md)\n- [Deployment](docling-project/docling/10-deployment.md)\n- [Docker Deployment](docling-project/docling/10.1-docker-deployment.md)\n- [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md)\n\nMenu\n\n# Extraction Pipeline\n\nRelevant source files",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 926,
      "character_count": 3418,
      "created_at": "2025-10-16T17:42:17.313953",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py)\n- [docling/datamodel/pipeline\\_options\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py)\n- [docling/datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py)\n- [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py)\n- [docling/models/api\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py)\n- [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py)\n- [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py)\n- [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py)\n- [docling/models/vlm\\_models\\_inline/mlx\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py)\n- [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py)\n- [docling/models/vlm\\_models\\_inline/vllm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py)\n- [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py)\n- [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py)\n- [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py)\n- [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py)\n- [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py)\n- [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py)\n- [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py)\n\nThe Extraction Pipeline provides schema-based structured data extraction from documents using Vision-Language Models. Unlike the VlmPipeline (see [5.3](docling-project/docling/5.3-vlm-pipeline.md)) which performs full document conversion, `ExtractionVlmPipeline` focuses on extracting specific fields defined by user-provided templates, returning JSON-structured data rather than a complete `DoclingDocument`.\n\nThis pipeline is currently experimental and supports PDF and image formats only. It uses the NuExtract model, which is specifically designed for structured information extraction from visual documents.\n\n**Related pages**: For full document conversion with VLM models, see [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md). For general pipeline architecture, see [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md). For the public API, see [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md).\n\n## Architecture Overview\n\nThe extraction system consists of three main layers: the API layer (`DocumentExtractor`), the pipeline layer (`ExtractionVlmPipeline`), and the model layer (`NuExtractTransformersModel`).\n\n```\n```",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 954,
      "character_count": 3835,
      "created_at": "2025-10-16T17:42:17.317159",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py32-46](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L46) [docling/document\\_extractor.py88-119](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L119) [docling/pipeline/base\\_extraction\\_pipeline.py15-30](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L30)\n\n### Class Hierarchy\n\n```\n```\n\n**Sources**: [docling/pipeline/base\\_extraction\\_pipeline.py15-72](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L72) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-198](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L198) [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py107-160](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L107-L160)\n\n## Pipeline Initialization\n\n`ExtractionVlmPipeline` is initialized with `VlmExtractionPipelineOptions` and creates a `NuExtractTransformersModel` instance. Unlike conversion pipelines, extraction pipelines do not build document structure—they only extract data.\n\n### Configuration\n\n```\n```\n\n**Sources**: [docling/datamodel/vlm\\_model\\_specs.py288-302](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L288-L302) [docling/pipeline/extraction\\_vlm\\_pipeline.py33-46](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L33-L46)\n\nThe default configuration uses the `numind/NuExtract-2.0-2B` model with the following settings:\n\n| Parameter             | Default Value             | Description                    |\n| --------------------- | ------------------------- | ------------------------------ |\n| `repo_id`             | `numind/NuExtract-2.0-2B` | Hugging Face model identifier  |\n| `torch_dtype`         | `bfloat16`                | Model precision                |\n| `inference_framework` | `TRANSFORMERS`            | Uses Hugging Face Transformers |\n| `response_format`     | `PLAINTEXT`               | Returns JSON as plain text     |\n| `scale`               | `2.0`                     | Image scaling factor           |\n| `temperature`         | `0.0`                     | Deterministic generation       |\n| `max_new_tokens`      | `4096`                    | Maximum response length        |\n\n**Sources**: [docling/datamodel/vlm\\_model\\_specs.py288-302](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py#L288-L302) [docling/datamodel/pipeline\\_options\\_vlm\\_model.py54-85](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py#L54-L85)\n\n## Extraction Process Flow\n\nThe extraction process follows a three-phase pattern: image loading, template serialization, and VLM inference.\n\n```\n```\n\n**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py48-126](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L48-L126) [docling/document\\_extractor.py239-289](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L239-L289) [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py161-290](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L161-L290)\n\n### Image Extraction from Backend\n\nThe pipeline extracts images from the document backend, respecting page range limits:\n\n```\n```\n\n**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py135-171](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L135-L171)",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 990,
      "character_count": 3892,
      "created_at": "2025-10-16T17:42:17.323238",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "The method follows the same page range filtering logic as `PaginatedPipeline`, processing only pages within `[start_page-1, end_page-1]` (0-indexed). This ensures consistent behavior across all pipelines.\n\n## Template Serialization\n\nThe extraction pipeline supports multiple template formats and converts them to JSON strings for the NuExtract model.\n\n### Supported Template Types\n\n| Template Type          | Description             | Example                         |\n| ---------------------- | ----------------------- | ------------------------------- |\n| `str`                  | Direct JSON or text     | `'{\"name\": \"\", \"date\": \"\"}'`    |\n| `dict`                 | Python dictionary       | `{\"name\": \"\", \"date\": \"\"}`      |\n| `BaseModel` (instance) | Pydantic model instance | `Invoice(customer=\"\", total=0)` |\n| `Type[BaseModel]`      | Pydantic model class    | `Invoice` (class itself)        |\n\n**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py173-193](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L173-L193) [docling/datamodel/extraction.py38-39](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py#L38-L39)\n\n### Serialization Process\n\n```\n```\n\n**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py173-193](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L173-L193)\n\nWhen a Pydantic class (not instance) is provided, the pipeline uses `polyfactory.ModelFactory` to generate an example instance with:\n\n- `__use_examples__=True`: Prefers `Field(examples=...)` values when present\n- `__use_defaults__=True`: Uses field defaults instead of random values\n\nThis allows users to define extraction schemas as Pydantic classes with example values that guide the VLM's output structure.\n\n**Example**:\n\n```\n```\n\n**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py182-191](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L182-L191)\n\n## NuExtract Model Integration\n\nThe `NuExtractTransformersModel` implements the NuExtract-specific input format and inference logic.\n\n### Model Architecture\n\n```\n```\n\n**Sources**: [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py107-160](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L107-L160) [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py161-290](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L161-L290)\n\n### NuExtract Input Format\n\nNuExtract requires a specific input structure that differs from standard VLM prompts:\n\n```\n```\n\n**Sources**: [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py207-249](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L207-L249)\n\nThe key differences:\n\n1. **Document wrapper**: Images are wrapped in `{type: \"image\", image: PIL}` format\n2. **Template parameter**: The schema is passed as a `template` parameter to `apply_chat_template`, not as part of the prompt\n3. **Vision processing**: Uses `process_all_vision_info` from `qwen-vl-utils` to extract images from the message structure\n\n### Batch Processing\n\n```\n```\n\n**Sources**: [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py161-290](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py#L161-L290)\n\n## Output Structure\n\nThe extraction pipeline produces `ExtractionResult` objects containing per-page extracted data.\n\n### Data Models\n\n```\n```\n\n**Sources**: [docling/datamodel/extraction.py1-40](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py#L1-L40)\n\n### Extraction Result Processing\n\nThe pipeline attempts to parse the VLM response as JSON. If parsing fails, the raw text is still preserved:\n\n```\n```",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 985,
      "character_count": 4062,
      "created_at": "2025-10-16T17:42:17.332941",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py82-107](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L82-L107)\n\n### Status Determination\n\nThe pipeline sets the final status based on page-level errors:\n\n| Condition                          | Status    |\n| ---------------------------------- | --------- |\n| All pages extracted without errors | `SUCCESS` |\n| At least one page has errors       | `FAILURE` |\n| No pages processed                 | `FAILURE` |\n\n**Sources**: [docling/pipeline/extraction\\_vlm\\_pipeline.py128-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L128-L133)\n\nThis differs from conversion pipelines which can have `PARTIAL_SUCCESS` status. Extraction is more binary: either data is extracted cleanly or it fails.\n\n## Comparison with VlmPipeline\n\nThe extraction and conversion pipelines serve different purposes and have distinct architectures:\n\n```\n```\n\n**Key Differences**:\n\n| Aspect               | VlmPipeline                             | ExtractionVlmPipeline             |\n| -------------------- | --------------------------------------- | --------------------------------- |\n| **Base class**       | `PaginatedPipeline` → `ConvertPipeline` | `BaseExtractionPipeline`          |\n| **Purpose**          | Full document conversion                | Schema-based data extraction      |\n| **Input**            | Document only                           | Document + template               |\n| **VLM model**        | GraniteDocling, SmolDocling, etc.       | NuExtract-2.0                     |\n| **Response format**  | DOCTAGS, Markdown, HTML                 | JSON (plain text)                 |\n| **Output**           | `DoclingDocument` with full structure   | `ExtractionResult` with JSON data |\n| **Phases**           | build → assemble → enrich               | extract only                      |\n| **Template support** | No                                      | Yes (str/dict/Pydantic)           |\n\n**Sources**: [docling/pipeline/vlm\\_pipeline.py50-113](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L113) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-46](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L46) [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) [docling/pipeline/base\\_extraction\\_pipeline.py15-72](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L72)\n\n## Usage Patterns\n\nThe extraction pipeline is accessed through the `DocumentExtractor` API, which mirrors the `DocumentConverter` API but targets extraction workflows.\n\n### Basic Extraction\n\n```\n```\n\n**Example workflow**:\n\n1. Create `DocumentExtractor` with desired formats and options\n2. Define extraction template (dict, Pydantic class, etc.)\n3. Call `extract()` or `extract_all()` with source and template\n4. Receive `ExtractionResult` with per-page extracted data\n\n**Sources**: [docling/document\\_extractor.py88-193](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L88-L193)\n\n### Pipeline Caching\n\nThe extractor caches pipeline instances by `(pipeline_class, options_hash)` to avoid redundant model loading:\n\n```\n```\n\n**Sources**: [docling/document\\_extractor.py291-317](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py#L291-L317)\n\nThis pattern matches the `DocumentConverter` caching strategy, ensuring that multiple extraction calls with identical configurations reuse the same model instance, avoiding expensive reloads.\n\n**Sources**: [docling/document\\_converter.py229-248](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L229-L248) (converter equivalent)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 913,
      "character_count": 4078,
      "created_at": "2025-10-16T17:42:17.342178",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 5,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [Extraction Pipeline](#extraction-pipeline.md)\n- [Architecture Overview](#architecture-overview.md)\n- [Class Hierarchy](#class-hierarchy.md)\n- [Pipeline Initialization](#pipeline-initialization.md)\n- [Configuration](#configuration.md)\n- [Extraction Process Flow](#extraction-process-flow.md)\n- [Image Extraction from Backend](#image-extraction-from-backend.md)\n- [Template Serialization](#template-serialization.md)\n- [Supported Template Types](#supported-template-types.md)\n- [Serialization Process](#serialization-process.md)\n- [NuExtract Model Integration](#nuextract-model-integration.md)\n- [Model Architecture](#model-architecture.md)\n- [NuExtract Input Format](#nuextract-input-format.md)\n- [Batch Processing](#batch-processing.md)\n- [Output Structure](#output-structure.md)\n- [Data Models](#data-models.md)\n- [Extraction Result Processing](#extraction-result-processing.md)\n- [Status Determination](#status-determination.md)\n- [Comparison with VlmPipeline](#comparison-with-vlmpipeline.md)\n- [Usage Patterns](#usage-patterns.md)\n- [Basic Extraction](#basic-extraction.md)\n- [Pipeline Caching](#pipeline-caching.md)",
    "metadata": {
      "chunk_id": 6,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 266,
      "character_count": 1123,
      "created_at": "2025-10-16T17:42:17.342329",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 6,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_5.4-extraction-pipeline.md",
      "collection_context": "Docling"
    }
  }
]