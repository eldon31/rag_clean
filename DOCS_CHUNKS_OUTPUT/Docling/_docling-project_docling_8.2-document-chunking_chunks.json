[
  {
    "text": "Document Chunking | docling-project/docling | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[docling-project/docling](https://github.com/docling-project/docling \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 115,
      "character_count": 418,
      "created_at": "2025-10-16T17:42:17.748307",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [Overview](docling-project/docling/1-overview.md)\n- [Installation](docling-project/docling/1.1-installation.md)\n- [Quick Start](docling-project/docling/1.2-quick-start.md)\n- [Core Architecture](docling-project/docling/2-core-architecture.md)\n- [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md)\n- [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md)\n- [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md)\n- [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md)\n- [Document Backends](docling-project/docling/3-document-backends.md)\n- [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md)\n- [Office Document Backends](docling-project/docling/3.2-office-document-backends.md)\n- [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md)\n- [AI/ML Models](docling-project/docling/4-aiml-models.md)\n- [OCR Models](docling-project/docling/4.1-ocr-models.md)\n- [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md)\n- [Vision Language Models](docling-project/docling/4.3-vision-language-models.md)\n- [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md)\n- [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md)\n- [Enrichment Models](docling-project/docling/4.4-enrichment-models.md)\n- [Processing Pipelines](docling-project/docling/5-processing-pipelines.md)\n- [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md)\n- [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md)\n- [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md)\n- [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md)\n- [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md)\n- [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md)\n- [Command Line Interface](docling-project/docling/6-command-line-interface.md)\n- [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md)\n- [Model Management CLI](docling-project/docling/6.2-model-management-cli.md)\n- [Python SDK](docling-project/docling/7-python-sdk.md)\n- [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md)\n- [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md)\n- [Usage Examples](docling-project/docling/7.3-usage-examples.md)\n- [Output and Integration](docling-project/docling/8-output-and-integration.md)\n- [Export Formats](docling-project/docling/8.1-export-formats.md)\n- [Document Chunking](docling-project/docling/8.2-document-chunking.md)\n- [Framework Integrations](docling-project/docling/8.3-framework-integrations.md)\n- [Development and Testing](docling-project/docling/9-development-and-testing.md)\n- [Testing Framework](docling-project/docling/9.1-testing-framework.md)\n- [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md)\n- [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md)\n- [Deployment](docling-project/docling/10-deployment.md)\n- [Docker Deployment](docling-project/docling/10.1-docker-deployment.md)\n- [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md)\n\nMenu\n\n# Document Chunking\n\nRelevant source files",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 927,
      "character_count": 3416,
      "created_at": "2025-10-16T17:42:17.750429",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md)\n- [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md)\n- [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff)\n- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md)\n- [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py)\n- [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md)\n- [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md)\n- [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md)\n- [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md)\n- [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml)\n- [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml)\n- [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock)\n\n## Purpose and Scope\n\nDocument chunking is the process of breaking down large documents into smaller, semantically meaningful segments that can be efficiently processed by downstream systems. In Docling, chunking operates on `DoclingDocument` objects after conversion is complete, transforming the hierarchical document structure into manageable chunks suitable for retrieval-augmented generation (RAG), vector database indexing, and other AI/ML workflows.\n\nThis page covers:\n\n- Chunking architecture and placement in the Docling workflow\n- The `HierarchicalChunker` from `docling-core[chunking]`\n- Hybrid chunking strategies that combine structural and text-based approaches\n- Integration patterns with retrieval systems and vector databases\n\nFor information about document conversion and the `DoclingDocument` format, see [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md). For export formats that precede chunking, see [Export Formats](docling-project/docling/8.1-export-formats.md). For framework-specific integrations that consume chunks, see [Framework Integrations](docling-project/docling/8.3-framework-integrations.md).\n\nSources: [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) [mkdocs.yml77-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L77-L103)\n\n## Chunking in the Docling Workflow\n\nChunking is a post-conversion operation that transforms the unified `DoclingDocument` representation into smaller segments. The following diagram illustrates where chunking fits in the overall processing pipeline:\n\n```\n```\n\n**Chunking Workflow Position**\n\nThe chunking layer operates after document conversion is complete and before downstream consumption. It accepts a `DoclingDocument` as input and produces a list of chunks, each containing:\n\n- Text content\n- Metadata (source location, document structure context)\n- Optional embeddings (when integrated with embedding models)\n\nSources: [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47) Diagram 1 and 2 from high-level overview\n\n## Chunking Dependencies\n\nDocling's chunking functionality is provided by the `docling-core` library with the `chunking` extra:\n\n```\n```\n\nThis dependency includes:\n\n- `HierarchicalChunker` - structure-aware chunking based on document hierarchy\n- `HybridChunker` - combines hierarchical and text-based chunking\n- Tokenizer integration for precise chunk size control\n- Metadata preservation for provenance tracking\n\nSources: [pyproject.toml47](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L47-L47)\n\n## Chunking Strategies\n\nDocling supports multiple chunking strategies through the `docling-core` library. The primary strategies are:\n\n### Document Structure-Based Chunking",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 956,
      "character_count": 4003,
      "created_at": "2025-10-16T17:42:17.757533",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "| Strategy              | Description                                                       | Use Case                                               |\n| --------------------- | ----------------------------------------------------------------- | ------------------------------------------------------ |\n| **Hierarchical**      | Chunks based on document structure (sections, paragraphs, tables) | Preserving document semantics, maintaining context     |\n| **Hybrid**            | Combines hierarchical structure with text-based splitting         | Balancing structure preservation with size constraints |\n| **Metadata-Enriched** | Includes provenance and structural metadata in each chunk         | Retrieval systems requiring context attribution        |\n\n### Chunking Parameters\n\n```\n```\n\n**Configuration Parameters**\n\n- `max_tokens`: Maximum number of tokens per chunk (typical: 512, 1024, 2048)\n- `overlap`: Number of overlapping tokens between adjacent chunks (typical: 50-200)\n- `tokenizer`: Tokenization method (e.g., `tiktoken` for GPT models, `transformers` tokenizers)\n- `merge_peers`: Whether to merge sibling elements in the document hierarchy\n\nSources: [mkdocs.yml102-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L102-L103)\n\n## HierarchicalChunker Implementation\n\nThe `HierarchicalChunker` from `docling-core` is the primary chunking mechanism. It respects document structure while enforcing size constraints:\n\n### Chunking Process Flow\n\n```\n```\n\n**Hierarchical Chunking Algorithm**\n\n1. **Traverse Document Tree**: Walk the `DoclingDocument` hierarchy depth-first\n2. **Respect Boundaries**: Avoid splitting structural elements (tables, figures) when possible\n3. **Size Enforcement**: Split text elements that exceed `max_tokens`\n4. **Metadata Preservation**: Each chunk maintains links to its source location\n5. **Overlap Generation**: Create overlapping tokens between chunks for context continuity\n\nSources: Examples in [mkdocs.yml102-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L102-L103)\n\n## Hybrid Chunking\n\nHybrid chunking combines the benefits of structure-aware and text-based chunking strategies:\n\n```\n```\n\n**Hybrid Chunking Workflow**\n\nThe hybrid approach uses the `HybridChunker` from `docling-core`, which:\n\n1. **Primary Pass**: Chunks based on document structure (sections, headings, lists)\n2. **Secondary Pass**: For oversized structural chunks, applies text-based splitting\n3. **Optimization**: Merges small adjacent chunks when they fit within size limits\n4. **Metadata Merging**: Combines provenance data from merged elements\n\n### Typical Usage Pattern\n\nExample chunking configuration for hybrid strategy:\n\n```\n```\n\nSources: [mkdocs.yml102-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L102-L103) [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35)\n\n## Integration with Retrieval Systems\n\nDocument chunks serve as the input to retrieval systems. The typical integration pattern:\n\n```\n```\n\n**Retrieval-Augmented Generation (RAG) Pipeline**\n\nThe standard RAG integration pattern with Docling chunking:\n\n1. **Document Conversion**: Use `DocumentConverter` to parse source documents\n2. **Chunking**: Apply `HierarchicalChunker` or `HybridChunker` to create semantically meaningful segments\n3. **Embedding**: Generate vector embeddings for each chunk using embedding models\n4. **Indexing**: Store chunks with embeddings in a vector database\n5. **Retrieval**: Query the vector store to find relevant chunks\n6. **Generation**: Pass retrieved chunks as context to an LLM for response generation\n\nSources: [mkdocs.yml107-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L107-L127) [README.md37](https://github.com/docling-project/docling/blob/f7244a43/README.md#L37-L37)\n\n## Framework Integration Examples\n\nDocling's chunking integrates seamlessly with popular AI frameworks:\n\n### Integration Table",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 862,
      "character_count": 3964,
      "created_at": "2025-10-16T17:42:17.766199",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "| Framework      | Chunk Consumer                                        | Example Location                                                                                                             |\n| -------------- | ----------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| **LangChain**  | `Document` objects with `page_content` and `metadata` | [examples/rag\\_langchain.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_langchain.ipynb)       |\n| **LlamaIndex** | `Document` nodes in `VectorStoreIndex`                | [examples/rag\\_llamaindex.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_llamaindex.ipynb)     |\n| **Haystack**   | `Document` objects for `DocumentStore`                | [examples/rag\\_haystack.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_haystack.ipynb)         |\n| **Milvus**     | Text chunks with vector embeddings                    | [examples/rag\\_milvus.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_milvus.ipynb)             |\n| **Weaviate**   | Objects with `text` property                          | [examples/rag\\_weaviate.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_weaviate.ipynb)         |\n| **OpenSearch** | Documents with `text` and `metadata` fields           | [examples/rag\\_opensearch.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_opensearch.ipynb)     |\n| **Qdrant**     | Points with payload containing chunk text             | [examples/retrieval\\_qdrant.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/retrieval_qdrant.ipynb) |\n\nSources: [mkdocs.yml107-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L107-L127)\n\n## Chunking with Metadata Preservation\n\nEach chunk produced by Docling's chunkers includes rich metadata for provenance tracking:\n\n```\n```\n\n**Metadata Fields in Chunks**\n\nEach chunk's metadata enables:\n\n- **Source Attribution**: Trace back to exact location in original document\n- **Context Reconstruction**: Recover document structure around the chunk\n- **Visual Grounding**: Link to bounding boxes for visual highlighting\n- **Hierarchical Navigation**: Understand chunk's position in document outline\n\n### Example Chunk Metadata\n\nA chunk from a PDF document might have metadata like:\n\n```\n```\n\nSources: Based on docling-core chunking API patterns, [mkdocs.yml75-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L75-L103)\n\n## Usage Patterns\n\n### Basic Chunking Example\n\n```\n```\n\n### Advanced Chunking Configuration\n\n```\n```\n\n### Integration with Vector Databases\n\nExample pattern for indexing chunks in a vector database:\n\n```\n```\n\nSources: [mkdocs.yml102-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L102-L127)\n\n## Serialization and Chunking\n\nDocling supports serializing chunks for storage and downstream processing. The relationship between serialization and chunking:\n\n```\n```\n\n**Chunking vs Serialization**\n\n- **Serialization** ([Export Formats](docling-project/docling/8.1-export-formats.md)): Converts entire `DoclingDocument` to a specific format (JSON, Markdown, HTML)\n- **Chunking**: Breaks document into smaller pieces with preserved metadata\n- **Combined Usage**: Often serialize chunks individually for vector database storage\n\nSources: [mkdocs.yml100-103](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L103) [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35)\n\n## Advanced Chunking Examples\n\nFor detailed examples demonstrating chunking in real-world scenarios, refer to:",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 884,
      "character_count": 3831,
      "created_at": "2025-10-16T17:42:17.776975",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "| Example                    | Description                                  | Location                                                                                                                                                             |\n| -------------------------- | -------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Hybrid Chunking**        | Combining structural and text-based chunking | [examples/hybrid\\_chunking.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/hybrid_chunking.ipynb)                                           |\n| **Advanced Chunking**      | Custom chunking strategies and serialization | [examples/advanced\\_chunking\\_and\\_serialization.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/advanced_chunking_and_serialization.ipynb) |\n| **RAG with LangChain**     | Using chunks for retrieval in LangChain      | [examples/rag\\_langchain.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_langchain.ipynb)                                               |\n| **RAG with LlamaIndex**    | Indexing chunks in LlamaIndex                | [examples/rag\\_llamaindex.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_llamaindex.ipynb)                                             |\n| **Milvus Integration**     | Storing chunks in Milvus vector database     | [examples/rag\\_milvus.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_milvus.ipynb)                                                     |\n| **OpenSearch Integration** | Indexing chunks in OpenSearch                | [examples/rag\\_opensearch.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_opensearch.ipynb)                                             |\n\nSources: [mkdocs.yml100-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L127)\n\n## Best Practices\n\n### Chunk Size Selection\n\n- **Small chunks (256-512 tokens)**: Better precision, more retrieval overhead\n- **Medium chunks (512-1024 tokens)**: Balanced approach for most use cases\n- **Large chunks (1024-2048 tokens)**: Better context, may lose precision\n\n### Overlap Configuration\n\n- **No overlap (0 tokens)**: Fastest processing, risk of splitting concepts\n- **Small overlap (50-100 tokens)**: Minimal redundancy, some context preservation\n- **Medium overlap (100-200 tokens)**: Recommended for most scenarios\n- **Large overlap (200+ tokens)**: Maximum context continuity, higher storage cost\n\n### Structure Preservation\n\n- Use `HierarchicalChunker` when document structure is important (research papers, technical docs)\n- Use `HybridChunker` for mixed content (long reports with varying section sizes)\n- Set `merge_peers=True` to combine related small elements (list items, short paragraphs)\n\n### Metadata Utilization\n\n- Always preserve chunk metadata for provenance tracking\n- Use `headings` metadata for context-aware retrieval\n- Leverage `bbox` data for visual grounding in UI applications\n- Store `doc_items` paths for reconstructing document structure\n\nSources: Based on chunking examples in [mkdocs.yml100-127](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml#L100-L127)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 725,
      "character_count": 3505,
      "created_at": "2025-10-16T17:42:17.783207",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 5,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [Document Chunking](#document-chunking.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Chunking in the Docling Workflow](#chunking-in-the-docling-workflow.md)\n- [Chunking Dependencies](#chunking-dependencies.md)\n- [Chunking Strategies](#chunking-strategies.md)\n- [Document Structure-Based Chunking](#document-structure-based-chunking.md)\n- [Chunking Parameters](#chunking-parameters.md)\n- [HierarchicalChunker Implementation](#hierarchicalchunker-implementation.md)\n- [Chunking Process Flow](#chunking-process-flow.md)\n- [Hybrid Chunking](#hybrid-chunking.md)\n- [Typical Usage Pattern](#typical-usage-pattern.md)\n- [Integration with Retrieval Systems](#integration-with-retrieval-systems.md)\n- [Framework Integration Examples](#framework-integration-examples.md)\n- [Integration Table](#integration-table.md)\n- [Chunking with Metadata Preservation](#chunking-with-metadata-preservation.md)\n- [Example Chunk Metadata](#example-chunk-metadata.md)\n- [Usage Patterns](#usage-patterns.md)\n- [Basic Chunking Example](#basic-chunking-example.md)\n- [Advanced Chunking Configuration](#advanced-chunking-configuration.md)\n- [Integration with Vector Databases](#integration-with-vector-databases.md)\n- [Serialization and Chunking](#serialization-and-chunking.md)\n- [Advanced Chunking Examples](#advanced-chunking-examples.md)\n- [Best Practices](#best-practices.md)\n- [Chunk Size Selection](#chunk-size-selection.md)\n- [Overlap Configuration](#overlap-configuration.md)\n- [Structure Preservation](#structure-preservation.md)\n- [Metadata Utilization](#metadata-utilization.md)",
    "metadata": {
      "chunk_id": 6,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 383,
      "character_count": 1568,
      "created_at": "2025-10-16T17:42:17.783402",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 6,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_8.2-document-chunking.md",
      "collection_context": "Docling"
    }
  }
]