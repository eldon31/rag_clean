[
  {
    "text": "Web and Markup Backends | docling-project/docling | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[docling-project/docling](https://github.com/docling-project/docling \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 117,
      "character_count": 424,
      "created_at": "2025-10-16T17:42:16.825584",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [Overview](docling-project/docling/1-overview.md)\n- [Installation](docling-project/docling/1.1-installation.md)\n- [Quick Start](docling-project/docling/1.2-quick-start.md)\n- [Core Architecture](docling-project/docling/2-core-architecture.md)\n- [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md)\n- [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md)\n- [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md)\n- [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md)\n- [Document Backends](docling-project/docling/3-document-backends.md)\n- [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md)\n- [Office Document Backends](docling-project/docling/3.2-office-document-backends.md)\n- [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md)\n- [AI/ML Models](docling-project/docling/4-aiml-models.md)\n- [OCR Models](docling-project/docling/4.1-ocr-models.md)\n- [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md)\n- [Vision Language Models](docling-project/docling/4.3-vision-language-models.md)\n- [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md)\n- [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md)\n- [Enrichment Models](docling-project/docling/4.4-enrichment-models.md)\n- [Processing Pipelines](docling-project/docling/5-processing-pipelines.md)\n- [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md)\n- [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md)\n- [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md)\n- [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md)\n- [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md)\n- [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md)\n- [Command Line Interface](docling-project/docling/6-command-line-interface.md)\n- [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md)\n- [Model Management CLI](docling-project/docling/6.2-model-management-cli.md)\n- [Python SDK](docling-project/docling/7-python-sdk.md)\n- [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md)\n- [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md)\n- [Usage Examples](docling-project/docling/7.3-usage-examples.md)\n- [Output and Integration](docling-project/docling/8-output-and-integration.md)\n- [Export Formats](docling-project/docling/8.1-export-formats.md)\n- [Document Chunking](docling-project/docling/8.2-document-chunking.md)\n- [Framework Integrations](docling-project/docling/8.3-framework-integrations.md)\n- [Development and Testing](docling-project/docling/9-development-and-testing.md)\n- [Testing Framework](docling-project/docling/9.1-testing-framework.md)\n- [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md)\n- [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md)\n- [Deployment](docling-project/docling/10-deployment.md)\n- [Docker Deployment](docling-project/docling/10.1-docker-deployment.md)\n- [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md)\n\nMenu\n\n# Web and Markup Backends\n\nRelevant source files",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 929,
      "character_count": 3422,
      "created_at": "2025-10-16T17:42:16.828082",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py)\n- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py)\n- [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py)\n- [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py)\n- [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py)\n- [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py)\n- [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt)\n- [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json)\n- [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md)\n- [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt)\n- [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json)\n- [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md)\n- [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt)\n- [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json)\n- [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md)\n- [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py)\n\n## Purpose and Scope\n\nThis document covers the document backends for web and markup formats: HTML, Markdown, and AsciiDoc. These backends parse structured text documents and convert them into the unified `DoclingDocument` representation. All three formats share the `SimplePipeline` processing path and produce documents with hierarchical structure, content layers, and rich formatting.\n\nFor PDF document backends, see [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md). For Office document formats, see [Office Document Backends](docling-project/docling/3.2-office-document-backends.md).\n\n## Architecture Overview\n\nWeb and markup backends inherit from `DeclarativeDocumentBackend` and implement format-specific parsing logic. Unlike PDF backends that require complex page-by-page processing, these backends parse the entire document structure in a single pass.\n\n```\n```\n\n**Sources:** [docling/backend/html\\_backend.py183-237](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L183-L237) [docling/document\\_converter.py102-114](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L102-L114) [docling/datamodel/base\\_models.py54-72](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L54-L72)\n\n## Backend Configuration\n\n### Format Options\n\nEach backend is paired with a `FormatOption` that specifies the pipeline class and backend class. All web and markup formats use `SimplePipeline`:",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 999,
      "character_count": 3938,
      "created_at": "2025-10-16T17:42:16.832458",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "| Format   | FormatOption Class     | Backend Class             | Pipeline         |\n| -------- | ---------------------- | ------------------------- | ---------------- |\n| HTML     | `HTMLFormatOption`     | `HTMLDocumentBackend`     | `SimplePipeline` |\n| Markdown | `MarkdownFormatOption` | `MarkdownDocumentBackend` | `SimplePipeline` |\n| AsciiDoc | `AsciiDocFormatOption` | `AsciiDocBackend`         | `SimplePipeline` |\n\n```\n```\n\n**Sources:** [docling/document\\_converter.py102-114](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L102-L114) [docling/document\\_converter.py132-181](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L132-L181)\n\n### MIME Type and Extension Detection\n\nFormat detection uses both MIME types and file extensions to identify document types:\n\n**HTML:**\n\n- MIME types: `text/html`, `application/xhtml+xml`\n- Extensions: `.html`, `.htm`, `.xhtml`\n\n**Markdown:**\n\n- MIME types: `text/markdown`, `text/x-markdown`\n- Extensions: `.md`\n\n**AsciiDoc:**\n\n- MIME types: `text/asciidoc`\n- Extensions: `.adoc`, `.asciidoc`, `.asc`\n\n**Sources:** [docling/datamodel/base\\_models.py83-133](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L83-L133) [docling/datamodel/document.py376-400](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L376-L400)\n\n## HTML Backend\n\nThe `HTMLDocumentBackend` is the most sophisticated web/markup backend, handling complex HTML structures including tables, lists, formatting, hyperlinks, and images.\n\n### Core Implementation\n\n```\n```\n\n**Sources:** [docling/backend/html\\_backend.py183-237](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L183-L237) [docling/backend/html\\_backend.py239-292](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L239-L292)\n\n### Content Layer Management\n\nHTML backend implements a content layer system that distinguishes between document body and furniture (metadata/navigation):\n\n```\n```\n\nThe backend determines content layers as follows:\n\n1. **Initial state:** Content is `ContentLayer.FURNITURE` if no headers exist in the document\n2. **First header transition:** When the first `<h1>`-`<h6>` tag is encountered (excluding headers inside tables), content layer switches to `ContentLayer.BODY`\n3. **Footer handling:** `<footer>` tags temporarily switch back to `ContentLayer.FURNITURE`\n\n**Sources:** [docling/backend/html\\_backend.py276-288](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L276-L288) [docling/backend/html\\_backend.py751-776](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L751-L776)\n\n### Tag Processing Strategy\n\nThe backend uses a block-based buffering strategy to handle mixed inline and block-level HTML elements:\n\n**Block Tags** (create distinct DocItem boundaries):\n\n- `address`, `details`, `figure`, `footer`\n- `h1` through `h6`\n- `ol`, `ul`, `p`, `pre`, `summary`, `table`\n\n**Format Tags** (apply inline formatting):\n\n- `b`, `strong` → bold\n- `i`, `em`, `var` → italic\n- `s`, `del` → strikethrough\n- `u`, `ins` → underline\n- `sub` → subscript\n- `sup` → superscript\n- `code`, `kbd`, `samp` → code formatting\n\n```\n```\n\n**Sources:** [docling/backend/html\\_backend.py467-559](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L467-L559) [docling/backend/html\\_backend.py40-77](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L40-L77)\n\n### List Handling\n\nThe backend tracks list context to properly number ordered lists and handle nested structures:\n\n```\n```\n\nThe `_Context` class maintains:\n\n- `list_ordered_flag_by_ref`: Tracks whether each list is ordered\n- `list_start_by_ref`: Tracks the starting number for ordered lists",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 995,
      "character_count": 3923,
      "created_at": "2025-10-16T17:42:16.841490",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "**Sources:** [docling/backend/html\\_backend.py80-83](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L80-L83) [docling/backend/html\\_backend.py913-1014](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L913-L1014)\n\n### Table Processing\n\nHTML tables are converted to `TableItem` objects with support for both simple and rich cells:\n\n```\n```\n\n**Rich Table Cells** are created when:\n\n- A cell contains multiple document items (e.g., multiple paragraphs)\n- A cell contains non-text items (e.g., images, nested lists)\n\nThe backend creates a `GroupItem` to contain all child elements and references this group from the `RichTableCell`.\n\n**Sources:** [docling/backend/html\\_backend.py1016-1132](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L1016-L1132) [docling/backend/html\\_backend.py294-349](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L294-L349) [docling/backend/html\\_backend.py351-465](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L351-L465)\n\n### Formatting and Hyperlinks\n\nThe backend tracks formatting and hyperlink context as it recursively walks the DOM tree:\n\n**Formatting Stack:**\n\n- Uses `self.format_tags: list[str]` to maintain active formatting\n- Format tags are pushed/popped using context managers\n- Combined into `Formatting` objects when creating text items\n\n**Hyperlink Context:**\n\n- Uses `self.hyperlink: Union[AnyUrl, Path, None]` to track current link\n- Handles relative URLs by joining with `original_url`\n- Falls back to `Path` for relative links that fail URL validation\n\n**Text Annotation Classes:**\n\n```\n```\n\n**Sources:** [docling/backend/html\\_backend.py85-181](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L85-L181) [docling/backend/html\\_backend.py573-580](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L573-L580) [docling/backend/html\\_backend.py662-684](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L662-L684)\n\n### Image Handling\n\nImages are extracted from `<img>` tags and added as `PictureItem` objects:\n\n```\n```\n\n**Sources:** [docling/backend/html\\_backend.py1134-1218](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L1134-L1218)\n\n### Heading Hierarchy\n\nThe backend manages document hierarchy based on heading levels:\n\n1. `<h1>` tags create level-1 `SectionHeaderItem` and reset parent hierarchy\n2. `<h2>` through `<h6>` tags create nested section headers\n3. The `self.level` counter tracks current hierarchy depth\n4. The `self.parents` dictionary maintains parent references at each level\n\n```\n```\n\n**Sources:** [docling/backend/html\\_backend.py778-839](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L778-L839) [docling/backend/html\\_backend.py196-201](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L196-L201)\n\n## Markdown and AsciiDoc Backends\n\nThe Markdown and AsciiDoc backends follow similar patterns to the HTML backend but with format-specific parsers:\n\n**MarkdownDocumentBackend:**\n\n- Uses `marko` library for Markdown parsing\n- Converts Markdown AST to DoclingDocument structure\n- Handles CommonMark and extensions\n\n**AsciiDocBackend:**\n\n- Parses AsciiDoc markup format\n- Converts AsciiDoc structure to DoclingDocument\n- Preserves document structure and formatting\n\nBoth backends:\n\n- Inherit from `DeclarativeDocumentBackend`\n- Use `SimplePipeline` for processing\n- Produce `DoclingDocument` output with hierarchical structure\n- Support the same content layer system (BODY/FURNITURE)\n\n**Sources:** [docling/document\\_converter.py92-99](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L92-L99) [docling/document\\_converter.py146-160](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L146-L160)\n\n## Integration with SimplePipeline",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 1011,
      "character_count": 4117,
      "created_at": "2025-10-16T17:42:16.850637",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "All web and markup backends use `SimplePipeline`, which provides:\n\n1. **Direct conversion:** Calls `backend.convert()` to get `DoclingDocument`\n2. **Optional enrichment:** Can apply picture classification and description models\n3. **No page-level processing:** Unlike PDF pipelines, processes entire document at once\n\n```\n```\n\n**Configuration via CLI:**\n\n```\n```\n\n**Sources:** [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) [docling/cli/main.py670-697](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L670-L697)\n\n## Testing and Ground Truth\n\nThe test suite validates HTML backend functionality with multiple test cases:\n\n**Test Coverage:**\n\n- Heading level processing\n- Ordered/unordered lists with start attributes\n- Unicode character handling\n- Hyperlink extraction (including parent context)\n- Furniture vs body content layers\n- End-to-end conversions with ground truth validation\n\n**Ground Truth Structure:**\n\n- JSON files contain full `DoclingDocument` serialization\n- Markdown files contain exported markdown for comparison\n- `.itxt` files contain indented text representation for hierarchy validation\n\n**Sources:** [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py) [tests/data/groundtruth/docling\\_v2/](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [Web and Markup Backends](#web-and-markup-backends.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Architecture Overview](#architecture-overview.md)\n- [Backend Configuration](#backend-configuration.md)\n- [Format Options](#format-options.md)\n- [MIME Type and Extension Detection](#mime-type-and-extension-detection.md)\n- [HTML Backend](#html-backend.md)\n- [Core Implementation](#core-implementation.md)\n- [Content Layer Management](#content-layer-management.md)\n- [Tag Processing Strategy](#tag-processing-strategy.md)\n- [List Handling](#list-handling.md)\n- [Table Processing](#table-processing.md)\n- [Formatting and Hyperlinks](#formatting-and-hyperlinks.md)\n- [Image Handling](#image-handling.md)\n- [Heading Hierarchy](#heading-hierarchy.md)\n- [Markdown and AsciiDoc Backends](#markdown-and-asciidoc-backends.md)\n- [Integration with SimplePipeline](#integration-with-simplepipeline.md)\n- [Testing and Ground Truth](#testing-and-ground-truth.md)",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 594,
      "character_count": 2554,
      "created_at": "2025-10-16T17:42:16.853025",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 5,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_3.3-web-and-markup-backends.md",
      "collection_context": "Docling"
    }
  }
]