[
  {
    "text": "Python SDK | docling-project/docling | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[docling-project/docling](https://github.com/docling-project/docling \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 114,
      "character_count": 411,
      "created_at": "2025-10-16T17:42:17.538904",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [Overview](docling-project/docling/1-overview.md)\n- [Installation](docling-project/docling/1.1-installation.md)\n- [Quick Start](docling-project/docling/1.2-quick-start.md)\n- [Core Architecture](docling-project/docling/2-core-architecture.md)\n- [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md)\n- [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md)\n- [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md)\n- [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md)\n- [Document Backends](docling-project/docling/3-document-backends.md)\n- [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md)\n- [Office Document Backends](docling-project/docling/3.2-office-document-backends.md)\n- [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md)\n- [AI/ML Models](docling-project/docling/4-aiml-models.md)\n- [OCR Models](docling-project/docling/4.1-ocr-models.md)\n- [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md)\n- [Vision Language Models](docling-project/docling/4.3-vision-language-models.md)\n- [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md)\n- [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md)\n- [Enrichment Models](docling-project/docling/4.4-enrichment-models.md)\n- [Processing Pipelines](docling-project/docling/5-processing-pipelines.md)\n- [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md)\n- [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md)\n- [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md)\n- [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md)\n- [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md)\n- [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md)\n- [Command Line Interface](docling-project/docling/6-command-line-interface.md)\n- [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md)\n- [Model Management CLI](docling-project/docling/6.2-model-management-cli.md)\n- [Python SDK](docling-project/docling/7-python-sdk.md)\n- [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md)\n- [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md)\n- [Usage Examples](docling-project/docling/7.3-usage-examples.md)\n- [Output and Integration](docling-project/docling/8-output-and-integration.md)\n- [Export Formats](docling-project/docling/8.1-export-formats.md)\n- [Document Chunking](docling-project/docling/8.2-document-chunking.md)\n- [Framework Integrations](docling-project/docling/8.3-framework-integrations.md)\n- [Development and Testing](docling-project/docling/9-development-and-testing.md)\n- [Testing Framework](docling-project/docling/9.1-testing-framework.md)\n- [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md)\n- [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md)\n- [Deployment](docling-project/docling/10-deployment.md)\n- [Docker Deployment](docling-project/docling/10.1-docker-deployment.md)\n- [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md)\n\nMenu\n\n# Python SDK\n\nRelevant source files",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 926,
      "character_count": 3409,
      "created_at": "2025-10-16T17:42:17.540809",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md)\n- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py)\n- [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py)\n- [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py)\n- [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py)\n- [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py)\n- [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py)\n- [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md)\n- [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md)\n- [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md)\n- [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md)\n- [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml)\n\nThe Python SDK provides programmatic interfaces for document processing through Docling's document AI capabilities. The SDK exposes two primary classes for different use cases:\n\n- **`DocumentConverter`**: Converts documents to the unified `DoclingDocument` format with comprehensive structure and content extraction\n- **`DocumentExtractor`**: Performs structured data extraction from documents using schema-based templates\n\nThis page provides an overview of both APIs and common integration patterns. For detailed documentation, see:\n\n- [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - Full conversion API reference\n- [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - Structured extraction API reference\n- [Usage Examples](docling-project/docling/7.3-usage-examples.md) - Code examples and integration patterns\n\nFor command-line usage, see [Command Line Interface](docling-project/docling/6-command-line-interface.md).\n\n## DocumentConverter Overview\n\nThe `DocumentConverter` class is the primary interface for converting documents into the unified `DoclingDocument` format. It handles format detection, backend initialization, and pipeline orchestration automatically.\n\n**Basic Usage:**\n\n```\n```\n\n**Key Capabilities:**\n\n```\n```\n\n**Core Methods:**\n\n| Method                            | Purpose                                           | Returns                      |\n| --------------------------------- | ------------------------------------------------- | ---------------------------- |\n| `convert(source)`                 | Convert single document from path, URL, or stream | `ConversionResult`           |\n| `convert_all(sources)`            | Convert multiple documents with streaming results | `Iterator[ConversionResult]` |\n| `convert_string(content, format)` | Convert in-memory string content (HTML, Markdown) | `ConversionResult`           |\n| `initialize_pipeline(format)`     | Pre-load pipeline for specified format            | None                         |\n\nThe `ConversionResult` object contains:\n\n- `document`: The converted `DoclingDocument`\n- `status`: Success/failure status (`ConversionStatus`)\n- `errors`: List of errors if any occurred (`List[ErrorItem]`)\n- `pages`: Raw page-level data (`List[Page]`)\n- `timings`: Performance profiling data\n\nSee [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) for detailed documentation of configuration options, error handling, and advanced usage patterns.\n\nSources: [docling/document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L433)\n\n## DocumentExtractor Overview\n\nThe `DocumentExtractor` class provides structured data extraction from documents using schema-based templates. It uses vision-language models (VLMs) to extract specific fields according to user-defined schemas.\n\n**Basic Usage:**\n\n```\n```\n\n**Template Types:**\n\nThe extractor supports three template formats:\n\n```\n```\n\n1. **String Template**: Natural language description of desired extraction\n2. **Dictionary Template**: Key-value pairs with field names and descriptions\n3. **Pydantic Model**: Strongly-typed schema with validation\n\n**Extraction Result:**\n\nThe `ExtractionResult` contains:",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 1010,
      "character_count": 4608,
      "created_at": "2025-10-16T17:42:17.551041",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "- `data`: Extracted structured data matching the template schema\n- `confidence`: Model confidence score for the extraction\n- `source`: Original source document information\n\n**Use Cases:**\n\n- Metadata extraction (titles, authors, dates)\n- Form data extraction\n- Invoice/receipt parsing\n- Scientific paper metadata\n- Custom field extraction from any document type\n\nSee [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) for detailed documentation including template design, model configuration, and advanced extraction patterns.\n\nSources: [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) [docling/datamodel/pipeline\\_options.py328-332](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L328-L332)\n\n## Configuration and Integration Patterns\n\nBoth `DocumentConverter` and `DocumentExtractor` share common configuration patterns through `FormatOption` classes that map input formats to processing pipelines.\n\n**Format Configuration:**\n\n```\n```\n\n**Supported Format Configurations:**\n\n| FormatOption             | InputFormat | Backend                         | Default Pipeline      |\n| ------------------------ | ----------- | ------------------------------- | --------------------- |\n| `PdfFormatOption`        | PDF         | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` |\n| `ImageFormatOption`      | IMAGE       | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` |\n| `WordFormatOption`       | DOCX        | `MsWordDocumentBackend`         | `SimplePipeline`      |\n| `ExcelFormatOption`      | XLSX        | `MsExcelDocumentBackend`        | `SimplePipeline`      |\n| `PowerpointFormatOption` | PPTX        | `MsPowerpointDocumentBackend`   | `SimplePipeline`      |\n| `HTMLFormatOption`       | HTML        | `HTMLDocumentBackend`           | `SimplePipeline`      |\n| `MarkdownFormatOption`   | MD          | `MarkdownDocumentBackend`       | `SimplePipeline`      |\n| `AudioFormatOption`      | AUDIO       | `NoOpBackend`                   | `AsrPipeline`         |\n\n**Common Configuration Pattern:**\n\n```\n```\n\nSources: [docling/document\\_converter.py62-182](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L62-L182) [docling/datamodel/pipeline\\_options.py273-384](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L273-L384)\n\n## Integration with AI Frameworks\n\nThe SDK's `DoclingDocument` output integrates seamlessly with popular AI frameworks and RAG pipelines.\n\n**Framework Integration Pattern:**\n\n```\n```\n\n**LangChain Integration:**\n\n```\n```\n\n**LlamaIndex Integration:**\n\n```\n```\n\n**Document Chunking:**\n\nDocling provides specialized chunkers for optimal RAG performance:\n\n- `HybridChunker`: Combines semantic and structural chunking\n- `MetaChunker`: Preserves metadata and hierarchical structure\n- `DocChunks`: Native chunk representation with provenance\n\nSee [Chunking](docling-project/docling/8.2-document-chunking.md) for detailed chunking strategies and [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) for specific framework examples.\n\nSources: [docling\\_core.transforms.chunker](https://github.com/docling-project/docling/blob/f7244a43/docling_core.transforms.chunker) [examples/rag\\_langchain.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_langchain.ipynb) [examples/rag\\_llamaindex.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_llamaindex.ipynb)\n\n## Input Handling and Validation\n\nBoth APIs support multiple input types and provide comprehensive validation for reliable processing.\n\n**Supported Input Types:**\n\n```\n```\n\n**Format Detection:**\n\nThe SDK automatically detects document formats using:\n\n1. MIME type detection (`filetype.guess_mime()`)\n2. File extension analysis\n3. Content inspection for ambiguous formats\n4. Special handling for compressed archives (METS, etc.)\n\n**Validation Configuration:**\n\n```\n```\n\n**DocumentStream for In-Memory Processing:**\n\n```\n```",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 950,
      "character_count": 4154,
      "created_at": "2025-10-16T17:42:17.564832",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "collection_context": "Docling"
    }
  },
  {
    "text": "Sources: [docling/datamodel/document.py236-490](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L236-L490) [docling/datamodel/base\\_models.py16](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L16-L16)\n\n## Performance and Caching\n\nThe SDK implements intelligent caching and batch processing for optimal performance.\n\n**Pipeline Caching:**\n\n```\n```\n\n**Key Caching Features:**\n\n- Pipelines cached by `(pipeline_class, options_hash)` tuple\n- Thread-safe initialization with `_PIPELINE_CACHE_LOCK`\n- Shared across multiple documents with same configuration\n- Automatic model loading and reuse\n\n**Batch Processing:**\n\n```\n```\n\n**Performance Settings:**\n\nThe SDK respects global performance settings from `settings.perf`:\n\n- `doc_batch_size`: Number of documents per batch\n- `doc_batch_concurrency`: Parallel document processing threads\n- `page_batch_size`: Pages processed per batch in pipelines\n\nSources: [docling/document\\_converter.py203-379](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L203-L379) [docling/datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/settings.py#LNaN-LNaN)\n\n## Configuration Validation and Limits\n\nThe SDK provides comprehensive validation through `DocumentLimits` to prevent resource exhaustion and ensure predictable processing behavior.\n\n**DocumentLimits Configuration:**\n\n- `max_file_size`: Maximum file size in bytes\n- `max_num_pages`: Maximum pages for paginated documents\n- `page_range`: Tuple specifying page range to process\n\n**Validation Points:**\n\n1. **File size check**: Before document parsing\n2. **Page count check**: After backend initialization\n3. **Page range validation**: Ensures valid range specification\n4. **Format validation**: Against allowed formats list\n\n```\n```\n\nSources: [docling/datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/settings.py#LNaN-LNaN) [docling/datamodel/document.py108-168](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L108-L168)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [Python SDK](#python-sdk.md)\n- [DocumentConverter Overview](#documentconverter-overview.md)\n- [DocumentExtractor Overview](#documentextractor-overview.md)\n- [Configuration and Integration Patterns](#configuration-and-integration-patterns.md)\n- [Integration with AI Frameworks](#integration-with-ai-frameworks.md)\n- [Input Handling and Validation](#input-handling-and-validation.md)\n- [Performance and Caching](#performance-and-caching.md)\n- [Configuration Validation and Limits](#configuration-validation-and-limits.md)",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "input_type": "docling",
      "chunking_strategy": "hybrid_adaptive",
      "token_count": 632,
      "character_count": 2799,
      "created_at": "2025-10-16T17:42:17.569177",
      "parent_context": null,
      "semantic_type": "docling",
      "collection_name": "Docling",
      "subfolder_name": null,
      "collection_strategy": "hybrid_adaptive",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\Docling\\_docling-project_docling_7-python-sdk.md",
      "collection_context": "Docling"
    }
  }
]