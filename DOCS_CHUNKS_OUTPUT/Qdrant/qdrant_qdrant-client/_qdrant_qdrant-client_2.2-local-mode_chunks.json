[
  {
    "text": "Local Mode | qdrant/qdrant-client | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant-client](https://github.com/qdrant/qdrant-client \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 9 July 2025 ([ac6f6c](https://github.com/qdrant/qdrant-client/commits/ac6f6cd2))\n\n- [Overview](qdrant/qdrant-client/1-overview.md)\n- [Client Architecture](qdrant/qdrant-client/2-client-architecture.md)\n- [Client Interface](qdrant/qdrant-client/2.1-client-interface.md)\n- [Local Mode](qdrant/qdrant-client/2.2-local-mode.md)\n- [Remote Mode](qdrant/qdrant-client/2.3-remote-mode.md)\n- [Protocol Handling](qdrant/qdrant-client/2.4-protocol-handling.md)\n- [Core Operations](qdrant/qdrant-client/3-core-operations.md)\n- [Search Operations](qdrant/qdrant-client/3.1-search-operations.md)\n- [Collection Management](qdrant/qdrant-client/3.2-collection-management.md)\n- [Point Operations](qdrant/qdrant-client/3.3-point-operations.md)\n- [Advanced Features](qdrant/qdrant-client/4-advanced-features.md)\n- [FastEmbed Integration](qdrant/qdrant-client/4.1-fastembed-integration.md)\n- [Batch Operations](qdrant/qdrant-client/4.2-batch-operations.md)\n- [Hybrid Search](qdrant/qdrant-client/4.3-hybrid-search.md)\n- [Local Inference](qdrant/qdrant-client/4.4-local-inference.md)\n- [Implementation Details](qdrant/qdrant-client/5-implementation-details.md)\n- [Payload Filtering](qdrant/qdrant-client/5.1-payload-filtering.md)\n- [Type Inspector System](qdrant/qdrant-client/5.2-type-inspector-system.md)\n- [Expression Evaluation](qdrant/qdrant-client/5.3-expression-evaluation.md)\n- [Development & Testing](qdrant/qdrant-client/6-development-and-testing.md)\n- [Project Setup](qdrant/qdrant-client/6.1-project-setup.md)\n- [Testing Framework](qdrant/qdrant-client/6.2-testing-framework.md)\n- [Documentation System](qdrant/qdrant-client/6.3-documentation-system.md)\n\nMenu\n\n# Local Mode\n\nRelevant source files\n\n- [qdrant\\_client/local/async\\_qdrant\\_local.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/async_qdrant_local.py)\n- [qdrant\\_client/local/local\\_collection.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py)\n- [qdrant\\_client/local/qdrant\\_local.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py)\n- [tests/congruence\\_tests/test\\_common.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/tests/congruence_tests/test_common.py)\n- [tests/congruence\\_tests/test\\_query.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/tests/congruence_tests/test_query.py)\n\nLocal Mode provides an in-process implementation of Qdrant functionality through the `QdrantLocal` and `AsyncQdrantLocal` classes. This mode operates entirely within your application process using the `LocalCollection` class for vector storage and search operations. Data can be stored in-memory or persisted to disk using SQLite-based storage.\n\nLocal Mode is designed for development, testing, and small-scale applications where deploying a separate Qdrant server is unnecessary. For production deployments with larger datasets, see [Remote Mode](qdrant/qdrant-client/2.3-remote-mode.md).\n\n## Architecture Overview\n\n**Local Mode Class Hierarchy**\n\n```\n```",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 959,
      "character_count": 3353,
      "created_at": "2025-10-16T17:42:32.303406",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant-client",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "collection_context": "Qdrant/qdrant_qdrant-client"
    }
  },
  {
    "text": "Sources: [qdrant\\_client/local/qdrant\\_local.py38-67](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L38-L67) [qdrant\\_client/local/async\\_qdrant\\_local.py38-67](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/async_qdrant_local.py#L38-L67) [qdrant\\_client/local/local\\_collection.py93-148](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L93-L148)\n\n## Initialization\n\nLocal Mode initialization creates either `QdrantLocal` or `AsyncQdrantLocal` instances based on the provided location parameter:\n\n**QdrantLocal Constructor**\n\n```\n```\n\n**Storage Modes:**\n\n- **In-memory**: `location=\":memory:\"` - Data exists only during application lifetime\n- **Persistent**: `location=\"path/to/directory\"` - Data persisted to disk with SQLite storage\n\n**Initialization Process:**\n\n1. Set `persistent = location != \":memory:\"`\n2. Initialize empty collections dictionary: `self.collections: dict[str, LocalCollection] = {}`\n3. If persistent, load metadata from `meta.json` and create `LocalCollection` instances\n4. Acquire file lock to prevent concurrent access\n5. Load existing vector data into memory\n\nSources: [qdrant\\_client/local/qdrant\\_local.py51-67](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L51-L67) [qdrant\\_client/local/qdrant\\_local.py94-141](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L94-L141)\n\n## Storage Architecture\n\n**QdrantLocal Data Structures**\n\n```\n```\n\n**LocalCollection Vector Storage:**\n\n- `vectors: dict[str, NumpyArray]` - Dense vectors indexed by name\n- `sparse_vectors: dict[str, list[SparseVector]]` - Sparse vectors with indices/values\n- `multivectors: dict[str, list[NumpyArray]]` - Multi-vector collections\n- `payload: list[models.Payload]` - Point payloads indexed by internal ID\n- `ids: dict[ExtendedPointId, int]` - External ID to internal index mapping\n- `deleted: NumpyArray` - Boolean array tracking deleted points\n\nSources: [qdrant\\_client/local/qdrant\\_local.py51-67](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L51-L67) [qdrant\\_client/local/local\\_collection.py100-148](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L100-L148)\n\n## Vector Storage Implementation\n\n**LocalCollection Vector Type Resolution**\n\n```\n```\n\n**Vector Storage Details:**\n\n- **Dense vectors**: `np.zeros((0, params.size), dtype=np.float32)` initialized per vector name\n- **Sparse vectors**: `list[SparseVector]` with `indices` and `values` arrays\n- **Multivectors**: `list[NumpyArray]` where each point can have multiple vectors\n- **Deleted tracking**: `deleted_per_vector: dict[str, NumpyArray]` tracks deletions per vector type\n\n**Vector Name Resolution:**\n\n- `DEFAULT_VECTOR_NAME = \"\"` used for anonymous vectors\n- `_all_vectors_keys` combines all vector type names for unified access\n\nSources: [qdrant\\_client/local/local\\_collection.py112-140](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L112-L140) [qdrant\\_client/local/local\\_collection.py150-169](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L150-L169) [qdrant\\_client/local/local\\_collection.py81](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L81-L81)\n\n## Storage Persistence\n\n**File-based Persistence Architecture**\n\n```\n```\n\n**Persistence Components:**",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 970,
      "character_count": 3563,
      "created_at": "2025-10-16T17:42:32.311125",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant-client",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "collection_context": "Qdrant/qdrant_qdrant-client"
    }
  },
  {
    "text": "- **meta.json**: Contains collection configurations and aliases\n- **Collection directories**: `{location}/collection/{collection_name}/`\n- **File locking**: Uses `portalocker` with `EXCLUSIVE|NON_BLOCKING` flags\n- **CollectionPersistence**: Handles SQLite-based storage per collection\n\n**Lock File Management:**\n\n```\n```\n\nSources: [qdrant\\_client/local/qdrant\\_local.py94-141](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L94-L141) [qdrant\\_client/local/local\\_collection.py143-148](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L143-L148) [qdrant\\_client/local/local\\_collection.py204-280](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L204-L280)\n\n**Data Loading Process:**\n\n1. `_load()` reads `meta.json` and creates collections\n2. `load_vectors()` populates in-memory data structures from disk\n3. Vector data organized by type: dense, sparse, and multivectors\n4. Payload and ID mappings loaded into list and dictionary structures\n\n## Performance Considerations\n\n**Size Thresholds:**\n\n- `LARGE_DATA_THRESHOLD = 20_000` points triggers performance warnings\n- `LocalCollection.LARGE_DATA_THRESHOLD = 20_000` used for collection-level warnings\n\n**Warning Implementation:**\n\n```\n```\n\n**Performance Characteristics:**\n\n- All data stored in memory for fast access\n- No indexing structures (HNSW, etc.) - uses brute force search\n- Suitable for development, testing, and small datasets\n- Payload filtering uses `calculate_payload_mask()` for each query\n\nSources: [qdrant\\_client/local/qdrant\\_local.py49](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L49-L49) [qdrant\\_client/local/qdrant\\_local.py114-123](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L114-L123) [qdrant\\_client/local/local\\_collection.py98](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L98-L98)\n\n## Search and Retrieval\n\n**LocalCollection Search Implementation**\n\n```\n```\n\n**Search Method Signature:**\n\n```\n```\n\n**Query Processing Flow:**\n\n1. `_resolve_query_vector_name()` determines vector type and name\n2. Distance calculation based on vector type (dense/sparse/multi)\n3. `_payload_and_non_deleted_mask()` applies filters\n4. Results sorted by score and limited\n5. `ScoredPoint` objects constructed with payload and vectors\n\nSources: [qdrant\\_client/local/local\\_collection.py533-701](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L533-L701) [qdrant\\_client/local/local\\_collection.py282-332](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L282-L332) [qdrant\\_client/local/local\\_collection.py499-523](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/local_collection.py#L499-L523)\n\n## Feature Parity with Remote Mode\n\n**Implemented Operations in QdrantLocal:**",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 796,
      "character_count": 3024,
      "created_at": "2025-10-16T17:42:32.317002",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant-client",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "collection_context": "Qdrant/qdrant_qdrant-client"
    }
  },
  {
    "text": "| Operation Category    | Methods                                                                                                        | Implementation Status |\n| --------------------- | -------------------------------------------------------------------------------------------------------------- | --------------------- |\n| Collection Management | `create_collection()`, `delete_collection()`, `get_collection()`, `collection_exists()`, `update_collection()` | ✅ Full                |\n| Point Operations      | `upsert()`, `delete()`, `retrieve()`, `update_vectors()`, `delete_vectors()`                                   | ✅ Full                |\n| Search Operations     | `search()`, `search_batch()`, `search_groups()`, `search_matrix_*()`                                           | ✅ Full                |\n| Advanced Search       | `query_points()`, `query_batch_points()`, `query_points_groups()`                                              | ✅ Full                |\n| Recommendation        | `recommend()`, `recommend_batch()`, `recommend_groups()`                                                       | ✅ Full                |\n| Discovery             | `discover()`, `discover_batch()`                                                                               | ✅ Full                |\n| Payload Operations    | `set_payload()`, `overwrite_payload()`, `delete_payload()`, `clear_payload()`                                  | ✅ Full                |\n| Aliases               | `update_collection_aliases()`, `get_aliases()`, `get_collection_aliases()`                                     | ✅ Full                |\n| Pagination            | `scroll()`, `count()`, `facet()`                                                                               | ✅ Full                |\n| Batch Operations      | `batch_update_points()`                                                                                        | ✅ Full                |\n\n**Unsupported Operations:**\n\n- Payload indexes: `create_payload_index()`, `delete_payload_index()` (warnings only)\n- Snapshots: All snapshot operations raise `NotImplementedError`\n- Sharding: `create_shard_key()`, `delete_shard_key()` raise `NotImplementedError`\n- Locks: `lock_storage()`, `unlock_storage()` raise `NotImplementedError`\n\n**Congruence Testing:** Tests in `test_query.py` verify identical behavior between local and remote modes using `compare_client_results()` function.\n\nSources: [qdrant\\_client/local/qdrant\\_local.py773-1165](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L773-L1165) [tests/congruence\\_tests/test\\_query.py804-826](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/tests/congruence_tests/test_query.py#L804-L826)\n\n## Concurrency and Threading\n\n**File Locking Mechanism:**\n\n```\n```\n\n**SQLite Thread Safety:**\n\n- Default: SQLite connections use `check_same_thread=True`\n- Override: `force_disable_check_same_thread=True` parameter\n- Passed to: `CollectionPersistence(location, force_disable_check_same_thread)`\n\n**Concurrency Limitations:**\n\n- **Process-level**: File locking prevents multiple processes from accessing same directory\n- **Thread-level**: Single SQLite connection per collection, optional thread check bypass\n- **Recommended**: Use Qdrant server for multi-user/multi-process scenarios\n\n**Error Handling:**\n\n```\n```\n\nSources: [qdrant\\_client/local/qdrant\\_local.py126-141](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L126-L141) [qdrant\\_client/local/qdrant\\_local.py51-67](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L51-L67)\n\n## Async Implementation\n\n**AsyncQdrantLocal Class:**\n\n```\n```\n\n**Async vs Sync Implementation:**\n\n- **Shared**: Both use the same `LocalCollection` class for actual operations\n- **Difference**: Async methods have `async def` signatures and `await` keywords\n- **Persistence**: Same file locking and SQLite mechanisms\n- **Performance**: No actual async I/O benefits since operations are in-memory\n\n**Method Signatures:**\n\n```\n```\n\n**Usage Pattern:**\n\n```\n```\n\nSources: [qdrant\\_client/local/async\\_qdrant\\_local.py38-67](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/async_qdrant_local.py#L38-L67) [qdrant\\_client/local/async\\_qdrant\\_local.py179-207](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/async_qdrant_local.py#L179-L207)\n\n## When to Use Local Mode vs Remote Mode",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 963,
      "character_count": 4498,
      "created_at": "2025-10-16T17:42:32.328999",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant-client",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "collection_context": "Qdrant/qdrant_qdrant-client"
    }
  },
  {
    "text": "| Scenario                          | Recommended Mode |\n| --------------------------------- | ---------------- |\n| Development & testing             | Local Mode       |\n| Small applications (<20K vectors) | Local Mode       |\n| Embedded applications             | Local Mode       |\n| Production systems                | Remote Mode      |\n| Large datasets                    | Remote Mode      |\n| Multi-user access                 | Remote Mode      |\n| High query throughput             | Remote Mode      |\n\nSources: [qdrant\\_client/local/qdrant\\_local.py38-47](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py#L38-L47)\n\n## Conclusion\n\nLocal Mode provides a convenient way to use Qdrant's vector search capabilities without deploying a separate server. It's ideal for development, testing, and small-scale applications. The API is designed to be compatible with Remote Mode, allowing for easy migration when scaling up.\n\nFor larger datasets, higher throughput requirements, or multi-user scenarios, it's recommended to switch to a full Qdrant server deployment as described in [Remote Mode](qdrant/qdrant-client/2.3-remote-mode.md).\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Local Mode](#local-mode.md)\n- [Architecture Overview](#architecture-overview.md)\n- [Initialization](#initialization.md)\n- [Storage Architecture](#storage-architecture.md)\n- [Vector Storage Implementation](#vector-storage-implementation.md)\n- [Storage Persistence](#storage-persistence.md)\n- [Performance Considerations](#performance-considerations.md)\n- [Search and Retrieval](#search-and-retrieval.md)\n- [Feature Parity with Remote Mode](#feature-parity-with-remote-mode.md)\n- [Concurrency and Threading](#concurrency-and-threading.md)\n- [Async Implementation](#async-implementation.md)\n- [When to Use Local Mode vs Remote Mode](#when-to-use-local-mode-vs-remote-mode.md)\n- [Conclusion](#conclusion.md)",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 427,
      "character_count": 1957,
      "created_at": "2025-10-16T17:42:32.330506",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant-client",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2.2-local-mode.md",
      "collection_context": "Qdrant/qdrant_qdrant-client"
    }
  }
]