[
  {
    "text": "Client Architecture | qdrant/qdrant-client | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant-client](https://github.com/qdrant/qdrant-client \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 9 July 2025 ([ac6f6c](https://github.com/qdrant/qdrant-client/commits/ac6f6cd2))\n\n- [Overview](qdrant/qdrant-client/1-overview.md)\n- [Client Architecture](qdrant/qdrant-client/2-client-architecture.md)\n- [Client Interface](qdrant/qdrant-client/2.1-client-interface.md)\n- [Local Mode](qdrant/qdrant-client/2.2-local-mode.md)\n- [Remote Mode](qdrant/qdrant-client/2.3-remote-mode.md)\n- [Protocol Handling](qdrant/qdrant-client/2.4-protocol-handling.md)\n- [Core Operations](qdrant/qdrant-client/3-core-operations.md)\n- [Search Operations](qdrant/qdrant-client/3.1-search-operations.md)\n- [Collection Management](qdrant/qdrant-client/3.2-collection-management.md)\n- [Point Operations](qdrant/qdrant-client/3.3-point-operations.md)\n- [Advanced Features](qdrant/qdrant-client/4-advanced-features.md)\n- [FastEmbed Integration](qdrant/qdrant-client/4.1-fastembed-integration.md)\n- [Batch Operations](qdrant/qdrant-client/4.2-batch-operations.md)\n- [Hybrid Search](qdrant/qdrant-client/4.3-hybrid-search.md)\n- [Local Inference](qdrant/qdrant-client/4.4-local-inference.md)\n- [Implementation Details](qdrant/qdrant-client/5-implementation-details.md)\n- [Payload Filtering](qdrant/qdrant-client/5.1-payload-filtering.md)\n- [Type Inspector System](qdrant/qdrant-client/5.2-type-inspector-system.md)\n- [Expression Evaluation](qdrant/qdrant-client/5.3-expression-evaluation.md)\n- [Development & Testing](qdrant/qdrant-client/6-development-and-testing.md)\n- [Project Setup](qdrant/qdrant-client/6.1-project-setup.md)\n- [Testing Framework](qdrant/qdrant-client/6.2-testing-framework.md)\n- [Documentation System](qdrant/qdrant-client/6.3-documentation-system.md)\n\nMenu\n\n# Client Architecture\n\nRelevant source files\n\n- [qdrant\\_client/async\\_qdrant\\_client.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/async_qdrant_client.py)\n- [qdrant\\_client/qdrant\\_client.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_client.py)\n\nThis document explains the overall architecture of the qdrant-client Python library, covering the unified client interface and dual backend implementation strategy. The architecture provides a consistent API surface while supporting both local in-process vector storage and remote network-based communication with Qdrant services.\n\nFor information about specific search operations and query processing, see [Search Operations](qdrant/qdrant-client/3.1-search-operations.md). For details about FastEmbed integration and embedding workflows, see [FastEmbed Integration](qdrant/qdrant-client/4.1-fastembed-integration.md).\n\n## Unified Client Interface\n\nThe client architecture centers around two main entry points that provide identical APIs for synchronous and asynchronous operations:\n\n```\n```\n\nThe `QdrantClient` class serves as the primary synchronous interface, while `AsyncQdrantClient` provides the asynchronous equivalent. Both classes inherit from `QdrantFastembedMixin` to enable automatic embedding generation capabilities.\n\n**Sources:** [qdrant\\_client/qdrant\\_client.py27-78](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_client.py#L27-L78) [qdrant\\_client/async\\_qdrant\\_client.py26-77](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/async_qdrant_client.py#L26-L77)\n\n## Backend Selection Logic\n\nThe client architecture implements a parameter-based backend selection system that determines whether to use local or remote implementations:\n\n```\n```",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2-client-architecture.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1023,
      "character_count": 3788,
      "created_at": "2025-10-16T17:42:32.268280",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant-client",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2-client-architecture.md",
      "collection_context": "Qdrant/qdrant_qdrant-client"
    }
  },
  {
    "text": "The selection logic follows these rules:\n\n| Parameter                                 | Backend | Description                   |\n| ----------------------------------------- | ------- | ----------------------------- |\n| `location=\":memory:\"`                     | Local   | In-memory vector database     |\n| `path=\"/some/path\"`                       | Local   | Persistent file-based storage |\n| `url`, `host`, or `location` (non-memory) | Remote  | Network-based communication   |\n\n**Sources:** [qdrant\\_client/qdrant\\_client.py121-153](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_client.py#L121-L153) [qdrant\\_client/async\\_qdrant\\_client.py111-140](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/async_qdrant_client.py#L111-L140)\n\n## Local Backend Implementation\n\nThe local backend provides in-process vector storage and search capabilities through the `QdrantLocal` class:\n\n```\n```\n\nThe local implementation enables:\n\n- **In-memory mode**: Volatile storage for development and testing\n- **Persistent mode**: File-based storage for production deployments\n- **Full vector operations**: Search, CRUD operations, and filtering without network overhead\n- **Thread safety controls**: Configurable via `force_disable_check_same_thread`\n\n**Sources:** [qdrant\\_client/qdrant\\_client.py126-135](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_client.py#L126-L135) [qdrant\\_client/local/qdrant\\_local.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/local/qdrant_local.py)\n\n## Remote Backend Implementation\n\nThe remote backend handles network communication with external Qdrant services through the `QdrantRemote` class:\n\n```\n```\n\nThe remote implementation provides:\n\n- **Dual protocol support**: HTTP/REST (port 6333) and gRPC (port 6334)\n- **Protocol preference**: Configurable via `prefer_grpc` parameter\n- **Authentication**: API key support and token provider callbacks\n- **Connection management**: Timeout configuration and connection pooling\n- **Cloud integration**: Direct support for Qdrant Cloud services\n\n**Sources:** [qdrant\\_client/qdrant\\_client.py139-153](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_client.py#L139-L153) [qdrant\\_client/qdrant\\_remote.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_remote.py)\n\n## Protocol Abstraction Layer\n\nThe client architecture implements a protocol abstraction that allows transparent switching between HTTP/REST and gRPC communication:\n\n```\n```\n\nKey features of the protocol abstraction:\n\n- **Automatic conversion**: Seamless translation between gRPC and REST data structures\n- **Unified types**: Common type system in `conversions.common_types`\n- **Protocol transparency**: Client methods accept both gRPC and REST structures\n- **Performance optimization**: Protocol selection based on operation type and preferences\n\nThe client exposes low-level protocol access through properties:\n\n- `grpc_points` and `grpc_collections`: Direct gRPC stub access\n- `http`/`rest`: Direct REST API client access\n\n**Sources:** [qdrant\\_client/qdrant\\_client.py174-225](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_client.py#L174-L225) [qdrant\\_client/conversions/common\\_types.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/conversions/common_types.py)\n\n## Embedding Integration Architecture\n\nThe client architecture integrates embedding capabilities through the `QdrantFastembedMixin` class:\n\n```\n```\n\nThe embedding integration enables:\n\n- **Automatic detection**: Type inspection for inference objects\n- **Batch processing**: Configurable batch sizes for embedding generation\n- **Dual inference modes**: Local FastEmbed models or cloud-based inference\n- **Seamless integration**: Transparent embedding in query and upsert operations",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2-client-architecture.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 901,
      "character_count": 3885,
      "created_at": "2025-10-16T17:42:32.274035",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant-client",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2-client-architecture.md",
      "collection_context": "Qdrant/qdrant_qdrant-client"
    }
  },
  {
    "text": "**Sources:** [qdrant\\_client/qdrant\\_client.py112-116](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_client.py#L112-L116) [qdrant\\_client/qdrant\\_fastembed.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_fastembed.py) [qdrant\\_client/embed/type\\_inspector.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/embed/type_inspector.py)\n\n## Configuration and Initialization\n\nThe client architecture provides comprehensive configuration through initialization parameters:\n\n| Parameter Category          | Parameters                                      | Purpose                        |\n| --------------------------- | ----------------------------------------------- | ------------------------------ |\n| **Backend Selection**       | `location`, `url`, `host`, `path`               | Choose local vs remote backend |\n| **Network Configuration**   | `port`, `grpc_port`, `https`, `timeout`         | Network connection settings    |\n| **Authentication**          | `api_key`, `auth_token_provider`                | Security credentials           |\n| **Protocol Settings**       | `prefer_grpc`, `prefix`                         | Protocol preferences           |\n| **Embedding Configuration** | `cloud_inference`, `local_inference_batch_size` | Embedding behavior             |\n| **Local Settings**          | `force_disable_check_same_thread`               | Local backend options          |\n\nThe initialization process validates parameter combinations and configures the appropriate backend with proper error handling for invalid configurations.\n\n**Sources:** [qdrant\\_client/qdrant\\_client.py80-161](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/qdrant_client.py#L80-L161) [qdrant\\_client/async\\_qdrant\\_client.py79-146](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/async_qdrant_client.py#L79-L146)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Client Architecture](#client-architecture.md)\n- [Unified Client Interface](#unified-client-interface.md)\n- [Backend Selection Logic](#backend-selection-logic.md)\n- [Local Backend Implementation](#local-backend-implementation.md)\n- [Remote Backend Implementation](#remote-backend-implementation.md)\n- [Protocol Abstraction Layer](#protocol-abstraction-layer.md)\n- [Embedding Integration Architecture](#embedding-integration-architecture.md)\n- [Configuration and Initialization](#configuration-and-initialization.md)",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2-client-architecture.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 561,
      "character_count": 2510,
      "created_at": "2025-10-16T17:42:32.275799",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant-client",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_qdrant-client\\_qdrant_qdrant-client_2-client-architecture.md",
      "collection_context": "Qdrant/qdrant_qdrant-client"
    }
  }
]