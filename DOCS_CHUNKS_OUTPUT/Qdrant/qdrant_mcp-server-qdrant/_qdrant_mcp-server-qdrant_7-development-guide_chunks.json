[
  {
    "text": "Development Guide | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Development Guide\n\nRelevant source files\n\n- [.gitignore](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/.gitignore)\n- [pyproject.toml](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml)\n- [tests/\\_\\_init\\_\\_.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/__init__.py)\n- [tests/test\\_fastembed\\_integration.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py)\n- [tests/test\\_qdrant\\_integration.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py)\n\nThis guide provides essential information for developers who want to contribute to the mcp-server-qdrant project. It covers setting up a development environment, testing procedures, code quality tools, and contribution workflows. For information about using the server as an end-user, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md).\n\n## 1. Development Environment Setup\n\n### 1.1 Prerequisites\n\nBefore beginning development, ensure you have the following prerequisites:\n\n- Python 3.10 or higher\n- Git for version control\n- uv (optional but recommended for dependency management)\n\n### 1.2 Setting Up Your Environment\n\n```\n```\n\nSources: [pyproject.toml1-28](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L1-L28)\n\n## 2. Project Structure\n\nThe codebase follows a modular structure to separate concerns and maintain clean architecture.\n\n```\n```\n\nKey directories and files:\n\n- `mcp_server_qdrant/`: Main package with the server implementation\n- `mcp_server_qdrant/embeddings/`: Embedding providers implementation\n- `tests/`: Test suite for the project\n- `pyproject.toml`: Project configuration and dependencies\n\nSources: [pyproject.toml1-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L1-L37) [tests/\\_\\_init\\_\\_.py1-2](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/__init__.py#L1-L2)\n\n## 3. Testing",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1002,
      "character_count": 3452,
      "created_at": "2025-10-16T17:42:30.722211",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_mcp-server-qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
      "collection_context": "Qdrant/qdrant_mcp-server-qdrant"
    }
  },
  {
    "text": "The project uses pytest with asyncio support for testing. Tests are primarily integration tests that verify the functionality of key components like QdrantConnector and FastEmbedProvider.\n\n### 3.1 Running Tests\n\n```\n```\n\n### 3.2 Test Structure\n\n```\n```\n\n### 3.3 Testing Patterns\n\nThe codebase follows several key testing patterns:\n\n1. **Fixtures for Component Setup**: Test fixtures are used to create isolated instances of components for testing.\n\n```\n   ```\n\n2. **Randomized Collection Names**: Tests use UUIDs to create unique collection names, ensuring tests don't interfere with each other.\n\n3. **In-memory Database**: Tests use Qdrant's in-memory mode (`:memory:`) instead of connecting to a real server.\n\n4. **Asynchronous Testing**: All tests use `@pytest.mark.asyncio` to handle async functions.\n\nSources: [tests/test\\_qdrant\\_integration.py9-32](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L9-L32) [tests/test\\_fastembed\\_integration.py8-16](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py#L8-L16) [pyproject.toml33-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L33-L37)\n\n## 4. Code Quality Tools\n\nThe project uses several tools to maintain code quality:\n\n| Tool       | Purpose                      | Configuration             |\n| ---------- | ---------------------------- | ------------------------- |\n| isort      | Sort imports                 | From `pyproject.toml`     |\n| mypy       | Static type checking         | From `pyproject.toml`     |\n| pyright    | Static type checking         | From `pyproject.toml`     |\n| ruff       | Fast Python linter           | From `pyproject.toml`     |\n| pre-commit | Git hooks to enforce quality | `.pre-commit-config.yaml` |\n\n### 4.1 Running Code Quality Checks\n\n```\n```\n\nSources: [pyproject.toml20-28](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L20-L28)\n\n## 5. Writing Tests\n\nWhen writing new tests for the project, follow these guidelines:\n\n### 5.1 QdrantConnector Testing\n\nQdrantConnector tests should verify:\n\n- Storing entries with various content and metadata\n- Searching for entries with different queries\n- Handling of multiple collections\n- Error handling and edge cases\n\nExample pattern for QdrantConnector test:\n\n```\n```\n\n### 5.2 EmbeddingProvider Testing\n\nEmbeddingProvider tests should verify:\n\n- Successful model initialization\n- Consistent embedding generation\n- Correct vector dimensions\n- Handling of different input types\n\nExample pattern for EmbeddingProvider test:\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.py32-239](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L32-L239) [tests/test\\_fastembed\\_integration.py8-64](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py#L8-L64)\n\n## 6. Contribution Workflow\n\n### 6.1 Git Workflow\n\n```\n```\n\n1. **Fork the Repository**: Create a fork of the main repository\n2. **Create a Feature Branch**: Work on features in isolated branches\n3. **Implement and Test**: Add your changes with appropriate tests\n4. **Submit a Pull Request**: Create a PR against the main repository\n5. **Code Review**: Address feedback from maintainers\n6. **Merge**: Once approved, your changes will be merged\n\n### 6.2 Pull Request Guidelines\n\n- Ensure all tests pass\n- Include new tests for new functionality\n- Maintain or improve code coverage\n- Follow the project's code style\n- Include a clear description of the changes\n\n## 7. Building and Packaging\n\nThe project uses hatchling for building Python packages.\n\n### 7.1 Building the Package\n\n```\n```\n\n### 7.2 Local Installation for Testing\n\n```\n```\n\n### 7.3 Version Management\n\nVersion numbers are defined in `pyproject.toml`. Follow semantic versioning principles:\n\n- MAJOR version for incompatible API changes\n- MINOR version for added functionality in a backward compatible manner\n- PATCH version for backward compatible bug fixes",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 977,
      "character_count": 4026,
      "created_at": "2025-10-16T17:42:30.734991",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_mcp-server-qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
      "collection_context": "Qdrant/qdrant_mcp-server-qdrant"
    }
  },
  {
    "text": "Sources: [pyproject.toml2-3](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L2-L3) [pyproject.toml15-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L15-L17)\n\n## 8. Dependency Management\n\n### 8.1 Runtime Dependencies\n\nThe project uses several key dependencies:\n\n- `mcp[cli]`: Core MCP protocol implementation\n- `fastembed`: Fast embedding generation library\n- `qdrant-client`: Client for interacting with Qdrant vector database\n- `pydantic`: Data validation and settings management\n\n### 8.2 Adding New Dependencies\n\nWhen adding new dependencies:\n\n1. Add them to `pyproject.toml` in the appropriate section\n2. Document the reason for adding the dependency\n3. Consider compatibility with existing dependencies\n4. Update development environments with the new dependency\n\nSources: [pyproject.toml8-13](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L8-L13) [pyproject.toml20-28](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L20-L28)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Development Guide](#development-guide.md)\n- [1. Development Environment Setup](#1-development-environment-setup.md)\n- [1.1 Prerequisites](#11-prerequisites.md)\n- [1.2 Setting Up Your Environment](#12-setting-up-your-environment.md)\n- [2. Project Structure](#2-project-structure.md)\n- [3. Testing](#3-testing.md)\n- [3.1 Running Tests](#31-running-tests.md)\n- [3.2 Test Structure](#32-test-structure.md)\n- [3.3 Testing Patterns](#33-testing-patterns.md)\n- [4. Code Quality Tools](#4-code-quality-tools.md)\n- [4.1 Running Code Quality Checks](#41-running-code-quality-checks.md)\n- [5. Writing Tests](#5-writing-tests.md)\n- [5.1 QdrantConnector Testing](#51-qdrantconnector-testing.md)\n- [5.2 EmbeddingProvider Testing](#52-embeddingprovider-testing.md)\n- [6. Contribution Workflow](#6-contribution-workflow.md)\n- [6.1 Git Workflow](#61-git-workflow.md)\n- [6.2 Pull Request Guidelines](#62-pull-request-guidelines.md)\n- [7. Building and Packaging](#7-building-and-packaging.md)\n- [7.1 Building the Package](#71-building-the-package.md)\n- [7.2 Local Installation for Testing](#72-local-installation-for-testing.md)\n- [7.3 Version Management](#73-version-management.md)\n- [8. Dependency Management](#8-dependency-management.md)\n- [8.1 Runtime Dependencies](#81-runtime-dependencies.md)\n- [8.2 Adding New Dependencies](#82-adding-new-dependencies.md)",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 681,
      "character_count": 2455,
      "created_at": "2025-10-16T17:42:30.736879",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_mcp-server-qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
      "collection_context": "Qdrant/qdrant_mcp-server-qdrant"
    }
  }
]