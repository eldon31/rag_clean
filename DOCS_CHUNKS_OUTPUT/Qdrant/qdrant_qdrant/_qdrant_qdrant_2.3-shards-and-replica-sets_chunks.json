[
  {
    "text": "Shards and Replica Sets | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Shards and Replica Sets\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 954,
      "character_count": 3096,
      "created_at": "2025-10-16T17:42:31.292819",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n\n## Purpose and Scope\n\nThis document describes the `ShardReplicaSet` abstraction, which coordinates replicas of a single shard across multiple peers in a Qdrant cluster. It covers replica state management, write ordering guarantees, local vs remote shard coordination, and consistency mechanisms.\n\nFor information about the internal implementation of local shards (segments, WAL, optimization), see [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md). For information about collection-level shard distribution and routing, see [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md). For information about shard transfer operations and resharding, see [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md).\n\n---\n\n## Core Abstraction\n\n### ShardReplicaSet Structure\n\nThe `ShardReplicaSet` is the primary abstraction for managing a set of replicas for a single shard. It handles both local replicas (hosted on the current peer) and remote replicas (proxies to other peers), ensuring consistency across all replicas.\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs84-119](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L84-L119)\n\nThe `ShardReplicaSet` struct contains:\n\n| Field                    | Type                               | Purpose                                                 |\n| ------------------------ | ---------------------------------- | ------------------------------------------------------- |\n| `local`                  | `RwLock<Option<Shard>>`            | Local shard variant (Local, Dummy, QueueProxy, or None) |\n| `remotes`                | `RwLock<Vec<RemoteShard>>`         | Remote shard proxies to other peers                     |\n| `replica_state`          | `Arc<SaveOnDisk<ReplicaSetState>>` | Persisted replica state for all peers                   |\n| `locally_disabled_peers` | `Registry`                         | Peers marked as failed locally, pending consensus       |\n| `shard_id`               | `ShardId`                          | Unique identifier for this shard                        |\n| `shard_key`              | `Option<ShardKey>`                 | Optional shard key for custom sharding                  |\n| `write_ordering_lock`    | `Mutex<()>`                        | Serialization lock for strong/medium ordering           |\n| `clock_set`              | `Mutex<ClockSet>`                  | Local clock for tagging operations                      |\n| `write_rate_limiter`     | `Option<RateLimiter>`              | Optional rate limiting for strict mode                  |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs90-119](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L90-L119)\n\n### Local vs Remote Shards\n\nThe replica set distinguishes between local and remote shards:\n\n```\n```\n\n**Local Shard Variants:**\n\n- **`Shard::Local(LocalShard)`**: Fully functional local shard with segments, WAL, and indices\n- **`Shard::Dummy(DummyShard)`**: Placeholder when in recovery mode or after load failure\n- **`Shard::QueueProxy`**: Temporary proxy during snapshot creation, queues updates\n\n**Remote Shards:**",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1015,
      "character_count": 4308,
      "created_at": "2025-10-16T17:42:31.299852",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- **`RemoteShard`**: Proxy that forwards operations to other peers via internal gRPC\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs91-92](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L91-L92) [lib/collection/src/shards/replica\\_set/mod.rs400-413](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L400-L413)\n\n---\n\n## Replica State Management\n\n### Replica States\n\nEach replica in a `ShardReplicaSet` has a state that determines how it participates in read and write operations:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs48-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L48-L82)\n\n| State                 | Description                               | Accepts Updates    | Serves Reads |\n| --------------------- | ----------------------------------------- | ------------------ | ------------ |\n| `Active`              | Fully operational replica                 | Yes                | Yes          |\n| `Dead`                | Failed or unavailable replica             | No                 | No           |\n| `Initializing`        | Newly created, not yet activated          | Yes                | No           |\n| `Listener`            | Read-only replica on listener node        | Yes (async)        | Yes          |\n| `Partial`             | Receiving shard transfer (stream records) | Yes                | No           |\n| `Recovery`            | Receiving snapshot/WAL delta transfer     | No (unless forced) | No           |\n| `PartialSnapshot`     | Creating snapshot for transfer            | No (unless forced) | No           |\n| `Resharding`          | Participating in scale-up resharding      | Yes                | Yes          |\n| `ReshardingScaleDown` | Participating in scale-down resharding    | Yes                | Yes          |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs58-103](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L58-L103) [lib/collection/src/shards/replica\\_set/update.rs570-586](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L570-L586)\n\n### ReplicaSetState Persistence\n\nThe `ReplicaSetState` is persisted to disk in `replica_state.json` and contains:\n\n```\n```\n\nThis state is loaded on startup and updated through consensus operations.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs125](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L125-L125) [lib/collection/src/shards/replica\\_set/mod.rs169-182](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L169-L182)\n\n### Locally Disabled Peers\n\nWhen a replica fails an operation, it is immediately marked as \"locally disabled\" to prevent further requests until consensus confirms the state change:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs94-98](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L94-L98) [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L872-L896)\n\nThe locally disabled registry uses exponential backoff to avoid spamming consensus with failure notifications:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/locally\\_disabled\\_peers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/locally_disabled_peers.rs) (implied from usage)\n\n---\n\n## Write Coordination and Consistency\n\n### WriteOrdering Levels\n\nThe replica set supports three levels of write ordering, each providing different consistency guarantees:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs168-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L168-L190)",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1017,
      "character_count": 3997,
      "created_at": "2025-10-16T17:42:31.308825",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "The `write_ordering_lock` ensures that Strong and Medium ordering requests are serialized:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs137-142](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L137-L142)\n\n### Clock-Based Consistency\n\nEach update operation is tagged with a logical clock to establish causality:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs111-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L111-L166) [lib/collection/src/shards/replica\\_set/update.rs256-397](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L256-L397)\n\n**Clock Tag Structure:**\n\n```\n```\n\nIf a replica echoes a newer tick, the local clock advances to maintain consistency:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs368-396](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L368-L396)\n\n### Update Flow with Retry Logic\n\nOperations may be rejected if the clock is outdated. The replica set retries with a new clock:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs17-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L17-L20) [lib/collection/src/shards/replica\\_set/update.rs195-251](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L195-L251)\n\n### Write Consistency Factor\n\nThe replica set requires a minimum number of successful replicas based on `write_consistency_factor`:\n\n```\n```\n\nIf insufficient replicas succeed, the operation fails. Failed replicas are marked as locally disabled:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs355-365](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L355-L365) [lib/collection/src/shards/replica\\_set/update.rs432-510](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L432-L510)\n\n### Handling Failed Replicas\n\nWhen replicas fail during an update:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs409-511](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L409-L511) [lib/collection/src/shards/replica\\_set/update.rs597-662](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L597-L662)\n\n**Special Cases:**\n\n- **Listener replicas**: Failures are ignored\n- **Partial/Recovery replicas**: Pre-condition failures and missing point errors are ignored (transfer in progress)\n- **Resharding replicas**: Always deactivated on failure if not enough successes\n- **Initializing replicas**: Always trigger deactivation wait\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs610-646](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L610-L646)\n\n---\n\n## Read Operations\n\n### Shard Selection for Queries\n\nRead operations prefer local shards for performance:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/execute\\_read\\_operation.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/execute_read_operation.rs) (implied from replica\\_set structure)\n\nThe methods `peer_is_active()` and `is_locally_disabled()` determine which replicas can serve reads:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs1007-1018](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L1007-L1018)\n\n---\n\n## Shard Transfer Integration\n\n### Transfer Lifecycle in Replica Set\n\nShard transfers change replica states throughout their lifecycle:\n\n```\n```",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1010,
      "character_count": 3795,
      "created_at": "2025-10-16T17:42:31.319092",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "**Sources:** [lib/collection/src/collection/shard\\_transfer.rs36-141](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L36-L141) [lib/collection/src/collection/shard\\_transfer.rs195-300](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L195-L300)\n\n### Transfer Method and Initial State\n\nDifferent transfer methods set different initial states:\n\n| Transfer Method           | Initial Replica State                 | Accepts Updates During Transfer |\n| ------------------------- | ------------------------------------- | ------------------------------- |\n| `StreamRecords`           | `Partial`                             | Yes                             |\n| `Snapshot`                | `Recovery`                            | No (unless forced)              |\n| `WalDelta`                | `Recovery`                            | No (unless forced)              |\n| `ReshardingStreamRecords` | `Resharding` or `ReshardingScaleDown` | Yes                             |\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs82-103](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L82-L103)\n\n### Transfer Abortion\n\nWhen a transfer is aborted:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs303-361](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L303-L361)\n\n---\n\n## Key Methods and Operations\n\n### Building a Replica Set\n\n```\nShardReplicaSet::build(\n    shard_id,\n    shard_key,\n    collection_id,\n    this_peer_id,\n    local: bool,\n    remotes: HashSet<PeerId>,\n    on_peer_failure: Callback,\n    abort_shard_transfer: Callback,\n    ...\n) -> CollectionResult<ShardReplicaSet>\n```\n\nCreates a new replica set with initial state. If `local=true`, builds a `LocalShard`.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs127-230](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L127-L230)\n\n### Loading a Replica Set\n\n```\nShardReplicaSet::load(\n    shard_id,\n    shard_key,\n    collection_id,\n    shard_path,\n    is_dirty_shard: bool,\n    ...\n) -> ShardReplicaSet\n```\n\nLoads an existing replica set from disk. Handles recovery mode and dirty shards by creating dummy shards.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs232-382](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L232-L382)\n\n### State Management\n\n| Method                                     | Purpose                                                      |\n| ------------------------------------------ | ------------------------------------------------------------ |\n| `set_replica_state(peer_id, state)`        | Updates replica state and persists to disk                   |\n| `peer_state(peer_id)`                      | Gets current state of a peer                                 |\n| `peers()`                                  | Returns all peers and their states                           |\n| `active_remote_shards()`                   | Returns active remote peer IDs (excludes local and disabled) |\n| `is_last_source_of_truth_replica(peer_id)` | Checks if replica is the only active source                  |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs415-469](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L415-L469) [lib/collection/src/shards/replica\\_set/mod.rs695-711](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L695-L711)\n\n### Replica Management\n\n| Method                                      | Purpose                                 |\n| ------------------------------------------- | --------------------------------------- |\n| `add_remote(peer_id, state)`                | Adds a new remote replica               |\n| `remove_remote(peer_id)`                    | Removes a remote replica                |\n| `set_local(shard, state)`                   | Sets or replaces local shard            |\n| `remove_local()`                            | Removes local shard and clears data     |\n| `ensure_replica_with_state(peer_id, state)` | Ensures replica exists with given state |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs598-693](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L598-L693)\n\n### Waiting for States",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1009,
      "character_count": 4489,
      "created_at": "2025-10-16T17:42:31.326866",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "```\nwait_for_local_state(state, timeout) -> CollectionResult<()>\nwait_for_state(peer_id, state, timeout) -> Future<CollectionResult<()>>\n```\n\nThese methods block until a replica reaches the desired state or timeout occurs. Used during transfer operations.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs474-559](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L474-L559)\n\n---\n\n## Integration with Collection\n\nThe `Collection` uses `ShardHolder` to manage multiple `ShardReplicaSet` instances:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/mod.rs62-94](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L62-L94)\n\n### Applying State from Consensus\n\nWhen consensus updates the cluster state:\n\n```\ncollection.set_shard_replica_state(\n    shard_id,\n    peer_id,\n    new_state,\n    from_state: Option<ReplicaState>\n) -> CollectionResult<()>\n```\n\nThis method:\n\n1. Validates peer exists and `from_state` matches current state\n2. Prevents deactivating last active replica\n3. Updates replica state via `ensure_replica_with_state()`\n4. Aborts transfers if replica becomes `Dead`\n5. Triggers collection initialization check\n\n**Sources:** [lib/collection/src/collection/mod.rs386-512](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L386-L512)\n\n### Syncing Local State to Consensus\n\n```\ncollection.sync_local_state(...) -> CollectionResult<()>\n```\n\nPeriodically called to:\n\n1. Check for locally disabled replicas and report to consensus\n2. Verify transfer task states match consensus\n3. Auto-recover `Dead` replicas by requesting transfers\n4. Convert replicas to/from `Listener` state based on node type\n\n**Sources:** [lib/collection/src/collection/mod.rs595-777](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L595-L777)\n\n---\n\n## Summary\n\nThe `ShardReplicaSet` is the core abstraction for managing replica consistency in Qdrant:\n\n- **Coordinates local and remote shards** across multiple peers\n- **Manages replica states** through a persisted state machine\n- **Provides write ordering guarantees** (Weak, Medium, Strong) via leader selection and serialization\n- **Uses logical clocks** to establish causality and detect outdated operations\n- **Handles replica failures** with locally disabled peers and consensus notification\n- **Integrates with shard transfers** to support data migration and recovery\n- **Prefers local shards** for read operations to minimize latency\n- **Enforces write consistency factor** to ensure sufficient replica agreement\n\nAll state changes are coordinated through the consensus layer (Raft), ensuring cluster-wide consistency while allowing optimistic local operations for performance.\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 653,
      "character_count": 2843,
      "created_at": "2025-10-16T17:42:31.332511",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- [Shards and Replica Sets](#shards-and-replica-sets.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Core Abstraction](#core-abstraction.md)\n- [ShardReplicaSet Structure](#shardreplicaset-structure.md)\n- [Local vs Remote Shards](#local-vs-remote-shards.md)\n- [Replica State Management](#replica-state-management.md)\n- [Replica States](#replica-states.md)\n- [ReplicaSetState Persistence](#replicasetstate-persistence.md)\n- [Locally Disabled Peers](#locally-disabled-peers.md)\n- [Write Coordination and Consistency](#write-coordination-and-consistency.md)\n- [WriteOrdering Levels](#writeordering-levels.md)\n- [Clock-Based Consistency](#clock-based-consistency.md)\n- [Update Flow with Retry Logic](#update-flow-with-retry-logic.md)\n- [Write Consistency Factor](#write-consistency-factor.md)\n- [Handling Failed Replicas](#handling-failed-replicas.md)\n- [Read Operations](#read-operations.md)\n- [Shard Selection for Queries](#shard-selection-for-queries.md)\n- [Shard Transfer Integration](#shard-transfer-integration.md)\n- [Transfer Lifecycle in Replica Set](#transfer-lifecycle-in-replica-set.md)\n- [Transfer Method and Initial State](#transfer-method-and-initial-state.md)\n- [Transfer Abortion](#transfer-abortion.md)\n- [Key Methods and Operations](#key-methods-and-operations.md)\n- [Building a Replica Set](#building-a-replica-set.md)\n- [Loading a Replica Set](#loading-a-replica-set.md)\n- [State Management](#state-management.md)\n- [Replica Management](#replica-management.md)\n- [Waiting for States](#waiting-for-states.md)\n- [Integration with Collection](#integration-with-collection.md)\n- [Applying State from Consensus](#applying-state-from-consensus.md)\n- [Syncing Local State to Consensus](#syncing-local-state-to-consensus.md)\n- [Summary](#summary.md)",
    "metadata": {
      "chunk_id": 6,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 462,
      "character_count": 1760,
      "created_at": "2025-10-16T17:42:31.332748",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 6,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  }
]