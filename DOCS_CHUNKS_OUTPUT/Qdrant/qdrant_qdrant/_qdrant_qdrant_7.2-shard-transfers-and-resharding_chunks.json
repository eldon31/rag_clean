[
  {
    "text": "Shard Transfers and Resharding | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Shard Transfers and Resharding\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 959,
      "character_count": 3110,
      "created_at": "2025-10-16T17:42:32.003728",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n\nThis page describes the mechanisms for transferring shard data between peers in a distributed Qdrant cluster, and the resharding process that reorganizes data distribution across shards. For information about the basic shard and replica architecture, see [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md). For details on consensus coordination, see [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md).\n\nShard transfers enable:\n\n- **Replica recovery**: Restoring dead or failed replicas from active ones\n- **Cluster rebalancing**: Moving shards to new peers when scaling the cluster\n- **Resharding**: Redistributing data when changing the number of shards\n\n## Shard Transfer Concepts\n\nA shard transfer moves data from one peer (source) to another peer (destination). Transfers are coordinated through Raft consensus and executed asynchronously with progress tracking.\n\n### Transfer Descriptor\n\nThe `ShardTransfer` struct identifies and configures a transfer:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs17-19](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L17-L19)\n\n### Transfer Methods\n\nFour transfer methods are supported, each using different replica states:\n\n| Method                    | Replica State                         | Use Case          | Description                               |\n| ------------------------- | ------------------------------------- | ----------------- | ----------------------------------------- |\n| `StreamRecords`           | `Partial`                             | Default transfer  | Streams individual points                 |\n| `Snapshot`                | `Recovery`                            | Large transfers   | Transfers snapshot files                  |\n| `WalDelta`                | `Recovery`                            | Recent divergence | Transfers WAL operations since divergence |\n| `ReshardingStreamRecords` | `Resharding` or `ReshardingScaleDown` | Resharding only   | Streams points during resharding          |\n\nThe method is selected based on cluster version compatibility and configuration. If all peers are version 1.8.0+, `WalDelta` is preferred; otherwise `StreamRecords` is used.\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs82-103](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L82-L103)\n\n## Replica State Machine\n\nReplica states govern which operations are allowed on a shard replica. The state transitions form the core of the transfer lifecycle:\n\n```\n```\n\n**Key States:**\n\n- **Initializing**: Newly created replica, not yet operational\n- **Active**: Fully operational, serves reads and writes\n- **Listener**: Read-only mode for listener nodes\n- **Partial**: Receiving data via StreamRecords, accepts writes but incomplete data\n- **Recovery**: Receiving snapshot/WAL, rejects normal writes (force flag required)\n- **PartialSnapshot**: Temporarily set during snapshot transfer\n- **Resharding/ReshardingScaleDown**: During resharding operations\n- **Dead**: Failed replica, excluded from operations",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 951,
      "character_count": 4182,
      "created_at": "2025-10-16T17:42:32.008438",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs48-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L48-L82) [lib/collection/src/shards/replica\\_set/update.rs58-103](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L58-L103)\n\n## Shard Transfer Lifecycle\n\n### Initiation Phase\n\n```\n```\n\nThe transfer begins when a `ShardTransferOperations::Start` operation is committed through consensus:\n\n1. **Validation**: Check that source peer exists and has the shard, destination peer exists, and no conflicting transfers exist\n2. **State Registration**: Add transfer to `ShardHolder.shard_transfers`\n3. **Replica Initialization**: Create or update destination replica with appropriate state (Partial/Recovery/Resharding)\n4. **Task Spawning**: If sender is local, spawn background transfer task\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs390-480](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L390-L480) [lib/collection/src/collection/shard\\_transfer.rs36-141](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L36-L141)\n\n### Execution Phase\n\nTransfer tasks run asynchronously in the background, managed by `TransferTasksPool`:\n\n```\n```\n\nEach transfer method operates differently:\n\n- **StreamRecords**: Scrolls through source shard, batches points, and updates destination\n- **Snapshot**: Creates snapshot file, transfers to destination, destination recovers from snapshot\n- **WalDelta**: Identifies WAL operations since cutoff point, replays on destination\n\nThe task updates `TransferTaskProgress` which can be queried for status. On completion or failure, callbacks propose consensus operations to finalize the transfer.\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs143-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L143-L190)\n\n### Completion Phase\n\n```\n```\n\nWhen transfer completes successfully:\n\n1. **Stop Task**: Remove from `TransferTasksPool`\n\n2. **Promote Destination**:\n\n- Regular transfer: `Partial`/`Recovery` → `Active`\n   - Resharding transfer: Keep `Resharding`/`ReshardingScaleDown` state\n\n3. **Handle Source**:\n\n- **Sync transfer**: Keep source replica (un-proxify if proxied)\n   - **Non-sync transfer**: Remove source replica entirely\n\n4. **Unregister Transfer**: Remove from `shard_transfers` state\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs195-300](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L195-L300)\n\n### Abort/Failure Handling\n\n```\n```\n\nTransfer abort handling depends on transfer type:\n\n- **Regular sync transfer**: Mark destination as `Dead` (triggers recovery)\n- **Regular non-sync transfer**: Remove destination replica entirely\n- **Resharding transfer**: No state change (resharding abort handles cleanup)\n- **Source handling**: If source was proxied, revert proxy to normal `LocalShard`\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs303-361](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L303-L361)\n\n## Automatic Transfer Initiation\n\nThe system automatically initiates transfers to recover `Dead` replicas during `sync_local_state`:\n\n```\n```\n\nConditions for automatic recovery:\n\n- Replica state is `Dead`\n- At least one `Active` or `ReshardingScaleDown` remote replica exists\n- No conflicting transfers exist\n- Transfer limits not exceeded (incoming/outgoing per peer)\n- Target peer passes health check\n\nTransfer method is selected based on cluster version and configuration.\n\n**Sources:** [lib/collection/src/collection/mod.rs686-776](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L686-L776)\n\n## Resharding Operations\n\nResharding reorganizes data distribution by changing the number of shards in a collection. It is a multi-step process coordinated through consensus.\n\n### Resharding State\n\n```\n```\n\n### Resharding Lifecycle\n\n```\n```\n\n**Resharding Steps:**\n\n1. **Start**:",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1013,
      "character_count": 4181,
      "created_at": "2025-10-16T17:42:32.020076",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- Create new target shards (scale-up) or identify source shard (scale-down)\n   - Mark relevant replicas as `Resharding` or `ReshardingScaleDown`\n   - Start transfers using `ReshardingStreamRecords` method\n\n2. **MigratingPoints**: Transfer tasks execute in background, moving data\n\n3. **CommitRead**: Switch read operations to new hash ring while writes still use old ring\n\n4. **CommitWrite**: Switch write operations to new hash ring\n\n5. **Finish**:\n\n- Promote resharding replicas to `Active`\n   - Remove old shards (scale-down) or update routing\n   - Clean up resharding state\n\n6. **Abort**: Roll back any changes, remove temporary shards\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs306-376](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L306-L376) [lib/collection/src/collection/resharding.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/resharding.rs) (referenced but not in provided files)\n\n### Scale-Up vs Scale-Down\n\n**Scale-Up** (increase shard count):\n\n- Creates new empty shards with `Resharding` state\n- Transfers subset of data from existing shards to new shards\n- New shards become `Active` when resharding finishes\n- Original shards remain `Active` throughout\n\n**Scale-Down** (decrease shard count):\n\n- Marks shard-to-be-removed as `ReshardingScaleDown`\n- Transfers all data from that shard to remaining shards\n- Removes the scaled-down shard when resharding finishes\n- Other shards remain `Active`, accepting transferred data\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs89-102](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L89-L102) [lib/collection/src/collection/shard\\_transfer.rs241-257](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L241-L257)\n\n## Transfer Task Management\n\n### TransferTasksPool\n\nThe `TransferTasksPool` manages active transfer tasks:\n\n```\n```\n\nTask pool operations:\n\n- `add_task()`: Register new transfer task with progress tracker\n- `stop_task()`: Cancel running task and return result\n- `get_task_status()`: Query current task progress\n\nThe pool allows Collection to track all active transfers and their progress, essential for reporting cluster state and handling failures.\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs154-189](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L154-L189) [lib/collection/src/shards/transfer/transfer\\_tasks\\_pool.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/transfer/transfer_tasks_pool.rs) (referenced)\n\n## Consensus Integration\n\nShard transfers integrate tightly with Raft consensus:\n\n### Consensus Operations\n\n```\n```\n\nEach operation is proposed through consensus and applied on all peers when committed. This ensures all peers agree on:\n\n- Which transfers are active\n- Current state of each replica\n- When transfers complete or fail\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs390-603](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L390-L603)\n\n### Transfer Validation\n\nBefore starting a transfer, the system validates:\n\n1. **Peer existence**: Source and destination peers are in the cluster\n2. **Shard existence**: Source shard exists with active replicas\n3. **No conflicts**: No other transfer affects the same replica\n4. **State consistency**: Source is not in recovery/partial state\n\nValidation prevents inconsistent states and transfer conflicts.\n\n**Sources:** [lib/collection/src/shards/transfer/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/transfer/helpers.rs) (referenced), [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs423-430](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L423-L430)\n\n## Shard Key Operations\n\nCustom shard keys allow user-defined partitioning. Creating and dropping shard keys involves transfer-like operations:\n\n### Creating Shard Key\n\n```\n```",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1009,
      "character_count": 4193,
      "created_at": "2025-10-16T17:42:32.029928",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "New shards start in `Initializing` state (on version 1.14.2+) or `Active` state (older versions). The `Initializing` state ensures shards are properly set up before accepting traffic.\n\n**Sources:** [lib/collection/src/collection/sharding\\_keys.rs59-144](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs#L59-L144) [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs623-641](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L623-L641)\n\n### Dropping Shard Key\n\nDropping a shard key:\n\n1. Aborts any active resharding on that shard key\n2. Invalidates shard cleaning tasks\n3. Removes all shards associated with the key\n4. Cancels related transfers (on version 1.9.0+)\n\n**Sources:** [lib/collection/src/collection/sharding\\_keys.rs146-191](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs#L146-L191)\n\n## State Persistence\n\nTransfer and resharding state is persisted to survive restarts:\n\n- **ShardHolder state**: Stored in `shard_transfers` and `resharding_state` within `ShardHolder`\n- **ReplicaSet state**: Each replica set persists its `replica_state.json` including peer states\n- **Transfer progress**: Lost on restart; transfers restart from beginning\n\nOn recovery, the system:\n\n1. Loads persisted replica states\n2. Checks for in-progress transfers in consensus state\n3. Re-initiates transfers as needed based on replica states (`Partial`/`Recovery`)\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs125](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L125-L125) [lib/collection/src/shards/replica\\_set/mod.rs232-382](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L232-L382)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Shard Transfers and Resharding](#shard-transfers-and-resharding.md)\n- [Shard Transfer Concepts](#shard-transfer-concepts.md)\n- [Transfer Descriptor](#transfer-descriptor.md)\n- [Transfer Methods](#transfer-methods.md)\n- [Replica State Machine](#replica-state-machine.md)\n- [Shard Transfer Lifecycle](#shard-transfer-lifecycle.md)\n- [Initiation Phase](#initiation-phase.md)\n- [Execution Phase](#execution-phase.md)\n- [Completion Phase](#completion-phase.md)\n- [Abort/Failure Handling](#abortfailure-handling.md)\n- [Automatic Transfer Initiation](#automatic-transfer-initiation.md)\n- [Resharding Operations](#resharding-operations.md)\n- [Resharding State](#resharding-state.md)\n- [Resharding Lifecycle](#resharding-lifecycle.md)\n- [Scale-Up vs Scale-Down](#scale-up-vs-scale-down.md)\n- [Transfer Task Management](#transfer-task-management.md)\n- [TransferTasksPool](#transfertaskspool.md)\n- [Consensus Integration](#consensus-integration.md)\n- [Consensus Operations](#consensus-operations.md)\n- [Transfer Validation](#transfer-validation.md)\n- [Shard Key Operations](#shard-key-operations.md)\n- [Creating Shard Key](#creating-shard-key.md)\n- [Dropping Shard Key](#dropping-shard-key.md)\n- [State Persistence](#state-persistence.md)",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 828,
      "character_count": 3134,
      "created_at": "2025-10-16T17:42:32.032899",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  }
]