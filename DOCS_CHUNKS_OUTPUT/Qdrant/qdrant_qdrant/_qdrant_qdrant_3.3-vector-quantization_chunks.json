[
  {
    "text": "Vector Quantization | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Vector Quantization\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 950,
      "character_count": 3088,
      "created_at": "2025-10-16T17:42:31.548415",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- [Cargo.lock](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.lock)\n- [Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml)\n- [docs/redoc/default\\_version.js](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js)\n- [docs/redoc/index.html](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html)\n- [docs/redoc/v0.10.3/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.3/openapi.json)\n- [docs/redoc/v0.10.4/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.4/openapi.json)\n- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.5/openapi.json)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.11.x/openapi.json)\n- [docs/redoc/v1.13.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.13.x/openapi.json)\n- [docs/redoc/v1.15.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.15.x/openapi.json)\n- [lib/api/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml)\n- [lib/collection/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml)\n- [lib/common/common/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)\n- [lib/common/dataset/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/dataset/Cargo.toml)\n- [lib/common/io/src/file\\_operations.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/io/src/file_operations.rs)\n- [lib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.toml)\n- [lib/segment/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml)\n- [lib/segment/benches/hnsw\\_build\\_asymptotic.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_asymptotic.rs)\n- [lib/segment/benches/hnsw\\_build\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_graph.rs)\n- [lib/segment/benches/hnsw\\_search\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_search_graph.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/serializer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/serializer.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs)\n- [lib/segment/src/index/hnsw\\_index/hnsw.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/mod.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/test\\_compact\\_graph\\_layer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/test_compact_graph_layer.rs)\n- [lib/sparse/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/Cargo.toml)\n- [lib/storage/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [tools/missed\\_cherry\\_picks.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/missed_cherry_picks.sh)",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1338,
      "character_count": 4086,
      "created_at": "2025-10-16T17:42:31.549414",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "Vector quantization in Qdrant provides memory optimization techniques that reduce the storage footprint of high-dimensional vectors while maintaining search accuracy. This system supports multiple quantization methods including scalar quantization, product quantization, and binary quantization, with both in-memory and memory-mapped storage options.\n\nFor information about vector indexing structures, see [HNSW Index Implementation](qdrant/qdrant/3.1-vector-storage-formats.md). For payload data indexing, see [Payload Indexing and Filtering](qdrant/qdrant/3.2-hnsw-index-implementation.md).\n\n## Quantization Types and Storage Architecture\n\nQdrant implements three primary quantization methods through the `QuantizedVectorStorage` enum, each with distinct memory and accuracy trade-offs:\n\n| Quantization Type     | Configuration               | Encoding            | Use Case                                   |\n| --------------------- | --------------------------- | ------------------- | ------------------------------------------ |\n| `ScalarQuantization`  | `ScalarQuantizationConfig`  | `EncodedVectorsU8`  | Uniform quantization to 8-bit integers     |\n| `ProductQuantization` | `ProductQuantizationConfig` | `EncodedVectorsPQ`  | Subspace quantization with codebooks       |\n| `BinaryQuantization`  | `BinaryQuantizationConfig`  | `EncodedVectorsBin` | Bit-level encoding for maximum compression |\n\n```\n```\n\n**QuantizedVectorStorage Architecture with Configuration Details**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs83-96](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L83-L96) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs59-81](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L59-L81) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs22-27](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L22-L27)\n\n## Vector Storage Integration\n\nThe quantization system integrates with Qdrant's vector storage layer through the `VectorStorage` trait and `VectorStorageEnum`. The `QuantizedVectors` struct wraps `QuantizedVectorStorage` and implements the `RawScorer` interface. The system supports three vector element types with corresponding storage variants:\n\n| Element Type            | Rust Type | Storage Variants                                          | Use Case                   |\n| ----------------------- | --------- | --------------------------------------------------------- | -------------------------- |\n| `VectorElementType`     | `f32`     | `DenseSimple`, `DenseMemmap`, `DenseVolatile`             | Standard precision vectors |\n| `VectorElementTypeHalf` | `f16`     | `DenseSimpleHalf`, `DenseMemmapHalf`, `DenseVolatileHalf` | Memory-optimized vectors   |\n| `VectorElementTypeByte` | `u8`      | `DenseSimpleByte`, `DenseMemmapByte`, `DenseVolatileByte` | Compact integer vectors    |\n\n```\n```\n\n**QuantizedVectors Integration Architecture**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs124-130](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L124-L130) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs45-49](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L45-L49) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs161-175](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L161-L175) [lib/segment/src/data\\_types/vectors.rs212-216](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/data_types/vectors.rs#L212-L216) [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs189-321](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L189-L321)\n\n## Creation and Loading Process\n\nQuantized vectors are created from existing `VectorStorageEnum` instances through a dispatch-based process that handles both single vectors and multi-vectors:",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 996,
      "character_count": 4208,
      "created_at": "2025-10-16T17:42:31.553977",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "| Component                       | Purpose                                             | File Location                                                                                                 |\n| ------------------------------- | --------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| `QuantizedVectors::create()`    | Main entry point dispatching on VectorStorageEnum   | [quantized\\_vectors.rs286-390](https://github.com/qdrant/qdrant/blob/48203e41/quantized_vectors.rs#L286-L390) |\n| `create_impl()`                 | Implementation for DenseVectorStorage types         | [quantized\\_vectors.rs392-467](https://github.com/qdrant/qdrant/blob/48203e41/quantized_vectors.rs#L392-L467) |\n| `create_multi_impl()`           | Implementation for MultiVectorStorage types         | [quantized\\_vectors.rs469-559](https://github.com/qdrant/qdrant/blob/48203e41/quantized_vectors.rs#L469-L559) |\n| `construct_vector_parameters()` | Builds vector\\_parameters from distance, dim, count | [quantized\\_vectors.rs721-730](https://github.com/qdrant/qdrant/blob/48203e41/quantized_vectors.rs#L721-L730) |\n\n```\n```\n\n**QuantizedVectors::create() Flow with Preprocessing Details**\n\nThe `quantization_preprocess()` method performs vector preprocessing based on the quantization type and distance metric, handling different vector element types (`f32`, `f16`, `u8`) and applying distance-specific transformations before encoding.\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs286-390](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L286-L390) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs40-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L40-L43) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs392-467](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L392-L467) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs406-412](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L406-L412) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs721-730](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L721-L730)\n\n## Storage File Structure\n\nQuantized vectors persist to disk using a standardized file structure with constants defined in `quantized_vectors.rs`:\n\n| File                     | Purpose                                   | Constant                 | Required For                   |\n| ------------------------ | ----------------------------------------- | ------------------------ | ------------------------------ |\n| `quantized.config.json`  | QuantizedVectorsConfig serialization      | `QUANTIZED_CONFIG_PATH`  | All quantized vectors          |\n| `quantized.data`         | EncodedVectors binary data                | `QUANTIZED_DATA_PATH`    | All quantized vectors          |\n| `quantized.meta.json`    | EncodedVectors metadata                   | `QUANTIZED_META_PATH`    | All quantized vectors          |\n| `quantized.offsets.data` | MultivectorOffset array for multi-vectors | `QUANTIZED_OFFSETS_PATH` | Multi-vector quantization only |\n\n```\n```\n\n**Quantized Vector File Management**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs40-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L40-L43) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs263-276](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L263-L276) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs565-640](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L565-L640)\n\n## Query Processing and Scoring\n\nThe quantization system provides optimized query processing through the `raw_scorer()` and `raw_internal_scorer()` methods that create specialized scorers operating on quantized data:\n\n```\n```",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1015,
      "character_count": 4308,
      "created_at": "2025-10-16T17:42:31.559200",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "**QuantizedVectors RawScorer Interface**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs161-175](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L161-L175) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs177-228](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L177-L228) [lib/segment/src/vector\\_storage/raw\\_scorer.rs31-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/raw_scorer.rs#L31-L43)\n\n## Memory Management Strategies\n\nQuantization supports both in-memory and memory-mapped storage determined by the `is_ram()` function and `VectorStorage::is_on_disk()` method:\n\n| Storage Variant                | Condition                     | Backend Implementation               |\n| ------------------------------ | ----------------------------- | ------------------------------------ |\n| ScalarRam, PQRam, BinaryRam    | `is_ram() == true`            | `ChunkedVectors<T>`                  |\n| ScalarMmap, PQMmap, BinaryMmap | `is_ram() == false`           | `QuantizedMmapStorage`               |\n| Multi variants                 | Same logic as single variants | Includes `MultivectorOffsetsStorage` |\n\nThe `is_ram()` function determines storage type based on quantization configuration and source vector storage:\n\n```\n```\n\nEach quantization configuration includes an `always_ram` field that explicitly controls storage type, overriding the default behavior based on the source vector storage's `is_on_disk()` property.\n\n```\n```\n\n**Quantization Storage Selection Logic**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs732-734](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L732-L734) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs580-622](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L580-L622) [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs48](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L48-L48)\n\n## Multi-Vector Quantization\n\nFor multi-vector configurations, quantization includes additional offset tracking to maintain vector boundaries:\n\n```\n```\n\n**Multi-Vector Quantization Structure**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs434-452](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L434-L452) [lib/segment/src/vector\\_storage/quantized/quantized\\_multivector\\_storage.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_multivector_storage.rs)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Vector Quantization](#vector-quantization.md)\n- [Quantization Types and Storage Architecture](#quantization-types-and-storage-architecture.md)\n- [Vector Storage Integration](#vector-storage-integration.md)\n- [Creation and Loading Process](#creation-and-loading-process.md)\n- [Storage File Structure](#storage-file-structure.md)\n- [Query Processing and Scoring](#query-processing-and-scoring.md)\n- [Memory Management Strategies](#memory-management-strategies.md)\n- [Multi-Vector Quantization](#multi-vector-quantization.md)",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 833,
      "character_count": 3430,
      "created_at": "2025-10-16T17:42:31.564125",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  }
]