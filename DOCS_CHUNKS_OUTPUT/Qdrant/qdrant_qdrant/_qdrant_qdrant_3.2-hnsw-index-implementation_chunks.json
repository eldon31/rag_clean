[
  {
    "text": "HNSW Index Implementation | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# HNSW Index Implementation\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 954,
      "character_count": 3100,
      "created_at": "2025-10-16T17:42:31.497233",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- [lib/common/io/src/file\\_operations.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/io/src/file_operations.rs)\n- [lib/segment/benches/hnsw\\_build\\_asymptotic.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_asymptotic.rs)\n- [lib/segment/benches/hnsw\\_build\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_graph.rs)\n- [lib/segment/benches/hnsw\\_search\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_search_graph.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/serializer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/serializer.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs)\n- [lib/segment/src/index/hnsw\\_index/hnsw.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/mod.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/test\\_compact\\_graph\\_layer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/test_compact_graph_layer.rs)\n\nThis document describes the implementation of the Hierarchical Navigable Small World (HNSW) algorithm in Qdrant. HNSW is a graph-based approximate nearest neighbor search index that provides fast vector similarity search with tunable accuracy/speed tradeoffs.\n\nFor information about other vector index types (Plain, Sparse), see [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md). For details on quantization techniques used with HNSW, see [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md). For search/query processing that uses HNSW, see [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md).\n\n## Core Architecture\n\nThe HNSW implementation consists of four primary components that work together to provide efficient graph-based search:\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs83-93](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L83-L93) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs44-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L44-L50) [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs32-48](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L32-L48) [lib/segment/src/index/hnsw\\_index/graph\\_links.rs56-61](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L56-L61)\n\n### HNSWIndex",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1017,
      "character_count": 3452,
      "created_at": "2025-10-16T17:42:31.500065",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "The `HNSWIndex` struct is the top-level index interface that implements the `VectorIndex` trait. It maintains references to all necessary components and coordinates between graph operations and vector/payload storage.\n\n**Key Fields**:\n\n- `graph: GraphLayers` - The immutable hierarchical graph structure\n- `vector_storage: Arc<AtomicRefCell<VectorStorageEnum>>` - Raw vector data\n- `quantized_vectors: Arc<AtomicRefCell<Option<QuantizedVectors>>>` - Compressed vectors for search\n- `id_tracker: Arc<AtomicRefCell<IdTrackerSS>>` - Maps external IDs to internal offsets\n- `payload_index: Arc<AtomicRefCell<StructPayloadIndex>>` - For filtered search\n- `config: HnswGraphConfig` - Configuration parameters (m, ef\\_construct, etc.)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs83-93](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L83-L93)\n\n### GraphLayers\n\n`GraphLayers` is the immutable graph structure used during search operations. It provides efficient read-only access to the multi-level graph connectivity.\n\n**Key Fields**:\n\n- `hnsw_m: HnswM` - M parameters (m for level > 0, m0 for level 0)\n- `links: GraphLinks` - Actual link storage (neighbors for each node)\n- `entry_points: EntryPoints` - Multiple entry points for different filters\n- `visited_pool: VisitedPool` - Pool of reusable visited lists for search\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs44-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L44-L50)\n\n### GraphLayersBuilder\n\n`GraphLayersBuilder` is the mutable builder used during index construction. It allows concurrent point insertion and converts to the immutable `GraphLayers` when complete.\n\n**Key Fields**:\n\n- `links_layers: Vec<LockedLayersContainer>` - Per-point, per-level link containers with locks\n- `ready_list: RwLock<BitVec>` - Tracks which points have been indexed\n- `entry_points: Mutex<EntryPoints>` - Maintains entry points during construction\n- `hnsw_m: HnswM` - M parameters for graph construction\n- `ef_construct: usize` - Size of candidate list during construction\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs32-48](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L32-L48)\n\n### GraphLinks\n\n`GraphLinks` is a self-referential struct that manages the storage and access to graph connectivity data. It supports multiple storage formats for space/speed tradeoffs.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links.rs199-207](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L199-L207) [lib/segment/src/index/hnsw\\_index/graph\\_links.rs224-331](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L224-L331)\n\n## Hierarchical Graph Structure\n\nHNSW uses a multi-level graph where each level is a subset of the level below it. Points are assigned to levels using a geometric distribution, creating a hierarchical structure that enables efficient search.\n\n### Level Assignment\n\nThe level for each point is determined using a geometric distribution during insertion:\n\n```\n```\n\n**Formula**: `level_factor = 1.0 / ln(max(m, 2))`\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs357-366](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L357-L366) [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs286-290](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L286-L290)\n\n### M Parameters\n\nThe graph uses two M parameters that control connectivity:\n\n- **m**: Maximum links per node on levels 1 and above\n- **m0**: Maximum links per node on level 0 (typically `m0 = 2 * m`)",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 994,
      "character_count": 3854,
      "created_at": "2025-10-16T17:42:31.506460",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "| Parameter      | Level 0            | Level > 0         |\n| -------------- | ------------------ | ----------------- |\n| Maximum links  | m0 (typ. 2\\*m)     | m                 |\n| Link selection | Heuristic pruning  | Heuristic pruning |\n| Purpose        | Dense connectivity | Sparse navigation |\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs359-361](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L359-L361) [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs68-70](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L68-L70)\n\n### Entry Points\n\nThe index maintains multiple entry points to support filtered searches. Entry points are stored per filter predicate and updated during construction.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs387-409](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L387-L409)\n\n## Index Construction Process\n\n### Build Pipeline\n\nTitle: **HNSW Index Build Pipeline**\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs199-665](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L199-L665)\n\n### Point Insertion Algorithm\n\nThe `link_new_point()` method in `GraphLayersBuilder` inserts a new point into the graph:\n\n**Algorithm Steps**:\n\n1. **Find Entry Point**: Get an entry point that satisfies filters\n\n2. **Navigate to Target Level**: Use greedy search from entry point down to the point's assigned level\n\n3. **For Each Level (top-down)**:\n\n- Find nearest neighbors using beam search with `ef_construct` candidates\n   - Select M best neighbors using heuristic\n   - Create bidirectional links\n   - Use selected neighbors as entry for next level\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs387-440](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L387-L440) [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs466-506](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L466-L506)\n\n### Heuristic Link Selection\n\nWhen `use_heuristic` is enabled (default: `true`), the algorithm selects neighbors that are \"not closer to each other than to the new point.\" This prevents clustering and maintains graph connectivity.\n\n**Heuristic Logic** (`link_with_heuristic`):\n\n1. Sort candidates by distance to new point\n\n2. For each candidate in order:\n\n- If less than M neighbors selected, add it\n   - Only add if it's not closer to existing selected neighbors than to new point\n\n3. Create bidirectional links with selected neighbors\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs508-545](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L508-L545) [lib/segment/src/index/hnsw\\_index/hnsw.rs70](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L70-L70)\n\n### Payload-Specific Graphs\n\nAfter building the main graph, HNSW constructs additional connectivity for payload-filtered searches. This ensures good search quality even with filters.\n\n**Process**:\n\n1. For each indexed payload field, identify blocks (groups of points with same value)\n2. For blocks smaller than `max_block_size`, check connectivity in main graph\n3. If connectivity is insufficient, build additional `GraphLayersBuilder` for that block\n4. Merge additional links into main graph using `merge_from_other()`\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs453-607](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L453-L607)\n\n### Old Index Reuse\n\nDuring rebuilds, HNSW can reuse structure from an old index to speed up construction:\n\n**Reuse Strategy**:",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1003,
      "character_count": 3911,
      "created_at": "2025-10-16T17:42:31.514628",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "1. Check if old index has compatible configuration\n2. Create mapping between old and new point IDs\n3. Use `GraphLayersHealer` to migrate links from old index\n4. Only insert truly new points (not in old index)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs261-275](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L261-L275) [lib/segment/src/index/hnsw\\_index/hnsw.rs390-417](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L390-L417)\n\n## Search Algorithm\n\nThe HNSW search consists of two phases: a greedy search from the entry point to level 0, followed by a beam search on level 0.\n\n### Two-Phase Search\n\nTitle: **HNSW Two-Phase Search Algorithm**\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs411-439](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L411-L439)\n\n### Search Entry (Phase 1)\n\nThe `search_entry` method performs greedy search from the entry point down to level 0:\n\n```\n```\n\n**Key Characteristic**: Beam size = 1 (follows only the single best neighbor at each step)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs122-151](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L122-L151) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs153-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L153-L190)\n\n### Search on Level (Phase 2)\n\nThe `search_on_level` method performs beam search with configurable `ef` parameter:\n\n**Algorithm**:\n\n1. Initialize `SearchContext` with `ef` capacity\n\n2. Add entry point to candidates and nearest\n\n3. While candidates exist:\n\n- Pop best candidate from priority queue\n\n- If its score is worse than `ef`-th best, stop\n\n- For each unvisited neighbor:\n\n- Score the neighbor\n     - Add to candidates and nearest if good enough\n\n4. Return top results\n\n**SearchContext Fields**:\n\n- `candidates: FixedLengthPriorityQueue` - Candidates to explore (max-heap by score)\n- `nearest: FixedLengthPriorityQueue` - Best results found (min-heap by score)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs99-120](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L99-L120) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs63-97](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L63-L97)\n\n### Search with Quantized Vectors\n\nWhen quantized vectors are available, HNSW can optionally use them during search for faster distance calculations:\n\n**Two-Stage Scoring**:\n\n1. **Coarse Search**: Use quantized vectors stored in graph links for fast filtering\n2. **Refinement**: Rescore top candidates with original vectors for accuracy\n\nThis is enabled via the `CompressedWithVectors` graph format, where each link embeds the quantized vector of the neighbor.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs969-1035](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L969-L1035) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs441-474](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L441-L474)\n\n## Graph Links Storage Formats\n\nHNSW supports three storage formats for graph links, offering different tradeoffs between memory usage, disk size, and search speed.\n\n### Format Comparison",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 950,
      "character_count": 3486,
      "created_at": "2025-10-16T17:42:31.522752",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "| Format                | Memory Usage | Disk Size | Search Speed | Quantization Support |\n| --------------------- | ------------ | --------- | ------------ | -------------------- |\n| Plain                 | High         | High      | Fast         | No                   |\n| Compressed            | Medium       | Low       | Fast         | No                   |\n| CompressedWithVectors | Medium-High  | Medium    | Fastest\\*    | Yes                  |\n\n\\*When using quantized search with embedded vectors\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links.rs56-61](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L56-L61)\n\n### Plain Format\n\nThe `Plain` format stores links as uncompressed arrays of `u32` neighbor IDs.\n\n**File Structure**:\n\n```\n[HeaderPlain]\n[level_offsets: u64[]]\n[reindex: u32[]]\n[neighbors: u32[]]\n[padding: u8[]]\n[offsets: u64[]]\n```\n\n**HeaderPlain Fields**:\n\n- `point_count`: Number of points in the graph\n- `levels_count`: Number of levels in the graph\n- `total_neighbors_count`: Total number of neighbor entries\n- `total_offset_count`: Number of offset entries\n- `offsets_padding_bytes`: Padding before offsets array (0 or 4 bytes)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs9-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs#L9-L20) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs121-135](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs#L121-L135)\n\n### Compressed Format\n\nThe `Compressed` format uses bit-packing to reduce storage:\n\n**Compression Techniques**:\n\n1. **Sorted Prefix**: First M links are sorted and stored with delta encoding\n2. **Unsorted Suffix**: Remaining links use variable-bit encoding\n3. **Offset Compression**: Offsets are compressed using bitpacking\n\n**File Structure**:\n\n```\n[HeaderCompressed]\n[level_offsets: u64[]]\n[reindex: u32[]]\n[neighbors: u8[]] (compressed)\n[offsets: u8[]] (compressed)\n```\n\n**HeaderCompressed Additional Fields**:\n\n- `version`: Magic number `0xFFFF_FFFF_FFFF_FF01`\n- `m`, `m0`: M parameters needed for decompression\n- `offsets_parameters`: Bitpacking parameters for offset decompression\n\n**Compression Ratio**: Typically 2-4x smaller than Plain format\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs22-35](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs#L22-L35) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs137-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs#L137-L166)\n\n### CompressedWithVectors Format\n\nThe `CompressedWithVectors` format embeds quantized vectors alongside links for faster search:\n\n**File Structure**:\n\n```\n[HeaderCompressedWithVectors]\n[level_offsets: u64[]]\n[reindex: u32[]]\n[padding for alignment]\n[neighbors_and_vectors: u8[]]\n[offsets: u8[]] (compressed)\n```\n\n**Per-Point Data Layout** (for level 0):\n\n```\n[base_vector: u8[base_size]]\n[neighbors_count: varint]\n[compressed_links: u8[]]\n[padding for link_vector alignment]\n[link_vectors: u8[neighbors_count * link_size]]\n[padding for next base_vector alignment]\n```\n\n**Per-Point Data Layout** (for level > 0):\n\n```\n[neighbors_count: varint]\n[compressed_links: u8[]]\n[padding for link_vector alignment]\n[link_vectors: u8[neighbors_count * link_size]]\n```\n\n**HeaderCompressedWithVectors Additional Fields**:\n\n- `version`: Magic number `0xFFFF_FFFF_FFFF_FF02`\n- `base_vector_layout`: Layout of base vectors (size, alignment)\n- `link_vector_layout`: Layout of link vectors (size, alignment)",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 967,
      "character_count": 3685,
      "created_at": "2025-10-16T17:42:31.531079",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs37-52](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs#L37-L52) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs168-213](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs#L168-L213) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs259-340](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs#L259-L340)\n\n### Reindexing for Level Sorting\n\nAll formats use a \"reindex\" array to optimize level-based access:\n\nTitle: **Graph Links Reindexing Strategy**\n\n```\n```\n\n**Purpose**: Points at higher levels appear first in the flattened links array, enabling efficient level-based iteration without seeking.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links/serializer.rs51-88](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/serializer.rs#L51-L88)\n\n## Configuration Parameters\n\n### HnswGraphConfig\n\nThe `HnswGraphConfig` struct stores persistent HNSW configuration:\n\n| Parameter              | Type            | Description                        | Typical Value                |\n| ---------------------- | --------------- | ---------------------------------- | ---------------------------- |\n| `m`                    | `usize`         | Max links per node (level > 0)     | 16                           |\n| `m0`                   | `usize`         | Max links per node (level 0)       | 32 (2\\*m)                    |\n| `ef_construct`         | `usize`         | Candidate list size during build   | 100                          |\n| `full_scan_threshold`  | `usize`         | Point count to switch to full scan | Calculated from KB threshold |\n| `max_indexing_threads` | `usize`         | Max threads for parallel build     | CPU count                    |\n| `payload_m`            | `Option<usize>` | M for payload-specific graphs      | m or custom                  |\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs140-165](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L140-L165) [lib/segment/src/index/hnsw\\_index/hnsw.rs252-260](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L252-L260)\n\n### HnswConfig (User-Facing)\n\nThe `HnswConfig` type is the user-facing configuration in segment config:\n\n| Parameter              | Type            | Description                         |\n| ---------------------- | --------------- | ----------------------------------- |\n| `m`                    | `usize`         | Connectivity parameter              |\n| `ef_construct`         | `usize`         | Construction quality                |\n| `full_scan_threshold`  | `usize`         | Full scan threshold in KB           |\n| `max_indexing_threads` | `usize`         | Build parallelism                   |\n| `on_disk`              | `Option<bool>`  | Load graph into RAM or keep on disk |\n| `payload_m`            | `Option<usize>` | M for filtered graphs               |\n| `copy_vectors`         | `Option<bool>`  | Use CompressedWithVectors format    |\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs120-127](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L120-L127)\n\n### Search Parameters\n\nSearch behavior is controlled by `SearchParams`:\n\n| Parameter      | Type                               | Description                  | Default     |\n| -------------- | ---------------------------------- | ---------------------------- | ----------- |\n| `hnsw_ef`      | `Option<usize>`                    | Beam size for level 0 search | `config.ef` |\n| `quantization` | `Option<QuantizationSearchParams>` | Quantization settings        | None        |\n| `exact`        | `Option<bool>`                     | Force exact search           | `false`     |\n\n**ef Parameter**: Higher values improve accuracy but increase search time. Typical range: 32-512.",
    "metadata": {
      "chunk_id": 6,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 975,
      "character_count": 4059,
      "created_at": "2025-10-16T17:42:31.536948",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 6,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs942-954](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L942-L954)\n\n## On-Disk vs In-Memory\n\nHNSW supports both in-memory and memory-mapped (on-disk) operation:\n\n**In-Memory Mode** (`on_disk = false`):\n\n- Graph loaded into RAM as `GraphLinksEnum::Ram(Vec<u8>)`\n- Fastest search performance\n- High memory usage\n\n**On-Disk Mode** (`on_disk = true`):\n\n- Graph memory-mapped as `GraphLinksEnum::Mmap(Arc<Mmap>)`\n- Relies on OS page cache\n- Lower memory footprint\n- Slight performance penalty on cold reads\n\n**Default**: Determined by storage configuration, typically `false` for small collections and `true` for large ones.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs169](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L169-L169) [lib/segment/src/index/hnsw\\_index/graph\\_links.rs209-222](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L209-L222) [lib/segment/src/index/hnsw\\_index/graph\\_links.rs225-235](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L225-L235)\n\n## GPU Acceleration\n\nWhen compiled with the `gpu` feature and a GPU is available, HNSW can offload graph construction to GPU:\n\n**GPU Build Process**:\n\n1. Transfer vectors to GPU memory via `GpuVectorStorage`\n2. Execute parallel graph construction on GPU using `build_hnsw_on_gpu`\n3. If GPU build fails, fall back to CPU implementation\n4. GPU-built graphs are identical to CPU-built graphs\n\n**GPU Support**: Only for the main graph; payload-specific graphs always use CPU.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs279-383](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L279-L383) [lib/segment/src/index/hnsw\\_index/hnsw.rs780-902](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L780-L902) [lib/segment/src/index/hnsw\\_index/hnsw.rs904-939](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L904-L939)\n\n## Telemetry\n\nHNSW tracks search performance across different strategies:\n\n**Telemetry Categories**:\n\n- `unfiltered_plain`: Brute-force search without filters\n- `filtered_plain`: Brute-force search with filters\n- `unfiltered_hnsw`: HNSW search without filters\n- `small_cardinality`: HNSW search with restrictive filters\n- `large_cardinality`: HNSW search with permissive filters\n- `exact_filtered`: Exact filtered search\n- `exact_unfiltered`: Exact unfiltered search\n\nEach category maintains an `OperationDurationsAggregator` to track timing statistics.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs95-118](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L95-L118)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page",
    "metadata": {
      "chunk_id": 7,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 835,
      "character_count": 2929,
      "created_at": "2025-10-16T17:42:31.542953",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 7,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- [HNSW Index Implementation](#hnsw-index-implementation.md)\n- [Core Architecture](#core-architecture.md)\n- [HNSWIndex](#hnswindex.md)\n- [GraphLayers](#graphlayers.md)\n- [GraphLayersBuilder](#graphlayersbuilder.md)\n- [GraphLinks](#graphlinks.md)\n- [Hierarchical Graph Structure](#hierarchical-graph-structure.md)\n- [Level Assignment](#level-assignment.md)\n- [M Parameters](#m-parameters.md)\n- [Entry Points](#entry-points.md)\n- [Index Construction Process](#index-construction-process.md)\n- [Build Pipeline](#build-pipeline.md)\n- [Point Insertion Algorithm](#point-insertion-algorithm.md)\n- [Heuristic Link Selection](#heuristic-link-selection.md)\n- [Payload-Specific Graphs](#payload-specific-graphs.md)\n- [Old Index Reuse](#old-index-reuse.md)\n- [Search Algorithm](#search-algorithm.md)\n- [Two-Phase Search](#two-phase-search.md)\n- [Search Entry (Phase 1)](#search-entry-phase-1.md)\n- [Search on Level (Phase 2)](#search-on-level-phase-2.md)\n- [Search with Quantized Vectors](#search-with-quantized-vectors.md)\n- [Graph Links Storage Formats](#graph-links-storage-formats.md)\n- [Format Comparison](#format-comparison.md)\n- [Plain Format](#plain-format.md)\n- [Compressed Format](#compressed-format.md)\n- [CompressedWithVectors Format](#compressedwithvectors-format.md)\n- [Reindexing for Level Sorting](#reindexing-for-level-sorting.md)\n- [Configuration Parameters](#configuration-parameters.md)\n- [HnswGraphConfig](#hnswgraphconfig.md)\n- [HnswConfig (User-Facing)](#hnswconfig-user-facing.md)\n- [Search Parameters](#search-parameters.md)\n- [On-Disk vs In-Memory](#on-disk-vs-in-memory.md)\n- [GPU Acceleration](#gpu-acceleration.md)\n- [Telemetry](#telemetry.md)",
    "metadata": {
      "chunk_id": 8,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 460,
      "character_count": 1661,
      "created_at": "2025-10-16T17:42:31.543185",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 8,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  }
]