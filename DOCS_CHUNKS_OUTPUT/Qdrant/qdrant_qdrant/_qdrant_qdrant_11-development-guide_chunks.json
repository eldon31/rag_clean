[
  {
    "text": "Development Guide | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Development Guide\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 948,
      "character_count": 3084,
      "created_at": "2025-10-16T17:42:31.114377",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- [.config/nextest.toml](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml)\n- [.github/ISSUE\\_TEMPLATE/flaky\\_test.md](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md)\n- [.github/workflows/coverage.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml)\n- [.github/workflows/docker-image.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml)\n- [.github/workflows/integration-tests.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.github/workflows/release-artifacts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml)\n- [.github/workflows/rust-gpu.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml)\n- [.github/workflows/rust.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml)\n- [.github/workflows/storage-compat.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml)\n- [Dockerfile](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile)\n- [README.md](https://github.com/qdrant/qdrant/blob/48203e41/README.md)\n- [config/deb.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml)\n- [docs/CODE\\_OF\\_CONDUCT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CODE_OF_CONDUCT.md)\n- [docs/CONTRIBUTING.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md)\n- [docs/DEVELOPMENT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md)\n- [docs/QUICK\\_START.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md)\n- [docs/imgs/ci-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/ci-coverage-report.png)\n- [docs/imgs/local-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/roadmap/README.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/README.md)\n- [docs/roadmap/roadmap-2022.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2022.md)\n- [docs/roadmap/roadmap-2023.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2023.md)\n- [docs/roadmap/roadmap-2024.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2024.md)\n- [tests/integration-tests.sh](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh)\n- [tools/sync-web-ui.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh)\n\nThis guide provides practical information for developers contributing to Qdrant, including environment setup, development workflow, API changes, performance profiling, and testing procedures. For deployment and configuration details, see [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md). For general contribution guidelines, see [docs/CONTRIBUTING.md1-50](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md#L1-L50)\n\n---\n\n## Development Environment Setup\n\n### Prerequisites and Dependencies\n\nQdrant requires the following tools and dependencies for local development:",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 991,
      "character_count": 3281,
      "created_at": "2025-10-16T17:42:31.117200",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "| Component          | Purpose                  | Installation                    |\n| ------------------ | ------------------------ | ------------------------------- |\n| **Rust toolchain** | Core compilation         | `rustup` with stable channel    |\n| **rustfmt**        | Code formatting          | `rustup component add rustfmt`  |\n| **clippy**         | Linting                  | `rustup component add clippy`   |\n| **protoc**         | gRPC code generation     | Platform-specific (see below)   |\n| **clang**          | C++ interop and linking  | `apt-get install clang` (Linux) |\n| **Poetry**         | Python test dependencies | `pip install poetry`            |\n\n**Protobuf Compiler Installation:**\n\nOn Linux/macOS, install protoc manually:\n\n```\n```\n\nSources: [docs/DEVELOPMENT.md62-78](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L62-L78)\n\n### Building Qdrant\n\n**Basic Build:**\n\n```\n```\n\n**Development Build with Features:**\n\n```\n```\n\nThe build system uses `cargo-chef` for Docker layer caching (see [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)) and supports cross-compilation via `xx` tooling ([Dockerfile10](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L10-L10) [Dockerfile28-31](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L28-L31)).\n\nSources: [docs/DEVELOPMENT.md80-85](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L80-L85) [Dockerfile28-118](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L28-L118)\n\n### Development Environment Flow\n\n```\n```\n\nSources: [docs/DEVELOPMENT.md45-97](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L45-L97) [Dockerfile1-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L1-L230)\n\n### Nix Development Shell\n\nFor Nix users, a complete development environment is available:\n\n```\n```\n\nThis provides Rust toolchain, Python dependencies, and all tools needed for development and testing.\n\nSources: [docs/DEVELOPMENT.md98-100](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L98-L100)\n\n---\n\n## API Changes Workflow\n\n### REST API Changes\n\nQdrant uses OpenAPI 3.0 specifications with schema generation from Rust types. API changes must maintain consistency between code, specs, and tests.\n\n```\n```\n\n**Detailed Steps:**\n\n1. **Implement Rust endpoints and models** in `src/actix/` and `lib/api/`\n\n2. **Update OpenAPI YTT templates** in `openapi/*ytt.yaml` files\n\n3. **Add schema definitions** to `src/schema_generator.rs` for new types\n\n4. **Generate specs:** `./tools/generate_openapi_models.sh`\n\n5. **Update integration tests** in `tests/openapi/` directory\n\n6. **Run tests:** `poetry -C tests run pytest tests/openapi`\n\n7. **Validate specs:**\n\n- Serve docs: `cd docs/redoc && python -m http.server`\n   - View at `http://localhost:8000/?v=master`\n   - Validate YAML in [Swagger Editor](https://editor.swagger.io/)\n\nThe CI enforces consistency via `./tests/openapi_consistency_check.sh` which fails if generated specs don't match committed specs.\n\nSources: [docs/DEVELOPMENT.md260-278](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L260-L278) [.github/workflows/integration-tests.yml150-153](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L150-L153)\n\n### gRPC API Changes\n\nQdrant uses Tonic for gRPC with protocol buffer definitions in `lib/api/src/grpc/proto/*.proto`.\n\n```\n```\n\n**Protocol Buffer Guidelines:**",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 962,
      "character_count": 3481,
      "created_at": "2025-10-16T17:42:31.129101",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- Use `oneof` for enum-like payloads to enable type-safe variants\n- Request/response types are auto-generated as Rust structs\n- Service trait is implemented in Rust code\n- Default gRPC port: `6334` ([tests/integration-tests.sh11](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L11-L11))\n\n**Testing:**\n\n```\n```\n\nSources: [docs/DEVELOPMENT.md280-293](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L280-L293) [tests/integration-tests.sh69-75](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L69-L75)\n\n### System Integration Considerations\n\nWhen making API changes, also update:\n\n1. **Metrics allow lists** in `src/common/metrics.rs` for new endpoints\n2. **JWT integration tests** in `tests/auth_tests` for authenticated endpoints\n\nSources: [docs/DEVELOPMENT.md296-300](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L296-L300)\n\n---\n\n## Testing Infrastructure\n\n### Test Hierarchy\n\n```\n```\n\nSources: [.github/workflows/rust.yml42-45](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L42-L45) [tests/integration-tests.sh63-75](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L63-L75) [.github/workflows/integration-tests.yml45-84](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L45-L84)\n\n### Running Tests Locally\n\n**Unit Tests:**\n\n```\n```\n\nConfiguration for nextest is in [.config/nextest.toml1-13](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml#L1-L13) with retry logic and failure output settings.\n\n**Integration Tests:**\n\n```\n```\n\n**Consensus Tests:**\n\n```\n```\n\n**E2E Tests:**\n\n```\n```\n\nSources: [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76) [.github/workflows/integration-tests.yml14-83](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L14-L83) [.github/workflows/integration-tests.yml211-265](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L211-L265)\n\n### CI/CD Pipeline\n\n```\n```\n\n**Key CI Features:**\n\n- **Automatic flaky test detection:** JUnit XML parsing creates GitHub issues for flaky tests ([.github/workflows/rust.yml55-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L55-L112))\n- **Multi-platform testing:** Ubuntu, Windows, macOS ([.github/workflows/rust.yml17](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L17-L17))\n- **Coverage reporting:** Daily runs upload to Codecov ([.github/workflows/coverage.yml84-111](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L84-L111))\n- **Storage compatibility:** Tests migration between versions ([.github/workflows/storage-compat.yml1-34](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml#L1-L34))\n- **GPU testing:** Separate workflow with Vulkan setup ([.github/workflows/rust-gpu.yml1-44](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml#L1-L44))\n\nSources: [.github/workflows/rust.yml1-149](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L1-L149) [.github/workflows/integration-tests.yml1-274](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L1-L274) [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L1-L112)",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1024,
      "character_count": 3498,
      "created_at": "2025-10-16T17:42:31.135304",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "---\n\n## Performance Profiling and Benchmarking\n\n### Criterion Benchmarks\n\nQdrant uses Criterion.rs for micro-benchmarks. Benchmarks are located in sub-crates under `benches/` directories.\n\n**Running Benchmarks:**\n\n```\n```\n\nCriterion automatically detects performance regressions by comparing against previous runs.\n\nSources: [docs/DEVELOPMENT.md102-133](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L102-L133)\n\n### FlameGraph Profiling\n\nGenerate flame graphs for visual performance analysis:\n\n```\n```\n\nThis creates:\n\n- FlameGraph SVG showing time spent in each function\n- Profiling records for call-graph generation\n\n**Generating Call Graphs:**\n\n```\n```\n\nSources: [docs/DEVELOPMENT.md136-154](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L136-L154)\n\n### Tango.rs Comparative Benchmarks\n\nFor precise performance comparisons between code revisions:\n\n**1. Run baseline in solo mode:**\n\n```\n```\n\n**2. Save baseline binary:**\n\n```\n```\n\n**3. Make code changes, then compare:**\n\n```\n```\n\nTango.rs runs both versions simultaneously to eliminate environmental variance.\n\nSources: [docs/DEVELOPMENT.md178-207](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L178-L207)\n\n### Coverage Reporting\n\n**Local Coverage Generation:**\n\n```\n```\n\n**CI Coverage:**\n\n- Daily runs on `dev` branch ([.github/workflows/coverage.yml5-6](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L5-L6))\n- Separate unit and integration coverage\n- Merged reports uploaded to [Codecov](https://app.codecov.io/gh/qdrant/qdrant/)\n\nSources: [docs/DEVELOPMENT.md156-176](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L156-L176) [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L1-L112)\n\n### Real-Time Profiling with Tracy\n\nQdrant supports optional Tracy profiler integration:\n\n**Enable Tracy:**\n\n```\n```\n\n**Enable tokio-console:**\n\n```\n```\n\n**Important:**\n\n- `tracing` is an optional dependency\n- Use `#[cfg_attr(feature = \"tracing\", tracing::instrument)]` for optional tracing\n- Never enable `log` or `log-always` features with tracing-log backend\n\nSources: [docs/DEVELOPMENT.md209-258](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L209-L258)\n\n---\n\n## Docker Development\n\n### Multi-Stage Build Process\n\n```\n```\n\n**Build Arguments:**\n\n| Argument   | Purpose                          | Default    |\n| ---------- | -------------------------------- | ---------- |\n| `PROFILE`  | Cargo profile (release, dev, ci) | `release`  |\n| `FEATURES` | Enable additional features       | `\"\"`       |\n| `GPU`      | GPU support (nvidia, amd)        | `\"\"`       |\n| `LINKER`   | Linker choice (mold, lld)        | `mold`     |\n| `USER_ID`  | Non-root user ID                 | `0` (root) |\n| `PACKAGES` | Extra apt packages (e.g., gdb)   | `\"\"`       |\n| `SOURCES`  | Include source in image          | `\"\"`       |\n\n**Building Custom Images:**\n\n```\n```\n\nSources: [Dockerfile1-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L1-L230) [docs/DEVELOPMENT.md7-40](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L7-L40)\n\n### Development Workflow with Docker\n\n**Run with custom configuration:**\n\n```\n```\n\n**Key mount points:**\n\n- `/qdrant/storage` - Persistent vector data (required)\n- `/qdrant/snapshots` - Backup storage\n- `/qdrant/config/production.yaml` - Config overrides\n- `/qdrant/static` - Web UI assets",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 960,
      "character_count": 3484,
      "created_at": "2025-10-16T17:42:31.146246",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "Sources: [docs/QUICK\\_START.md26-40](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md#L26-L40) [Dockerfile196-211](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L196-L211)\n\n---\n\n## Web UI Synchronization\n\nThe Qdrant web UI is maintained in a separate repository and synced using a utility script:\n\n```\n```\n\nThis script:\n\n1. Downloads latest `dist-qdrant.zip` from [qdrant-web-ui releases](<https://github.com/qdrant/qdrant/blob/48203e41/qdrant-web-ui releases>)\n2. Extracts to `./static/` directory\n3. Copies OpenAPI spec from `./docs/redoc/master/openapi.json` to `./static/openapi.json`\n\nThe script is automatically invoked during Docker builds ([Dockerfile92-94](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L92-L94)).\n\nSources: [tools/sync-web-ui.sh1-27](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh#L1-L27) [docs/DEVELOPMENT.md92-96](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L92-L96)\n\n---\n\n## Integration Test Details\n\n### Test Execution Flow\n\n```\n```\n\n**Environment Variables:**\n\n- `QDRANT__SERVICE__GRPC_PORT=6334` - gRPC port ([tests/integration-tests.sh11](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L11-L11))\n- `QDRANT__CLUSTER__ENABLED=true` - Enable distributed mode ([tests/integration-tests.sh22](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L22-L22))\n- `COVERAGE=1` - Use coverage-instrumented binary ([tests/integration-tests.sh14](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L14-L14))\n- `LLVM_PROFILE_FILE` - Coverage output path ([tests/integration-tests.sh12](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L12-L12))\n\n**Graceful Shutdown:**\n\nFor coverage collection, use `kill -2` (SIGINT) instead of `kill -9` to allow graceful shutdown and coverage data flush ([tests/integration-tests.sh39](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L39-L39)).\n\nSources: [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76)\n\n### Consensus Test Scenarios\n\nThe consensus tests validate distributed Qdrant behavior:\n\n```\n```\n\nThese tests verify:\n\n- Raft consensus protocol correctness\n- Shard replication and failover\n- Cluster scaling operations\n- Snapshot and recovery in distributed mode\n\nSources: [.github/workflows/integration-tests.yml45-84](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L45-L84) [.github/workflows/integration-tests.yml86-118](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L86-L118)\n\n---\n\n## Release Process\n\n### Build Artifacts\n\nThe release workflow ([.github/workflows/release-artifacts.yml1-178](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L1-L178)) produces:\n\n| Artifact             | Platforms                               | Build Target                        |\n| -------------------- | --------------------------------------- | ----------------------------------- |\n| **Linux binaries**   | x86\\_64-gnu, x86\\_64-musl, aarch64-musl | `taiki-e/upload-rust-binary-action` |\n| **macOS binaries**   | x86\\_64-darwin, aarch64-darwin          | Native compilation                  |\n| **Windows binaries** | x86\\_64-windows                         | Native compilation                  |\n| **Debian package**   | x86\\_64-musl                            | `cargo deb`                         |\n| **AppImage**         | x86\\_64                                 | `linuxdeploy` with bundled deps     |\n\n**Debian Package:**\n\n```\n```\n\n**AppImage:**\n\n```\n```",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1005,
      "character_count": 3706,
      "created_at": "2025-10-16T17:42:31.155262",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "Sources: [.github/workflows/release-artifacts.yml1-178](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L1-L178)\n\n### Docker Image Release\n\nDocker images are built on self-hosted runners for tag pushes:\n\n**Image Variants:**\n\n| Tag Pattern                         | Description              | Platforms                |\n| ----------------------------------- | ------------------------ | ------------------------ |\n| `qdrant/qdrant:v1.x.y`              | Release version          | linux/amd64, linux/arm64 |\n| `qdrant/qdrant:latest`              | Latest release           | linux/amd64, linux/arm64 |\n| `qdrant/qdrant:v1.x.y-unprivileged` | Non-root user (UID 1000) | linux/amd64, linux/arm64 |\n| `qdrant/qdrant:v1.x.y-gpu-nvidia`   | NVIDIA GPU support       | linux/amd64              |\n| `qdrant/qdrant:v1.x.y-gpu-amd`      | AMD GPU support          | linux/amd64              |\n\n**Build and Push:**\n\n```\n```\n\nSources: [.github/workflows/docker-image.yml1-148](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L1-L148)\n\n---\n\n## Summary\n\nThis development guide covers the essential workflows for contributing to Qdrant:\n\n1. **Environment Setup**: Install Rust toolchain, protoc, and dependencies\n2. **Building**: Use `cargo build` with appropriate features and profiles\n3. **API Changes**: Update OpenAPI specs and proto files, regenerate schemas\n4. **Testing**: Run unit, integration, consensus, and E2E tests locally and in CI\n5. **Profiling**: Use Criterion, FlameGraph, Tango.rs, and Tracy for performance analysis\n6. **Docker**: Build custom images with multi-stage builds and build arguments\n7. **Release**: Automated builds for multiple platforms and package formats\n\nFor more detailed information on specific topics:\n\n- Configuration: See [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- Docker deployment: See [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- API specifications: See [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md) and [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n\nSources: [docs/DEVELOPMENT.md1-301](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L1-L301) [docs/CONTRIBUTING.md1-50](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md#L1-L50)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page",
    "metadata": {
      "chunk_id": 6,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 637,
      "character_count": 2412,
      "created_at": "2025-10-16T17:42:31.159732",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 6,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  },
  {
    "text": "- [Development Guide](#development-guide.md)\n- [Development Environment Setup](#development-environment-setup.md)\n- [Prerequisites and Dependencies](#prerequisites-and-dependencies.md)\n- [Building Qdrant](#building-qdrant.md)\n- [Development Environment Flow](#development-environment-flow.md)\n- [Nix Development Shell](#nix-development-shell.md)\n- [API Changes Workflow](#api-changes-workflow.md)\n- [REST API Changes](#rest-api-changes.md)\n- [gRPC API Changes](#grpc-api-changes.md)\n- [System Integration Considerations](#system-integration-considerations.md)\n- [Testing Infrastructure](#testing-infrastructure.md)\n- [Test Hierarchy](#test-hierarchy.md)\n- [Running Tests Locally](#running-tests-locally.md)\n- [CI/CD Pipeline](#cicd-pipeline.md)\n- [Performance Profiling and Benchmarking](#performance-profiling-and-benchmarking.md)\n- [Criterion Benchmarks](#criterion-benchmarks.md)\n- [FlameGraph Profiling](#flamegraph-profiling.md)\n- [Tango.rs Comparative Benchmarks](#tangors-comparative-benchmarks.md)\n- [Coverage Reporting](#coverage-reporting.md)\n- [Real-Time Profiling with Tracy](#real-time-profiling-with-tracy.md)\n- [Docker Development](#docker-development.md)\n- [Multi-Stage Build Process](#multi-stage-build-process.md)\n- [Development Workflow with Docker](#development-workflow-with-docker.md)\n- [Web UI Synchronization](#web-ui-synchronization.md)\n- [Integration Test Details](#integration-test-details.md)\n- [Test Execution Flow](#test-execution-flow.md)\n- [Consensus Test Scenarios](#consensus-test-scenarios.md)\n- [Release Process](#release-process.md)\n- [Build Artifacts](#build-artifacts.md)\n- [Docker Image Release](#docker-image-release.md)\n- [Summary](#summary.md)",
    "metadata": {
      "chunk_id": 7,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 429,
      "character_count": 1686,
      "created_at": "2025-10-16T17:42:31.159940",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_qdrant",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 7,
      "file_relative_path": "Qdrant\\qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
      "collection_context": "Qdrant/qdrant_qdrant"
    }
  }
]