[
  {
    "text": "Hybrid Queries - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 966,
      "character_count": 3782,
      "created_at": "2025-10-16T17:42:22.815198",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 852,
      "character_count": 3535,
      "created_at": "2025-10-16T17:42:22.820042",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Concepts](https://qdrant.tech/documentation/concepts/)\n-\n- Hybrid Queries\n\n# Hybrid and Multi-Stage Queries\n\n*Available as of v1.10.0*",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1021,
      "character_count": 4193,
      "created_at": "2025-10-16T17:42:22.825995",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "With the introduction of [many named vectors per point](https://qdrant.tech/documentation/concepts/vectors/#named-vectors), there are use-cases when the best search is obtained by combining multiple queries, or by performing the search in more than one stage.\n\nQdrant has a flexible and universal interface to make this possible, called `Query API` ([API reference](https://api.qdrant.tech/api-reference/search/query-points)).\n\nThe main component for making the combinations of queries possible is the `prefetch` parameter, which enables making sub-requests.\n\nSpecifically, whenever a query has at least one prefetch, Qdrant will:\n\n1. Perform the prefetch query (or queries),\n2. Apply the main query over the results of its prefetch(es).\n\nAdditionally, prefetches can have prefetches themselves, so you can have nested prefetches.\n\nUsing `offset` parameter only affects the main query. This means that the prefetches must have a `limit` of at least `limit + offset` of the main query, otherwise you can get an empty result.\n\n## Hybrid Search\n\nOne of the most common problems when you have different representations of the same data is to combine the queried points for each representation into a single result.\n\nFusing results from multiple queries\n\nFor example, in text search, it is often useful to combine dense and sparse vectors get the best of semantics, plus the best of matching specific words.\n\nQdrant currently has two ways of combining the results from different queries:\n\n- `rrf` - [Reciprocal Rank Fusion](https://plg.uwaterloo.ca/~gvcormac/cormacksigir09-rrf.pdf)\n\nConsiders the positions of results within each query, and boosts the ones that appear closer to the top in multiple of them.\n\n- `dbsf` - [Distribution-Based Score Fusion ](https://medium.com/plain-simple-software/distribution-based-score-fusion-dbsf-a-new-approach-to-vector-search-ranking-f87c37488b18)*(available as of v1.11.0)*\n\nNormalizes the scores of the points in each query, using the mean +/- the 3rd standard deviation as limits, and then sums the scores of the same point across different queries.\n\n`dbsf` is stateless and calculates the normalization limits only based on the results of each query, not on all the scores that it has seen.\n\nHere is an example of Reciprocal Rank Fusion for a query containing two prefetches against different named vectors configured to respectively hold sparse and dense vectors.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": [\n        {\n            \"query\": { \n                \"indices\": [1, 42],    // <┐\n                \"values\": [0.22, 0.8]  // <┴─sparse vector\n             },\n            \"using\": \"sparse\",\n            \"limit\": 20\n        },\n        {\n            \"query\": [0.01, 0.45, 0.67, ...], // <-- dense vector\n            \"using\": \"dense\",\n            \"limit\": 20\n        }\n    ],\n    \"query\": { \"fusion\": \"rrf\" }, // <--- reciprocal rank fusion\n    \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=[\n        models.Prefetch(\n            query=models.SparseVector(indices=[1, 42], values=[0.22, 0.8]),\n            using=\"sparse\",\n            limit=20,\n        ),\n        models.Prefetch(\n            query=[0.01, 0.45, 0.67],  # <-- dense vector\n            using=\"dense\",\n            limit=20,\n        ),\n    ],\n    query=models.FusionQuery(fusion=models.Fusion.RRF),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    prefetch: [\n        {\n            query: {\n                values: [0.22, 0.8],\n                indices: [1, 42],\n            },\n            using: 'sparse',\n            limit: 20,\n        },\n        {\n            query: [0.01, 0.45, 0.67],\n            using: 'dense',\n            limit: 20,\n        },\n    ],\n    query: {\n        fusion: 'rrf',\n    },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Fusion, PrefetchQueryBuilder, Query, QueryPointsBuilder};",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1015,
      "character_count": 4160,
      "created_at": "2025-10-16T17:42:22.832630",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "let client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest([(1, 0.22), (42, 0.8)].as_slice()))\n            .using(\"sparse\")\n            .limit(20u64)\n        )\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .using(\"dense\")\n            .limit(20u64)\n        )\n        .query(Query::new_fusion(Fusion::Rrf))\n).await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport java.util.List;\n\nimport static io.qdrant.client.QueryFactory.fusion;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Fusion;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n    QueryPoints.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .addPrefetch(PrefetchQuery.newBuilder()\n      .setQuery(nearest(List.of(0.22f, 0.8f), List.of(1, 42)))\n      .setUsing(\"sparse\")\n      .setLimit(20)\n      .build())\n    .addPrefetch(PrefetchQuery.newBuilder()\n      .setQuery(nearest(List.of(0.01f, 0.45f, 0.67f)))\n      .setUsing(\"dense\")\n      .setLimit(20)\n      .build())\n    .setQuery(fusion(Fusion.RRF))\n    .build())\n  .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List < PrefetchQuery > {\n    new() {\n      Query = new(float, uint)[] {\n          (0.22f, 1), (0.8f, 42),\n        },\n        Using = \"sparse\",\n        Limit = 20\n    },\n    new() {\n      Query = new float[] {\n          0.01f, 0.45f, 0.67f\n        },\n        Using = \"dense\",\n        Limit = 20\n    }\n  },\n  query: Fusion.Rrf\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tQuery: qdrant.NewQuerySparse([]uint32{1, 42}, []float32{0.22, 0.8}),\n\t\t\tUsing: qdrant.PtrOf(\"sparse\"),\n\t\t},\n\t\t{\n\t\t\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.45, 0.67}),\n\t\t\tUsing: qdrant.PtrOf(\"dense\"),\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryFusion(qdrant.Fusion_RRF),\n})\n```\n\n## Multi-stage queries\n\nIn many cases, the usage of a larger vector representation gives more accurate search results, but it is also more expensive to compute.\n\nSplitting the search into two stages is a known technique:\n\n- First, use a smaller and cheaper representation to get a large list of candidates.\n- Then, re-score the candidates using the larger and more accurate representation.\n\nThere are a few ways to build search architectures around this idea:\n\n- The quantized vectors as a first stage, and the full-precision vectors as a second stage.\n- Leverage Matryoshka Representation Learning ([MRL](https://arxiv.org/abs/2205.13147)) to generate candidate vectors with a shorter vector, and then refine them with a longer one.\n- Use regular dense vectors to pre-fetch the candidates, and then re-score them with a multi-vector model like [ColBERT](https://arxiv.org/abs/2112.01488).\n\nTo get the best of all worlds, Qdrant has a convenient interface to perform the queries in stages, such that the coarse results are fetched first, and then they are refined later with larger vectors.",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1023,
      "character_count": 3691,
      "created_at": "2025-10-16T17:42:22.840114",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "### Re-scoring examples\n\nFetch 1000 results using a shorter MRL byte vector, then re-score them using the full vector and get the top 10.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"query\": [1, 23, 45, 67], // <------------- small byte vector\n        \"using\": \"mrl_byte\"\n        \"limit\": 1000\n    },\n    \"query\": [0.01, 0.299, 0.45, 0.67, ...], // <-- full vector\n    \"using\": \"full\",\n    \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[1, 23, 45, 67],  # <------------- small byte vector\n        using=\"mrl_byte\",\n        limit=1000,\n    ),\n    query=[0.01, 0.299, 0.45, 0.67],  # <-- full vector\n    using=\"full\",\n    limit=10,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  prefetch: {\n    query: [1, 23, 45, 67], // <------------- small byte vector\n    using: 'mrl_byte',\n    limit: 1000,\n  },\n  query: [0.01, 0.299, 0.45, 0.67], // <-- full vector,\n  using: 'full',\n  limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![1.0, 23.0, 45.0, 67.0]))\n            .using(\"mlr_byte\")\n            .limit(1000u64)\n        )\n        .query(Query::new_nearest(vec![0.01, 0.299, 0.45, 0.67]))\n        .using(\"full\")\n        .limit(10u64)\n).await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .addPrefetch(\n                PrefetchQuery.newBuilder()\n                    .setQuery(nearest(1, 23, 45, 67))\t// <------------- small byte vector\n                    .setLimit(1000)\n                    .setUsing(\"mrl_byte\")\n                    .build())\n            .setQuery(nearest(0.01f, 0.299f, 0.45f, 0.67f))\t // <-- full vector\n            .setUsing(\"full\")\n            .setLimit(10)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List<PrefetchQuery> {\n    new() {\n      Query = new float[] { 1,23, 45, 67 }, // <------------- small byte vector\n        Using = \"mrl_byte\",\n        Limit = 1000\n    }\n  },\n  query: new float[] { 0.01f, 0.299f, 0.45f, 0.67f }, // <-- full vector\n  usingVector: \"full\",\n  limit: 10\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1013,
      "character_count": 3352,
      "created_at": "2025-10-16T17:42:22.847721",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "client.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tQuery: qdrant.NewQueryDense([]float32{1, 23, 45, 67}),\n\t\t\tUsing: qdrant.PtrOf(\"mrl_byte\"),\n\t\t\tLimit: qdrant.PtrOf(uint64(1000)),\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.299, 0.45, 0.67}),\n\tUsing: qdrant.PtrOf(\"full\"),\n})\n```\n\nFetch 100 results using the default vector, then re-score them using a multi-vector to get the top 10.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"query\": [0.01, 0.45, 0.67, ...], // <-- dense vector\n        \"limit\": 100\n    },\n    \"query\": [           // <─┐\n        [0.1, 0.2, ...], // < │\n        [0.2, 0.1, ...], // < ├─ multi-vector\n        [0.8, 0.9, ...]  // < │\n    ],                   // <─┘       \n    \"using\": \"colbert\",\n    \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[0.01, 0.45, 0.67, 0.53],  # <-- dense vector\n        limit=100,\n    ),\n    query=[\n        [0.1, 0.2, 0.32],  # <─┐\n        [0.2, 0.1, 0.52],  # < ├─ multi-vector\n        [0.8, 0.9, 0.93],  # < ┘\n    ],\n    using=\"colbert\",\n    limit=10,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    prefetch: {\n        query: [1, 23, 45, 67], // <------------- small byte vector\n        limit: 100,\n    },\n    query: [\n        [0.1, 0.2], // <─┐\n        [0.2, 0.1], // < ├─ multi-vector\n        [0.8, 0.9], // < ┘\n    ],\n    using: 'colbert',\n    limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .limit(100u64)\n        )\n        .query(Query::new_nearest(vec![\n            vec![0.1, 0.2],\n            vec![0.2, 0.1],\n            vec![0.8, 0.9],\n        ]))\n        .using(\"colbert\")\n        .limit(10u64)\n).await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());",
    "metadata": {
      "chunk_id": 6,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 912,
      "character_count": 2732,
      "created_at": "2025-10-16T17:42:22.853369",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 6,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "client\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .addPrefetch(\n                PrefetchQuery.newBuilder()\n                    .setQuery(nearest(0.01f, 0.45f, 0.67f)) // <-- dense vector\n                    .setLimit(100)\n                    .build())\n            .setQuery(\n                nearest(\n                    new float[][] {\n                      {0.1f, 0.2f},\t// <─┐\n                      {0.2f, 0.1f},\t// < ├─ multi-vector\n                      {0.8f, 0.9f}\t// < ┘\n                    }))\n            .setUsing(\"colbert\")\n            .setLimit(10)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List <PrefetchQuery> {\n    new() {\n      Query = new float[] { 0.01f, 0.45f, 0.67f\t},\t// <-- dense vector****\n        Limit = 100\n    }\n  },\n  query: new float[][] {\n    [0.1f, 0.2f], // <─┐\n    [0.2f, 0.1f], // < ├─ multi-vector\n    [0.8f, 0.9f]  // < ┘\n  },\n  usingVector: \"colbert\",\n  limit: 10\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.45, 0.67}),\n\t\t\tLimit: qdrant.PtrOf(uint64(100)),\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryMulti([][]float32{\n\t\t{0.1, 0.2},\n\t\t{0.2, 0.1},\n\t\t{0.8, 0.9},\n\t}),\n\tUsing: qdrant.PtrOf(\"colbert\"),\n})\n```\n\nIt is possible to combine all the above techniques in a single query:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"prefetch\": {\n            \"query\": [1, 23, 45, 67], // <------ small byte vector\n            \"using\": \"mrl_byte\"\n            \"limit\": 1000\n        },\n        \"query\": [0.01, 0.45, 0.67, ...], // <-- full dense vector\n        \"using\": \"full\"\n        \"limit\": 100\n    },\n    \"query\": [           // <─┐\n        [0.1, 0.2, ...], // < │\n        [0.2, 0.1, ...], // < ├─ multi-vector\n        [0.8, 0.9, ...]  // < │\n    ],                   // <─┘       \n    \"using\": \"colbert\",\n    \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        prefetch=models.Prefetch(\n            query=[1, 23, 45, 67],  # <------ small byte vector\n            using=\"mrl_byte\",\n            limit=1000,\n        ),\n        query=[0.01, 0.45, 0.67],  # <-- full dense vector\n        using=\"full\",\n        limit=100,\n    ),\n    query=[\n        [0.17, 0.23, 0.52],  # <─┐\n        [0.22, 0.11, 0.63],  # < ├─ multi-vector\n        [0.86, 0.93, 0.12],  # < ┘\n    ],\n    using=\"colbert\",\n    limit=10,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";",
    "metadata": {
      "chunk_id": 7,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1009,
      "character_count": 3062,
      "created_at": "2025-10-16T17:42:22.858909",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 7,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "const client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  prefetch: {\n    prefetch: {\n      query: [1, 23, 45, 67], // <------------- small byte vector\n      using: 'mrl_byte',\n      limit: 1000,\n    },\n    query: [0.01, 0.45, 0.67],  // <-- full dense vector\n    using: 'full',\n    limit: 100,\n  },\n  query: [\n    [0.1, 0.2], // <─┐\n    [0.2, 0.1], // < ├─ multi-vector\n    [0.8, 0.9], // < ┘\n  ],\n  using: 'colbert',\n  limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .add_prefetch(PrefetchQueryBuilder::default()\n                .query(Query::new_nearest(vec![1.0, 23.0, 45.0, 67.0]))\n                .using(\"mlr_byte\")\n                .limit(1000u64)\n            )\n            .query(Query::new_nearest(vec![0.01, 0.45, 0.67]))\n            .using(\"full\")\n            .limit(100u64)\n        )\n        .query(Query::new_nearest(vec![\n            vec![0.1, 0.2],\n            vec![0.2, 0.1],\n            vec![0.8, 0.9],\n        ]))\n        .using(\"colbert\")\n        .limit(10u64)\n).await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .addPrefetch(\n                PrefetchQuery.newBuilder()\n                    .addPrefetch(\n                        PrefetchQuery.newBuilder()\n                            .setQuery(nearest(1, 23, 45, 67))\t// <------------- small byte vector\n                            .setUsing(\"mrl_byte\")\n                            .setLimit(1000)\n                            .build())\n                    .setQuery(nearest(0.01f, 0.45f, 0.67f)) // <-- dense vector\n                    .setUsing(\"full\")\n                    .setLimit(100)\n                    .build())\n            .setQuery(\n                nearest(\n                    new float[][] {\n                      {0.1f, 0.2f},\t// <─┐\n                      {0.2f, 0.1f},\t// < ├─ multi-vector\n                      {0.8f, 0.9f}\t// < ┘\n                    }))\n            .setUsing(\"colbert\")\n            .setLimit(10)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch: new List <PrefetchQuery> {\n    new() {\n      Prefetch = {\n          new List <PrefetchQuery> {\n            new() {\n              Query = new float[] { 1, 23, 45, 67 }, // <------------- small byte vector\n                Using = \"mrl_byte\",\n                Limit = 1000\n            },\n          }\n        },\n        Query = new float[] {0.01f, 0.45f, 0.67f}, // <-- dense vector\n        Using = \"full\",\n        Limit = 100\n    }\n  },\n  query: new float[][] {\n    [0.1f, 0.2f], // <─┐\n    [0.2f, 0.1f], // < ├─ multi-vector\n    [0.8f, 0.9f]  // < ┘\n  },\n  usingVector: \"colbert\",\n  limit: 10\n);\n```",
    "metadata": {
      "chunk_id": 8,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1016,
      "character_count": 3480,
      "created_at": "2025-10-16T17:42:22.863479",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 8,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "```go\nimport (\n\t\"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t{\n\t\t\tPrefetch: []*qdrant.PrefetchQuery{\n\t\t\t\t{\n\t\t\t\t\tQuery: qdrant.NewQueryDense([]float32{1, 23, 45, 67}),\n\t\t\t\t\tUsing: qdrant.PtrOf(\"mrl_byte\"),\n\t\t\t\t\tLimit: qdrant.PtrOf(uint64(1000)),\n\t\t\t\t},\n\t\t\t},\n\t\t\tQuery: qdrant.NewQueryDense([]float32{0.01, 0.45, 0.67}),\n\t\t\tLimit: qdrant.PtrOf(uint64(100)),\n\t\t\tUsing: qdrant.PtrOf(\"full\"),\n\t\t},\n\t},\n\tQuery: qdrant.NewQueryMulti([][]float32{\n\t\t{0.1, 0.2},\n\t\t{0.2, 0.1},\n\t\t{0.8, 0.9},\n\t}),\n\tUsing: qdrant.PtrOf(\"colbert\"),\n})\n```\n\n### Maximal Marginal Relevance (MMR)\n\n*Available as of v1.15.0*\n\nA useful algorithm to improve the diversity of the results is [Maximal Marginal Relevance (MMR)](https://www.cs.cmu.edu/~jgc/publication/The_Use_MMR_Diversity_Based_LTMIR_1998.pdf). It excels when the dataset has many redundant or very similar points for a query.\n\nMMR selects candidates iteratively, starting with the most relevant point (higher similarity to the query). For each next point, it selects the one that hasn’t been chosen yet which has the best combination of relevance and higher separation to the already selected points.\n\n$$ MMR = \\arg \\max\\_{D\\_i \\in R\\setminus S}\\[\\lambda sim(D\\_i, Q) - (1 - \\lambda)\\max\\_{D\\_j \\in S}sim(D\\_i, D\\_j)] $$\n\nWhere $R$ is the candidates set, $S$ is the selected set, $Q$ is the query vector, $sim$ is the similarity function, and $\\lambda = 1 - diversity$.\n\nThis is implemented in Qdrant as a parameter of a nearest neighbors query. You define the vector to get the nearest candidates, and a `diversity` parameter which controls the balance between relevance (0.0) and diversity (1.0).\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"nearest\": [0.01, 0.45, 0.67, ...], // search vector\n    \"mmr\": {\n      \"diversity\": 0.5, // 0.0 - relevance; 1.0 - diversity\n      \"candidates_limit\": 100 // num of candidates to preselect\n    }\n  },\n  \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.NearestQuery(\n        nearest=[0.01, 0.45, 0.67], # search vector\n        mmr=models.Mmr(\n            diversity=0.5, # 0.0 - relevance; 1.0 - diversity\n            candidates_limit=100, # num of candidates to preselect\n        )\n    ),\n    limit=10,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: {\n    nearest: [0.01, 0.45, 0.67, ...], // search vector\n    mmr: {\n      diversity: 0.5, // 0.0 - relevance; 1.0 - diversity\n      candidates_limit: 100 // num of candidates to preselect\n    }\n  },\n  limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{PrefetchQueryBuilder, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;",
    "metadata": {
      "chunk_id": 9,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 993,
      "character_count": 3180,
      "created_at": "2025-10-16T17:42:22.870269",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 9,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "client.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(Query::new_nearest_with_mmr(\n            vec![0.01, 0.45, 0.67], // search vector\n            MmrBuilder::new()\n                .diversity(0.5) // 0.0 - relevance; 1.0 - diversity\n                .candidates_limit(100) // num of candidates to preselect\n        ))\n        .limit(10)\n).await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Mmr;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setQuery(\n                nearest(\n                    vectorInput(0.01f, 0.45f, 0.67f), // <-- search vector\n                    Mmr.newBuilder()\n                        .setDiversity(0.5f) // 0.0 - relevance; 1.0 - diversity\n                        .setCandidatesLimit(100) // num of candidates to preselect\n                        .build()))\n            .setLimit(10)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: (\n        new float[] { 0.01f, 0.45f, 0.67f },\n        new Mmr\n        {\n            Diversity = 0.5f,         // 0.0 - relevance; 1.0 - diversity\n            CandidatesLimit = 100     // Number of candidates to preselect\n        }\n    ),\n    limit: 10\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery: qdrant.NewQueryMMR(\n\t\tqdrant.NewVectorInput(0.01, 0.45, 0.67),\n\t\t&qdrant.Mmr{\n\t\t\tDiversity:       qdrant.PtrOf(float32(0.5)), // 0.0 - relevance; 1.0 - diversity\n\t\t\tCandidatesLimit: qdrant.PtrOf(uint32(100)),  // num of candidates to preselect\n\t\t}),\n\tLimit: qdrant.PtrOf(uint64(10)),\n})\n```\n\n**Caveat:** Since MMR ranks one point at a time, the scores produced by MMR in Qdrant refer to the similarity to the query vector. This means that the response will not be ordered by score, but rather by the order of selection of MMR.\n\n## Score boosting\n\n*Available as of v1.14.0*\n\nWhen introducing vector search to specific applications, sometimes business logic needs to be considered for ranking the final list of results.\n\nA quick example is [our own documentation search bar](https://github.com/qdrant/page-search). It has vectors for every part of the documentation site. If one were to perform a search by “just” using the vectors, all kinds of elements would be equally considered good results. However, when searching for documentation, we can establish a hierarchy of importance:\n\n`title > content > snippets`\n\nOne way to solve this is to weight the results based on the kind of element. For example, we can assign a higher weight to titles and content, and keep snippets unboosted.\n\nPseudocode would be something like:\n\n`score = score + (is_title * 0.5) + (is_content * 0.25)`\n\nQuery API can rescore points with custom formulas. They can be based on:\n\n- Dynamic payload values\n- Conditions\n- Scores of prefetches\n\nTo express the formula, the syntax uses objects to identify each element. Taking the documentation example, the request would look like this:",
    "metadata": {
      "chunk_id": 10,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 948,
      "character_count": 3667,
      "created_at": "2025-10-16T17:42:22.879426",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 10,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"query\": [0.2, 0.8, ...],  // <-- dense vector\n        \"limit\": 50\n    }\n    \"query\": {\n        \"formula\": {\n            \"sum\": [\n                \"$score\",\n                { \n                    \"mult\": [ \n                        0.5,\n                        { \n                            \"key\": \"tag\",\n                            \"match\": { \"any\": [\"h1\", \"h2\", \"h3\", \"h4\"] } \n                        } \n                    ]\n                },\n                {\n                    \"mult\": [\n                        0.25,\n                        { \n                            \"key\": \"tag\",\n                            \"match\": { \"any\": [\"p\", \"li\"] } \n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import models\n\ntag_boosted = client.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[0.2, 0.8, ...],  # <-- dense vector\n        limit=50\n    ),\n    query=models.FormulaQuery(\n        formula=models.SumExpression(sum=[\n            \"$score\",\n            models.MultExpression(mult=[0.5, models.FieldCondition(key=\"tag\", match=models.MatchAny(any=[\"h1\", \"h2\", \"h3\", \"h4\"]))]),\n            models.MultExpression(mult=[0.25, models.FieldCondition(key=\"tag\", match=models.MatchAny(any=[\"p\", \"li\"]))])\n        ]\n    ))\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst tag_boosted = await client.query(collectionName, {\n  prefetch: {\n    query: [0.2, 0.8, 0.1, 0.9],\n    limit: 50\n  },\n  query: {\n    formula: {\n      sum: [\n        \"$score\",\n        {\n          mult: [ 0.5, { key: \"tag\", match: { any: [\"h1\", \"h2\", \"h3\", \"h4\"] }} ]\n        },\n        {\n          mult: [ 0.25, { key: \"tag\", match: { any: [\"p\", \"li\"] }} ]\n        }\n      ]\n    }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    Condition, Expression, FormulaBuilder, PrefetchQueryBuilder, QueryPointsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet _tag_boosted = client.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .add_prefetch(PrefetchQueryBuilder::default()\n            .query(vec![0.01, 0.45, 0.67])\n            .limit(100u64)\n        )\n        .query(FormulaBuilder::new(Expression::sum_with([\n            Expression::score(),\n            Expression::mult_with([\n                Expression::constant(0.5),\n                Expression::condition(Condition::matches(\"tag\", [\"h1\", \"h2\", \"h3\", \"h4\"])),\n            ]),\n            Expression::mult_with([\n                Expression::constant(0.25),\n                Expression::condition(Condition::matches(\"tag\", [\"p\", \"li\"])),\n            ]),\n        ])))\n        .limit(10)\n    ).await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeywords;\nimport static io.qdrant.client.ExpressionFactory.condition;\nimport static io.qdrant.client.ExpressionFactory.constant;\nimport static io.qdrant.client.ExpressionFactory.mult;\nimport static io.qdrant.client.ExpressionFactory.sum;\nimport static io.qdrant.client.ExpressionFactory.variable;\nimport static io.qdrant.client.QueryFactory.formula;\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Formula;\nimport io.qdrant.client.grpc.Points.MultExpression;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SumExpression;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());",
    "metadata": {
      "chunk_id": 11,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 965,
      "character_count": 3840,
      "created_at": "2025-10-16T17:42:22.885889",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 11,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "client\n  .queryAsync(\n    QueryPoints.newBuilder()\n      .setCollectionName(\"{collection_name}\")\n      .addPrefetch(\n        PrefetchQuery.newBuilder()\n          .setQuery(nearest(0.01f, 0.45f, 0.67f))\n          .setLimit(100)\n          .build())\n      .setQuery(\n        formula(\n          Formula.newBuilder()\n            .setExpression(\n              sum(\n                SumExpression.newBuilder()\n                  .addSum(variable(\"$score\"))\n                  .addSum(\n                    mult(\n                      MultExpression.newBuilder()\n                        .addMult(constant(0.5f))\n                        .addMult(\n                          condition(\n                            matchKeywords(\n                              \"tag\",\n                              List.of(\"h1\", \"h2\", \"h3\", \"h4\"))))\n                        .build()))\n                  .addSum(mult(MultExpression.newBuilder()\n                  .addMult(constant(0.25f))\n                  .addMult(\n                    condition(\n                      matchKeywords(\n                        \"tag\",\n                        List.of(\"p\", \"li\"))))\n                  .build()))\n                  .build()))\n            .build()))\n      .build())\n  .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  prefetch:\n  [\n    new PrefetchQuery { Query = new float[] { 0.01f, 0.45f, 0.67f }, Limit = 100 },\n  ],\n  query: new Formula\n  {\n    Expression = new SumExpression\n    {\n      Sum =\n      {\n        \"$score\",\n        new MultExpression\n        {\n          Mult = { 0.5f, Match(\"tag\", [\"h1\", \"h2\", \"h3\", \"h4\"]) },\n        },\n        new MultExpression { Mult = { 0.25f, Match(\"tag\", [\"p\", \"li\"]) } },\n      },\n    },\n  },\n  limit: 10\n);\n```\n\n```go\nimport (\n    \"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Prefetch: []*qdrant.PrefetchQuery{\n        {\n            Query: qdrant.NewQuery(0.01, 0.45, 0.67),\n        },\n    },\n    Query: qdrant.NewQueryFormula(&qdrant.Formula{\n        Expression: qdrant.NewExpressionSum(&qdrant.SumExpression{\n            Sum: []*qdrant.Expression{\n                qdrant.NewExpressionVariable(\"$score\"),\n                qdrant.NewExpressionMult(&qdrant.MultExpression{\n                    Mult: []*qdrant.Expression{\n                        qdrant.NewExpressionConstant(0.5),\n                        qdrant.NewExpressionCondition(qdrant.NewMatchKeywords(\"tag\", \"h1\", \"h2\", \"h3\", \"h4\")),\n                    },\n                }),\n                qdrant.NewExpressionMult(&qdrant.MultExpression{\n                    Mult: []*qdrant.Expression{\n                        qdrant.NewExpressionConstant(0.25),\n                        qdrant.NewExpressionCondition(qdrant.NewMatchKeywords(\"tag\", \"p\", \"li\")),\n                    },\n                }),\n            },\n        }),\n    }),\n})\n```\n\nThere are multiple expressions available, check the [API docs for specific details](https://api.qdrant.tech/v-1-14-x/api-reference/search/query-points#request.body.query.Query%20Interface.Query.Formula%20Query.formula).",
    "metadata": {
      "chunk_id": 12,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 793,
      "character_count": 3391,
      "created_at": "2025-10-16T17:42:22.889772",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 12,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "- **constant** - A floating point number. e.g. `0.5`.\n- `\"$score\"` - Reference to the score of the point in the prefetch. This is the same as `\"$score[0]\"`.\n- `\"$score[0]\"`, `\"$score[1]\"`, `\"$score[2]\"`, … - When using multiple prefetches, you can reference specific prefetch with the index within the array of prefetches.\n- **payload key** - Any plain string will refer to a payload key. This uses the jsonpath format used in every other place, e.g. `key` or `key.subkey`. It will try to extract a number from the given key.\n- **condition** - A filtering condition. If the condition is met, it becomes `1.0`, otherwise `0.0`.\n- **mult** - Multiply an array of expressions.\n- **sum** - Sum an array of expressions.\n- **div** - Divide an expression by another expression.\n- **abs** - Absolute value of an expression.\n- **pow** - Raise an expression to the power of another expression.\n- **sqrt** - Square root of an expression.\n- **log10** - Base 10 logarithm of an expression.\n- **ln** - Natural logarithm of an expression.\n- **exp** - Exponential function of an expression (`e^x`).\n- **geo distance** - Haversine distance between two geographic points. Values need to be `{ \"lat\": 0.0, \"lon\": 0.0 }` objects.\n- **decay** - Apply a decay function to an expression, which clamps the output between 0 and 1. Available decay functions are **linear**, **exponential**, and **gaussian**. [See more](#boost-points-closer-to-user.md).\n- **datetime** - Parse a datetime string (see formats [here](https://qdrant.tech/documentation/concepts/payload/#datetime)), and use it as a POSIX timestamp, in seconds.\n- **datetime key** - Specify that a payload key contains a datetime string to be parsed into POSIX seconds.\n\nIt is possible to define a default for when the variable (either from payload or prefetch score) is not found. This is given in the form of a mapping from variable to value. If there is no variable, and no defined default, a default value of `0.0` is used.\n\n**Considerations when using formula queries:**\n\n- Formula queries can only be used as a rescoring step.\n- Formula results are always sorted in descending order (bigger is better). **For euclidean scores, make sure to negate them** to sort closest to farthest.\n- If a score or variable is not available, and there is no default value, it will return an error.\n- If a value is not a number (or the expected type), it will return an error.\n- To leverage payload indices, single-value arrays are considered the same as the inner value. For example: `[0.2]` is the same as `0.2`, but `[0.2, 0.7]` will be interpreted as `[0.2, 0.7]`\n- Multiplication and division are lazily evaluated, meaning that if a 0 is encountered, the rest of operations don’t execute (e.g. `0.0 * condition` won’t check the condition).\n- Payload variables used within the formula also benefit from having payload indices. Please try to always have a payload index set up for the variables used in the formula for better performance.\n\n### Boost points closer to user\n\nAnother example. Combine the score with how close the result is to a user.\n\nConsidering each point has an associated geo location, we can calculate the distance between the point and the request’s location.\n\nAssuming we have cosine scores in the prefetch, we can use a helper function to clamp the geographical distance between 0 and 1, by using a decay function. Once clamped, we can sum the score and the distance together. Pseudocode:\n\n`score = score + gauss_decay(distance)`\n\nIn this case we use a **gauss\\_decay** function.",
    "metadata": {
      "chunk_id": 13,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 865,
      "character_count": 3529,
      "created_at": "2025-10-16T17:42:22.893518",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 13,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": { \"query\": [0.2, 0.8, ...], \"limit\": 50 },\n    \"query\": {\n        \"formula\": {\n            \"sum\": [\n                \"$score\",\n                {\n                    \"gauss_decay\": {\n                        \"x\": {\n                            \"geo_distance\": {\n                                \"origin\": { \"lat\": 52.504043, \"lon\": 13.393236 }\n                                \"to\": \"geo.location\"\n                            }\n                        },\n                        \"scale\": 5000 // 5km\n                    }\n                }\n            ]\n        },\n        \"defaults\": { \"geo.location\": {\"lat\": 48.137154, \"lon\": 11.576124} }\n    }\n}\n```\n\n```python\nfrom qdrant_client import models\n\ngeo_boosted = client.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[0.2, 0.8, ...],  # <-- dense vector\n        limit=50\n    ),\n    query=models.FormulaQuery(\n        formula=models.SumExpression(sum=[\n            \"$score\",\n            models.GaussDecayExpression(\n                gauss_decay=models.DecayParamsExpression(\n                    x=models.GeoDistance(\n                        geo_distance=models.GeoDistanceParams(\n                            origin=models.GeoPoint(\n                                lat=52.504043,\n                                lon=13.393236\n                            ),  # Berlin\n                            to=\"geo.location\"\n                        )\n                    ),\n                    scale=5000  # 5km\n                )\n            )\n        ]),\n        defaults={\"geo.location\": models.GeoPoint(lat=48.137154, lon=11.576124)}  # Munich\n    )\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst distance_boosted = await client.query(collectionName, {\n  prefetch: {\n    query: [0.2, 0.8, ...],\n    limit: 50\n  },\n  query: {\n    formula: {\n      sum: [\n        \"$score\",\n        {\n          gauss_decay: {\n            x: {\n              geo_distance: {\n                origin: { lat: 52.504043, lon: 13.393236 }, // Berlin\n                to: \"geo.location\"\n              }\n            },\n            scale: 5000 // 5km\n          }\n        }\n      ]\n    },\n    defaults: { \"geo.location\": { lat: 48.137154, lon: 11.576124 } } // Munich\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    GeoPoint,  DecayParamsExpressionBuilder, Expression, FormulaBuilder, PrefetchQueryBuilder, QueryPointsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet _geo_boosted = client.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n            .add_prefetch(\n                PrefetchQueryBuilder::default()\n                    .query(vec![0.01, 0.45, 0.67])\n                    .limit(100u64),\n            )\n            .query(\n                FormulaBuilder::new(Expression::sum_with([\n                    Expression::score(),\n                    Expression::exp_decay(\n                        DecayParamsExpressionBuilder::new(Expression::geo_distance_with(\n                            // Berlin\n                            GeoPoint { lat: 52.504043, lon: 13.393236 },\n                            \"geo.location\",\n                        ))\n                        .scale(5_000.0),\n                    ),\n                ]))\n                // Munich\n                .add_default(\"geo.location\", GeoPoint { lat: 48.137154, lon: 11.576124 }),\n            )\n            .limit(10),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ExpressionFactory.expDecay;\nimport static io.qdrant.client.ExpressionFactory.geoDistance;\nimport static io.qdrant.client.ExpressionFactory.sum;\nimport static io.qdrant.client.ExpressionFactory.variable;\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.QueryFactory.formula;\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.ValueFactory.value;",
    "metadata": {
      "chunk_id": 14,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 921,
      "character_count": 4065,
      "created_at": "2025-10-16T17:42:22.897640",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 14,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.DecayParamsExpression;\nimport io.qdrant.client.grpc.Points.Formula;\nimport io.qdrant.client.grpc.Points.GeoDistance;\nimport io.qdrant.client.grpc.Points.GeoPoint;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SumExpression;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .queryAsync(\n    QueryPoints.newBuilder()\n      .setCollectionName(\"{collection_name}\")\n      .addPrefetch(\n        PrefetchQuery.newBuilder()\n          .setQuery(nearest(0.01f, 0.45f, 0.67f))\n          .setLimit(100)\n          .build())\n      .setQuery(\n        formula(\n          Formula.newBuilder()\n            .setExpression(\n              sum(\n                SumExpression.newBuilder()\n                  .addSum(variable(\"$score\"))\n                  .addSum(\n                    expDecay(\n                      DecayParamsExpression.newBuilder()\n                        .setX(\n                          geoDistance(\n                            GeoDistance.newBuilder()\n                              .setOrigin(\n                                GeoPoint.newBuilder()\n                                  .setLat(52.504043)\n                                  .setLon(13.393236)\n                                  .build())\n                              .setTo(\"geo.location\")\n                              .build()))\n                        .setScale(5000)\n                        .build()))\n                  .build()))\n            .putDefaults(\n              \"geo.location\",\n              value(\n                Map.of(\n                  \"lat\", value(48.137154),\n                  \"lon\", value(11.576124))))\n            .build()))\n      .build())\n  .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Expression;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    prefetch:\n    [\n        new PrefetchQuery { Query = new float[] { 0.01f, 0.45f, 0.67f }, Limit = 100 },\n    ],\n    query: new Formula\n    {\n        Expression = new SumExpression\n        {\n            Sum =\n            {\n                \"$score\",\n                FromExpDecay(\n                    new()\n                    {\n                        X = new GeoDistance\n                        {\n                            Origin = new GeoPoint { Lat = 52.504043, Lon = 13.393236 },\n                            To = \"geo.location\",\n                        },\n                        Scale = 5000,\n                    }\n                ),\n            },\n        },\n        Defaults =\n        {\n            [\"geo.location\"] = new Dictionary<string, Value>\n            {\n                [\"lat\"] = 48.137154,\n                [\"lon\"] = 11.576124,\n            },\n        },\n    }\n);\n```\n\n```go\nimport (\n    \"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Prefetch: []*qdrant.PrefetchQuery{\n        {\n            Query: qdrant.NewQuery(0.2, 0.8),\n        },\n    },\n    Query: qdrant.NewQueryFormula(&qdrant.Formula{\n        Expression: qdrant.NewExpressionSum(&qdrant.SumExpression{\n            Sum: []*qdrant.Expression{\n                qdrant.NewExpressionVariable(\"$score\"),\n                qdrant.NewExpressionExpDecay(&qdrant.DecayParamsExpression{\n                    X: qdrant.NewExpressionGeoDistance(&qdrant.GeoDistance{\n                        Origin: &qdrant.GeoPoint{\n                            Lat: 52.504043,\n                            Lon: 13.393236,\n                        },\n                        To: \"geo.location\",\n                    }),\n                }),\n            },\n        }),\n        Defaults: qdrant.NewValueMap(map[string]any{\n            \"geo.location\": map[string]any{\n                \"lat\": 48.137154,\n                \"lon\": 11.576124,\n            },\n        }),\n    }),\n})\n```\n\n### Time-based score boosting\n\nOr combine the score with the information on how “fresh” the result is. It’s applicable to (news) articles and in general many other different types of searches (think of the “newest” filter you use in applications).\n\nTo implement time-based score boosting, you’ll need each point to have a datetime field in its payload, e.g., when the item was uploaded or last updated. Then we can calculate the time difference in seconds between this payload value and the current time, our `target`.",
    "metadata": {
      "chunk_id": 15,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1022,
      "character_count": 4756,
      "created_at": "2025-10-16T17:42:22.903214",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 15,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "With an exponential decay function, perfect for use cases with time, as freshness is a very quickly lost quality, we can convert this time difference into a value between 0 and 1, then add it to the original score to prioritise fresh results.\n\n`score = score + exp_decay(current_time - point_time)`\n\nThat’s how it will look for an application where, after 1 day, results start being only half-relevant (so get a score of 0.5):\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"prefetch\": {\n        \"query\": [0.2, 0.8, ...],  // <-- dense vector\n        \"limit\": 50\n    },\n    \"query\": {\n        \"formula\": {\n            \"sum\": [\n                \"$score\", // the final score = score + exp_decay(target_time - x_time)\n                {\n                    \"exp_decay\": {\n                        \"x\": {\n                            \"datetime_key\": \"update_time\" // payload key\n                        },\n                        \"target\": {\n                            \"datetime\": \"YYYY-MM-DDT00:00:00Z\" // current datetime\n                        },\n                        \"scale\": 86400, // 1 day in seconds\n                        \"midpoint\": 0.5 // if item's \"update_time\" is more than 1 day apart from current datetime, relevance score is less than 0.5\n                    }\n                }\n            ]\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import models\n\ntime_boosted = client.query_points(\n    collection_name=\"{collection_name}\",\n    prefetch=models.Prefetch(\n        query=[0.2, 0.8, ...],  # <-- dense vector\n        limit=50\n    ),\n    query=models.FormulaQuery(\n        formula=models.SumExpression(\n            sum=[\n                \"$score\", # the final score = score + exp_decay(target_time - x_time)\n                models.ExpDecayExpression(\n                    exp_decay=models.DecayParamsExpression(\n                        x=models.DatetimeKeyExpression(\n                            datetime_key=\"upload_time\" # payload key \n                        ),\n                        target=models.DatetimeExpression(\n                            datetime=\"YYYY-MM-DDT00:00:00Z\" # current datetime\n                        ),\n                        scale=86400, # 1 day in seconds\n                        midpoint=0.5 # if item's \"update_time\" is more than 1 day apart from current datetime, relevance score is less than 0.5\n                    )\n                )\n            ]\n        )\n    )\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst time_boosted = await client.query(collectionName, {\n  prefetch: {\n    query: [0.2, 0.8, ...], // <-- dense vector\n    limit: 50\n  },\n   query: {\n      formula: {\n          sum: [ //  the final score = score + exp_decay(target_time - x_time)\n              \"$score\",\n              {\n                  exp_decay: {\n                      x: {\n                          datetime_key: \"update_time\" // payload key\n                      },\n                      target: {\n                          datetime: \"YYYY-MM-DDT00:00:00Z\" // current datetime\n                      },\n                      midpoint: 0.5,\n                      scale: 86400 // 1 day in seconds\n                  }\n              }\n          ]\n      }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    DecayParamsExpressionBuilder, Expression, FormulaBuilder, PrefetchQueryBuilder, QueryPointsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet _geo_boosted = client.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n            .add_prefetch(\n                PrefetchQueryBuilder::default()\n                    .query(vec![0.2, 0.8, .., ..]) // <-- dense vector\n                    .limit(50u64),\n            )\n            .query(\n                FormulaBuilder::new(Expression::sum_with([ //  the final score = score + exp_decay(target_time - x_time)\n                    Expression::score(),\n                    Expression::exp_decay(\n                        DecayParamsExpressionBuilder::new(Expression::datetime_key(\"update_time\")) // payload key\n                            .target(Expression::datetime(\"YYYY-MM-DDT00:00:00Z\"))\n                            .midpoint(0.5)\n                            .scale(86400.0), // 1 day in seconds\n                    ),\n                ]))\n            )\n    )\n    .await?;\n```",
    "metadata": {
      "chunk_id": 16,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 969,
      "character_count": 4440,
      "created_at": "2025-10-16T17:42:22.907702",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 16,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.DecayParamsExpression;\nimport io.qdrant.client.grpc.Points.Formula;\nimport io.qdrant.client.grpc.Points.PrefetchQuery;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.ScoredPoint;\nimport io.qdrant.client.grpc.Points.SumExpression;\nimport java.util.List;\n\nimport static io.qdrant.client.ExpressionFactory.datetime;\nimport static io.qdrant.client.ExpressionFactory.datetimeKey;\nimport static io.qdrant.client.ExpressionFactory.expDecay;\nimport static io.qdrant.client.ExpressionFactory.sum;\nimport static io.qdrant.client.ExpressionFactory.variable;\nimport static io.qdrant.client.QueryFactory.formula;\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nList<ScoredPoint> time_boosted = client.queryAsync(\n    QueryPoints.newBuilder()\n        .setCollectionName({collection_name})\n        .addPrefetch(\n            PrefetchQuery.newBuilder()\n                .setQuery(nearest(0.2f, 0.8f, .., ..))  // <-- dense vector\n                .setLimit(50)\n                .build())\n        .setQuery(\n            formula(\n                Formula.newBuilder()\n                    .setExpression(\n                        sum( //  the final score = score + exp_decay(target_time - x_time)\n                            SumExpression.newBuilder()\n                                .addSum(variable(\"$score\"))\n                                .addSum(\n                                    expDecay(\n                                        DecayParamsExpression.newBuilder()\n                                            .setX(\n                                                datetimeKey(\"update_time\"))  // payload key\n                                            .setTarget(\n                                                datetime(\"YYYY-MM-DDT00:00:00Z\"))  // current datetime\n                                            .setMidpoint(0.5f)\n                                            .setScale(86400)  // 1 day in seconds\n                                            .build()))\n                                .build()))\n                    .build()))\n        .build()\n).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    prefetch:\n    [\n        new PrefetchQuery { Query = new float[] { 0.2f, 0.8f, ..., .. }, Limit = 50 }, // <-- dense vector\n    ],\n    query: new Formula\n     {\n        Expression = new SumExpression\n        {\n            Sum = //  the final score = score + exp_decay(target_time - x_time)\n            {\n                \"$score\",\n                Expression.FromExpDecay(\n                    new()\n                    {\n                        X = Expression.FromDateTimeKey(\"update_time\"),  // payload key\n                        Target = Expression.FromDateTime(\"YYYY-MM-DDT00:00:00Z\"),  // current datetime\n                        Midpoint = 0.5f,\n                        Scale = 86400 // 1 day in seconds\n                    }\n                )\n            }\n        }\n    }\n);\n```\n\n```go\nimport (\n    \"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Prefetch: []*qdrant.PrefetchQuery{\n        {\n            Query: qdrant.NewQuery(0.2, 0.8, .., ...), // <-- dense vector\n            Limit: qdrant.PtrOf(uint64(50)),\n        },\n    },\n    Query: qdrant.NewQueryFormula(&qdrant.Formula{\n        Expression: qdrant.NewExpressionSum(&qdrant.SumExpression{\n            Sum: []*qdrant.Expression{ //  the final score = score + exp_decay(target_time - x_time)\n                qdrant.NewExpressionVariable(\"$score\"), \n                qdrant.NewExpressionExpDecay(&qdrant.DecayParamsExpression{\n                    X: qdrant.NewExpressionDatetimeKey(\"update_time\"), // payload key\n                    Target: qdrant.NewExpressionDatetime(\"YYYY-MM-DDT00:00:00Z\"), // current datetime\n                    Scale:  qdrant.PtrOf(float32(86400)), // 1 day in seconds\n                    Midpoint: qdrant.PtrOf(float32(0.5)),\n                }),\n            },\n        }),\n    }),\n})\n```\n\nFor all decay functions, there are these parameters available",
    "metadata": {
      "chunk_id": 17,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 981,
      "character_count": 4539,
      "created_at": "2025-10-16T17:42:22.912682",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 17,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "| Parameter  | Default | Description                                                                                                                                                                                       |\n| ---------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `x`        | N/A     | The value to decay                                                                                                                                                                                |\n| `target`   | 0.0     | The value at which the decay will be at its peak. For distances it is usually set at 0.0, but can be set to any value.                                                                            |\n| `scale`    | 1.0     | The value at which the decay function will be equal to `midpoint`. This is in terms of `x` units, for example, if `x` is in meters, `scale` of 5000 means 5km. Must be a non-zero positive number |\n| `midpoint` | 0.5     | Output is `midpoint` when `x` equals `scale`. Must be in the range (0.0, 1.0), exclusive                                                                                                          |\n\nThe formulas for each decay function are as follows:\n\n| Decay Function    | Color  | Range    | Formula                                                                                                      |\n| ----------------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------ |\n| **`lin_decay`**   | green  | `[0, 1]` | $\\text{lin\\_decay}(x) = \\max\\left(0,\\ -\\frac{(1-m\\_{idpoint})}{s\\_{cale}}\\cdot {abs}(x-t\\_{arget})+1\\right)$ |\n| **`exp_decay`**   | red    | `(0, 1]` | $\\text{exp\\_decay}(x) = \\exp\\left(\\frac{\\ln(m\\_{idpoint})}{s\\_{cale}}\\cdot {abs}(x-t\\_{arget})\\right)$       |\n| **`gauss_decay`** | purple | `(0, 1]` | $\\text{gauss\\_decay}(x) = \\exp\\left(\\frac{\\ln(m\\_{idpoint})}{s\\_{cale}^{2}}\\cdot (x-t\\_{arget})^{2}\\right)$  |\n\n## Grouping\n\n*Available as of v1.11.0*\n\nIt is possible to group results by a certain field. This is useful when you have multiple points for the same item, and you want to avoid redundancy of the same item in the results.\n\nREST API ([Schema](https://api.qdrant.tech/master/api-reference/search/query-points-groups)):\n\n```http\nPOST /collections/{collection_name}/points/query/groups\n{\n    // Same as in the regular query API\n    \"query\": [1.1],\n    // Grouping parameters\n    \"group_by\": \"document_id\",  // Path of the field to group by\n    \"limit\": 4,                 // Max amount of groups\n    \"group_size\": 2            // Max amount of points per group\n}\n```\n\n```python\nclient.query_points_groups(\n    collection_name=\"{collection_name}\",\n    # Same as in the regular query_points() API\n    query=[1.1],\n    # Grouping parameters\n    group_by=\"document_id\",  # Path of the field to group by\n    limit=4,  # Max amount of groups\n    group_size=2,  # Max amount of points per group\n)\n```\n\n```typescript\nclient.queryGroups(\"{collection_name}\", {\n    query: [1.1],\n    group_by: \"document_id\",\n    limit: 4,\n    group_size: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointGroupsBuilder;\n\nclient\n    .query_groups(\n        QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .group_size(2u64)\n            .with_payload(true)\n            .with_vectors(true)\n            .limit(4u64),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.SearchPointGroups;\n\nclient.queryGroupsAsync(\n        QueryPointGroups.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setGroupBy(\"document_id\")\n                .setLimit(4)\n                .setGroupSize(2)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);",
    "metadata": {
      "chunk_id": 18,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 963,
      "character_count": 4131,
      "created_at": "2025-10-16T17:42:22.921207",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 18,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  },
  {
    "text": "await client.QueryGroupsAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    groupBy: \"document_id\",\n    limit: 4,\n    groupSize: 2\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tGroupBy:        \"document_id\",\n\tGroupSize:      qdrant.PtrOf(uint64(2)),\n})\n```\n\nFor more information on the `grouping` capabilities refer to the reference documentation for search with [grouping](https://qdrant.tech/documentation/concepts/search/#search-groups) and [lookup](https://qdrant.tech/documentation/concepts/search/#lookup-in-groups).\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Hybrid and Multi-Stage Queries](#hybrid-and-multi-stage-queries.md)\n\n- [Hybrid Search](#hybrid-search.md)\n\n- [Multi-stage queries](#multi-stage-queries.md)\n\n- [Re-scoring examples](#re-scoring-examples.md)\n    - [Maximal Marginal Relevance (MMR)](#maximal-marginal-relevance-mmr.md)\n\n- [Score boosting](#score-boosting.md)\n\n- [Boost points closer to user](#boost-points-closer-to-user.md)\n    - [Time-based score boosting](#time-based-score-boosting.md)\n\n- [Grouping](#grouping.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/hybrid-queries.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "chunk_id": 19,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 612,
      "character_count": 2162,
      "created_at": "2025-10-16T17:42:22.925288",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_documentation",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 19,
      "file_relative_path": "qdrant_documentation\\documentation_concepts_hybrid-queries\\_documentation_concepts_hybrid-queries_.md",
      "collection_context": "Qdrant/qdrant_documentation"
    }
  }
]