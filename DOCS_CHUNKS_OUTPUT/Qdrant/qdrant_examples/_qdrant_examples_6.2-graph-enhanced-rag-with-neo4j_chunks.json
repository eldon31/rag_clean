[
  {
    "text": "Graph-Enhanced RAG with Neo4j | qdrant/examples | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/examples](https://github.com/qdrant/examples \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 26 June 2025 ([b3c4b2](https://github.com/qdrant/examples/commits/b3c4b28f))\n\n- [Overview](qdrant/examples/1-overview.md)\n- [Getting Started with Qdrant](qdrant/examples/2-getting-started-with-qdrant.md)\n- [Text Data Applications](qdrant/examples/3-text-data-applications.md)\n- [Code Search with Dual Embeddings](qdrant/examples/3.1-code-search-with-dual-embeddings.md)\n- [Extractive Question Answering](qdrant/examples/3.2-extractive-question-answering.md)\n- [Movie Recommendations with Sparse Vectors](qdrant/examples/3.3-movie-recommendations-with-sparse-vectors.md)\n- [Image Data Applications](qdrant/examples/4-image-data-applications.md)\n- [E-commerce Reverse Image Search](qdrant/examples/4.1-e-commerce-reverse-image-search.md)\n- [Medical Image Search with Vision Transformers](qdrant/examples/4.2-medical-image-search-with-vision-transformers.md)\n- [Audio Data Applications](qdrant/examples/5-audio-data-applications.md)\n- [Music Recommendation Engine](qdrant/examples/5.1-music-recommendation-engine.md)\n- [Advanced RAG Systems](qdrant/examples/6-advanced-rag-systems.md)\n- [Multivector RAG with DSPy](qdrant/examples/6.1-multivector-rag-with-dspy.md)\n- [Graph-Enhanced RAG with Neo4j](qdrant/examples/6.2-graph-enhanced-rag-with-neo4j.md)\n- [PDF Retrieval at Scale](qdrant/examples/6.3-pdf-retrieval-at-scale.md)\n- [Agentic Systems with CrewAI](qdrant/examples/7-agentic-systems-with-crewai.md)\n- [Meeting Analysis with Agentic RAG](qdrant/examples/7.1-meeting-analysis-with-agentic-rag.md)\n- [Additional Use Cases](qdrant/examples/8-additional-use-cases.md)\n- [Self-Query Systems with LangChain](qdrant/examples/8.1-self-query-systems-with-langchain.md)\n- [Development Environment Setup](qdrant/examples/8.2-development-environment-setup.md)\n\nMenu\n\n# Graph-Enhanced RAG with Neo4j\n\nRelevant source files\n\n- [graphrag\\_neo4j/readme.md](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md)\n\n## Purpose and Scope\n\nThis page documents the Graph-Enhanced Retrieval-Augmented Generation (RAG) system that integrates Neo4j, Qdrant, and OpenAI's GPT models. The system extracts structured graph relationships from unstructured text, stores them in a Neo4j graph database, and combines these graph relationships with vector search from Qdrant to enhance the context provided to language models. This approach allows for more precise and relationship-aware responses compared to traditional RAG systems that rely solely on vector similarity.\n\nFor information about other RAG implementations, see [Recency-Aware RAG with LlamaIndex](qdrant/examples/6.1-multivector-rag-with-dspy.md).\n\nSources: [graphrag\\_neo4j/readme.md1-12](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L1-L12)\n\n## System Architecture\n\nThe Graph-Enhanced RAG system implements a pipeline in `graphrag.py` that coordinates three main technologies: `neo4j-graphrag[qdrant]` for graph operations, Qdrant for vector search, and OpenAI for both extraction and generation.\n\n```\n```\n\n**Diagram: Graph-Enhanced RAG System Architecture with Code Components**",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6.2-graph-enhanced-rag-with-neo4j.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 922,
      "character_count": 3388,
      "created_at": "2025-10-16T17:42:29.658307",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_examples",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Qdrant\\qdrant_examples\\_qdrant_examples_6.2-graph-enhanced-rag-with-neo4j.md",
      "collection_context": "Qdrant/qdrant_examples"
    }
  },
  {
    "text": "Sources: [graphrag\\_neo4j/readme.md5-11](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L5-L11) [graphrag\\_neo4j/readme.md72-90](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L72-L90) [graphrag\\_neo4j/readme.md144-146](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L144-L146)\n\n## Key Components\n\n### 1. Graph Extraction\n\nThe Graph Extraction component uses OpenAI's GPT models to parse unstructured text and identify entities and relationships between them. This process transforms raw text into a structured graph representation.\n\n```\n```\n\n**Diagram: Graph Extraction Process**\n\nThe extraction process creates a JSON structure containing source entities, target entities, and the relationships between them. This structured data forms the basis for the graph database.\n\nSources: [graphrag\\_neo4j/readme.md96-107](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L96-L107)\n\n### 2. Neo4j Integration\n\nThe Neo4j integration component ingests the extracted graph components into a Neo4j graph database, enabling advanced graph queries.\n\n```\n```\n\n**Diagram: Neo4j Data Ingestion**\n\nNeo4j stores nodes labeled as `Entity` and creates relationships between them based on the extracted data. This graph structure allows for traversing relationships and finding connections between entities that might not be apparent in raw text.\n\nSources: [graphrag\\_neo4j/readme.md108-115](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L108-L115)\n\n### 3. Qdrant Vector Search\n\nThe Qdrant component handles the vector search functionality, enabling semantic search based on text embeddings.\n\n```\n```\n\n**Diagram: Qdrant Vector Search Process**\n\nThe system computes embeddings for text segments using OpenAI's embedding models and stores these vectors in a Qdrant collection. When a query is received, it's similarly embedded and matched against the stored vectors to find semantically similar content.\n\nSources: [graphrag\\_neo4j/readme.md116-123](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L116-L123)\n\n### 4. Retrieval-Augmented Generation\n\nThe RAG component combines the results from both the vector search and graph database to provide comprehensive context for the language model.\n\n```\n```\n\n**Diagram: Retrieval-Augmented Generation Process**\n\nThis integrated approach provides several advantages:\n\n- Vector search finds relevant text passages based on semantic similarity\n- Graph context provides structured relationship information\n- Combined context enables the language model to generate more accurate and insightful responses\n\nSources: [graphrag\\_neo4j/readme.md124-131](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L124-L131)\n\n## Implementation Details\n\nThe system is implemented in `graphrag.py` which integrates multiple Python packages and external APIs through a structured pipeline.\n\n### Python Dependencies and Integration\n\n```\n```\n\n**Diagram: Python Dependencies and Pipeline Integration**\n\n### Pipeline Execution Steps\n\nThe `graphrag.py` script executes the following sequence:\n\n1. **Environment Initialization** - Uses `python-dotenv` to load API credentials from `.env`\n2. **Graph Extraction** - Leverages `openai` package and `pydantic` for structured JSON parsing\n3. **Data Ingestion** - Uses `neo4j-graphrag[qdrant]` to insert into both databases simultaneously\n4. **Retrieval & Graph Querying** - Combines Qdrant vector search with Neo4j graph traversal\n5. **RAG Generation** - Merges contexts and generates responses via OpenAI GPT\n\nSources: [graphrag\\_neo4j/readme.md72-90](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L72-L90) [graphrag\\_neo4j/readme.md134-149](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L134-L149)\n\n## Configuration and Setup\n\nThe system requires configuration for three external services:",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6.2-graph-enhanced-rag-with-neo4j.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 975,
      "character_count": 3965,
      "created_at": "2025-10-16T17:42:29.668516",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_examples",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Qdrant\\qdrant_examples\\_qdrant_examples_6.2-graph-enhanced-rag-with-neo4j.md",
      "collection_context": "Qdrant/qdrant_examples"
    }
  },
  {
    "text": "| Service | Required Configuration                          |\n| ------- | ----------------------------------------------- |\n| Qdrant  | API key and URL for Qdrant instance             |\n| Neo4j   | Connection URI, username, and password          |\n| OpenAI  | API key for accessing GPT models and embeddings |\n\nThese configurations should be stored in a `.env` file in the project root directory.\n\n### Environment Setup\n\nCreate a `.env` file based on `.env.sample`:\n\n```\n# Qdrant configuration\nQDRANT_KEY=your_qdrant_api_key\nQDRANT_URL=your_qdrant_instance_url\n\n# Neo4j configuration\nNEO4J_URI=bolt://localhost:7687\nNEO4J_USERNAME=your_neo4j_username\nNEO4J_PASSWORD=your_neo4j_password\n\n# OpenAI configuration\nOPENAI_API_KEY=your_openai_api_key\n```\n\n### Dependencies and Project Structure\n\n| File               | Purpose                                                                                |\n| ------------------ | -------------------------------------------------------------------------------------- |\n| `graphrag.py`      | Main pipeline implementation containing all graph extraction, ingestion, and RAG logic |\n| `requirements.txt` | Python package dependencies                                                            |\n| `.env.sample`      | Template for environment variables configuration                                       |\n| `.env`             | Actual environment variables (created from sample)                                     |\n\n**Required Python Packages:**\n\n- `neo4j-graphrag[qdrant]` - Integrated graph and vector database operations\n- `python-dotenv` - Environment variable loading\n- `pydantic` - Data validation for JSON extraction\n- `openai` - GPT models and embeddings API\n\nSources: [graphrag\\_neo4j/readme.md14-60](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L14-L60) [graphrag\\_neo4j/readme.md134-149](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L134-L149)\n\n## Usage\n\n### Running the System\n\nExecute the complete pipeline with:\n\n```\n```\n\n### Pipeline Operations\n\nThe `graphrag.py` script performs these operations in sequence:\n\n| Step | Operation                  | Technical Details                                                             |\n| ---- | -------------------------- | ----------------------------------------------------------------------------- |\n| 1    | Environment Initialization | Loads credentials from `.env` using `python-dotenv`                           |\n| 2    | Graph Extraction           | Uses OpenAI GPT to parse text into structured JSON with `pydantic` validation |\n| 3    | Neo4j Ingestion            | Creates `Entity` nodes and relationship edges via `neo4j-graphrag`            |\n| 4    | Qdrant Ingestion           | Generates embeddings with OpenAI API and stores in Qdrant collection          |\n| 5    | Vector Search              | Performs semantic search against Qdrant embeddings                            |\n| 6    | Graph Querying             | Executes Neo4j queries to find related entities and relationships             |\n| 7    | RAG Generation             | Merges vector and graph contexts for OpenAI GPT response generation           |\n\n### Console Output\n\nThe script provides detailed logging for:\n\n- Graph extraction progress and JSON validation\n- Database ingestion status for both Neo4j and Qdrant\n- Vector search results and similarity scores\n- Graph query results and relationship traversals\n- Final generated responses with context sources\n\nSources: [graphrag\\_neo4j/readme.md64-90](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L64-L90)\n\n## Advantages of Graph-Enhanced RAG\n\nThe integration of graph databases with vector search offers several benefits over traditional RAG systems:\n\n| Feature                | Benefit                                                                                      |\n| ---------------------- | -------------------------------------------------------------------------------------------- |\n| Relationship awareness | Captures explicit relationships between entities that may not be apparent in raw text        |\n| Structured context     | Provides language models with structured information about how entities relate to each other |\n| Improved reasoning     | Enables more accurate responses for queries that require understanding relationships         |\n| Fact verification      | Graph data can serve as a structured knowledge base to verify generated content              |\n| Complex query support  | Supports multi-hop relationship queries that would be difficult with vector search alone     |\n\nThis approach represents an evolution of RAG systems by combining the strengths of vector search (finding semantically similar content) with graph databases (understanding relationships between entities).\n\nSources: [graphrag\\_neo4j/readme.md3-11](https://github.com/qdrant/examples/blob/b3c4b28f/graphrag_neo4j/readme.md#L3-L11)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6.2-graph-enhanced-rag-with-neo4j.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 1000,
      "character_count": 5030,
      "created_at": "2025-10-16T17:42:29.679993",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_examples",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Qdrant\\qdrant_examples\\_qdrant_examples_6.2-graph-enhanced-rag-with-neo4j.md",
      "collection_context": "Qdrant/qdrant_examples"
    }
  },
  {
    "text": "- [Graph-Enhanced RAG with Neo4j](#graph-enhanced-rag-with-neo4j.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [System Architecture](#system-architecture.md)\n- [Key Components](#key-components.md)\n- [1. Graph Extraction](#1-graph-extraction.md)\n- [2. Neo4j Integration](#2-neo4j-integration.md)\n- [3. Qdrant Vector Search](#3-qdrant-vector-search.md)\n- [4. Retrieval-Augmented Generation](#4-retrieval-augmented-generation.md)\n- [Implementation Details](#implementation-details.md)\n- [Python Dependencies and Integration](#python-dependencies-and-integration.md)\n- [Pipeline Execution Steps](#pipeline-execution-steps.md)\n- [Configuration and Setup](#configuration-and-setup.md)\n- [Environment Setup](#environment-setup.md)\n- [Dependencies and Project Structure](#dependencies-and-project-structure.md)\n- [Usage](#usage.md)\n- [Running the System](#running-the-system.md)\n- [Pipeline Operations](#pipeline-operations.md)\n- [Console Output](#console-output.md)\n- [Advantages of Graph-Enhanced RAG](#advantages-of-graph-enhanced-rag.md)",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\Qdrant\\qdrant_examples\\_qdrant_examples_6.2-graph-enhanced-rag-with-neo4j.md",
      "input_type": "qdrant",
      "chunking_strategy": "platform_documentation",
      "token_count": 274,
      "character_count": 1038,
      "created_at": "2025-10-16T17:42:29.680138",
      "parent_context": null,
      "semantic_type": "qdrant",
      "collection_name": "Qdrant",
      "subfolder_name": "qdrant_examples",
      "collection_strategy": "platform_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Qdrant\\qdrant_examples\\_qdrant_examples_6.2-graph-enhanced-rag-with-neo4j.md",
      "collection_context": "Qdrant/qdrant_examples"
    }
  }
]