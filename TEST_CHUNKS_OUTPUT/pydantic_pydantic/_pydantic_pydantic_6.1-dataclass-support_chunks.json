[
  {
    "text": "Dataclass Support | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# Dataclass Support\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 747,
      "character_count": 2458,
      "created_at": "2025-10-16T17:41:46.084206",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [pydantic/\\_internal/\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py)\n- [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py)\n- [pydantic/\\_internal/\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generics.py)\n- [pydantic/\\_internal/\\_typing\\_extra.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_typing_extra.py)\n- [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py)\n- [pydantic/generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/generics.py)\n- [tests/test\\_dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py)\n- [tests/test\\_forward\\_ref.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_forward_ref.py)\n- [tests/test\\_generics.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_generics.py)\n- [tests/test\\_typing.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_typing.py)\n\n## Purpose and Scope\n\nThis page documents Pydantic's enhanced dataclass functionality, which provides validation capabilities to Python dataclasses through the `@pydantic.dataclasses.dataclass` decorator. Pydantic dataclasses integrate seamlessly with the standard library `dataclasses` module while adding runtime validation, serialization, and schema generation.\n\nFor information about Pydantic's core model system, see [BaseModel](pydantic/pydantic/2.1-basemodel.md). For general field configuration, see [Field System](pydantic/pydantic/2.2-field-system.md). For validation logic, see [Validators](pydantic/pydantic/4.1-validators.md).\n\n## Decorator API and Core Types\n\n### The `dataclass` Decorator\n\nThe `@pydantic.dataclasses.dataclass` decorator wraps standard Python dataclasses with Pydantic validation. It accepts all standard dataclass parameters plus Pydantic-specific configuration.\n\n```\n```\n\n**Sources:** [pydantic/dataclasses.py98-313](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L98-L313)\n\n### Decorator Parameters\n\n| Parameter          | Type                         | Default | Description                                          |\n| ------------------ | ---------------------------- | ------- | ---------------------------------------------------- |\n| `init`             | `Literal[False]`             | `False` | Must be `False`; Pydantic provides custom `__init__` |\n| `repr`             | `bool`                       | `True`  | Include field in `__repr__`                          |\n| `eq`               | `bool`                       | `True`  | Generate `__eq__` method                             |\n| `order`            | `bool`                       | `False` | Generate comparison methods                          |\n| `unsafe_hash`      | `bool`                       | `False` | Generate `__hash__` method                           |\n| `frozen`           | `bool \\| None`               | `None`  | Make dataclass immutable                             |\n| `config`           | `ConfigDict \\| type \\| None` | `None`  | Pydantic configuration                               |\n| `validate_on_init` | `bool \\| None`               | `None`  | Deprecated; always validates                         |\n| `kw_only`          | `bool`                       | `False` | Require keyword-only arguments (Python 3.10+)        |\n| `slots`            | `bool`                       | `False` | Use `__slots__` (Python 3.10+)                       |\n\n**Sources:** [pydantic/dataclasses.py29-96](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L29-L96)\n\n### PydanticDataclass Protocol\n\nOnce decorated, a class gains the `PydanticDataclass` protocol attributes:\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_dataclasses.py40-63](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L40-L63)",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1020,
      "character_count": 4012,
      "created_at": "2025-10-16T17:41:46.090321",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "## Dataclass Creation and Lifecycle\n\n### Creation Flow\n\n```\n```\n\n**Sources:** [pydantic/dataclasses.py153-313](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L153-L313) [pydantic/\\_internal/\\_dataclasses.py85-190](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L190)\n\n### The `create_dataclass` Function\n\nThe internal `create_dataclass` function orchestrates the transformation:\n\n1. **Validation**: Ensures class is not already a `BaseModel` ([pydantic/dataclasses.py164-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L164-L168))\n2. **Configuration**: Merges decorator config with `__pydantic_config__` attribute ([pydantic/dataclasses.py184-187](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L184-L187))\n3. **Vanilla Handling**: Subclasses stdlib dataclasses to add validation ([pydantic/dataclasses.py194-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L194-L206))\n4. **Field Conversion**: Wraps `Field()` calls with `dataclasses.field()` ([pydantic/dataclasses.py228-234](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L228-L234))\n5. **Stdlib Application**: Applies `@dataclasses.dataclass` decorator ([pydantic/dataclasses.py239-249](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L239-L249))\n6. **Completion**: Builds schema and validators ([pydantic/dataclasses.py310](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L310-L310))\n\n**Sources:** [pydantic/dataclasses.py153-313](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L153-L313)\n\n### Field Patching System\n\nThe `patch_base_fields` context manager temporarily modifies parent dataclass fields:\n\n```\n```\n\nThis ensures that `kw_only` and `repr` attributes from `Field()` are recognized by the stdlib `@dataclass` decorator during class construction.\n\n**Sources:** [pydantic/\\_internal/\\_dataclasses.py229-315](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L229-L315)\n\n## Field Collection\n\n### Dataclass Field Collection\n\nField collection for dataclasses differs from models because fields are already processed by stdlib:\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_fields.py460-524](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L460-L524)\n\n### Field Collection Process\n\nThe `collect_dataclass_fields` function:\n\n1. Iterates through `__mro__` in reverse to respect inheritance\n2. Accesses `__dataclass_fields__` from each base\n3. Evaluates type annotations using namespace resolver\n4. Filters out `ClassVar` annotations\n5. Handles `InitVar` types specially\n6. Creates `FieldInfo` instances from dataclass field metadata\n\n**Sources:** [pydantic/\\_internal/\\_fields.py460-524](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L460-L524)\n\n### FieldInfo from Dataclass Field\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_fields.py508-524](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L508-L524)\n\n## Integration with Standard Library Dataclasses\n\n### Converting Vanilla Dataclasses\n\nPydantic can enhance existing stdlib dataclasses:\n\n```\n```\n\nWhen converting, Pydantic:\n\n1. Subclasses the original to avoid mutation\n2. Preserves generics by including `Generic[*params]` in bases\n3. Maintains original `__doc__` (if not default)\n4. Forwards frozen/order/etc parameters",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 978,
      "character_count": 3542,
      "created_at": "2025-10-16T17:41:46.099388",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "**Sources:** [pydantic/dataclasses.py194-206](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L194-L206) [tests/test\\_dataclasses.py807-840](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L807-L840)\n\n### Inheritance from Vanilla Dataclasses\n\n```\n```\n\n**Sources:** [tests/test\\_dataclasses.py941-958](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L941-L958) [pydantic/\\_internal/\\_fields.py488-499](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py#L488-L499)\n\n### Field Compatibility\n\nBoth `dataclasses.field()` and `pydantic.Field()` work in Pydantic dataclasses:\n\n| Feature                | `dataclasses.field()` | `pydantic.Field()` |\n| ---------------------- | --------------------- | ------------------ |\n| `default`              | ✓                     | ✓                  |\n| `default_factory`      | ✓                     | ✓                  |\n| `init`                 | ✓                     | ✓                  |\n| `repr`                 | ✓                     | ✓                  |\n| `kw_only`              | ✓                     | ✓                  |\n| `metadata`             | ✓                     | ✓                  |\n| Validation constraints | ✗                     | ✓                  |\n| Alias                  | ✗                     | ✓                  |\n| JSON schema metadata   | ✗                     | ✓                  |\n\n**Sources:** [tests/test\\_dataclasses.py573-591](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L573-L591) [pydantic/dataclasses.py228-234](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L228-L234)\n\n## Validation and Initialization\n\n### Custom `__init__` Injection\n\nPydantic replaces the dataclass `__init__` with validation logic:\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_dataclasses.py118-122](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L118-L122)\n\n### Validation Modes\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_dataclasses.py118-122](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L118-L122) [tests/test\\_dataclasses.py270-283](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L270-L283)\n\n### Validate Assignment\n\nWith `validate_assignment=True`, field assignments are validated:\n\n```\n```\n\n**Sources:** [pydantic/dataclasses.py251-268](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L251-L268) [tests/test\\_dataclasses.py120-130](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L120-L130)\n\n## Dataclass Completion\n\n### The `complete_dataclass` Function\n\nThis function builds the schema and creates validators/serializers:\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_dataclasses.py85-190](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L85-L190)\n\n### Deferred Building\n\nWhen `defer_build=True` in config:\n\n1. Mock validator/serializer are installed\n2. Schema building is skipped\n3. `__pydantic_complete__ = False`\n4. First validation attempt triggers rebuild\n\n**Sources:** [pydantic/\\_internal/\\_dataclasses.py130-132](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L130-L132)\n\n### Rebuilding Dataclasses\n\nThe `rebuild_dataclass` function handles forward reference resolution:\n\n```\n```\n\n**Sources:** [pydantic/dataclasses.py340-398](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L340-L398)\n\n## Advanced Features\n\n### InitVar Support\n\n`InitVar` fields are passed to `__init__` but not stored:\n\n```\n```",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 985,
      "character_count": 3723,
      "created_at": "2025-10-16T17:41:46.112611",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "**Sources:** [tests/test\\_dataclasses.py673-702](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L673-L702)\n\n### `__post_init__` Hook\n\nCalled after validation completes:\n\n1. All fields are validated and set\n2. `__post_init__(*initvars)` is called\n3. Can modify fields (unless frozen)\n4. Can perform additional validation\n5. `InitVar` parameters are passed as arguments\n\n**Sources:** [tests/test\\_dataclasses.py270-283](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L270-L283) [tests/test\\_dataclasses.py380-396](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L380-L396)\n\n### Frozen Dataclasses\n\n```\n```\n\nThe `frozen` parameter can be set via decorator or config. Decorator takes priority.\n\n**Sources:** [pydantic/dataclasses.py209-220](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L209-L220) [tests/test\\_dataclasses.py108-118](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L108-L118)\n\n### Computed Fields\n\nComputed fields work in dataclasses:\n\n```\n```\n\n- Not included in validation schema\n- Included in serialization schema\n- Appear in `model_dump()` output\n\n**Sources:** [tests/test\\_dataclasses.py1285-1328](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L1285-L1328)\n\n## Schema Generation\n\n### Core Schema Generation\n\nDataclasses use the `dataclass_schema` core schema type:\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) (referenced but not in provided files)\n\n### JSON Schema Generation\n\nJSON schemas for dataclasses:\n\n| Mode            | Schema Representation            |\n| --------------- | -------------------------------- |\n| `validation`    | Object with required fields      |\n| `serialization` | Object including computed fields |\n\nNested dataclasses become `$ref` definitions.\n\n**Sources:** [tests/test\\_dataclasses.py607-645](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L607-L645) [tests/test\\_dataclasses.py648-670](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L648-L670)\n\n## Utility Functions\n\n### `is_pydantic_dataclass`\n\nType guard to check if a class is a Pydantic dataclass:\n\n```\n```\n\nChecks both the Pydantic marker and stdlib dataclass status.\n\n**Sources:** [pydantic/dataclasses.py401-413](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L401-L413)\n\n### `is_stdlib_dataclass`\n\nInternal function to identify stdlib-only dataclasses:\n\n```\n```\n\nUsed during dataclass creation to detect vanilla dataclasses for subclassing.\n\n**Sources:** [pydantic/\\_internal/\\_dataclasses.py193-205](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L193-L205)\n\n### `set_dataclass_mocks`\n\nInstalls placeholder validator/serializer when building is deferred:\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_dataclasses.py131](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_dataclasses.py#L131-L131)\n\n## Configuration and ConfigDict\n\nDataclasses support the same `ConfigDict` as models:\n\n| Config Option             | Effect in Dataclasses                                     |\n| ------------------------- | --------------------------------------------------------- |\n| `validate_assignment`     | Enable validation on field assignment                     |\n| `frozen`                  | Make dataclass immutable (alternative to decorator param) |\n| `arbitrary_types_allowed` | Allow non-Pydantic types                                  |\n| `str_max_length`          | String length validation                                  |\n| `extra`                   | Handling of extra attributes during assignment            |\n| `revalidate_instances`    | Revalidate dataclass instances                            |",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 972,
      "character_count": 3952,
      "created_at": "2025-10-16T17:41:46.123695",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "**Sources:** [tests/test\\_dataclasses.py120-149](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L120-L149) [tests/test\\_dataclasses.py515-540](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_dataclasses.py#L515-L540)\n\n### Config Priority\n\n1. Decorator `config` parameter (highest)\n2. Class `__pydantic_config__` attribute\n3. Default Pydantic config (lowest)\n\nWarnings are issued if both decorator and attribute are specified.\n\n**Sources:** [pydantic/dataclasses.py175-181](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py#L175-L181)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [Dataclass Support](#dataclass-support.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Decorator API and Core Types](#decorator-api-and-core-types.md)\n- [The \\`dataclass\\` Decorator](#the-dataclass-decorator.md)\n- [Decorator Parameters](#decorator-parameters.md)\n- [PydanticDataclass Protocol](#pydanticdataclass-protocol.md)\n- [Dataclass Creation and Lifecycle](#dataclass-creation-and-lifecycle.md)\n- [Creation Flow](#creation-flow.md)\n- [The \\`create\\_dataclass\\` Function](#the-create_dataclass-function.md)\n- [Field Patching System](#field-patching-system.md)\n- [Field Collection](#field-collection.md)\n- [Dataclass Field Collection](#dataclass-field-collection.md)\n- [Field Collection Process](#field-collection-process.md)\n- [FieldInfo from Dataclass Field](#fieldinfo-from-dataclass-field.md)\n- [Integration with Standard Library Dataclasses](#integration-with-standard-library-dataclasses.md)\n- [Converting Vanilla Dataclasses](#converting-vanilla-dataclasses.md)\n- [Inheritance from Vanilla Dataclasses](#inheritance-from-vanilla-dataclasses.md)\n- [Field Compatibility](#field-compatibility.md)\n- [Validation and Initialization](#validation-and-initialization.md)\n- [Custom \\`\\_\\_init\\_\\_\\` Injection](#custom-__init__-injection.md)\n- [Validation Modes](#validation-modes.md)\n- [Validate Assignment](#validate-assignment.md)\n- [Dataclass Completion](#dataclass-completion.md)\n- [The \\`complete\\_dataclass\\` Function](#the-complete_dataclass-function.md)\n- [Deferred Building](#deferred-building.md)\n- [Rebuilding Dataclasses](#rebuilding-dataclasses.md)\n- [Advanced Features](#advanced-features.md)\n- [InitVar Support](#initvar-support.md)\n- [\\`\\_\\_post\\_init\\_\\_\\` Hook](#__post_init__-hook.md)\n- [Frozen Dataclasses](#frozen-dataclasses.md)\n- [Computed Fields](#computed-fields.md)\n- [Schema Generation](#schema-generation.md)\n- [Core Schema Generation](#core-schema-generation.md)\n- [JSON Schema Generation](#json-schema-generation.md)\n- [Utility Functions](#utility-functions.md)\n- [\\`is\\_pydantic\\_dataclass\\`](#is_pydantic_dataclass.md)\n- [\\`is\\_stdlib\\_dataclass\\`](#is_stdlib_dataclass.md)\n- [\\`set\\_dataclass\\_mocks\\`](#set_dataclass_mocks.md)\n- [Configuration and ConfigDict](#configuration-and-configdict.md)\n- [Config Priority](#config-priority.md)",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 791,
      "character_count": 2998,
      "created_at": "2025-10-16T17:41:46.125130",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.1-dataclass-support.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]