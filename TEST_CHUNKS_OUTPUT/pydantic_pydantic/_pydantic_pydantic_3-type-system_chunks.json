[
  {
    "text": "Type System | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# Type System\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 745,
      "character_count": 2446,
      "created_at": "2025-10-16T17:41:45.699289",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [pydantic/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py)\n- [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py)\n- [pydantic/errors.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/errors.py)\n- [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py)\n- [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py)\n- [pydantic/networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py)\n- [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py)\n- [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py)\n- [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py)\n- [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py)\n- [pydantic/types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py)\n- [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py)\n- [pydantic/validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validators.py)\n- [tests/test\\_networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py)\n- [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py)\n- [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py)\n- [tests/test\\_types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py)\n- [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py)\n\nPydantic's type system provides specialized types for data validation, offers constrainable versions of standard Python types, and implements network-related and other utility types. This document explains the architecture and components of Pydantic's type system, how to use built-in types, and how to extend the system with custom types.\n\nFor information about validation and serialization using these types, see [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md). For details about the schema generation process, see [Schema Generation](pydantic/pydantic/5-schema-generation.md).\n\n## Type System Architecture\n\nPydantic's type system extends Python's built-in type system to provide additional validation capabilities. It consists of several key components:\n\n```\n```\n\nSources: [pydantic/types.py1-110](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L1-L110), [pydantic/networks.py1-67](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L1-L67)\n\n## Core Type Concepts\n\n### Constrained Types and Annotations\n\nPydantic supports two approaches for adding constraints to types:\n\n1. **Constrained Type Functions**: Functions like `conint()`, `constr()`, etc.\n2. **Annotated with Field Constraints**: Using Python's `Annotated` with field constraints\n\n```\n```",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 932,
      "character_count": 3320,
      "created_at": "2025-10-16T17:41:45.703706",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Sources: [pydantic/types.py111-146](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L111-L146) [pydantic/types.py147-219](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L147-L219) [pydantic/types.py661-685](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L661-L685)\n\nThe two approaches serve the same purpose with different syntax:\n\n```\n# Using constrained type function\nfrom pydantic import BaseModel, conint\n\nclass Model(BaseModel):\n    value: conint(gt=0, lt=100)\n\n# Using Annotated with Field\nfrom typing import Annotated\nfrom pydantic import BaseModel, Field\n\nclass Model(BaseModel):\n    value: Annotated[int, Field(gt=0, lt=100)]\n```\n\nThe latter approach using `Annotated` is recommended for better support with static analysis tools.\n\n### Strict Mode\n\nPydantic allows enforcing strict type checking using the `Strict` class:\n\n```\n```\n\nSources: [pydantic/types.py113-146](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L113-L146)\n\n## Constrained Types\n\n### Numeric Types\n\nPydantic provides constrained versions of numeric types with validation rules:\n\n| Type               | Description                      | Constraints                                              |\n| ------------------ | -------------------------------- | -------------------------------------------------------- |\n| `conint()`         | Constrained integer              | `gt`, `ge`, `lt`, `le`, `multiple_of`                    |\n| `PositiveInt`      | Integer > 0                      | Equivalent to `Annotated[int, Gt(0)]`                    |\n| `NegativeInt`      | Integer < 0                      | Equivalent to `Annotated[int, Lt(0)]`                    |\n| `NonNegativeInt`   | Integer >= 0                     | Equivalent to `Annotated[int, Ge(0)]`                    |\n| `NonPositiveInt`   | Integer <= 0                     | Equivalent to `Annotated[int, Le(0)]`                    |\n| `confloat()`       | Constrained float                | `gt`, `ge`, `lt`, `le`, `multiple_of`, `allow_inf_nan`   |\n| `PositiveFloat`    | Float > 0                        | Equivalent to `Annotated[float, Gt(0)]`                  |\n| `NegativeFloat`    | Float < 0                        | Equivalent to `Annotated[float, Lt(0)]`                  |\n| `NonNegativeFloat` | Float >= 0                       | Equivalent to `Annotated[float, Ge(0)]`                  |\n| `NonPositiveFloat` | Float <= 0                       | Equivalent to `Annotated[float, Le(0)]`                  |\n| `FiniteFloat`      | Float that is not `inf` or `nan` | Equivalent to `Annotated[float, AllowInfNan(False)]`     |\n| `condecimal()`     | Constrained decimal              | Similar to `confloat()` + `max_digits`, `decimal_places` |\n\nSources: [pydantic/types.py147-362](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L147-L362) [pydantic/types.py386-645](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L386-L645)\n\n### String Types\n\nPydantic offers string constraints through `constr()` and `StringConstraints`:\n\n```\n```\n\nSources: [pydantic/types.py690-828](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L690-L828)\n\nSimilar constraints exist for bytes with `conbytes()`.\n\n### Collection Types\n\nPydantic provides constrained collection types:\n\n| Type             | Description           | Constraints                             |\n| ---------------- | --------------------- | --------------------------------------- |\n| `conlist()`      | Constrained list      | `item_type`, `min_length`, `max_length` |\n| `conset()`       | Constrained set       | `item_type`, `min_length`, `max_length` |\n| `confrozenset()` | Constrained frozenset | `item_type`, `min_length`, `max_length` |\n\nSources: [pydantic/types.py836-903](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L836-L903)\n\n## Network Types\n\nPydantic includes a rich set of network-related types defined in `networks.py`:\n\n```\n```",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1006,
      "character_count": 4017,
      "created_at": "2025-10-16T17:41:45.711437",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Sources: [pydantic/networks.py70-526](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L70-L526) [pydantic/networks.py534-669](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py#L534-L669)\n\nNetwork types provide specialized validation:\n\n- URL types validate and normalize URLs with various schemes\n- Email types validate email addresses\n- IP types validate IPv4 and IPv6 addresses, networks, and interfaces\n\nThese network types can be directly used in models:\n\n```\n```\n\n## Special Types\n\n### Path Types\n\nPath-related types provide validation for file system paths:\n\n| Type            | Description                               |\n| --------------- | ----------------------------------------- |\n| `FilePath`      | Path that points to an existing file      |\n| `DirectoryPath` | Path that points to an existing directory |\n| `NewPath`       | Path that does not currently exist        |\n| `SocketPath`    | Path pointing to a Unix socket            |\n\nSources: [pydantic/\\_\\_init\\_\\_.py73-77](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L73-L77) [pydantic/\\_\\_init\\_\\_.py357-359](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L357-L359)\n\n### Secret Types\n\nSecret types provide special handling for sensitive data:\n\n| Type          | Description                            |\n| ------------- | -------------------------------------- |\n| `SecretStr`   | String that hides its contents in repr |\n| `SecretBytes` | Bytes that hides its contents in repr  |\n| `Secret`      | Generic version of secret types        |\n\nSources: [pydantic/\\_\\_init\\_\\_.py78-80](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L78-L80) [pydantic/\\_\\_init\\_\\_.py348-350](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L348-L350)\n\n### ImportString Type\n\n`ImportString` provides a way to import Python objects from strings:\n\n```\n```\n\nSources: [pydantic/types.py906-1028](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py#L906-L1028)\n\n## Type Adapter\n\nThe `TypeAdapter` class provides a way to use Pydantic's validation system outside of models:\n\n```\n```\n\nSources: [pydantic/\\_\\_init\\_\\_.py380](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py#L380-L380)\n\nThe TypeAdapter makes it easy to apply Pydantic validation to standalone types:\n\n```\n```\n\n## Working with Annotated Types\n\nPydantic provides special handling for Python's `Annotated` type:\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_known\\_annotated\\_metadata.py1-42](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_known_annotated_metadata.py#L1-L42)\n\n`Annotated` provides a clean way to combine type information with metadata:\n\n```\n```\n\n## Creating Custom Types\n\nPydantic allows for creation of custom types by implementing `__get_pydantic_core_schema__` method:\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_validators.py66-127](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validators.py#L66-L127)\n\n## Internal Validation Process\n\nThe type system works with Pydantic's validation engine:\n\n```\n```\n\nSources: [pydantic/\\_internal/\\_core\\_utils.py43-66](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_utils.py#L43-L66) [pydantic/\\_internal/\\_validators.py66-127](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validators.py#L66-L127)\n\n## Constraints Reference",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 947,
      "character_count": 3468,
      "created_at": "2025-10-16T17:41:45.721068",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "| Type Category | Available Constraints                                                                       |\n| ------------- | ------------------------------------------------------------------------------------------- |\n| String        | `min_length`, `max_length`, `pattern`, `strip_whitespace`, `to_lower`, `to_upper`, `strict` |\n| Bytes         | `min_length`, `max_length`, `strict`                                                        |\n| List          | `min_length`, `max_length`, `strict`, `fail_fast`                                           |\n| Set           | `min_length`, `max_length`, `strict`, `fail_fast`                                           |\n| Dict          | `min_length`, `max_length`, `strict`                                                        |\n| Float         | `gt`, `ge`, `lt`, `le`, `multiple_of`, `allow_inf_nan`, `strict`                            |\n| Integer       | `gt`, `ge`, `lt`, `le`, `multiple_of`, `strict`                                             |\n| Decimal       | `gt`, `ge`, `lt`, `le`, `multiple_of`, `max_digits`, `decimal_places`, `strict`             |\n\nSources: [pydantic/\\_internal/\\_known\\_annotated\\_metadata.py18-64](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_known_annotated_metadata.py#L18-L64)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [Type System](#type-system.md)\n- [Type System Architecture](#type-system-architecture.md)\n- [Core Type Concepts](#core-type-concepts.md)\n- [Constrained Types and Annotations](#constrained-types-and-annotations.md)\n- [Strict Mode](#strict-mode.md)\n- [Constrained Types](#constrained-types.md)\n- [Numeric Types](#numeric-types.md)\n- [String Types](#string-types.md)\n- [Collection Types](#collection-types.md)\n- [Network Types](#network-types.md)\n- [Special Types](#special-types.md)\n- [Path Types](#path-types.md)\n- [Secret Types](#secret-types.md)\n- [ImportString Type](#importstring-type.md)\n- [Type Adapter](#type-adapter.md)\n- [Working with Annotated Types](#working-with-annotated-types.md)\n- [Creating Custom Types](#creating-custom-types.md)\n- [Internal Validation Process](#internal-validation-process.md)\n- [Constraints Reference](#constraints-reference.md)",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 511,
      "character_count": 2282,
      "created_at": "2025-10-16T17:41:45.722467",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_3-type-system.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]