[
  {
    "text": "Function Validation | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# Function Validation\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 745,
      "character_count": 2462,
      "created_at": "2025-10-16T17:41:46.130330",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py)\n- [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py)\n- [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py)\n- [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py)\n- [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py)\n- [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py)\n- [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py)\n- [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py)\n- [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py)\n- [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py)\n- [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py)\n\n## Overview\n\nFunction validation in Pydantic enables automatic validation of function arguments and return values using the `@validate_call` decorator. This system extends Pydantic's validation capabilities beyond models to regular Python functions, methods, and lambdas by transforming function signatures into validation schemas and wrapping function calls with validation logic.\n\nFor field-level validation within models, see [Validators](pydantic/pydantic/4.1-validators.md). For model-level validation, see [Model Configuration](pydantic/pydantic/2.3-model-configuration.md).\n\n**Sources:** [pydantic/validate\\_call\\_decorator.py1-117](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L1-L117)\n\n## Decorator Interface\n\nThe `@validate_call` decorator is the primary entry point for function validation. It can be applied either as a bare decorator or with configuration options:\n\n```\n```\n\n### Decorator Parameters\n\n| Parameter         | Type               | Description                                                      |\n| ----------------- | ------------------ | ---------------------------------------------------------------- |\n| `func`            | Callable or None   | The function to validate (when used as bare decorator)           |\n| `config`          | ConfigDict or None | Configuration dictionary for validation behavior                 |\n| `validate_return` | bool               | Whether to validate the function's return value (default: False) |\n\nThe decorator supports various callable types defined in `VALIDATE_CALL_SUPPORTED_TYPES`:\n\n- Regular functions\n- Methods (instance, class, static)\n- Lambda functions\n- `functools.partial` objects\n\n**Sources:** [pydantic/validate\\_call\\_decorator.py72-117](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L72-L117) [tests/test\\_validate\\_call.py28-59](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L28-L59)\n\n## Validation Flow Architecture\n\n```\n```\n\n**Sources:** [pydantic/validate\\_call\\_decorator.py24-70](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L24-L70) [pydantic/\\_internal/\\_validate\\_call.py49-141](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L49-L141)\n\n## ValidateCallWrapper Implementation\n\nThe `ValidateCallWrapper` class handles the core logic of function validation. It wraps the original function and intercepts all calls to perform validation.\n\n### Core Components\n\n```\n```\n\n### Initialization Process\n\nThe wrapper is initialized in `__init__` with the following steps:",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 994,
      "character_count": 3952,
      "created_at": "2025-10-16T17:41:46.138035",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "1. **Extract function metadata**: Store the function, extract its module and qualname\n2. **Create namespace resolver**: Build `NsResolver` to handle forward references in type annotations\n3. **Configure wrapper**: Create `ConfigWrapper` from provided config\n4. **Conditional schema building**: If `defer_build` is not enabled, immediately create validators; otherwise defer until first call\n\n**Sources:** [pydantic/\\_internal/\\_validate\\_call.py65-90](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L65-L90)\n\n### Validator Creation\n\nThe `_create_validators` method generates schemas and validators:\n\n```\n```\n\n**Sources:** [pydantic/\\_internal/\\_validate\\_call.py91-131](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L91-L131)\n\n### Call Interception\n\nWhen the wrapped function is called, the `__call__` method:\n\n1. **Lazy validation setup**: If validators weren't created during initialization (deferred build), create them now\n2. **Package arguments**: Wrap positional and keyword arguments in `ArgsKwargs` object\n3. **Validate arguments**: Pass through `__pydantic_validator__`\n4. **Execute function**: Call the validated function with validated args\n5. **Validate return** (optional): Pass return value through `__return_pydantic_validator__` if configured\n\n**Sources:** [pydantic/\\_internal/\\_validate\\_call.py132-141](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L132-L141)\n\n## Function Schema Generation\n\nFunction signatures are transformed into pydantic-core schemas through the `GenerateSchema` class. This enables the same validation logic used for models to work with functions.\n\n### Argument Types and Schema Mapping\n\n| Argument Kind                 | Schema Type                                   | Example                                   |\n| ----------------------------- | --------------------------------------------- | ----------------------------------------- |\n| Positional-only (`/`)         | `arguments_schema` with positional parameters | `def f(a, /, b): ...`                     |\n| Keyword-only (`*`)            | `arguments_schema` with keyword parameters    | `def f(*, a, b): ...`                     |\n| Variable positional (`*args`) | `arguments_schema` with var\\_args\\_schema     | `def f(*args): ...`                       |\n| Variable keyword (`**kwargs`) | `arguments_schema` with var\\_kwargs\\_schema   | `def f(**kwargs): ...`                    |\n| Mixed                         | Combined `arguments_schema`                   | `def f(a, /, b, *args, c, **kwargs): ...` |\n\n### Special Handling: TypedDict Unpacking\n\nWhen using `Unpack[TypedDict]` for `**kwargs`, the decorator validates kwargs against the TypedDict schema:\n\n```\n```\n\nThe implementation checks for overlaps between regular parameters and TypedDict keys, raising `PydanticUserError` if positional-or-keyword parameters conflict with TypedDict keys.\n\n**Sources:** [tests/test\\_validate\\_call.py286-417](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L286-L417)\n\n## Function Type Validation\n\nThe `_check_function_type` function validates that the decorated object is a supported callable type:\n\n```\n```\n\n**Sources:** [pydantic/validate\\_call\\_decorator.py24-70](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L24-L70)\n\n## Advanced Features\n\n### Return Value Validation\n\nWhen `validate_return=True`, the decorator validates the function's return value against its return type annotation:\n\n```\n```\n\nThe implementation creates a separate validator for the return type and wraps the result in an appropriate handler (async or sync).\n\n**Sources:** [pydantic/\\_internal/\\_validate\\_call.py105-128](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L105-L128)\n\n### Async Function Support\n\nThe wrapper detects coroutine functions using `inspect.iscoroutinefunction` and creates appropriate wrappers:\n\n- For regular functions: Direct validation wrapper\n- For async functions: Async wrapper that awaits the coroutine before/after validation\n\nThe `update_wrapper_attributes` function ensures the wrapper preserves the async nature of the original function.\n\n**Sources:** [pydantic/\\_internal/\\_validate\\_call.py28-46](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L28-L46)\n\n### Configuration Options\n\nAll `ConfigDict` options are supported:\n\n```\n```",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1023,
      "character_count": 4517,
      "created_at": "2025-10-16T17:41:46.150383",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "**Sources:** [tests/test\\_validate\\_call.py730-776](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L730-L776)\n\n### Field-Level Annotations\n\nFunction parameters support Pydantic's `Field` and `Annotated` for additional validation:\n\n```\n```\n\n**Sources:** [tests/test\\_validate\\_call.py419-436](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L419-L436) [tests/test\\_validate\\_call.py778-796](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L778-L796)\n\n## Integration with Plugin System\n\nThe `validate_call` decorator integrates with Pydantic's plugin system through the `create_schema_validator` function. When plugins are installed, they receive notifications about function validation:\n\n```\n```\n\nPlugins receive:\n\n- `schema_kind='validate_call'`\n- `schema_type`: The original function\n- `schema_type_path`: Module and qualname of the function\n\n**Sources:** [pydantic/\\_internal/\\_validate\\_call.py96-104](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L96-L104) [tests/test\\_plugins.py410-447](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py#L410-L447)\n\n## JSON Schema Generation\n\nFunctions decorated with `@validate_call` can generate JSON schemas through `TypeAdapter`:\n\n```\n```\n\nThe schema generation handles:\n\n- Positional-only arguments → array schema with `prefixItems`\n- Keyword-only arguments → object schema with `properties`\n- Mixed argument types → raises `PydanticInvalidForJsonSchema`\n- Variable arguments (`*args`) → array schema with `items`\n- Variable keyword arguments (`**kwargs`) → object schema with `additionalProperties`\n\n**Sources:** [tests/test\\_validate\\_call.py626-707](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L626-L707)\n\n## Error Handling and Validation Errors\n\nValidation errors from `@validate_call` decorated functions follow the same structure as model validation errors:\n\n```\n```\n\nCommon error types:\n\n- `missing_argument`: Required argument not provided\n- `unexpected_positional_argument`: Too many positional args\n- `unexpected_keyword_argument`: Unknown keyword arg\n- `multiple_argument_values`: Argument provided both positionally and by keyword\n- `missing_positional_only_argument`: Positional-only arg passed as keyword\n- `missing_keyword_only_argument`: Keyword-only arg passed positionally\n\n**Sources:** [tests/test\\_validate\\_call.py152-201](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L152-L201)\n\n## Wrapper Attribute Preservation\n\nThe `update_wrapper_attributes` function ensures the decorated function preserves key attributes:\n\n```\n```\n\nFor `partial` objects, special handling generates names like `partial(func_name)`.\n\n**Sources:** [pydantic/\\_internal/\\_validate\\_call.py18-46](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py#L18-L46) [tests/test\\_validate\\_call.py28-53](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py#L28-L53)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 779,
      "character_count": 3199,
      "created_at": "2025-10-16T17:41:46.157681",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [Function Validation](#function-validation.md)\n- [Overview](#overview.md)\n- [Decorator Interface](#decorator-interface.md)\n- [Decorator Parameters](#decorator-parameters.md)\n- [Validation Flow Architecture](#validation-flow-architecture.md)\n- [ValidateCallWrapper Implementation](#validatecallwrapper-implementation.md)\n- [Core Components](#core-components.md)\n- [Initialization Process](#initialization-process.md)\n- [Validator Creation](#validator-creation.md)\n- [Call Interception](#call-interception.md)\n- [Function Schema Generation](#function-schema-generation.md)\n- [Argument Types and Schema Mapping](#argument-types-and-schema-mapping.md)\n- [Special Handling: TypedDict Unpacking](#special-handling-typeddict-unpacking.md)\n- [Function Type Validation](#function-type-validation.md)\n- [Advanced Features](#advanced-features.md)\n- [Return Value Validation](#return-value-validation.md)\n- [Async Function Support](#async-function-support.md)\n- [Configuration Options](#configuration-options.md)\n- [Field-Level Annotations](#field-level-annotations.md)\n- [Integration with Plugin System](#integration-with-plugin-system.md)\n- [JSON Schema Generation](#json-schema-generation.md)\n- [Error Handling and Validation Errors](#error-handling-and-validation-errors.md)\n- [Wrapper Attribute Preservation](#wrapper-attribute-preservation.md)",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 290,
      "character_count": 1339,
      "created_at": "2025-10-16T17:41:46.157841",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_6.2-function-validation.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]