[
  {
    "text": "JSON Conversion | pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# JSON Conversion\n\nRelevant source files\n\n- [pydantic/json.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json.py)\n- [tests/test\\_json.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py)\n\n## Purpose and Scope\n\nThis document details how Pydantic handles the conversion of Python objects to and from JSON. It covers both the serialization (Python → JSON) and deserialization (JSON → Python) processes, including the core architecture, built-in serialization behavior for various data types, and customization options.\n\nFor information about validators, see [Validators](pydantic/pydantic/4.1-validators.md). For information about the broader serialization system including Python dict serialization, see [Serializers](pydantic/pydantic/4.2-serializers.md).\n\n## Serialization and Deserialization Architecture\n\n```\n```",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 933,
      "character_count": 3268,
      "created_at": "2025-10-16T17:41:45.929027",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Sources: [tests/test\\_json.py92-94](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L92-L94) [tests/test\\_json.py134-137](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L134-L137) [tests/test\\_json.py234-236](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L234-L236)\n\n## JSON Serialization Methods\n\nPydantic provides two primary ways to serialize objects to JSON:\n\n1. `BaseModel.model_dump_json()` - For serializing model instances\n2. `TypeAdapter.dump_json()` - For serializing arbitrary types\n\n```\n```\n\nSources: [tests/test\\_json.py134-137](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L134-L137) [tests/test\\_json.py92-94](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L92-L94)\n\n### BaseModel Serialization\n\nThe `model_dump_json()` method converts a model instance to a JSON string:\n\n```\n```\n\nThe method accepts the same parameters as `model_dump()`, plus JSON-specific parameters:\n\n| Parameter          | Type       | Description                          |\n| ------------------ | ---------- | ------------------------------------ |\n| `indent`           | `int`      | Number of spaces for indentation     |\n| `exclude`          | `set[str]` | Fields to exclude                    |\n| `include`          | `set[str]` | Fields to include (excluding others) |\n| `by_alias`         | `bool`     | Whether to use field aliases         |\n| `exclude_unset`    | `bool`     | Exclude fields not explicitly set    |\n| `exclude_defaults` | `bool`     | Exclude fields with default values   |\n| `exclude_none`     | `bool`     | Exclude None fields                  |\n\nSources: [tests/test\\_json.py134-137](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L134-L137) [tests/test\\_json.py226](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L226-L226) [tests/test\\_json.py368-369](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L368-L369)\n\n### TypeAdapter Serialization\n\nThe `TypeAdapter` class provides a way to serialize arbitrary types to JSON:\n\n```\n```\n\nSources: [tests/test\\_json.py92-94](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L92-L94)\n\n## JSON Deserialization Methods\n\nPydantic provides corresponding methods for deserializing JSON:\n\n1. `BaseModel.model_validate_json()` - For deserializing to model instances\n2. `TypeAdapter.validate_json()` - For deserializing to arbitrary types\n\n```\n```\n\nSources: [tests/test\\_json.py234-236](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L234-L236) [tests/test\\_json.py251](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L251-L251)\n\n## Type Handling in JSON Serialization\n\nPydantic provides special handling for various Python types when serializing to JSON:\n\n```\n```\n\nSources: [tests/test\\_json.py61-91](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L61-L91)\n\n### Built-in Type Serialization",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 807,
      "character_count": 3014,
      "created_at": "2025-10-16T17:41:45.936002",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "| Python Type                       | JSON Representation        | Example                                  |\n| --------------------------------- | -------------------------- | ---------------------------------------- |\n| `str`                             | string                     | `\"text\"`                                 |\n| `int`/`float`                     | number                     | `123`, `3.14`                            |\n| `bool`                            | boolean                    | `true`, `false`                          |\n| `None`                            | null                       | `null`                                   |\n| `list`/`tuple`/`set`              | array                      | `[1, 2, 3]`                              |\n| `dict`                            | object                     | `{\"key\": \"value\"}`                       |\n| `UUID`                            | string                     | `\"ebcdab58-6eb8-46fb-a190-d07a33e9eac8\"` |\n| `datetime`                        | string (ISO 8601)          | `\"2032-01-01T01:01:00\"`                  |\n| `date`                            | string (ISO 8601)          | `\"2032-01-01\"`                           |\n| `time`                            | string (ISO 8601)          | `\"12:34:56\"`                             |\n| `timedelta`                       | string (ISO 8601 duration) | `\"P12DT34.000056S\"`                      |\n| `bytes`                           | string (UTF-8)             | `\"this is bytes\"`                        |\n| `Decimal`                         | string                     | `\"12.34\"`                                |\n| `Enum`                            | string/number              | `\"bar\"`                                  |\n| `Pattern`                         | string                     | `\"^regex$\"`                              |\n| `SecretStr`/`SecretBytes`         | string (masked)            | `\"**********\"`                           |\n| `IPv4Address`/`IPv6Address`       | string                     | `\"192.168.0.1\"`                          |\n| `Path`/`FilePath`/`DirectoryPath` | string                     | `\"/path/to/file\"`                        |\n\nSources: [tests/test\\_json.py61-91](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L61-L91) [tests/test\\_json.py107-120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L107-L120)\n\n### Special Cases\n\n#### Infinity and NaN\n\nBy default, `float('inf')`, `float('-inf')`, and `float('nan')` values raise errors in JSON serialization. You can configure how they are handled:\n\n```\n```\n\nWith this configuration, these values become `\"Infinity\"`, `\"-Infinity\"`, and `\"NaN\"` in JSON.\n\nSources: [tests/test\\_json.py508-538](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L508-L538)\n\n#### Bytes\n\nYou can configure how bytes are serialized to JSON:\n\n```\n```\n\nOptions:\n\n- `'utf8'` (default): Decode bytes as UTF-8\n- `'base64'`: Encode bytes as base64\n- `'hex'`: Encode bytes as hexadecimal\n\nSources: [tests/test\\_json.py541-576](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L541-L576)\n\n## Customizing JSON Serialization\n\nPydantic offers multiple ways to customize how types are serialized to JSON.\n\n```\n```\n\nSources: [tests/test\\_json.py212-226](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L212-L226) [tests/test\\_json.py400-414](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L400-L414) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439)\n\n### Field Serializers\n\nField serializers allow customizing serialization for specific fields in a model:\n\n```\n```\n\nThe `when_used` parameter can be:\n\n- `'always'` (default): Apply the serializer for all serializations\n- `'json'`: Apply only when serializing to JSON\n- `'unless-none'`: Apply only for non-None values\n\nSources: [tests/test\\_json.py212-226](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L212-L226) [tests/test\\_json.py292-332](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L292-L332)\n\n### JSON Encoders\n\nYou can use the `json_encoders` configuration option to customize serialization for specific types:\n\n```\n```",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1024,
      "character_count": 4303,
      "created_at": "2025-10-16T17:41:45.949645",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "JSON encoders are applied when serializing to JSON, not when creating Python dictionaries.\n\nSources: [tests/test\\_json.py400-414](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L400-L414) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439) [tests/test\\_json.py480-488](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L480-L488)\n\n### Annotated Serializers\n\nYou can attach serializers to specific type annotations using `Annotated` and `PlainSerializer`:\n\n```\n```\n\nSources: [tests/test\\_json.py442-450](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L442-L450)\n\n## Integration with Standard JSON Module\n\nPydantic provides a compatibility function for use with the standard `json` module:\n\n```\n```\n\nThis allows serializing models and other Pydantic types using the standard `json` module.\n\nSources: [tests/test\\_json.py120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L120-L120) [tests/test\\_json.py278-288](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L278-L288)\n\n## Inheritance and JSON Serialization\n\nIn class inheritance, field serializers from parent classes are used, unless the child class provides its own serializer for the same field:\n\n```\n```\n\nNote that `json_encoders` configurations are not inherited; child models must define their own.\n\nSources: [tests/test\\_json.py254-268](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L254-L268) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439)\n\n## JSON Schema and Conversion\n\nFor information about generating JSON Schema from Pydantic models, see [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md).\n\nSources: [tests/test\\_json.py372-397](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L372-L397)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [JSON Conversion](#json-conversion.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Serialization and Deserialization Architecture](#serialization-and-deserialization-architecture.md)\n- [JSON Serialization Methods](#json-serialization-methods.md)\n- [BaseModel Serialization](#basemodel-serialization.md)\n- [TypeAdapter Serialization](#typeadapter-serialization.md)\n- [JSON Deserialization Methods](#json-deserialization-methods.md)\n- [Type Handling in JSON Serialization](#type-handling-in-json-serialization.md)\n- [Built-in Type Serialization](#built-in-type-serialization.md)\n- [Special Cases](#special-cases.md)\n- [Infinity and NaN](#infinity-and-nan.md)\n- [Bytes](#bytes.md)\n- [Customizing JSON Serialization](#customizing-json-serialization.md)\n- [Field Serializers](#field-serializers.md)\n- [JSON Encoders](#json-encoders.md)\n- [Annotated Serializers](#annotated-serializers.md)\n- [Integration with Standard JSON Module](#integration-with-standard-json-module.md)\n- [Inheritance and JSON Serialization](#inheritance-and-json-serialization.md)\n- [JSON Schema and Conversion](#json-schema-and-conversion.md)",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 819,
      "character_count": 3188,
      "created_at": "2025-10-16T17:41:45.954531",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic_4.3-json-conversion.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]