[
  {
    "text": "pydantic/pydantic | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[pydantic/pydantic](https://github.com/pydantic/pydantic \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 11 October 2025 ([76ef0b](https://github.com/pydantic/pydantic/commits/76ef0b08))\n\n- [Overview](pydantic/pydantic/1-overview.md)\n- [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- [BaseModel](pydantic/pydantic/2.1-basemodel.md)\n- [Field System](pydantic/pydantic/2.2-field-system.md)\n- [Model Configuration](pydantic/pydantic/2.3-model-configuration.md)\n- [Type System](pydantic/pydantic/3-type-system.md)\n- [Constrained Types](pydantic/pydantic/3.1-constrained-types.md)\n- [Network Types](pydantic/pydantic/3.2-network-types.md)\n- [TypeAdapter](pydantic/pydantic/3.3-typeadapter.md)\n- [Generics and Forward References](pydantic/pydantic/3.4-generics-and-forward-references.md)\n- [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- [Validators](pydantic/pydantic/4.1-validators.md)\n- [Serializers](pydantic/pydantic/4.2-serializers.md)\n- [JSON Conversion](pydantic/pydantic/4.3-json-conversion.md)\n- [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n- [Core Schema Generation](pydantic/pydantic/5.1-core-schema-generation.md)\n- [JSON Schema Generation](pydantic/pydantic/5.2-json-schema-generation.md)\n- [Advanced Features](pydantic/pydantic/6-advanced-features.md)\n- [Dataclass Support](pydantic/pydantic/6.1-dataclass-support.md)\n- [Function Validation](pydantic/pydantic/6.2-function-validation.md)\n- [RootModel and Computed Fields](pydantic/pydantic/6.3-rootmodel-and-computed-fields.md)\n- [Plugin System](pydantic/pydantic/6.4-plugin-system.md)\n- [Development and Deployment](pydantic/pydantic/7-development-and-deployment.md)\n- [Testing Framework](pydantic/pydantic/7.1-testing-framework.md)\n- [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md)\n- [Documentation System](pydantic/pydantic/7.3-documentation-system.md)\n- [Versioning and Dependencies](pydantic/pydantic/7.4-versioning-and-dependencies.md)\n- [Migration and Compatibility](pydantic/pydantic/8-migration-and-compatibility.md)\n- [V1 to V2 Migration](pydantic/pydantic/8.1-v1-to-v2-migration.md)\n- [Backported Modules](pydantic/pydantic/8.2-backported-modules.md)\n\nMenu\n\n# Overview\n\nRelevant source files",
    "metadata": {
      "chunk_id": 0,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 741,
      "character_count": 2429,
      "created_at": "2025-10-16T17:41:45.432175",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 0,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [.pre-commit-config.yaml](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml)\n- [CITATION.cff](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff)\n- [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md)\n- [docs/concepts/config.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md)\n- [docs/concepts/dataclasses.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md)\n- [docs/concepts/json.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json.md)\n- [docs/concepts/json\\_schema.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md)\n- [docs/concepts/models.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md)\n- [docs/concepts/performance.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md)\n- [docs/concepts/serialization.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md)\n- [docs/concepts/validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md)\n- [docs/contributing.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md)\n- [docs/examples/custom\\_validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/examples/custom_validators.md)\n- [docs/integrations/aws\\_lambda.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/aws_lambda.md)\n- [docs/integrations/llms.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/llms.md)\n- [docs/migration.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md)\n- [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py)\n- [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py)\n- [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py)\n- [pydantic/version.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py)\n- [release/README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/release/README.md)\n- [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py)\n- [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py)\n- [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py)\n- [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py)\n- [uv.lock](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock)\n\nThis document provides a high-level introduction to Pydantic's architecture, core concepts, and design philosophy. It explains what Pydantic is, its relationship with pydantic-core, and how the major systems interact.\n\nFor detailed information about specific subsystems, see:\n\n- Model system details: [Core Model System](pydantic/pydantic/2-core-model-system.md)\n- Type system details: [Type System](pydantic/pydantic/3-type-system.md)\n- Validation and serialization: [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md)\n- Schema generation: [Schema Generation](pydantic/pydantic/5-schema-generation.md)\n\n## What is Pydantic",
    "metadata": {
      "chunk_id": 1,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 983,
      "character_count": 3373,
      "created_at": "2025-10-16T17:41:45.434244",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 1,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "Pydantic is a data validation library for Python that uses Python type hints to validate, parse, and serialize data. It provides runtime type checking and data conversion, ensuring that data conforms to specified types and constraints.\n\nThe library's primary goal is to guarantee that the output data structure precisely conforms to the applied type hints, rather than simply checking input validity. This means Pydantic can coerce input data (e.g., converting string `\"123\"` to integer `123`) while ensuring the resulting instance meets all type requirements.\n\n**Sources:** [pydantic/main.py1-70](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L70) [docs/concepts/models.md1-52](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md#L1-L52)\n\n## Core Architecture\n\nPydantic's architecture consists of three main layers: user-facing APIs, schema generation, and the validation/serialization engine.\n\n### System Overview\n\n```\n```\n\n**Sources:** [pydantic/main.py1-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L238) [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py)\n\n### User-Facing APIs\n\nPydantic provides four primary entry points for validation:\n\n| API              | Purpose                        | Primary Use Case                                       |\n| ---------------- | ------------------------------ | ------------------------------------------------------ |\n| `BaseModel`      | Class-based models with fields | Domain models, API schemas, configuration              |\n| `TypeAdapter`    | Validate arbitrary types       | One-off validation, generic types, non-model scenarios |\n| `@dataclass`     | Enhanced dataclasses           | Dataclass-style models with validation                 |\n| `@validate_call` | Function argument validation   | Validating function inputs and outputs                 |\n\nAll four APIs converge on the same schema generation and validation pipeline, ensuring consistent behavior across different usage patterns.\n\n**Sources:** [pydantic/main.py118-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L238) [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) [pydantic/dataclasses.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/dataclasses.py) [pydantic/decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/decorator.py)\n\n### Pydantic-Core Integration\n\nPydantic's performance-critical validation and serialization logic is implemented in `pydantic-core`, a separate Rust library. The relationship is strictly versioned:\n\n```\n```\n\nThe version compatibility is enforced at import time:\n\n- **Current Pydantic version:** `2.12.0b1+dev` [pydantic/version.py11](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L11-L11)\n- **Required pydantic-core version:** `2.40.1` [pydantic/version.py22](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L22-L22)\n- **Compatibility check:** `_ensure_pydantic_core_version()` [pydantic/version.py82-98](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L82-L98)\n\n**Sources:** [pydantic/version.py1-114](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py#L1-L114) [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py)\n\n## Main Workflows\n\n### Validation Pipeline\n\nThe validation process transforms raw input data into validated model instances through multiple stages:\n\n```\n```\n\nKey validation entry points:",
    "metadata": {
      "chunk_id": 2,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 945,
      "character_count": 3821,
      "created_at": "2025-10-16T17:41:45.439413",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 2,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- `BaseModel.__init__(self, **data)` [pydantic/main.py240-257](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L257)\n- `BaseModel.model_validate(cls, obj)` [pydantic/main.py653-699](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L653-L699)\n- `BaseModel.model_validate_json(cls, json_data)` [pydantic/main.py702-743](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L702-L743)\n- `TypeAdapter.validate_python(obj)` and `TypeAdapter.validate_json(json_data)`\n\nThe actual validation is delegated to `SchemaValidator` from pydantic-core:\n\n- Stored in `cls.__pydantic_validator__` [pydantic/main.py197-198](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L197-L198)\n- Called via `validate_python()`, `validate_json()`, or `validate_strings()` methods\n\n**Sources:** [pydantic/main.py240-781](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L240-L781) [docs/concepts/validators.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md#L1-L50)\n\n### Serialization Pipeline\n\nSerialization converts validated model instances into dictionaries or JSON strings:\n\n```\n```\n\nKey serialization methods:\n\n- `model_dump(mode='python'|'json')` [pydantic/main.py418-474](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L474)\n- `model_dump_json()` [pydantic/main.py476-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L476-L534)\n\nThe serialization is handled by `SchemaSerializer` from pydantic-core:\n\n- Stored in `cls.__pydantic_serializer__` [pydantic/main.py194-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L194-L195)\n- Called via `to_python()` or `to_json()` methods\n\n**Sources:** [pydantic/main.py418-534](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L418-L534) [docs/concepts/serialization.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md#L1-L50)\n\n### Schema Generation Flow\n\nSchema generation is a two-stage process: first generating CoreSchema for validation, then optionally generating JSON Schema for documentation:\n\n```\n```\n\nThe schema generation process:\n\n1. **Type Analysis:** Python type annotations are analyzed using `GenerateSchema` class [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py)\n2. **CoreSchema Creation:** Types are converted to CoreSchema format understood by pydantic-core\n3. **Validator/Serializer Creation:** CoreSchema is used to build `SchemaValidator` and `SchemaSerializer` instances\n4. **JSON Schema Generation:** Optionally, CoreSchema is converted to JSON Schema for API documentation\n\n**Sources:** [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py) [docs/concepts/json\\_schema.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md#L1-L50)\n\n## Field and Configuration System\n\n### Field Definition\n\nFields are defined using `FieldInfo` instances, which store metadata and constraints:\n\n```\n```\n\nFields can be defined in three ways:",
    "metadata": {
      "chunk_id": 3,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 927,
      "character_count": 3328,
      "created_at": "2025-10-16T17:41:45.444872",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 3,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "1. Bare annotation: `field_name: int` [pydantic/fields.py295-351](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L295-L351)\n2. With default: `field_name: int = 10` [pydantic/fields.py354-447](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L354-L447)\n3. Using `Field()`: `field_name: int = Field(default=10, gt=0)` [pydantic/fields.py267-292](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L267-L292)\n\n**Sources:** [pydantic/fields.py98-733](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L98-L733) [pydantic/\\_internal/\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_fields.py)\n\n### Configuration Hierarchy\n\nConfiguration can be specified at multiple levels:\n\n| Level | Syntax                           | Priority |\n| ----- | -------------------------------- | -------- |\n| Model | `model_config = ConfigDict(...)` | Lowest   |\n| Field | `Field(frozen=True, ...)`        | Medium   |\n| Type  | `Annotated[int, Strict()]`       | Highest  |\n\nConfiguration is processed by `ConfigWrapper` [pydantic/\\_internal/\\_config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py) and merged during schema generation.\n\n**Sources:** [pydantic/config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/config.py) [pydantic/\\_internal/\\_config.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_config.py) [docs/concepts/config.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md#L1-L50)\n\n## Model Lifecycle\n\nThe lifecycle of a Pydantic model class from definition to usage:\n\n```\n```\n\nKey lifecycle steps:\n\n1. **Metaclass invocation:** `ModelMetaclass.__new__()` [pydantic/\\_internal/\\_model\\_construction.py80-276](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L276)\n2. **Namespace inspection:** `inspect_namespace()` identifies fields vs class vars [pydantic/\\_internal/\\_model\\_construction.py520-642](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L520-L642)\n3. **Field collection:** `set_model_fields()` creates `FieldInfo` instances [pydantic/\\_internal/\\_model\\_construction.py299-331](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L299-L331)\n4. **Schema generation:** `complete_model_class()` builds validation/serialization schemas [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518)\n5. **Completion:** Model marked as complete in `__pydantic_complete__` [pydantic/main.py167-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L167-L168)\n\nModels can be rebuilt after definition using `model_rebuild()` [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) if forward references need resolution.",
    "metadata": {
      "chunk_id": 4,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 886,
      "character_count": 3041,
      "created_at": "2025-10-16T17:41:45.447943",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 4,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "**Sources:** [pydantic/\\_internal/\\_model\\_construction.py79-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L277) [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650)\n\n## Class Attributes Reference\n\nEvery `BaseModel` subclass has these key class attributes:\n\n| Attribute                      | Type                           | Description                                                                                                                                 |\n| ------------------------------ | ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------- |\n| `model_config`                 | `ConfigDict`                   | Configuration dictionary [pydantic/main.py153-156](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L153-L156)           |\n| `__pydantic_core_schema__`     | `CoreSchema`                   | Core validation schema [pydantic/main.py170-171](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L170-L171)             |\n| `__pydantic_validator__`       | `SchemaValidator`              | Validation engine instance [pydantic/main.py197-198](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L197-L198)         |\n| `__pydantic_serializer__`      | `SchemaSerializer`             | Serialization engine instance [pydantic/main.py194-195](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L194-L195)      |\n| `__pydantic_fields__`          | `dict[str, FieldInfo]`         | Field definitions [pydantic/main.py200-203](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L200-L203)                  |\n| `__pydantic_computed_fields__` | `dict[str, ComputedFieldInfo]` | Computed field definitions [pydantic/main.py208-209](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L208-L209)         |\n| `__pydantic_decorators__`      | `DecoratorInfos`               | Validator/serializer decorators [pydantic/main.py177-179](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L177-L179)    |\n| `__pydantic_complete__`        | `bool`                         | Whether model building is complete [pydantic/main.py167-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L167-L168) |\n\n**Sources:** [pydantic/main.py118-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L118-L238)\n\n## Instance Attributes Reference\n\nEvery `BaseModel` instance has these instance attributes:\n\n| Attribute                 | Type                     | Description                                                                                                                                |\n| ------------------------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| `__dict__`                | `dict[str, Any]`         | Field values storage                                                                                                                       |\n| `__pydantic_fields_set__` | `set[str]`               | Fields explicitly set during init [pydantic/main.py214-215](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L214-L215) |\n| `__pydantic_extra__`      | `dict[str, Any] \\| None` | Extra fields when `extra='allow'` [pydantic/main.py211-212](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L212) |\n| `__pydantic_private__`    | `dict[str, Any] \\| None` | Private attribute values [pydantic/main.py217-218](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L217-L218)          |\n\n**Sources:** [pydantic/main.py211-238](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L211-L238)\n\n## Project Structure\n\nThe Pydantic codebase is organized into several key directories:",
    "metadata": {
      "chunk_id": 5,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 1022,
      "character_count": 4231,
      "created_at": "2025-10-16T17:41:45.452781",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 5,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "```\npydantic/\n├── main.py              # BaseModel implementation\n├── fields.py            # FieldInfo and Field() function\n├── config.py            # ConfigDict definition\n├── types.py             # Custom types (URL, Email, etc.)\n├── type_adapter.py      # TypeAdapter implementation\n├── dataclasses.py       # Enhanced dataclass support\n├── json_schema.py       # JSON Schema generation\n├── functional_validators.py    # Validator decorators\n├── functional_serializers.py   # Serializer decorators\n└── _internal/\n    ├── _model_construction.py  # ModelMetaclass\n    ├── _generate_schema.py     # GenerateSchema class\n    ├── _fields.py              # Field collection logic\n    ├── _decorators.py          # Decorator processing\n    ├── _config.py              # ConfigWrapper\n    └── _namespace_utils.py     # Type resolution\n```\n\n**Sources:** [pydantic/main.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L1-L1) [pydantic/fields.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py#L1-L1) [pydantic/\\_internal/\\_model\\_construction.py1](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L1-L1)\n\n## Migration from V1\n\nPydantic V2 represents a major rewrite with significant API changes. The key differences:\n\n| V1 API           | V2 API                    | Notes                |\n| ---------------- | ------------------------- | -------------------- |\n| `parse_obj()`    | `model_validate()`        | Method renamed       |\n| `parse_raw()`    | `model_validate_json()`   | Specialized for JSON |\n| `dict()`         | `model_dump()`            | Method renamed       |\n| `json()`         | `model_dump_json()`       | Method renamed       |\n| `__fields__`     | `model_fields`            | Now a property       |\n| `__validators__` | `__pydantic_decorators__` | Structure changed    |\n\nA V1 compatibility layer is available through `pydantic.v1` imports for gradual migration.\n\n**Sources:** [docs/migration.md1-150](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md#L1-L150) [pydantic/\\_migration.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_migration.py)\n\n## Performance Considerations\n\nPydantic V2's performance characteristics:\n\n1. **Rust-based validation:** Core validation logic runs in Rust for significant speedup\n2. **Schema caching:** Validators and serializers are cached on the class [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py)\n3. **JSON parsing:** `model_validate_json()` is faster than `model_validate(json.loads())` [docs/concepts/performance.md5-16](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md#L5-L16)\n4. **Deferred building:** Models can defer schema generation with `defer_build=True` config\n\n**Sources:** [docs/concepts/performance.md1-50](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md#L1-L50) [pydantic/\\_internal/\\_model\\_construction.py247-258](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L247-L258)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page",
    "metadata": {
      "chunk_id": 6,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 855,
      "character_count": 3288,
      "created_at": "2025-10-16T17:41:45.457924",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 6,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "collection_context": "pydantic_pydantic"
    }
  },
  {
    "text": "- [Overview](#overview.md)\n- [What is Pydantic](#what-is-pydantic.md)\n- [Core Architecture](#core-architecture.md)\n- [System Overview](#system-overview.md)\n- [User-Facing APIs](#user-facing-apis.md)\n- [Pydantic-Core Integration](#pydantic-core-integration.md)\n- [Main Workflows](#main-workflows.md)\n- [Validation Pipeline](#validation-pipeline.md)\n- [Serialization Pipeline](#serialization-pipeline.md)\n- [Schema Generation Flow](#schema-generation-flow.md)\n- [Field and Configuration System](#field-and-configuration-system.md)\n- [Field Definition](#field-definition.md)\n- [Configuration Hierarchy](#configuration-hierarchy.md)\n- [Model Lifecycle](#model-lifecycle.md)\n- [Class Attributes Reference](#class-attributes-reference.md)\n- [Instance Attributes Reference](#instance-attributes-reference.md)\n- [Project Structure](#project-structure.md)\n- [Migration from V1](#migration-from-v1.md)\n- [Performance Considerations](#performance-considerations.md)",
    "metadata": {
      "chunk_id": 7,
      "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "input_type": "pydantic_pydantic",
      "chunking_strategy": "programming_language_documentation",
      "token_count": 235,
      "character_count": 954,
      "created_at": "2025-10-16T17:41:45.458043",
      "parent_context": null,
      "semantic_type": "pydantic_pydantic",
      "collection_name": "pydantic_pydantic",
      "subfolder_name": null,
      "collection_strategy": "programming_language_documentation",
      "chunk_index_in_file": 7,
      "file_relative_path": "Docs\\pydantic_pydantic\\_pydantic_pydantic.md",
      "collection_context": "pydantic_pydantic"
    }
  }
]