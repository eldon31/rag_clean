{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
  "source_repo": "qdrant_web_docs",
  "total_chunks": 12,
  "chunks": [
    {
      "content": "Local Shard Architecture | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 0,
      "end_char": 2038
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Local Shard Architecture\n\nRelevant source files\n\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n- [lib/collection/src/shards/local\\_shard/scroll.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot\\_tests.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.",
      "index": 1,
      "token_count": 629,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 1938,
      "end_char": 3942
    },
    {
      "content": "/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n\n## Purpose and Scope\n\nThis document describes the internal architecture of `LocalShard`, which is the fundamental data storage and processing unit in Qdrant. A `LocalShard` encapsulates all components necessary for storing and indexing vector data on a single node, including segments, WAL (Write-Ahead Log), background optimization workers, and update coordination mechanisms.\n\nFor information about how multiple shards are coordinated across replicas, see [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md). For details about segment internals and construction, see [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md). For distributed operations like shard transfers, see [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md).\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs84-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L84-L124)\n\n---\n\n## Core Components Overview\n\nA `LocalShard` is composed of several interacting subsystems:\n\n| Component               | Type                                         | Purpose                                                        |\n| ----------------------- | -------------------------------------------- | -------------------------------------------------------------- |\n| `segments`              | `LockedSegmentHolder`                        | Container managing all segments in the shard                   |\n| `wal`                   | `RecoverableWal`                             | Write-ahead log for durability and recovery                    |\n| `update_handler`        | `Arc<Mutex<UpdateHandler>>`                  | Coordinates background workers for optimization and flushing   |",
      "index": 2,
      "token_count": 408,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 3842,
      "end_char": 5805
    },
    {
      "content": "pdateHandler>>`                  | Coordinates background workers for optimization and flushing   |\n| `update_sender`         | `ArcSwap<Sender<UpdateSignal>>`              | Channel for sending update signals to workers                  |\n| `update_tracker`        | `UpdateTracker`                              | Tracks ongoing update operations                               |\n| `optimizers`            | `Arc<Vec<Arc<Optimizer>>>`                   | Collection of segment optimization strategies                  |\n| `payload_index_schema`  | `Arc<SaveOnDisk<PayloadIndexSchema>>`        | Schema for payload field indices                               |\n| `collection_config`     | `Arc<TokioRwLock<CollectionConfigInternal>>` | Collection configuration                                       |\n| `update_operation_lock` | `Arc<tokio::sync::RwLock<()>>`               | Prevents updates during critical operations (scroll, snapshot) |\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs89-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L89-L124)\n\n---\n\n## LocalShard Internal Architecture\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs89-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L89-L124) [lib/collection/src/update\\_handler.rs92-144](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L92-L144)\n\n---\n\n## Initialization and Loading\n\n### Building a New LocalShard\n\nWhen creating a new `LocalShard` from scratch, the `build()` method performs the following steps:\n\n```\n```\n\nThe number of initial segments is determined by `optimizer_config.get_number_segments()`. Each segment is built in parallel using dedicated threads to speed up initialization.\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs503-606](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L503-L606)\n\n### Loading an Existing LocalShard",
      "index": 3,
      "token_count": 512,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 5705,
      "end_char": 7737
    },
    {
      "content": "203e41/lib/collection/src/shards/local_shard/mod.rs#L503-L606)\n\n### Loading an Existing LocalShard\n\nRecovery from disk follows a different path:\n\n```\n```\n\nKey aspects:\n\n- Segments are loaded in parallel (up to `MAX_CONCURRENT_SEGMENT_LOADS = 10`)\n- Consistency checks and repairs are performed on each segment\n- Deduplication removes any duplicate point IDs across segments\n- WAL operations are replayed sequentially to restore the latest state\n- A final flush ensures on-disk consistency\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs270-456](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L270-L456) [lib/collection/src/shards/local\\_shard/mod.rs618-736](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L618-L736)\n\n---\n\n## UpdateHandler and Background Workers\n\nThe `UpdateHandler` manages three concurrent background workers that handle different aspects of shard maintenance:\n\n### Worker Architecture\n\n```\n```\n\n**Sources:** [lib/collection/src/update\\_handler.rs92-144](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L92-L144) [lib/collection/src/update\\_handler.rs193-252](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L193-L252)\n\n### Update Worker\n\nThe **update worker** runs on a blocking thread and processes incoming update operations:\n\n1. Receives `UpdateSignal` messages from the update queue\n2. Acquires the `update_operation_lock` (write lock) to prevent conflicts with scrolls/snapshots\n3. Writes operations to the WAL for durability\n4. Applies operations to segments via `CollectionUpdater::update()`\n5. Signals the optimizer worker after each operation\n6. Handles recovery by re-applying failed operations\n\n**Signal Types:**\n\n- `UpdateSignal::Operation(OperationData)` - Apply a collection update operation\n- `UpdateSignal::Stop` - Gracefully stop the worker\n- `UpdateSignal::Nop` - Trigger optimizers without performing an operation",
      "index": 4,
      "token_count": 544,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 7637,
      "end_char": 9664
    },
    {
      "content": "acefully stop the worker\n- `UpdateSignal::Nop` - Trigger optimizers without performing an operation\n- `UpdateSignal::Plunger(oneshot::Sender)` - Wait for all previous updates to complete\n\n**Sources:** [lib/collection/src/update\\_handler.rs67-78](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L67-L78) [lib/collection/src/update\\_handler.rs218-228](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L218-L228)\n\n### Optimizer Worker\n\nThe **optimizer worker** runs as an async task and manages segment optimization:\n\n1. Receives `OptimizerSignal` messages\n2. Checks optimizer conditions to identify non-optimal segments\n3. Launches optimization tasks up to `max_optimization_threads` limit\n4. Manages CPU/IO resource budgets for optimization tasks\n5. Cleans up finished optimization handles every `OPTIMIZER_CLEANUP_INTERVAL` (5 seconds)\n6. Ensures at least one appendable segment with capacity exists\n\nEach optimization task:\n\n- Acquires a resource permit (IO threads for HNSW indexing)\n- Runs the optimizer on specified segments\n- Reports status via `Tracker` in `optimizers_log`\n- Releases the resource permit on completion\n- Triggers another optimizer check via callback\n\n**Sources:** [lib/collection/src/update\\_handler.rs620-753](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L620-L753) [lib/collection/src/update\\_handler.rs324-484](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L324-L484)\n\n### Flush Worker\n\nThe **flush worker** runs on a blocking thread and periodically persists data:\n\n1. Wakes up every `flush_interval_sec` seconds\n2. Flushes all segments to disk\n3. Saves `LocalShardClocks` (newest/oldest clock maps)\n4. Truncates the WAL up to the minimum flushed operation number\n5. Respects `wal_keep_from` to prevent truncating operations still needed by other components\n\n**Sources:** [lib/collection/src/update\\_handler.rs238-249](https://github.",
      "index": 5,
      "token_count": 544,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 9564,
      "end_char": 11573
    },
    {
      "content": "ded by other components\n\n**Sources:** [lib/collection/src/update\\_handler.rs238-249](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L238-L249)\n\n### Worker Coordination\n\n```\n```\n\n**Sources:** [lib/collection/src/update\\_handler.rs193-252](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L193-L252)\n\n---\n\n## WAL and Clock Management\n\n### RecoverableWal Structure\n\nThe `RecoverableWal` wrapper extends the base `SerdeWal` with logical clock tracking:\n\n```\n```\n\n**Clock Management:**\n\n- `newest_clocks` tracks the highest clock tag received from each peer\n- `oldest_clocks` tracks the cutoff clock below which operations are guaranteed to be applied\n- Clock tags enable optimistic replication without consensus (see [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md))\n- Clock files are persisted alongside segments during flushes\n\n**Sources:** [lib/collection/src/wal\\_delta.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/wal_delta.rs) (referenced in mod.rs:95,249), [lib/collection/src/shards/local\\_shard/mod.rs76-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L76-L82)\n\n### WAL Recovery Process\n\nDuring `load_from_wal()`, operations are replayed to restore state:\n\n```\n```\n\nKey behaviors:\n\n- Operations are read from the first un-truncated WAL index\n- Clock tags are advanced for each operation\n- Transient errors (disk full, etc.) are tracked in `failed_operation` set for retry\n- Service errors (corrupted data) abort recovery\n- Other errors (NotFound) are logged but don't stop recovery\n- Final flush ensures on-disk consistency even if only past operations were re-applied\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs618-736](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L618-L736)\n\n---\n\n## Segment Operations and Locking\n\n### Update Operation Lock",
      "index": 6,
      "token_count": 563,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 11473,
      "end_char": 13475
    },
    {
      "content": "s/local_shard/mod.rs#L618-L736)\n\n---\n\n## Segment Operations and Locking\n\n### Update Operation Lock\n\nThe `update_operation_lock` is a critical synchronization primitive:\n\n```\n```\n\n**Purpose:**\n\n1. **Scroll consistency** - Prevents updates from modifying segments during scroll operations, ensuring consistent pagination for resharding and shard transfers\n2. **Snapshot integrity** - Prevents updates during segment proxy/unproxy operations\n3. **Read isolation** - Multiple reads can proceed concurrently (read locks are shared)\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs108-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L124) [lib/collection/src/shards/local\\_shard/scroll.rs156-213](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs#L156-L213) [lib/collection/src/collection\\_manager/collection\\_updater.rs42-78](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs#L42-L78)\n\n---\n\n## Snapshot Creation with Segment Proxying\n\nSnapshot creation uses a sophisticated proxying mechanism to allow writes during the long-running snapshot process:\n\n### Proxy Mechanism\n\n```\n```\n\n**Key Steps:**\n\n1. **Plunger signal** (if WAL not saved): Ensures all updates are flushed to segments before snapshotting\n2. **Proxy creation**: All segments wrapped in `ProxySegment` that redirects writes to temporary segment\n3. **Incremental unproxying**: Each segment unproxied immediately after snapshot to minimize temp segment growth\n4. **Atomic finalization**: Last proxy and temp segment promoted together to maintain consistency\n5. **Temp segment handling**: Added to collection if non-empty, otherwise deleted\n\n**Sources:** [lib/collection/src/shards/local\\_shard/snapshot.rs62-121](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L62-L121) [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.",
      "index": 7,
      "token_count": 538,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 13375,
      "end_char": 15395
    },
    {
      "content": "rd/snapshot.rs#L62-L121) [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L268-L352)\n\n### Proxy Segment Structure\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L268-L352)\n\n---\n\n## Disk Usage Monitoring\n\nThe `DiskUsageWatcher` component monitors shard disk usage and prevents excessive WAL growth:\n\n```\n```\n\nThe watcher uses a default threshold of `2 * wal_capacity_mb` to detect when the shard is using excessive disk space, which typically indicates the WAL has grown too large and needs truncation.\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs198-206](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L198-L206)\n\n---\n\n## LocalShard Lifecycle Operations\n\n### Graceful Shutdown\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs824-835](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L824-L835) [lib/collection/src/update\\_handler.rs254-290](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L254-L290)\n\n### Optimizer Configuration Update\n\nWhen optimizer configuration changes (e.g., flush interval, max optimization threads), the `UpdateHandler` must be restarted:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs767-795](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L767-L795)\n\n---\n\n## Data Consistency and Recovery\n\n### Failed Operation Tracking\n\nThe `SegmentHolder` maintains a `failed_operation` set containing operation numbers that failed with transient errors:\n\n```\n```\n\n**Transient vs Non-Transient Errors:**\n\n- **Transient:** Disk full, temporary I/O errors - will be retried\n- **Non-Transient:** Point not found, invalid operation - logged but not retried",
      "index": 8,
      "token_count": 602,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 15295,
      "end_char": 17330
    },
    {
      "content": "- will be retried\n- **Non-Transient:** Point not found, invalid operation - logged but not retried\n\n**Sources:** [lib/collection/src/collection\\_manager/collection\\_updater.rs17-40](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs#L17-L40) [lib/collection/src/update\\_handler.rs293-319](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L293-L319)\n\n### Data Consistency Check\n\nWhen the `data-consistency-check` feature is enabled, the shard performs deep consistency validation after WAL recovery:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs732-735](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L732-L735) [lib/collection/src/shards/local\\_shard/mod.rs741-765](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L741-L765)\n\n---\n\n## Shard Status and Health Monitoring\n\nThe `LocalShard` reports its health status based on various conditions:\n\n### Status Determination Logic\n\n```\n```\n\n**Status Meanings:**\n\n- **Red:** Failed operations or optimizer errors - shard is unhealthy\n- **Yellow:** Proxy segments present (snapshotting/optimizing) or pending optimizations\n- **Grey:** Suboptimal state but optimizers never triggered (prevents crash loop on startup)\n- **Green:** All operations successful and no pending optimizations\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs879-936](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L879-L936)\n\n---\n\n## File System Layout\n\nThe `LocalShard` uses a well-defined directory structure:\n\n```\n<shard_path>/\n├── wal/                      # Write-ahead log directory\n│   ├── 00000000000000000000  # WAL segment files\n│   └── 00000000000000000001\n├── segments/                 # Segment storage directory\n│   ├── <segment_id_1>/       # Individual segment directories\n│   ├── <segment_id_2>/\n│   └── ...\n├── newest_clocks.",
      "index": 9,
      "token_count": 613,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 17230,
      "end_char": 19249
    },
    {
      "content": "id_1>/       # Individual segment directories\n│   ├── <segment_id_2>/\n│   └── ...\n├── newest_clocks.json        # Highest clock tags from each peer\n└── oldest_clocks.json        # Cutoff clocks (guaranteed applied)\n```\n\n**Path Construction:**\n\n- `wal_path()` → `shard_path/wal`\n- `segments_path()` → `shard_path/segments`\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs76-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L76-L82) [lib/collection/src/shards/local\\_shard/mod.rs462-468](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L462-L468)\n\n---\n\n## Summary\n\nThe `LocalShard` is a sophisticated data management component that coordinates:\n\n1. **Durable storage** via WAL and segment persistence\n2. **Background optimization** through concurrent worker threads\n3. **Update consistency** using locks and logical clocks\n4. **Snapshot creation** with minimal write disruption via segment proxying\n5. **Health monitoring** and automatic recovery from transient failures\n\nKey design principles:\n\n- **Separation of concerns:** Update, optimization, and flush workers operate independently\n- **Non-blocking operations:** Segment proxying enables long operations without blocking writes\n- **Robust recovery:** WAL replay and failed operation tracking ensure data integrity\n- **Resource management:** Budget-based optimization prevents resource exhaustion\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs) [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Local Shard Architecture](#local-shard-architecture.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Core Components Overview](#core-components-overview.md)\n- [LocalShard Internal Architecture](#localshard-internal-architecture.md)",
      "index": 10,
      "token_count": 523,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 19149,
      "end_char": 21191
    },
    {
      "content": "-components-overview.md)\n- [LocalShard Internal Architecture](#localshard-internal-architecture.md)\n- [Initialization and Loading](#initialization-and-loading.md)\n- [Building a New LocalShard](#building-a-new-localshard.md)\n- [Loading an Existing LocalShard](#loading-an-existing-localshard.md)\n- [UpdateHandler and Background Workers](#updatehandler-and-background-workers.md)\n- [Worker Architecture](#worker-architecture.md)\n- [Update Worker](#update-worker.md)\n- [Optimizer Worker](#optimizer-worker.md)\n- [Flush Worker](#flush-worker.md)\n- [Worker Coordination](#worker-coordination.md)\n- [WAL and Clock Management](#wal-and-clock-management.md)\n- [RecoverableWal Structure](#recoverablewal-structure.md)\n- [WAL Recovery Process](#wal-recovery-process.md)\n- [Segment Operations and Locking](#segment-operations-and-locking.md)\n- [Update Operation Lock](#update-operation-lock.md)\n- [Snapshot Creation with Segment Proxying](#snapshot-creation-with-segment-proxying.md)\n- [Proxy Mechanism](#proxy-mechanism.md)\n- [Proxy Segment Structure](#proxy-segment-structure.md)\n- [Disk Usage Monitoring](#disk-usage-monitoring.md)\n- [LocalShard Lifecycle Operations](#localshard-lifecycle-operations.md)\n- [Graceful Shutdown](#graceful-shutdown.md)\n- [Optimizer Configuration Update](#optimizer-configuration-update.md)\n- [Data Consistency and Recovery](#data-consistency-and-recovery.md)\n- [Failed Operation Tracking](#failed-operation-tracking.md)\n- [Data Consistency Check](#data-consistency-check.md)\n- [Shard Status and Health Monitoring](#shard-status-and-health-monitoring.md)\n- [Status Determination Logic](#status-determination-logic.md)\n- [File System Layout](#file-system-layout.md)\n- [Summary](#summary.md)",
      "index": 11,
      "token_count": 418,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_web_docs\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_web_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:35.302520",
        "total_chunks": 12
      },
      "start_char": 21091,
      "end_char": 23139
    }
  ]
}