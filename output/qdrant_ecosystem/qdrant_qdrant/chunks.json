{
  "collection": "qdrant_ecosystem",
  "subdirectory": "qdrant_qdrant",
  "total_chunks": 428,
  "chunks": [
    {
      "content": "qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 621,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 0,
      "end_char": 2011
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Introduction to Qdrant\n\nRelevant source files\n\n- [Cargo.lock](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.lock)\n- [Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml)\n- [README.md](https://github.com/qdrant/qdrant/blob/48203e41/README.md)\n- [docs/CODE\\_OF\\_CONDUCT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CODE_OF_CONDUCT.md)\n- [docs/CONTRIBUTING.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md)\n- [docs/DEVELOPMENT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md)\n- [docs/QUICK\\_START.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md)\n- [docs/imgs/ci-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/ci-coverage-report.png)\n- [docs/imgs/local-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/redoc/default\\_version.",
      "index": 1,
      "token_count": 700,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 1911,
      "end_char": 3945
    },
    {
      "content": "com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/redoc/default\\_version.js](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js)\n- [docs/redoc/index.html](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html)\n- [docs/redoc/v0.10.3/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.3/openapi.json)\n- [docs/redoc/v0.10.4/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.4/openapi.json)\n- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.5/openapi.json)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.11.x/openapi.json)\n- [docs/redoc/v1.13.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.13.x/openapi.json)\n- [docs/redoc/v1.15.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.15.x/openapi.json)\n- [docs/roadmap/README.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/README.md)\n- [docs/roadmap/roadmap-2022.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2022.md)\n- [docs/roadmap/roadmap-2023.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2023.md)\n- [docs/roadmap/roadmap-2024.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2024.md)\n- [lib/api/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml)\n- [lib/collection/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml)\n- [lib/common/common/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)\n- [lib/common/dataset/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/dataset/Cargo.toml)\n- [lib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.",
      "index": 2,
      "token_count": 815,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 3845,
      "end_char": 5893
    },
    {
      "content": "ib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.toml)\n- [lib/segment/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml)\n- [lib/sparse/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/Cargo.toml)\n- [lib/storage/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [tools/missed\\_cherry\\_picks.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/missed_cherry_picks.sh)\n\n## Purpose and Scope\n\nThis document provides a high-level overview of Qdrant, a vector similarity search engine and vector database written in Rust. It covers the fundamental concepts, system architecture, and deployment modes. This introduction is intended to orient developers and operators to Qdrant's core functionality and how its major components fit together.\n\nFor detailed information about specific subsystems, see:\n\n- System architecture layers: [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- Vector storage and indexing strategies: [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- Distributed deployment and clustering: [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- API endpoints and interfaces: [API Reference](qdrant/qdrant/9-api-reference.md)\n\n**Sources:** [README.md1-237](https://github.com/qdrant/qdrant/blob/48203e41/README.md#L1-L237) [Cargo.toml1-400](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L1-L400)\n\n---\n\n## What is Qdrant?\n\nQdrant (read: *quadrant*) is a production-ready vector similarity search engine that provides:\n\n- **Vector storage and search**: Store high-dimensional vectors and perform similarity searches with various distance metrics (Dot product, Cosine, Euclidean)\n- **Payload filtering**: Attach JSON payloads to vectors and filter search results based on payload values\n- **Horizontal scaling**: Distributed deployment with sharding and replication for billion-scale datasets",
      "index": 3,
      "token_count": 548,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 5793,
      "end_char": 7819
    },
    {
      "content": "rizontal scaling**: Distributed deployment with sharding and replication for billion-scale datasets\n- **Multiple APIs**: REST API (port 6333) and gRPC interface for production workloads\n- **Persistence**: All data persisted to disk with write-ahead logging (WAL)\n\nThe system is designed for neural network and semantic-based matching applications, including semantic search, recommendation engines, and similarity-based retrieval systems.\n\n**Sources:** [README.md22-28](https://github.com/qdrant/qdrant/blob/48203e41/README.md#L22-L28) [lib/common/common/src/defaults.rs9-13](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs#L9-L13)\n\n---\n\n## Core Concepts\n\n### Points\n\nA **point** is the fundamental data unit in Qdrant. Each point consists of:\n\n| Component     | Description                                  |\n| ------------- | -------------------------------------------- |\n| **ID**        | Unique identifier (integer or UUID)          |\n| **Vector(s)** | One or more dense or sparse vectors          |\n| **Payload**   | Optional JSON object with arbitrary metadata |\n\nPoints are the entities that users create, update, search, and retrieve.\n\n### Vectors\n\nVectors are numerical representations of data (embeddings). Qdrant supports:\n\n- **Dense vectors**: Fixed-size arrays of floating-point numbers\n- **Sparse vectors**: Vectors with mostly zero values, stored efficiently as index-value pairs\n- **Multi-vectors**: Multiple vectors per point for different embedding models\n- **Named vectors**: Collections can store multiple vector types per point\n\n**Sources:** [README.md23-24](https://github.com/qdrant/qdrant/blob/48203e41/README.md#L23-L24) [QUICK\\_START.md120-135](https://github.com/qdrant/qdrant/blob/48203e41/QUICK_START.md#L120-L135)\n\n### Collections\n\nA **collection** is a named container that groups points with a shared vector configuration. Collections define:\n\n- Vector dimensions and distance metrics\n- Indexing parameters (HNSW configuration)\n- Optimization settings",
      "index": 4,
      "token_count": 488,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 7719,
      "end_char": 9737
    },
    {
      "content": "dimensions and distance metrics\n- Indexing parameters (HNSW configuration)\n- Optimization settings\n- Sharding and replication strategy (in distributed mode)\n\n```\n```\n\n**Diagram: Collection Structure**\n\n**Sources:** [QUICK\\_START.md44-116](https://github.com/qdrant/qdrant/blob/48203e41/QUICK_START.md#L44-L116) [lib/collection/Cargo.toml1-112](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml#L1-L112)\n\n### Segments\n\nWithin each collection, data is organized into **segments** - immutable data units containing:\n\n- Vector storage (dense/sparse vectors)\n- Payload storage (JSON data)\n- Vector indices (HNSW, Plain, or Sparse indices)\n- Payload indices (for filtering)\n- ID tracker (mapping external to internal IDs)\n\nSegments are the basic unit of storage and optimization in Qdrant.\n\n**Sources:** Diagram 1 in high-level architecture diagrams\n\n---\n\n## System Architecture Overview\n\nQdrant employs a layered architecture with clear separation of concerns:\n\n```\n```\n\n**Diagram: Layered Architecture from API to Storage**\n\nThe key architectural layers are:\n\n1. **API Layer**: HTTP/REST (Actix-web) and gRPC (Tonic) endpoints handle client requests\n2. **Service Orchestration**: Request routing and consensus coordination\n3. **Collection Management**: Logical data containers with sharding strategy\n4. **Shard Distribution**: Local shards (hosted on current node) and remote shards (proxies to other peers)\n5. **Segment Management**: Immutable data units with indices and storage\n6. **Persistence**: Disk-backed storage with memory-mapped files and WAL\n\n**Sources:** Diagram 1 from high-level architecture, [Cargo.toml78-86](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L78-L86) [lib/segment/Cargo.toml1-223](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml#L1-L223) [lib/collection/Cargo.toml1-112](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml#L1-L112)\n\n---\n\n## Deployment Modes\n\n### Standalone Mode\n\nIn standalone mode, Qdrant runs as a single process:\n\n```\n```",
      "index": 5,
      "token_count": 561,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 9637,
      "end_char": 11685
    },
    {
      "content": "ployment Modes\n\n### Standalone Mode\n\nIn standalone mode, Qdrant runs as a single process:\n\n```\n```\n\n**Diagram: Standalone Deployment**\n\n- All data stored locally\n- No consensus coordination overhead\n- Suitable for development, testing, and single-machine production deployments\n\n### Distributed Mode\n\nIn distributed mode, multiple Qdrant peers form a cluster using Raft consensus:\n\n```\n```\n\n**Diagram: Distributed Cluster with 3 Peers**\n\n- **Raft consensus**: Metadata operations (collection creation, shard transfers) use Raft for strong consistency\n- **Sharding**: Collections divided into shards distributed across peers\n- **Replication**: Each shard can have multiple replicas on different peers\n- **Internal gRPC**: Peers communicate via internal gRPC port for replication and forwarding\n\n**Sources:** Diagram 4 from high-level architecture, [Cargo.toml103-114](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L103-L114) [lib/storage/Cargo.toml43-49](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml#L43-L49)\n\n---\n\n## API Interfaces\n\n### REST API\n\nThe REST API is built with **Actix-web** and provides:\n\n- Collection management (`/collections/*`)\n- Point operations (`/collections/{name}/points/*`)\n- Search and query endpoints\n- Cluster management (`/cluster/*`)\n- Snapshots and telemetry\n\nExample endpoint structure:\n\n| Endpoint                            | Method | Purpose           |\n| ----------------------------------- | ------ | ----------------- |\n| `/collections/{name}`               | PUT    | Create collection |\n| `/collections/{name}/points`        | PUT    | Upsert points     |\n| `/collections/{name}/points/search` | POST   | Search vectors    |\n| `/collections/{name}/points/scroll` | POST   | Iterate points    |\n\n**Sources:** [Cargo.toml78-80](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L78-L80) [docs/redoc/index.html1-103](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html#L1-L103)\n\n### gRPC API\n\nThe gRPC interface uses **Tonic** and provides:",
      "index": 6,
      "token_count": 525,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 11585,
      "end_char": 13625
    },
    {
      "content": "3e41/docs/redoc/index.html#L1-L103)\n\n### gRPC API\n\nThe gRPC interface uses **Tonic** and provides:\n\n- All REST API functionality with protocol buffer definitions\n- Better performance for production workloads\n- Streaming support for batch operations\n- Protocol definitions in `lib/api/src/grpc/proto/*.proto`\n\nThe gRPC service runs on the same port as REST (6333) with automatic protocol detection.\n\n**Sources:** [Cargo.toml81-84](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L81-L84) [lib/api/Cargo.toml17-47](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml#L17-L47)\n\n---\n\n## Key Features Mapping to Code\n\n```\n```\n\n**Diagram: Feature to Code Component Mapping**\n\n**Sources:** Diagram 2 and Diagram 3 from high-level architecture\n\n---\n\n## Version and Compatibility\n\nCurrent version: **1.15.5**\n\nQdrant maintains backward compatibility for at least one minor version, allowing rolling upgrades without downtime in distributed deployments. Storage formats are compatible between consecutive versions with automatic migration support.\n\n**Sources:** [lib/common/common/src/defaults.rs9-13](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs#L9-L13) [docs/redoc/default\\_version.js1-2](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js#L1-L2)\n\n---\n\n## Next Steps\n\nFor deeper understanding of specific subsystems:\n\n- **Architecture details**: See [System Architecture](qdrant/qdrant/2-system-architecture.md) for the complete layer breakdown\n- **Vector indexing**: See [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md) for HNSW, quantization, and sparse vectors\n- **Search processing**: See [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md) for the complete query flow\n- **Distributed features**: See [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md) for Raft consensus and shard management",
      "index": 7,
      "token_count": 517,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 13525,
      "end_char": 15481
    },
    {
      "content": "m Features](qdrant/qdrant/7-distributed-system-features.md) for Raft consensus and shard management\n- **Configuration**: See [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md) for setup and deployment options\n\n**Sources:** Table of contents JSON structure\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Introduction to Qdrant](#introduction-to-qdrant.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [What is Qdrant?](#what-is-qdrant.md)\n- [Core Concepts](#core-concepts.md)\n- [Points](#points.md)\n- [Vectors](#vectors.md)\n- [Collections](#collections.md)\n- [Segments](#segments.md)\n- [System Architecture Overview](#system-architecture-overview.md)\n- [Deployment Modes](#deployment-modes.md)\n- [Standalone Mode](#standalone-mode.md)\n- [Distributed Mode](#distributed-mode.md)\n- [API Interfaces](#api-interfaces.md)\n- [REST API](#rest-api.md)\n- [gRPC API](#grpc-api.md)\n- [Key Features Mapping to Code](#key-features-mapping-to-code.md)\n- [Version and Compatibility](#version-and-compatibility.md)\n- [Next Steps](#next-steps.md)",
      "index": 8,
      "token_count": 296,
      "metadata": {
        "title": "_qdrant_qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant.md",
        "file_name": "_qdrant_qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.469437",
        "total_chunks": 9
      },
      "start_char": 15381,
      "end_char": 17429
    },
    {
      "content": "qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 621,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 0,
      "end_char": 2011
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Introduction to Qdrant\n\nRelevant source files\n\n- [Cargo.lock](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.lock)\n- [Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml)\n- [README.md](https://github.com/qdrant/qdrant/blob/48203e41/README.md)\n- [docs/CODE\\_OF\\_CONDUCT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CODE_OF_CONDUCT.md)\n- [docs/CONTRIBUTING.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md)\n- [docs/DEVELOPMENT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md)\n- [docs/QUICK\\_START.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md)\n- [docs/imgs/ci-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/ci-coverage-report.png)\n- [docs/imgs/local-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/redoc/default\\_version.",
      "index": 1,
      "token_count": 700,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 1911,
      "end_char": 3945
    },
    {
      "content": "com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/redoc/default\\_version.js](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js)\n- [docs/redoc/index.html](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html)\n- [docs/redoc/v0.10.3/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.3/openapi.json)\n- [docs/redoc/v0.10.4/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.4/openapi.json)\n- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.5/openapi.json)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.11.x/openapi.json)\n- [docs/redoc/v1.13.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.13.x/openapi.json)\n- [docs/redoc/v1.15.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.15.x/openapi.json)\n- [docs/roadmap/README.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/README.md)\n- [docs/roadmap/roadmap-2022.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2022.md)\n- [docs/roadmap/roadmap-2023.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2023.md)\n- [docs/roadmap/roadmap-2024.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2024.md)\n- [lib/api/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml)\n- [lib/collection/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml)\n- [lib/common/common/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)\n- [lib/common/dataset/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/dataset/Cargo.toml)\n- [lib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.",
      "index": 2,
      "token_count": 815,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 3845,
      "end_char": 5893
    },
    {
      "content": "ib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.toml)\n- [lib/segment/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml)\n- [lib/sparse/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/Cargo.toml)\n- [lib/storage/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [tools/missed\\_cherry\\_picks.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/missed_cherry_picks.sh)\n\n## Purpose and Scope\n\nThis document provides a high-level overview of Qdrant, a vector similarity search engine and vector database written in Rust. It covers the fundamental concepts, system architecture, and deployment modes. This introduction is intended to orient developers and operators to Qdrant's core functionality and how its major components fit together.\n\nFor detailed information about specific subsystems, see:\n\n- System architecture layers: [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- Vector storage and indexing strategies: [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- Distributed deployment and clustering: [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- API endpoints and interfaces: [API Reference](qdrant/qdrant/9-api-reference.md)\n\n**Sources:** [README.md1-237](https://github.com/qdrant/qdrant/blob/48203e41/README.md#L1-L237) [Cargo.toml1-400](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L1-L400)\n\n---\n\n## What is Qdrant?\n\nQdrant (read: *quadrant*) is a production-ready vector similarity search engine that provides:\n\n- **Vector storage and search**: Store high-dimensional vectors and perform similarity searches with various distance metrics (Dot product, Cosine, Euclidean)\n- **Payload filtering**: Attach JSON payloads to vectors and filter search results based on payload values\n- **Horizontal scaling**: Distributed deployment with sharding and replication for billion-scale datasets",
      "index": 3,
      "token_count": 548,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 5793,
      "end_char": 7819
    },
    {
      "content": "rizontal scaling**: Distributed deployment with sharding and replication for billion-scale datasets\n- **Multiple APIs**: REST API (port 6333) and gRPC interface for production workloads\n- **Persistence**: All data persisted to disk with write-ahead logging (WAL)\n\nThe system is designed for neural network and semantic-based matching applications, including semantic search, recommendation engines, and similarity-based retrieval systems.\n\n**Sources:** [README.md22-28](https://github.com/qdrant/qdrant/blob/48203e41/README.md#L22-L28) [lib/common/common/src/defaults.rs9-13](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs#L9-L13)\n\n---\n\n## Core Concepts\n\n### Points\n\nA **point** is the fundamental data unit in Qdrant. Each point consists of:\n\n| Component     | Description                                  |\n| ------------- | -------------------------------------------- |\n| **ID**        | Unique identifier (integer or UUID)          |\n| **Vector(s)** | One or more dense or sparse vectors          |\n| **Payload**   | Optional JSON object with arbitrary metadata |\n\nPoints are the entities that users create, update, search, and retrieve.\n\n### Vectors\n\nVectors are numerical representations of data (embeddings). Qdrant supports:\n\n- **Dense vectors**: Fixed-size arrays of floating-point numbers\n- **Sparse vectors**: Vectors with mostly zero values, stored efficiently as index-value pairs\n- **Multi-vectors**: Multiple vectors per point for different embedding models\n- **Named vectors**: Collections can store multiple vector types per point\n\n**Sources:** [README.md23-24](https://github.com/qdrant/qdrant/blob/48203e41/README.md#L23-L24) [QUICK\\_START.md120-135](https://github.com/qdrant/qdrant/blob/48203e41/QUICK_START.md#L120-L135)\n\n### Collections\n\nA **collection** is a named container that groups points with a shared vector configuration. Collections define:\n\n- Vector dimensions and distance metrics\n- Indexing parameters (HNSW configuration)\n- Optimization settings",
      "index": 4,
      "token_count": 488,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 7719,
      "end_char": 9737
    },
    {
      "content": "dimensions and distance metrics\n- Indexing parameters (HNSW configuration)\n- Optimization settings\n- Sharding and replication strategy (in distributed mode)\n\n```\n```\n\n**Diagram: Collection Structure**\n\n**Sources:** [QUICK\\_START.md44-116](https://github.com/qdrant/qdrant/blob/48203e41/QUICK_START.md#L44-L116) [lib/collection/Cargo.toml1-112](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml#L1-L112)\n\n### Segments\n\nWithin each collection, data is organized into **segments** - immutable data units containing:\n\n- Vector storage (dense/sparse vectors)\n- Payload storage (JSON data)\n- Vector indices (HNSW, Plain, or Sparse indices)\n- Payload indices (for filtering)\n- ID tracker (mapping external to internal IDs)\n\nSegments are the basic unit of storage and optimization in Qdrant.\n\n**Sources:** Diagram 1 in high-level architecture diagrams\n\n---\n\n## System Architecture Overview\n\nQdrant employs a layered architecture with clear separation of concerns:\n\n```\n```\n\n**Diagram: Layered Architecture from API to Storage**\n\nThe key architectural layers are:\n\n1. **API Layer**: HTTP/REST (Actix-web) and gRPC (Tonic) endpoints handle client requests\n2. **Service Orchestration**: Request routing and consensus coordination\n3. **Collection Management**: Logical data containers with sharding strategy\n4. **Shard Distribution**: Local shards (hosted on current node) and remote shards (proxies to other peers)\n5. **Segment Management**: Immutable data units with indices and storage\n6. **Persistence**: Disk-backed storage with memory-mapped files and WAL\n\n**Sources:** Diagram 1 from high-level architecture, [Cargo.toml78-86](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L78-L86) [lib/segment/Cargo.toml1-223](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml#L1-L223) [lib/collection/Cargo.toml1-112](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml#L1-L112)\n\n---\n\n## Deployment Modes\n\n### Standalone Mode\n\nIn standalone mode, Qdrant runs as a single process:\n\n```\n```",
      "index": 5,
      "token_count": 561,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 9637,
      "end_char": 11685
    },
    {
      "content": "ployment Modes\n\n### Standalone Mode\n\nIn standalone mode, Qdrant runs as a single process:\n\n```\n```\n\n**Diagram: Standalone Deployment**\n\n- All data stored locally\n- No consensus coordination overhead\n- Suitable for development, testing, and single-machine production deployments\n\n### Distributed Mode\n\nIn distributed mode, multiple Qdrant peers form a cluster using Raft consensus:\n\n```\n```\n\n**Diagram: Distributed Cluster with 3 Peers**\n\n- **Raft consensus**: Metadata operations (collection creation, shard transfers) use Raft for strong consistency\n- **Sharding**: Collections divided into shards distributed across peers\n- **Replication**: Each shard can have multiple replicas on different peers\n- **Internal gRPC**: Peers communicate via internal gRPC port for replication and forwarding\n\n**Sources:** Diagram 4 from high-level architecture, [Cargo.toml103-114](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L103-L114) [lib/storage/Cargo.toml43-49](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml#L43-L49)\n\n---\n\n## API Interfaces\n\n### REST API\n\nThe REST API is built with **Actix-web** and provides:\n\n- Collection management (`/collections/*`)\n- Point operations (`/collections/{name}/points/*`)\n- Search and query endpoints\n- Cluster management (`/cluster/*`)\n- Snapshots and telemetry\n\nExample endpoint structure:\n\n| Endpoint                            | Method | Purpose           |\n| ----------------------------------- | ------ | ----------------- |\n| `/collections/{name}`               | PUT    | Create collection |\n| `/collections/{name}/points`        | PUT    | Upsert points     |\n| `/collections/{name}/points/search` | POST   | Search vectors    |\n| `/collections/{name}/points/scroll` | POST   | Iterate points    |\n\n**Sources:** [Cargo.toml78-80](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L78-L80) [docs/redoc/index.html1-103](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html#L1-L103)\n\n### gRPC API\n\nThe gRPC interface uses **Tonic** and provides:",
      "index": 6,
      "token_count": 525,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 11585,
      "end_char": 13625
    },
    {
      "content": "3e41/docs/redoc/index.html#L1-L103)\n\n### gRPC API\n\nThe gRPC interface uses **Tonic** and provides:\n\n- All REST API functionality with protocol buffer definitions\n- Better performance for production workloads\n- Streaming support for batch operations\n- Protocol definitions in `lib/api/src/grpc/proto/*.proto`\n\nThe gRPC service runs on the same port as REST (6333) with automatic protocol detection.\n\n**Sources:** [Cargo.toml81-84](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L81-L84) [lib/api/Cargo.toml17-47](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml#L17-L47)\n\n---\n\n## Key Features Mapping to Code\n\n```\n```\n\n**Diagram: Feature to Code Component Mapping**\n\n**Sources:** Diagram 2 and Diagram 3 from high-level architecture\n\n---\n\n## Version and Compatibility\n\nCurrent version: **1.15.5**\n\nQdrant maintains backward compatibility for at least one minor version, allowing rolling upgrades without downtime in distributed deployments. Storage formats are compatible between consecutive versions with automatic migration support.\n\n**Sources:** [lib/common/common/src/defaults.rs9-13](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs#L9-L13) [docs/redoc/default\\_version.js1-2](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js#L1-L2)\n\n---\n\n## Next Steps\n\nFor deeper understanding of specific subsystems:\n\n- **Architecture details**: See [System Architecture](qdrant/qdrant/2-system-architecture.md) for the complete layer breakdown\n- **Vector indexing**: See [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md) for HNSW, quantization, and sparse vectors\n- **Search processing**: See [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md) for the complete query flow\n- **Distributed features**: See [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md) for Raft consensus and shard management",
      "index": 7,
      "token_count": 517,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 13525,
      "end_char": 15481
    },
    {
      "content": "m Features](qdrant/qdrant/7-distributed-system-features.md) for Raft consensus and shard management\n- **Configuration**: See [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md) for setup and deployment options\n\n**Sources:** Table of contents JSON structure\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Introduction to Qdrant](#introduction-to-qdrant.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [What is Qdrant?](#what-is-qdrant.md)\n- [Core Concepts](#core-concepts.md)\n- [Points](#points.md)\n- [Vectors](#vectors.md)\n- [Collections](#collections.md)\n- [Segments](#segments.md)\n- [System Architecture Overview](#system-architecture-overview.md)\n- [Deployment Modes](#deployment-modes.md)\n- [Standalone Mode](#standalone-mode.md)\n- [Distributed Mode](#distributed-mode.md)\n- [API Interfaces](#api-interfaces.md)\n- [REST API](#rest-api.md)\n- [gRPC API](#grpc-api.md)\n- [Key Features Mapping to Code](#key-features-mapping-to-code.md)\n- [Version and Compatibility](#version-and-compatibility.md)\n- [Next Steps](#next-steps.md)",
      "index": 8,
      "token_count": 296,
      "metadata": {
        "title": "_qdrant_qdrant_1-introduction-to-qdrant",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1-introduction-to-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "file_name": "_qdrant_qdrant_1-introduction-to-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.478706",
        "total_chunks": 9
      },
      "start_char": 15381,
      "end_char": 17429
    },
    {
      "content": "Key Concepts and Terminology | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 0,
      "end_char": 2042
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Key Concepts and Terminology\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/qdrant/blob/48203e41/README.md)\n- [docs/CODE\\_OF\\_CONDUCT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CODE_OF_CONDUCT.md)\n- [docs/CONTRIBUTING.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md)\n- [docs/DEVELOPMENT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md)\n- [docs/QUICK\\_START.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md)\n- [docs/grpc/docs.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/grpc/docs.md)\n- [docs/imgs/ci-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/ci-coverage-report.png)\n- [docs/imgs/local-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/redoc/master/openapi.json](https://github.",
      "index": 1,
      "token_count": 677,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 1942,
      "end_char": 3941
    },
    {
      "content": "lob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json)\n- [docs/roadmap/README.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/README.md)\n- [docs/roadmap/roadmap-2022.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2022.md)\n- [docs/roadmap/roadmap-2023.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2023.md)\n- [docs/roadmap/roadmap-2024.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2024.md)\n- [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n- [lib/api/src/grpc/proto/collections.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto)\n- [lib/api/src/grpc/proto/points.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto)\n- [lib/api/src/grpc/qdrant.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs)\n- [lib/collection/src/config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs)\n- [lib/collection/src/operations/config\\_diff.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs)\n- [lib/collection/src/operations/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs)\n- [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs)\n- [lib/collection/src/optimizers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/optimizers_builder.rs)\n- [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n- [lib/storage/src/content\\_manager/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/collection_meta_ops.rs)\n- [lib/storage/src/content\\_manager/conversions.",
      "index": 2,
      "token_count": 701,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 3841,
      "end_char": 5888
    },
    {
      "content": "storage/src/content_manager/collection_meta_ops.rs)\n- [lib/storage/src/content\\_manager/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs)\n\n## Purpose and Scope\n\nThis page defines the fundamental concepts and terminology used throughout Qdrant's architecture and codebase. Understanding these concepts is essential for working with or extending Qdrant. For details on how these components are organized into a complete system, see [System Architecture](qdrant/qdrant/2-system-architecture.md). For information on specific operational aspects like search processing or data updates, see [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md) and [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md).\n\n---\n\n## Points\n\nA **point** is the fundamental data unit in Qdrant. Each point consists of:\n\n- **ID**: A unique identifier (numeric or UUID)\n- **Vector(s)**: One or more vector embeddings\n- **Payload**: Optional JSON metadata\n- **Version**: A sequential number tracking modifications\n\n### Point Structure in Code\n\n```\n```\n\n**Internal Representation**:\n\n- `PointStruct`: API representation for point insertion [lib/api/src/grpc/qdrant.rs213-218](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L213-L218)\n- `RecordInternal`: Internal representation with all fields [lib/collection/src/operations/types.rs131-143](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L131-L143)\n- `ScoredPoint`: Search result with score [lib/segment/src/types.rs350-366](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L350-L366)\n\n### Point IDs\n\nQdrant supports two types of point identifiers:\n\n| Type    | Rust Type | Example                                | Use Case                               |\n| ------- | --------- | -------------------------------------- | -------------------------------------- |",
      "index": 3,
      "token_count": 488,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 5788,
      "end_char": 7769
    },
    {
      "content": "--- | --------- | -------------------------------------- | -------------------------------------- |\n| Numeric | `u64`     | `42`                                   | Sequential IDs, simple indexing        |\n| UUID    | `Uuid`    | `550e8400-e29b-41d4-a716-446655440000` | Distributed systems, global uniqueness |\n\nThe `ExtendedPointId` enum represents both types:\n\n[lib/segment/src/types.rs155-162](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L155-L162)\n\n**Compact Representation**: Internally, Qdrant uses `CompactExtendedPointId` (17 bytes) instead of `ExtendedPointId` (24 bytes) for memory efficiency [lib/segment/src/types.rs248-254](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L248-L254)\n\n**Sources**: [lib/segment/src/types.rs146-272](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L146-L272) [lib/api/src/grpc/proto/points.proto38-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L38-L43)\n\n---\n\n## Vectors\n\nVectors are numerical representations of data used for similarity search. Qdrant supports multiple vector types per point.\n\n### Vector Types\n\n```\n```\n\n### Dense Vectors\n\nStandard float vectors commonly used for semantic embeddings:\n\n- **Type**: `Vec<f32>` (default) or `Vec<u8>`, `Vec<f16>` [lib/api/src/grpc/proto/collections.proto8-13](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto#L8-L13)\n- **Storage**: Optimized for SIMD operations\n- **Example**: 768-dimensional BERT embedding\n\n### Sparse Vectors\n\nHigh-dimensional vectors with mostly zero values:\n\n- **Type**: Indices (`Vec<u32>`) + Values (`Vec<f32>`) [lib/api/src/grpc/proto/points.proto97-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L97-L100)\n- **Storage**: Only non-zero elements stored\n- **Use case**: Text search with learned sparse representations, BM25-style retrieval\n\n### Multi-Dense Vectors\n\nMultiple dense vectors per point:",
      "index": 4,
      "token_count": 614,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 7669,
      "end_char": 9683
    },
    {
      "content": "representations, BM25-style retrieval\n\n### Multi-Dense Vectors\n\nMultiple dense vectors per point:\n\n- **Type**: `Vec<DenseVector>` [lib/api/src/grpc/proto/points.proto102-104](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L102-L104)\n- **Comparator**: `MaxSim` - maximum similarity across all vectors [lib/api/src/grpc/proto/collections.proto67-73](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto#L67-L73)\n- **Use case**: Multiple aspects/views of the same entity\n\n### Named Vectors\n\nCollections can store multiple different vector types under different names:\n\n- **Type**: `HashMap<VectorNameBuf, VectorInternal>` [lib/segment/src/data\\_types/vectors.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/data_types/vectors.rs)\n- **Default name**: `\"\"` (empty string) stored as `DEFAULT_VECTOR_NAME` [lib/segment/src/data\\_types/vectors.rs16](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/data_types/vectors.rs#L16-L16)\n- **Use case**: Multi-modal search (e.g., text + image embeddings)\n\n**Sources**: [lib/segment/src/types.rs62-66](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L62-L66) [lib/segment/src/data\\_types/vectors.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/data_types/vectors.rs) [lib/api/src/grpc/proto/points.proto68-117](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L68-L117)\n\n---\n\n## Payloads\n\nPayloads are arbitrary JSON metadata attached to points. They enable filtering and enrichment of search results.\n\n### Payload Structure\n\n```\n```\n\n### Payload Types\n\n| Type     | Rust Type         | Indexed As                    | Example                  |\n| -------- | ----------------- | ----------------------------- | ------------------------ |\n| Keyword  | `String`          | `PayloadSchemaType::Keyword`  | `\"category\"`             |\n| Integer  | `i64`             | `PayloadSchemaType::Integer`  | `42`                     |",
      "index": 5,
      "token_count": 579,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 9583,
      "end_char": 11620
    },
    {
      "content": "|\n| Integer  | `i64`             | `PayloadSchemaType::Integer`  | `42`                     |\n| Float    | `f64`             | `PayloadSchemaType::Float`    | `3.14`                   |\n| Boolean  | `bool`            | `PayloadSchemaType::Bool`     | `true`                   |\n| Datetime | `DateTimeWrapper` | `PayloadSchemaType::Datetime` | `\"2024-01-15T12:00:00Z\"` |\n| UUID     | `Uuid`            | `PayloadSchemaType::Uuid`     | `\"550e8400-...\"`         |\n| Geo      | `GeoPoint`        | `PayloadSchemaType::Geo`      | `{lat: 51.5, lon: -0.1}` |\n| Text     | `String`          | `PayloadSchemaType::Text`     | `\"Full text content\"`    |\n\n### Payload Keys and Paths\n\nPayload keys use JSON path notation:\n\n- **Type**: `JsonPath` (alias for `PayloadKeyType`) [lib/segment/src/types.rs48](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L48-L48)\n- **Nested access**: `\"user.address.city\"`\n- **Array access**: `\"items[0].name\"`\n\n### DateTime Representation\n\nDateTime values are stored as microsecond timestamps:\n\n- **External format**: RFC 3339 string (`\"2024-01-15T12:00:00Z\"`)\n- **Internal format**: `i64` microseconds since Unix epoch\n- **Type**: `DateTimeWrapper` wrapping `chrono::DateTime<Utc>` [lib/segment/src/types.rs68-81](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L68-L81)\n\n**Sources**: [lib/segment/src/types.rs48-138](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L48-L138) [lib/api/src/grpc/qdrant.rs13-17](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L13-L17)\n\n---\n\n## Collections\n\nA **collection** is a named logical container for points with a defined schema. Collections are the primary organizational unit in Qdrant.\n\n### Collection Components Hierarchy\n\n```\n```\n\n### Collection Configuration\n\nThe `CollectionConfig` defines the collection's behavior:\n\n**Core Parameters** (`CollectionParams`):\n\n- **Vectors**: Vector configurations (size, distance metric, quantization)",
      "index": 6,
      "token_count": 616,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 11520,
      "end_char": 13529
    },
    {
      "content": "* (`CollectionParams`):\n\n- **Vectors**: Vector configurations (size, distance metric, quantization)\n- **Shard number**: Number of shards (default: 1 standalone, N nodes distributed)\n- **Replication factor**: Number of replicas per shard [lib/collection/src/config.rs104-106](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L104-L106)\n- **Write consistency factor**: Minimum replicas for successful writes [lib/collection/src/config.rs108-113](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L108-L113)\n- **On-disk payload**: Whether payloads are stored in memory or on disk [lib/collection/src/config.rs121-128](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L121-L128)\n\n**Index Configuration**:\n\n- **HNSW config**: Graph construction parameters [lib/collection/src/operations/types.rs175](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L175-L175)\n- **Quantization config**: Vector compression settings [lib/collection/src/operations/types.rs179](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L179-L179)\n- **Optimizer config**: Segment optimization thresholds [lib/collection/src/operations/types.rs176](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L176-L176)\n\n### Collection Status\n\nCollections report their operational state:\n\n| Status | Code                       | Meaning                  |\n| ------ | -------------------------- | ------------------------ |\n| Green  | `CollectionStatus::Green`  | All segments ready       |\n| Yellow | `CollectionStatus::Yellow` | Optimization in progress |\n| Grey   | `CollectionStatus::Grey`   | Optimization pending     |\n| Red    | `CollectionStatus::Red`    | Operations failed        |\n\n**Sources**: [lib/collection/src/operations/types.rs66-79](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L66-L79) [lib/collection/src/config.rs86-133](https://github.",
      "index": 7,
      "token_count": 580,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 13429,
      "end_char": 15472
    },
    {
      "content": "lib/collection/src/operations/types.rs#L66-L79) [lib/collection/src/config.rs86-133](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L86-L133)\n\n---\n\n## Shards and Partitioning\n\nShards enable horizontal scaling by partitioning data across nodes. Each collection is divided into shards, which are distributed across the cluster.\n\n### Shard Distribution Model\n\n```\n```\n\n### Sharding Methods\n\n**Auto Sharding** (`ShardingMethod::Auto`):\n\n- Points distributed uniformly using hash function\n- Default method [lib/collection/src/config.rs76-84](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L76-L84)\n\n**Custom Sharding** (`ShardingMethod::Custom`):\n\n- Points routed by shard key (keyword or numeric)\n- Enables tenant isolation, geographic partitioning [lib/collection/src/config.rs99-102](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L99-L102)\n- Shard key types: `ShardKey::Keyword(String)` or `ShardKey::Number(u64)` [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n\n### Shard Replicas\n\nEach shard can have multiple replicas for fault tolerance:\n\n**Replica Types**:\n\n- **LocalShard**: Hosted on current peer, contains actual data [lib/collection/src/shards/local\\_shard](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard)\n- **RemoteShard**: Proxy to replica on another peer [lib/collection/src/shards/remote\\_shard](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/remote_shard)\n- **ProxyShard**: Temporary proxy during snapshot recovery [lib/collection/src/shards/proxy\\_shard](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/proxy_shard)\n\n**Replica States**:\n\n| State        | Code                         | Description                    |\n| ------------ | ---------------------------- | ------------------------------ |\n| Active       | `ReplicaState::Active`       | Serving read/write requests    |",
      "index": 8,
      "token_count": 557,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 15372,
      "end_char": 17395
    },
    {
      "content": "---------------- |\n| Active       | `ReplicaState::Active`       | Serving read/write requests    |\n| Dead         | `ReplicaState::Dead`         | Failed, not serving requests   |\n| Partial      | `ReplicaState::Partial`      | Being transferred/recovered    |\n| Initializing | `ReplicaState::Initializing` | Being created                  |\n| Listener     | `ReplicaState::Listener`     | Receiving updates, not serving |\n\n### ShardReplicaSet\n\nThe `ShardReplicaSet` coordinates operations across replicas:\n\n- Selects which replica handles read requests (prefer local)\n- Distributes write operations to all active replicas\n- Manages replica state transitions\n- Enforces consistency guarantees via `WriteOrdering` [lib/collection/src/shards/replica\\_set](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set)\n\n**Sources**: [lib/collection/src/config.rs76-102](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L76-L102) [lib/collection/src/shards/shard.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/shard.rs) [lib/collection/src/shards/replica\\_set](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set)\n\n---\n\n## Segments\n\nA **segment** is the fundamental storage and indexing unit within a shard. Segments are immutable once optimized and are managed by background optimization processes.\n\n### Segment Architecture\n\n```\n```\n\n### Segment Types\n\n**Plain Segments** (`SegmentType::Plain`):\n\n- Unindexed, supports all operations (insert, update, delete)\n- Uses brute-force search (exact results)\n- Typically small, recent data [lib/segment/src/types.rs397-404](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L397-L404)\n\n**Indexed Segments** (`SegmentType::Indexed`):\n\n- Contains HNSW graph index for fast approximate search\n- Read-only (new writes trigger re-optimization)\n- Typically larger, optimized segments [lib/segment/src/types.rs397-404](https://github.",
      "index": 9,
      "token_count": 534,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 17295,
      "end_char": 19299
    },
    {
      "content": "timization)\n- Typically larger, optimized segments [lib/segment/src/types.rs397-404](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L397-L404)\n\n### Segment Components\n\n**IdTracker**: Maps external point IDs to internal sequential IDs [lib/segment/src/id\\_tracker](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/id_tracker)\n\n- External: `ExtendedPointId` (u64 or UUID)\n- Internal: `PointOffsetType` (u32, dense sequential)\n- Tracks deletions via bitset\n\n**VectorData**: One instance per named vector [lib/segment/src/vector\\_data](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_data)\n\n- `VectorStorage`: Raw vector data (dense/sparse/multi)\n- `VectorIndex`: Search index (HNSW/Plain/Sparse)\n- `QuantizedVectors`: Optional compressed vectors\n\n**PayloadStorage**: JSON document store [lib/segment/src/payload\\_storage](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/payload_storage)\n\n- Types: `SimplePayloadStorage` (in-memory), `OnDiskPayloadStorage` (RocksDB/Gridstore), `MmapPayloadStorage`\n- Stores arbitrary JSON per point\n\n**PayloadIndex**: Indexes for filtered search [lib/segment/src/index/field\\_index](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index)\n\n- One index per payload field\n- Types: Numeric, Keyword, FullText, Geo, Bool, Datetime, UUID\n\n### Segment Optimization\n\nThe `UpdateHandler` manages background optimization:\n\n1. **Vacuum Optimizer**: Removes deleted points\n2. **Merge Optimizer**: Merges small segments\n3. **Indexing Optimizer**: Builds HNSW indexes for large segments\n4. **Config Mismatch Optimizer**: Rebuilds segments when config changes\n\nOptimization triggered when:\n\n- Deleted points exceed threshold (`deleted_threshold`)\n- Segment size exceeds indexing threshold (`indexing_threshold`)\n- Too many segments exist (`default_segment_number`)\n\n**Sources**: [lib/segment/src/types.rs394-461](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.",
      "index": 10,
      "token_count": 547,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 19199,
      "end_char": 21199
    },
    {
      "content": "b/segment/src/types.rs394-461](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L394-L461) [lib/collection/src/shards/local\\_shard](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard) [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs)\n\n---\n\n## Distance Metrics\n\nDistance metrics determine how vector similarity is calculated. Qdrant supports four primary distance functions.\n\n### Distance Types\n\n```\n```\n\n### Distance Implementation\n\n[lib/segment/src/types.rs290-341](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L290-L341)\n\n| Metric      | Enum                  | Order             | Use Case                            |\n| ----------- | --------------------- | ----------------- | ----------------------------------- |\n| Cosine      | `Distance::Cosine`    | Larger is better  | Text embeddings, normalized vectors |\n| Euclidean   | `Distance::Euclid`    | Smaller is better | Image embeddings, absolute distance |\n| Dot Product | `Distance::Dot`       | Larger is better  | Non-normalized embeddings           |\n| Manhattan   | `Distance::Manhattan` | Smaller is better | High-dimensional sparse vectors     |\n\n**Score Post-Processing**:\n\n- `Distance::postprocess_score()`: Converts raw distance to similarity score\n- Cosine/Dot: Higher scores = more similar\n- Euclid/Manhattan: Lower scores = more similar (inverted for ranking)\n\n**Vector Preprocessing**:\n\n- `Distance::preprocess_vector()`: Normalizes vectors if needed\n- Cosine: Normalizes to unit length\n- Others: No preprocessing\n\n**Sources**: [lib/segment/src/types.rs275-341](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L275-L341) [lib/segment/src/spaces/metric.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/spaces/metric.rs)\n\n---\n\n## Indexes\n\nIndexes accelerate search operations. Qdrant uses different index types for vectors and payloads.\n\n### Vector Indexes",
      "index": 11,
      "token_count": 545,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 21099,
      "end_char": 23108
    },
    {
      "content": "search operations. Qdrant uses different index types for vectors and payloads.\n\n### Vector Indexes\n\n**HNSW (Hierarchical Navigable Small World)**:\n\n- Graph-based approximate nearest neighbor index\n\n- Type: `Indexes::Hnsw(HnswConfig)` [lib/segment/src/types.rs559-566](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L559-L566)\n\n- Fast search with configurable accuracy/speed tradeoff\n\n- Parameters:\n\n  - `m`: Edges per node (higher = more accurate, more memory)\n  - `ef_construct`: Neighbors during construction (higher = better quality)\n  - `full_scan_threshold`: Switch to brute-force for small result sets\n\n**Plain Index**:\n\n- Brute-force search, exact results\n- Type: `Indexes::Plain {}` [lib/segment/src/types.rs559-566](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L559-L566)\n- Used for small segments or when 100% precision required\n\n**Sparse Vector Index**:\n\n- Inverted index for sparse vectors\n- Optimized for high-dimensional sparse data\n- Supports BM25-like scoring\n\n### Payload Indexes\n\nPayload indexes enable efficient filtering during search:\n\n| Index Type | Payload Type   | Operations                  | Structure                        |\n| ---------- | -------------- | --------------------------- | -------------------------------- |\n| Keyword    | String         | `=`, `≠`, `in`              | HashMap                          |\n| Numeric    | Integer, Float | `<`, `>`, `≤`, `≥`, `range` | Range tree                       |\n| FullText   | Text           | `match`, `contains`         | Inverted index with tokenization |\n| Geo        | GeoPoint       | `radius`, `bbox`            | R-tree                           |\n| Bool       | Boolean        | `=`, `≠`                    | Bitmap                           |\n| Datetime   | DateTime       | `<`, `>`, `range`           | Range tree (as i64 microseconds) |\n| UUID       | UUID           | `=`, `≠`, `in`              | HashMap (as u128)                |\n\n**Index Selection**:",
      "index": 12,
      "token_count": 499,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 23008,
      "end_char": 25013
    },
    {
      "content": "| `=`, `≠`, `in`              | HashMap (as u128)                |\n\n**Index Selection**:\n\n- `FieldIndex`: Per-field index abstraction [lib/segment/src/index/field\\_index](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index)\n- `StructPayloadIndex`: Manages all payload indexes for a segment\n- Auto-created based on schema or explicit configuration\n\n### Quantization\n\nVector quantization compresses vectors to reduce memory usage:\n\n**Scalar Quantization** (`ScalarQuantization`):\n\n- Converts f32 → u8 (4x compression)\n- Quantile-based range selection [lib/segment/src/types.rs693-717](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L693-L717)\n\n**Product Quantization** (`ProductQuantization`):\n\n- Divides vector into subvectors, quantizes each\n- 4x-64x compression ratio [lib/segment/src/types.rs719-743](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L719-L743)\n\n**Binary Quantization** (`BinaryQuantization`):\n\n- Converts to 1-bit or 2-bit representation\n- 32x compression [lib/segment/src/types.rs775-789](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L775-L789)\n- Supports asymmetric query encoding for accuracy\n\nQuantization is transparent to search - original vectors used for rescoring top-K candidates.\n\n**Sources**: [lib/segment/src/types.rs555-829](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L555-L829) [lib/segment/src/index/hnsw\\_index](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index) [lib/segment/src/index/field\\_index](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index)\n\n---\n\n## Summary Table: Key Type Mappings\n\n| Concept     | Rust Type              | File Location                                                                                                                                | Description                  |",
      "index": 13,
      "token_count": 550,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 24913,
      "end_char": 26862
    },
    {
      "content": "| Description                  |\n| ----------- | ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------- |\n| Point ID    | `ExtendedPointId`      | [lib/segment/src/types.rs155-162](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L155-L162)                         | u64 or UUID identifier       |\n| Point       | `PointStruct`          | [lib/api/src/grpc/qdrant.rs213](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L213-L213)                         | API representation           |\n| Record      | `RecordInternal`       | [lib/collection/src/operations/types.rs131](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L131-L131) | Internal point with all data |\n| Vector      | `VectorStructInternal` | [lib/segment/src/data\\_types/vectors.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/data_types/vectors.rs)               | All vector types             |\n| Payload     | `Payload`              | [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)                                          | JSON metadata map            |\n| Collection  | `Collection`           | [lib/collection/src/collection](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection)                                | Logical container            |\n| Shard       | `ShardId`              | [lib/collection/src/shards/shard.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/shard.rs)                      | u32 partition identifier     |\n| Replica Set | `ShardReplicaSet`      | [lib/collection/src/shards/replica\\_set](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set)               | Replica coordinator          |",
      "index": 14,
      "token_count": 509,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 26762,
      "end_char": 28797
    },
    {
      "content": "blob/48203e41/lib/collection/src/shards/replica_set)               | Replica coordinator          |\n| Segment     | `Segment`              | [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs)                                      | Storage/index unit           |\n| Distance    | `Distance`             | [lib/segment/src/types.rs290](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L290-L290)                             | Similarity metric enum       |\n| Index       | `Indexes`              | [lib/segment/src/types.rs559](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L559-L559)                             | Vector index config          |\n\n**Sources**: [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs) [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs) [lib/segment/src/data\\_types/vectors.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/data_types/vectors.rs)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Key Concepts and Terminology](#key-concepts-and-terminology.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Points](#points.md)\n- [Point Structure in Code](#point-structure-in-code.md)\n- [Point IDs](#point-ids.md)\n- [Vectors](#vectors.md)\n- [Vector Types](#vector-types.md)\n- [Dense Vectors](#dense-vectors.md)\n- [Sparse Vectors](#sparse-vectors.md)\n- [Multi-Dense Vectors](#multi-dense-vectors.md)\n- [Named Vectors](#named-vectors.md)\n- [Payloads](#payloads.md)\n- [Payload Structure](#payload-structure.md)\n- [Payload Types](#payload-types.md)\n- [Payload Keys and Paths](#payload-keys-and-paths.md)\n- [DateTime Representation](#datetime-representation.md)\n- [Collections](#collections.md)\n- [Collection Components Hierarchy](#collection-components-hierarchy.md)\n- [Collection Configuration](#collection-configuration.md)",
      "index": 15,
      "token_count": 569,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 28697,
      "end_char": 30711
    },
    {
      "content": "hy](#collection-components-hierarchy.md)\n- [Collection Configuration](#collection-configuration.md)\n- [Collection Status](#collection-status.md)\n- [Shards and Partitioning](#shards-and-partitioning.md)\n- [Shard Distribution Model](#shard-distribution-model.md)\n- [Sharding Methods](#sharding-methods.md)\n- [Shard Replicas](#shard-replicas.md)\n- [ShardReplicaSet](#shardreplicaset.md)\n- [Segments](#segments.md)\n- [Segment Architecture](#segment-architecture.md)\n- [Segment Types](#segment-types.md)\n- [Segment Components](#segment-components.md)\n- [Segment Optimization](#segment-optimization.md)\n- [Distance Metrics](#distance-metrics.md)\n- [Distance Types](#distance-types.md)\n- [Distance Implementation](#distance-implementation.md)\n- [Indexes](#indexes.md)\n- [Vector Indexes](#vector-indexes.md)\n- [Payload Indexes](#payload-indexes.md)\n- [Quantization](#quantization.md)\n- [Summary Table: Key Type Mappings](#summary-table-key-type-mappings.md)",
      "index": 16,
      "token_count": 250,
      "metadata": {
        "title": "_qdrant_qdrant_1.1-key-concepts-and-terminology",
        "source": "qdrant_qdrant\\_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "file_name": "_qdrant_qdrant_1.1-key-concepts-and-terminology.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.487927",
        "total_chunks": 17
      },
      "start_char": 30611,
      "end_char": 32659
    },
    {
      "content": "Configuration and Deployment | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 0,
      "end_char": 2042
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Configuration and Deployment\n\nRelevant source files\n\n- [.config/nextest.toml](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml)\n- [.github/ISSUE\\_TEMPLATE/flaky\\_test.md](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md)\n- [.github/workflows/coverage.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml)\n- [.github/workflows/docker-image.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml)\n- [.github/workflows/integration-tests.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.github/workflows/release-artifacts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml)\n- [.github/workflows/rust-gpu.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.",
      "index": 1,
      "token_count": 652,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 1942,
      "end_char": 3975
    },
    {
      "content": "thub.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml)\n- [.github/workflows/rust.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml)\n- [.github/workflows/storage-compat.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml)\n- [Dockerfile](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile)\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [config/deb.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.",
      "index": 2,
      "token_count": 701,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 3875,
      "end_char": 5892
    },
    {
      "content": ".rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n- [tests/integration-tests.sh](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh)\n- [tools/sync-web-ui.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh)\n\nThis document covers the configuration system and deployment options for Qdrant. It explains how configuration is loaded, structured, and applied at runtime, as well as the various deployment modes and container build processes.\n\nFor detailed information about specific aspects:\n\n- Configuration file structure and environment variables: see [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- Docker images and containerization: see [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- Build process and CI/CD workflows: see [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n\nFor information about distributed cluster setup and consensus, see [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md) and [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md).\n\n---\n\n## Configuration Overview\n\nQdrant uses a hierarchical YAML-based configuration system with support for environment variable overrides. Configuration is loaded at startup via the `Settings` structure and controls all aspects of the service including storage, API endpoints, cluster behavior, and TLS settings.\n\n### Configuration Loading Flow\n\n```\n```\n\n**Sources:** [src/settings.rs230-285](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L230-L285) [src/main.rs140-152](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L152)\n\n### Core Configuration Structures",
      "index": 3,
      "token_count": 563,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 5792,
      "end_char": 7767
    },
    {
      "content": "//github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L152)\n\n### Core Configuration Structures\n\nThe configuration system is organized into several major components, each represented by a Rust struct:\n\n| Configuration Component | Struct              | Purpose                                   |\n| ----------------------- | ------------------- | ----------------------------------------- |\n| Root Configuration      | `Settings`          | Top-level settings container              |\n| Storage Settings        | `StorageConfig`     | Data storage paths, WAL, optimizers, HNSW |\n| Service Settings        | `ServiceConfig`     | HTTP/gRPC ports, TLS, API keys, CORS      |\n| Cluster Settings        | `ClusterConfig`     | Distributed mode, peer ID, consensus      |\n| P2P Settings            | `P2pConfig`         | Internal port, connection pool, TLS       |\n| Consensus Settings      | `ConsensusConfig`   | Raft tick period, WAL compaction          |\n| TLS Settings            | `TlsConfig`         | Certificate paths, TTL                    |\n| Performance Settings    | `PerformanceConfig` | Thread counts, rate limits                |\n\n**Sources:** [src/settings.rs197-227](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L197-L227) [lib/storage/src/types.rs62-114](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L62-L114)\n\n### Configuration-to-Code Mapping\n\n```\n```\n\n**Sources:** [src/settings.rs22-60](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L22-L60) [src/main.rs365-374](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L365-L374) [src/actix/mod.rs55-61](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L61) [src/tonic/mod.rs147-153](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L153)\n\n---\n\n## Deployment Modes\n\nQdrant supports two primary deployment modes: **standalone** and **distributed**. The mode is determined by the `cluster.enabled` configuration setting.\n\n### Standalone Mode",
      "index": 4,
      "token_count": 574,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 7667,
      "end_char": 9684
    },
    {
      "content": "ted**. The mode is determined by the `cluster.enabled` configuration setting.\n\n### Standalone Mode\n\nIn standalone mode, Qdrant runs as a single node without distributed consensus. All operations are handled locally.\n\n```\n```\n\n**Configuration:**\n\n- `cluster.enabled: false` (default)\n- No consensus or peer communication\n- Simpler deployment, lower latency\n\n**Sources:** [src/main.rs392-393](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L392-L393) [config/config.yaml301-303](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L301-L303)\n\n### Distributed Mode\n\nIn distributed mode, Qdrant runs as part of a cluster with Raft consensus for metadata operations. Data is sharded and replicated across peers.\n\n```\n```\n\n**Configuration:**\n\n- `cluster.enabled: true`\n- `cluster.peer_id`: Unique peer identifier\n- `cluster.p2p.port`: Internal communication port (default 6335)\n- `--uri` and `--bootstrap` CLI arguments for cluster formation\n\n**Sources:** [src/main.rs395-406](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L395-L406) [src/consensus.rs63-94](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L94) [config/config.yaml301-327](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L301-L327)\n\n### Cluster Initialization\n\nThe cluster initialization process differs for the first peer versus subsequent peers:\n\n```\n```\n\n**Sources:** [src/consensus.rs286-322](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L286-L322) [src/consensus.rs426-462](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L426-L462) [src/main.rs261-278](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L261-L278)\n\n---\n\n## Runtime Initialization\n\nThe application startup sequence initializes multiple runtime components and threads:\n\n```\n```\n\n**Sources:** [src/main.rs307-374](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L307-L374) [src/main.rs431-447](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L431-L447) [src/main.",
      "index": 5,
      "token_count": 685,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 9584,
      "end_char": 11619
    },
    {
      "content": "src/main.rs431-447](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L431-L447) [src/main.rs549-594](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L549-L594)\n\n### Thread Configuration\n\nQdrant creates dedicated thread pools for different workloads:\n\n| Runtime          | Builder Function                   | Thread Naming   | Purpose                                     |\n| ---------------- | ---------------------------------- | --------------- | ------------------------------------------- |\n| Search Runtime   | `create_search_runtime()`          | `search-{id}`   | Vector search operations                    |\n| Update Runtime   | `create_update_runtime()`          | `update-{id}`   | Background optimizations                    |\n| General Runtime  | `create_general_purpose_runtime()` | `general-{id}`  | General async tasks                         |\n| Consensus Thread | `Consensus::run()`                 | `consensus`     | Raft state machine (high priority on Linux) |\n| REST Server      | `actix::init()`                    | `web`           | REST API handling                           |\n| gRPC Server      | `tonic::init()`                    | `grpc`          | gRPC API handling                           |\n| Internal gRPC    | `tonic::init_internal()`           | `grpc_internal` | Peer-to-peer communication                  |\n\n**Sources:** [src/common/helpers.rs20-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L63) [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322) [src/consensus.rs96-115](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L96-L115)\n\n---\n\n## API Server Configuration\n\nBoth REST and gRPC servers support TLS, authentication, and various protocol-specific options.\n\n### REST API (Actix-web)\n\nThe REST API is implemented using Actix-web and supports:\n\n- CORS (configurable via `service.enable_cors`)\n- TLS with certificate rotation (`service.enable_tls`, `tls.cert_ttl`)",
      "index": 6,
      "token_count": 516,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 11519,
      "end_char": 13535
    },
    {
      "content": "e via `service.enable_cors`)\n- TLS with certificate rotation (`service.enable_tls`, `tls.cert_ttl`)\n- API key authentication (`service.api_key`, `service.read_only_api_key`)\n- JWT RBAC (`service.jwt_rbac`)\n- Request size limits (`service.max_request_size_mb`)\n- Worker threads (`service.max_workers`)\n\n**TLS Configuration with Certificate Rotation:**\n\n```\n```\n\n**Sources:** [src/actix/mod.rs55-205](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L205) [src/actix/certificate\\_helpers.rs19-75](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs#L19-L75) [config/config.yaml234-275](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L234-L275)\n\n### gRPC API (Tonic)\n\nThe gRPC API is implemented using Tonic and supports:\n\n- Compression (Gzip encoding for all services)\n- TLS (`service.enable_tls`)\n- API key authentication (shared with REST)\n- Unlimited message sizes (`max_decoding_message_size(usize::MAX)`)\n- Service reflection for development\n\n**Services Exposed:**\n\n| Service                 | Proto Definition    | Description                |\n| ----------------------- | ------------------- | -------------------------- |\n| `qdrant.Qdrant`         | `QdrantServer`      | Health check endpoint      |\n| `qdrant.Collections`    | `CollectionsServer` | Collection management      |\n| `qdrant.Points`         | `PointsServer`      | Point operations           |\n| `qdrant.Snapshots`      | `SnapshotsServer`   | Snapshot management        |\n| `grpc.health.v1.Health` | `HealthServer`      | Standard gRPC health check |\n\n**Internal gRPC Services (distributed mode only):**\n\n| Service                      | Proto Definition            | Purpose                 |\n| ---------------------------- | --------------------------- | ----------------------- |\n| `qdrant.Raft`                | `RaftServer`                | Raft message passing    |\n| `qdrant.QdrantInternal`      | `QdrantInternalServer`      | Consensus state queries |\n| `qdrant.",
      "index": 7,
      "token_count": 517,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 13435,
      "end_char": 15443
    },
    {
      "content": "| `qdrant.QdrantInternal`      | `QdrantInternalServer`      | Consensus state queries |\n| `qdrant.CollectionsInternal` | `CollectionsInternalServer` | Internal collection ops |\n| `qdrant.PointsInternal`      | `PointsInternalServer`      | Internal point ops      |\n| `qdrant.ShardSnapshots`      | `ShardSnapshotsServer`      | Shard snapshot transfer |\n\n**Sources:** [src/tonic/mod.rs147-253](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L253) [src/tonic/mod.rs256-360](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L256-L360)\n\n---\n\n## Environment Variables\n\nAll configuration options can be overridden using environment variables with the `QDRANT__` prefix and double underscores for nested fields.\n\n### Common Environment Variable Patterns\n\n```\n```\n\n**Sources:** [src/settings.rs278-280](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L278-L280) [.github/workflows/integration-tests.yml198-203](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L198-L203)\n\n### CLI Arguments\n\nKey command-line arguments for deployment:\n\n| Argument                  | Environment Variable | Purpose                            |\n| ------------------------- | -------------------- | ---------------------------------- |\n| `--config-path PATH`      | N/A                  | Path to custom config file         |\n| `--uri URI`               | `QDRANT_URI`         | This peer's URI for cluster        |\n| `--bootstrap URI`         | `QDRANT_BOOTSTRAP`   | Bootstrap from existing peer       |\n| `--snapshot PATH:NAME`    | N/A                  | Recover from collection snapshot   |\n| `--storage-snapshot PATH` | N/A                  | Recover from full storage snapshot |\n| `--disable-telemetry`     | N/A                  | Disable usage telemetry            |\n| `--reinit`                | N/A                  | Reinitialize consensus state       |\n\n**Sources:** [src/main.rs72-138](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L72-L138) [src/main.",
      "index": 8,
      "token_count": 563,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 15343,
      "end_char": 17387
    },
    {
      "content": "[src/main.rs72-138](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L72-L138) [src/main.rs261-305](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L261-L305)\n\n---\n\n## Docker Deployment\n\nQdrant provides multi-architecture Docker images with support for CPU and GPU variants. The Docker build process uses multi-stage builds for optimization.\n\n### Image Variants\n\n| Image Tag Pattern                   | Architecture | Features                         |\n| ----------------------------------- | ------------ | -------------------------------- |\n| `qdrant/qdrant:latest`              | amd64, arm64 | Standard CPU build               |\n| `qdrant/qdrant:latest-unprivileged` | amd64, arm64 | Runs as non-root user (UID 1000) |\n| `qdrant/qdrant:latest-gpu-nvidia`   | amd64        | NVIDIA GPU support               |\n| `qdrant/qdrant:latest-gpu-amd`      | amd64        | AMD GPU support                  |\n\n### Multi-Stage Build Process\n\n```\n```\n\n**Sources:** [Dockerfile10-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L10-L230)\n\n### Build Arguments\n\nThe Docker build supports various build arguments:\n\n| Build Arg       | Default   | Purpose                                      |\n| --------------- | --------- | -------------------------------------------- |\n| `GPU`           | (none)    | Set to `nvidia` or `amd` for GPU support     |\n| `PROFILE`       | `release` | Cargo build profile (`release`, `dev`, `ci`) |\n| `FEATURES`      | (none)    | Additional Cargo features to enable          |\n| `RUSTFLAGS`     | (none)    | Custom Rust compiler flags                   |\n| `LINKER`        | `mold`    | Linker to use (`mold`, `lld`, or empty)      |\n| `USER_ID`       | `0`       | User ID for unprivileged images              |\n| `PACKAGES`      | (none)    | Additional apt packages to install           |\n| `SOURCES`       | (none)    | Include source files for debugging           |\n| `GIT_COMMIT_ID` | (none)    | Embed git commit hash in binary              |",
      "index": 9,
      "token_count": 544,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 17287,
      "end_char": 19297
    },
    {
      "content": "bugging           |\n| `GIT_COMMIT_ID` | (none)    | Embed git commit hash in binary              |\n\n**Sources:** [Dockerfile76-109](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L76-L109) [.github/workflows/docker-image.yml48-56](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L48-L56)\n\n### Container Ports\n\nThe container exposes two ports by default:\n\n```\n```\n\nIn distributed mode, port 6335 is used internally for peer-to-peer communication (not exposed by default).\n\n**Sources:** [Dockerfile220-221](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L220-L221)\n\n### Volume Mounts\n\nRecommended volume mounts for persistent data:\n\n```\n```\n\n**Sources:** [config/config.yaml17-22](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L17-L22)\n\n---\n\n## Build System and CI/CD\n\nQdrant uses GitHub Actions for continuous integration and release automation.\n\n### Key CI Workflows\n\n```\n```\n\n**Sources:** [.github/workflows/rust.yml12-50](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L12-L50) [.github/workflows/integration-tests.yml14-84](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L14-L84) [.github/workflows/rust-lint.yml13-45](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml#L13-L45)\n\n### Release Process\n\nThe release workflow is triggered on git tags:\n\n```\n```\n\n**Sources:** [.github/workflows/docker-image.yml10-148](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L10-L148) [.github/workflows/release-artifacts.yml9-177](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L9-L177)\n\n### Cargo Features\n\nThe codebase supports various Cargo features for conditional compilation:\n\n| Feature                  | Purpose                                   | Used In              |\n| ------------------------ | ----------------------------------------- | -------------------- |",
      "index": 10,
      "token_count": 606,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 19197,
      "end_char": 21208
    },
    {
      "content": "|\n| ------------------------ | ----------------------------------------- | -------------------- |\n| `service_debug`          | Enable deadlock detection and debugging   | Integration tests    |\n| `data-consistency-check` | Enable additional consistency checks      | Integration tests    |\n| `stacktrace`             | Enable stacktrace collector for debugging | Runtime flag         |\n| `gpu`                    | Enable GPU support (NVIDIA/AMD)           | GPU builds           |\n| `deb`                    | Include Debian package paths              | Debian package build |\n\n**Sources:** [.github/workflows/integration-tests.yml40](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L40-L40) [.github/workflows/rust-gpu.yml35](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml#L35-L35) [src/main.rs59-64](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L59-L64)\n\n---\n\n## Storage Paths and Directories\n\nQdrant uses several directories for different purposes:\n\n```\n```\n\n**Default Paths:**\n\n- Storage: `./storage` (configurable via `storage.storage_path`)\n- Snapshots: `./snapshots` (configurable via `storage.snapshots_path`)\n- Temp: `./storage/snapshots_temp/` (configurable via `storage.temp_path`)\n- Static: `./static` (configurable via `service.static_content_dir`)\n\n**Debian Package Paths:**\n\n- Storage: `/var/lib/qdrant/storage`\n- Snapshots: `/var/lib/qdrant/snapshots`\n- Static: `/var/lib/qdrant/static`\n- Config: `/etc/qdrant/config.yaml`\n\n**Sources:** [config/config.yaml17-35](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L17-L35) [config/deb.yaml1-9](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml#L1-L9) [lib/storage/src/types.rs139-141](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L139-L141)\n\n---\n\n## Performance Tuning\n\nKey configuration parameters for performance tuning:\n\n### Thread Pool Configuration\n\n```\n```\n\n**Sources:** [config/config.yaml64-78](https://github.",
      "index": 11,
      "token_count": 568,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 21108,
      "end_char": 23134
    },
    {
      "content": "ing:\n\n### Thread Pool Configuration\n\n```\n```\n\n**Sources:** [config/config.yaml64-78](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L64-L78) [lib/storage/src/types.rs28-55](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L28-L55)\n\n### Memory Management\n\n```\n```\n\n**Sources:** [config/config.yaml37-43](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L37-L43) [config/config.yaml172-174](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L172-L174) [lib/storage/src/types.rs89-90](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L89-L90)\n\n### Shard Transfer Limits\n\n```\n```\n\n**Sources:** [config/config.yaml80-90](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L80-L90) [lib/collection/src/operations/shared\\_storage\\_config.rs16](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs#L16-L16)\n\n---\n\n## Security Configuration\n\n### TLS Setup\n\nTLS can be enabled for both external APIs and internal cluster communication:\n\n```\n```\n\n**Certificate Rotation:**\n\n- Supported for REST API only (not gRPC or internal communication)\n- Certificates are reloaded from disk when TTL expires\n- If reload fails, old certificate is retained with error logged\n\n**Sources:** [config/config.yaml259-354](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L259-L354) [src/actix/certificate\\_helpers.rs33-68](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs#L33-L68)\n\n### Authentication\n\n```\n```\n\n**JWT RBAC Notes:**\n\n- Uses `api_key` as JWT secret (minimum 32 bytes recommended)\n- Enables fine-grained access control\n- Generates tokens via API with custom permissions\n\n**Sources:** [config/config.yaml266-291](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L266-L291) [src/settings.rs298-325](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L298-L325)\n\n---\n\n## Snapshot Storage Configuration",
      "index": 12,
      "token_count": 666,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 23034,
      "end_char": 25055
    },
    {
      "content": "com/qdrant/qdrant/blob/48203e41/src/settings.rs#L298-L325)\n\n---\n\n## Snapshot Storage Configuration\n\nQdrant supports local and S3-compatible snapshot storage:\n\n### Local Snapshot Storage\n\n```\n```\n\n### S3 Snapshot Storage\n\n```\n```\n\n**Environment Variable Override:**\n\n```\n```\n\n**Sources:** [lib/collection/src/common/snapshots\\_manager.rs18-39](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs#L18-L39) [.github/workflows/integration-tests.yml198-203](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L198-L203)\n\n---\n\nThis page provides an overview of Qdrant's configuration and deployment capabilities. For detailed information about specific aspects, refer to the sub-pages: [Configuration System](qdrant/qdrant/10.1-configuration-system.md), [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md), and [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md).\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Configuration and Deployment](#configuration-and-deployment.md)\n- [Configuration Overview](#configuration-overview.md)\n- [Configuration Loading Flow](#configuration-loading-flow.md)\n- [Core Configuration Structures](#core-configuration-structures.md)\n- [Configuration-to-Code Mapping](#configuration-to-code-mapping.md)\n- [Deployment Modes](#deployment-modes.md)\n- [Standalone Mode](#standalone-mode.md)\n- [Distributed Mode](#distributed-mode.md)\n- [Cluster Initialization](#cluster-initialization.md)\n- [Runtime Initialization](#runtime-initialization.md)\n- [Thread Configuration](#thread-configuration.md)\n- [API Server Configuration](#api-server-configuration.md)\n- [REST API (Actix-web)](#rest-api-actix-web.md)\n- [gRPC API (Tonic)](#grpc-api-tonic.md)\n- [Environment Variables](#environment-variables.md)\n- [Common Environment Variable Patterns](#common-environment-variable-patterns.md)\n- [CLI Arguments](#cli-arguments.md)\n- [Docker Deployment](#docker-deployment.md)\n- [Image Variants](#image-variants.md)",
      "index": 13,
      "token_count": 545,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 24955,
      "end_char": 26998
    },
    {
      "content": "i-arguments.md)\n- [Docker Deployment](#docker-deployment.md)\n- [Image Variants](#image-variants.md)\n- [Multi-Stage Build Process](#multi-stage-build-process.md)\n- [Build Arguments](#build-arguments.md)\n- [Container Ports](#container-ports.md)\n- [Volume Mounts](#volume-mounts.md)\n- [Build System and CI/CD](#build-system-and-cicd.md)\n- [Key CI Workflows](#key-ci-workflows.md)\n- [Release Process](#release-process.md)\n- [Cargo Features](#cargo-features.md)\n- [Storage Paths and Directories](#storage-paths-and-directories.md)\n- [Performance Tuning](#performance-tuning.md)\n- [Thread Pool Configuration](#thread-pool-configuration.md)\n- [Memory Management](#memory-management.md)\n- [Shard Transfer Limits](#shard-transfer-limits.md)\n- [Security Configuration](#security-configuration.md)\n- [TLS Setup](#tls-setup.md)\n- [Authentication](#authentication.md)\n- [Snapshot Storage Configuration](#snapshot-storage-configuration.md)\n- [Local Snapshot Storage](#local-snapshot-storage.md)\n- [S3 Snapshot Storage](#s3-snapshot-storage.md)",
      "index": 14,
      "token_count": 269,
      "metadata": {
        "title": "_qdrant_qdrant_10-configuration-and-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10-configuration-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "file_name": "_qdrant_qdrant_10-configuration-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.505765",
        "total_chunks": 15
      },
      "start_char": 26898,
      "end_char": 28946
    },
    {
      "content": "Configuration System | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 624,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 0,
      "end_char": 2034
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Configuration System\n\nRelevant source files\n\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.",
      "index": 1,
      "token_count": 652,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 1934,
      "end_char": 3965
    },
    {
      "content": "ps://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n\nThe Configuration System in Qdrant is responsible for loading, validating, and providing runtime access to all service settings. It supports a hierarchical configuration loading mechanism that merges settings from multiple sources including embedded defaults, YAML files, and environment variables. This system is initialized early during application startup and provides configuration data to all components throughout the service lifecycle.\n\nFor API-level configuration endpoints, see [Cluster API](qdrant/qdrant/9.1-rest-api-endpoints.md). For deployment-specific configuration, see [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md).\n\n## Configuration Loading Flow\n\nThe configuration system employs a layered loading strategy where each subsequent source can override values from previous sources. This design allows for flexible deployment scenarios while maintaining sensible defaults.\n\n```\n```\n\nSources: [src/settings.rs230-286](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L230-L286) [src/main.rs152](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L152-L152)",
      "index": 2,
      "token_count": 595,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 3865,
      "end_char": 5883
    },
    {
      "content": "#L230-L286) [src/main.rs152](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L152-L152)\n\nThe configuration loading process is implemented in the `Settings::new()` method, which uses the `config` crate to build a layered configuration hierarchy. Each layer can override values from the previous layer, with environment variables having the highest priority.\n\n## Configuration Structure Hierarchy\n\nThe `Settings` struct serves as the root configuration object and contains multiple nested configuration sections, each responsible for a specific domain of the application.\n\n```\n```\n\nSources: [src/settings.rs196-227](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L196-L227) [lib/storage/src/types.rs62-114](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L62-L114) [src/settings.rs22-60](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L22-L60) [src/settings.rs68-88](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L68-L88) [src/settings.rs111-127](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L111-L127)\n\n## Configuration Sections\n\n### Service Configuration\n\nThe `ServiceConfig` struct defines API service settings including network binding, protocol enablement, and authentication.\n\n| Field                             | Type             | Purpose                            | Default         |\n| --------------------------------- | ---------------- | ---------------------------------- | --------------- |\n| `host`                            | `String`         | Bind address for HTTP/gRPC servers | `0.0.0.0`       |\n| `http_port`                       | `u16`            | REST API port                      | `6333`          |\n| `grpc_port`                       | `Option<u16>`    | gRPC API port (None disables gRPC) | `6334`          |\n| `max_request_size_mb`             | `usize`          | Maximum POST request size          | `32`            |",
      "index": 3,
      "token_count": 528,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 5783,
      "end_char": 7738
    },
    {
      "content": "st_size_mb`             | `usize`          | Maximum POST request size          | `32`            |\n| `max_workers`                     | `Option<usize>`  | Number of actix workers            | Auto-calculated |\n| `enable_cors`                     | `bool`           | Enable CORS headers                | `true`          |\n| `enable_tls`                      | `bool`           | Enable TLS for external APIs       | `false`         |\n| `verify_https_client_certificate` | `bool`           | Verify HTTPS client certs          | `false`         |\n| `api_key`                         | `Option<String>` | API key for authentication         | None            |\n| `read_only_api_key`               | `Option<String>` | Read-only API key                  | None            |\n| `jwt_rbac`                        | `Option<bool>`   | Enable JWT-based RBAC              | `false`         |\n\nSources: [src/settings.rs22-60](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L22-L60)\n\n### Storage Configuration\n\nThe `StorageConfig` struct controls all storage-related behavior including paths, performance tuning, and optimization strategies.\n\n| Field                   | Type                          | Purpose                          |\n| ----------------------- | ----------------------------- | -------------------------------- |\n| `storage_path`          | `String`                      | Root path for all data           |\n| `snapshots_path`        | `String`                      | Path for snapshots               |\n| `on_disk_payload`       | `bool`                        | Store payloads on disk vs memory |\n| `performance`           | `PerformanceConfig`           | Performance tuning parameters    |\n| `optimizers`            | `OptimizersConfig`            | Segment optimization settings    |\n| `wal`                   | `WalConfig`                   | Write-ahead log configuration    |\n| `hnsw_index`            | `HnswConfig`                  | Default HNSW index parameters    |",
      "index": 4,
      "token_count": 411,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 7638,
      "end_char": 9642
    },
    {
      "content": "|\n| `hnsw_index`            | `HnswConfig`                  | Default HNSW index parameters    |\n| `node_type`             | `NodeType`                    | Normal or Listener node          |\n| `recovery_mode`         | `Option<String>`              | Recovery mode message            |\n| `shard_transfer_method` | `Option<ShardTransferMethod>` | Default shard transfer method    |\n| `max_collections`       | `Option<usize>`               | Maximum number of collections    |\n\nSources: [lib/storage/src/types.rs62-114](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L62-L114)\n\n### Cluster Configuration\n\nThe `ClusterConfig` struct enables and configures distributed deployment mode using Raft consensus.\n\n| Field                   | Type              | Purpose                      | Default       |\n| ----------------------- | ----------------- | ---------------------------- | ------------- |\n| `enabled`               | `bool`            | Enable distributed mode      | `false`       |\n| `peer_id`               | `Option<PeerId>`  | This peer's ID (1 to 2^53-1) | Auto-assigned |\n| `grpc_timeout_ms`       | `u64`             | P2P gRPC timeout             | `5000`        |\n| `connection_timeout_ms` | `u64`             | Connection timeout           | `5000`        |\n| `p2p`                   | `P2pConfig`       | P2P network configuration    | -             |\n| `consensus`             | `ConsensusConfig` | Raft consensus parameters    | -             |\n\nThe `ConsensusConfig` sub-section controls Raft behavior:\n\n| Field                    | Type    | Purpose                    | Default |\n| ------------------------ | ------- | -------------------------- | ------- |\n| `tick_period_ms`         | `u64`   | Raft tick interval         | `100`   |\n| `compact_wal_entries`    | `u64`   | WAL compaction threshold   | `128`   |\n| `max_message_queue_size` | `usize` | Message queue backpressure | `100`   |\n| `bootstrap_timeout_sec`  | `u64`   | Bootstrap timeout          | `15`    |\n\nSources: [src/settings.",
      "index": 5,
      "token_count": 510,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 9542,
      "end_char": 11588
    },
    {
      "content": "`bootstrap_timeout_sec`  | `u64`   | Bootstrap timeout          | `15`    |\n\nSources: [src/settings.rs68-139](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L68-L139)\n\n### TLS Configuration\n\nThe `TlsConfig` struct defines certificate paths for TLS encryption in both external APIs and internal P2P communication.\n\n| Field      | Type             | Purpose                           |\n| ---------- | ---------------- | --------------------------------- |\n| `cert`     | `String`         | Path to server certificate PEM    |\n| `key`      | `String`         | Path to private key PEM           |\n| `ca_cert`  | `Option<String>` | Path to CA certificate PEM        |\n| `cert_ttl` | `Option<u64>`    | Certificate reload TTL in seconds |\n\nSources: [src/settings.rs141-149](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L141-L149)\n\n## Environment Variable Overrides\n\nEnvironment variables provide the highest-priority configuration source and use a double-underscore (`__`) separator to represent nested configuration paths.\n\n```\n```\n\nSources: [src/settings.rs280](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L280-L280)\n\nCommon environment variable patterns:\n\n| Environment Variable            | Configuration Path     | Example Value             |\n| ------------------------------- | ---------------------- | ------------------------- |\n| `QDRANT__LOG_LEVEL`             | `log_level`            | `INFO`, `DEBUG`           |\n| `QDRANT__SERVICE__HOST`         | `service.host`         | `0.0.0.0`                 |\n| `QDRANT__SERVICE__HTTP_PORT`    | `service.http_port`    | `6333`                    |\n| `QDRANT__SERVICE__GRPC_PORT`    | `service.grpc_port`    | `6334`                    |\n| `QDRANT__SERVICE__API_KEY`      | `service.api_key`      | `secret_key`              |\n| `QDRANT__CLUSTER__ENABLED`      | `cluster.enabled`      | `true`                    |\n| `QDRANT__CLUSTER__P2P__PORT`    | `cluster.p2p.port`     | `6335`                    |",
      "index": 6,
      "token_count": 538,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 11488,
      "end_char": 13496
    },
    {
      "content": "|\n| `QDRANT__CLUSTER__P2P__PORT`    | `cluster.p2p.port`     | `6335`                    |\n| `QDRANT__STORAGE__STORAGE_PATH` | `storage.storage_path` | `/var/lib/qdrant/storage` |\n\nThe environment variable system is case-insensitive and automatically converts between snake\\_case in YAML and the double-underscore notation.\n\nSources: [src/settings.rs280](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L280-L280)\n\n## Configuration Validation\n\nThe configuration system performs validation using the `validator` crate after all sources are merged and deserialized. Validation errors are logged as warnings but do not prevent service startup.\n\n```\n```\n\nSources: [src/settings.rs298-325](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L298-L325) [src/settings.rs22-23](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L22-L23) [src/settings.rs68-88](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L68-L88) [lib/storage/src/types.rs62-76](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L62-L76)\n\nThe `Settings::validate_and_warn()` method performs additional custom validation:\n\n1. **JWT RBAC Validation** (lines 306-317): Warns if JWT RBAC is enabled without an API key, or if the API key is shorter than the recommended 32 bytes for HMAC-SHA256.\n\n2. **Load Error Reporting** (line 320): Reports any errors that occurred during configuration file loading (e.g., missing files).\n\n3. **Validator Crate Validation** (lines 322-324): Runs struct-level validation rules defined via `#[validate]` attributes.\n\nSources: [src/settings.rs298-325](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L298-L325)\n\n## Configuration Usage at Runtime\n\nOnce loaded and validated, the `Settings` instance is used to initialize and configure various system components during the startup sequence.\n\n```\n```\n\nSources: [src/main.rs152-594](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L152-L594)\n\nKey initialization steps using configuration:\n\n1.",
      "index": 7,
      "token_count": 613,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 13396,
      "end_char": 15438
    },
    {
      "content": "drant/qdrant/blob/48203e41/src/main.rs#L152-L594)\n\nKey initialization steps using configuration:\n\n1. **Feature Flags** (line 155): Global feature flags are initialized from `settings.feature_flags`\n2. **GPU Configuration** (lines 184-208): GPU devices manager initialized if `settings.gpu.indexing` is enabled\n3. **Storage Path Creation** (line 220): Creates `settings.storage.storage_path` directory\n4. **Runtime Creation** (lines 309-322): Search, update, and general-purpose runtimes created based on `settings.storage.performance`\n5. **Resource Budgets** (lines 325-327): CPU and IO budgets calculated from `settings.storage.performance.optimizer_cpu_budget`\n6. **TableOfContent** (lines 365-374): Initialized with storage config, runtimes, and channel service\n7. **Consensus State** (lines 273-278): Persistent consensus state loaded using cluster configuration\n8. **API Servers** (lines 557-594): HTTP and gRPC servers initialized with service configuration\n\nSources: [src/main.rs152-594](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L152-L594)\n\n## Configuration File Format\n\nThe default configuration is embedded as a YAML string in the binary and can be overridden by external files. The embedded default is located at [config/config.yaml1-355](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L1-L355)\n\nKey sections in the default configuration:\n\n```\n```\n\nSources: [config/config.yaml1-355](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L1-L355)\n\n## Configuration Error Handling\n\nThe configuration system tracks loading errors in the `Settings::load_errors` field and reports them after logging is initialized. This deferred error reporting ensures that configuration problems are properly logged even though they occur before the logger is configured.\n\n```\n```\n\nSources: [src/settings.rs230-286](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L230-L286) [src/settings.rs218-225](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L218-L225) [src/settings.",
      "index": 8,
      "token_count": 583,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 15338,
      "end_char": 17382
    },
    {
      "content": ".rs218-225](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L218-L225) [src/settings.rs298-325](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L298-L325)\n\nThe `LogMsg` enum defines two error severity levels:\n\n- `LogMsg::Warn`: Used for optional configuration files that don't exist (e.g., `config/config`, `config/local`)\n- `LogMsg::Error`: Used for explicitly specified configuration files that don't exist (e.g., via `--config-path`)\n\nSources: [src/settings.rs340-353](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L340-L353)\n\n## Special Configuration Modes\n\n### Recovery Mode\n\nWhen `storage.recovery_mode` is set to a string value, Qdrant starts in a restricted mode where only collection metadata operations are available. This mode is used for disaster recovery scenarios.\n\n- All data operations return the recovery mode error message\n- Only collection deletion is permitted\n- Documented at: `https://qdrant.tech/documentation/guides/administration/#recovery-mode`\n\nSources: [src/main.rs210-215](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L210-L215) [lib/storage/src/types.rs97-101](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L97-L101)\n\n### Node Types\n\nThe `storage.node_type` configuration determines the node's role in the cluster:\n\n- `Normal`: Receives updates and answers all queries (default)\n- `Listener`: Receives all updates but does not answer search/read queries (useful for dedicated backup nodes)\n\nThe node type affects the default update queue size:\n\n- Normal nodes: 100 entries\n- Listener nodes: 10,000 entries\n\nSources: [config/config.yaml57-62](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L57-L62) [lib/collection/src/operations/shared\\_storage\\_config.rs79-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs#L79-L82)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Configuration System](#configuration-system.md)",
      "index": 9,
      "token_count": 601,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 17282,
      "end_char": 19313
    },
    {
      "content": "wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Configuration System](#configuration-system.md)\n- [Configuration Loading Flow](#configuration-loading-flow.md)\n- [Configuration Structure Hierarchy](#configuration-structure-hierarchy.md)\n- [Configuration Sections](#configuration-sections.md)\n- [Service Configuration](#service-configuration.md)\n- [Storage Configuration](#storage-configuration.md)\n- [Cluster Configuration](#cluster-configuration.md)\n- [TLS Configuration](#tls-configuration.md)\n- [Environment Variable Overrides](#environment-variable-overrides.md)\n- [Configuration Validation](#configuration-validation.md)\n- [Configuration Usage at Runtime](#configuration-usage-at-runtime.md)\n- [Configuration File Format](#configuration-file-format.md)\n- [Configuration Error Handling](#configuration-error-handling.md)\n- [Special Configuration Modes](#special-configuration-modes.md)\n- [Recovery Mode](#recovery-mode.md)\n- [Node Types](#node-types.md)",
      "index": 10,
      "token_count": 203,
      "metadata": {
        "title": "_qdrant_qdrant_10.1-configuration-system",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.1-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.1-configuration-system.md",
        "file_name": "_qdrant_qdrant_10.1-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.536521",
        "total_chunks": 11
      },
      "start_char": 19213,
      "end_char": 21261
    },
    {
      "content": "Docker Deployment | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 0,
      "end_char": 2031
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Docker Deployment\n\nRelevant source files\n\n- [.config/nextest.toml](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml)\n- [.github/ISSUE\\_TEMPLATE/flaky\\_test.md](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md)\n- [.github/workflows/coverage.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml)\n- [.github/workflows/docker-image.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml)\n- [.github/workflows/integration-tests.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.github/workflows/release-artifacts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml)\n- [.github/workflows/rust-gpu.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.",
      "index": 1,
      "token_count": 656,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 1931,
      "end_char": 3973
    },
    {
      "content": "nt/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml)\n- [.github/workflows/rust.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml)\n- [.github/workflows/storage-compat.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml)\n- [Dockerfile](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile)\n- [config/deb.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml)\n- [tests/integration-tests.sh](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh)\n- [tools/sync-web-ui.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh)\n\nThis page describes the Docker build system, image variants, build configuration, and deployment workflows for Qdrant. It covers the multi-stage Dockerfile architecture, build arguments, image variants (CPU/GPU), cross-compilation support, and CI/CD integration.\n\nFor information about configuration options that can be set via environment variables, see [Configuration System](qdrant/qdrant/10.1-configuration-system.md). For details on the CI/CD workflows and build artifacts, see [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md).\n\n---\n\n## Multi-Stage Build Architecture\n\nThe Dockerfile implements a multi-stage build process optimized for Docker layer caching and cross-platform compilation. The build consists of three primary stages and conditional GPU-specific base images.\n\n```\n```\n\n**Sources:** [Dockerfile1-231](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L1-L231)\n\n### Planner Stage\n\nThe planner stage uses `cargo-chef` to analyze dependencies and generate a recipe file. This enables Docker to cache dependency builds separately from application code.\n\n```\n```\n\n**Sources:** [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)\n\n### Builder Stage",
      "index": 2,
      "token_count": 569,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 3873,
      "end_char": 5847
    },
    {
      "content": "erfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)\n\n### Builder Stage\n\nThe builder stage performs the actual compilation with support for cross-compilation, custom linkers, and multiple build profiles. It consists of several distinct phases:\n\n1. **Dependency Installation** - System packages and Rust components\n2. **Mold Linker Setup** - Fast linker for reduced build times\n3. **Cross-compilation Setup** - Platform-specific toolchains via `xx`\n4. **Web UI Download** - Static assets from qdrant-web-ui repository\n5. **Dependency Compilation** - Using cargo-chef recipe\n6. **Application Compilation** - Final Qdrant binary\n7. **SBOM Generation** - Software Bill of Materials\n\n```\n```\n\n**Sources:** [Dockerfile28-122](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L28-L122)\n\n---\n\n## Build Arguments and Configuration\n\nThe Dockerfile accepts multiple build arguments that control compilation behavior, features, and target architecture.\n\n| Argument         | Default       | Purpose                    | Usage                                 |\n| ---------------- | ------------- | -------------------------- | ------------------------------------- |\n| `BUILDPLATFORM`  | `linux/amd64` | Host platform for build    | Set by Docker buildx                  |\n| `TARGETPLATFORM` | `linux/amd64` | Target platform for binary | Set by Docker buildx                  |\n| `PROFILE`        | `release`     | Cargo build profile        | `release`, `dev`, or `ci`             |\n| `FEATURES`       | (none)        | Cargo feature flags        | Comma-separated list                  |\n| `RUSTFLAGS`      | (none)        | Custom Rust compiler flags | E.g., `--cfg tokio_unstable`          |\n| `LINKER`         | `mold`        | Linker to use              | `mold`, `lld`, or empty               |\n| `GPU`            | (none)        | GPU support variant        | `nvidia` or `amd`                     |\n| `GIT_COMMIT_ID`  | (none)        | Git commit hash            | Embedded in binary                    |",
      "index": 3,
      "token_count": 491,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 5747,
      "end_char": 7785
    },
    {
      "content": "_COMMIT_ID`  | (none)        | Git commit hash            | Embedded in binary                    |\n| `USER_ID`        | `0`           | Runtime user ID            | `0` for root, `1000` for unprivileged |\n| `PACKAGES`       | (none)        | Additional apt packages    | E.g., `gdb lldb`                      |\n| `SOURCES`        | (none)        | Include source code        | Any non-empty value                   |\n\n### Build Profile Selection\n\nThe `PROFILE` argument determines the optimization level and debug information:\n\n```\n```\n\n**Sources:** [Dockerfile76-77](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L76-L77)\n\n### Feature Flag Configuration\n\nFeatures are enabled via the `FEATURES` argument and combined with mandatory features:\n\n```\n```\n\nThe build always includes the `stacktrace` feature for better error diagnostics.\n\n**Sources:** [Dockerfile79-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L79-L104) [Dockerfile113-118](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L113-L118)\n\n### Linker Configuration\n\nThe build supports multiple linkers for optimization:\n\n```\n```\n\nThe linker is set via `RUSTFLAGS` during compilation:\n\n```\nRUSTFLAGS=\"${LINKER:+-C link-arg=-fuse-ld=}$LINKER $RUSTFLAGS\"\n```\n\n**Sources:** [Dockerfile85-86](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L85-L86) [Dockerfile101-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L101-L104) [Dockerfile113-116](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L113-L116)\n\n---\n\n## Image Variants\n\nQdrant provides multiple Docker image variants to support different hardware and security requirements.\n\n```\n```\n\n### CPU Variant (Default)\n\nThe default image uses `debian:13-slim` as the base, minimizing image size while providing necessary runtime libraries.\n\n**Base Image:** `debian:13-slim`\n\n**Installed Packages:**\n\n- `ca-certificates` - SSL/TLS certificates\n- `tzdata` - Timezone data\n- `libunwind8` - Stack unwinding support\n\n**Image Name Pattern:** `qdrant/qdrant:{version}`",
      "index": 4,
      "token_count": 620,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 7685,
      "end_char": 9725
    },
    {
      "content": "e data\n- `libunwind8` - Stack unwinding support\n\n**Image Name Pattern:** `qdrant/qdrant:{version}`\n\n**Sources:** [Dockerfile126-128](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L126-L128)\n\n### GPU NVIDIA Variant\n\nFor NVIDIA GPU acceleration, the image uses `nvidia/opengl:1.2-glvnd-devel-ubuntu22.04` as the base.\n\n**Base Image:** `nvidia/opengl:1.2-glvnd-devel-ubuntu22.04`\n\n**Environment Variables:**\n\n- `NVIDIA_DRIVER_CAPABILITIES=compute,graphics,utility` - Enables compute and graphics capabilities\n- `DEBIAN_FRONTEND=noninteractive` - Non-interactive apt-get\n\n**Additional Files:**\n\n- `/etc/vulkan/icd.d/nvidia_icd.json` - Vulkan ICD loader configuration\n\n**Installed GPU Packages:**\n\n- `libvulkan1`, `libvulkan-dev` - Vulkan runtime and development files\n- `vulkan-tools` - Vulkan utilities\n\n**Image Name Pattern:** `qdrant/qdrant:{version}-gpu-nvidia`\n\n**Sources:** [Dockerfile130-140](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L130-L140) [Dockerfile152-161](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L152-L161)\n\n### GPU AMD Variant\n\nFor AMD GPU acceleration, the image uses `rocm/dev-ubuntu-22.04` as the base.\n\n**Base Image:** `rocm/dev-ubuntu-22.04`\n\n**Environment Variables:**\n\n- `DEBIAN_FRONTEND=noninteractive` - Non-interactive apt-get\n\n**Installed GPU Packages:**\n\n- Same Vulkan packages as NVIDIA variant\n\n**Image Name Pattern:** `qdrant/qdrant:{version}-gpu-amd`\n\n**Sources:** [Dockerfile142-148](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L142-L148) [Dockerfile152-161](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L152-L161)\n\n### Unprivileged Variant\n\nSecurity-hardened variant that runs as a non-root user with UID 1000.\n\n**Build Configuration:**\n\n```\n```\n\n**Runtime User:** `qdrant:qdrant` (UID/GID 1000)\n\n**Pre-created Directories:**\n\n- `/qdrant/storage` - Data storage directory\n- `/qdrant/snapshots` - Snapshot directory\n\n**Image Name Pattern:** `qdrant/qdrant:{version}-unprivileged`\n\n**Sources:** [Dockerfile198-215](https://github.",
      "index": 5,
      "token_count": 683,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 9625,
      "end_char": 11658
    },
    {
      "content": "Pattern:** `qdrant/qdrant:{version}-unprivileged`\n\n**Sources:** [Dockerfile198-215](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L198-L215) [.github/workflows/docker-image.yml64-79](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L64-L79)\n\n---\n\n## Cross-Platform Compilation\n\nThe Docker build system supports multi-platform builds using Docker Buildx and the `xx` cross-compilation toolkit.\n\n```\n```\n\n### Platform-Specific Toolchain Setup\n\nThe build uses `xx-apt-get` to install platform-specific development dependencies:\n\n```\n```\n\nThis installs cross-compilation toolchains for the target platform specified by `TARGETPLATFORM`.\n\n**Sources:** [Dockerfile71-74](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L71-L74)\n\n### Cross-Compilation Wrapper\n\nThe `xx-cargo` wrapper automatically configures Cargo for cross-compilation:\n\n```\n```\n\nThe `PKG_CONFIG` workaround addresses a bug in `xx-cargo` for crates using `pkg-config`.\n\n**Sources:** [Dockerfile96-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L96-L104) [Dockerfile109-118](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L109-L118)\n\n### Mold Linker Platform Support\n\nThe Mold linker is installed with platform-specific binaries:\n\n```\n```\n\n**Supported Platforms:**\n\n- `x86_64-linux` (amd64)\n- `aarch64-linux` (arm64)\n\n**Sources:** [Dockerfile52-66](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L52-L66)\n\n---\n\n## Layer Caching Strategy\n\nThe build implements cargo-chef for efficient Docker layer caching, significantly reducing rebuild times when only application code changes.\n\n```\n```\n\n### Recipe Generation\n\nThe planner analyzes `Cargo.toml` and `Cargo.lock` files to generate a dependency recipe:\n\n```\n```\n\n**Sources:** [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)\n\n### Dependency Cooking\n\nThe builder uses the recipe to compile dependencies before copying application code:\n\n```\n```",
      "index": 6,
      "token_count": 596,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 11558,
      "end_char": 13542
    },
    {
      "content": "ing\n\nThe builder uses the recipe to compile dependencies before copying application code:\n\n```\n```\n\nThis layer is cached and only invalidated when dependencies change.\n\n**Sources:** [Dockerfile96-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L96-L104)\n\n### Application Build\n\nAfter dependencies are built, application code is copied and compiled:\n\n```\n```\n\nOnly this layer needs rebuilding when application code changes.\n\n**Sources:** [Dockerfile106-118](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L106-L118)\n\n---\n\n## Web UI Integration\n\nThe Docker build includes the Qdrant web UI by downloading the latest release from the qdrant-web-ui repository.\n\n```\n```\n\n### Download Process\n\nThe `sync-web-ui.sh` script fetches the latest web UI bundle:\n\n```\n```\n\n**Sources:** [tools/sync-web-ui.sh1-27](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh#L1-L27)\n\n### Build Integration\n\nThe Dockerfile invokes the sync script during the builder stage:\n\n```\n```\n\n**Sources:** [Dockerfile92-94](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L92-L94)\n\n### Runtime Deployment\n\nStatic files are copied to the final image:\n\n```\n```\n\nThe web UI is served at the root path `/` on the HTTP API port (6333).\n\n**Sources:** [Dockerfile211](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L211-L211)\n\n---\n\n## Runtime Configuration\n\nThe final Docker image exposes standard ports, sets environment variables, and defines the entrypoint for container execution.\n\n### Exposed Ports\n\n| Port | Protocol  | Purpose                           |\n| ---- | --------- | --------------------------------- |\n| 6333 | HTTP/gRPC | REST API and gRPC API             |\n| 6334 | gRPC      | Internal gRPC (P2P communication) |\n\n**Sources:** [Dockerfile220-221](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L220-L221)\n\n### Environment Variables\n\n| Variable   | Default      | Purpose            |\n| ---------- | ------------ | ------------------ |\n| `TZ`       | `Etc/UTC`    | Container timezone |",
      "index": 7,
      "token_count": 582,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 13442,
      "end_char": 15482
    },
    {
      "content": "---------- | ------------ | ------------------ |\n| `TZ`       | `Etc/UTC`    | Container timezone |\n| `RUN_MODE` | `production` | Runtime mode       |\n\nAdditional configuration can be set via `QDRANT__*` environment variables (see [Configuration System](qdrant/qdrant/10.1-configuration-system.md)).\n\n**Sources:** [Dockerfile217-218](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L217-L218)\n\n### File System Layout\n\n```\n/qdrant/\n├── qdrant              # Binary executable\n├── qdrant.spdx.json    # Software Bill of Materials\n├── config/             # Configuration files\n├── static/             # Web UI static files\n├── entrypoint.sh       # Container entrypoint\n├── storage/            # Data directory (volume mount)\n└── snapshots/          # Snapshot directory (volume mount)\n```\n\n**Sources:** [Dockerfile196-213](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L196-L213)\n\n### Entrypoint Script\n\nThe container executes via `entrypoint.sh`:\n\n```\n```\n\nThis script is located at [tools/entrypoint.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/entrypoint.sh) and handles initialization before starting the Qdrant process.\n\n**Sources:** [Dockerfile210](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L210-L210) [Dockerfile230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L230-L230)\n\n### User Configuration\n\nThe image supports two user modes:\n\n**Root Mode (USER\\_ID=0, default):**\n\n- Runs as root user\n- No pre-created directories\n- Maximum flexibility for volume mounting\n\n**Unprivileged Mode (USER\\_ID=1000):**\n\n- Runs as `qdrant:qdrant` user (UID/GID 1000)\n- Pre-created `storage` and `snapshots` directories\n- Enhanced security posture\n\n**Sources:** [Dockerfile198-215](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L198-L215)\n\n---\n\n## CI/CD Integration\n\nQdrant's Docker images are built and deployed through GitHub Actions workflows that handle multi-platform builds, tagging strategies, and image signing.\n\n```\n```\n\n### Multi-Platform Build Configuration",
      "index": 8,
      "token_count": 611,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 15382,
      "end_char": 17414
    },
    {
      "content": "rm builds, tagging strategies, and image signing.\n\n```\n```\n\n### Multi-Platform Build Configuration\n\nThe CPU build targets multiple platforms using Docker Buildx:\n\n```\n```\n\nGPU builds are limited to `linux/amd64` due to GPU driver compatibility.\n\n**Sources:** [.github/workflows/docker-image.yml38-62](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L38-L62) [.github/workflows/docker-image.yml108-148](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L108-L148)\n\n### Tag Generation Strategy\n\nFor a release tag like `v1.2.3`, the workflow generates multiple tags:\n\n| Tag Pattern   | Example                | Purpose       |\n| ------------- | ---------------------- | ------------- |\n| Full version  | `qdrant/qdrant:v1.2.3` | Exact release |\n| Minor version | `qdrant/qdrant:1.2`    | Latest patch  |\n| Major version | `qdrant/qdrant:1`      | Latest minor  |\n| Latest        | `qdrant/qdrant:latest` | Latest stable |\n\n**Version Extraction:**\n\n```\n```\n\n**Sources:** [.github/workflows/docker-image.yml26-37](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L26-L37) [.github/workflows/docker-image.yml95-106](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L95-L106)\n\n### Image Registries\n\nImages are pushed to two registries:\n\n1. **Docker Hub:** `qdrant/qdrant:{tag}`\n2. **GitHub Packages:** `docker.pkg.github.com/qdrant/qdrant/qdrant:{tag}`\n\n**Sources:** [.github/workflows/docker-image.yml44-59](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L44-L59) [.github/workflows/docker-image.yml113-128](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L113-L128)\n\n### Image Signing with Cosign\n\nAll published images are signed using Sigstore Cosign with keyless OIDC signing:\n\n```\n```\n\nThis enables verification of image authenticity without managing signing keys.\n\n**Sources:** [.github/workflows/docker-image.yml61-62](https://github.",
      "index": 9,
      "token_count": 610,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 17314,
      "end_char": 19349
    },
    {
      "content": "thout managing signing keys.\n\n**Sources:** [.github/workflows/docker-image.yml61-62](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L61-L62) [.github/workflows/docker-image.yml130-131](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L130-L131)\n\n### SBOM Generation\n\nSoftware Bill of Materials (SBOM) is generated during build:\n\n```\n```\n\nThe SBOM is included in the final image at `/qdrant/qdrant.spdx.json` and also embedded in the image metadata:\n\n```\n```\n\n**Sources:** [Dockerfile120-121](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L120-L121) [Dockerfile208](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L208-L208) [.github/workflows/docker-image.yml56](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L56-L56)\n\n### Testing Integration\n\nDocker builds are tested in CI through multiple workflows:\n\n**Consensus Testing:**\n\n```\n```\n\n**E2E Testing:**\n\n```\n```\n\n**Sources:** [.github/workflows/integration-tests.yml101-117](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L101-L117) [.github/workflows/integration-tests.yml238-265](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L238-L265)\n\n### Cache Strategy\n\nGitHub Actions cache is used to speed up builds:\n\n```\n```\n\nThis creates separate cache scopes per branch while allowing fallback to base branch cache.\n\n**Sources:** [.github/workflows/integration-tests.yml108-111](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L108-L111)\n\n---\n\n## Development and Debugging Support\n\nThe Docker build supports optional features for debugging and development workflows.\n\n### Source Code Inclusion\n\nSource files can be included in the image for debugging:\n\n```\n```\n\nThis copies the following directories:\n\n- `/qdrant/src` - Application source\n- `/qdrant/lib` - Library source\n- `/usr/local/cargo/registry/src` - Crate sources",
      "index": 10,
      "token_count": 618,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 19249,
      "end_char": 21263
    },
    {
      "content": "plication source\n- `/qdrant/lib` - Library source\n- `/usr/local/cargo/registry/src` - Crate sources\n- `/usr/local/cargo/git/checkouts` - Git dependencies\n\nThe conditional copy uses parameter expansion to work around Dockerfile limitations:\n\n```\n```\n\n**Sources:** [Dockerfile172-194](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L172-L194)\n\n### Debug Tools Installation\n\nAdditional debugging packages can be installed:\n\n```\n```\n\nThese packages are installed in the final image alongside base dependencies.\n\n**Sources:** [Dockerfile163-170](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L163-L170)\n\n### Build Profile for CI\n\nThe `ci` build profile balances build time and binary size for CI environments:\n\n```\n```\n\nThis profile is defined in `.cargo/config.toml` and used by integration tests.\n\n**Sources:** [.github/workflows/integration-tests.yml114](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L114-L114) [.github/workflows/integration-tests.yml259](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L259-L259)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Docker Deployment](#docker-deployment.md)\n- [Multi-Stage Build Architecture](#multi-stage-build-architecture.md)\n- [Planner Stage](#planner-stage.md)\n- [Builder Stage](#builder-stage.md)\n- [Build Arguments and Configuration](#build-arguments-and-configuration.md)\n- [Build Profile Selection](#build-profile-selection.md)\n- [Feature Flag Configuration](#feature-flag-configuration.md)\n- [Linker Configuration](#linker-configuration.md)\n- [Image Variants](#image-variants.md)\n- [CPU Variant (Default)](#cpu-variant-default.md)\n- [GPU NVIDIA Variant](#gpu-nvidia-variant.md)\n- [GPU AMD Variant](#gpu-amd-variant.md)\n- [Unprivileged Variant](#unprivileged-variant.md)\n- [Cross-Platform Compilation](#cross-platform-compilation.md)\n- [Platform-Specific Toolchain Setup](#platform-specific-toolchain-setup.md)",
      "index": 11,
      "token_count": 548,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 21163,
      "end_char": 23158
    },
    {
      "content": "atform-compilation.md)\n- [Platform-Specific Toolchain Setup](#platform-specific-toolchain-setup.md)\n- [Cross-Compilation Wrapper](#cross-compilation-wrapper.md)\n- [Mold Linker Platform Support](#mold-linker-platform-support.md)\n- [Layer Caching Strategy](#layer-caching-strategy.md)\n- [Recipe Generation](#recipe-generation.md)\n- [Dependency Cooking](#dependency-cooking.md)\n- [Application Build](#application-build.md)\n- [Web UI Integration](#web-ui-integration.md)\n- [Download Process](#download-process.md)\n- [Build Integration](#build-integration.md)\n- [Runtime Deployment](#runtime-deployment.md)\n- [Runtime Configuration](#runtime-configuration.md)\n- [Exposed Ports](#exposed-ports.md)\n- [Environment Variables](#environment-variables.md)\n- [File System Layout](#file-system-layout.md)\n- [Entrypoint Script](#entrypoint-script.md)\n- [User Configuration](#user-configuration.md)\n- [CI/CD Integration](#cicd-integration.md)\n- [Multi-Platform Build Configuration](#multi-platform-build-configuration.md)\n- [Tag Generation Strategy](#tag-generation-strategy.md)\n- [Image Registries](#image-registries.md)\n- [Image Signing with Cosign](#image-signing-with-cosign.md)\n- [SBOM Generation](#sbom-generation.md)\n- [Testing Integration](#testing-integration.md)\n- [Cache Strategy](#cache-strategy.md)\n- [Development and Debugging Support](#development-and-debugging-support.md)\n- [Source Code Inclusion](#source-code-inclusion.md)\n- [Debug Tools Installation](#debug-tools-installation.md)\n- [Build Profile for CI](#build-profile-for-ci.md)",
      "index": 12,
      "token_count": 382,
      "metadata": {
        "title": "_qdrant_qdrant_10.2-docker-deployment",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.2-docker-deployment.md",
        "file_name": "_qdrant_qdrant_10.2-docker-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.565345",
        "total_chunks": 13
      },
      "start_char": 23058,
      "end_char": 25106
    },
    {
      "content": "Building and CI/CD | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 0,
      "end_char": 2032
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Building and CI/CD\n\nRelevant source files\n\n- [.config/nextest.toml](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml)\n- [.github/ISSUE\\_TEMPLATE/flaky\\_test.md](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md)\n- [.github/workflows/coverage.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml)\n- [.github/workflows/docker-image.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml)\n- [.github/workflows/integration-tests.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.github/workflows/release-artifacts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml)\n- [.github/workflows/rust-gpu.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.",
      "index": 1,
      "token_count": 659,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 1932,
      "end_char": 3975
    },
    {
      "content": "nt/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml)\n- [.github/workflows/rust.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml)\n- [.github/workflows/storage-compat.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml)\n- [Dockerfile](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile)\n- [README.md](https://github.com/qdrant/qdrant/blob/48203e41/README.md)\n- [config/deb.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml)\n- [docs/CODE\\_OF\\_CONDUCT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CODE_OF_CONDUCT.md)\n- [docs/CONTRIBUTING.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md)\n- [docs/DEVELOPMENT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md)\n- [docs/QUICK\\_START.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md)\n- [docs/imgs/ci-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/ci-coverage-report.png)\n- [docs/imgs/local-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/roadmap/README.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/README.md)\n- [docs/roadmap/roadmap-2022.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2022.md)\n- [docs/roadmap/roadmap-2023.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2023.md)\n- [docs/roadmap/roadmap-2024.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2024.md)\n- [tests/integration-tests.sh](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh)\n- [tools/sync-web-ui.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh)\n\n## Purpose and Scope\n\nThis document describes Qdrant's build system, continuous integration pipelines, and release artifact generation.",
      "index": 2,
      "token_count": 744,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 3875,
      "end_char": 5889
    },
    {
      "content": "describes Qdrant's build system, continuous integration pipelines, and release artifact generation. It covers the Docker multi-stage build process, GitHub Actions workflows for testing and deployment, testing infrastructure using nextest and pytest, and the release process for Docker images and binary artifacts.\n\nFor information about:\n\n- Runtime configuration options, see [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- Deploying with Docker, see [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- Contributing and local development workflows, see [Development Guide](qdrant/qdrant/11-development-guide.md)\n\n---\n\n## Docker Multi-Stage Build Architecture\n\nQdrant uses a sophisticated multi-stage Docker build with cross-compilation support, layer caching optimization via `cargo-chef`, and conditional base images for CPU and GPU variants.\n\n```\n```\n\n**Docker Build Stages**\n\nSources: [Dockerfile1-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L1-L230)\n\n### Stage 1: Dependency Planning\n\nThe `planner` stage uses `cargo-chef` to extract the dependency graph without source code, enabling Docker layer caching of dependencies separately from application code.\n\n```\n```\n\n**Key mechanism**: [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25) copies all source files and runs `cargo chef prepare` to generate a recipe that captures dependencies without code.\n\nSources: [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)\n\n### Stage 2: Builder\n\nThe `builder` stage performs cross-compilation with multiple optimizations:\n\n**Dependencies and Tooling**\n\n| Component           | Purpose                     | Installation                                                                                                         |\n| ------------------- | --------------------------- | -------------------------------------------------------------------------------------------------------------------- |",
      "index": 3,
      "token_count": 436,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 5789,
      "end_char": 7802
    },
    {
      "content": "------------------------------------------------------------------------------------------------- |\n| `clang`, `lld`      | C/C++ compiler and linker   | `apt-get install` [Dockerfile42-44](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L42-L44)               |\n| `protobuf-compiler` | Protocol buffer compilation | `apt-get install` [Dockerfile42-44](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L42-L44)               |\n| `mold` v2.36.0      | Fast linker (default)       | Downloaded from GitHub releases [Dockerfile52-66](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L52-L66) |\n| `xx` tools          | Cross-compilation helpers   | Copied from `tonistiigi/xx` [Dockerfile31](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L31-L31)        |\n| `cargo-chef`        | Dependency caching          | Pre-installed in base image [Dockerfile19](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L19-L19)        |\n\n**Build Arguments**\n\n| Argument        | Default   | Purpose                                                                                                                        |\n| --------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| `PROFILE`       | `release` | Cargo profile (`release`, `dev`, `ci`) [Dockerfile77](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L77-L77)       |\n| `FEATURES`      | (none)    | Comma-separated crate features [Dockerfile80](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L80-L80)               |\n| `RUSTFLAGS`     | (none)    | Additional Rust compiler flags [Dockerfile83](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L83-L83)               |\n| `LINKER`        | `mold`    | Linker selection (`mold`, `lld`, or default) [Dockerfile86](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L86-L86) |\n| `GPU`           | (none)    | GPU support (`nvidia` or `amd`) [Dockerfile89](https://github.",
      "index": 4,
      "token_count": 612,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 7702,
      "end_char": 9749
    },
    {
      "content": "86) |\n| `GPU`           | (none)    | GPU support (`nvidia` or `amd`) [Dockerfile89](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L89-L89)              |\n| `GIT_COMMIT_ID` | (none)    | Git commit SHA embedded in binary [Dockerfile108](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L108-L108)         |\n\n**Cross-Compilation Setup**\n\nThe builder uses `xx-cargo` wrapper with a workaround for `PKG_CONFIG` path resolution:\n\n```\n```\n\nThis configuration:\n\n- Sets correct `PKG_CONFIG` for cross-compilation [Dockerfile101-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L101-L104)\n- Adds mold to PATH if selected\n- Configures linker via `RUSTFLAGS`\n- Always includes `stacktrace` feature\n- Conditionally adds `gpu` feature\n\n**Web UI Integration**\n\nThe build downloads the latest Qdrant Web UI from GitHub releases:\n\n```\n```\n\nSources: [Dockerfile91-94](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L91-L94) [tools/sync-web-ui.sh1-27](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh#L1-L27)\n\n### Stage 3: Base Image Selection\n\nQdrant supports three base image variants selected via the `GPU` build argument:\n\n```\n```\n\n**GPU-Specific Configuration**\n\nFor NVIDIA GPUs [Dockerfile130-139](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L130-L139):\n\n- Adds `/etc/vulkan/icd.d/nvidia_icd.json` for Vulkan loader\n- Sets `NVIDIA_DRIVER_CAPABILITIES=compute,graphics,utility`\n- Requires `--gpus all` flag at runtime\n\nFor AMD GPUs [Dockerfile142-147](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L142-L147):\n\n- Uses ROCm development image with GPU drivers pre-installed\n\nBoth GPU variants install Vulkan runtime dependencies [Dockerfile155-161](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L155-L161):\n\n```\n```\n\nSources: [Dockerfile123-161](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L123-L161)\n\n### Stage 4: Final Runtime Image\n\nThe final stage assembles the minimal runtime environment:\n\n**Optional Features via Build Args**",
      "index": 5,
      "token_count": 683,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 9649,
      "end_char": 11686
    },
    {
      "content": "The final stage assembles the minimal runtime environment:\n\n**Optional Features via Build Args**\n\n| Build Arg  | Effect                                                                                                                                 |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| `PACKAGES` | Additional apt packages (e.g., `gdb`, `lldb`) [Dockerfile165-167](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L165-L167) |\n| `SOURCES`  | Copy source code for debugging [Dockerfile174-194](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L174-L194)                |\n| `USER_ID`  | Run as non-root user (default: `0`) [Dockerfile198-205](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L198-L205)           |\n\n**Conditional Source Copy**\n\nWhen `SOURCES` is set, the build includes debugging symbols:\n\n```\n```\n\nThis hack uses parameter expansion with wildcard to make `COPY` conditional. If `SOURCES` is unset, `${DIR:-/null?}` matches nothing and `COPY` silently skips.\n\nSources: [Dockerfile176-194](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L176-L194)\n\n**File Layout**\n\n```\n/qdrant/\n├── qdrant                # Binary executable\n├── qdrant.spdx.json      # SBOM (Software Bill of Materials)\n├── config/               # Default configurations\n├── static/               # Web UI assets\n├── entrypoint.sh         # Startup script\n├── storage/              # Data directory (volume mount)\n└── snapshots/            # Snapshot directory (volume mount)\n```\n\nSources: [Dockerfile196-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L196-L230)\n\n---\n\n## GitHub Actions Workflows\n\nQdrant uses multiple GitHub Actions workflows for continuous integration and deployment. All workflows use Swatinem/rust-cache for dependency caching.\n\n```\n```\n\nSources: [.github/workflows/](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/)\n\n### rust.yml - Core Test Suite",
      "index": 6,
      "token_count": 551,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 11586,
      "end_char": 13630
    },
    {
      "content": "https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/)\n\n### rust.yml - Core Test Suite\n\nThe primary test workflow runs on every push and pull request, executing tests across three operating systems.\n\n**Matrix Strategy**\n\n```\n```\n\n**Test Execution with Nextest**\n\nQdrant uses `cargo-nextest` instead of `cargo test` for faster test execution and better output:\n\n```\n```\n\nThe `ci` profile is configured in [.config/nextest.toml1-12](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml#L1-L12):\n\n- Retries failing tests with exponential backoff (1 retry, 2s initial delay)\n- Does not fail-fast (runs all tests even after failures)\n- Outputs failure details immediately and at end\n- Generates JUnit XML report\n\n**Flaky Test Detection**\n\nA separate `process-results` job parses the JUnit XML output to detect flaky tests (tests that fail but pass on retry):\n\n```\n```\n\nThe workflow uses `yq`/`xq` to extract flaky test information and creates issues from [.github/ISSUE\\_TEMPLATE/flaky\\_test.md1-26](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md#L1-L26) template.\n\nSources: [.github/workflows/rust.yml1-149](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L1-L149)\n\n### integration-tests.yml - Integration Testing\n\nThis workflow runs multiple test suites validating API behavior, distributed consensus, and end-to-end scenarios.\n\n**Job 1: integration-tests**\n\nRuns OpenAPI integration tests with Python pytest:\n\n```\n```\n\nThe integration test script [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76):\n\n1. Starts Qdrant in background (standalone or distributed mode)\n2. Waits for server readiness via `/collections` endpoint\n3. Runs pytest on `tests/openapi`\n4. Runs shell-based tests: `basic_api_test.sh`, `basic_sparse_test.sh`, `basic_grpc_test.sh`\n\n**Job 2: integration-tests-consensus**\n\nTests distributed Qdrant with Raft consensus:\n\n```\n```\n\nConsensus tests validate:\n\n- Leader election",
      "index": 7,
      "token_count": 554,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 13530,
      "end_char": 15573
    },
    {
      "content": "ests distributed Qdrant with Raft consensus:\n\n```\n```\n\nConsensus tests validate:\n\n- Leader election\n- Shard transfers\n- Replica synchronization\n- Failure recovery\n\n**Job 3: test-consensus-compose**\n\nValidates multi-node deployment using Docker Compose:\n\n```\n```\n\n**Job 4: test-consistency**\n\nEnsures generated API schemas match source code:\n\n```\n```\n\nThese scripts verify that committed OpenAPI and gRPC definitions are up-to-date with code changes.\n\n**Job 5: test-shard-snapshot-api-s3-minio**\n\nTests snapshot functionality with local S3 (MinIO) and filesystem storage:\n\n```\n```\n\n**Job 6: e2e-tests**\n\nEnd-to-end tests with Docker containers and pytest-xdist parallel execution:\n\n```\n```\n\nSources: [.github/workflows/integration-tests.yml1-274](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L1-L274)\n\n### rust-lint.yml - Code Quality\n\nEnforces code formatting and linting standards:\n\n```\n```\n\nThe workflow uses three clippy invocations with increasing scope to catch issues in:\n\n1. Library code\n2. Tests and benchmarks (`--all-targets`)\n3. Optional feature combinations (`--all-features`)\n\nSources: [.github/workflows/rust-lint.yml1-46](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml#L1-L46)\n\n### coverage.yml - Code Coverage\n\nRuns daily (cron schedule) to generate coverage reports for both unit and integration tests.\n\n**Coverage Collection Strategy**\n\n```\n```\n\nThe workflow uses `cargo-llvm-cov` to instrument code and generate coverage data. Integration tests run with `LLVM_PROFILE_FILE` environment variable set [tests/integration-tests.sh12](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L12-L12)\n\n**Branch Override Logic**\n\nCoverage reports can be triggered manually or by cron. The workflow adjusts the target branch:\n\n```\n```\n\nFor scheduled runs, coverage targets the `dev` branch; for manual triggers, it uses the current branch.\n\nSources: [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.",
      "index": 8,
      "token_count": 523,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 15473,
      "end_char": 17512
    },
    {
      "content": "ch.\n\nSources: [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L1-L112)\n\n### docker-image.yml - Container Image Publishing\n\nTriggered on Git tag push, this workflow builds and publishes multi-platform Docker images with multiple variants.\n\n**Self-Hosted Runner Strategy**\n\nThis workflow runs on `[self-hosted, linux, x64]` runners rather than GitHub-hosted to handle:\n\n- Multi-platform builds requiring QEMU\n- Large Docker layer caches\n- Extended build times for cross-compilation\n\n**Job 1: build (CPU + Unprivileged)**\n\nBuilds standard and unprivileged variants for CPU-only workloads:\n\n```\n```\n\nThe unprivileged variant uses `--build-arg USER_ID=1000` to run as non-root user.\n\n**Job 2: build-gpu (NVIDIA + AMD)**\n\nBuilds GPU-accelerated images for NVIDIA and AMD platforms:\n\n```\n```\n\nGPU images are amd64-only due to lack of ARM GPU support in base images.\n\n**Image Tags**\n\nFor version tag `v1.2.3`, the workflow publishes:\n\n| Variant      | Tags                                                                              |\n| ------------ | --------------------------------------------------------------------------------- |\n| CPU          | `1.2.3`, `latest`, `1.2`, `1`                                                     |\n| Unprivileged | `1.2.3-unprivileged`, `latest-unprivileged`, `1.2-unprivileged`, `1-unprivileged` |\n| GPU NVIDIA   | `1.2.3-gpu-nvidia`, `gpu-nvidia-latest`, `1.2-gpu-nvidia`, `1-gpu-nvidia`         |\n| GPU AMD      | `1.2.3-gpu-amd`, `gpu-amd-latest`, `1.2-gpu-amd`, `1-gpu-amd`                     |\n\n**SBOM and Signing**\n\nAll images include Software Bill of Materials (SBOM) via `--sbom=true` flag and are signed with Cosign using OIDC keyless signing for supply chain security.\n\nSources: [.github/workflows/docker-image.yml1-148](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L1-L148)\n\n### release-artifacts.yml - Binary Releases",
      "index": 9,
      "token_count": 513,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 17412,
      "end_char": 19382
    },
    {
      "content": "/48203e41/.github/workflows/docker-image.yml#L1-L148)\n\n### release-artifacts.yml - Binary Releases\n\nTriggered on GitHub release publication, this workflow builds and uploads binary artifacts for multiple platforms.\n\n**Build Matrix**\n\n```\n```\n\n**Linux Build Process**\n\nUses `taiki-e/setup-cross-toolchain-action` for musl cross-compilation:\n\n```\n```\n\n**Debian Package Generation**\n\nThe `x86_64-unknown-linux-musl` target additionally generates a `.deb` package:\n\n```\n```\n\nThe Debian package uses configuration from [config/deb.yaml1-10](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml#L1-L10) to set:\n\n- Storage path: `/var/lib/qdrant/storage`\n- Snapshots path: `/var/lib/qdrant/snapshots`\n- Static content: `/var/lib/qdrant/static`\n\n**AppImage Creation**\n\nThe `build-app-image` job creates a portable Linux executable:\n\n```\n```\n\nThe resulting `qdrant-x86_64.AppImage` is a self-contained executable that includes the web UI and all dependencies.\n\nSources: [.github/workflows/release-artifacts.yml1-178](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L1-L178)\n\n### storage-compat.yml - Version Compatibility\n\nTests storage format compatibility between Qdrant versions to ensure seamless upgrades.\n\n```\n```\n\nThis workflow validates that collections created with older Qdrant versions can be read by newer versions, preventing data migration issues.\n\nSources: [.github/workflows/storage-compat.yml1-34](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml#L1-L34)\n\n### rust-gpu.yml - GPU Functionality\n\nManually triggered workflow to test GPU-enabled features (requires GPU hardware on runners):\n\n```\n```\n\nTests validate:\n\n- Vulkan initialization\n- GPU vector operations\n- Quantization on GPU\n- HNSW graph operations with GPU acceleration\n\nSources: [.github/workflows/rust-gpu.yml1-105](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml#L1-L105)\n\n---\n\n## Testing Infrastructure",
      "index": 10,
      "token_count": 530,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 19282,
      "end_char": 21272
    },
    {
      "content": "drant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml#L1-L105)\n\n---\n\n## Testing Infrastructure\n\nQdrant employs a multi-layered testing strategy combining Rust unit tests, integration tests via pytest, and end-to-end scenarios.\n\n### Nextest Configuration\n\nThe [.config/nextest.toml1-12](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml#L1-L12) file defines the `ci` profile used in GitHub Actions:\n\n```\n```\n\n**Key behaviors**:\n\n- Retries flaky tests once with 2-second initial delay\n- Continues running all tests after failures\n- Outputs failures immediately and again at end for scrollback\n- Generates JUnit XML for GitHub Actions integration\n\n### Integration Test Script\n\nThe [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76) orchestrates multiple test suites:\n\n```\n```\n\n**Test Organization**\n\n| Test Suite              | Purpose                | Technology                      |\n| ----------------------- | ---------------------- | ------------------------------- |\n| `tests/openapi`         | REST API functionality | pytest                          |\n| `tests/consensus_tests` | Distributed consensus  | pytest with multi-node clusters |\n| `tests/e2e_tests`       | End-to-end scenarios   | pytest + Docker                 |\n| `basic_api_test.sh`     | Core API smoke tests   | bash + curl                     |\n| `basic_grpc_test.sh`    | gRPC API validation    | bash + grpcurl                  |\n| `shard-snapshot-api.sh` | Snapshot functionality | bash + curl                     |\n\nSources: [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76) [.github/workflows/integration-tests.yml1-274](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L1-L274)\n\n### Coverage Reporting\n\nCoverage collection uses `cargo-llvm-cov` to instrument binaries and `lcov` to merge results:\n\n```\n```\n\nCoverage reports are available at [Codecov dashboard](https://app.",
      "index": 11,
      "token_count": 519,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 21172,
      "end_char": 23214
    },
    {
      "content": "lcov` to merge results:\n\n```\n```\n\nCoverage reports are available at [Codecov dashboard](https://app.codecov.io/gh/qdrant/qdrant) showing per-file and per-function coverage.\n\nSources: [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L1-L112) [docs/DEVELOPMENT.md156-177](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L156-L177)\n\n---\n\n## Release Process\n\nQdrant releases are triggered by pushing Git tags matching version patterns (e.g., `v1.2.3`).\n\n### Release Artifact Matrix\n\n```\n```\n\n### Docker Image Build Details\n\n**Platform Support**\n\n| Image Variant | Platforms                | Base Image                                |\n| ------------- | ------------------------ | ----------------------------------------- |\n| CPU           | linux/amd64, linux/arm64 | debian:13-slim                            |\n| GPU NVIDIA    | linux/amd64              | nvidia/opengl:1.2-glvnd-devel-ubuntu22.04 |\n| GPU AMD       | linux/amd64              | rocm/dev-ubuntu-22.04                     |\n| Unprivileged  | linux/amd64, linux/arm64 | debian:13-slim (USER\\_ID=1000)            |\n\n**Build Command Template**\n\n```\n```\n\n**SBOM and Provenance**\n\nAll Docker images include:\n\n- SBOM (Software Bill of Materials) via `--sbom=true` [.github/workflows/docker-image.yml56](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L56-L56)\n- Cosign signature for supply chain verification [.github/workflows/docker-image.yml62](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L62-L62)\n\n### Binary Release Details\n\n**Linux Targets**\n\n| Target                       | Linking         | Use Case                           |\n| ---------------------------- | --------------- | ---------------------------------- |\n| `x86_64-unknown-linux-gnu`   | Dynamic (glibc) | Standard Linux systems             |\n| `x86_64-unknown-linux-musl`  | Static          | Portable, Alpine Linux, containers |",
      "index": 12,
      "token_count": 549,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 23114,
      "end_char": 25130
    },
    {
      "content": "|\n| `x86_64-unknown-linux-musl`  | Static          | Portable, Alpine Linux, containers |\n| `aarch64-unknown-linux-musl` | Static          | ARM64 servers (e.g., AWS Graviton) |\n\n**macOS Targets**\n\n| Target                 | Architecture             |\n| ---------------------- | ------------------------ |\n| `x86_64-apple-darwin`  | Intel Macs               |\n| `aarch64-apple-darwin` | Apple Silicon (M1/M2/M3) |\n\n**Windows Target**\n\n| Target                   | Toolchain            |\n| ------------------------ | -------------------- |\n| `x86_64-pc-windows-msvc` | MSVC (Visual Studio) |\n\n### Debian Package Structure\n\nGenerated from `x86_64-unknown-linux-musl` build using `cargo-deb`:\n\n```\nPackage: qdrant\nArchitecture: amd64\nDepends: libc6\nDescription: Qdrant - High-performance vector similarity search engine\n\n/usr/bin/qdrant\n/var/lib/qdrant/storage/\n/var/lib/qdrant/snapshots/\n/var/lib/qdrant/static/\n/etc/qdrant/config/\n```\n\nConfiguration from [config/deb.yaml1-10](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml#L1-L10) sets default paths for system installation.\n\nSources: [.github/workflows/release-artifacts.yml50-64](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L50-L64) [config/deb.yaml1-10](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml#L1-L10)\n\n### AppImage Bundle\n\nThe AppImage bundles:\n\n- Qdrant binary\n- Web UI static files\n- Desktop integration metadata\n- Custom AppRun launcher script\n\nThis creates a single executable file that works on any Linux distribution without installation.\n\nSources: [.github/workflows/release-artifacts.yml117-177](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L117-L177)\n\n---\n\n## Build Optimization Techniques\n\n### Cargo-Chef Layer Caching\n\nTraditional Docker builds invalidate all layers when source code changes. Cargo-chef separates dependency compilation from source compilation:\n\n```\n```\n\n**Cache layers**:\n\n1. `recipe.json` changes only when dependencies change\n2.",
      "index": 13,
      "token_count": 570,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 25030,
      "end_char": 27077
    },
    {
      "content": "compilation:\n\n```\n```\n\n**Cache layers**:\n\n1. `recipe.json` changes only when dependencies change\n2. `cargo chef cook` layer cached until dependencies change\n3. Source code changes only invalidate final build step\n\nThis typically reduces Docker build time from \\~30min to \\~5min for code-only changes.\n\nSources: [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25) [Dockerfile96-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L96-L104)\n\n### Linker Selection\n\nQdrant supports three linkers via `LINKER` build arg:\n\n| Linker    | Speed                          | Default |\n| --------- | ------------------------------ | ------- |\n| `mold`    | Fastest (2-3x faster than lld) | ✓       |\n| `lld`     | Fast                           |         |\n| (default) | Slower                         |         |\n\nThe mold linker is downloaded during build [Dockerfile52-66](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L52-L66) and added to PATH [Dockerfile102](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L102-L102)\n\n### Rust Cache in GitHub Actions\n\nAll workflows use `Swatinem/rust-cache@v2` to cache:\n\n- `~/.cargo/registry` - crate registry index and downloads\n- `~/.cargo/git` - git dependencies\n- `target/` - compiled artifacts\n\n**Cache key configuration**:\n\n```\n```\n\nThe `shared-key` parameter allows multiple jobs to share the same cache, reducing redundant compilations.\n\nSources: [.github/workflows/rust.yml23](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L23-L23) [.github/workflows/integration-tests.yml26-28](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L26-L28)\n\n---\n\n## Continuous Integration Summary\n\n**Workflow Trigger Matrix**\n\n| Workflow              | Trigger         | Duration    | Purpose               |\n| --------------------- | --------------- | ----------- | --------------------- |\n| rust.yml              | Every push/PR   | \\~10-15 min | Unit tests on 3 OS    |\n| rust-lint.",
      "index": 14,
      "token_count": 586,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 26977,
      "end_char": 29014
    },
    {
      "content": "--- |\n| rust.yml              | Every push/PR   | \\~10-15 min | Unit tests on 3 OS    |\n| rust-lint.yml         | Every push/PR   | \\~3-5 min   | Code quality checks   |\n| integration-tests.yml | Every push/PR   | \\~20-30 min | API + consensus tests |\n| storage-compat.yml    | Every push/PR   | \\~5-10 min  | Version migration     |\n| coverage.yml          | Daily cron      | \\~30-40 min | Coverage reporting    |\n| rust-gpu.yml          | Manual          | \\~15-20 min | GPU functionality     |\n| docker-image.yml      | Tag push        | \\~60-90 min | Multi-platform images |\n| release-artifacts.yml | Release publish | \\~45-60 min | Binary artifacts      |\n\n**Test Execution Flow**\n\n```\n```\n\nSources: All workflow files in [.github/workflows/](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Building and CI/CD](#building-and-cicd.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Docker Multi-Stage Build Architecture](#docker-multi-stage-build-architecture.md)\n- [Stage 1: Dependency Planning](#stage-1-dependency-planning.md)\n- [Stage 2: Builder](#stage-2-builder.md)\n- [Stage 3: Base Image Selection](#stage-3-base-image-selection.md)\n- [Stage 4: Final Runtime Image](#stage-4-final-runtime-image.md)\n- [GitHub Actions Workflows](#github-actions-workflows.md)\n- [rust.yml - Core Test Suite](#rustyml---core-test-suite.md)\n- [integration-tests.yml - Integration Testing](#integration-testsyml---integration-testing.md)\n- [rust-lint.yml - Code Quality](#rust-lintyml---code-quality.md)\n- [coverage.yml - Code Coverage](#coverageyml---code-coverage.md)\n- [docker-image.yml - Container Image Publishing](#docker-imageyml---container-image-publishing.md)\n- [release-artifacts.yml - Binary Releases](#release-artifactsyml---binary-releases.md)\n- [storage-compat.yml - Version Compatibility](#storage-compatyml---version-compatibility.md)\n- [rust-gpu.yml - GPU Functionality](#rust-gpuyml---gpu-functionality.md)",
      "index": 15,
      "token_count": 560,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 28914,
      "end_char": 30924
    },
    {
      "content": "version-compatibility.md)\n- [rust-gpu.yml - GPU Functionality](#rust-gpuyml---gpu-functionality.md)\n- [Testing Infrastructure](#testing-infrastructure.md)\n- [Nextest Configuration](#nextest-configuration.md)\n- [Integration Test Script](#integration-test-script.md)\n- [Coverage Reporting](#coverage-reporting.md)\n- [Release Process](#release-process.md)\n- [Release Artifact Matrix](#release-artifact-matrix.md)\n- [Docker Image Build Details](#docker-image-build-details.md)\n- [Binary Release Details](#binary-release-details.md)\n- [Debian Package Structure](#debian-package-structure.md)\n- [AppImage Bundle](#appimage-bundle.md)\n- [Build Optimization Techniques](#build-optimization-techniques.md)\n- [Cargo-Chef Layer Caching](#cargo-chef-layer-caching.md)\n- [Linker Selection](#linker-selection.md)\n- [Rust Cache in GitHub Actions](#rust-cache-in-github-actions.md)\n- [Continuous Integration Summary](#continuous-integration-summary.md)",
      "index": 16,
      "token_count": 231,
      "metadata": {
        "title": "_qdrant_qdrant_10.3-building-and-cicd",
        "source": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "file_name": "_qdrant_qdrant_10.3-building-and-cicd.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.600369",
        "total_chunks": 17
      },
      "start_char": 30824,
      "end_char": 32872
    },
    {
      "content": "Development Guide | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 624,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 0,
      "end_char": 2031
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Development Guide\n\nRelevant source files\n\n- [.config/nextest.toml](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml)\n- [.github/ISSUE\\_TEMPLATE/flaky\\_test.md](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md)\n- [.github/workflows/coverage.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml)\n- [.github/workflows/docker-image.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml)\n- [.github/workflows/integration-tests.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.github/workflows/release-artifacts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml)\n- [.github/workflows/rust-gpu.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.",
      "index": 1,
      "token_count": 656,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 1931,
      "end_char": 3973
    },
    {
      "content": "nt/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml)\n- [.github/workflows/rust.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml)\n- [.github/workflows/storage-compat.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml)\n- [Dockerfile](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile)\n- [README.md](https://github.com/qdrant/qdrant/blob/48203e41/README.md)\n- [config/deb.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml)\n- [docs/CODE\\_OF\\_CONDUCT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CODE_OF_CONDUCT.md)\n- [docs/CONTRIBUTING.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md)\n- [docs/DEVELOPMENT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md)\n- [docs/QUICK\\_START.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md)\n- [docs/imgs/ci-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/ci-coverage-report.png)\n- [docs/imgs/local-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/roadmap/README.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/README.md)\n- [docs/roadmap/roadmap-2022.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2022.md)\n- [docs/roadmap/roadmap-2023.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2023.md)\n- [docs/roadmap/roadmap-2024.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2024.md)\n- [tests/integration-tests.sh](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh)\n- [tools/sync-web-ui.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh)",
      "index": 2,
      "token_count": 720,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 3873,
      "end_char": 5752
    },
    {
      "content": ".sh)\n- [tools/sync-web-ui.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh)\n\nThis guide provides practical information for developers contributing to Qdrant, including environment setup, development workflow, API changes, performance profiling, and testing procedures. For deployment and configuration details, see [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md). For general contribution guidelines, see [docs/CONTRIBUTING.md1-50](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md#L1-L50)\n\n---\n\n## Development Environment Setup\n\n### Prerequisites and Dependencies\n\nQdrant requires the following tools and dependencies for local development:\n\n| Component          | Purpose                  | Installation                    |\n| ------------------ | ------------------------ | ------------------------------- |\n| **Rust toolchain** | Core compilation         | `rustup` with stable channel    |\n| **rustfmt**        | Code formatting          | `rustup component add rustfmt`  |\n| **clippy**         | Linting                  | `rustup component add clippy`   |\n| **protoc**         | gRPC code generation     | Platform-specific (see below)   |\n| **clang**          | C++ interop and linking  | `apt-get install clang` (Linux) |\n| **Poetry**         | Python test dependencies | `pip install poetry`            |\n\n**Protobuf Compiler Installation:**\n\nOn Linux/macOS, install protoc manually:\n\n```\n```\n\nSources: [docs/DEVELOPMENT.md62-78](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L62-L78)\n\n### Building Qdrant\n\n**Basic Build:**\n\n```\n```\n\n**Development Build with Features:**\n\n```\n```\n\nThe build system uses `cargo-chef` for Docker layer caching (see [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)) and supports cross-compilation via `xx` tooling ([Dockerfile10](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L10-L10) [Dockerfile28-31](https://github.",
      "index": 3,
      "token_count": 536,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 5652,
      "end_char": 7653
    },
    {
      "content": "https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L10-L10) [Dockerfile28-31](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L28-L31)).\n\nSources: [docs/DEVELOPMENT.md80-85](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L80-L85) [Dockerfile28-118](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L28-L118)\n\n### Development Environment Flow\n\n```\n```\n\nSources: [docs/DEVELOPMENT.md45-97](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L45-L97) [Dockerfile1-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L1-L230)\n\n### Nix Development Shell\n\nFor Nix users, a complete development environment is available:\n\n```\n```\n\nThis provides Rust toolchain, Python dependencies, and all tools needed for development and testing.\n\nSources: [docs/DEVELOPMENT.md98-100](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L98-L100)\n\n---\n\n## API Changes Workflow\n\n### REST API Changes\n\nQdrant uses OpenAPI 3.0 specifications with schema generation from Rust types. API changes must maintain consistency between code, specs, and tests.\n\n```\n```\n\n**Detailed Steps:**\n\n1. **Implement Rust endpoints and models** in `src/actix/` and `lib/api/`\n\n2. **Update OpenAPI YTT templates** in `openapi/*ytt.yaml` files\n\n3. **Add schema definitions** to `src/schema_generator.rs` for new types\n\n4. **Generate specs:** `./tools/generate_openapi_models.sh`\n\n5. **Update integration tests** in `tests/openapi/` directory\n\n6. **Run tests:** `poetry -C tests run pytest tests/openapi`\n\n7. **Validate specs:**\n\n   - Serve docs: `cd docs/redoc && python -m http.server`\n   - View at `http://localhost:8000/?v=master`\n   - Validate YAML in [Swagger Editor](https://editor.swagger.io/)\n\nThe CI enforces consistency via `./tests/openapi_consistency_check.sh` which fails if generated specs don't match committed specs.\n\nSources: [docs/DEVELOPMENT.md260-278](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L260-L278) [.github/workflows/integration-tests.",
      "index": 4,
      "token_count": 663,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 7553,
      "end_char": 9582
    },
    {
      "content": "com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L260-L278) [.github/workflows/integration-tests.yml150-153](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L150-L153)\n\n### gRPC API Changes\n\nQdrant uses Tonic for gRPC with protocol buffer definitions in `lib/api/src/grpc/proto/*.proto`.\n\n```\n```\n\n**Protocol Buffer Guidelines:**\n\n- Use `oneof` for enum-like payloads to enable type-safe variants\n- Request/response types are auto-generated as Rust structs\n- Service trait is implemented in Rust code\n- Default gRPC port: `6334` ([tests/integration-tests.sh11](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L11-L11))\n\n**Testing:**\n\n```\n```\n\nSources: [docs/DEVELOPMENT.md280-293](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L280-L293) [tests/integration-tests.sh69-75](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L69-L75)\n\n### System Integration Considerations\n\nWhen making API changes, also update:\n\n1. **Metrics allow lists** in `src/common/metrics.rs` for new endpoints\n2. **JWT integration tests** in `tests/auth_tests` for authenticated endpoints\n\nSources: [docs/DEVELOPMENT.md296-300](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L296-L300)\n\n---\n\n## Testing Infrastructure\n\n### Test Hierarchy\n\n```\n```\n\nSources: [.github/workflows/rust.yml42-45](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L42-L45) [tests/integration-tests.sh63-75](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L63-L75) [.github/workflows/integration-tests.yml45-84](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L45-L84)\n\n### Running Tests Locally\n\n**Unit Tests:**\n\n```\n```\n\nConfiguration for nextest is in [.config/nextest.toml1-13](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml#L1-L13) with retry logic and failure output settings.\n\n**Integration Tests:**\n\n```\n```\n\n**Consensus Tests:**\n\n```\n```",
      "index": 5,
      "token_count": 678,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 9482,
      "end_char": 11521
    },
    {
      "content": "logic and failure output settings.\n\n**Integration Tests:**\n\n```\n```\n\n**Consensus Tests:**\n\n```\n```\n\n**E2E Tests:**\n\n```\n```\n\nSources: [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76) [.github/workflows/integration-tests.yml14-83](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L14-L83) [.github/workflows/integration-tests.yml211-265](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L211-L265)\n\n### CI/CD Pipeline\n\n```\n```\n\n**Key CI Features:**\n\n- **Automatic flaky test detection:** JUnit XML parsing creates GitHub issues for flaky tests ([.github/workflows/rust.yml55-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L55-L112))\n- **Multi-platform testing:** Ubuntu, Windows, macOS ([.github/workflows/rust.yml17](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L17-L17))\n- **Coverage reporting:** Daily runs upload to Codecov ([.github/workflows/coverage.yml84-111](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L84-L111))\n- **Storage compatibility:** Tests migration between versions ([.github/workflows/storage-compat.yml1-34](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml#L1-L34))\n- **GPU testing:** Separate workflow with Vulkan setup ([.github/workflows/rust-gpu.yml1-44](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml#L1-L44))\n\nSources: [.github/workflows/rust.yml1-149](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L1-L149) [.github/workflows/integration-tests.yml1-274](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L1-L274) [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L1-L112)\n\n---\n\n## Performance Profiling and Benchmarking\n\n### Criterion Benchmarks\n\nQdrant uses Criterion.",
      "index": 6,
      "token_count": 677,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 11421,
      "end_char": 13451
    },
    {
      "content": "2)\n\n---\n\n## Performance Profiling and Benchmarking\n\n### Criterion Benchmarks\n\nQdrant uses Criterion.rs for micro-benchmarks. Benchmarks are located in sub-crates under `benches/` directories.\n\n**Running Benchmarks:**\n\n```\n```\n\nCriterion automatically detects performance regressions by comparing against previous runs.\n\nSources: [docs/DEVELOPMENT.md102-133](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L102-L133)\n\n### FlameGraph Profiling\n\nGenerate flame graphs for visual performance analysis:\n\n```\n```\n\nThis creates:\n\n- FlameGraph SVG showing time spent in each function\n- Profiling records for call-graph generation\n\n**Generating Call Graphs:**\n\n```\n```\n\nSources: [docs/DEVELOPMENT.md136-154](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L136-L154)\n\n### Tango.rs Comparative Benchmarks\n\nFor precise performance comparisons between code revisions:\n\n**1. Run baseline in solo mode:**\n\n```\n```\n\n**2. Save baseline binary:**\n\n```\n```\n\n**3. Make code changes, then compare:**\n\n```\n```\n\nTango.rs runs both versions simultaneously to eliminate environmental variance.\n\nSources: [docs/DEVELOPMENT.md178-207](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L178-L207)\n\n### Coverage Reporting\n\n**Local Coverage Generation:**\n\n```\n```\n\n**CI Coverage:**\n\n- Daily runs on `dev` branch ([.github/workflows/coverage.yml5-6](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L5-L6))\n- Separate unit and integration coverage\n- Merged reports uploaded to [Codecov](https://app.codecov.io/gh/qdrant/qdrant/)\n\nSources: [docs/DEVELOPMENT.md156-176](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L156-L176) [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L1-L112)\n\n### Real-Time Profiling with Tracy\n\nQdrant supports optional Tracy profiler integration:\n\n**Enable Tracy:**\n\n```\n```\n\n**Enable tokio-console:**\n\n```\n```\n\n**Important:**\n\n- `tracing` is an optional dependency",
      "index": 7,
      "token_count": 602,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 13351,
      "end_char": 15386
    },
    {
      "content": "```\n```\n\n**Enable tokio-console:**\n\n```\n```\n\n**Important:**\n\n- `tracing` is an optional dependency\n- Use `#[cfg_attr(feature = \"tracing\", tracing::instrument)]` for optional tracing\n- Never enable `log` or `log-always` features with tracing-log backend\n\nSources: [docs/DEVELOPMENT.md209-258](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L209-L258)\n\n---\n\n## Docker Development\n\n### Multi-Stage Build Process\n\n```\n```\n\n**Build Arguments:**\n\n| Argument   | Purpose                          | Default    |\n| ---------- | -------------------------------- | ---------- |\n| `PROFILE`  | Cargo profile (release, dev, ci) | `release`  |\n| `FEATURES` | Enable additional features       | `\"\"`       |\n| `GPU`      | GPU support (nvidia, amd)        | `\"\"`       |\n| `LINKER`   | Linker choice (mold, lld)        | `mold`     |\n| `USER_ID`  | Non-root user ID                 | `0` (root) |\n| `PACKAGES` | Extra apt packages (e.g., gdb)   | `\"\"`       |\n| `SOURCES`  | Include source in image          | `\"\"`       |\n\n**Building Custom Images:**\n\n```\n```\n\nSources: [Dockerfile1-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L1-L230) [docs/DEVELOPMENT.md7-40](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L7-L40)\n\n### Development Workflow with Docker\n\n**Run with custom configuration:**\n\n```\n```\n\n**Key mount points:**\n\n- `/qdrant/storage` - Persistent vector data (required)\n- `/qdrant/snapshots` - Backup storage\n- `/qdrant/config/production.yaml` - Config overrides\n- `/qdrant/static` - Web UI assets\n\nSources: [docs/QUICK\\_START.md26-40](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md#L26-L40) [Dockerfile196-211](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L196-L211)\n\n---\n\n## Web UI Synchronization\n\nThe Qdrant web UI is maintained in a separate repository and synced using a utility script:\n\n```\n```\n\nThis script:\n\n1. Downloads latest `dist-qdrant.zip` from [qdrant-web-ui releases](<https://github.com/qdrant/qdrant/blob/48203e41/qdrant-web-ui releases>)\n2.",
      "index": 8,
      "token_count": 655,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 15286,
      "end_char": 17335
    },
    {
      "content": "[qdrant-web-ui releases](<https://github.com/qdrant/qdrant/blob/48203e41/qdrant-web-ui releases>)\n2. Extracts to `./static/` directory\n3. Copies OpenAPI spec from `./docs/redoc/master/openapi.json` to `./static/openapi.json`\n\nThe script is automatically invoked during Docker builds ([Dockerfile92-94](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L92-L94)).\n\nSources: [tools/sync-web-ui.sh1-27](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh#L1-L27) [docs/DEVELOPMENT.md92-96](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L92-L96)\n\n---\n\n## Integration Test Details\n\n### Test Execution Flow\n\n```\n```\n\n**Environment Variables:**\n\n- `QDRANT__SERVICE__GRPC_PORT=6334` - gRPC port ([tests/integration-tests.sh11](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L11-L11))\n- `QDRANT__CLUSTER__ENABLED=true` - Enable distributed mode ([tests/integration-tests.sh22](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L22-L22))\n- `COVERAGE=1` - Use coverage-instrumented binary ([tests/integration-tests.sh14](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L14-L14))\n- `LLVM_PROFILE_FILE` - Coverage output path ([tests/integration-tests.sh12](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L12-L12))\n\n**Graceful Shutdown:**\n\nFor coverage collection, use `kill -2` (SIGINT) instead of `kill -9` to allow graceful shutdown and coverage data flush ([tests/integration-tests.sh39](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L39-L39)).\n\nSources: [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76)\n\n### Consensus Test Scenarios\n\nThe consensus tests validate distributed Qdrant behavior:\n\n```\n```\n\nThese tests verify:\n\n- Raft consensus protocol correctness\n- Shard replication and failover\n- Cluster scaling operations\n- Snapshot and recovery in distributed mode\n\nSources: [.github/workflows/integration-tests.",
      "index": 9,
      "token_count": 652,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 17235,
      "end_char": 19284
    },
    {
      "content": "erations\n- Snapshot and recovery in distributed mode\n\nSources: [.github/workflows/integration-tests.yml45-84](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L45-L84) [.github/workflows/integration-tests.yml86-118](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L86-L118)\n\n---\n\n## Release Process\n\n### Build Artifacts\n\nThe release workflow ([.github/workflows/release-artifacts.yml1-178](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L1-L178)) produces:\n\n| Artifact             | Platforms                               | Build Target                        |\n| -------------------- | --------------------------------------- | ----------------------------------- |\n| **Linux binaries**   | x86\\_64-gnu, x86\\_64-musl, aarch64-musl | `taiki-e/upload-rust-binary-action` |\n| **macOS binaries**   | x86\\_64-darwin, aarch64-darwin          | Native compilation                  |\n| **Windows binaries** | x86\\_64-windows                         | Native compilation                  |\n| **Debian package**   | x86\\_64-musl                            | `cargo deb`                         |\n| **AppImage**         | x86\\_64                                 | `linuxdeploy` with bundled deps     |\n\n**Debian Package:**\n\n```\n```\n\n**AppImage:**\n\n```\n```\n\nSources: [.github/workflows/release-artifacts.yml1-178](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L1-L178)\n\n### Docker Image Release\n\nDocker images are built on self-hosted runners for tag pushes:\n\n**Image Variants:**\n\n| Tag Pattern                         | Description              | Platforms                |\n| ----------------------------------- | ------------------------ | ------------------------ |\n| `qdrant/qdrant:v1.x.y`              | Release version          | linux/amd64, linux/arm64 |\n| `qdrant/qdrant:latest`              | Latest release           | linux/amd64, linux/arm64 |\n| `qdrant/qdrant:v1.x.",
      "index": 10,
      "token_count": 531,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 19184,
      "end_char": 21211
    },
    {
      "content": ":latest`              | Latest release           | linux/amd64, linux/arm64 |\n| `qdrant/qdrant:v1.x.y-unprivileged` | Non-root user (UID 1000) | linux/amd64, linux/arm64 |\n| `qdrant/qdrant:v1.x.y-gpu-nvidia`   | NVIDIA GPU support       | linux/amd64              |\n| `qdrant/qdrant:v1.x.y-gpu-amd`      | AMD GPU support          | linux/amd64              |\n\n**Build and Push:**\n\n```\n```\n\nSources: [.github/workflows/docker-image.yml1-148](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L1-L148)\n\n---\n\n## Summary\n\nThis development guide covers the essential workflows for contributing to Qdrant:\n\n1. **Environment Setup**: Install Rust toolchain, protoc, and dependencies\n2. **Building**: Use `cargo build` with appropriate features and profiles\n3. **API Changes**: Update OpenAPI specs and proto files, regenerate schemas\n4. **Testing**: Run unit, integration, consensus, and E2E tests locally and in CI\n5. **Profiling**: Use Criterion, FlameGraph, Tango.rs, and Tracy for performance analysis\n6. **Docker**: Build custom images with multi-stage builds and build arguments\n7. **Release**: Automated builds for multiple platforms and package formats\n\nFor more detailed information on specific topics:\n\n- Configuration: See [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- Docker deployment: See [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- API specifications: See [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md) and [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n\nSources: [docs/DEVELOPMENT.md1-301](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L1-L301) [docs/CONTRIBUTING.md1-50](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md#L1-L50)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Development Guide](#development-guide.md)\n- [Development Environment Setup](#development-environment-setup.md)\n- [Prerequisites and Dependencies](#prerequisites-and-dependencies.md)",
      "index": 11,
      "token_count": 582,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 21111,
      "end_char": 23148
    },
    {
      "content": "opment-environment-setup.md)\n- [Prerequisites and Dependencies](#prerequisites-and-dependencies.md)\n- [Building Qdrant](#building-qdrant.md)\n- [Development Environment Flow](#development-environment-flow.md)\n- [Nix Development Shell](#nix-development-shell.md)\n- [API Changes Workflow](#api-changes-workflow.md)\n- [REST API Changes](#rest-api-changes.md)\n- [gRPC API Changes](#grpc-api-changes.md)\n- [System Integration Considerations](#system-integration-considerations.md)\n- [Testing Infrastructure](#testing-infrastructure.md)\n- [Test Hierarchy](#test-hierarchy.md)\n- [Running Tests Locally](#running-tests-locally.md)\n- [CI/CD Pipeline](#cicd-pipeline.md)\n- [Performance Profiling and Benchmarking](#performance-profiling-and-benchmarking.md)\n- [Criterion Benchmarks](#criterion-benchmarks.md)\n- [FlameGraph Profiling](#flamegraph-profiling.md)\n- [Tango.rs Comparative Benchmarks](#tangors-comparative-benchmarks.md)\n- [Coverage Reporting](#coverage-reporting.md)\n- [Real-Time Profiling with Tracy](#real-time-profiling-with-tracy.md)\n- [Docker Development](#docker-development.md)\n- [Multi-Stage Build Process](#multi-stage-build-process.md)\n- [Development Workflow with Docker](#development-workflow-with-docker.md)\n- [Web UI Synchronization](#web-ui-synchronization.md)\n- [Integration Test Details](#integration-test-details.md)\n- [Test Execution Flow](#test-execution-flow.md)\n- [Consensus Test Scenarios](#consensus-test-scenarios.md)\n- [Release Process](#release-process.md)\n- [Build Artifacts](#build-artifacts.md)\n- [Docker Image Release](#docker-image-release.md)\n- [Summary](#summary.md)",
      "index": 12,
      "token_count": 413,
      "metadata": {
        "title": "_qdrant_qdrant_11-development-guide",
        "source": "qdrant_qdrant\\_qdrant_qdrant_11-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_11-development-guide.md",
        "file_name": "_qdrant_qdrant_11-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.639856",
        "total_chunks": 13
      },
      "start_char": 23048,
      "end_char": 25096
    },
    {
      "content": "System Architecture | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 624,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 0,
      "end_char": 2033
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# System Architecture\n\nRelevant source files\n\n- [Cargo.lock](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.lock)\n- [Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml)\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [docs/redoc/default\\_version.js](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js)\n- [docs/redoc/index.html](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html)\n- [docs/redoc/v0.10.3/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.3/openapi.json)\n- [docs/redoc/v0.10.4/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.4/openapi.json)\n- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.5/openapi.json)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.",
      "index": 1,
      "token_count": 718,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 1933,
      "end_char": 3982
    },
    {
      "content": "n)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.11.x/openapi.json)\n- [docs/redoc/v1.13.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.13.x/openapi.json)\n- [docs/redoc/v1.15.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.15.x/openapi.json)\n- [lib/api/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml)\n- [lib/collection/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/common/common/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)\n- [lib/common/dataset/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/dataset/Cargo.toml)\n- [lib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.toml)\n- [lib/segment/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml)\n- [lib/sparse/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/Cargo.toml)\n- [lib/storage/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)",
      "index": 2,
      "token_count": 741,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 3882,
      "end_char": 5926
    },
    {
      "content": "i.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n- [tools/missed\\_cherry\\_picks.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/missed_cherry_picks.sh)\n\n## Purpose and Scope\n\nThis document provides a comprehensive overview of Qdrant's system architecture, describing the layered design from the API layer down to persistent storage. It covers both standalone and distributed deployment modes, the core abstractions at each layer, and how components interact to serve search and update operations.\n\nFor specific details on:\n\n- Application startup and runtime initialization, see [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- Collection management and the table of content system, see [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- Shard distribution and replica coordination, see [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- Internal structure of local shards, see [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)",
      "index": 3,
      "token_count": 599,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 5826,
      "end_char": 7799
    },
    {
      "content": "ture of local shards, see [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- Segment construction and optimization, see [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- Vector indexing strategies, see [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- Consensus and distributed features, see [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n\n---\n\n## Architectural Overview\n\nQdrant employs a **layered architecture** with clear separation of concerns. The system is organized into six primary layers, each responsible for specific aspects of data management and query processing.\n\n### System Layers\n\n```\n```\n\n**Sources:** [src/main.rs1-700](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L1-L700) [lib/storage/src/dispatcher.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/dispatcher.rs) [lib/storage/src/content\\_manager/toc/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/mod.rs) [lib/collection/src/collection.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection.rs) [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs)\n\n### Layer Responsibilities\n\n| Layer                     | Primary Components                                 | Responsibilities                                                         |\n| ------------------------- | -------------------------------------------------- | ------------------------------------------------------------------------ |\n| **API Layer**             | `actix::init`, `tonic::init`                       | HTTP/REST and gRPC endpoints, request validation, authentication         |\n| **Service Orchestration** | `Dispatcher`, `ConsensusManager`, `TableOfContent` | Request routing, consensus coordination, collection lifecycle management |",
      "index": 4,
      "token_count": 457,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 7699,
      "end_char": 9665
    },
    {
      "content": "ger`, `TableOfContent` | Request routing, consensus coordination, collection lifecycle management |\n| **Collection Layer**      | `Collection`, `ShardHolder`                        | Logical data containers, shard key routing, collection-level operations  |\n| **Shard Layer**           | `ShardReplicaSet`, `LocalShard`, `RemoteShard`     | Data partitioning, replication, replica coordination, update ordering    |\n| **Segment Layer**         | `Segment`, `SegmentHolder`, `UpdateHandler`        | Data unit management, indexing, background optimization                  |\n| **Storage/Index Layer**   | Vector/Payload indices and storage                 | Physical data storage, index structures, persistence                     |\n\n**Sources:** [src/actix/mod.rs55-205](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L205) [src/tonic/mod.rs147-240](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L240) [lib/storage/src/dispatcher.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/dispatcher.rs)\n\n---\n\n## Deployment Modes\n\nQdrant supports two deployment modes configured via the `cluster.enabled` setting in [config/config.yaml301-303](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L301-L303)\n\n### Standalone Mode\n\nIn standalone mode, Qdrant runs as a single node without distributed consensus. The `Dispatcher` routes requests directly to `TableOfContent` without going through the consensus layer.\n\n```\n```\n\n**Sources:** [src/main.rs494-502](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L494-L502) [lib/storage/src/dispatcher.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/dispatcher.rs)\n\n### Distributed Mode\n\nIn distributed mode (when `cluster.enabled = true`), the system uses Raft consensus for metadata coordination. The `Dispatcher` routes metadata operations through `ConsensusManager`, while data operations go directly to shards with optimistic replication.\n\n```\n```\n\n**Sources:** [src/main.rs395-493](https://github.",
      "index": 5,
      "token_count": 553,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 9565,
      "end_char": 11607
    },
    {
      "content": "y to shards with optimistic replication.\n\n```\n```\n\n**Sources:** [src/main.rs395-493](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L395-L493) [src/consensus.rs45-283](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L45-L283) [lib/storage/src/content\\_manager/consensus\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_manager.rs)\n\n---\n\n## API Layer\n\nThe API layer provides REST and gRPC interfaces for client communication. Both protocols expose equivalent functionality.\n\n### REST API (Actix-web)\n\nThe REST API runs on port 6333 (configurable via `service.http_port`) and uses the Actix-web framework.\n\n**Key components:**\n\n- **Entry point:** `actix::init` in [src/actix/mod.rs55-205](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L205)\n\n- **HTTP server configuration:** [src/actix/mod.rs99-200](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L99-L200)\n\n- **Endpoint modules:**\n\n  - Collections API: [src/actix/api/collections\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/collections_api.rs)\n  - Search API: [src/actix/api/search\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/search_api.rs)\n  - Update API: [src/actix/api/update\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/update_api.rs)\n  - Cluster API: [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n  - Snapshots API: [src/actix/api/snapshot\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/snapshot_api.rs)\n\n**Sources:** [src/actix/mod.rs1-264](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L1-L264) [config/config.yaml234-246](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L234-L246)\n\n### gRPC API (Tonic)\n\nThe gRPC API runs on port 6334 (configurable via `service.grpc_port`) and uses the Tonic framework. It provides:",
      "index": 6,
      "token_count": 704,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 11507,
      "end_char": 13501
    },
    {
      "content": "uns on port 6334 (configurable via `service.grpc_port`) and uses the Tonic framework. It provides:\n\n- **Public gRPC services:** `QdrantServer`, `CollectionsServer`, `PointsServer`, `SnapshotsServer`\n- **Internal gRPC services:** `QdrantInternalServer`, `RaftServer` (for peer-to-peer communication)\n\n**Key components:**\n\n- **Entry point:** `tonic::init` in [src/tonic/mod.rs147-240](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L240)\n- **Service implementations:** [src/tonic/api/](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/)\n- **Internal P2P port:** Configured via `cluster.p2p.port` [config/config.yaml306-308](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L306-L308)\n\n**Sources:** [src/tonic/mod.rs1-290](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L1-L290) [config/config.yaml248-251](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L248-L251)\n\n### Authentication and Authorization\n\nBoth API layers support:\n\n- **API key authentication:** Via `service.api_key` and `service.read_only_api_key` [config/config.yaml266-285](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L266-L285)\n- **JWT RBAC:** Via `service.jwt_rbac` for fine-grained access control\n- **TLS encryption:** Via `service.enable_tls` and `cluster.p2p.enable_tls` [config/config.yaml259-312](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L259-L312)\n\n**Sources:** [src/actix/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/auth.rs) [src/tonic/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/auth.rs) [src/settings.rs22-66](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L22-L66)\n\n---\n\n## Service Orchestration Layer\n\nThis layer coordinates request routing, consensus, and collection management.\n\n### Dispatcher\n\nThe `Dispatcher` is the central request router that determines whether operations should:\n\n1. Go directly to `TableOfContent` (standalone mode or data operations)\n2.",
      "index": 7,
      "token_count": 676,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 13401,
      "end_char": 15435
    },
    {
      "content": "ether operations should:\n\n1. Go directly to `TableOfContent` (standalone mode or data operations)\n2. Pass through `ConsensusManager` (distributed mode metadata operations)\n\n**Code entity:** `storage::dispatcher::Dispatcher` in [lib/storage/src/dispatcher.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/dispatcher.rs)\n\n```\n```\n\n**Sources:** [lib/storage/src/dispatcher.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/dispatcher.rs) [src/main.rs391-407](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L391-L407)\n\n### ConsensusManager\n\nThe `ConsensusManager` wraps the Raft state machine and manages consensus operations for cluster metadata.\n\n**Key responsibilities:**\n\n- Proposing operations to Raft consensus\n- Applying committed operations to `TableOfContent`\n- Managing peer membership and addresses\n- Handling snapshot requests and transfers\n\n**Code entity:** `storage::content_manager::consensus_manager::ConsensusManager` in [lib/storage/src/content\\_manager/consensus\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_manager.rs)\n\n**Metadata operations** managed by consensus (defined in [lib/storage/src/content\\_manager/mod.rs20-146](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs#L20-L146)):\n\n- `CollectionMetaOperations` - collection creation, deletion, updates\n- `AddPeer`, `RemovePeer` - peer membership changes\n- `UpdatePeerMetadata` - peer metadata updates\n- `RequestSnapshot`, `ReportSnapshot` - snapshot coordination\n\n**Sources:** [lib/storage/src/content\\_manager/consensus\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_manager.rs) [lib/storage/src/content\\_manager/mod.rs20-146](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs#L20-L146) [src/consensus.rs44-627](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L44-L627)\n\n### TableOfContent",
      "index": 8,
      "token_count": 569,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 15335,
      "end_char": 17346
    },
    {
      "content": "627](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L44-L627)\n\n### TableOfContent\n\nThe `TableOfContent` (TOC) manages all collections in the system. It acts as the collection registry and provides methods for collection lifecycle management.\n\n**Code entity:** `storage::content_manager::toc::TableOfContent` in [lib/storage/src/content\\_manager/toc/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/mod.rs)\n\n**Key responsibilities:**\n\n- Collection creation, deletion, and updates\n- Collection metadata persistence\n- Collection access control\n- Coordinating collection operations across the cluster\n\n**Initialization** in [src/main.rs365-377](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L365-L377):\n\n```\nlet toc = TableOfContent::new(\n    &settings.storage,\n    search_runtime,\n    update_runtime,\n    general_runtime,\n    optimizer_resource_budget,\n    channel_service.clone(),\n    persistent_consensus_state.this_peer_id(),\n    propose_operation_sender.clone(),\n);\n```\n\n**Sources:** [lib/storage/src/content\\_manager/toc/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/mod.rs) [src/main.rs365-383](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L365-L383)\n\n---\n\n## Collection and Shard Layer\n\n### Collection\n\nA `Collection` is the primary logical container for vector data. Each collection has:\n\n- A unique name\n- Configuration (vector dimensions, distance metric, etc.)\n- One or more shards for data partitioning\n- Optional shard keys for custom partitioning\n\n**Code entity:** `collection::Collection` in [lib/collection/src/collection.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection.rs)\n\n**Key components:**\n\n- `ShardHolder` - manages shard distribution\n- `CollectionConfig` - collection configuration\n- `CollectionParams` - collection parameters\n\n**Sources:** [lib/collection/src/collection.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection.",
      "index": 9,
      "token_count": 544,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 17246,
      "end_char": 19283
    },
    {
      "content": "ion/src/collection.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection.rs) [lib/collection/src/config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs)\n\n### ShardHolder\n\nThe `ShardHolder` maps data to shards and manages shard distribution. It supports two partitioning strategies:\n\n1. **Hash-based partitioning** - automatic distribution using `HashRing`\n2. **Shard key-based partitioning** - custom partitioning using user-defined shard keys\n\n**Code entity:** `collection::shards::shard_holder::ShardHolder` in [lib/collection/src/shards/shard\\_holder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/shard_holder.rs)\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/shard\\_holder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/shard_holder.rs) [lib/collection/src/shards/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/mod.rs)\n\n### ShardReplicaSet\n\nA `ShardReplicaSet` coordinates multiple replicas of a single shard across peers. It handles:\n\n- Replica state management (Active, Dead, Listener, Initializing, etc.)\n- Update ordering and clock synchronization\n- Write consistency enforcement\n- Replica failover\n\n**Code entity:** `collection::shards::replica_set::ShardReplicaSet` in [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n\n**Replica types:**\n\n- `LocalShard` - replica hosted on current peer\n- `RemoteShard` - proxy to replica on another peer\n- `QueueProxyShard` - proxy for updates during shard transfers\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs) [lib/collection/src/shards/replica\\_set/replica\\_state.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/replica_state.rs)\n\n---\n\n## Shard and Segment Layer\n\n### LocalShard",
      "index": 10,
      "token_count": 578,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 19183,
      "end_char": 21211
    },
    {
      "content": "llection/src/shards/replica_set/replica_state.rs)\n\n---\n\n## Shard and Segment Layer\n\n### LocalShard\n\nA `LocalShard` is the core data-holding component on each peer. It contains:\n\n- `SegmentHolder` - manages multiple segments\n- `RecoverableWal` - write-ahead log for durability\n- `UpdateHandler` - background optimization workers\n- `LocalShardClocks` - logical clocks for update ordering\n\n**Code entity:** `collection::shards::local_shard::LocalShard` in [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n\n```\n```\n\n**Update flow:**\n\n1. Write to WAL [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n2. Apply to segments via `SegmentHolder`\n3. Trigger optimization check via `UpdateHandler`\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs) [lib/collection/src/shards/update\\_tracker.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/update_tracker.rs)\n\n### Segment\n\nA `Segment` is the fundamental unit of data storage and indexing. Each segment contains:\n\n- `IdTracker` - maps external IDs to internal IDs\n- `VectorData` - one or more named vector storages and indices\n- `PayloadStorage` - JSON payload data\n- `StructPayloadIndex` - field indices for filtering\n\n**Code entity:** `segment::segment::Segment` in [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs)\n\n**Segment types:**\n\n- **Plain segments** - unindexed, for small datasets or during construction\n- **Indexed segments** - with HNSW or other vector indices\n\n**Sources:** [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs) [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n\n### SegmentHolder",
      "index": 11,
      "token_count": 568,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 21111,
      "end_char": 23131
    },
    {
      "content": "es.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n\n### SegmentHolder\n\nThe `SegmentHolder` manages all segments within a shard and coordinates segment-level operations.\n\n**Code entity:** `collection::shards::segment_holder::SegmentHolder` in [lib/collection/src/shards/local\\_shard/segment\\_holder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/segment_holder.rs)\n\n**Key operations:**\n\n- Read operations across all segments\n- Append-only segments for new data\n- Locked segments during optimization\n- Segment replacement during optimization\n\n**Sources:** [lib/collection/src/shards/local\\_shard/segment\\_holder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/segment_holder.rs)\n\n---\n\n## Storage and Index Layer\n\n### Vector Storage\n\nVector data is stored in specialized storage backends optimized for different access patterns:\n\n| Storage Type              | Use Case                   | Code Entity                                            |\n| ------------------------- | -------------------------- | ------------------------------------------------------ |\n| `DenseSimpleStorage`      | In-memory, fast access     | `segment::vector_storage::simple_dense_vector_storage` |\n| `DenseMmapStorage`        | Memory-mapped, low memory  | `segment::vector_storage::mmap_dense_vector_storage`   |\n| `SparseVectorStorage`     | Sparse vectors             | `sparse::index::sparse_vector_index`                   |\n| `MultiDenseVectorStorage` | Multiple vectors per point | `segment::vector_storage::multi_dense`                 |\n\n**Configuration:** [config/config.yaml192-197](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L192-L197)\n\n**Sources:** [lib/segment/src/vector\\_storage/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/mod.rs) [lib/sparse/src/index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/mod.rs)\n\n### Vector Indices",
      "index": 12,
      "token_count": 494,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 23031,
      "end_char": 25059
    },
    {
      "content": "s](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/mod.rs)\n\n### Vector Indices\n\nVector similarity search is accelerated using various index types:\n\n| Index Type    | Algorithm              | Best For                         |\n| ------------- | ---------------------- | -------------------------------- |\n| `HnswIndex`   | Hierarchical NSW graph | General purpose, fast searches   |\n| `PlainIndex`  | Brute force            | Small datasets, perfect accuracy |\n| `SparseIndex` | Inverted index         | Sparse vectors, keyword search   |\n\n**Configuration:** [config/config.yaml151-174](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L151-L174)\n\n**Sources:** [lib/segment/src/index/hnsw\\_index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/mod.rs) [lib/segment/src/index/plain\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_payload_index.rs) [lib/sparse/src/index/inverted\\_index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/inverted_index/mod.rs)\n\n### Payload Storage and Indices\n\nPayload data (JSON documents) is stored and indexed for filtering:\n\n**Payload storage backends:**\n\n- `SimplePayloadStorage` - in-memory\n- `OnDiskPayloadStorage` - RocksDB or Gridstore\n- `MmapPayloadStorage` - memory-mapped\n\n**Payload index types:**\n\n- `NumericIndex` - range queries on numbers\n- `KeywordIndex` - exact match on strings\n- `FullTextIndex` - tokenized text search\n- `GeoIndex` - geospatial queries\n- `BoolIndex` - boolean values\n- `NullIndex` - existence checks\n\n**Sources:** [lib/segment/src/payload\\_storage/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/payload_storage/mod.rs) [lib/segment/src/index/field\\_index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/mod.rs)\n\n### Write-Ahead Log\n\nThe WAL ensures durability by persisting operations before applying them to segments.",
      "index": 13,
      "token_count": 545,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 24959,
      "end_char": 26961
    },
    {
      "content": "e-Ahead Log\n\nThe WAL ensures durability by persisting operations before applying them to segments.\n\n**Code entity:** `wal::RecoverableWal` from external crate [Cargo.toml70](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L70-L70) and [Cargo.toml275](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml#L275-L275)\n\n**Configuration:** [config/config.yaml49-56](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L49-L56)\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs) [config/config.yaml49-56](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L49-L56)\n\n---\n\n## Runtime Architecture\n\nQdrant uses multiple Tokio runtimes for workload isolation:\n\n### Runtime Separation\n\n```\n```\n\n**Runtime creation** in [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322):\n\n```\nlet search_runtime = create_search_runtime(settings.storage.performance.max_search_threads)\nlet update_runtime = create_update_runtime(settings.storage.performance.max_optimization_runtime_threads)\nlet general_runtime = create_general_purpose_runtime()\n```\n\n**Runtime functions:**\n\n- `create_search_runtime` - [src/common/helpers.rs20-32](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L32)\n- `create_update_runtime` - [src/common/helpers.rs34-50](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L34-L50)\n- `create_general_purpose_runtime` - [src/common/helpers.rs52-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L52-L63)\n\n**Sources:** [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322) [src/common/helpers.rs20-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L63) [config/config.yaml64-96](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L64-L96)\n\n### Resource Budgets",
      "index": 14,
      "token_count": 665,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 26861,
      "end_char": 28846
    },
    {
      "content": "](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L64-L96)\n\n### Resource Budgets\n\nQdrant uses CPU and IO budgets to control resource usage during optimization:\n\n**CPU Budget:** Configured via `optimizer_cpu_budget` [config/config.yaml68-72](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L68-L72)\n\n- If `0`: auto-select, reserve CPUs based on system size\n- If negative: subtract this number from available CPUs\n- If positive: use this exact number of CPUs\n\n**IO Budget:** Configured via `optimizer_io_budget` [lib/storage/src/types.rs43-48](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L43-L48)\n\n- Controls parallel IO operations during optimization\n- Defaults to one IO operation per CPU\n\n**Budget initialization** in [src/main.rs325-327](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L325-L327):\n\n```\nlet cpu_budget = get_cpu_budget(settings.storage.performance.optimizer_cpu_budget);\nlet io_budget = get_io_budget(settings.storage.performance.optimizer_io_budget, cpu_budget);\nlet optimizer_resource_budget = ResourceBudget::new(cpu_budget, io_budget);\n```\n\n**Sources:** [src/main.rs325-327](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L325-L327) [lib/common/common/src/cpu.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/cpu.rs) [lib/common/common/src/budget.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/budget.rs)\n\n---\n\n## Data Flow Overview\n\n### Write Path\n\n```\n```\n\n**Sources:** [lib/storage/src/dispatcher.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/dispatcher.rs) [lib/collection/src/collection.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection.rs) [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs) [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)",
      "index": 15,
      "token_count": 621,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 28746,
      "end_char": 30786
    },
    {
      "content": "d.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n\n### Search Path\n\n```\n```\n\n**Sources:** [lib/collection/src/collection.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection.rs) [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs) [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs) [lib/segment/src/index/hnsw\\_index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/mod.rs)\n\n---\n\n## Configuration\n\nThe system is configured via YAML files with environment variable overrides. The configuration hierarchy is:\n\n1. Compile-time defaults [src/settings.rs20](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L20-L20)\n2. `config/config.yaml` [config/config.yaml1-355](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L1-L355)\n3. Environment-specific config (e.g., `config/development.yaml`)\n4. Local config `config/local.yaml` (not tracked in git)\n5. Custom config via `--config-path` CLI argument\n6. Environment variables prefixed with `QDRANT__`\n\n**Configuration loading** in [src/settings.rs230-285](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L230-L285)\n\n**Key configuration sections:**\n\n- `storage` - storage paths, performance, optimizers\n- `service` - HTTP/gRPC ports, TLS, API keys\n- `cluster` - distributed mode, consensus, P2P\n- `log_level` - logging configuration\n\n**Sources:** [src/settings.rs196-326](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L196-L326) [config/config.yaml1-355](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L1-L355)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [System Architecture](#system-architecture.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Architectural Overview](#architectural-overview.md)\n- [System Layers](#system-layers.md)",
      "index": 16,
      "token_count": 641,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 30686,
      "end_char": 32732
    },
    {
      "content": "ope.md)\n- [Architectural Overview](#architectural-overview.md)\n- [System Layers](#system-layers.md)\n- [Layer Responsibilities](#layer-responsibilities.md)\n- [Deployment Modes](#deployment-modes.md)\n- [Standalone Mode](#standalone-mode.md)\n- [Distributed Mode](#distributed-mode.md)\n- [API Layer](#api-layer.md)\n- [REST API (Actix-web)](#rest-api-actix-web.md)\n- [gRPC API (Tonic)](#grpc-api-tonic.md)\n- [Authentication and Authorization](#authentication-and-authorization.md)\n- [Service Orchestration Layer](#service-orchestration-layer.md)\n- [Dispatcher](#dispatcher.md)\n- [ConsensusManager](#consensusmanager.md)\n- [TableOfContent](#tableofcontent.md)\n- [Collection and Shard Layer](#collection-and-shard-layer.md)\n- [Collection](#collection.md)\n- [ShardHolder](#shardholder.md)\n- [ShardReplicaSet](#shardreplicaset.md)\n- [Shard and Segment Layer](#shard-and-segment-layer.md)\n- [LocalShard](#localshard.md)\n- [Segment](#segment.md)\n- [SegmentHolder](#segmentholder.md)\n- [Storage and Index Layer](#storage-and-index-layer.md)\n- [Vector Storage](#vector-storage.md)\n- [Vector Indices](#vector-indices.md)\n- [Payload Storage and Indices](#payload-storage-and-indices.md)\n- [Write-Ahead Log](#write-ahead-log.md)\n- [Runtime Architecture](#runtime-architecture.md)\n- [Runtime Separation](#runtime-separation.md)\n- [Resource Budgets](#resource-budgets.md)\n- [Data Flow Overview](#data-flow-overview.md)\n- [Write Path](#write-path.md)\n- [Search Path](#search-path.md)\n- [Configuration](#configuration.md)",
      "index": 17,
      "token_count": 418,
      "metadata": {
        "title": "_qdrant_qdrant_2-system-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2-system-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2-system-architecture.md",
        "file_name": "_qdrant_qdrant_2-system-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.669640",
        "total_chunks": 18
      },
      "start_char": 32632,
      "end_char": 34680
    },
    {
      "content": "Application Initialization and Runtime | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 0,
      "end_char": 2048
    },
    {
      "content": "tes-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Application Initialization and Runtime\n\nRelevant source files\n\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)",
      "index": 1,
      "token_count": 644,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 1948,
      "end_char": 3967
    },
    {
      "content": "i.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n\nThis document describes how Qdrant initializes and runs as a service, covering the entry point, configuration loading, runtime creation, storage initialization, API server setup, and thread management. For information about the collections and data management layer, see [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md). For distributed consensus mechanics, see [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md).\n\n## Entry Point and Command-Line Arguments\n\nThe application starts in the `main()` function at [src/main.rs140-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L645) The entry point handles:\n\n- Command-line argument parsing using the `Args` struct\n- Settings initialization from configuration files\n- Global feature flags setup\n- Logging infrastructure configuration\n- Panic hook registration\n- Core initialization sequence\n\n### Command-Line Arguments\n\nThe `Args` struct [src/main.rs72-138](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L72-L138) defines the CLI interface:\n\n```\nArgs",
      "index": 2,
      "token_count": 631,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 3867,
      "end_char": 5904
    },
    {
      "content": "//github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L72-L138) defines the CLI interface:\n\n```\nArgs\n├── bootstrap: Option<Uri>        // Bootstrap peer for joining cluster\n├── uri: Option<Uri>              // This peer's advertised URI\n├── force_snapshot: bool          // Force collection recreation from snapshots\n├── snapshot: Option<Vec<String>> // Individual collection snapshots\n├── storage_snapshot: Option<String> // Full storage snapshot\n├── config_path: Option<String>   // Alternative config file path\n├── disable_telemetry: bool       // Disable telemetry reporting\n├── stacktrace: bool              // Run stacktrace collector\n└── reinit: bool                  // Reinitialize consensus state\n```\n\n**Sources:** [src/main.rs72-138](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L72-L138)\n\n### Initialization Sequence Overview\n\n```\n```\n\n**Sources:** [src/main.rs140-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L645)\n\n## Configuration Loading\n\nConfiguration is loaded through a hierarchical system managed by the `Settings` struct. The loading order (from lowest to highest precedence) is:\n\n```\n```\n\nThe `Settings::new()` function [src/settings.rs230-286](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L230-L286) implements this hierarchy using the `config` crate. Configuration sources are merged, with later sources overriding earlier ones.\n\n**Key Configuration Sections:**\n\n| Section   | Description                                   | Struct          |\n| --------- | --------------------------------------------- | --------------- |\n| `storage` | Storage paths, optimizers, WAL, HNSW settings | `StorageConfig` |\n| `service` | HTTP/gRPC ports, TLS, API keys, CORS          | `ServiceConfig` |\n| `cluster` | Distributed mode, P2P settings, consensus     | `ClusterConfig` |\n| `tls`     | Certificate paths, CA cert, TTL               | `TlsConfig`     |\n| `logger`  | Logging configuration                         | `LoggerConfig`  |\n\n**Sources:** [src/settings.",
      "index": 3,
      "token_count": 518,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 5804,
      "end_char": 7834
    },
    {
      "content": "r`  | Logging configuration                         | `LoggerConfig`  |\n\n**Sources:** [src/settings.rs197-327](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L197-L327) [config/config.yaml1-355](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L1-L355)\n\n## Runtime Creation\n\nQdrant uses three separate Tokio runtimes to isolate different workload types:\n\n### Runtime Architecture\n\n```\n```\n\n**Sources:** [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322) [src/common/helpers.rs20-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L63)\n\n### Runtime Creation Details\n\nThe three runtimes are created at [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322):\n\n1. **Search Runtime** [src/common/helpers.rs20-32](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L32)\n\n   - Thread count: `common::defaults::search_thread_count(max_search_threads)`\n   - Used for all search and query operations\n   - Each thread can handle blocking operations\n\n2. **Update Runtime** [src/common/helpers.rs34-50](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L34-L50)\n\n   - Thread count: Configurable via `max_optimization_runtime_threads`\n   - Used for segment optimization and index building\n   - Background workers run here\n\n3. **General Purpose Runtime** [src/common/helpers.rs52-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L52-L63)\n\n   - Thread count: `max(num_cpus, 2)`\n   - Used for API request handling, consensus, and general async operations\n   - Handle to this runtime is stored for use throughout the application\n\n**Sources:** [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322) [src/common/helpers.rs20-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L63)\n\n## Storage Initialization: TableOfContent\n\nThe `TableOfContent` (ToC) is the central collection manager.",
      "index": 4,
      "token_count": 652,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 7734,
      "end_char": 9762
    },
    {
      "content": "torage Initialization: TableOfContent\n\nThe `TableOfContent` (ToC) is the central collection manager. It's initialized at [src/main.rs365-383](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L365-L383):\n\n```\n```\n\nThe ToC is then wrapped in an `Arc` for shared ownership across threads [src/main.rs385](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L385-L385)\n\n**Sources:** [src/main.rs365-386](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L365-L386)\n\n## Distributed vs Standalone Mode\n\nThe application can run in two modes, controlled by `settings.cluster.enabled`:\n\n```\n```\n\n**Sources:** [src/main.rs280-502](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L280-L502)\n\n### Standalone Mode\n\nIn standalone mode [src/main.rs494-502](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L494-L502):\n\n- No consensus manager is created\n- `Dispatcher` routes requests directly to `TableOfContent`\n- Only external REST and gRPC APIs are started\n- Single-node operation, no replication\n\n### Distributed Mode\n\nIn distributed mode [src/main.rs395-493](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L395-L493):\n\n1. **Consensus State Initialization** [src/main.rs396-403](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L396-L403)\n\n   - Creates `ConsensusManager` with persistent state\n   - Wraps in `ConsensusStateRef` for shared access\n\n2. **Dispatcher Configuration** [src/main.rs405-409](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L405-L409)\n\n   - Dispatcher is configured with consensus state\n   - Routes metadata operations through Raft consensus\n\n3. **Consensus Thread** [src/main.rs432-447](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L432-L447)\n\n   - Spawned via `Consensus::run()`\n   - Runs Raft protocol in dedicated thread\n   - Processes proposals from `propose_receiver` channel\n\n4. **Internal gRPC Server** [src/main.rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L152-L168) in [src/consensus.",
      "index": 5,
      "token_count": 697,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 9662,
      "end_char": 11689
    },
    {
      "content": ".rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L152-L168) in [src/consensus.rs96-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L96-L170)\n\n   - Started via `init_internal()` in separate thread\n   - Handles inter-peer Raft messages\n   - P2P communication on configured port\n\n**Sources:** [src/main.rs395-493](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L395-L493) [src/consensus.rs63-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L170)\n\n## Dispatcher and Request Routing\n\nThe `Dispatcher` acts as the routing layer between API servers and storage:\n\n```\n```\n\n**Creation:**\n\n- Standalone: `Dispatcher::new(toc)` [src/main.rs393](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L393-L393)\n- Distributed: `dispatcher.with_consensus(consensus_state, resharding_enabled)` [src/main.rs405-406](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L405-L406)\n\n**Sources:** [src/main.rs393-411](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L393-L411)\n\n## API Server Initialization\n\n### Thread Topology\n\nThe application spawns multiple threads for different services:\n\n```\n```\n\n**Sources:** [src/main.rs389-641](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L389-L641)\n\n### REST API Server (Actix-web)\n\nStarted at [src/main.rs549-568](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L549-L568):\n\n```\n```\n\nThe `actix::init()` function [src/actix/mod.rs55-205](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L205):\n\n- Binds to `settings.service.host:http_port`\n- Configures middleware (compression, CORS, authentication, logging)\n- Registers all API endpoints\n- Optionally enables TLS with certificate rotation\n- Worker count: `max_web_workers(&settings)`\n\n**Key Features:**\n\n- **Authentication:** API key middleware via `Auth` layer\n- **Compression:** Automatic gzip compression\n- **Validation:** Request validation using `actix-web-validator`",
      "index": 6,
      "token_count": 685,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 11589,
      "end_char": 13585
    },
    {
      "content": "sion:** Automatic gzip compression\n- **Validation:** Request validation using `actix-web-validator`\n- **TLS:** Optional with certificate TTL rotation [src/actix/certificate\\_helpers.rs1-207](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs#L1-L207)\n\n**Sources:** [src/main.rs549-568](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L549-L568) [src/actix/mod.rs55-205](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L205)\n\n### Public gRPC API Server (Tonic)\n\nStarted at [src/main.rs574-592](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L574-L592) if `settings.service.grpc_port` is set:\n\n```\n```\n\nThe `tonic::init()` function [src/tonic/mod.rs147-253](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L253):\n\n- Binds to `settings.service.host:grpc_port`\n- Registers services: `Qdrant`, `Collections`, `Points`, `Snapshots`, `Health`\n- Configures middleware (logging, telemetry, authentication)\n- Enables gRPC reflection\n- Optional TLS configuration\n\n**Services Registered:**\n\n- `QdrantServer` - Health checks and version info\n- `CollectionsServer` - Collection management\n- `PointsServer` - Point operations\n- `SnapshotsServer` - Snapshot operations\n- `HealthServer` - Standard gRPC health protocol\n\n**Sources:** [src/main.rs574-592](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L574-L592) [src/tonic/mod.rs147-253](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L253)\n\n### Internal gRPC Server (Distributed Mode Only)\n\nStarted within the consensus thread at [src/consensus.rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L152-L168):\n\n```\n```\n\nThe `init_internal()` function [src/tonic/mod.rs256-360](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L256-L360):\n\n- Binds to `settings.service.host:p2p.port`\n- Handles Raft messages between peers\n- Provides internal APIs for shard transfers and consensus\n- Mandatory TLS configuration in production clusters",
      "index": 7,
      "token_count": 688,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 13485,
      "end_char": 15517
    },
    {
      "content": "ternal APIs for shard transfers and consensus\n- Mandatory TLS configuration in production clusters\n\n**Internal Services:**\n\n- `RaftServer` - Raft message handling [src/tonic/api/raft\\_api.rs16-150](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L16-L150)\n- `QdrantInternalServer` - Consensus commit tracking\n- `PointsInternalServer` - Internal point operations\n- `CollectionsInternalServer` - Internal collection operations\n- `ShardSnapshotsServer` - Shard snapshot transfers\n\n**Sources:** [src/consensus.rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L152-L168) [src/tonic/mod.rs256-360](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L256-L360)\n\n## Consensus Thread Lifecycle\n\nIn distributed mode, the consensus thread is critical for cluster coordination:\n\n### Consensus Thread Setup\n\n```\n```\n\n**Sources:** [src/consensus.rs63-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L170) [src/main.rs329-447](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L329-L447)\n\n### Consensus Initialization Flow\n\nThe `Consensus::run()` function [src/consensus.rs63-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L170) performs:\n\n1. **TLS Configuration** [src/consensus.rs76](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L76-L76)\n\n   - Loads TLS client config if `cluster.p2p.enable_tls` is enabled\n\n2. **Consensus Object Creation** [src/consensus.rs82-93](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L82-L93)\n\n   - Calls `Consensus::new()` with state, bootstrap peer, URI, config\n   - Creates bounded tokio channel for backpressure\n\n3. **Bootstrap or Recovery** [src/consensus.rs213-244](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L213-L244)\n\n   - New deployment: Bootstrap from peer or initialize as first peer\n   - Existing deployment: Recover state and potentially update URI\n\n4. **Thread Spawning** [src/consensus.rs96-115](https://github.",
      "index": 8,
      "token_count": 682,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 15417,
      "end_char": 17440
    },
    {
      "content": "er state and potentially update URI\n\n4. **Thread Spawning** [src/consensus.rs96-115](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L96-L115)\n\n   - Main consensus thread runs `consensus.start()`\n   - Sets high thread priority on Linux for better latency\n   - Error handling reports to `ConsensusStateRef`\n\n5. **Proposal Forwarder** [src/consensus.rs117-139](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L117-L139)\n\n   - Separate thread forwards proposals from `std::sync::mpsc` to tokio channel\n   - Bridges sync and async worlds\n\n6. **Internal gRPC Server** [src/consensus.rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L152-L168)\n\n   - Spawns thread for internal peer communication\n   - Receives Raft messages via gRPC and forwards to consensus\n\n**Sources:** [src/consensus.rs63-244](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L244)\n\n## Resource Budgets\n\nBefore initialization, CPU and I/O budgets are computed for optimization tasks:\n\n```\n```\n\nThese budgets control how many CPU cores and parallel I/O operations can be used for segment optimization and index building [src/main.rs325-327](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L325-L327)\n\n**Sources:** [src/main.rs325-327](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L325-L327)\n\n## Telemetry and Monitoring\n\nTelemetry collection is initialized for both standalone and distributed modes:\n\n```\n```\n\nIf reporting is enabled, a background task is spawned to periodically report metrics [src/main.rs513-519](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L513-L519)\n\n**Sources:** [src/main.rs413-519](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L413-L519)\n\n## Lifecycle Management\n\nThe main thread waits for all spawned threads to complete:\n\n```\n```\n\nThis blocks until a shutdown signal is received by one of the servers [src/main.rs635-641](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L635-L641)\n\n**Shutdown Handling:**",
      "index": 9,
      "token_count": 661,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 17340,
      "end_char": 19378
    },
    {
      "content": "641](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L635-L641)\n\n**Shutdown Handling:**\n\n- REST API: Controlled by Actix runtime\n- gRPC API: Uses `wait_stop_signal()` [src/tonic/mod.rs130-145](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L130-L145)\n- Signals: SIGTERM and SIGINT are handled gracefully\n\n**Sources:** [src/main.rs635-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L635-L645) [src/tonic/mod.rs130-145](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L130-L145)\n\n## Summary: Complete Initialization Flow\n\n```\n```\n\n**Sources:** [src/main.rs140-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L645)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Application Initialization and Runtime](#application-initialization-and-runtime.md)\n- [Entry Point and Command-Line Arguments](#entry-point-and-command-line-arguments.md)\n- [Command-Line Arguments](#command-line-arguments.md)\n- [Initialization Sequence Overview](#initialization-sequence-overview.md)\n- [Configuration Loading](#configuration-loading.md)\n- [Runtime Creation](#runtime-creation.md)\n- [Runtime Architecture](#runtime-architecture.md)\n- [Runtime Creation Details](#runtime-creation-details.md)\n- [Storage Initialization: TableOfContent](#storage-initialization-tableofcontent.md)\n- [Distributed vs Standalone Mode](#distributed-vs-standalone-mode.md)\n- [Standalone Mode](#standalone-mode.md)\n- [Distributed Mode](#distributed-mode.md)\n- [Dispatcher and Request Routing](#dispatcher-and-request-routing.md)\n- [API Server Initialization](#api-server-initialization.md)\n- [Thread Topology](#thread-topology.md)\n- [REST API Server (Actix-web)](#rest-api-server-actix-web.md)\n- [Public gRPC API Server (Tonic)](#public-grpc-api-server-tonic.md)\n- [Internal gRPC Server (Distributed Mode Only)](#internal-grpc-server-distributed-mode-only.md)\n- [Consensus Thread Lifecycle](#consensus-thread-lifecycle.md)\n- [Consensus Thread Setup](#consensus-thread-setup.md)",
      "index": 10,
      "token_count": 598,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 19278,
      "end_char": 21314
    },
    {
      "content": "d Lifecycle](#consensus-thread-lifecycle.md)\n- [Consensus Thread Setup](#consensus-thread-setup.md)\n- [Consensus Initialization Flow](#consensus-initialization-flow.md)\n- [Resource Budgets](#resource-budgets.md)\n- [Telemetry and Monitoring](#telemetry-and-monitoring.md)\n- [Lifecycle Management](#lifecycle-management.md)\n- [Summary: Complete Initialization Flow](#summary-complete-initialization-flow.md)",
      "index": 11,
      "token_count": 94,
      "metadata": {
        "title": "_qdrant_qdrant_2.1-application-initialization-and-runtime",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "file_name": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.713261",
        "total_chunks": 12
      },
      "start_char": 21214,
      "end_char": 23262
    },
    {
      "content": "Collections and Table of Content | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 0,
      "end_char": 2046
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Collections and Table of Content\n\nRelevant source files\n\n- [lib/collection/benches/batch\\_query\\_bench.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_query_bench.rs)\n- [lib/collection/benches/batch\\_search\\_bench.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_search_bench.rs)\n- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)",
      "index": 1,
      "token_count": 642,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 1946,
      "end_char": 3973
    },
    {
      "content": ".rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/collection/src/tests/snapshot\\_test.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/tests/snapshot_test.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n\n## Purpose and Scope\n\nThis page describes the **TableOfContent** component and **Collection** abstraction, which together form the collection management layer in Qdrant. The TableOfContent (TOC) is the central registry that manages all collections in the system, while each Collection is a logical container for vector data, managing its configuration, shards, and operations.\n\nThis page covers:\n\n- TableOfContent structure and responsibilities\n- Collection abstraction and lifecycle\n- Collection meta-operations (create, update, delete, aliases)\n- Configuration management and persistence\n\nFor shard-level architecture and replica coordination, see [2.3](qdrant/qdrant/2.3-shards-and-replica-sets.md). For consensus-based operations in distributed mode, see [7.1](qdrant/qdrant/7.1-raft-consensus-protocol.md). For API endpoints that trigger these operations, see [9](qdrant/qdrant/9-api-reference.md).\n\n## TableOfContent Component\n\nThe **TableOfContent** is the top-level management component that maintains a registry of all collections in the Qdrant instance. It acts as the entry point for all collection-level operations and orchestrates collection lifecycle management.\n\n### Core Responsibilities\n\n| Responsibility           | Description                                                                       |",
      "index": 2,
      "token_count": 487,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 3873,
      "end_char": 5894
    },
    {
      "content": "ity           | Description                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------- |\n| Collection Registry      | Maintains in-memory map of collection name → `Collection` instance                |\n| Meta-Operation Handling  | Processes `CollectionMetaOperations` for creating, updating, deleting collections |\n| Alias Management         | Manages collection aliases for logical naming                                     |\n| Persistence Coordination | Ensures collection configurations are saved to disk                               |\n| Consensus Integration    | In distributed mode, applies operations from Raft consensus                       |\n\n### TableOfContent in System Architecture\n\n```\n```\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs1-262](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L1-L262)\n\n### Collection Meta-Operations\n\nThe TOC processes `CollectionMetaOperations`, which are the only operations that modify collection structure and configuration. These operations flow through consensus in distributed mode.\n\n```\n```\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs38-123](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L38-L123)\n\n## Collection Abstraction\n\nThe **Collection** struct represents a single named collection and encapsulates all collection-level state, configuration, and operations. It manages shards, handles updates and queries, and maintains collection metadata.\n\n### Collection Structure\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/mod.rs62-94](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L62-L94)\n\n### Key Collection Fields\n\n| Field                    | Type                                    | Purpose                                      |",
      "index": 3,
      "token_count": 404,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 5794,
      "end_char": 7835
    },
    {
      "content": "| Type                                    | Purpose                                      |\n| ------------------------ | --------------------------------------- | -------------------------------------------- |\n| `id`                     | `CollectionId`                          | Unique collection name                       |\n| `shards_holder`          | `Arc<LockedShardHolder>`                | Manages all shards and their replica sets    |\n| `collection_config`      | `Arc<RwLock<CollectionConfigInternal>>` | Collection parameters and configuration      |\n| `payload_index_schema`   | `Arc<SaveOnDisk<PayloadIndexSchema>>`   | Schema for payload field indices             |\n| `transfer_tasks`         | `Mutex<TransferTasksPool>`              | Active shard transfer tasks                  |\n| `is_initialized`         | `Arc<IsReady>`                          | Flag set when all shards are first activated |\n| `updates_lock`           | `Arc<RwLock<()>>`                       | Prevents updates during migration operations |\n| `collection_stats_cache` | `CollectionSizeStatsCache`              | Cached collection size statistics            |\n\n**Sources:** [lib/collection/src/collection/mod.rs62-94](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L62-L94)\n\n## Collection Lifecycle\n\nCollections have a well-defined lifecycle managed by the TableOfContent component.\n\n### Collection Creation Flow\n\n```\n```\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs39-69](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L39-L69) [lib/collection/src/collection/mod.rs103-200](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L103-L200)\n\n### Collection Loading Flow\n\nOn startup, collections are loaded from disk:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/mod.rs203-316](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.",
      "index": 4,
      "token_count": 476,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 7735,
      "end_char": 9761
    },
    {
      "content": "ion/mod.rs203-316](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L203-L316) [lib/collection/src/shards/replica\\_set/mod.rs238-382](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L238-L382)\n\n### Version Compatibility\n\nCollections enforce version compatibility to ensure safe upgrades:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/mod.rs318-339](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L318-L339)\n\n### Collection Deletion Flow\n\n```\n```\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs189-262](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L189-L262)\n\n## Collection Configuration\n\nEach collection is configured via `CollectionConfigInternal`, which contains all parameters that define the collection's behavior.\n\n### Configuration Components\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/mod.rs65](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L65-L65) [lib/collection/benches/batch\\_search\\_bench.rs66-90](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_search_bench.rs#L66-L90)\n\n### Configuration Updates\n\nCollections support dynamic configuration updates via `UpdateCollectionOperation`:\n\n```\n```\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs125-187](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L125-L187) [lib/collection/src/collection/collection\\_ops.rs31-204](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs#L31-L204)\n\n## Collection State and Operations\n\n### Collection State Structure\n\nThe `Collection::state()` method returns a complete snapshot of the collection's current state:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/mod.rs544-564](https://github.",
      "index": 5,
      "token_count": 615,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 9661,
      "end_char": 11669
    },
    {
      "content": "current state:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/mod.rs544-564](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L544-L564)\n\n### Collection Info Retrieval\n\nThe `Collection::info()` method aggregates information from all shards:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/collection\\_ops.rs301-340](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs#L301-L340)\n\n### Cluster Information\n\nFor distributed deployments, `Collection::cluster_info()` provides per-peer shard distribution:\n\n| Info Type               | Contents                                                                              |\n| ----------------------- | ------------------------------------------------------------------------------------- |\n| `local_shards`          | Shards with local replicas on this peer (shard\\_id, points\\_count, state, shard\\_key) |\n| `remote_shards`         | Remote shard replicas on other peers (shard\\_id, peer\\_id, state, shard\\_key)         |\n| `shard_transfers`       | Active shard transfer operations                                                      |\n| `resharding_operations` | Active resharding operations                                                          |\n\n**Sources:** [lib/collection/src/collection/collection\\_ops.rs342-409](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs#L342-L409)\n\n## Alias Management\n\nThe TableOfContent manages collection aliases, providing logical names for collections:\n\n```\n```\n\nThe alias operations are atomic - all aliases in a `ChangeAliasesOperation` are applied together while holding both collection and alias write locks, preventing partial updates and race conditions.\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs264-304](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L264-L304)\n\n## Collection Persistence",
      "index": 6,
      "token_count": 472,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 11569,
      "end_char": 13585
    },
    {
      "content": "1/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L264-L304)\n\n## Collection Persistence\n\nCollections persist their state across multiple files and directories:\n\n```\nstorage_path/\n└── collections/\n    └── {collection_name}/\n        ├── collection_config.json      # CollectionConfigInternal\n        ├── .collection_version          # Version marker\n        ├── payload_index_schema.json   # PayloadIndexSchema\n        ├── shard_key_mapping.json      # ShardKeyMapping (if custom sharding)\n        └── shards/\n            ├── {shard_id}/\n            │   ├── replica_state.json   # ReplicaSetState\n            │   ├── shard_config.json    # ShardConfig\n            │   ├── segments/            # Segment data (see 2.5)\n            │   └── wal/                 # Write-Ahead Log\n            └── ...\n```\n\nEach component saves independently using `SaveOnDisk` wrapper, which provides atomic updates via rename operations.\n\n**Sources:** [lib/collection/src/collection/mod.rs103-200](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L103-L200) [lib/collection/src/shards/replica\\_set/mod.rs128-230](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L128-L230)\n\n## Collection Initialization States\n\nCollections track initialization via the `is_initialized` flag, which is set when all shards reach an active state for the first time:\n\n```\n```\n\nThis flag ensures that the collection is fully operational before serving production traffic. It accounts for:\n\n- Initial shard creation in distributed mode\n- Shard transfers completing\n- Recovery from failures\n\n**Sources:** [lib/collection/src/collection/mod.rs486-509](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L486-L509)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Collections and Table of Content](#collections-and-table-of-content.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [TableOfContent Component](#tableofcontent-component.md)",
      "index": 7,
      "token_count": 513,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 13485,
      "end_char": 15524
    },
    {
      "content": "urpose and Scope](#purpose-and-scope.md)\n- [TableOfContent Component](#tableofcontent-component.md)\n- [Core Responsibilities](#core-responsibilities.md)\n- [TableOfContent in System Architecture](#tableofcontent-in-system-architecture.md)\n- [Collection Meta-Operations](#collection-meta-operations.md)\n- [Collection Abstraction](#collection-abstraction.md)\n- [Collection Structure](#collection-structure.md)\n- [Key Collection Fields](#key-collection-fields.md)\n- [Collection Lifecycle](#collection-lifecycle.md)\n- [Collection Creation Flow](#collection-creation-flow.md)\n- [Collection Loading Flow](#collection-loading-flow.md)\n- [Version Compatibility](#version-compatibility.md)\n- [Collection Deletion Flow](#collection-deletion-flow.md)\n- [Collection Configuration](#collection-configuration.md)\n- [Configuration Components](#configuration-components.md)\n- [Configuration Updates](#configuration-updates.md)\n- [Collection State and Operations](#collection-state-and-operations.md)\n- [Collection State Structure](#collection-state-structure.md)\n- [Collection Info Retrieval](#collection-info-retrieval.md)\n- [Cluster Information](#cluster-information.md)\n- [Alias Management](#alias-management.md)\n- [Collection Persistence](#collection-persistence.md)\n- [Collection Initialization States](#collection-initialization-states.md)",
      "index": 8,
      "token_count": 285,
      "metadata": {
        "title": "_qdrant_qdrant_2.2-collections-and-table-of-content",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "file_name": "_qdrant_qdrant_2.2-collections-and-table-of-content.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.851889",
        "total_chunks": 9
      },
      "start_char": 15424,
      "end_char": 17472
    },
    {
      "content": "Shards and Replica Sets | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 0,
      "end_char": 2037
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Shards and Replica Sets\n\nRelevant source files\n\n- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)",
      "index": 1,
      "token_count": 642,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 1937,
      "end_char": 3961
    },
    {
      "content": "rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n\n## Purpose and Scope\n\nThis document describes the `ShardReplicaSet` abstraction, which coordinates replicas of a single shard across multiple peers in a Qdrant cluster. It covers replica state management, write ordering guarantees, local vs remote shard coordination, and consistency mechanisms.\n\nFor information about the internal implementation of local shards (segments, WAL, optimization), see [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md). For information about collection-level shard distribution and routing, see [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md). For information about shard transfer operations and resharding, see [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md).\n\n---\n\n## Core Abstraction\n\n### ShardReplicaSet Structure\n\nThe `ShardReplicaSet` is the primary abstraction for managing a set of replicas for a single shard. It handles both local replicas (hosted on the current peer) and remote replicas (proxies to other peers), ensuring consistency across all replicas.\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs84-119](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L84-L119)\n\nThe `ShardReplicaSet` struct contains:\n\n| Field                    | Type                               | Purpose                                                 |\n| ------------------------ | ---------------------------------- | ------------------------------------------------------- |\n| `local`                  | `RwLock<Option<Shard>>`            | Local shard variant (Local, Dummy, QueueProxy, or None) |",
      "index": 2,
      "token_count": 456,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 3861,
      "end_char": 5827
    },
    {
      "content": "| `RwLock<Option<Shard>>`            | Local shard variant (Local, Dummy, QueueProxy, or None) |\n| `remotes`                | `RwLock<Vec<RemoteShard>>`         | Remote shard proxies to other peers                     |\n| `replica_state`          | `Arc<SaveOnDisk<ReplicaSetState>>` | Persisted replica state for all peers                   |\n| `locally_disabled_peers` | `Registry`                         | Peers marked as failed locally, pending consensus       |\n| `shard_id`               | `ShardId`                          | Unique identifier for this shard                        |\n| `shard_key`              | `Option<ShardKey>`                 | Optional shard key for custom sharding                  |\n| `write_ordering_lock`    | `Mutex<()>`                        | Serialization lock for strong/medium ordering           |\n| `clock_set`              | `Mutex<ClockSet>`                  | Local clock for tagging operations                      |\n| `write_rate_limiter`     | `Option<RateLimiter>`              | Optional rate limiting for strict mode                  |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs90-119](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L90-L119)\n\n### Local vs Remote Shards\n\nThe replica set distinguishes between local and remote shards:\n\n```\n```\n\n**Local Shard Variants:**\n\n- **`Shard::Local(LocalShard)`**: Fully functional local shard with segments, WAL, and indices\n- **`Shard::Dummy(DummyShard)`**: Placeholder when in recovery mode or after load failure\n- **`Shard::QueueProxy`**: Temporary proxy during snapshot creation, queues updates\n\n**Remote Shards:**\n\n- **`RemoteShard`**: Proxy that forwards operations to other peers via internal gRPC\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs91-92](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L91-L92) [lib/collection/src/shards/replica\\_set/mod.rs400-413](https://github.",
      "index": 3,
      "token_count": 508,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 5727,
      "end_char": 7731
    },
    {
      "content": "s/replica_set/mod.rs#L91-L92) [lib/collection/src/shards/replica\\_set/mod.rs400-413](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L400-L413)\n\n---\n\n## Replica State Management\n\n### Replica States\n\nEach replica in a `ShardReplicaSet` has a state that determines how it participates in read and write operations:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs48-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L48-L82)\n\n| State                 | Description                               | Accepts Updates    | Serves Reads |\n| --------------------- | ----------------------------------------- | ------------------ | ------------ |\n| `Active`              | Fully operational replica                 | Yes                | Yes          |\n| `Dead`                | Failed or unavailable replica             | No                 | No           |\n| `Initializing`        | Newly created, not yet activated          | Yes                | No           |\n| `Listener`            | Read-only replica on listener node        | Yes (async)        | Yes          |\n| `Partial`             | Receiving shard transfer (stream records) | Yes                | No           |\n| `Recovery`            | Receiving snapshot/WAL delta transfer     | No (unless forced) | No           |\n| `PartialSnapshot`     | Creating snapshot for transfer            | No (unless forced) | No           |\n| `Resharding`          | Participating in scale-up resharding      | Yes                | Yes          |\n| `ReshardingScaleDown` | Participating in scale-down resharding    | Yes                | Yes          |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs58-103](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L58-L103) [lib/collection/src/shards/replica\\_set/update.rs570-586](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L570-L586)",
      "index": 4,
      "token_count": 533,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 7631,
      "end_char": 9673
    },
    {
      "content": "/github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L570-L586)\n\n### ReplicaSetState Persistence\n\nThe `ReplicaSetState` is persisted to disk in `replica_state.json` and contains:\n\n```\n```\n\nThis state is loaded on startup and updated through consensus operations.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs125](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L125-L125) [lib/collection/src/shards/replica\\_set/mod.rs169-182](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L169-L182)\n\n### Locally Disabled Peers\n\nWhen a replica fails an operation, it is immediately marked as \"locally disabled\" to prevent further requests until consensus confirms the state change:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs94-98](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L94-L98) [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L872-L896)\n\nThe locally disabled registry uses exponential backoff to avoid spamming consensus with failure notifications:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/locally\\_disabled\\_peers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/locally_disabled_peers.rs) (implied from usage)\n\n---\n\n## Write Coordination and Consistency\n\n### WriteOrdering Levels\n\nThe replica set supports three levels of write ordering, each providing different consistency guarantees:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs168-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L168-L190)\n\nThe `write_ordering_lock` ensures that Strong and Medium ordering requests are serialized:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs137-142](https://github.",
      "index": 5,
      "token_count": 610,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 9573,
      "end_char": 11585
    },
    {
      "content": "serialized:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs137-142](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L137-L142)\n\n### Clock-Based Consistency\n\nEach update operation is tagged with a logical clock to establish causality:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs111-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L111-L166) [lib/collection/src/shards/replica\\_set/update.rs256-397](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L256-L397)\n\n**Clock Tag Structure:**\n\n```\n```\n\nIf a replica echoes a newer tick, the local clock advances to maintain consistency:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs368-396](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L368-L396)\n\n### Update Flow with Retry Logic\n\nOperations may be rejected if the clock is outdated. The replica set retries with a new clock:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs17-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L17-L20) [lib/collection/src/shards/replica\\_set/update.rs195-251](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L195-L251)\n\n### Write Consistency Factor\n\nThe replica set requires a minimum number of successful replicas based on `write_consistency_factor`:\n\n```\n```\n\nIf insufficient replicas succeed, the operation fails. Failed replicas are marked as locally disabled:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs355-365](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L355-L365) [lib/collection/src/shards/replica\\_set/update.rs432-510](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L432-L510)\n\n### Handling Failed Replicas",
      "index": 6,
      "token_count": 657,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 11485,
      "end_char": 13528
    },
    {
      "content": "/48203e41/lib/collection/src/shards/replica_set/update.rs#L432-L510)\n\n### Handling Failed Replicas\n\nWhen replicas fail during an update:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs409-511](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L409-L511) [lib/collection/src/shards/replica\\_set/update.rs597-662](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L597-L662)\n\n**Special Cases:**\n\n- **Listener replicas**: Failures are ignored\n- **Partial/Recovery replicas**: Pre-condition failures and missing point errors are ignored (transfer in progress)\n- **Resharding replicas**: Always deactivated on failure if not enough successes\n- **Initializing replicas**: Always trigger deactivation wait\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs610-646](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L610-L646)\n\n---\n\n## Read Operations\n\n### Shard Selection for Queries\n\nRead operations prefer local shards for performance:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/execute\\_read\\_operation.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/execute_read_operation.rs) (implied from replica\\_set structure)\n\nThe methods `peer_is_active()` and `is_locally_disabled()` determine which replicas can serve reads:\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs1007-1018](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L1007-L1018)\n\n---\n\n## Shard Transfer Integration\n\n### Transfer Lifecycle in Replica Set\n\nShard transfers change replica states throughout their lifecycle:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs36-141](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L36-L141) [lib/collection/src/collection/shard\\_transfer.rs195-300](https://github.",
      "index": 7,
      "token_count": 605,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 13428,
      "end_char": 15452
    },
    {
      "content": "hard_transfer.rs#L36-L141) [lib/collection/src/collection/shard\\_transfer.rs195-300](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L195-L300)\n\n### Transfer Method and Initial State\n\nDifferent transfer methods set different initial states:\n\n| Transfer Method           | Initial Replica State                 | Accepts Updates During Transfer |\n| ------------------------- | ------------------------------------- | ------------------------------- |\n| `StreamRecords`           | `Partial`                             | Yes                             |\n| `Snapshot`                | `Recovery`                            | No (unless forced)              |\n| `WalDelta`                | `Recovery`                            | No (unless forced)              |\n| `ReshardingStreamRecords` | `Resharding` or `ReshardingScaleDown` | Yes                             |\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs82-103](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L82-L103)\n\n### Transfer Abortion\n\nWhen a transfer is aborted:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs303-361](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L303-L361)\n\n---\n\n## Key Methods and Operations\n\n### Building a Replica Set\n\n```\nShardReplicaSet::build(\n    shard_id,\n    shard_key,\n    collection_id,\n    this_peer_id,\n    local: bool,\n    remotes: HashSet<PeerId>,\n    on_peer_failure: Callback,\n    abort_shard_transfer: Callback,\n    ...\n) -> CollectionResult<ShardReplicaSet>\n```\n\nCreates a new replica set with initial state. If `local=true`, builds a `LocalShard`.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs127-230](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L127-L230)\n\n### Loading a Replica Set\n\n```\nShardReplicaSet::load(\n    shard_id,\n    shard_key,\n    collection_id,\n    shard_path,",
      "index": 8,
      "token_count": 536,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 15352,
      "end_char": 17382
    },
    {
      "content": "ica Set\n\n```\nShardReplicaSet::load(\n    shard_id,\n    shard_key,\n    collection_id,\n    shard_path,\n    is_dirty_shard: bool,\n    ...\n) -> ShardReplicaSet\n```\n\nLoads an existing replica set from disk. Handles recovery mode and dirty shards by creating dummy shards.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs232-382](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L232-L382)\n\n### State Management\n\n| Method                                     | Purpose                                                      |\n| ------------------------------------------ | ------------------------------------------------------------ |\n| `set_replica_state(peer_id, state)`        | Updates replica state and persists to disk                   |\n| `peer_state(peer_id)`                      | Gets current state of a peer                                 |\n| `peers()`                                  | Returns all peers and their states                           |\n| `active_remote_shards()`                   | Returns active remote peer IDs (excludes local and disabled) |\n| `is_last_source_of_truth_replica(peer_id)` | Checks if replica is the only active source                  |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs415-469](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L415-L469) [lib/collection/src/shards/replica\\_set/mod.rs695-711](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L695-L711)\n\n### Replica Management\n\n| Method                                      | Purpose                                 |\n| ------------------------------------------- | --------------------------------------- |\n| `add_remote(peer_id, state)`                | Adds a new remote replica               |\n| `remove_remote(peer_id)`                    | Removes a remote replica                |\n| `set_local(shard, state)`                   | Sets or replaces local shard            |",
      "index": 9,
      "token_count": 450,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 17282,
      "end_char": 19318
    },
    {
      "content": "|\n| `set_local(shard, state)`                   | Sets or replaces local shard            |\n| `remove_local()`                            | Removes local shard and clears data     |\n| `ensure_replica_with_state(peer_id, state)` | Ensures replica exists with given state |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs598-693](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L598-L693)\n\n### Waiting for States\n\n```\nwait_for_local_state(state, timeout) -> CollectionResult<()>\nwait_for_state(peer_id, state, timeout) -> Future<CollectionResult<()>>\n```\n\nThese methods block until a replica reaches the desired state or timeout occurs. Used during transfer operations.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs474-559](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L474-L559)\n\n---\n\n## Integration with Collection\n\nThe `Collection` uses `ShardHolder` to manage multiple `ShardReplicaSet` instances:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/mod.rs62-94](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L62-L94)\n\n### Applying State from Consensus\n\nWhen consensus updates the cluster state:\n\n```\ncollection.set_shard_replica_state(\n    shard_id,\n    peer_id,\n    new_state,\n    from_state: Option<ReplicaState>\n) -> CollectionResult<()>\n```\n\nThis method:\n\n1. Validates peer exists and `from_state` matches current state\n2. Prevents deactivating last active replica\n3. Updates replica state via `ensure_replica_with_state()`\n4. Aborts transfers if replica becomes `Dead`\n5. Triggers collection initialization check\n\n**Sources:** [lib/collection/src/collection/mod.rs386-512](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L386-L512)\n\n### Syncing Local State to Consensus\n\n```\ncollection.sync_local_state(...) -> CollectionResult<()>\n```\n\nPeriodically called to:\n\n1. Check for locally disabled replicas and report to consensus\n2.",
      "index": 10,
      "token_count": 549,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 19218,
      "end_char": 21256
    },
    {
      "content": "<()>\n```\n\nPeriodically called to:\n\n1. Check for locally disabled replicas and report to consensus\n2. Verify transfer task states match consensus\n3. Auto-recover `Dead` replicas by requesting transfers\n4. Convert replicas to/from `Listener` state based on node type\n\n**Sources:** [lib/collection/src/collection/mod.rs595-777](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L595-L777)\n\n---\n\n## Summary\n\nThe `ShardReplicaSet` is the core abstraction for managing replica consistency in Qdrant:\n\n- **Coordinates local and remote shards** across multiple peers\n- **Manages replica states** through a persisted state machine\n- **Provides write ordering guarantees** (Weak, Medium, Strong) via leader selection and serialization\n- **Uses logical clocks** to establish causality and detect outdated operations\n- **Handles replica failures** with locally disabled peers and consensus notification\n- **Integrates with shard transfers** to support data migration and recovery\n- **Prefers local shards** for read operations to minimize latency\n- **Enforces write consistency factor** to ensure sufficient replica agreement\n\nAll state changes are coordinated through the consensus layer (Raft), ensuring cluster-wide consistency while allowing optimistic local operations for performance.\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Shards and Replica Sets](#shards-and-replica-sets.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Core Abstraction](#core-abstraction.md)\n- [ShardReplicaSet Structure](#shardreplicaset-structure.md)\n- [Local vs Remote Shards](#local-vs-remote-shards.md)\n- [Replica State Management](#replica-state-management.md)\n- [Replica States](#replica-states.md)\n- [ReplicaSetState Persistence](#replicasetstate-persistence.md)\n- [Locally Disabled Peers](#locally-disabled-peers.md)\n- [Write Coordination and Consistency](#write-coordination-and-consistency.md)\n- [WriteOrdering Levels](#writeordering-levels.md)\n- [Clock-Based Consistency](#clock-based-consistency.",
      "index": 11,
      "token_count": 484,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 21156,
      "end_char": 23202
    },
    {
      "content": "riteOrdering Levels](#writeordering-levels.md)\n- [Clock-Based Consistency](#clock-based-consistency.md)\n- [Update Flow with Retry Logic](#update-flow-with-retry-logic.md)\n- [Write Consistency Factor](#write-consistency-factor.md)\n- [Handling Failed Replicas](#handling-failed-replicas.md)\n- [Read Operations](#read-operations.md)\n- [Shard Selection for Queries](#shard-selection-for-queries.md)\n- [Shard Transfer Integration](#shard-transfer-integration.md)\n- [Transfer Lifecycle in Replica Set](#transfer-lifecycle-in-replica-set.md)\n- [Transfer Method and Initial State](#transfer-method-and-initial-state.md)\n- [Transfer Abortion](#transfer-abortion.md)\n- [Key Methods and Operations](#key-methods-and-operations.md)\n- [Building a Replica Set](#building-a-replica-set.md)\n- [Loading a Replica Set](#loading-a-replica-set.md)\n- [State Management](#state-management.md)\n- [Replica Management](#replica-management.md)\n- [Waiting for States](#waiting-for-states.md)\n- [Integration with Collection](#integration-with-collection.md)\n- [Applying State from Consensus](#applying-state-from-consensus.md)\n- [Syncing Local State to Consensus](#syncing-local-state-to-consensus.md)\n- [Summary](#summary.md)",
      "index": 12,
      "token_count": 303,
      "metadata": {
        "title": "_qdrant_qdrant_2.3-shards-and-replica-sets",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "file_name": "_qdrant_qdrant_2.3-shards-and-replica-sets.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.877766",
        "total_chunks": 13
      },
      "start_char": 23102,
      "end_char": 25150
    },
    {
      "content": "Local Shard Architecture | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 0,
      "end_char": 2038
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Local Shard Architecture\n\nRelevant source files\n\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n- [lib/collection/src/shards/local\\_shard/scroll.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot\\_tests.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.",
      "index": 1,
      "token_count": 629,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 1938,
      "end_char": 3942
    },
    {
      "content": "/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n\n## Purpose and Scope\n\nThis document describes the internal architecture of `LocalShard`, which is the fundamental data storage and processing unit in Qdrant. A `LocalShard` encapsulates all components necessary for storing and indexing vector data on a single node, including segments, WAL (Write-Ahead Log), background optimization workers, and update coordination mechanisms.\n\nFor information about how multiple shards are coordinated across replicas, see [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md). For details about segment internals and construction, see [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md). For distributed operations like shard transfers, see [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md).\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs84-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L84-L124)\n\n---\n\n## Core Components Overview\n\nA `LocalShard` is composed of several interacting subsystems:\n\n| Component               | Type                                         | Purpose                                                        |\n| ----------------------- | -------------------------------------------- | -------------------------------------------------------------- |\n| `segments`              | `LockedSegmentHolder`                        | Container managing all segments in the shard                   |\n| `wal`                   | `RecoverableWal`                             | Write-ahead log for durability and recovery                    |\n| `update_handler`        | `Arc<Mutex<UpdateHandler>>`                  | Coordinates background workers for optimization and flushing   |",
      "index": 2,
      "token_count": 408,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 3842,
      "end_char": 5805
    },
    {
      "content": "pdateHandler>>`                  | Coordinates background workers for optimization and flushing   |\n| `update_sender`         | `ArcSwap<Sender<UpdateSignal>>`              | Channel for sending update signals to workers                  |\n| `update_tracker`        | `UpdateTracker`                              | Tracks ongoing update operations                               |\n| `optimizers`            | `Arc<Vec<Arc<Optimizer>>>`                   | Collection of segment optimization strategies                  |\n| `payload_index_schema`  | `Arc<SaveOnDisk<PayloadIndexSchema>>`        | Schema for payload field indices                               |\n| `collection_config`     | `Arc<TokioRwLock<CollectionConfigInternal>>` | Collection configuration                                       |\n| `update_operation_lock` | `Arc<tokio::sync::RwLock<()>>`               | Prevents updates during critical operations (scroll, snapshot) |\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs89-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L89-L124)\n\n---\n\n## LocalShard Internal Architecture\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs89-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L89-L124) [lib/collection/src/update\\_handler.rs92-144](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L92-L144)\n\n---\n\n## Initialization and Loading\n\n### Building a New LocalShard\n\nWhen creating a new `LocalShard` from scratch, the `build()` method performs the following steps:\n\n```\n```\n\nThe number of initial segments is determined by `optimizer_config.get_number_segments()`. Each segment is built in parallel using dedicated threads to speed up initialization.\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs503-606](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L503-L606)\n\n### Loading an Existing LocalShard",
      "index": 3,
      "token_count": 512,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 5705,
      "end_char": 7737
    },
    {
      "content": "203e41/lib/collection/src/shards/local_shard/mod.rs#L503-L606)\n\n### Loading an Existing LocalShard\n\nRecovery from disk follows a different path:\n\n```\n```\n\nKey aspects:\n\n- Segments are loaded in parallel (up to `MAX_CONCURRENT_SEGMENT_LOADS = 10`)\n- Consistency checks and repairs are performed on each segment\n- Deduplication removes any duplicate point IDs across segments\n- WAL operations are replayed sequentially to restore the latest state\n- A final flush ensures on-disk consistency\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs270-456](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L270-L456) [lib/collection/src/shards/local\\_shard/mod.rs618-736](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L618-L736)\n\n---\n\n## UpdateHandler and Background Workers\n\nThe `UpdateHandler` manages three concurrent background workers that handle different aspects of shard maintenance:\n\n### Worker Architecture\n\n```\n```\n\n**Sources:** [lib/collection/src/update\\_handler.rs92-144](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L92-L144) [lib/collection/src/update\\_handler.rs193-252](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L193-L252)\n\n### Update Worker\n\nThe **update worker** runs on a blocking thread and processes incoming update operations:\n\n1. Receives `UpdateSignal` messages from the update queue\n2. Acquires the `update_operation_lock` (write lock) to prevent conflicts with scrolls/snapshots\n3. Writes operations to the WAL for durability\n4. Applies operations to segments via `CollectionUpdater::update()`\n5. Signals the optimizer worker after each operation\n6. Handles recovery by re-applying failed operations\n\n**Signal Types:**\n\n- `UpdateSignal::Operation(OperationData)` - Apply a collection update operation\n- `UpdateSignal::Stop` - Gracefully stop the worker\n- `UpdateSignal::Nop` - Trigger optimizers without performing an operation",
      "index": 4,
      "token_count": 544,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 7637,
      "end_char": 9664
    },
    {
      "content": "acefully stop the worker\n- `UpdateSignal::Nop` - Trigger optimizers without performing an operation\n- `UpdateSignal::Plunger(oneshot::Sender)` - Wait for all previous updates to complete\n\n**Sources:** [lib/collection/src/update\\_handler.rs67-78](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L67-L78) [lib/collection/src/update\\_handler.rs218-228](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L218-L228)\n\n### Optimizer Worker\n\nThe **optimizer worker** runs as an async task and manages segment optimization:\n\n1. Receives `OptimizerSignal` messages\n2. Checks optimizer conditions to identify non-optimal segments\n3. Launches optimization tasks up to `max_optimization_threads` limit\n4. Manages CPU/IO resource budgets for optimization tasks\n5. Cleans up finished optimization handles every `OPTIMIZER_CLEANUP_INTERVAL` (5 seconds)\n6. Ensures at least one appendable segment with capacity exists\n\nEach optimization task:\n\n- Acquires a resource permit (IO threads for HNSW indexing)\n- Runs the optimizer on specified segments\n- Reports status via `Tracker` in `optimizers_log`\n- Releases the resource permit on completion\n- Triggers another optimizer check via callback\n\n**Sources:** [lib/collection/src/update\\_handler.rs620-753](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L620-L753) [lib/collection/src/update\\_handler.rs324-484](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L324-L484)\n\n### Flush Worker\n\nThe **flush worker** runs on a blocking thread and periodically persists data:\n\n1. Wakes up every `flush_interval_sec` seconds\n2. Flushes all segments to disk\n3. Saves `LocalShardClocks` (newest/oldest clock maps)\n4. Truncates the WAL up to the minimum flushed operation number\n5. Respects `wal_keep_from` to prevent truncating operations still needed by other components\n\n**Sources:** [lib/collection/src/update\\_handler.rs238-249](https://github.",
      "index": 5,
      "token_count": 544,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 9564,
      "end_char": 11573
    },
    {
      "content": "ded by other components\n\n**Sources:** [lib/collection/src/update\\_handler.rs238-249](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L238-L249)\n\n### Worker Coordination\n\n```\n```\n\n**Sources:** [lib/collection/src/update\\_handler.rs193-252](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L193-L252)\n\n---\n\n## WAL and Clock Management\n\n### RecoverableWal Structure\n\nThe `RecoverableWal` wrapper extends the base `SerdeWal` with logical clock tracking:\n\n```\n```\n\n**Clock Management:**\n\n- `newest_clocks` tracks the highest clock tag received from each peer\n- `oldest_clocks` tracks the cutoff clock below which operations are guaranteed to be applied\n- Clock tags enable optimistic replication without consensus (see [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md))\n- Clock files are persisted alongside segments during flushes\n\n**Sources:** [lib/collection/src/wal\\_delta.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/wal_delta.rs) (referenced in mod.rs:95,249), [lib/collection/src/shards/local\\_shard/mod.rs76-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L76-L82)\n\n### WAL Recovery Process\n\nDuring `load_from_wal()`, operations are replayed to restore state:\n\n```\n```\n\nKey behaviors:\n\n- Operations are read from the first un-truncated WAL index\n- Clock tags are advanced for each operation\n- Transient errors (disk full, etc.) are tracked in `failed_operation` set for retry\n- Service errors (corrupted data) abort recovery\n- Other errors (NotFound) are logged but don't stop recovery\n- Final flush ensures on-disk consistency even if only past operations were re-applied\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs618-736](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L618-L736)\n\n---\n\n## Segment Operations and Locking\n\n### Update Operation Lock",
      "index": 6,
      "token_count": 563,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 11473,
      "end_char": 13475
    },
    {
      "content": "s/local_shard/mod.rs#L618-L736)\n\n---\n\n## Segment Operations and Locking\n\n### Update Operation Lock\n\nThe `update_operation_lock` is a critical synchronization primitive:\n\n```\n```\n\n**Purpose:**\n\n1. **Scroll consistency** - Prevents updates from modifying segments during scroll operations, ensuring consistent pagination for resharding and shard transfers\n2. **Snapshot integrity** - Prevents updates during segment proxy/unproxy operations\n3. **Read isolation** - Multiple reads can proceed concurrently (read locks are shared)\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs108-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L124) [lib/collection/src/shards/local\\_shard/scroll.rs156-213](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs#L156-L213) [lib/collection/src/collection\\_manager/collection\\_updater.rs42-78](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs#L42-L78)\n\n---\n\n## Snapshot Creation with Segment Proxying\n\nSnapshot creation uses a sophisticated proxying mechanism to allow writes during the long-running snapshot process:\n\n### Proxy Mechanism\n\n```\n```\n\n**Key Steps:**\n\n1. **Plunger signal** (if WAL not saved): Ensures all updates are flushed to segments before snapshotting\n2. **Proxy creation**: All segments wrapped in `ProxySegment` that redirects writes to temporary segment\n3. **Incremental unproxying**: Each segment unproxied immediately after snapshot to minimize temp segment growth\n4. **Atomic finalization**: Last proxy and temp segment promoted together to maintain consistency\n5. **Temp segment handling**: Added to collection if non-empty, otherwise deleted\n\n**Sources:** [lib/collection/src/shards/local\\_shard/snapshot.rs62-121](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L62-L121) [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.",
      "index": 7,
      "token_count": 538,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 13375,
      "end_char": 15395
    },
    {
      "content": "rd/snapshot.rs#L62-L121) [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L268-L352)\n\n### Proxy Segment Structure\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L268-L352)\n\n---\n\n## Disk Usage Monitoring\n\nThe `DiskUsageWatcher` component monitors shard disk usage and prevents excessive WAL growth:\n\n```\n```\n\nThe watcher uses a default threshold of `2 * wal_capacity_mb` to detect when the shard is using excessive disk space, which typically indicates the WAL has grown too large and needs truncation.\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs198-206](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L198-L206)\n\n---\n\n## LocalShard Lifecycle Operations\n\n### Graceful Shutdown\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs824-835](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L824-L835) [lib/collection/src/update\\_handler.rs254-290](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L254-L290)\n\n### Optimizer Configuration Update\n\nWhen optimizer configuration changes (e.g., flush interval, max optimization threads), the `UpdateHandler` must be restarted:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs767-795](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L767-L795)\n\n---\n\n## Data Consistency and Recovery\n\n### Failed Operation Tracking\n\nThe `SegmentHolder` maintains a `failed_operation` set containing operation numbers that failed with transient errors:\n\n```\n```\n\n**Transient vs Non-Transient Errors:**\n\n- **Transient:** Disk full, temporary I/O errors - will be retried\n- **Non-Transient:** Point not found, invalid operation - logged but not retried",
      "index": 8,
      "token_count": 602,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 15295,
      "end_char": 17330
    },
    {
      "content": "- will be retried\n- **Non-Transient:** Point not found, invalid operation - logged but not retried\n\n**Sources:** [lib/collection/src/collection\\_manager/collection\\_updater.rs17-40](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs#L17-L40) [lib/collection/src/update\\_handler.rs293-319](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L293-L319)\n\n### Data Consistency Check\n\nWhen the `data-consistency-check` feature is enabled, the shard performs deep consistency validation after WAL recovery:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs732-735](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L732-L735) [lib/collection/src/shards/local\\_shard/mod.rs741-765](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L741-L765)\n\n---\n\n## Shard Status and Health Monitoring\n\nThe `LocalShard` reports its health status based on various conditions:\n\n### Status Determination Logic\n\n```\n```\n\n**Status Meanings:**\n\n- **Red:** Failed operations or optimizer errors - shard is unhealthy\n- **Yellow:** Proxy segments present (snapshotting/optimizing) or pending optimizations\n- **Grey:** Suboptimal state but optimizers never triggered (prevents crash loop on startup)\n- **Green:** All operations successful and no pending optimizations\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs879-936](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L879-L936)\n\n---\n\n## File System Layout\n\nThe `LocalShard` uses a well-defined directory structure:\n\n```\n<shard_path>/\n├── wal/                      # Write-ahead log directory\n│   ├── 00000000000000000000  # WAL segment files\n│   └── 00000000000000000001\n├── segments/                 # Segment storage directory\n│   ├── <segment_id_1>/       # Individual segment directories\n│   ├── <segment_id_2>/\n│   └── ...\n├── newest_clocks.",
      "index": 9,
      "token_count": 613,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 17230,
      "end_char": 19249
    },
    {
      "content": "id_1>/       # Individual segment directories\n│   ├── <segment_id_2>/\n│   └── ...\n├── newest_clocks.json        # Highest clock tags from each peer\n└── oldest_clocks.json        # Cutoff clocks (guaranteed applied)\n```\n\n**Path Construction:**\n\n- `wal_path()` → `shard_path/wal`\n- `segments_path()` → `shard_path/segments`\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs76-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L76-L82) [lib/collection/src/shards/local\\_shard/mod.rs462-468](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L462-L468)\n\n---\n\n## Summary\n\nThe `LocalShard` is a sophisticated data management component that coordinates:\n\n1. **Durable storage** via WAL and segment persistence\n2. **Background optimization** through concurrent worker threads\n3. **Update consistency** using locks and logical clocks\n4. **Snapshot creation** with minimal write disruption via segment proxying\n5. **Health monitoring** and automatic recovery from transient failures\n\nKey design principles:\n\n- **Separation of concerns:** Update, optimization, and flush workers operate independently\n- **Non-blocking operations:** Segment proxying enables long operations without blocking writes\n- **Robust recovery:** WAL replay and failed operation tracking ensure data integrity\n- **Resource management:** Budget-based optimization prevents resource exhaustion\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs) [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Local Shard Architecture](#local-shard-architecture.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Core Components Overview](#core-components-overview.md)\n- [LocalShard Internal Architecture](#localshard-internal-architecture.md)",
      "index": 10,
      "token_count": 523,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 19149,
      "end_char": 21191
    },
    {
      "content": "-components-overview.md)\n- [LocalShard Internal Architecture](#localshard-internal-architecture.md)\n- [Initialization and Loading](#initialization-and-loading.md)\n- [Building a New LocalShard](#building-a-new-localshard.md)\n- [Loading an Existing LocalShard](#loading-an-existing-localshard.md)\n- [UpdateHandler and Background Workers](#updatehandler-and-background-workers.md)\n- [Worker Architecture](#worker-architecture.md)\n- [Update Worker](#update-worker.md)\n- [Optimizer Worker](#optimizer-worker.md)\n- [Flush Worker](#flush-worker.md)\n- [Worker Coordination](#worker-coordination.md)\n- [WAL and Clock Management](#wal-and-clock-management.md)\n- [RecoverableWal Structure](#recoverablewal-structure.md)\n- [WAL Recovery Process](#wal-recovery-process.md)\n- [Segment Operations and Locking](#segment-operations-and-locking.md)\n- [Update Operation Lock](#update-operation-lock.md)\n- [Snapshot Creation with Segment Proxying](#snapshot-creation-with-segment-proxying.md)\n- [Proxy Mechanism](#proxy-mechanism.md)\n- [Proxy Segment Structure](#proxy-segment-structure.md)\n- [Disk Usage Monitoring](#disk-usage-monitoring.md)\n- [LocalShard Lifecycle Operations](#localshard-lifecycle-operations.md)\n- [Graceful Shutdown](#graceful-shutdown.md)\n- [Optimizer Configuration Update](#optimizer-configuration-update.md)\n- [Data Consistency and Recovery](#data-consistency-and-recovery.md)\n- [Failed Operation Tracking](#failed-operation-tracking.md)\n- [Data Consistency Check](#data-consistency-check.md)\n- [Shard Status and Health Monitoring](#shard-status-and-health-monitoring.md)\n- [Status Determination Logic](#status-determination-logic.md)\n- [File System Layout](#file-system-layout.md)\n- [Summary](#summary.md)",
      "index": 11,
      "token_count": 418,
      "metadata": {
        "title": "_qdrant_qdrant_2.4-local-shard-architecture",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.4-local-shard-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "file_name": "_qdrant_qdrant_2.4-local-shard-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.902540",
        "total_chunks": 12
      },
      "start_char": 21091,
      "end_char": 23139
    },
    {
      "content": "Segment Lifecycle and Construction | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 626,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 0,
      "end_char": 2048
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Segment Lifecycle and Construction\n\nRelevant source files\n\n- [lib/segment/src/entry/entry\\_point.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/entry/entry_point.rs)\n- [lib/segment/src/fixtures/index\\_fixtures.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/fixtures/index_fixtures.rs)\n- [lib/segment/src/segment\\_constructor/segment\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs)\n- [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs)\n- [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs)",
      "index": 1,
      "token_count": 601,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 1948,
      "end_char": 3897
    },
    {
      "content": "ps://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs)\n\nThis page explains the structure, lifecycle, and construction of Segments, which are the fundamental data units in Qdrant that store vectors, payloads, and indices. This document covers segment types, component composition, creation/loading processes, and the SegmentBuilder optimization workflow.\n\nFor information about how LocalShard manages segments and triggers optimization, see [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md). For details on specific index implementations, see [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md) and [Field Index Types](qdrant/qdrant/4.1-field-index-types.md).\n\n## Segment Overview\n\nA Segment is a self-contained unit that stores:\n\n- Vector data (dense, sparse, or multi-dense vectors)\n- Payload data (JSON payloads associated with points)\n- Vector indices (HNSW, Plain, or Sparse indices)\n- Payload indices (field-specific indices for filtering)\n- ID mappings (external point IDs to internal offsets)\n- Version information for each point\n\nEach segment operates independently with its own storage files and can be of two types: **Plain** (unindexed) or **Indexed** (with vector indices built).\n\n**Sources:** [lib/segment/src/entry/entry\\_point.rs26-357](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/entry/entry_point.rs#L26-L357)\n\n## Segment Types\n\n```\n```\n\nThe segment type is determined by the configuration:\n\n- **Plain**: `segment_config.is_any_vector_indexed()` returns false\n- **Indexed**: `segment_config.is_any_vector_indexed()` returns true\n\nThe appendable flag determines whether the segment can accept new writes:\n\n- **Appendable segments** use `MutableIdTracker` and accept insertions\n- **Immutable segments** use `ImmutableIdTracker` for better memory efficiency\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs603-607](https://github.",
      "index": 2,
      "token_count": 474,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 3797,
      "end_char": 5785
    },
    {
      "content": "urces:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs603-607](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L603-L607) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs454-457](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L454-L457)\n\n## Segment Component Composition\n\nA Segment is composed of multiple storage and indexing components:\n\n```\n```\n\nEach component is wrapped in `Arc<AtomicRefCell<T>>` to allow shared, interior-mutable access across threads while maintaining Rust's borrowing rules.\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs609-627](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L609-L627) [lib/segment/src/segment\\_constructor/segment\\_builder.rs467-627](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L467-L627)\n\n## Component Initialization Paths\n\nThe segment construction process involves creating and initializing each component based on the segment configuration:\n\n```\n```\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs436-627](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L436-L627) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs99-223](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L99-L223)\n\n## Segment Creation and Loading\n\n### Creating a New Segment\n\nThe `build_segment()` function creates a new segment from scratch:\n\n| Function             | Purpose                   | Key Parameters                          |\n| -------------------- | ------------------------- | --------------------------------------- |\n| `build_segment()`    | Create new empty segment  | `segments_path`, `config`, `ready` flag |",
      "index": 3,
      "token_count": 546,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 5685,
      "end_char": 7731
    },
    {
      "content": "-- |\n| `build_segment()`    | Create new empty segment  | `segments_path`, `config`, `ready` flag |\n| `new_segment_path()` | Generate unique UUID path | Returns `PathBuf` with UUID             |\n| `create_segment()`   | Internal constructor      | Sets up all components                  |\n\n**Creation flow:**\n\n1. Generate unique path: `segments_path.join(UUID)`\n2. Create directory\n3. Initialize all components via `create_segment()`\n4. Save segment state to `segment_state.json`\n5. Save version file (if `ready=true`) to mark segment as loadable\n\nThe `ready` flag controls whether the segment is immediately loadable. If false, the version file is not saved, and the segment will be skipped on restart.\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs782-808](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L782-L808) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs766-768](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L766-L768)\n\n### Loading an Existing Segment\n\nThe `load_segment()` function restores a segment from disk:\n\n```\n```\n\nThe loader handles version migrations automatically, converting old segment formats to the current version. It also supports migrating from RocksDB-based storage to newer memory-mapped storage formats when feature flags are enabled.\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs687-764](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L687-L764) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs810-901](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L810-L901)\n\n## Segment Construction via SegmentBuilder\n\nThe `SegmentBuilder` is used to create optimized segments by merging multiple existing segments. This is the core of the optimization process.",
      "index": 4,
      "token_count": 523,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 7631,
      "end_char": 9680
    },
    {
      "content": "imized segments by merging multiple existing segments. This is the core of the optimization process.\n\n### SegmentBuilder Structure\n\n```\n```\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_builder.rs58-74](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L58-L74)\n\n### SegmentBuilder Workflow\n\nThe complete optimization workflow:\n\n```\n```\n\n**Key optimizations:**\n\n1. **Defragmentation**: Points with similar payload values are placed near each other in internal ID space to improve cache locality during filtered searches\n2. **Index reuse**: Old indices from source segments are passed to `build_vector_index()` to speed up HNSW construction by providing good starting points\n3. **Cache eviction**: After building, all caches are cleared to avoid polluting RAM with data that should stay on disk\n4. **Atomic completion**: The segment is only marked as valid (version file saved) after all components are built successfully\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_builder.rs287-459](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L287-L459) [lib/segment/src/segment\\_constructor/segment\\_builder.rs461-691](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L461-L691)\n\n### Defragmentation Strategy\n\nThe defragmentation process improves query performance by sorting points:\n\n```\n```\n\nThe ordering value is a heuristic that groups similar payloads together. For example, if defragmenting on a `user_id` field, all points with the same `user_id` will have similar ordering values and end up adjacent in the segment.\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_builder.rs311-329](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L311-L329) [lib/segment/src/segment\\_constructor/segment\\_builder.rs201-276](https://github.",
      "index": 5,
      "token_count": 511,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 9580,
      "end_char": 11559
    },
    {
      "content": "lder.rs#L311-L329) [lib/segment/src/segment\\_constructor/segment\\_builder.rs201-276](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L201-L276)\n\n## Segment Lifecycle States\n\n```\n```\n\n**Lifecycle summary:**\n\n1. **Building**: Segment directory created, components being initialized. If process crashes, segment is skipped on restart (no version file).\n\n2. **Ready**: Version file saved, segment is complete and will be loaded on restart.\n\n3. **Loading**: On restart, `load_segment()` reads the segment from disk.\n\n4. **Migrating**: If the stored version differs from the application version, migration routines convert the data.\n\n5. **Loaded**: Segment is in memory and active, serving queries and updates.\n\n6. **Optimizing**: SegmentBuilder merges this segment with others to create a new optimized segment.\n\n7. **Deleted**: Segment directory renamed to `*.deleted` extension, will be skipped on load and eventually cleaned up.\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs782-808](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L782-L808) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs687-736](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L687-L736)\n\n## Storage Backend Selection\n\nVector and payload storage backends are selected based on configuration:\n\n| Storage Type                          | Implementation                | Use Case                       | On-Disk |\n| ------------------------------------- | ----------------------------- | ------------------------------ | ------- |\n| `VectorStorageType::Memory`           | RocksDB-based (legacy)        | Small datasets, fast access    | No      |\n| `VectorStorageType::Mmap`             | Memory-mapped files           | Large datasets, read-optimized | Yes     |",
      "index": 6,
      "token_count": 474,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 11459,
      "end_char": 13423
    },
    {
      "content": "ype::Mmap`             | Memory-mapped files           | Large datasets, read-optimized | Yes     |\n| `VectorStorageType::ChunkedMmap`      | Chunked mmap, appendable      | Large datasets, write-capable  | Yes     |\n| `VectorStorageType::InRamChunkedMmap` | Chunked mmap, in-memory cache | High performance               | No      |\n| `PayloadStorageType::InMemory`        | RocksDB-based (legacy)        | Small payloads                 | No      |\n| `PayloadStorageType::OnDisk`          | RocksDB-based (legacy)        | Large payloads                 | Yes     |\n| `PayloadStorageType::Mmap`            | Memory-mapped gridstore       | Modern default                 | Yes     |\n| `PayloadStorageType::InRamMmap`       | Mmap with in-memory cache     | High performance               | No      |\n\nQdrant is actively migrating away from RocksDB storage to memory-mapped formats for better performance. The migration is triggered by feature flags and happens automatically during segment loading.\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs99-223](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L99-L223) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs225-248](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L225-L248)\n\n## File Structure\n\nA typical segment directory contains:\n\n```\n<uuid>/\n├── segment_state.json          # Segment configuration and metadata\n├── version                      # Version file (marks segment as ready)\n├── id_tracker/                  # ID mapping files\n│   ├── mappings.dat            # External → Internal ID\n│   └── versions.dat            # Point versions\n├── payload_index/               # Payload field indices\n│   ├── <field_name>.index\n│   └── ...\n├── payload_storage/             # Payload data\n│   ├── gridstore/\n│   └── ...\n├── vector_storage/              # Default vector storage\n│   ├── vectors.dat\n│   ├── deleted.",
      "index": 7,
      "token_count": 502,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 13323,
      "end_char": 15372
    },
    {
      "content": "─ ...\n├── vector_storage/              # Default vector storage\n│   ├── vectors.dat\n│   ├── deleted.dat\n│   └── ...\n├── vector_storage-<name>/       # Named vector storage\n├── vector_index/                # Default vector index (HNSW)\n│   ├── graph.dat\n│   └── ...\n└── vector_index-<name>/         # Named vector indices\n```\n\nEach component is responsible for managing its own files within the segment directory.\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs72-97](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L72-L97) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs267-269](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L267-L269)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Segment Lifecycle and Construction](#segment-lifecycle-and-construction.md)\n- [Segment Overview](#segment-overview.md)\n- [Segment Types](#segment-types.md)\n- [Segment Component Composition](#segment-component-composition.md)\n- [Component Initialization Paths](#component-initialization-paths.md)\n- [Segment Creation and Loading](#segment-creation-and-loading.md)\n- [Creating a New Segment](#creating-a-new-segment.md)\n- [Loading an Existing Segment](#loading-an-existing-segment.md)\n- [Segment Construction via SegmentBuilder](#segment-construction-via-segmentbuilder.md)\n- [SegmentBuilder Structure](#segmentbuilder-structure.md)\n- [SegmentBuilder Workflow](#segmentbuilder-workflow.md)\n- [Defragmentation Strategy](#defragmentation-strategy.md)\n- [Segment Lifecycle States](#segment-lifecycle-states.md)\n- [Storage Backend Selection](#storage-backend-selection.md)\n- [File Structure](#file-structure.md)",
      "index": 8,
      "token_count": 454,
      "metadata": {
        "title": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction",
        "source": "qdrant_qdrant\\_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "file_name": "_qdrant_qdrant_2.5-segment-lifecycle-and-construction.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.941978",
        "total_chunks": 9
      },
      "start_char": 15272,
      "end_char": 17320
    },
    {
      "content": "Vector Storage and Indexing | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 0,
      "end_char": 2041
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Vector Storage and Indexing\n\nRelevant source files\n\n- [Cargo.lock](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.lock)\n- [Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml)\n- [docs/redoc/default\\_version.js](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js)\n- [docs/redoc/index.html](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html)\n- [docs/redoc/v0.10.3/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.3/openapi.json)\n- [docs/redoc/v0.10.4/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.4/openapi.json)\n- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.5/openapi.json)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.",
      "index": 1,
      "token_count": 717,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 1941,
      "end_char": 3978
    },
    {
      "content": "t/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.11.x/openapi.json)\n- [docs/redoc/v1.13.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.13.x/openapi.json)\n- [docs/redoc/v1.15.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.15.x/openapi.json)\n- [lib/api/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml)\n- [lib/collection/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml)\n- [lib/common/common/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)\n- [lib/common/dataset/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/dataset/Cargo.toml)\n- [lib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.toml)\n- [lib/segment/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml)\n- [lib/segment/src/entry/entry\\_point.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/entry/entry_point.rs)\n- [lib/segment/src/fixtures/index\\_fixtures.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/fixtures/index_fixtures.rs)\n- [lib/segment/src/segment\\_constructor/segment\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs)\n- [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs)\n- [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs)\n- [lib/sparse/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/Cargo.toml)\n- [lib/storage/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [tools/missed\\_cherry\\_picks.",
      "index": 2,
      "token_count": 716,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 3878,
      "end_char": 5910
    },
    {
      "content": "tps://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [tools/missed\\_cherry\\_picks.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/missed_cherry_picks.sh)\n\n## Purpose and Scope\n\nThis page provides an overview of vector storage strategies and indexing approaches in Qdrant. It covers the core abstractions for storing vector data, the different storage backends available, and how indexing structures are layered on top of storage. This page focuses on the architectural design and available options.\n\nFor implementation details of specific index types, see:\n\n- **HNSW Index**: [3.2](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- **Vector Quantization**: [3.3](qdrant/qdrant/3.3-vector-quantization.md)\n- **Sparse Vector Indexing**: [3.4](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n\nFor storage format details, see [3.1](qdrant/qdrant/3.1-vector-storage-formats.md).\n\nFor how segments use these components, see [2.5](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md).\n\n---\n\n## Vector Storage and Indexing Architecture\n\nQdrant separates **vector storage** from **vector indexing** as distinct concerns. Storage handles persisting and retrieving raw vector data, while indexing provides fast similarity search capabilities over that data.\n\n### Core Abstractions Diagram\n\n```\n```\n\n**Sources:** [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs60-150](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L60-L150) [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs) [lib/segment/src/index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/mod.rs)\n\n### Key Traits\n\n**`VectorStorage` Trait**\n\nThe fundamental trait for vector storage, defined in [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs63-150](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L63-L150) Key methods:",
      "index": 3,
      "token_count": 565,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 5810,
      "end_char": 7814
    },
    {
      "content": "/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L63-L150) Key methods:\n\n| Method                   | Purpose                         |\n| ------------------------ | ------------------------------- |\n| `get_vector<P>()`        | Retrieve a vector by offset     |\n| `insert_vector()`        | Store a new vector              |\n| `delete_vector()`        | Mark vector as deleted          |\n| `update_from()`          | Batch update from iterator      |\n| `total_vector_count()`   | Total vectors including deleted |\n| `deleted_vector_count()` | Count of deleted vectors        |\n| `is_on_disk()`           | Whether storage is disk-backed  |\n\n**`VectorIndex` Trait**\n\nProvides similarity search over vectors. Different implementations offer trade-offs between speed and accuracy.\n\n**Sources:** [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs60-150](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L60-L150) [lib/segment/src/index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/mod.rs)\n\n---\n\n## Vector Storage Backends\n\nQdrant supports multiple storage backends, each optimized for different use cases. The choice is controlled by `VectorStorageType` configuration.\n\n### Storage Backend Types\n\n```\n```\n\n**Sources:** [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs99-223](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L99-L223)\n\n### Storage Backend Selection\n\nThe function `open_vector_storage()` in [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs99-223](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L99-L223) selects the appropriate storage implementation based on configuration:",
      "index": 4,
      "token_count": 500,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 7714,
      "end_char": 9683
    },
    {
      "content": "nstructor_base.rs#L99-L223) selects the appropriate storage implementation based on configuration:\n\n| Storage Type       | Implementation                              | Use Case                              | RocksDB Required |\n| ------------------ | ------------------------------------------- | ------------------------------------- | ---------------- |\n| `Memory`           | `SimpleDenseVectorStorage`                  | Fast in-memory access, small datasets | Yes              |\n| `Mmap`             | `MemmapDenseVectorStorage`                  | Large datasets, minimal RAM usage     | No               |\n| `ChunkedMmap`      | `AppendableMmapDenseVectorStorage`          | Appendable segments, growing data     | No               |\n| `InRamChunkedMmap` | `AppendableMmapDenseVectorStorage` (in-RAM) | Fast access + crash recovery          | No               |\n\n**Note:** As of the current codebase, Qdrant is deprecating RocksDB storage. The `Memory` storage type requires the `rocksdb` feature flag, which is optional.\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs99-223](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L99-L223) [lib/segment/Cargo.toml18](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml#L18-L18)\n\n---\n\n## VectorStorageEnum Variants\n\nThe `VectorStorageEnum` in [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs216-349](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L216-L349) is a large enum that combines storage backend type, vector type (dense/sparse/multi), and element data type (Float32/Float16/Uint8).\n\n### Dense Vector Storage Variants\n\n```\n```\n\n**Sources:** [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs216-349](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L216-L349)\n\n### Sparse and Multi-Dense Variants",
      "index": 5,
      "token_count": 523,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 9583,
      "end_char": 11576
    },
    {
      "content": "/segment/src/vector_storage/vector_storage_base.rs#L216-L349)\n\n### Sparse and Multi-Dense Variants\n\n| Vector Type     | Variants                                               | Notes                      |\n| --------------- | ------------------------------------------------------ | -------------------------- |\n| **Sparse**      | `SparseSimple`, `SparseVolatile`, `SparseMmap`         | Inverted index structure   |\n| **Multi-Dense** | `MultiDenseSimple`, `MultiDenseAppendableMemmap`, etc. | Multiple vectors per point |\n\n**Sources:** [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs281-348](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L281-L348)\n\n---\n\n## Vector Index Types\n\nQdrant provides three main index types, each with different performance characteristics.\n\n### Index Type Comparison\n\n```\n```\n\n**Sources:** [lib/segment/src/index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/mod.rs) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs291-318](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L291-L318)\n\n### PlainVectorIndex\n\n- **Algorithm:** Brute-force linear scan\n- **Accuracy:** 100% (exact search)\n- **Speed:** O(n) per query\n- **Use case:** Small collections (<10K vectors), perfect recall required\n- **Implementation:** [lib/segment/src/index/plain\\_vector\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_vector_index.rs)\n\n### HNSWIndex\n\n- **Algorithm:** Hierarchical Navigable Small World graph\n- **Accuracy:** Approximate (tunable via `ef` parameter)\n- **Speed:** O(log n) expected\n- **Use case:** Large collections, fast search with acceptable recall\n- **Implementation:** See [3.2](qdrant/qdrant/3.2-hnsw-index-implementation.md) for details\n\n### SparseVectorIndex\n\n- **Algorithm:** Inverted index (like text search)\n- **Data structure:** Maps dimension→points with non-zero values",
      "index": 6,
      "token_count": 531,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 11476,
      "end_char": 13494
    },
    {
      "content": "Inverted index (like text search)\n- **Data structure:** Maps dimension→points with non-zero values\n- **Use case:** High-dimensional sparse vectors (e.g., TF-IDF, BM25)\n- **Implementation:** See [3.4](qdrant/qdrant/3.4-sparse-vector-indexing.md) for details\n\n**Sources:** [lib/segment/src/index/plain\\_vector\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_vector_index.rs) [lib/segment/src/index/hnsw\\_index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/mod.rs) [lib/segment/src/index/sparse\\_index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sparse_index/mod.rs)\n\n### Index Selection in Code\n\nThe function `open_vector_index()` in [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs291-318](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L291-L318) selects the index type:\n\n```\nmatch &vector_config.index {\n    Indexes::Plain {} => VectorIndexEnum::Plain(PlainVectorIndex::new(...)),\n    Indexes::Hnsw(hnsw_config) => VectorIndexEnum::Hnsw(HNSWIndex::open(...)),\n}\n```\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs291-318](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L291-L318)\n\n---\n\n## Vector Data Types\n\nQdrant supports three classes of vectors, each with specialized storage and indexing.\n\n### Dense Vectors\n\nStandard fixed-dimensional vectors. Most common use case (e.g., embeddings from neural networks).\n\n- **Storage trait:** `DenseVectorStorage<T>` in [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs152-183](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L152-L183)\n- **Element types:** `VectorElementType` (f32), `VectorElementTypeByte` (u8), `VectorElementTypeHalf` (f16)\n- **Access methods:** `get_dense<P>()`, `get_dense_batch()`\n\n### Sparse Vectors",
      "index": 7,
      "token_count": 597,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 13394,
      "end_char": 15418
    },
    {
      "content": "entTypeHalf` (f16)\n- **Access methods:** `get_dense<P>()`, `get_dense_batch()`\n\n### Sparse Vectors\n\nHigh-dimensional vectors with mostly zero values, stored as (index, value) pairs.\n\n- **Storage trait:** `SparseVectorStorage` in [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs185-191](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L185-L191)\n- **Format:** `SparseVector` from sparse crate\n- **Access methods:** `get_sparse<P>()`, `get_sparse_opt<P>()`\n\n### Multi-Dense Vectors\n\nMultiple dense vectors per point (e.g., ColBERT embeddings).\n\n- **Storage trait:** `MultiVectorStorage<T>` in [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs193-214](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L193-L214)\n- **Configuration:** `MultiVectorConfig` specifies comparator (max\\_sim, etc.)\n- **Access methods:** `get_multi<P>()`, `get_batch_multi()`\n\n**Sources:** [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs152-214](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L152-L214) [lib/sparse/src/common/sparse\\_vector.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/common/sparse_vector.rs)\n\n---\n\n## Storage Element Data Types\n\nVectors can be stored with different precision levels, trading accuracy for memory and performance.\n\n### VectorStorageDatatype Options\n\n```\n```\n\n**Sources:** [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n\n### Type Selection\n\nConfigured via `VectorDataConfig.datatype`. The element type determines which variant of storage enum is used (e.g., `DenseSimple` vs `DenseSimpleByte` vs `DenseSimpleHalf`).\n\n**Tradeoffs:**\n\n| Type    | Memory | Accuracy | Speed    | Use Case                            |\n| ------- | ------ | -------- | -------- | ----------------------------------- |\n| Float32 | 4B/dim | Highest  | Baseline | Default, best quality               |",
      "index": 8,
      "token_count": 563,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 15318,
      "end_char": 17360
    },
    {
      "content": "---------------- |\n| Float32 | 4B/dim | Highest  | Baseline | Default, best quality               |\n| Float16 | 2B/dim | Good     | Similar  | Large datasets, 2x compression      |\n| Uint8   | 1B/dim | Lower    | Faster   | Extreme compression, with rescoring |\n\n**Sources:** [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs) [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs216-349](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L216-L349)\n\n---\n\n## Quantization Layer\n\nQuantization is an optional compression layer that reduces memory usage while maintaining search quality through rescoring.\n\n### Quantization Architecture\n\n```\n```\n\n**Key concept:** Quantized vectors are stored separately from original vectors. Search happens on compressed data first (fast), then top candidates are rescored with original vectors (accurate).\n\n**Sources:** [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs) [lib/quantization/](https://github.com/qdrant/qdrant/blob/48203e41/lib/quantization/)\n\nFor detailed quantization implementation, see [3.3](qdrant/qdrant/3.3-vector-quantization.md).\n\n---\n\n## Segment Vector Data Organization\n\nEach `Segment` contains a `HashMap<VectorNameBuf, VectorData>` to support named vectors (multi-vector collections).\n\n### VectorData Structure in Segment\n\n```\n```\n\n**Sources:** [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs514-576](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L514-L576)\n\n### Storage Path Convention\n\nEach vector name gets dedicated directories:\n\n- Storage: `<segment>/vector_storage` or `<segment>/vector_storage-<name>`",
      "index": 9,
      "token_count": 543,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 17260,
      "end_char": 19247
    },
    {
      "content": "dedicated directories:\n\n- Storage: `<segment>/vector_storage` or `<segment>/vector_storage-<name>`\n- Index: `<segment>/vector_index` or `<segment>/vector_index-<name>`\n\nHelper functions in [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs80-97](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L80-L97):\n\n- `get_vector_storage_path(segment_path, vector_name)`\n- `get_vector_index_path(segment_path, vector_name)`\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs80-97](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L80-L97)\n\n---\n\n## Creating and Opening Vector Storage\n\n### Sparse Vector Storage Creation\n\nFor sparse vectors, the function `create_sparse_vector_storage()` in [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs410-434](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L410-L434) handles initialization:\n\n```\nmatch storage_type {\n    SparseVectorStorageType::OnDisk => {\n        // RocksDB-backed (requires feature flag)\n        open_simple_sparse_vector_storage(db, column, stopped)\n    }\n    SparseVectorStorageType::Mmap => {\n        // Memory-mapped\n        MmapSparseVectorStorage::open_or_create(path)\n    }\n}\n```\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs410-434](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L410-L434)\n\n### Dense Vector Index Creation\n\nThe function `open_vector_index()` creates the index, while `build_vector_index()` in [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs320-351](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L320-L351) performs initial construction with optimization.",
      "index": 10,
      "token_count": 531,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 19147,
      "end_char": 21118
    },
    {
      "content": "onstructor/segment_constructor_base.rs#L320-L351) performs initial construction with optimization.\n\nFor HNSW indices, old indices from merged segments can be reused to speed up construction:\n\n```\n```\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs291-351](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L291-L351)\n\n---\n\n## Access Patterns\n\nThe `VectorStorage` trait uses a type parameter `P: AccessPattern` to optimize reads.\n\n### AccessPattern Types\n\n```\n```\n\nThis allows storage implementations to optimize based on access pattern (e.g., prefetching for sequential reads).\n\n**Sources:** [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs42-58](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L42-L58) [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs89-92](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L89-L92)\n\n---\n\n## Storage and Index Coordination\n\n### Segment Building Example\n\nWhen constructing a new segment (e.g., during optimization), `SegmentBuilder` in [lib/segment/src/segment\\_constructor/segment\\_builder.rs58-74](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L58-L74) coordinates storage and index creation:\n\n1. Create ID tracker\n\n2. Create payload storage\n\n3. For each vector name:\n\n   - Create vector storage (via `open_vector_storage()`)\n   - Populate with data from source segments\n   - Create quantized vectors (if configured)\n   - Build vector index (with `build_vector_index()`)\n\n**Sources:** [lib/segment/src/segment\\_constructor/segment\\_builder.rs58-167](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L58-L167) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs436-576](https://github.",
      "index": 11,
      "token_count": 539,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 21018,
      "end_char": 22980
    },
    {
      "content": "58-L167) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs436-576](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L436-L576)\n\n### Immutability and Appendability\n\nSegments come in two flavors affecting storage choice:\n\n| Segment Type   | Storage                 | Typical Index | Use Case                         |\n| -------------- | ----------------------- | ------------- | -------------------------------- |\n| **Appendable** | `ChunkedMmap`, `Memory` | `Plain`       | Active segments receiving writes |\n| **Immutable**  | `Mmap`                  | `HNSW`        | Optimized read-only segments     |\n\nThe transition happens during segment optimization (see [2.4](qdrant/qdrant/2.4-local-shard-architecture.md)).\n\n**Sources:** [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs) [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs)\n\n---\n\n## Summary\n\nQdrant's vector storage and indexing system provides:\n\n1. **Separation of Concerns:** Storage (persistence) and indexing (search) are independent layers\n2. **Multiple Storage Backends:** RocksDB (deprecated), Mmap, ChunkedMmap, InRamChunkedMmap\n3. **Multiple Index Types:** Plain (exact), HNSW (approximate), Sparse (inverted)\n4. **Vector Type Support:** Dense, Sparse, Multi-dense vectors\n5. **Data Type Flexibility:** Float32, Float16, Uint8 storage\n6. **Optional Quantization:** Compression layer for memory reduction\n7. **Per-Vector-Name Organization:** Named vectors with independent storage/index\n\nThe architecture allows flexible configuration for different scale and performance requirements while maintaining clean abstractions between components.\n\n**Sources:** [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs](https://github.",
      "index": 12,
      "token_count": 518,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 22880,
      "end_char": 24928
    },
    {
      "content": "torage_base.rs) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs) [lib/segment/src/index/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/mod.rs) [lib/segment/src/segment.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment.rs)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Vector Storage and Indexing](#vector-storage-and-indexing.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Vector Storage and Indexing Architecture](#vector-storage-and-indexing-architecture.md)\n- [Core Abstractions Diagram](#core-abstractions-diagram.md)\n- [Key Traits](#key-traits.md)\n- [Vector Storage Backends](#vector-storage-backends.md)\n- [Storage Backend Types](#storage-backend-types.md)\n- [Storage Backend Selection](#storage-backend-selection.md)\n- [VectorStorageEnum Variants](#vectorstorageenum-variants.md)\n- [Dense Vector Storage Variants](#dense-vector-storage-variants.md)\n- [Sparse and Multi-Dense Variants](#sparse-and-multi-dense-variants.md)\n- [Vector Index Types](#vector-index-types.md)\n- [Index Type Comparison](#index-type-comparison.md)\n- [PlainVectorIndex](#plainvectorindex.md)\n- [HNSWIndex](#hnswindex.md)\n- [SparseVectorIndex](#sparsevectorindex.md)\n- [Index Selection in Code](#index-selection-in-code.md)\n- [Vector Data Types](#vector-data-types.md)\n- [Dense Vectors](#dense-vectors.md)\n- [Sparse Vectors](#sparse-vectors.md)\n- [Multi-Dense Vectors](#multi-dense-vectors.md)\n- [Storage Element Data Types](#storage-element-data-types.md)\n- [VectorStorageDatatype Options](#vectorstoragedatatype-options.md)\n- [Type Selection](#type-selection.md)\n- [Quantization Layer](#quantization-layer.md)\n- [Quantization Architecture](#quantization-architecture.md)\n- [Segment Vector Data Organization](#segment-vector-data-organization.md)\n- [VectorData Structure in Segment](#vectordata-structure-in-segment.md)",
      "index": 13,
      "token_count": 538,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 24828,
      "end_char": 26848
    },
    {
      "content": "ctor-data-organization.md)\n- [VectorData Structure in Segment](#vectordata-structure-in-segment.md)\n- [Storage Path Convention](#storage-path-convention.md)\n- [Creating and Opening Vector Storage](#creating-and-opening-vector-storage.md)\n- [Sparse Vector Storage Creation](#sparse-vector-storage-creation.md)\n- [Dense Vector Index Creation](#dense-vector-index-creation.md)\n- [Access Patterns](#access-patterns.md)\n- [AccessPattern Types](#accesspattern-types.md)\n- [Storage and Index Coordination](#storage-and-index-coordination.md)\n- [Segment Building Example](#segment-building-example.md)\n- [Immutability and Appendability](#immutability-and-appendability.md)\n- [Summary](#summary.md)",
      "index": 14,
      "token_count": 162,
      "metadata": {
        "title": "_qdrant_qdrant_3-vector-storage-and-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "file_name": "_qdrant_qdrant_3-vector-storage-and-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.977184",
        "total_chunks": 15
      },
      "start_char": 26748,
      "end_char": 28796
    },
    {
      "content": "Vector Storage Formats | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 0,
      "end_char": 2036
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Vector Storage Formats\n\nRelevant source files\n\n- [lib/segment/src/entry/entry\\_point.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/entry/entry_point.rs)\n- [lib/segment/src/fixtures/index\\_fixtures.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/fixtures/index_fixtures.rs)\n- [lib/segment/src/segment\\_constructor/segment\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs)\n- [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs)\n- [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs)\n\n## Purpose and Scope",
      "index": 1,
      "token_count": 605,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 1936,
      "end_char": 3895
    },
    {
      "content": "/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs)\n\n## Purpose and Scope\n\nThis document describes the different vector storage formats available in Qdrant for storing dense, sparse, and multi-dense vectors. It covers the `VectorStorageEnum` variants, their underlying storage backends, supported data types, and the mechanisms for creating and selecting appropriate storage formats.\n\nFor information about vector indexing structures built on top of these storage formats, see [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md) and [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md). For details on how vectors are quantized to reduce memory usage, see [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md).\n\n## Vector Storage Architecture\n\nVector storage in Qdrant is abstracted through the `VectorStorage` trait and implemented via the `VectorStorageEnum`, which provides multiple storage backends optimized for different use cases. Each segment maintains a collection of vector storages (one per vector name) that handle the persistence and retrieval of raw vector data.\n\n**Storage Classification**\n\n```\n```\n\nSources: [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs217-349](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L217-L349)\n\n## Dense Vector Storage Formats\n\nDense vector storage handles fixed-dimension vectors where all elements are present. Each storage format is available in three data type variants: `Float32` (default), `Uint8`, and `Float16`.\n\n### Storage Type Comparison\n\n| Storage Type            | Appendable | On-Disk | Memory Usage | Use Case                     |\n| ----------------------- | ---------- | ------- | ------------ | ---------------------------- |\n| `DenseSimple` (RocksDB) | Yes        | No      | Low          | Legacy, being migrated away  |\n| `DenseVolatile`         | Yes        | No      | High         | Testing only                 |",
      "index": 2,
      "token_count": 461,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 3795,
      "end_char": 5817
    },
    {
      "content": "|\n| `DenseVolatile`         | Yes        | No      | High         | Testing only                 |\n| `DenseMemmap`           | No         | Yes     | Low          | Optimized read-only segments |\n| `DenseAppendableMemmap` | Yes        | Yes     | Low          | Mutable segments (default)   |\n| `DenseAppendableInRam`  | Yes        | No      | Medium       | Fast access with persistence |\n\n### DenseSimple (RocksDB-based)\n\nRocksDB-based storage that persists vectors in a key-value database. This format is being actively migrated to memory-mapped formats for better performance.\n\n```\n```\n\n**Key Implementation:**\n\n- Created via `open_simple_dense_vector_storage()` when `VectorStorageType::Memory` is configured\n- Uses a dedicated RocksDB column family named with `DB_VECTOR_CF` prefix\n- Supports migration to mmap format via `migrate_rocksdb_dense_vector_storage_to_mmap()`\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs116-142](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L116-L142) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs1047-1126](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L1047-L1126)\n\n### DenseMemmap (Immutable Memory-Mapped)\n\nImmutable memory-mapped storage that provides low memory usage for read-only segments. Vectors are stored in a single contiguous file mapped into memory.\n\n**File Structure:**\n\n- Vector data stored as raw bytes in a single memory-mapped file\n- No fragmentation, optimal for sequential reads\n- Supports `populate()` to prefetch data into page cache\n\n**Creation Path:**\n\n```\n```\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs144-172](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L144-L172)\n\n### DenseAppendableMemmap (Chunked Memory-Mapped)\n\nChunked memory-mapped storage that supports both reads and writes.",
      "index": 3,
      "token_count": 524,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 5717,
      "end_char": 7751
    },
    {
      "content": "leMemmap (Chunked Memory-Mapped)\n\nChunked memory-mapped storage that supports both reads and writes. Vectors are stored across multiple memory-mapped chunks, allowing the storage to grow dynamically.\n\n**Architecture:**\n\n- Uses `ChunkedMmapVectors<T>` backend for storing vectors in chunks\n- Supports dynamic growth by adding new chunks\n- Default storage type for mutable segments\n\n**Chunk Management:**\n\n```\n```\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs175-203](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L175-L203)\n\n### DenseAppendableInRam (In-Memory Persisted)\n\nIn-memory storage that maintains vectors in RAM while persisting to disk. Provides fast access with durability guarantees.\n\n**Characteristics:**\n\n- Uses `InRamPersistedVectors<T>` backend\n- All vectors kept in memory for fast access\n- Periodic flush to disk for persistence\n- Lower memory pressure than `ChunkedMmapVectors` as data stays in RAM\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs204-221](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L204-L221)\n\n## Sparse Vector Storage Formats\n\nSparse vectors store only non-zero indices and values, making them efficient for high-dimensional sparse data like TF-IDF or BM25 vectors.\n\n### Sparse Storage Types\n\n| Storage Type     | Backend   | On-Disk | Use Case             |\n| ---------------- | --------- | ------- | -------------------- |\n| `SparseSimple`   | RocksDB   | No      | Legacy format        |\n| `SparseVolatile` | In-Memory | No      | Testing              |\n| `SparseMmap`     | Mmap      | Yes     | Production (default) |\n\n### SparseMmap Storage\n\nMemory-mapped sparse vector storage using the `MmapSparseVectorStorage` implementation.\n\n**Data Layout:**\n\n- Indices stored separately from values for compression\n- Variable-length encoding for sparse vectors\n- Optimized for space efficiency\n\n**Creation:**\n\n```\n```",
      "index": 4,
      "token_count": 491,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 7651,
      "end_char": 9696
    },
    {
      "content": "riable-length encoding for sparse vectors\n- Optimized for space efficiency\n\n**Creation:**\n\n```\n```\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs410-434](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L410-L434)\n\n## Multi-Dense Vector Storage Formats\n\nMulti-dense vectors allow storing multiple vectors per point, useful for multi-representation embeddings (e.g., ColBERT).\n\n### Storage Architecture\n\nMulti-dense storage maintains two parallel structures:\n\n1. **Vector data** - All sub-vectors stored contiguously or chunked\n2. **Offset data** - Mapping from point to vector ranges\n\n```\n```\n\n**Key Components:**\n\n- `MultiVectorConfig` defines configuration (comparator type)\n- Each point can have variable number of sub-vectors\n- Sub-vectors stored sequentially, indexed by offset structure\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs145-153](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L145-L153) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs176-182](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L176-L182)\n\n## Vector Data Types\n\nEach storage format supports three primitive data types for vector elements:\n\n### Supported Data Types\n\n| Type      | Rust Type                     | Size    | Use Case                          |\n| --------- | ----------------------------- | ------- | --------------------------------- |\n| `Float32` | `VectorElementType` (f32)     | 4 bytes | Default, full precision           |\n| `Float16` | `VectorElementTypeHalf` (f16) | 2 bytes | Memory savings, reduced precision |\n| `Uint8`   | `VectorElementTypeByte` (u8)  | 1 byte  | Quantized storage                 |\n\n**Type Selection:**\n\n- Configured via `VectorDataConfig.datatype` field\n- Different types cannot be mixed in same storage\n- Type influences storage size and precision",
      "index": 5,
      "token_count": 517,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 9596,
      "end_char": 11644
    },
    {
      "content": "eld\n- Different types cannot be mixed in same storage\n- Type influences storage size and precision\n\n```\n```\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs106-107](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L106-L107) [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs155-200](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L155-L200)\n\n## Storage Backend Selection\n\nThe `open_vector_storage()` function selects the appropriate storage implementation based on configuration.\n\n### Selection Logic\n\n```\n```\n\n**Configuration Mapping:**\n\n- `VectorStorageType::Memory` → RocksDB-based storage (being deprecated)\n- `VectorStorageType::Mmap` → Immutable memory-mapped storage\n- `VectorStorageType::ChunkedMmap` → Appendable chunked memory-mapped (default for mutable)\n- `VectorStorageType::InRamChunkedMmap` → In-RAM with disk persistence\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs99-223](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L99-L223)\n\n## Storage Operations\n\n### Vector Insertion\n\nAll storage types implement the `insert_vector()` method from the `VectorStorage` trait:\n\n```\n```\n\n**Process:**\n\n1. Convert input vector to storage data type (Float32/Float16/Uint8)\n2. Write vector data to appropriate backend (RocksDB/Mmap/Memory)\n3. Update internal tracking (deleted flags, count, etc.)\n\nSources: [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs94-99](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L94-L99)\n\n### Batch Updates\n\nThe `update_from()` method handles bulk insertion from iterators, used during segment optimization:\n\n**Update Flow:**\n\n1. Iterate over source vectors\n2. Insert each vector at next available offset\n3. Mark deleted vectors appropriately\n4. Return range of inserted offsets",
      "index": 6,
      "token_count": 540,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 11544,
      "end_char": 13587
    },
    {
      "content": "at next available offset\n3. Mark deleted vectors appropriately\n4. Return range of inserted offsets\n\nSources: [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs107-111](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L107-L111)\n\n### Vector Retrieval\n\nVectors are retrieved using access pattern hints for optimization:\n\n```\n```\n\n**Access Patterns:**\n\n- `Sequential` - Enables prefetching for sequential reads\n- `Random` - No prefetching, single vector access\n\nSources: [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs42-58](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L42-L58) [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs89-92](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L89-L92)\n\n## Storage Migration\n\nQdrant actively migrates from RocksDB-based storage to memory-mapped formats for better performance.\n\n### Dense Vector Migration\n\n```\n```\n\n**Migration Process:**\n\n1. Create new mmap-based storage in segment path\n2. Copy all vectors from RocksDB to new storage\n3. Preserve deletion flags during migration\n4. Flush new storage to ensure persistence\n5. Update segment configuration to reflect new storage type\n6. Destroy old RocksDB column family\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs1047-1126](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L1047-L1126)\n\n### Multi-Dense Vector Migration\n\nSimilar process for multi-dense vectors:\n\n**Key Differences:**\n\n- Preserves `MultiVectorConfig` during migration\n- Migrates both vector data and offset structures\n- Uses `migrate_rocksdb_multi_dense_vector_storage_to_mmap()`\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs1135-1195](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L1135-L1195)",
      "index": 7,
      "token_count": 552,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 13487,
      "end_char": 15514
    },
    {
      "content": "/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L1135-L1195)\n\n### Feature Flag Control\n\nMigration is controlled by feature flags:\n\n- `migrate_rocksdb_vector_storage` - Enables vector storage migration\n- `migrate_rocksdb_id_tracker` - Enables ID tracker migration\n- `migrate_rocksdb_payload_storage` - Enables payload storage migration\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs753-756](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L753-L756)\n\n## Performance Characteristics\n\n### Memory Usage\n\n| Storage Type     | RAM Usage | Disk Usage | Trade-off                     |\n| ---------------- | --------- | ---------- | ----------------------------- |\n| RocksDB (Simple) | Low       | Medium     | Legacy, slower reads          |\n| Mmap (Immutable) | Minimal   | High       | OS page cache, read-only      |\n| ChunkedMmap      | Minimal   | High       | OS page cache, appendable     |\n| InRamChunkedMmap | High      | High       | Fast access, full data in RAM |\n\n### Cache Control\n\nStorage types support cache management:\n\n- `populate()` - Prefetch mmap data into page cache\n- `clear_cache()` - Advise OS to drop cached pages\n\n**Usage Pattern:**\n\n```\n```\n\nSources: [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs562-607](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L562-L607) [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs609-654](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L609-L654)\n\n## VectorStorageEnum Implementation\n\nThe `VectorStorageEnum` serves as a unified interface to all storage implementations:\n\n### Enum Variants by Category\n\n**Dense Variants (per datatype):**\n\n- `DenseSimple`, `DenseSimpleByte`, `DenseSimpleHalf`\n- `DenseVolatile`, `DenseVolatileByte`, `DenseVolatileHalf`\n- `DenseMemmap`, `DenseMemmapByte`, `DenseMemmapHalf`",
      "index": 8,
      "token_count": 552,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 15414,
      "end_char": 17433
    },
    {
      "content": "le`, `DenseVolatileByte`, `DenseVolatileHalf`\n- `DenseMemmap`, `DenseMemmapByte`, `DenseMemmapHalf`\n- `DenseAppendableMemmap`, `DenseAppendableMemmapByte`, `DenseAppendableMemmapHalf`\n- `DenseAppendableInRam`, `DenseAppendableInRamByte`, `DenseAppendableInRamHalf`\n\n**Sparse Variants:**\n\n- `SparseSimple`, `SparseVolatile`, `SparseMmap`\n\n**Multi-Dense Variants (per datatype):**\n\n- `MultiDenseSimple`, `MultiDenseSimpleByte`, `MultiDenseSimpleHalf`\n- `MultiDenseVolatile`, `MultiDenseVolatileByte`, `MultiDenseVolatileHalf`\n- `MultiDenseAppendableMemmap`, `MultiDenseAppendableMemmapByte`, `MultiDenseAppendableMemmapHalf`\n- `MultiDenseAppendableInRam`, `MultiDenseAppendableInRamByte`, `MultiDenseAppendableInRamHalf`\n\nSources: [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs217-349](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L217-L349)\n\n### Trait Implementations\n\nAll storage enum variants delegate to their inner implementation:\n\n```\n```\n\n**Key Methods:**\n\n- `distance()` - Returns configured distance metric\n- `datatype()` - Returns vector element data type\n- `is_on_disk()` - Whether data is memory-mapped vs RAM\n- `total_vector_count()` - Total vectors including deleted\n- `available_vector_count()` - Non-deleted vector count\n- `deleted_vector_count()` - Count of deleted vectors\n- `deleted_vector_bitslice()` - Bitslice of deletion flags\n\nSources: [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs754-1031](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L754-L1031)\n\n## Integration with Segments\n\nVector storage is created and managed as part of segment construction:\n\n### Segment Creation Flow\n\n```\n```\n\n**Key Steps:**\n\n1. Create payload storage based on config\n\n2. For each vector name in configuration:\n\n   - Determine vector storage path\n   - Open/create appropriate vector storage\n   - Create vector index on top of storage\n\n3. Assemble all components into `Segment`",
      "index": 9,
      "token_count": 555,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 17333,
      "end_char": 19345
    },
    {
      "content": "ctor storage\n   - Create vector index on top of storage\n\n3. Assemble all components into `Segment`\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs436-627](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L436-L627)\n\n### Storage Paths\n\nVector storage files are organized by vector name:\n\n- Path pattern: `{segment_path}/vector_storage[-{vector_name}]`\n- For default vector: `vector_storage`\n- For named vectors: `vector_storage-{name}`\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_constructor\\_base.rs88-93](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_constructor_base.rs#L88-L93)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Vector Storage Formats](#vector-storage-formats.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Vector Storage Architecture](#vector-storage-architecture.md)\n- [Dense Vector Storage Formats](#dense-vector-storage-formats.md)\n- [Storage Type Comparison](#storage-type-comparison.md)\n- [DenseSimple (RocksDB-based)](#densesimple-rocksdb-based.md)\n- [DenseMemmap (Immutable Memory-Mapped)](#densememmap-immutable-memory-mapped.md)\n- [DenseAppendableMemmap (Chunked Memory-Mapped)](#denseappendablememmap-chunked-memory-mapped.md)\n- [DenseAppendableInRam (In-Memory Persisted)](#denseappendableinram-in-memory-persisted.md)\n- [Sparse Vector Storage Formats](#sparse-vector-storage-formats.md)\n- [Sparse Storage Types](#sparse-storage-types.md)\n- [SparseMmap Storage](#sparsemmap-storage.md)\n- [Multi-Dense Vector Storage Formats](#multi-dense-vector-storage-formats.md)\n- [Storage Architecture](#storage-architecture.md)\n- [Vector Data Types](#vector-data-types.md)\n- [Supported Data Types](#supported-data-types.md)\n- [Storage Backend Selection](#storage-backend-selection.md)\n- [Selection Logic](#selection-logic.md)\n- [Storage Operations](#storage-operations.md)\n- [Vector Insertion](#vector-insertion.md)\n- [Batch Updates](#batch-updates.",
      "index": 10,
      "token_count": 541,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 19245,
      "end_char": 21292
    },
    {
      "content": "#storage-operations.md)\n- [Vector Insertion](#vector-insertion.md)\n- [Batch Updates](#batch-updates.md)\n- [Vector Retrieval](#vector-retrieval.md)\n- [Storage Migration](#storage-migration.md)\n- [Dense Vector Migration](#dense-vector-migration.md)\n- [Multi-Dense Vector Migration](#multi-dense-vector-migration.md)\n- [Feature Flag Control](#feature-flag-control.md)\n- [Performance Characteristics](#performance-characteristics.md)\n- [Memory Usage](#memory-usage.md)\n- [Cache Control](#cache-control.md)\n- [VectorStorageEnum Implementation](#vectorstorageenum-implementation.md)\n- [Enum Variants by Category](#enum-variants-by-category.md)\n- [Trait Implementations](#trait-implementations.md)\n- [Integration with Segments](#integration-with-segments.md)\n- [Segment Creation Flow](#segment-creation-flow.md)\n- [Storage Paths](#storage-paths.md)",
      "index": 11,
      "token_count": 210,
      "metadata": {
        "title": "_qdrant_qdrant_3.1-vector-storage-formats",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.1-vector-storage-formats.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "file_name": "_qdrant_qdrant_3.1-vector-storage-formats.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.020336",
        "total_chunks": 12
      },
      "start_char": 21192,
      "end_char": 23240
    },
    {
      "content": "HNSW Index Implementation | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 0,
      "end_char": 2039
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# HNSW Index Implementation\n\nRelevant source files\n\n- [lib/common/io/src/file\\_operations.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/io/src/file_operations.rs)\n- [lib/segment/benches/hnsw\\_build\\_asymptotic.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_asymptotic.rs)\n- [lib/segment/benches/hnsw\\_build\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_graph.rs)\n- [lib/segment/benches/hnsw\\_search\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_search_graph.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs)",
      "index": 1,
      "token_count": 667,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 1939,
      "end_char": 3964
    },
    {
      "content": "://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/serializer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/serializer.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs)\n- [lib/segment/src/index/hnsw\\_index/hnsw.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/mod.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/test\\_compact\\_graph\\_layer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/test_compact_graph_layer.rs)\n\nThis document describes the implementation of the Hierarchical Navigable Small World (HNSW) algorithm in Qdrant. HNSW is a graph-based approximate nearest neighbor search index that provides fast vector similarity search with tunable accuracy/speed tradeoffs.\n\nFor information about other vector index types (Plain, Sparse), see [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md). For details on quantization techniques used with HNSW, see [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md). For search/query processing that uses HNSW, see [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md).\n\n## Core Architecture\n\nThe HNSW implementation consists of four primary components that work together to provide efficient graph-based search:\n\n```\n```",
      "index": 2,
      "token_count": 580,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 3864,
      "end_char": 5877
    },
    {
      "content": "ts of four primary components that work together to provide efficient graph-based search:\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs83-93](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L83-L93) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs44-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L44-L50) [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs32-48](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L32-L48) [lib/segment/src/index/hnsw\\_index/graph\\_links.rs56-61](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L56-L61)\n\n### HNSWIndex\n\nThe `HNSWIndex` struct is the top-level index interface that implements the `VectorIndex` trait. It maintains references to all necessary components and coordinates between graph operations and vector/payload storage.\n\n**Key Fields**:\n\n- `graph: GraphLayers` - The immutable hierarchical graph structure\n- `vector_storage: Arc<AtomicRefCell<VectorStorageEnum>>` - Raw vector data\n- `quantized_vectors: Arc<AtomicRefCell<Option<QuantizedVectors>>>` - Compressed vectors for search\n- `id_tracker: Arc<AtomicRefCell<IdTrackerSS>>` - Maps external IDs to internal offsets\n- `payload_index: Arc<AtomicRefCell<StructPayloadIndex>>` - For filtered search\n- `config: HnswGraphConfig` - Configuration parameters (m, ef\\_construct, etc.)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs83-93](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L83-L93)\n\n### GraphLayers\n\n`GraphLayers` is the immutable graph structure used during search operations. It provides efficient read-only access to the multi-level graph connectivity.\n\n**Key Fields**:\n\n- `hnsw_m: HnswM` - M parameters (m for level > 0, m0 for level 0)\n- `links: GraphLinks` - Actual link storage (neighbors for each node)",
      "index": 3,
      "token_count": 595,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 5777,
      "end_char": 7773
    },
    {
      "content": "or level > 0, m0 for level 0)\n- `links: GraphLinks` - Actual link storage (neighbors for each node)\n- `entry_points: EntryPoints` - Multiple entry points for different filters\n- `visited_pool: VisitedPool` - Pool of reusable visited lists for search\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs44-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L44-L50)\n\n### GraphLayersBuilder\n\n`GraphLayersBuilder` is the mutable builder used during index construction. It allows concurrent point insertion and converts to the immutable `GraphLayers` when complete.\n\n**Key Fields**:\n\n- `links_layers: Vec<LockedLayersContainer>` - Per-point, per-level link containers with locks\n- `ready_list: RwLock<BitVec>` - Tracks which points have been indexed\n- `entry_points: Mutex<EntryPoints>` - Maintains entry points during construction\n- `hnsw_m: HnswM` - M parameters for graph construction\n- `ef_construct: usize` - Size of candidate list during construction\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs32-48](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L32-L48)\n\n### GraphLinks\n\n`GraphLinks` is a self-referential struct that manages the storage and access to graph connectivity data. It supports multiple storage formats for space/speed tradeoffs.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links.rs199-207](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L199-L207) [lib/segment/src/index/hnsw\\_index/graph\\_links.rs224-331](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L224-L331)\n\n## Hierarchical Graph Structure\n\nHNSW uses a multi-level graph where each level is a subset of the level below it. Points are assigned to levels using a geometric distribution, creating a hierarchical structure that enables efficient search.\n\n### Level Assignment",
      "index": 4,
      "token_count": 547,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 7673,
      "end_char": 9679
    },
    {
      "content": "stribution, creating a hierarchical structure that enables efficient search.\n\n### Level Assignment\n\nThe level for each point is determined using a geometric distribution during insertion:\n\n```\n```\n\n**Formula**: `level_factor = 1.0 / ln(max(m, 2))`\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs357-366](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L357-L366) [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs286-290](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L286-L290)\n\n### M Parameters\n\nThe graph uses two M parameters that control connectivity:\n\n- **m**: Maximum links per node on levels 1 and above\n- **m0**: Maximum links per node on level 0 (typically `m0 = 2 * m`)\n\n| Parameter      | Level 0            | Level > 0         |\n| -------------- | ------------------ | ----------------- |\n| Maximum links  | m0 (typ. 2\\*m)     | m                 |\n| Link selection | Heuristic pruning  | Heuristic pruning |\n| Purpose        | Dense connectivity | Sparse navigation |\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs359-361](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L359-L361) [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs68-70](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L68-L70)\n\n### Entry Points\n\nThe index maintains multiple entry points to support filtered searches. Entry points are stored per filter predicate and updated during construction.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs387-409](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L387-L409)\n\n## Index Construction Process\n\n### Build Pipeline\n\nTitle: **HNSW Index Build Pipeline**\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs199-665](https://github.",
      "index": 5,
      "token_count": 597,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 9579,
      "end_char": 11601
    },
    {
      "content": "Pipeline**\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs199-665](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L199-L665)\n\n### Point Insertion Algorithm\n\nThe `link_new_point()` method in `GraphLayersBuilder` inserts a new point into the graph:\n\n**Algorithm Steps**:\n\n1. **Find Entry Point**: Get an entry point that satisfies filters\n\n2. **Navigate to Target Level**: Use greedy search from entry point down to the point's assigned level\n\n3. **For Each Level (top-down)**:\n\n   - Find nearest neighbors using beam search with `ef_construct` candidates\n   - Select M best neighbors using heuristic\n   - Create bidirectional links\n   - Use selected neighbors as entry for next level\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs387-440](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L387-L440) [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs466-506](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L466-L506)\n\n### Heuristic Link Selection\n\nWhen `use_heuristic` is enabled (default: `true`), the algorithm selects neighbors that are \"not closer to each other than to the new point.\" This prevents clustering and maintains graph connectivity.\n\n**Heuristic Logic** (`link_with_heuristic`):\n\n1. Sort candidates by distance to new point\n\n2. For each candidate in order:\n\n   - If less than M neighbors selected, add it\n   - Only add if it's not closer to existing selected neighbors than to new point\n\n3. Create bidirectional links with selected neighbors\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs508-545](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs#L508-L545) [lib/segment/src/index/hnsw\\_index/hnsw.rs70](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L70-L70)\n\n### Payload-Specific Graphs",
      "index": 6,
      "token_count": 594,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 11501,
      "end_char": 13546
    },
    {
      "content": "drant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L70-L70)\n\n### Payload-Specific Graphs\n\nAfter building the main graph, HNSW constructs additional connectivity for payload-filtered searches. This ensures good search quality even with filters.\n\n**Process**:\n\n1. For each indexed payload field, identify blocks (groups of points with same value)\n2. For blocks smaller than `max_block_size`, check connectivity in main graph\n3. If connectivity is insufficient, build additional `GraphLayersBuilder` for that block\n4. Merge additional links into main graph using `merge_from_other()`\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs453-607](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L453-L607)\n\n### Old Index Reuse\n\nDuring rebuilds, HNSW can reuse structure from an old index to speed up construction:\n\n**Reuse Strategy**:\n\n1. Check if old index has compatible configuration\n2. Create mapping between old and new point IDs\n3. Use `GraphLayersHealer` to migrate links from old index\n4. Only insert truly new points (not in old index)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs261-275](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L261-L275) [lib/segment/src/index/hnsw\\_index/hnsw.rs390-417](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L390-L417)\n\n## Search Algorithm\n\nThe HNSW search consists of two phases: a greedy search from the entry point to level 0, followed by a beam search on level 0.\n\n### Two-Phase Search\n\nTitle: **HNSW Two-Phase Search Algorithm**\n\n```\n```\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs411-439](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L411-L439)\n\n### Search Entry (Phase 1)\n\nThe `search_entry` method performs greedy search from the entry point down to level 0:\n\n```\n```\n\n**Key Characteristic**: Beam size = 1 (follows only the single best neighbor at each step)",
      "index": 7,
      "token_count": 602,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 13446,
      "end_char": 15477
    },
    {
      "content": "``\n```\n\n**Key Characteristic**: Beam size = 1 (follows only the single best neighbor at each step)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs122-151](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L122-L151) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs153-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L153-L190)\n\n### Search on Level (Phase 2)\n\nThe `search_on_level` method performs beam search with configurable `ef` parameter:\n\n**Algorithm**:\n\n1. Initialize `SearchContext` with `ef` capacity\n\n2. Add entry point to candidates and nearest\n\n3. While candidates exist:\n\n   - Pop best candidate from priority queue\n\n   - If its score is worse than `ef`-th best, stop\n\n   - For each unvisited neighbor:\n\n     - Score the neighbor\n     - Add to candidates and nearest if good enough\n\n4. Return top results\n\n**SearchContext Fields**:\n\n- `candidates: FixedLengthPriorityQueue` - Candidates to explore (max-heap by score)\n- `nearest: FixedLengthPriorityQueue` - Best results found (min-heap by score)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs99-120](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L99-L120) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs63-97](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L63-L97)\n\n### Search with Quantized Vectors\n\nWhen quantized vectors are available, HNSW can optionally use them during search for faster distance calculations:\n\n**Two-Stage Scoring**:\n\n1. **Coarse Search**: Use quantized vectors stored in graph links for fast filtering\n2. **Refinement**: Rescore top candidates with original vectors for accuracy\n\nThis is enabled via the `CompressedWithVectors` graph format, where each link embeds the quantized vector of the neighbor.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs969-1035](https://github.",
      "index": 8,
      "token_count": 577,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 15377,
      "end_char": 17391
    },
    {
      "content": "r of the neighbor.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs969-1035](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L969-L1035) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs441-474](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L441-L474)\n\n## Graph Links Storage Formats\n\nHNSW supports three storage formats for graph links, offering different tradeoffs between memory usage, disk size, and search speed.\n\n### Format Comparison\n\n| Format                | Memory Usage | Disk Size | Search Speed | Quantization Support |\n| --------------------- | ------------ | --------- | ------------ | -------------------- |\n| Plain                 | High         | High      | Fast         | No                   |\n| Compressed            | Medium       | Low       | Fast         | No                   |\n| CompressedWithVectors | Medium-High  | Medium    | Fastest\\*    | Yes                  |\n\n\\*When using quantized search with embedded vectors\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links.rs56-61](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L56-L61)\n\n### Plain Format\n\nThe `Plain` format stores links as uncompressed arrays of `u32` neighbor IDs.\n\n**File Structure**:\n\n```\n[HeaderPlain]\n[level_offsets: u64[]]\n[reindex: u32[]]\n[neighbors: u32[]]\n[padding: u8[]]\n[offsets: u64[]]\n```\n\n**HeaderPlain Fields**:\n\n- `point_count`: Number of points in the graph\n- `levels_count`: Number of levels in the graph\n- `total_neighbors_count`: Total number of neighbor entries\n- `total_offset_count`: Number of offset entries\n- `offsets_padding_bytes`: Padding before offsets array (0 or 4 bytes)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs9-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs#L9-L20) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs121-135](https://github.",
      "index": 9,
      "token_count": 576,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 17291,
      "end_char": 19316
    },
    {
      "content": "ks/header.rs#L9-L20) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs121-135](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs#L121-L135)\n\n### Compressed Format\n\nThe `Compressed` format uses bit-packing to reduce storage:\n\n**Compression Techniques**:\n\n1. **Sorted Prefix**: First M links are sorted and stored with delta encoding\n2. **Unsorted Suffix**: Remaining links use variable-bit encoding\n3. **Offset Compression**: Offsets are compressed using bitpacking\n\n**File Structure**:\n\n```\n[HeaderCompressed]\n[level_offsets: u64[]]\n[reindex: u32[]]\n[neighbors: u8[]] (compressed)\n[offsets: u8[]] (compressed)\n```\n\n**HeaderCompressed Additional Fields**:\n\n- `version`: Magic number `0xFFFF_FFFF_FFFF_FF01`\n- `m`, `m0`: M parameters needed for decompression\n- `offsets_parameters`: Bitpacking parameters for offset decompression\n\n**Compression Ratio**: Typically 2-4x smaller than Plain format\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs22-35](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs#L22-L35) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs137-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs#L137-L166)\n\n### CompressedWithVectors Format\n\nThe `CompressedWithVectors` format embeds quantized vectors alongside links for faster search:\n\n**File Structure**:\n\n```\n[HeaderCompressedWithVectors]\n[level_offsets: u64[]]\n[reindex: u32[]]\n[padding for alignment]\n[neighbors_and_vectors: u8[]]\n[offsets: u8[]] (compressed)\n```\n\n**Per-Point Data Layout** (for level 0):\n\n```\n[base_vector: u8[base_size]]\n[neighbors_count: varint]\n[compressed_links: u8[]]\n[padding for link_vector alignment]\n[link_vectors: u8[neighbors_count * link_size]]\n[padding for next base_vector alignment]\n```\n\n**Per-Point Data Layout** (for level > 0):\n\n```\n[neighbors_count: varint]\n[compressed_links: u8[]]\n[padding for link_vector alignment]",
      "index": 10,
      "token_count": 591,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 19216,
      "end_char": 21234
    },
    {
      "content": "l > 0):\n\n```\n[neighbors_count: varint]\n[compressed_links: u8[]]\n[padding for link_vector alignment]\n[link_vectors: u8[neighbors_count * link_size]]\n```\n\n**HeaderCompressedWithVectors Additional Fields**:\n\n- `version`: Magic number `0xFFFF_FFFF_FFFF_FF02`\n- `base_vector_layout`: Layout of base vectors (size, alignment)\n- `link_vector_layout`: Layout of link vectors (size, alignment)\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs37-52](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs#L37-L52) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs168-213](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs#L168-L213) [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs259-340](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs#L259-L340)\n\n### Reindexing for Level Sorting\n\nAll formats use a \"reindex\" array to optimize level-based access:\n\nTitle: **Graph Links Reindexing Strategy**\n\n```\n```\n\n**Purpose**: Points at higher levels appear first in the flattened links array, enabling efficient level-based iteration without seeking.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/graph\\_links/serializer.rs51-88](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/serializer.rs#L51-L88)\n\n## Configuration Parameters\n\n### HnswGraphConfig\n\nThe `HnswGraphConfig` struct stores persistent HNSW configuration:\n\n| Parameter              | Type            | Description                        | Typical Value                |\n| ---------------------- | --------------- | ---------------------------------- | ---------------------------- |\n| `m`                    | `usize`         | Max links per node (level > 0)     | 16                           |\n| `m0`                   | `usize`         | Max links per node (level 0)       | 32 (2\\*m)                    |",
      "index": 11,
      "token_count": 545,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 21134,
      "end_char": 23119
    },
    {
      "content": "| `usize`         | Max links per node (level 0)       | 32 (2\\*m)                    |\n| `ef_construct`         | `usize`         | Candidate list size during build   | 100                          |\n| `full_scan_threshold`  | `usize`         | Point count to switch to full scan | Calculated from KB threshold |\n| `max_indexing_threads` | `usize`         | Max threads for parallel build     | CPU count                    |\n| `payload_m`            | `Option<usize>` | M for payload-specific graphs      | m or custom                  |\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs140-165](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L140-L165) [lib/segment/src/index/hnsw\\_index/hnsw.rs252-260](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L252-L260)\n\n### HnswConfig (User-Facing)\n\nThe `HnswConfig` type is the user-facing configuration in segment config:\n\n| Parameter              | Type            | Description                         |\n| ---------------------- | --------------- | ----------------------------------- |\n| `m`                    | `usize`         | Connectivity parameter              |\n| `ef_construct`         | `usize`         | Construction quality                |\n| `full_scan_threshold`  | `usize`         | Full scan threshold in KB           |\n| `max_indexing_threads` | `usize`         | Build parallelism                   |\n| `on_disk`              | `Option<bool>`  | Load graph into RAM or keep on disk |\n| `payload_m`            | `Option<usize>` | M for filtered graphs               |\n| `copy_vectors`         | `Option<bool>`  | Use CompressedWithVectors format    |\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs120-127](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L120-L127)\n\n### Search Parameters\n\nSearch behavior is controlled by `SearchParams`:",
      "index": 12,
      "token_count": 523,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 23019,
      "end_char": 24976
    },
    {
      "content": "_index/hnsw.rs#L120-L127)\n\n### Search Parameters\n\nSearch behavior is controlled by `SearchParams`:\n\n| Parameter      | Type                               | Description                  | Default     |\n| -------------- | ---------------------------------- | ---------------------------- | ----------- |\n| `hnsw_ef`      | `Option<usize>`                    | Beam size for level 0 search | `config.ef` |\n| `quantization` | `Option<QuantizationSearchParams>` | Quantization settings        | None        |\n| `exact`        | `Option<bool>`                     | Force exact search           | `false`     |\n\n**ef Parameter**: Higher values improve accuracy but increase search time. Typical range: 32-512.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs942-954](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L942-L954)\n\n## On-Disk vs In-Memory\n\nHNSW supports both in-memory and memory-mapped (on-disk) operation:\n\n**In-Memory Mode** (`on_disk = false`):\n\n- Graph loaded into RAM as `GraphLinksEnum::Ram(Vec<u8>)`\n- Fastest search performance\n- High memory usage\n\n**On-Disk Mode** (`on_disk = true`):\n\n- Graph memory-mapped as `GraphLinksEnum::Mmap(Arc<Mmap>)`\n- Relies on OS page cache\n- Lower memory footprint\n- Slight performance penalty on cold reads\n\n**Default**: Determined by storage configuration, typically `false` for small collections and `true` for large ones.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs169](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L169-L169) [lib/segment/src/index/hnsw\\_index/graph\\_links.rs209-222](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L209-L222) [lib/segment/src/index/hnsw\\_index/graph\\_links.rs225-235](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs#L225-L235)\n\n## GPU Acceleration\n\nWhen compiled with the `gpu` feature and a GPU is available, HNSW can offload graph construction to GPU:",
      "index": 13,
      "token_count": 588,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 24876,
      "end_char": 26915
    },
    {
      "content": "ompiled with the `gpu` feature and a GPU is available, HNSW can offload graph construction to GPU:\n\n**GPU Build Process**:\n\n1. Transfer vectors to GPU memory via `GpuVectorStorage`\n2. Execute parallel graph construction on GPU using `build_hnsw_on_gpu`\n3. If GPU build fails, fall back to CPU implementation\n4. GPU-built graphs are identical to CPU-built graphs\n\n**GPU Support**: Only for the main graph; payload-specific graphs always use CPU.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs279-383](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L279-L383) [lib/segment/src/index/hnsw\\_index/hnsw.rs780-902](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L780-L902) [lib/segment/src/index/hnsw\\_index/hnsw.rs904-939](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L904-L939)\n\n## Telemetry\n\nHNSW tracks search performance across different strategies:\n\n**Telemetry Categories**:\n\n- `unfiltered_plain`: Brute-force search without filters\n- `filtered_plain`: Brute-force search with filters\n- `unfiltered_hnsw`: HNSW search without filters\n- `small_cardinality`: HNSW search with restrictive filters\n- `large_cardinality`: HNSW search with permissive filters\n- `exact_filtered`: Exact filtered search\n- `exact_unfiltered`: Exact unfiltered search\n\nEach category maintains an `OperationDurationsAggregator` to track timing statistics.\n\n**Sources**: [lib/segment/src/index/hnsw\\_index/hnsw.rs95-118](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L95-L118)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [HNSW Index Implementation](#hnsw-index-implementation.md)\n- [Core Architecture](#core-architecture.md)\n- [HNSWIndex](#hnswindex.md)\n- [GraphLayers](#graphlayers.md)\n- [GraphLayersBuilder](#graphlayersbuilder.md)\n- [GraphLinks](#graphlinks.md)\n- [Hierarchical Graph Structure](#hierarchical-graph-structure.md)\n- [Level Assignment](#level-assignment.",
      "index": 14,
      "token_count": 610,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 26815,
      "end_char": 28864
    },
    {
      "content": "rarchical Graph Structure](#hierarchical-graph-structure.md)\n- [Level Assignment](#level-assignment.md)\n- [M Parameters](#m-parameters.md)\n- [Entry Points](#entry-points.md)\n- [Index Construction Process](#index-construction-process.md)\n- [Build Pipeline](#build-pipeline.md)\n- [Point Insertion Algorithm](#point-insertion-algorithm.md)\n- [Heuristic Link Selection](#heuristic-link-selection.md)\n- [Payload-Specific Graphs](#payload-specific-graphs.md)\n- [Old Index Reuse](#old-index-reuse.md)\n- [Search Algorithm](#search-algorithm.md)\n- [Two-Phase Search](#two-phase-search.md)\n- [Search Entry (Phase 1)](#search-entry-phase-1.md)\n- [Search on Level (Phase 2)](#search-on-level-phase-2.md)\n- [Search with Quantized Vectors](#search-with-quantized-vectors.md)\n- [Graph Links Storage Formats](#graph-links-storage-formats.md)\n- [Format Comparison](#format-comparison.md)\n- [Plain Format](#plain-format.md)\n- [Compressed Format](#compressed-format.md)\n- [CompressedWithVectors Format](#compressedwithvectors-format.md)\n- [Reindexing for Level Sorting](#reindexing-for-level-sorting.md)\n- [Configuration Parameters](#configuration-parameters.md)\n- [HnswGraphConfig](#hnswgraphconfig.md)\n- [HnswConfig (User-Facing)](#hnswconfig-user-facing.md)\n- [Search Parameters](#search-parameters.md)\n- [On-Disk vs In-Memory](#on-disk-vs-in-memory.md)\n- [GPU Acceleration](#gpu-acceleration.md)\n- [Telemetry](#telemetry.md)",
      "index": 15,
      "token_count": 386,
      "metadata": {
        "title": "_qdrant_qdrant_3.2-hnsw-index-implementation",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "file_name": "_qdrant_qdrant_3.2-hnsw-index-implementation.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.065791",
        "total_chunks": 16
      },
      "start_char": 28764,
      "end_char": 30812
    },
    {
      "content": "Vector Quantization | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 0,
      "end_char": 2033
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Vector Quantization\n\nRelevant source files\n\n- [Cargo.lock](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.lock)\n- [Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml)\n- [docs/redoc/default\\_version.js](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js)\n- [docs/redoc/index.html](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html)\n- [docs/redoc/v0.10.3/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.3/openapi.json)\n- [docs/redoc/v0.10.4/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.4/openapi.json)\n- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.5/openapi.json)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.",
      "index": 1,
      "token_count": 715,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 1933,
      "end_char": 3962
    },
    {
      "content": "t/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.11.x/openapi.json)\n- [docs/redoc/v1.13.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.13.x/openapi.json)\n- [docs/redoc/v1.15.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.15.x/openapi.json)\n- [lib/api/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml)\n- [lib/collection/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml)\n- [lib/common/common/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)\n- [lib/common/dataset/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/dataset/Cargo.toml)\n- [lib/common/io/src/file\\_operations.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/io/src/file_operations.rs)\n- [lib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.toml)\n- [lib/segment/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml)\n- [lib/segment/benches/hnsw\\_build\\_asymptotic.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_asymptotic.rs)\n- [lib/segment/benches/hnsw\\_build\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_graph.rs)\n- [lib/segment/benches/hnsw\\_search\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_search_graph.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs)",
      "index": 2,
      "token_count": 744,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 3862,
      "end_char": 5905
    },
    {
      "content": "rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/serializer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/serializer.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs)\n- [lib/segment/src/index/hnsw\\_index/hnsw.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/mod.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/test\\_compact\\_graph\\_layer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/test_compact_graph_layer.rs)\n- [lib/sparse/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/Cargo.toml)\n- [lib/storage/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [tools/missed\\_cherry\\_picks.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/missed_cherry_picks.sh)\n\nVector quantization in Qdrant provides memory optimization techniques that reduce the storage footprint of high-dimensional vectors while maintaining search accuracy. This system supports multiple quantization methods including scalar quantization, product quantization, and binary quantization, with both in-memory and memory-mapped storage options.\n\nFor information about vector indexing structures, see [HNSW Index Implementation](qdrant/qdrant/3.1-vector-storage-formats.md). For payload data indexing, see [Payload Indexing and Filtering](qdrant/qdrant/3.2-hnsw-index-implementation.md).\n\n## Quantization Types and Storage Architecture",
      "index": 3,
      "token_count": 597,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 5805,
      "end_char": 7820
    },
    {
      "content": "](qdrant/qdrant/3.2-hnsw-index-implementation.md).\n\n## Quantization Types and Storage Architecture\n\nQdrant implements three primary quantization methods through the `QuantizedVectorStorage` enum, each with distinct memory and accuracy trade-offs:\n\n| Quantization Type     | Configuration               | Encoding            | Use Case                                   |\n| --------------------- | --------------------------- | ------------------- | ------------------------------------------ |\n| `ScalarQuantization`  | `ScalarQuantizationConfig`  | `EncodedVectorsU8`  | Uniform quantization to 8-bit integers     |\n| `ProductQuantization` | `ProductQuantizationConfig` | `EncodedVectorsPQ`  | Subspace quantization with codebooks       |\n| `BinaryQuantization`  | `BinaryQuantizationConfig`  | `EncodedVectorsBin` | Bit-level encoding for maximum compression |\n\n```\n```\n\n**QuantizedVectorStorage Architecture with Configuration Details**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs83-96](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L83-L96) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs59-81](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L59-L81) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs22-27](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L22-L27)\n\n## Vector Storage Integration\n\nThe quantization system integrates with Qdrant's vector storage layer through the `VectorStorage` trait and `VectorStorageEnum`. The `QuantizedVectors` struct wraps `QuantizedVectorStorage` and implements the `RawScorer` interface. The system supports three vector element types with corresponding storage variants:\n\n| Element Type            | Rust Type | Storage Variants                                          | Use Case                   |",
      "index": 4,
      "token_count": 476,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 7720,
      "end_char": 9715
    },
    {
      "content": "ust Type | Storage Variants                                          | Use Case                   |\n| ----------------------- | --------- | --------------------------------------------------------- | -------------------------- |\n| `VectorElementType`     | `f32`     | `DenseSimple`, `DenseMemmap`, `DenseVolatile`             | Standard precision vectors |\n| `VectorElementTypeHalf` | `f16`     | `DenseSimpleHalf`, `DenseMemmapHalf`, `DenseVolatileHalf` | Memory-optimized vectors   |\n| `VectorElementTypeByte` | `u8`      | `DenseSimpleByte`, `DenseMemmapByte`, `DenseVolatileByte` | Compact integer vectors    |\n\n```\n```\n\n**QuantizedVectors Integration Architecture**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs124-130](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L124-L130) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs45-49](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L45-L49) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs161-175](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L161-L175) [lib/segment/src/data\\_types/vectors.rs212-216](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/data_types/vectors.rs#L212-L216) [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs189-321](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L189-L321)\n\n## Creation and Loading Process\n\nQuantized vectors are created from existing `VectorStorageEnum` instances through a dispatch-based process that handles both single vectors and multi-vectors:\n\n| Component                       | Purpose                                             | File Location                                                                                                 |",
      "index": 5,
      "token_count": 526,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 9615,
      "end_char": 11590
    },
    {
      "content": "n                                                                                                 |\n| ------------------------------- | --------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| `QuantizedVectors::create()`    | Main entry point dispatching on VectorStorageEnum   | [quantized\\_vectors.rs286-390](https://github.com/qdrant/qdrant/blob/48203e41/quantized_vectors.rs#L286-L390) |\n| `create_impl()`                 | Implementation for DenseVectorStorage types         | [quantized\\_vectors.rs392-467](https://github.com/qdrant/qdrant/blob/48203e41/quantized_vectors.rs#L392-L467) |\n| `create_multi_impl()`           | Implementation for MultiVectorStorage types         | [quantized\\_vectors.rs469-559](https://github.com/qdrant/qdrant/blob/48203e41/quantized_vectors.rs#L469-L559) |\n| `construct_vector_parameters()` | Builds vector\\_parameters from distance, dim, count | [quantized\\_vectors.rs721-730](https://github.com/qdrant/qdrant/blob/48203e41/quantized_vectors.rs#L721-L730) |\n\n```\n```\n\n**QuantizedVectors::create() Flow with Preprocessing Details**\n\nThe `quantization_preprocess()` method performs vector preprocessing based on the quantization type and distance metric, handling different vector element types (`f32`, `f16`, `u8`) and applying distance-specific transformations before encoding.\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs286-390](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L286-L390) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs40-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L40-L43) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs392-467](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.",
      "index": 6,
      "token_count": 551,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 11490,
      "end_char": 13491
    },
    {
      "content": "//github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L392-L467) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs406-412](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L406-L412) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs721-730](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L721-L730)\n\n## Storage File Structure\n\nQuantized vectors persist to disk using a standardized file structure with constants defined in `quantized_vectors.rs`:\n\n| File                     | Purpose                                   | Constant                 | Required For                   |\n| ------------------------ | ----------------------------------------- | ------------------------ | ------------------------------ |\n| `quantized.config.json`  | QuantizedVectorsConfig serialization      | `QUANTIZED_CONFIG_PATH`  | All quantized vectors          |\n| `quantized.data`         | EncodedVectors binary data                | `QUANTIZED_DATA_PATH`    | All quantized vectors          |\n| `quantized.meta.json`    | EncodedVectors metadata                   | `QUANTIZED_META_PATH`    | All quantized vectors          |\n| `quantized.offsets.data` | MultivectorOffset array for multi-vectors | `QUANTIZED_OFFSETS_PATH` | Multi-vector quantization only |\n\n```\n```\n\n**Quantized Vector File Management**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs40-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L40-L43) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs263-276](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L263-L276) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs565-640](https://github.",
      "index": 7,
      "token_count": 541,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 13391,
      "end_char": 15365
    },
    {
      "content": "#L263-L276) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs565-640](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L565-L640)\n\n## Query Processing and Scoring\n\nThe quantization system provides optimized query processing through the `raw_scorer()` and `raw_internal_scorer()` methods that create specialized scorers operating on quantized data:\n\n```\n```\n\n**QuantizedVectors RawScorer Interface**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs161-175](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L161-L175) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs177-228](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L177-L228) [lib/segment/src/vector\\_storage/raw\\_scorer.rs31-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/raw_scorer.rs#L31-L43)\n\n## Memory Management Strategies\n\nQuantization supports both in-memory and memory-mapped storage determined by the `is_ram()` function and `VectorStorage::is_on_disk()` method:\n\n| Storage Variant                | Condition                     | Backend Implementation               |\n| ------------------------------ | ----------------------------- | ------------------------------------ |\n| ScalarRam, PQRam, BinaryRam    | `is_ram() == true`            | `ChunkedVectors<T>`                  |\n| ScalarMmap, PQMmap, BinaryMmap | `is_ram() == false`           | `QuantizedMmapStorage`               |\n| Multi variants                 | Same logic as single variants | Includes `MultivectorOffsetsStorage` |\n\nThe `is_ram()` function determines storage type based on quantization configuration and source vector storage:\n\n```\n```",
      "index": 8,
      "token_count": 496,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 15265,
      "end_char": 17120
    },
    {
      "content": "on determines storage type based on quantization configuration and source vector storage:\n\n```\n```\n\nEach quantization configuration includes an `always_ram` field that explicitly controls storage type, overriding the default behavior based on the source vector storage's `is_on_disk()` property.\n\n```\n```\n\n**Quantization Storage Selection Logic**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs732-734](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L732-L734) [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs580-622](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L580-L622) [lib/segment/src/vector\\_storage/vector\\_storage\\_base.rs48](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/vector_storage_base.rs#L48-L48)\n\n## Multi-Vector Quantization\n\nFor multi-vector configurations, quantization includes additional offset tracking to maintain vector boundaries:\n\n```\n```\n\n**Multi-Vector Quantization Structure**\n\nSources: [lib/segment/src/vector\\_storage/quantized/quantized\\_vectors.rs434-452](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_vectors.rs#L434-L452) [lib/segment/src/vector\\_storage/quantized/quantized\\_multivector\\_storage.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/vector_storage/quantized/quantized_multivector_storage.rs)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Vector Quantization](#vector-quantization.md)\n- [Quantization Types and Storage Architecture](#quantization-types-and-storage-architecture.md)\n- [Vector Storage Integration](#vector-storage-integration.md)\n- [Creation and Loading Process](#creation-and-loading-process.md)\n- [Storage File Structure](#storage-file-structure.md)\n- [Query Processing and Scoring](#query-processing-and-scoring.md)\n- [Memory Management Strategies](#memory-management-strategies.md)",
      "index": 9,
      "token_count": 545,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 17020,
      "end_char": 19068
    },
    {
      "content": "query-processing-and-scoring.md)\n- [Memory Management Strategies](#memory-management-strategies.md)\n- [Multi-Vector Quantization](#multi-vector-quantization.md)",
      "index": 10,
      "token_count": 36,
      "metadata": {
        "title": "_qdrant_qdrant_3.3-vector-quantization",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.3-vector-quantization.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.3-vector-quantization.md",
        "file_name": "_qdrant_qdrant_3.3-vector-quantization.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.108948",
        "total_chunks": 11
      },
      "start_char": 18968,
      "end_char": 21016
    },
    {
      "content": "Sparse Vector Indexing | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 626,
      "metadata": {
        "title": "_qdrant_qdrant_3.4-sparse-vector-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "file_name": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.149050",
        "total_chunks": 8
      },
      "start_char": 0,
      "end_char": 2036
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Sparse Vector Indexing\n\nRelevant source files\n\n- [Cargo.lock](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.lock)\n- [Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml)\n- [docs/redoc/default\\_version.js](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js)\n- [docs/redoc/index.html](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html)\n- [docs/redoc/v0.10.3/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.3/openapi.json)\n- [docs/redoc/v0.10.4/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.4/openapi.json)\n- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.5/openapi.json)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.",
      "index": 1,
      "token_count": 716,
      "metadata": {
        "title": "_qdrant_qdrant_3.4-sparse-vector-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "file_name": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.149050",
        "total_chunks": 8
      },
      "start_char": 1936,
      "end_char": 3968
    },
    {
      "content": "t/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.11.x/openapi.json)\n- [docs/redoc/v1.13.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.13.x/openapi.json)\n- [docs/redoc/v1.15.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.15.x/openapi.json)\n- [lib/api/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml)\n- [lib/collection/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml)\n- [lib/common/common/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)\n- [lib/common/dataset/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/dataset/Cargo.toml)\n- [lib/common/io/src/file\\_operations.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/io/src/file_operations.rs)\n- [lib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.toml)\n- [lib/segment/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml)\n- [lib/segment/benches/hnsw\\_build\\_asymptotic.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_asymptotic.rs)\n- [lib/segment/benches/hnsw\\_build\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_graph.rs)\n- [lib/segment/benches/hnsw\\_search\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_search_graph.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs)",
      "index": 2,
      "token_count": 744,
      "metadata": {
        "title": "_qdrant_qdrant_3.4-sparse-vector-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "file_name": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.149050",
        "total_chunks": 8
      },
      "start_char": 3868,
      "end_char": 5911
    },
    {
      "content": "rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/serializer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/serializer.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs)\n- [lib/segment/src/index/hnsw\\_index/hnsw.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/mod.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/test\\_compact\\_graph\\_layer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/test_compact_graph_layer.rs)\n- [lib/sparse/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/Cargo.toml)\n- [lib/storage/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [tools/missed\\_cherry\\_picks.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/missed_cherry_picks.sh)\n\nThis document covers Qdrant's sparse vector indexing system, which provides efficient storage and search capabilities for sparse vectors using inverted index data structures. For dense vector indexing, see [HNSW Index Implementation](qdrant/qdrant/3.1-vector-storage-formats.md). For payload-based filtering, see [Payload Indexing and Filtering](qdrant/qdrant/3.2-hnsw-index-implementation.md).\n\nThe sparse vector indexing system enables keyword-style search and hybrid search scenarios by maintaining inverted indexes that map dimension IDs to posting lists containing document IDs and weights.\n\n## Architecture Overview",
      "index": 3,
      "token_count": 592,
      "metadata": {
        "title": "_qdrant_qdrant_3.4-sparse-vector-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "file_name": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.149050",
        "total_chunks": 8
      },
      "start_char": 5811,
      "end_char": 7807
    },
    {
      "content": "map dimension IDs to posting lists containing document IDs and weights.\n\n## Architecture Overview\n\nThe sparse vector indexing system is built around the `SparseVectorIndex` class which provides a unified interface for different types of inverted indexes. The system supports both mutable and immutable indexes, with options for RAM-based and memory-mapped storage.\n\n### Core Architecture\n\n```\n```\n\nSources: [lib/segment/src/index/sparse\\_index/sparse\\_vector\\_index.rs45-55](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sparse_index/sparse_vector_index.rs#L45-L55) [lib/sparse/src/index/search\\_context.rs26-37](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/search_context.rs#L26-L37) [lib/segment/src/index/sparse\\_index/sparse\\_index\\_config.rs13-25](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sparse_index/sparse_index_config.rs#L13-L25)\n\n## Index Types and Storage\n\nThe system supports multiple index implementations optimized for different use cases, from mutable RAM indexes for real-time updates to compressed memory-mapped indexes for large-scale read-only scenarios.\n\n### Index Type Hierarchy\n\n```\n```\n\nSources: [lib/segment/src/index/sparse\\_index/sparse\\_index\\_config.rs17-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sparse_index/sparse_index_config.rs#L17-L43) [lib/sparse/src/index/inverted\\_index/mod.rs24-86](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/inverted_index/mod.rs#L24-L86) [lib/sparse/src/index/inverted\\_index/inverted\\_index\\_ram.rs23-33](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/inverted_index/inverted_index_ram.rs#L23-L33)\n\n### Weight Type Support\n\nThe compressed index implementations support multiple weight types for memory optimization:\n\n| Weight Type   | Description                 | Use Case                                      |\n| ------------- | --------------------------- | --------------------------------------------- |",
      "index": 4,
      "token_count": 526,
      "metadata": {
        "title": "_qdrant_qdrant_3.4-sparse-vector-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "file_name": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.149050",
        "total_chunks": 8
      },
      "start_char": 7707,
      "end_char": 9726
    },
    {
      "content": "|\n| ------------- | --------------------------- | --------------------------------------------- |\n| `f32`         | Full precision float        | High accuracy requirements                    |\n| `half::f16`   | Half precision float        | Memory savings with good precision            |\n| `u8`          | 8-bit unsigned integer      | Extreme compression (testing only)            |\n| `QuantizedU8` | Quantized 8-bit with params | Optimal compression with calibrated precision |\n\nSources: [lib/sparse/src/common/types.rs11-161](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/common/types.rs#L11-L161)\n\n## Search Process\n\nThe search system uses a `SearchContext` to coordinate queries across multiple posting lists, with sophisticated pruning mechanisms to optimize performance.\n\n### Search Flow\n\n```\n```\n\nSources: [lib/sparse/src/index/search\\_context.rs39-94](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/search_context.rs#L39-L94) [lib/sparse/src/index/search\\_context.rs269-355](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/search_context.rs#L269-L355) [lib/segment/src/index/sparse\\_index/sparse\\_vector\\_index.rs440-482](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sparse_index/sparse_vector_index.rs#L440-L482)\n\n### Pruning Mechanism\n\nThe search system implements sophisticated pruning to skip posting list elements that cannot contribute to top-k results:\n\n```\n```\n\nSources: [lib/sparse/src/index/search\\_context.rs360-421](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/search_context.rs#L360-L421)\n\n## Data Structures\n\n### Posting Lists\n\nPosting lists are the core data structure storing (record\\_id, weight) pairs for each dimension, sorted by record\\_id for efficient traversal and binary search.\n\n#### Posting List Structure\n\n```\n```\n\nSources: [lib/sparse/src/index/posting\\_list.rs11-15](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/posting_list.",
      "index": 5,
      "token_count": 548,
      "metadata": {
        "title": "_qdrant_qdrant_3.4-sparse-vector-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "file_name": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.149050",
        "total_chunks": 8
      },
      "start_char": 9626,
      "end_char": 11620
    },
    {
      "content": "ing\\_list.rs11-15](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/posting_list.rs#L11-L15) [lib/sparse/src/index/posting\\_list\\_common.rs23-31](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/posting_list_common.rs#L23-L31) [lib/sparse/src/index/compressed\\_posting\\_list.rs21-37](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/compressed_posting_list.rs#L21-L37)\n\n### Indices Tracking\n\nThe `IndicesTracker` manages dimension ID remapping to ensure contiguous posting list arrays:\n\n| Component              | Purpose                                                 |\n| ---------------------- | ------------------------------------------------------- |\n| `original_to_remapped` | Maps original dimension IDs to contiguous array indices |\n| `remapped_to_original` | Reverse mapping for reconstruction                      |\n| `remap_vector()`       | Converts sparse vectors to use remapped indices         |\n\nSources: [lib/segment/src/index/sparse\\_index/indices\\_tracker.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sparse_index/indices_tracker.rs)\n\n## Configuration and Optimization\n\n### Sparse Index Configuration\n\nThe `SparseIndexConfig` controls index behavior and performance characteristics:\n\n```\n```\n\n### Performance Thresholds\n\n| Threshold             | Default | Purpose                                      |\n| --------------------- | ------- | -------------------------------------------- |\n| `full_scan_threshold` | 20,000  | Switch to plain search for small result sets |\n| `ADVANCE_BATCH_SIZE`  | 10,000  | Batch size for posting list processing       |\n| `CHUNK_SIZE`          | 128     | Elements per compressed chunk                |\n\nSources: [lib/segment/src/index/sparse\\_index/sparse\\_index\\_config.rs45-62](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sparse_index/sparse_index_config.rs#L45-L62) [lib/sparse/src/index/search\\_context.rs24](https://github.",
      "index": 6,
      "token_count": 501,
      "metadata": {
        "title": "_qdrant_qdrant_3.4-sparse-vector-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "file_name": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.149050",
        "total_chunks": 8
      },
      "start_char": 11520,
      "end_char": 13512
    },
    {
      "content": "se_index/sparse_index_config.rs#L45-L62) [lib/sparse/src/index/search\\_context.rs24](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/search_context.rs#L24-L24) [lib/sparse/src/index/compressed\\_posting\\_list.rs19](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/src/index/compressed_posting_list.rs#L19-L19)\n\n### Index Selection Strategy\n\nThe system automatically selects between indexed search and plain search based on query cardinality:\n\n```\n```\n\nSources: [lib/segment/src/index/sparse\\_index/sparse\\_vector\\_index.rs452-481](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sparse_index/sparse_vector_index.rs#L452-L481)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Sparse Vector Indexing](#sparse-vector-indexing.md)\n- [Architecture Overview](#architecture-overview.md)\n- [Core Architecture](#core-architecture.md)\n- [Index Types and Storage](#index-types-and-storage.md)\n- [Index Type Hierarchy](#index-type-hierarchy.md)\n- [Weight Type Support](#weight-type-support.md)\n- [Search Process](#search-process.md)\n- [Search Flow](#search-flow.md)\n- [Pruning Mechanism](#pruning-mechanism.md)\n- [Data Structures](#data-structures.md)\n- [Posting Lists](#posting-lists.md)\n- [Posting List Structure](#posting-list-structure.md)\n- [Indices Tracking](#indices-tracking.md)\n- [Configuration and Optimization](#configuration-and-optimization.md)\n- [Sparse Index Configuration](#sparse-index-configuration.md)\n- [Performance Thresholds](#performance-thresholds.md)\n- [Index Selection Strategy](#index-selection-strategy.md)",
      "index": 7,
      "token_count": 439,
      "metadata": {
        "title": "_qdrant_qdrant_3.4-sparse-vector-indexing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "file_name": "_qdrant_qdrant_3.4-sparse-vector-indexing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.149050",
        "total_chunks": 8
      },
      "start_char": 13412,
      "end_char": 15460
    },
    {
      "content": "Payload Indexing and Filtering | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 0,
      "end_char": 2044
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Payload Indexing and Filtering\n\nRelevant source files\n\n- [lib/segment/src/index/field\\_index/field\\_index\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs)\n- [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs)\n- [lib/segment/src/index/field\\_index/index\\_selector.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs)\n- [lib/segment/src/index/plain\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_payload_index.rs)\n- [lib/segment/src/index/struct\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs)\n- [lib/segment/src/index/vector\\_index\\_base.rs](https://github.",
      "index": 1,
      "token_count": 634,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 1944,
      "end_char": 3971
    },
    {
      "content": "/src/index/struct_payload_index.rs)\n- [lib/segment/src/index/vector\\_index\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/vector_index_base.rs)\n\n## Purpose and Scope\n\nThis document explains Qdrant's payload indexing and filtering system, which enables efficient filtering of vector search results based on structured metadata (JSON payloads) attached to points. Payload indices accelerate filter evaluation by building specialized data structures for different field types, allowing queries to skip vector similarity computation for points that don't match filter criteria.\n\nFor information about vector indexing (HNSW, quantization), see [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md). For the complete search flow including filter application during vector search, see [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md).\n\n## Core Components and Architecture\n\nQdrant implements two payload index strategies at the segment level:\n\n- **`StructPayloadIndex`**: Full-featured implementation that builds and maintains field-specific indices for accelerated filtering\n- **`PlainPayloadIndex`**: Minimal implementation that performs full scans without indices, used for small segments where index overhead outweighs benefits\n\nBoth implement the `PayloadIndex` trait, which defines the interface for filter evaluation, cardinality estimation, and index management.\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs78-98](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L78-L98) [lib/segment/src/index/plain\\_payload\\_index.rs27-32](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_payload_index.rs#L27-L32)\n\n### StructPayloadIndex Implementation\n\nThe `StructPayloadIndex` struct maintains multiple field-specific indices organized by field path. Key components:",
      "index": 2,
      "token_count": 430,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 3871,
      "end_char": 5810
    },
    {
      "content": "adIndex` struct maintains multiple field-specific indices organized by field path. Key components:\n\n| Component         | Type                                     | Purpose                                     |\n| ----------------- | ---------------------------------------- | ------------------------------------------- |\n| `payload`         | `Arc<AtomicRefCell<PayloadStorageEnum>>` | Stores raw JSON payloads                    |\n| `id_tracker`      | `Arc<AtomicRefCell<IdTrackerSS>>`        | Tracks point existence and internal IDs     |\n| `vector_storages` | `HashMap<VectorNameBuf, Arc<...>>`       | For `has_vector` condition evaluation       |\n| `field_indexes`   | `IndexesMap`                             | Maps field paths to index implementations   |\n| `config`          | `PayloadConfig`                          | Persisted index configuration               |\n| `storage_type`    | `StorageType`                            | Determines backend (RocksDB/Mmap/Gridstore) |\n\nThe `field_indexes` map uses `JsonPath` as keys, allowing nested field indexing. Each field can have multiple indices (e.g., integer fields may have both range and lookup indices).\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs79-98](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L79-L98)\n\n## Field Index Types\n\nEach field type requires specialized data structures for efficient filtering. Qdrant provides nine index types, wrapped in the `FieldIndex` enum.\n\n```\n```\n\n**Sources:** [lib/segment/src/index/field\\_index/field\\_index\\_base.rs131-143](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L131-L143)\n\n### Numeric Indices\n\nNumeric indices (`NumericIndex<T, P>`) support range queries using a mutable interval tree structure. They handle:\n\n- **Integer fields**: Range queries, comparisons (`<`, `>`, `<=`, `>=`, `=`)\n- **Float fields**: Same operations with floating-point values",
      "index": 3,
      "token_count": 455,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 5710,
      "end_char": 7699
    },
    {
      "content": "parisons (`<`, `>`, `<=`, `>=`, `=`)\n- **Float fields**: Same operations with floating-point values\n- **Datetime fields**: Stored as integer timestamps, enabling range-based temporal queries\n\n**Sources:** [lib/segment/src/index/field\\_index/field\\_index\\_base.rs132-140](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L132-L140)\n\n### Map Indices (Hash-Based)\n\nMap indices (`MapIndex<K>`) provide O(1) exact-match lookups using hash maps:\n\n- **KeywordIndex**: String exact matching for tags, categories\n- **IntMapIndex**: Integer exact matching with faceting support\n- **UuidMapIndex**: UUID exact matching\n\nThese indices also support the facet API for aggregation queries.\n\n**Sources:** [lib/segment/src/index/field\\_index/field\\_index\\_base.rs134-141](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L134-L141)\n\n### Full-Text Index\n\nThe `FullTextIndex` implements tokenized text search with configurable tokenization:\n\n```\n```\n\nText queries are parsed into three types:\n\n- **AllTokens**: Match documents containing all query tokens (AND logic)\n- **Phrase**: Match documents with tokens in exact order\n- **AnyTokens**: Match documents containing any query token (OR logic)\n\n**Sources:** [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs37-322](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs#L37-L322)\n\n### Geo, Bool, and Null Indices\n\n- **GeoIndex**: Spatial index supporting radius and bounding box queries\n- **BoolIndex**: Bitmap-based index for true/false values\n- **NullIndex**: Tracks which points have null/missing values for a field\n\nThe `NullIndex` complements every other index type, enabling efficient \"field exists\" queries.\n\n**Sources:** [lib/segment/src/index/field\\_index/field\\_index\\_base.rs137-142](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.",
      "index": 4,
      "token_count": 545,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 7599,
      "end_char": 9603
    },
    {
      "content": "](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L137-L142) [lib/segment/src/index/struct\\_payload\\_index.rs202-209](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L202-L209)\n\n## Storage Backends and Index Selection\n\nQdrant supports three storage backends for payload indices, selected via the `IndexSelector` abstraction.\n\n### Storage Backend Types\n\n| Backend              | Use Case           | Appendable | Description                                   |\n| -------------------- | ------------------ | ---------- | --------------------------------------------- |\n| **RocksDB** (legacy) | Historical         | Yes/No     | Embedded key-value store, being migrated away |\n| **Gridstore**        | Mutable segments   | Yes        | Custom blob storage for in-memory indices     |\n| **Mmap**             | Immutable segments | No         | Memory-mapped files, supports on-disk mode    |\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs46-75](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L46-L75) [lib/segment/src/index/field\\_index/index\\_selector.rs31-58](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L31-L58)\n\n### Index Selection Strategy\n\nThe `IndexSelector` enum encapsulates storage backend selection logic:\n\n```\n```\n\nSelection is based on:\n\n1. **Segment mutability**: Appendable segments prefer Gridstore/RocksDB\n2. **Configuration flags**: `skip_rocksdb` forces non-RocksDB backends\n3. **Field schema**: `is_on_disk` flag influences Mmap usage\n4. **Migration state**: Active migration from RocksDB to Gridstore\n\n**Sources:** [lib/segment/src/index/field\\_index/index\\_selector.rs31-148](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L31-L148)\n\n### RocksDB Migration\n\nQdrant is actively migrating away from RocksDB indices.",
      "index": 5,
      "token_count": 539,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 9503,
      "end_char": 11509
    },
    {
      "content": "elector.rs#L31-L148)\n\n### RocksDB Migration\n\nQdrant is actively migrating away from RocksDB indices. When the `migrate_rocksdb_payload_indices` feature flag is enabled:\n\n1. Existing RocksDB indices are detected during load ([line 251-256](<https://github.com/qdrant/qdrant/blob/48203e41/line 251-256>))\n2. All RocksDB indices are cleaned up ([line 274-280](<https://github.com/qdrant/qdrant/blob/48203e41/line 274-280>))\n3. Storage type is changed to Gridstore ([line 261-270](<https://github.com/qdrant/qdrant/blob/48203e41/line 261-270>))\n4. Indices are rebuilt using the new backend ([line 284-294](<https://github.com/qdrant/qdrant/blob/48203e41/line 284-294>))\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs248-281](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L248-L281)\n\n## Filter Evaluation and Cardinality Estimation\n\nFilter evaluation in Qdrant follows a two-phase approach: **cardinality estimation** followed by **point iteration**.\n\n### Cardinality Estimation\n\nBefore executing a filter, `StructPayloadIndex` estimates how many points match using `estimate_cardinality()`:\n\n```\n```\n\nThe `CardinalityEstimation` struct contains:\n\n- **primary\\_clauses**: Conditions that can use index iterators directly\n- **min/exp/max**: Cardinality bounds for query planning\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs507-942](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L507-L942)\n\n### Primary Clauses and Filter Optimization\n\nPrimary clauses are filter conditions that can be evaluated entirely by index iteration, avoiding payload access:\n\n| Clause Type                   | When Used           | Example                               |\n| ----------------------------- | ------------------- | ------------------------------------- |\n| `PrimaryCondition::Condition` | Field has index     | `age > 25` with indexed integer field |",
      "index": 6,
      "token_count": 562,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 11409,
      "end_char": 13369
    },
    {
      "content": "- |\n| `PrimaryCondition::Condition` | Field has index     | `age > 25` with indexed integer field |\n| `PrimaryCondition::Ids`       | Has ID filter       | `id in [1, 2, 3]`                     |\n| `PrimaryCondition::HasVector` | Vector exists check | `has_vector(\"image\")`                 |\n\nThe optimizer selects primary clauses during estimation ([line 635-639](<https://github.com/qdrant/qdrant/blob/48203e41/line 635-639>)), enabling efficient iteration strategies.\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs614-680](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L614-L680)\n\n### Filter Execution Strategies\n\n`iter_filtered_points()` implements three strategies based on primary clauses:\n\n```\n```\n\n**Strategy A (Full Scan)**: No primary clauses available. Iterate all points, apply full filter.\n\n**Strategy B (Primary Only)**: All conditions are primary. Iterate index results, deduplicate with visited pool.\n\n**Strategy C (Primary + Filter)**: Some conditions primary. Iterate index results, deduplicate, then apply remaining filter conditions.\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs614-680](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L614-L680)\n\n### StructFilterContext\n\nThe `StructFilterContext` wraps an optimized filter for efficient point-by-point checking:\n\n```\n```\n\nThis context is used during vector search to check individual points against filter conditions.\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs490-505](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L490-L505)\n\n## Index Building and Lifecycle\n\n### Index Creation Flow\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs447-883](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L447-L883)\n\n### Builder Pattern\n\nEach index type implements `FieldIndexBuilderTrait`:\n\n```\n```\n\nThe builder pattern enables:",
      "index": 7,
      "token_count": 562,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 13269,
      "end_char": 15316
    },
    {
      "content": "ttern\n\nEach index type implements `FieldIndexBuilderTrait`:\n\n```\n```\n\nThe builder pattern enables:\n\n- **Batch construction**: All points added before finalization\n- **Backend-specific initialization**: Different setup for RocksDB vs Mmap\n- **Immutable result**: `finalize()` consumes builder, returns immutable index\n\n**Sources:** [lib/segment/src/index/field\\_index/field\\_index\\_base.rs537-563](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L537-L563)\n\n### Index Updates and Maintenance\n\nFor mutable segments, indices support incremental updates:\n\n```\n```\n\nThe `add_point()` method internally calls `remove_point()` first to handle value changes correctly.\n\n**Sources:** [lib/segment/src/index/field\\_index/field\\_index\\_base.rs274-331](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L274-L331)\n\n### Index Persistence\n\nIndex configuration is persisted in `PayloadConfig`:\n\n```\n```\n\nEach indexed field stores:\n\n- **schema**: Field type and indexing parameters\n- **types**: Exact index implementation types (for reload)\n\nThis allows loading indices with the correct backend on segment reopening.\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs141-172](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L141-L172)\n\n## Index Cleanup and Memory Management\n\n### Cleanup Operations\n\nIndices can be explicitly cleaned up via:\n\n```\n```\n\nEach `FieldIndex` variant implements cleanup to remove:\n\n- RocksDB column families\n- Mmap files\n- Gridstore blobs\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs885-900](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L885-L900)\n\n### Cache Management\n\nFor memory-mapped indices, Qdrant provides cache control operations:\n\n- **`populate()`**: Eagerly load all mmap pages into RAM\n- **`clear_cache()`**: Drop OS page cache for mmap files",
      "index": 8,
      "token_count": 529,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 15216,
      "end_char": 17210
    },
    {
      "content": "`**: Eagerly load all mmap pages into RAM\n- **`clear_cache()`**: Drop OS page cache for mmap files\n\nThese operations are exposed on both `FieldIndex` and `StructPayloadIndex`:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs779-806](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L779-L806) [lib/segment/src/index/field\\_index/field\\_index\\_base.rs448-479](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L448-L479)\n\n## Integration with Search Pipeline\n\nDuring vector search, payload filtering occurs in two places:\n\n1. **Pre-filtering**: `estimate_cardinality()` + `iter_filtered_points()` narrows candidates before vector computation\n2. **Post-filtering**: `filter_context().check(id)` verifies individual points during result collection\n\nThe search flow (from Diagram 3) shows this integration:\n\n```\n```\n\n**Sources:** Referenced in high-level Diagram 3 from system architecture\n\n## PlainPayloadIndex for Small Segments\n\nFor segments below the indexing threshold, `PlainPayloadIndex` provides a simpler implementation:\n\n| Feature                | StructPayloadIndex   | PlainPayloadIndex         |\n| ---------------------- | -------------------- | ------------------------- |\n| Index structures       | Yes, multiple types  | No indices                |\n| Filter evaluation      | Index-accelerated    | Full scan                 |\n| Cardinality estimation | Accurate via indices | Returns midpoint estimate |\n| Memory overhead        | Per-field index data | Minimal                   |\n| Update cost            | Index maintenance    | Negligible                |\n\n`PlainPayloadIndex` always returns pessimistic cardinality estimates and relies on the `ConditionCheckerSS` for brute-force filtering.\n\n**Sources:** [lib/segment/src/index/plain\\_payload\\_index.rs23-160](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_payload_index.rs#L23-L160)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh",
      "index": 9,
      "token_count": 493,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 17110,
      "end_char": 19159
    },
    {
      "content": "ment/src/index/plain_payload_index.rs#L23-L160)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Payload Indexing and Filtering](#payload-indexing-and-filtering.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Core Components and Architecture](#core-components-and-architecture.md)\n- [StructPayloadIndex Implementation](#structpayloadindex-implementation.md)\n- [Field Index Types](#field-index-types.md)\n- [Numeric Indices](#numeric-indices.md)\n- [Map Indices (Hash-Based)](#map-indices-hash-based.md)\n- [Full-Text Index](#full-text-index.md)\n- [Geo, Bool, and Null Indices](#geo-bool-and-null-indices.md)\n- [Storage Backends and Index Selection](#storage-backends-and-index-selection.md)\n- [Storage Backend Types](#storage-backend-types.md)\n- [Index Selection Strategy](#index-selection-strategy.md)\n- [RocksDB Migration](#rocksdb-migration.md)\n- [Filter Evaluation and Cardinality Estimation](#filter-evaluation-and-cardinality-estimation.md)\n- [Cardinality Estimation](#cardinality-estimation.md)\n- [Primary Clauses and Filter Optimization](#primary-clauses-and-filter-optimization.md)\n- [Filter Execution Strategies](#filter-execution-strategies.md)\n- [StructFilterContext](#structfiltercontext.md)\n- [Index Building and Lifecycle](#index-building-and-lifecycle.md)\n- [Index Creation Flow](#index-creation-flow.md)\n- [Builder Pattern](#builder-pattern.md)\n- [Index Updates and Maintenance](#index-updates-and-maintenance.md)\n- [Index Persistence](#index-persistence.md)\n- [Index Cleanup and Memory Management](#index-cleanup-and-memory-management.md)\n- [Cleanup Operations](#cleanup-operations.md)\n- [Cache Management](#cache-management.md)\n- [Integration with Search Pipeline](#integration-with-search-pipeline.md)\n- [PlainPayloadIndex for Small Segments](#plainpayloadindex-for-small-segments.md)",
      "index": 10,
      "token_count": 443,
      "metadata": {
        "title": "_qdrant_qdrant_4-payload-indexing-and-filtering",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "file_name": "_qdrant_qdrant_4-payload-indexing-and-filtering.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.185248",
        "total_chunks": 11
      },
      "start_char": 19059,
      "end_char": 21107
    },
    {
      "content": "Field Index Types | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 0,
      "end_char": 2031
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Field Index Types\n\nRelevant source files\n\n- [lib/segment/src/index/field\\_index/field\\_index\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs)\n- [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs)\n- [lib/segment/src/index/field\\_index/index\\_selector.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs)\n- [lib/segment/src/index/plain\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_payload_index.rs)\n- [lib/segment/src/index/struct\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs)\n- [lib/segment/src/index/vector\\_index\\_base.rs](https://github.",
      "index": 1,
      "token_count": 632,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 1931,
      "end_char": 3945
    },
    {
      "content": "/src/index/struct_payload_index.rs)\n- [lib/segment/src/index/vector\\_index\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/vector_index_base.rs)\n\n## Purpose and Scope\n\nThis page documents the specific field index types available in Qdrant for indexing payload data. Each index type is optimized for different data types and query patterns, providing efficient filtering and cardinality estimation during search operations.\n\nFor information about storage backends (RocksDB, Mmap, Gridstore) and how indices are selected and migrated between storage types, see [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md). For the overall payload indexing architecture and how these indices are managed, see [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md).\n\n## Field Index Variants\n\nAll field index types are represented by the `FieldIndex` enum, which provides a unified interface for different specialized index implementations. Each variant wraps a specific index structure optimized for particular data types and query patterns.\n\n**FieldIndex Enum Structure**\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs131-143](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L131-L143)\n\n## Numeric Indices\n\nNumeric indices support range queries and ordering operations on numeric data types. They use interval trees and histograms internally to enable efficient range filtering and cardinality estimation.\n\n### Index Types\n\n| Index Variant   | Underlying Type                                     | Payload Type      | Use Case                |\n| --------------- | --------------------------------------------------- | ----------------- | ----------------------- |\n| `IntIndex`      | `NumericIndex<IntPayloadType, IntPayloadType>`      | 64-bit integers   | Integer range queries   |",
      "index": 2,
      "token_count": 420,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 3845,
      "end_char": 5806
    },
    {
      "content": "`NumericIndex<IntPayloadType, IntPayloadType>`      | 64-bit integers   | Integer range queries   |\n| `DatetimeIndex` | `NumericIndex<IntPayloadType, DateTimePayloadType>` | RFC 3339 datetime | Date/time range queries |\n| `FloatIndex`    | `NumericIndex<FloatPayloadType, FloatPayloadType>`  | 64-bit floats     | Float range queries     |\n| `UuidIndex`     | `NumericIndex<UuidIntType, UuidPayloadType>`        | UUIDs             | UUID ordering           |\n\n### Supported Queries\n\nNumeric indices handle the following field condition types:\n\n- **Range queries**: `gte`, `lte`, `gt`, `lt` conditions\n- **Exact match**: Equality comparisons\n- **Ordering**: Support for `order_by` operations via `StreamRange` iteration\n\n### Internal Structure\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs132-141](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L132-L141) [lib/segment/src/index/field\\_index/numeric\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/numeric_index.rs)\n\n## Map Indices\n\nMap indices provide exact-match lookups using hash-based data structures. They are optimized for equality comparisons and faceted search operations.\n\n### Index Types\n\n| Index Variant  | Underlying Type            | Key Type | Use Case               |\n| -------------- | -------------------------- | -------- | ---------------------- |\n| `KeywordIndex` | `MapIndex<str>`            | String   | Exact keyword matching |\n| `IntMapIndex`  | `MapIndex<IntPayloadType>` | Integer  | Integer equality       |\n| `UuidMapIndex` | `MapIndex<UuidIntType>`    | UUID     | UUID equality          |\n\n### Supported Queries\n\nMap indices handle:\n\n- **Match conditions**: Exact value matching via `Match::Value`\n- **Match Any conditions**: Matching against multiple values via `Match::Any`\n- **Match Except conditions**: Negation via `Match::Except`\n- **Facet operations**: Efficient facet counting for search results\n\n### Internal Structure\n\n```\n```",
      "index": 3,
      "token_count": 507,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 5706,
      "end_char": 7754
    },
    {
      "content": "**Facet operations**: Efficient facet counting for search results\n\n### Internal Structure\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs134-142](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L134-L142) [lib/segment/src/index/field\\_index/map\\_index](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/map_index)\n\n### Integer Field Dual Indexing\n\nInteger fields can be indexed with both `IntIndex` (for range queries) and `IntMapIndex` (for exact match), controlled by the `range` and `lookup` parameters in the payload schema:\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/index\\_selector.rs161-182](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L161-L182)\n\n## Geo Index\n\nThe `GeoIndex` (`GeoMapIndex`) enables spatial queries on geographic coordinates.\n\n### Supported Queries\n\n- **Geo Radius**: Find points within a radius of a coordinate\n- **Geo Bounding Box**: Find points within a rectangular area\n- **Geo Polygon**: Find points within a polygon (via radius decomposition)\n\n### Internal Structure\n\nThe geo index uses an R-tree structure for efficient spatial partitioning and query execution. Points are indexed by their lat/lon coordinates and can be queried with geographic predicates.\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs137](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L137-L137) [lib/segment/src/index/field\\_index/geo\\_index](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/geo_index)\n\n## Full-Text Index\n\nThe `FullTextIndex` supports tokenized text search with configurable tokenization and text analysis.\n\n### Variants\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs37-41](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs#L37-L41)",
      "index": 4,
      "token_count": 575,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 7654,
      "end_char": 9698
    },
    {
      "content": "rant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs#L37-L41)\n\n### Supported Queries\n\n| Query Type   | Parsed As                | Behavior                                 |\n| ------------ | ------------------------ | ---------------------------------------- |\n| Text Match   | `ParsedQuery::AllTokens` | All query tokens must appear in document |\n| Phrase Match | `ParsedQuery::Phrase`    | Query tokens must appear in exact order  |\n| Any Match    | `ParsedQuery::AnyTokens` | At least one query token must appear     |\n\n### Text Processing Pipeline\n\n```\n```\n\n### Tokenization\n\nThe full-text index uses a `Tokenizer` that can be configured with:\n\n- **Lowercase normalization**: Convert tokens to lowercase\n- **Stemming**: Reduce words to root form\n- **Stop words**: Filter common words\n- **Custom tokenizers**: Language-specific processing\n\nSources: [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs171-353](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs#L171-L353)\n\n### Phrase Query Example\n\nPhrase queries preserve token order using a `Document` structure that maintains positional information:\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs284-353](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs#L284-L353)\n\n## Boolean Index\n\nThe `BoolIndex` provides efficient filtering for boolean (true/false) fields.\n\n### Variants\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/bool\\_index](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/bool_index)\n\n### Implementation\n\nBoolean indices use bitmap structures to efficiently store which points have `true` vs `false` values. This allows for:\n\n- Constant-time lookup for boolean conditions\n- Efficient cardinality estimation\n- Minimal memory footprint\n\n## Null Index",
      "index": 5,
      "token_count": 494,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 9598,
      "end_char": 11572
    },
    {
      "content": "or boolean conditions\n- Efficient cardinality estimation\n- Minimal memory footprint\n\n## Null Index\n\nThe `NullIndex` (`MutableNullIndex`) tracks which points have null or missing values for a field. It complements every other index type.\n\n### Purpose\n\nThe null index enables:\n\n- **IsNull condition**: Find points where field is null\n- **IsEmpty condition**: Find points where field has no values\n- **Completeness checking**: Verify data quality\n\n### Automatic Creation\n\nThe null index is automatically added alongside every other index type:\n\n```\n```\n\nSources: [lib/segment/src/index/struct\\_payload\\_index.rs196-209](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L196-L209)\n\n### Structure\n\nThe null index maintains a bitmap tracking which points have null values for the indexed field. It is always mutable and stored on disk using mmap.\n\nSources: [lib/segment/src/index/field\\_index/null\\_index](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/null_index)\n\n## Common Index Interfaces\n\nAll field index types implement common traits that enable polymorphic usage within the `StructPayloadIndex`.\n\n### PayloadFieldIndex Trait\n\nThe `PayloadFieldIndex` trait defines core operations all indices must support:\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs39-76](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L39-L76)\n\n### ValueIndexer Trait\n\nThe `ValueIndexer` trait defines how indices are built and maintained:\n\n| Method                   | Purpose                               |\n| ------------------------ | ------------------------------------- |\n| `add_many(id, values)`   | Add multiple values for a point       |\n| `add_point(id, payload)` | Extract and index values from payload |\n| `remove_point(id)`       | Remove point from index               |\n| `get_value(value)`       | Extract indexable value from JSON     |",
      "index": 6,
      "token_count": 467,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 11472,
      "end_char": 13461
    },
    {
      "content": "int from index               |\n| `get_value(value)`       | Extract indexable value from JSON     |\n| `get_values(value)`      | Extract values, handling arrays       |\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs78-127](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L78-L127)\n\n### FieldIndex Delegation\n\nThe `FieldIndex` enum delegates method calls to the appropriate wrapped index implementation:\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs200-254](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L200-L254)\n\n## Schema to Index Type Mapping\n\nThe `IndexSelector` determines which index types to create based on payload schema configuration.\n\n### Mapping Logic\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/index\\_selector.rs150-205](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L150-L205)\n\n### Integer Field Configuration\n\nInteger fields support dual indexing controlled by schema parameters:\n\n| Parameter | Default | Creates       | Purpose                        |\n| --------- | ------- | ------------- | ------------------------------ |\n| `range`   | `true`  | `IntIndex`    | Range queries (gte, lte, etc.) |\n| `lookup`  | `true`  | `IntMapIndex` | Exact match queries            |\n\nBoth indices can exist simultaneously, with each handling different query types optimally.\n\nSources: [lib/segment/src/index/field\\_index/index\\_selector.rs161-182](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L161-L182)\n\n## Index Type Detection and Storage\n\nWhen loading an existing index, the system checks the persisted `FullPayloadIndexType` which contains:\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs481-533](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L481-L533)",
      "index": 7,
      "token_count": 564,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 13361,
      "end_char": 15389
    },
    {
      "content": "b.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L481-L533)\n\n### Type Consistency Checking\n\nThe system validates that loaded index types match the current payload schema:\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/index\\_selector.rs61-148](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L61-L148)\n\n## Index Builder Pattern\n\nAll field index types support a builder pattern for construction during segment optimization:\n\n### FieldIndexBuilder Enum\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs565-603](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L565-L603)\n\n### Builder Lifecycle\n\n```\n```\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs537-728](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L537-L728) [lib/segment/src/index/struct\\_payload\\_index.rs447-481](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L447-L481)\n\n## Summary Table\n\n| Index Type      | Underlying Structure | Query Types            | Typical Use Case        |\n| --------------- | -------------------- | ---------------------- | ----------------------- |\n| `IntIndex`      | `NumericIndex`       | Range, equality        | Integer ranges          |\n| `DatetimeIndex` | `NumericIndex`       | Range, equality        | Date/time ranges        |\n| `FloatIndex`    | `NumericIndex`       | Range, equality        | Float ranges            |\n| `UuidIndex`     | `NumericIndex`       | Ordering               | UUID ranges             |\n| `IntMapIndex`   | `MapIndex`           | Exact match, match any | Integer facets          |\n| `KeywordIndex`  | `MapIndex`           | Exact match, match any | String keywords, facets |\n| `UuidMapIndex`  | `MapIndex`           | Exact match, match any | UUID equality           |",
      "index": 8,
      "token_count": 557,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 15289,
      "end_char": 17281
    },
    {
      "content": "ets |\n| `UuidMapIndex`  | `MapIndex`           | Exact match, match any | UUID equality           |\n| `GeoIndex`      | `GeoMapIndex`        | Radius, bbox, polygon  | Geographic search       |\n| `FullTextIndex` | `InvertedIndex`      | Text, phrase, any      | Full-text search        |\n| `BoolIndex`     | Bitmap               | Boolean equality       | True/false filters      |\n| `NullIndex`     | Bitmap               | Is null, is empty      | Null value tracking     |\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs131-143](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L131-L143)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Field Index Types](#field-index-types.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Field Index Variants](#field-index-variants.md)\n- [Numeric Indices](#numeric-indices.md)\n- [Index Types](#index-types.md)\n- [Supported Queries](#supported-queries.md)\n- [Internal Structure](#internal-structure.md)\n- [Map Indices](#map-indices.md)\n- [Index Types](#index-types-1.md)\n- [Supported Queries](#supported-queries-1.md)\n- [Internal Structure](#internal-structure-1.md)\n- [Integer Field Dual Indexing](#integer-field-dual-indexing.md)\n- [Geo Index](#geo-index.md)\n- [Supported Queries](#supported-queries-2.md)\n- [Internal Structure](#internal-structure-2.md)\n- [Full-Text Index](#full-text-index.md)\n- [Variants](#variants.md)\n- [Supported Queries](#supported-queries-3.md)\n- [Text Processing Pipeline](#text-processing-pipeline.md)\n- [Tokenization](#tokenization.md)\n- [Phrase Query Example](#phrase-query-example.md)\n- [Boolean Index](#boolean-index.md)\n- [Variants](#variants-1.md)\n- [Implementation](#implementation.md)\n- [Null Index](#null-index.md)\n- [Purpose](#purpose.md)\n- [Automatic Creation](#automatic-creation.md)\n- [Structure](#structure.md)\n- [Common Index Interfaces](#common-index-interfaces.md)\n- [PayloadFieldIndex Trait](#payloadfieldindex-trait.md)",
      "index": 9,
      "token_count": 552,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 17181,
      "end_char": 19188
    },
    {
      "content": "x Interfaces](#common-index-interfaces.md)\n- [PayloadFieldIndex Trait](#payloadfieldindex-trait.md)\n- [ValueIndexer Trait](#valueindexer-trait.md)\n- [FieldIndex Delegation](#fieldindex-delegation.md)\n- [Schema to Index Type Mapping](#schema-to-index-type-mapping.md)\n- [Mapping Logic](#mapping-logic.md)\n- [Integer Field Configuration](#integer-field-configuration.md)\n- [Index Type Detection and Storage](#index-type-detection-and-storage.md)\n- [Type Consistency Checking](#type-consistency-checking.md)\n- [Index Builder Pattern](#index-builder-pattern.md)\n- [FieldIndexBuilder Enum](#fieldindexbuilder-enum.md)\n- [Builder Lifecycle](#builder-lifecycle.md)\n- [Summary Table](#summary-table.md)",
      "index": 10,
      "token_count": 175,
      "metadata": {
        "title": "_qdrant_qdrant_4.1-field-index-types",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.1-field-index-types.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.1-field-index-types.md",
        "file_name": "_qdrant_qdrant_4.1-field-index-types.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.332702",
        "total_chunks": 11
      },
      "start_char": 19088,
      "end_char": 21136
    },
    {
      "content": "Index Selection and Storage Backends | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 0,
      "end_char": 2046
    },
    {
      "content": "tes-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Index Selection and Storage Backends\n\nRelevant source files\n\n- [lib/segment/src/index/field\\_index/field\\_index\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs)\n- [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs)\n- [lib/segment/src/index/field\\_index/index\\_selector.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs)\n- [lib/segment/src/index/plain\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_payload_index.rs)\n- [lib/segment/src/index/struct\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs)\n- [lib/segment/src/index/vector\\_index\\_base.rs](https://github.",
      "index": 1,
      "token_count": 636,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 1946,
      "end_char": 3983
    },
    {
      "content": "/src/index/struct_payload_index.rs)\n- [lib/segment/src/index/vector\\_index\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/vector_index_base.rs)\n\n## Purpose and Scope\n\nThis document describes how Qdrant selects appropriate storage backends for payload indices and manages the lifecycle of these indices across different storage types. It covers the `IndexSelector` abstraction, storage backend determination logic, and the migration path from legacy RocksDB indices to newer storage implementations.\n\nFor information about the specific types of payload indices (numeric, keyword, full-text, etc.), see [Field Index Types](qdrant/qdrant/4.1-field-index-types.md). For details on how indices are used during query processing, see [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md).\n\n---\n\n## Storage Backend Overview\n\nQdrant supports three storage backends for payload indices, each optimized for different use cases:\n\n| Backend       | Mutability              | Storage Location                     | Best For                                      |\n| ------------- | ----------------------- | ------------------------------------ | --------------------------------------------- |\n| **RocksDB**   | Appendable or Immutable | Disk with in-memory cache            | Legacy segments, being phased out             |\n| **Mmap**      | Immutable               | Memory-mapped files                  | Non-appendable segments, low memory footprint |\n| **Gridstore** | Appendable              | Gridstore files with in-memory index | New appendable segments, active development   |\n\nThe choice of backend is determined by the segment's mutability requirements and configuration flags. The system is actively migrating away from RocksDB towards Gridstore for appendable segments and Mmap for non-appendable segments.\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs46-75](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.",
      "index": 2,
      "token_count": 415,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 3883,
      "end_char": 5895
    },
    {
      "content": ".rs46-75](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L46-L75) [lib/segment/src/index/field\\_index/index\\_selector.rs30-58](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L30-L58)\n\n---\n\n## StorageType Enum and Selection Logic\n\n### StorageType Variants\n\nThe `StorageType` enum in `StructPayloadIndex` determines which backend to use:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs46-75](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L46-L75) [lib/segment/src/index/struct\\_payload\\_index.rs335-373](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L335-L373)\n\n### Storage Selection in StructPayloadIndex::open\n\nThe storage backend is selected when opening a `StructPayloadIndex`:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs300-445](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L300-L445)\n\n---\n\n## IndexSelector Abstraction\n\nThe `IndexSelector` enum provides a unified interface for creating different index types across different storage backends. It acts as a factory that produces the appropriate index or builder based on the storage type.\n\n### IndexSelector Variants\n\n```\n```\n\n**Sources:** [lib/segment/src/index/field\\_index/index\\_selector.rs30-58](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L30-L58)\n\n### Selector Method in StructPayloadIndex\n\nThe `selector()` method maps `StorageType` to `IndexSelector`:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs682-715](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L682-L715)\n\n---\n\n## Index Creation and Loading Flow\n\n### Creating New Indices\n\nWhen creating a new index, the flow goes through `build_field_indexes()` which uses the selector to get builders:\n\n```\n```",
      "index": 3,
      "token_count": 604,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 5795,
      "end_char": 7833
    },
    {
      "content": "x, the flow goes through `build_field_indexes()` which uses the selector to get builders:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs447-481](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L447-L481) [lib/segment/src/index/field\\_index/index\\_selector.rs207-298](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L207-L298)\n\n### Loading Existing Indices\n\nLoading persisted indices uses `new_index_with_type()` to reconstruct the exact index type:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs174-298](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L174-L298) [lib/segment/src/index/field\\_index/index\\_selector.rs61-148](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L61-L148)\n\n---\n\n## Backend-Specific Index Implementation\n\nEach index type supports multiple backends through variant enums and builders. Here's how this works for numeric indices as an example:\n\n### FieldIndexBuilder Variants\n\n```\n```\n\n### IndexSelector Backend Routing\n\nThe `IndexSelector` methods route to the appropriate builder based on the selector variant:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/field\\_index/field\\_index\\_base.rs566-603](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L566-L603) [lib/segment/src/index/field\\_index/index\\_selector.rs381-411](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L381-L411)\n\n### Full-Text Index Example\n\nThe `FullTextIndex` enum demonstrates backend support:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs37-93](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs#L37-L93)\n\n---\n\n## Storage Migration: RocksDB to Gridstore",
      "index": 4,
      "token_count": 609,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 7733,
      "end_char": 9738
    },
    {
      "content": "ield_index/full_text_index/text_index.rs#L37-L93)\n\n---\n\n## Storage Migration: RocksDB to Gridstore\n\nQdrant is actively migrating from RocksDB to Gridstore/Mmap backends. The migration happens automatically during index loading.\n\n### Migration Trigger and Process\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs248-281](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L248-L281)\n\n### Migration Logic Details\n\nThe migration is controlled by feature flags and happens in `load_from_db()`:\n\n1. **Detection**: Check if any loaded indices use RocksDB via `index.is_rocksdb()`\n2. **Flag Check**: Verify `migrate_rocksdb_payload_indices` feature flag is enabled\n3. **Storage Type Update**: Convert `RocksDbAppendable` → `GridstoreAppendable` or `RocksDbNonAppendable` → `GridstoreNonAppendable`\n4. **Config Update**: Set `skip_rocksdb = true` in the persisted config\n5. **Cleanup**: Delete old RocksDB-backed indices\n6. **Rebuild**: Trigger full index rebuild with new storage backend\n7. **Persist**: Save new index types to config\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs248-281](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L248-L281)\n\n### RocksDB Cleanup\n\nAfter migration, if no indices use RocksDB anymore, the database is destroyed:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs407-442](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L407-L442)\n\n---\n\n## File Layout and Directory Structure\n\nEach index type uses a consistent directory naming scheme based on the field name and index type:\n\n### Directory Naming Conventions\n\n| Index Type    | Directory Pattern | Example               |\n| ------------- | ----------------- | --------------------- |\n| Map Index     | `{field}-map`     | `country-map`         |\n| Numeric Index | `{field}-numeric` | `price-numeric`       |\n| Text Index    | `{field}-text`    | `description-text`    |",
      "index": 5,
      "token_count": 546,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 9638,
      "end_char": 11680
    },
    {
      "content": "d}-numeric` | `price-numeric`       |\n| Text Index    | `{field}-text`    | `description-text`    |\n| Boolean Index | `{field}-bool`    | `is_active-bool`      |\n| Null Index    | `{field}-null`    | `optional_field-null` |\n\n**Sources:** [lib/segment/src/index/field\\_index/index\\_selector.rs590-608](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs#L590-L608)\n\n### FullPayloadIndexType Persistence\n\nThe exact backend and mutability of each index is persisted in `PayloadConfig`:\n\n```\n```\n\n**Sources:** [lib/segment/src/index/field\\_index/field\\_index\\_base.rs481-533](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L481-L533) [lib/segment/src/index/payload\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/payload_config.rs) (implied)\n\n---\n\n## Configuration and Feature Flags\n\n### PayloadConfig Fields\n\nThe `PayloadConfig` persisted at `{segment_path}/payload_index/config.json` contains:\n\n- **`indices`**: Map of field name → `PayloadFieldSchemaWithIndexType`\n  - Includes the field schema and exact index types (with storage backend)\n- **`skip_rocksdb`**: Optional flag to prevent RocksDB usage\n\n### Feature Flags Controlling Backend Selection\n\n| Flag                                 | Purpose                                  | Default                    |\n| ------------------------------------ | ---------------------------------------- | -------------------------- |\n| `payload_index_skip_mutable_rocksdb` | Skip RocksDB for appendable segments     | Determined by build config |\n| `payload_index_skip_rocksdb`         | Skip RocksDB for non-appendable segments | Determined by build config |\n| `migrate_rocksdb_payload_indices`    | Enable automatic migration               | Determined by build config |\n\n**Sources:** [lib/segment/src/index/struct\\_payload\\_index.rs313-331](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L313-L331)\n\n---\n\n## Summary",
      "index": 6,
      "token_count": 531,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 11580,
      "end_char": 13622
    },
    {
      "content": "ant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L313-L331)\n\n---\n\n## Summary\n\nThe index selection and storage backend system in Qdrant provides:\n\n1. **Flexible Backend Selection**: Automatic choice between RocksDB, Mmap, and Gridstore based on segment mutability and configuration\n2. **Abstraction Layer**: `IndexSelector` pattern allows uniform index creation across backends\n3. **Type Persistence**: Full index type information (including backend) is saved in `PayloadConfig`\n4. **Migration Path**: Automatic migration from legacy RocksDB to modern backends\n5. **Per-Field Control**: Different fields can use different backends based on their storage requirements\n\nThe migration from RocksDB to Gridstore/Mmap is a key ongoing optimization, reducing storage overhead and improving performance for both mutable and immutable segments.\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Index Selection and Storage Backends](#index-selection-and-storage-backends.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Storage Backend Overview](#storage-backend-overview.md)\n- [StorageType Enum and Selection Logic](#storagetype-enum-and-selection-logic.md)\n- [StorageType Variants](#storagetype-variants.md)\n- [Storage Selection in StructPayloadIndex::open](#storage-selection-in-structpayloadindexopen.md)\n- [IndexSelector Abstraction](#indexselector-abstraction.md)\n- [IndexSelector Variants](#indexselector-variants.md)\n- [Selector Method in StructPayloadIndex](#selector-method-in-structpayloadindex.md)\n- [Index Creation and Loading Flow](#index-creation-and-loading-flow.md)\n- [Creating New Indices](#creating-new-indices.md)\n- [Loading Existing Indices](#loading-existing-indices.md)\n- [Backend-Specific Index Implementation](#backend-specific-index-implementation.md)\n- [FieldIndexBuilder Variants](#fieldindexbuilder-variants.md)\n- [IndexSelector Backend Routing](#indexselector-backend-routing.md)\n- [Full-Text Index Example](#full-text-index-example.md)",
      "index": 7,
      "token_count": 455,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 13522,
      "end_char": 15529
    },
    {
      "content": "outing](#indexselector-backend-routing.md)\n- [Full-Text Index Example](#full-text-index-example.md)\n- [Storage Migration: RocksDB to Gridstore](#storage-migration-rocksdb-to-gridstore.md)\n- [Migration Trigger and Process](#migration-trigger-and-process.md)\n- [Migration Logic Details](#migration-logic-details.md)\n- [RocksDB Cleanup](#rocksdb-cleanup.md)\n- [File Layout and Directory Structure](#file-layout-and-directory-structure.md)\n- [Directory Naming Conventions](#directory-naming-conventions.md)\n- [FullPayloadIndexType Persistence](#fullpayloadindextype-persistence.md)\n- [Configuration and Feature Flags](#configuration-and-feature-flags.md)\n- [PayloadConfig Fields](#payloadconfig-fields.md)\n- [Feature Flags Controlling Backend Selection](#feature-flags-controlling-backend-selection.md)\n- [Summary](#summary.md)",
      "index": 8,
      "token_count": 193,
      "metadata": {
        "title": "_qdrant_qdrant_4.2-index-selection-and-storage-backends",
        "source": "qdrant_qdrant\\_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "file_name": "_qdrant_qdrant_4.2-index-selection-and-storage-backends.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.375579",
        "total_chunks": 9
      },
      "start_char": 15429,
      "end_char": 17477
    },
    {
      "content": "Search and Query Processing | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 626,
      "metadata": {
        "title": "_qdrant_qdrant_5-search-and-query-processing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5-search-and-query-processing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5-search-and-query-processing.md",
        "file_name": "_qdrant_qdrant_5-search-and-query-processing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.401978",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 2041
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Search and Query Processing\n\nRelevant source files\n\n- [lib/collection/benches/batch\\_query\\_bench.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_query_bench.rs)\n- [lib/collection/benches/batch\\_search\\_bench.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_search_bench.rs)\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n- [lib/collection/src/shards/local\\_shard/scroll.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.",
      "index": 1,
      "token_count": 632,
      "metadata": {
        "title": "_qdrant_qdrant_5-search-and-query-processing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5-search-and-query-processing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5-search-and-query-processing.md",
        "file_name": "_qdrant_qdrant_5-search-and-query-processing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.401978",
        "total_chunks": 6
      },
      "start_char": 1941,
      "end_char": 3928
    },
    {
      "content": "shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot\\_tests.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/tests/snapshot\\_test.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/tests/snapshot_test.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n\nThis document covers the query processing pipeline in Qdrant, from API request parsing through query execution and result aggregation. It explains how different query types are processed, planned, and executed across shards to return search results.\n\nFor information about vector indexing strategies, see [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md). For details about scoring and ranking mechanisms, see [Scoring and Ranking](qdrant/qdrant/4.2-index-selection-and-storage-backends.md). For query types and API interfaces, see [Query Types and Options](qdrant/qdrant/4.1-field-index-types.md).\n\n## Query Processing Overview\n\nQdrant supports multiple types of vector search operations that are processed through a unified query pipeline. The system transforms user requests into optimized execution plans that can be efficiently executed across distributed shards.\n\n```\n```\n\nSources: [lib/collection/src/operations/types.rs587-623](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L587-L623) [lib/collection/src/operations/universal\\_query/collection\\_query.rs28-55](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/collection_query.rs#L28-L55) [lib/collection/src/operations/universal\\_query/shard\\_query.rs33-46](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/shard_query.",
      "index": 2,
      "token_count": 548,
      "metadata": {
        "title": "_qdrant_qdrant_5-search-and-query-processing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5-search-and-query-processing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5-search-and-query-processing.md",
        "file_name": "_qdrant_qdrant_5-search-and-query-processing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.401978",
        "total_chunks": 6
      },
      "start_char": 3828,
      "end_char": 5875
    },
    {
      "content": "://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/shard_query.rs#L33-L46)\n\n## Core Query Types\n\nThe system processes several fundamental query types through a unified interface:\n\n| Query Type          | Purpose                                            | Core Implementation          |\n| ------------------- | -------------------------------------------------- | ---------------------------- |\n| **Search**          | Vector similarity search                           | `CoreSearchRequest`          |\n| **Recommend**       | Recommendation based on positive/negative examples | `RecommendRequestInternal`   |\n| **Discover**        | Discovery with context pairs                       | `DiscoverRequestInternal`    |\n| **Universal Query** | Flexible query with prefetch and fusion            | `CollectionQueryRequest`     |\n| **Scroll**          | Paginated retrieval                                | `QueryScrollRequestInternal` |\n\n```\n```\n\nSources: [lib/collection/src/operations/types.rs603-622](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L603-L622) [lib/collection/src/operations/query\\_enum.rs1-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/query_enum.rs#L1-L50) [lib/collection/src/operations/universal\\_query/collection\\_query.rs29-44](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/collection_query.rs#L29-L44)\n\n## Search Parameters and Configuration\n\nSearch behavior is controlled through `SearchParams` which configures indexing, quantization, and execution parameters:\n\n```\n```\n\nSources: [lib/segment/src/types.rs482-503](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L482-L503) [lib/segment/src/types.rs448-471](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L448-L471)\n\n## Query Planning and Optimization",
      "index": 3,
      "token_count": 492,
      "metadata": {
        "title": "_qdrant_qdrant_5-search-and-query-processing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5-search-and-query-processing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5-search-and-query-processing.md",
        "file_name": "_qdrant_qdrant_5-search-and-query-processing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.401978",
        "total_chunks": 6
      },
      "start_char": 5775,
      "end_char": 7710
    },
    {
      "content": "drant/qdrant/blob/48203e41/lib/segment/src/types.rs#L448-L471)\n\n## Query Planning and Optimization\n\nThe query planning system transforms high-level queries into optimized execution plans through the `PlannedQuery` structure:\n\n```\n```\n\nSources: [lib/collection/src/operations/universal\\_query/planned\\_query.rs17-32](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/planned_query.rs#L17-L32) [lib/collection/src/operations/universal\\_query/planned\\_query.rs69-95](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/planned_query.rs#L69-L95)\n\n## Shard-Level Query Execution\n\nQuery execution occurs at the shard level through the `LocalShard::do_planned_query` method, which coordinates concurrent execution of searches and scrolls:\n\n```\n```\n\nSources: [lib/collection/src/shards/local\\_shard/query.rs57-104](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/query.rs#L57-L104) [lib/collection/src/shards/local\\_shard/query.rs146-180](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/query.rs#L146-L180)\n\n## Result Processing and Scoring\n\nSearch results flow through multiple processing stages to apply scoring, filtering, and formatting:\n\n```\n```\n\nSources: [lib/collection/src/shards/local\\_shard/query.rs106-145](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/query.rs#L106-L145) [lib/segment/src/types.rs325-342](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L325-L342)\n\n## Request Flow Implementation\n\nThe complete request processing flow involves multiple layers of conversion and optimization:\n\n```\n```\n\nSources: [docs/redoc/master/openapi.json2-100](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L2-L100) [lib/collection/src/collection/query.rs1-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/query.rs#L1-L50) [lib/collection/src/shards/local\\_shard/query.",
      "index": 4,
      "token_count": 631,
      "metadata": {
        "title": "_qdrant_qdrant_5-search-and-query-processing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5-search-and-query-processing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5-search-and-query-processing.md",
        "file_name": "_qdrant_qdrant_5-search-and-query-processing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.401978",
        "total_chunks": 6
      },
      "start_char": 7610,
      "end_char": 9656
    },
    {
      "content": "203e41/lib/collection/src/collection/query.rs#L1-L50) [lib/collection/src/shards/local\\_shard/query.rs1-30](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/query.rs#L1-L30)\n\n## Universal Query System\n\nThe universal query system provides a flexible interface for complex search operations with prefetch capabilities:\n\n| Component    | Purpose                         | Implementation       |\n| ------------ | ------------------------------- | -------------------- |\n| **Prefetch** | Pre-gather candidate sets       | `CollectionPrefetch` |\n| **Query**    | Main query operation            | `Query` enum         |\n| **Fusion**   | Combine multiple result sets    | `FusionInternal`     |\n| **Rescore**  | Re-rank with different criteria | `ScoringQuery`       |\n\n```\n```\n\nSources: [lib/collection/src/operations/universal\\_query/collection\\_query.rs85-120](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/collection_query.rs#L85-L120) [lib/collection/src/operations/universal\\_query/shard\\_query.rs33-70](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/shard_query.rs#L33-L70)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Search and Query Processing](#search-and-query-processing.md)\n- [Query Processing Overview](#query-processing-overview.md)\n- [Core Query Types](#core-query-types.md)\n- [Search Parameters and Configuration](#search-parameters-and-configuration.md)\n- [Query Planning and Optimization](#query-planning-and-optimization.md)\n- [Shard-Level Query Execution](#shard-level-query-execution.md)\n- [Result Processing and Scoring](#result-processing-and-scoring.md)\n- [Request Flow Implementation](#request-flow-implementation.md)\n- [Universal Query System](#universal-query-system.md)",
      "index": 5,
      "token_count": 473,
      "metadata": {
        "title": "_qdrant_qdrant_5-search-and-query-processing",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5-search-and-query-processing.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5-search-and-query-processing.md",
        "file_name": "_qdrant_qdrant_5-search-and-query-processing.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.401978",
        "total_chunks": 6
      },
      "start_char": 9556,
      "end_char": 11604
    },
    {
      "content": "Query Request Flow | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 0,
      "end_char": 2032
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Query Request Flow\n\nRelevant source files\n\n- [docs/grpc/docs.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/grpc/docs.md)\n- [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json)\n- [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n- [lib/api/src/grpc/proto/collections.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto)\n- [lib/api/src/grpc/proto/points.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto)\n- [lib/api/src/grpc/qdrant.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs)\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/config.",
      "index": 1,
      "token_count": 653,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 1932,
      "end_char": 3973
    },
    {
      "content": "/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs)\n- [lib/collection/src/operations/config\\_diff.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs)\n- [lib/collection/src/operations/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs)\n- [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs)\n- [lib/collection/src/optimizers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/optimizers_builder.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n- [lib/collection/src/shards/local\\_shard/scroll.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot\\_tests.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n- [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n- [lib/storage/src/content\\_manager/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/collection_meta_ops.rs)\n- [lib/storage/src/content\\_manager/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs)\n\n## Purpose and Scope",
      "index": 2,
      "token_count": 591,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 3873,
      "end_char": 5779
    },
    {
      "content": "/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs)\n\n## Purpose and Scope\n\nThis document describes how query and search requests are processed in Qdrant, tracing the execution path from initial API request through collection routing, shard selection, and segment-level search operations. It covers the complete flow of search queries, including request validation, shard selection, read consistency enforcement, and result merging.\n\nFor information about specific filtering and scoring mechanisms, see [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md). For details on data updates and write operations, see [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md).\n\n## Query Request Flow Overview\n\nQuery requests in Qdrant flow through multiple layers, with each layer performing specific responsibilities: request validation, shard routing, replica selection, segment search coordination, and result aggregation.\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/local\\_shard/search.rs1-400](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/search.rs#L1-L400)\n- Diagram 3 from high-level architecture\n\n## Request Types and Entry Points\n\nQdrant supports multiple query types that enter through REST and gRPC APIs. All requests are converted to internal representations for processing.\n\n### Core Request Types\n\n| Request Type       | Purpose                                         | Internal Type              |\n| ------------------ | ----------------------------------------------- | -------------------------- |\n| `SearchRequest`    | Vector similarity search                        | `CoreSearchRequest`        |\n| `QueryRequest`     | Universal query API (search, scroll, recommend) | `ShardQueryRequest`        |\n| `ScrollRequest`    | Paginated retrieval                             | `ScrollRequestInternal`    |\n| `RecommendRequest` | Recommendation by examples                      | `RecommendRequestInternal` |\n\n```\n```",
      "index": 3,
      "token_count": 417,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 5679,
      "end_char": 7714
    },
    {
      "content": "Request` | Recommendation by examples                      | `RecommendRequestInternal` |\n\n```\n```\n\n**Key Fields in CoreSearchRequest:**\n\n- `query: QueryEnum` - The query vector or strategy\n- `filter: Option<Filter>` - Payload filtering conditions\n- `params: Option<SearchParams>` - HNSW parameters, quantization settings\n- `limit: usize` - Maximum results to return\n- `offset: usize` - Pagination offset\n- `with_payload: WithPayloadInterface` - Payload fields to include\n- `with_vector: WithVector` - Whether to return vectors\n\n**Sources:**\n\n- [lib/collection/src/operations/types.rs554-575](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L554-L575)\n- [lib/api/src/grpc/qdrant.rs1-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L1-L100)\n- [lib/collection/src/operations/conversions.rs1-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs#L1-L100)\n\n## Collection-Level Request Routing\n\nThe `Collection` layer receives requests and routes them to the appropriate shards based on shard keys (if using custom sharding) or distributes across all shards (if using auto sharding).\n\n```\n```\n\n**Sharding Method Determination:**\n\n- **Auto Sharding**: Request is sent to all `ShardReplicaSet` instances, and results are merged\n\n- **Custom Sharding**: `shard_key` field in request determines which shards to query\n\n  - Shard keys can be keywords or numbers\n  - Multiple shard keys can be specified via `ShardKeySelector`\n\n**Sources:**\n\n- [lib/collection/src/config.rs76-84](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L76-L84)\n- [lib/api/src/grpc/conversions.rs92-105](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs#L92-L105)\n- [lib/collection/src/operations/types.rs554-595](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L554-L595)\n\n## ReplicaSet Selection and Read Consistency",
      "index": 4,
      "token_count": 583,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 7614,
      "end_char": 9603
    },
    {
      "content": "41/lib/collection/src/operations/types.rs#L554-L595)\n\n## ReplicaSet Selection and Read Consistency\n\nThe `ShardReplicaSet` selects which replica to query based on read consistency requirements and replica health status.\n\n### Replica Selection Algorithm\n\n```\n```\n\n**Read Consistency Levels:**\n\n| Level                | Behavior                                          | Use Case                                     |\n| -------------------- | ------------------------------------------------- | -------------------------------------------- |\n| `None` / `Factor(1)` | Query single local replica (preferred)            | Low latency, eventual consistency acceptable |\n| `Majority`           | Query majority of replicas, return common results | Balance of consistency and performance       |\n| `Quorum`             | Query n/2 + 1 replicas                            | Stronger consistency guarantees              |\n| `All`                | Query all replicas, return results present in all | Strongest consistency, highest latency       |\n| `Factor(n)`          | Query n replicas                                  | Custom consistency level                     |\n\n**Replica State Filtering:**\n\nOnly replicas in `Active` state are queried. Replicas in other states (`Dead`, `Partial`, `Initializing`, `Listener`) are excluded from search operations.\n\n**Sources:**\n\n- [lib/collection/src/operations/point\\_ops.rs1-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/point_ops.rs#L1-L100)\n- [lib/collection/src/shards/replica\\_set.rs1-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set.rs#L1-L100)\n- [lib/collection/src/operations/conversions.rs91-114](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs#L91-L114)\n\n## LocalShard Search Execution\n\nThe `LocalShard` coordinates search across all segments, acquiring locks to ensure read consistency with concurrent updates.\n\n### Search Coordination Flow\n\n```\n```\n\n**Key Components:**",
      "index": 5,
      "token_count": 462,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 9503,
      "end_char": 11540
    },
    {
      "content": "d consistency with concurrent updates.\n\n### Search Coordination Flow\n\n```\n```\n\n**Key Components:**\n\n- **`update_operation_lock`**: A `tokio::sync::RwLock` that prevents updates during critical read operations\n\n  - Read lock held during search to ensure consistency\n  - Write lock held during updates\n  - Critical for scroll operations and shard transfers\n\n- **`SegmentHolder`**: Manages all segments in the shard\n\n  - Segments are searched in parallel\n  - Each segment returns partial results\n  - Results are merged based on scores\n\n**Batch Processing:**\n\nThe `core_search_batch()` method processes multiple search requests concurrently:\n\n- Requests in batch share the same read lock acquisition\n- Segment searches for different requests run in parallel\n- Results for each request are returned as separate vectors\n\n**Sources:**\n\n- [lib/collection/src/shards/local\\_shard/search.rs1-200](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/search.rs#L1-L200)\n- [lib/collection/src/shards/local\\_shard/mod.rs108-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L124)\n- [lib/collection/src/collection\\_manager/segments\\_searcher.rs1-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/segments_searcher.rs#L1-L100)\n\n## Segment-Level Search Operations\n\nEach segment performs the actual vector search, combining payload filtering with vector similarity computation.\n\n### Segment Search Process\n\n```\n```\n\n**Filter Application:**\n\nPayload filters are applied before vector search to narrow the search space:\n\n1. **Filter parsing**: `Filter` conditions converted to queries for payload indices\n2. **Index lookup**: `FieldIndex` instances (numeric, keyword, geo, etc.) return matching point IDs\n3. **Cardinality estimation**: Estimated number of matching points determines search strategy\n4. **Threshold check**: If estimated points < `full_scan_threshold`, use brute force; otherwise use HNSW\n\n**HNSW Search Strategy:**",
      "index": 6,
      "token_count": 496,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 11440,
      "end_char": 13477
    },
    {
      "content": "ted points < `full_scan_threshold`, use brute force; otherwise use HNSW\n\n**HNSW Search Strategy:**\n\nWhen using HNSW index:\n\n- **Entry point selection**: Find entry node in HNSW graph\n- **Greedy search**: Navigate down layers to level 0\n- **Beam search**: Explore level 0 with configurable `ef` parameter\n- **Filtered search**: Only visit points matching payload filter\n\n**Quantization-Aware Search:**\n\nIf quantization is enabled (scalar, product, or binary):\n\n1. Search using quantized vectors for speed\n2. Retrieve top candidates (with oversampling if configured)\n3. Rescore candidates using original vectors for accuracy\n4. Return refined results\n\n**Sources:**\n\n- [lib/segment/src/types.rs471-546](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L471-L546)\n- [lib/collection/src/operations/types.rs25-60](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L25-L60)\n- Diagram 3 from high-level architecture\n\n## Result Merging and Response Construction\n\nResults from multiple segments (and potentially multiple shards) are merged to produce the final response.\n\n### Multi-Level Result Merging\n\n```\n```\n\n**Merging Algorithm:**\n\n1. **Segment-level merge** (in `LocalShard`):\n\n   - Collect results from all segments\n   - Sort by score (considering distance metric)\n   - Take top `limit + offset` results\n   - Handle pagination by skipping `offset` items\n\n2. **Shard-level merge** (in `Collection`):\n\n   - For auto-sharding: merge results from all shards\n   - For custom sharding: only results from queried shards\n   - Re-sort combined results\n   - Apply final limit\n\n**Score Ordering:**\n\nThe ordering depends on the distance metric:\n\n- **Cosine, Dot**: Larger scores are better (`Order::LargeBetter`)\n- **Euclid, Manhattan**: Smaller scores are better (`Order::SmallBetter`)\n\n**Response Construction:**\n\nFinal `ScoredPoint` objects contain:\n\n- `id`: Point ID (numeric or UUID)\n- `score`: Distance/similarity score\n- `payload`: Requested payload fields (if `with_payload` specified)",
      "index": 7,
      "token_count": 519,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 13377,
      "end_char": 15415
    },
    {
      "content": "ore`: Distance/similarity score\n- `payload`: Requested payload fields (if `with_payload` specified)\n- `vector`: Point vector(s) (if `with_vector` specified)\n- `shard_key`: Shard key for custom sharding\n- `order_value`: For order\\_by queries\n\n**Sources:**\n\n- [lib/segment/src/types.rs349-366](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L349-L366)\n- [lib/segment/src/types.rs327-341](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L327-L341)\n- [lib/collection/src/operations/types.rs131-143](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L131-L143)\n\n## Search Parameters and Optimization\n\nSearch behavior is controlled by `SearchParams` which configure HNSW search, quantization, and exactness requirements.\n\n### SearchParams Structure\n\n| **Field**      | **Type**                           | **Purpose**                                     |\n| -------------- | ---------------------------------- | ----------------------------------------------- |\n| `hnsw_ef`      | `Option<usize>`                    | HNSW beam size (higher = more accurate, slower) |\n| `exact`        | `bool`                             | Force exact search (bypass HNSW)                |\n| `quantization` | `Option<QuantizationSearchParams>` | Quantization settings                           |\n| `indexed_only` | `bool`                             | Only search indexed segments                    |\n\n**Quantization Search Parameters:**\n\n- `ignore`: Skip quantized vectors entirely\n- `rescore`: Force rescoring with original vectors\n- `oversampling`: Factor for retrieving extra candidates before rescoring\n  - Example: `oversampling = 2.4` with `limit = 100` retrieves 240 candidates, then rescores to get top 100\n\n**HNSW Parameters:**\n\nThe `hnsw_ef` parameter controls search accuracy vs. speed tradeoff:\n\n- Default: Uses collection's `ef_construct` value\n- Higher values: More neighbors explored, better recall, slower search",
      "index": 8,
      "token_count": 507,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 15315,
      "end_char": 17309
    },
    {
      "content": "ction's `ef_construct` value\n- Higher values: More neighbors explored, better recall, slower search\n- Lower values: Fewer neighbors explored, lower recall, faster search\n\n**Sources:**\n\n- [lib/segment/src/types.rs471-546](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L471-L546)\n- [lib/collection/src/operations/types.rs25-60](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L25-L60)\n\n## Query Timeout and Cancellation\n\nQueries can specify timeout values to prevent long-running searches from blocking resources.\n\n### Timeout Handling\n\n```\n```\n\n**Timeout Mechanisms:**\n\n1. **API-level timeout**: Specified in request, applied at collection level\n2. **Segment-level timeout**: Propagated to individual segment searches\n3. **Cancellation**: Operations check for timeout between segments and during HNSW traversal\n\n**Error Response:**\n\nWhen timeout occurs:\n\n- Error type: `CollectionError::timeout()`\n- HTTP status: 408 Request Timeout\n- gRPC status: `DEADLINE_EXCEEDED`\n\n**Sources:**\n\n- [lib/collection/src/operations/types.rs1-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L1-L100)\n- [lib/collection/src/shards/local\\_shard/scroll.rs40-60](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs#L40-L60)\n\n## Read Lock Acquisition for Consistency\n\nThe `update_operation_lock` ensures that queries have a consistent view of data during execution, preventing race conditions with concurrent updates.\n\n### Locking Strategy\n\n**Lock Type**: `Arc<tokio::sync::RwLock<()>>`\n\n**Read Lock Held By:**\n\n- Search operations\n- Scroll operations\n- Point retrieval operations\n- Snapshot creation (partial)\n\n**Write Lock Held By:**\n\n- Update operations (upsert, delete)\n- Segment optimization\n- Snapshot proxy wrapping/unwrapping\n\n**Lock Acquisition Timing:**\n\n```\n```\n\n**Consistency Guarantees:**\n\n- **Snapshot isolation**: Queries see a consistent snapshot of data",
      "index": 9,
      "token_count": 532,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 17209,
      "end_char": 19206
    },
    {
      "content": "`\n\n**Consistency Guarantees:**\n\n- **Snapshot isolation**: Queries see a consistent snapshot of data\n- **No torn reads**: Point data (vector + payload) are read atomically\n- **Scroll consistency**: Paginated scrolls see same data version across pages\n\n**Sources:**\n\n- [lib/collection/src/shards/local\\_shard/mod.rs108-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L124)\n- [lib/collection/src/update\\_handler.rs135-143](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L135-L143)\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs40-60](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs#L40-L60)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Query Request Flow](#query-request-flow.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Query Request Flow Overview](#query-request-flow-overview.md)\n- [Request Types and Entry Points](#request-types-and-entry-points.md)\n- [Core Request Types](#core-request-types.md)\n- [Collection-Level Request Routing](#collection-level-request-routing.md)\n- [ReplicaSet Selection and Read Consistency](#replicaset-selection-and-read-consistency.md)\n- [Replica Selection Algorithm](#replica-selection-algorithm.md)\n- [LocalShard Search Execution](#localshard-search-execution.md)\n- [Search Coordination Flow](#search-coordination-flow.md)\n- [Segment-Level Search Operations](#segment-level-search-operations.md)\n- [Segment Search Process](#segment-search-process.md)\n- [Result Merging and Response Construction](#result-merging-and-response-construction.md)\n- [Multi-Level Result Merging](#multi-level-result-merging.md)\n- [Search Parameters and Optimization](#search-parameters-and-optimization.md)\n- [SearchParams Structure](#searchparams-structure.md)\n- [Query Timeout and Cancellation](#query-timeout-and-cancellation.md)\n- [Timeout Handling](#timeout-handling.md)",
      "index": 10,
      "token_count": 526,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 19106,
      "end_char": 21095
    },
    {
      "content": "ut and Cancellation](#query-timeout-and-cancellation.md)\n- [Timeout Handling](#timeout-handling.md)\n- [Read Lock Acquisition for Consistency](#read-lock-acquisition-for-consistency.md)\n- [Locking Strategy](#locking-strategy.md)",
      "index": 11,
      "token_count": 56,
      "metadata": {
        "title": "_qdrant_qdrant_5.1-query-request-flow",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.1-query-request-flow.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.1-query-request-flow.md",
        "file_name": "_qdrant_qdrant_5.1-query-request-flow.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.437531",
        "total_chunks": 12
      },
      "start_char": 20995,
      "end_char": 23043
    },
    {
      "content": "Filtering and Scoring | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 0,
      "end_char": 2035
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Filtering and Scoring\n\nRelevant source files\n\n- [lib/common/io/src/file\\_operations.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/io/src/file_operations.rs)\n- [lib/segment/benches/hnsw\\_build\\_asymptotic.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_asymptotic.rs)\n- [lib/segment/benches/hnsw\\_build\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_build_graph.rs)\n- [lib/segment/benches/hnsw\\_search\\_graph.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/benches/hnsw_search_graph.rs)\n- [lib/segment/src/index/field\\_index/field\\_index\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs)\n- [lib/segment/src/index/field\\_index/full\\_text\\_index/text\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs)",
      "index": 1,
      "token_count": 672,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 1935,
      "end_char": 3982
    },
    {
      "content": "ub.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/full_text_index/text_index.rs)\n- [lib/segment/src/index/field\\_index/index\\_selector.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/index_selector.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_layers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers_builder.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/header.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/header.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/serializer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/serializer.rs)\n- [lib/segment/src/index/hnsw\\_index/graph\\_links/view.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_links/view.rs)\n- [lib/segment/src/index/hnsw\\_index/hnsw.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/mod.rs)\n- [lib/segment/src/index/hnsw\\_index/tests/test\\_compact\\_graph\\_layer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/tests/test_compact_graph_layer.rs)\n- [lib/segment/src/index/plain\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_payload_index.rs)\n- [lib/segment/src/index/struct\\_payload\\_index.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs)\n- [lib/segment/src/index/vector\\_index\\_base.rs](https://github.",
      "index": 2,
      "token_count": 659,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 3882,
      "end_char": 5931
    },
    {
      "content": "/src/index/struct_payload_index.rs)\n- [lib/segment/src/index/vector\\_index\\_base.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/vector_index_base.rs)\n\n**Purpose**: This page explains how Qdrant evaluates filters and scores vectors during search operations. It covers cardinality estimation, filter evaluation strategies, the integration of filtering with vector scoring, and how search strategies are selected based on estimated filter selectivity.\n\n**Scope**: This document focuses on the filtering and scoring mechanisms during query execution. For the overall query flow through Collection, ReplicaSet, and Segment layers, see [5.1 Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md). For details on specific payload index implementations, see [4.1 Field Index Types](qdrant/qdrant/4.1-field-index-types.md).\n\n## Overview\n\nDuring vector search, Qdrant must efficiently combine two operations:\n\n1. **Filtering**: Selecting only points that satisfy payload conditions\n2. **Scoring**: Computing vector similarity between query and candidates\n\nThe system uses cardinality estimation to predict how many points will match a filter, then selects an appropriate search strategy. The `FilteredScorer` component integrates both filtering and scoring into a single interface used by the vector index.\n\n```\n```\n\n**Diagram: Filter Evaluation and Search Strategy Selection**\n\nSources: [lib/segment/src/index/hnsw\\_index/hnsw.rs941-1165](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L941-L1165) [lib/segment/src/index/struct\\_payload\\_index.rs507-571](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L507-L571)\n\n---\n\n## Cardinality Estimation\n\nCardinality estimation predicts how many points will match a filter without actually evaluating it on all points. This estimate guides the selection of an efficient search strategy.\n\n### CardinalityEstimation Structure\n\nThe `CardinalityEstimation` struct contains:",
      "index": 3,
      "token_count": 478,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 5831,
      "end_char": 7853
    },
    {
      "content": "earch strategy.\n\n### CardinalityEstimation Structure\n\nThe `CardinalityEstimation` struct contains:\n\n- **`min`**: Minimum possible matching points\n- **`exp`**: Expected (most likely) matching points\n- **`max`**: Maximum possible matching points\n- **`primary_clauses`**: Conditions that can be evaluated directly using indices\n\n```\n```\n\n**Diagram: CardinalityEstimation Structure**\n\nSources: [lib/segment/src/index/field\\_index/mod.rs36-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/mod.rs#L36-L43) [lib/segment/src/index/struct\\_payload\\_index.rs542-550](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L542-L550)\n\n### Estimation Process\n\nThe estimation process flows from top-level filters down to individual field conditions:\n\n| Level | Component            | Function                     | Purpose                                                      |\n| ----- | -------------------- | ---------------------------- | ------------------------------------------------------------ |\n| 1     | `StructPayloadIndex` | `estimate_cardinality()`     | Entry point, calls `estimate_filter()`                       |\n| 2     | Query Estimator      | `estimate_filter()`          | Recursively processes filter clauses (must/should/must\\_not) |\n| 3     | `StructPayloadIndex` | `condition_cardinality()`    | Handles individual conditions                                |\n| 4     | `StructPayloadIndex` | `estimate_field_condition()` | Queries specific field index                                 |\n| 5     | `FieldIndex`         | `estimate_cardinality()`     | Returns actual cardinality from index                        |\n\n```\n```\n\n**Diagram: Cardinality Estimation Flow**\n\nSources: [lib/segment/src/index/struct\\_payload\\_index.rs507-571](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L507-L571) [lib/segment/src/index/query\\_estimator.rs1-150](https://github.",
      "index": 4,
      "token_count": 474,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 7753,
      "end_char": 9740
    },
    {
      "content": "/struct_payload_index.rs#L507-L571) [lib/segment/src/index/query\\_estimator.rs1-150](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/query_estimator.rs#L1-L150)\n\n### Primary vs Secondary Conditions\n\n**Primary Conditions** can be evaluated directly from an index, returning an iterator over matching point IDs:\n\n- Field conditions with indexed fields\n- `HasId` conditions (resolved to point offsets)\n- `HasVector` conditions (using vector storage availability)\n\n**Secondary Conditions** require checking the actual payload value:\n\n- Field conditions on non-indexed fields\n- Complex nested conditions\n- Conditions where index doesn't support the operation\n\nPrimary conditions enable significant optimization: if all conditions are primary, post-filtering can be skipped entirely.\n\n```\n```\n\n**Diagram: Primary vs Secondary Condition Handling**\n\nSources: [lib/segment/src/index/struct\\_payload\\_index.rs614-680](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L614-L680) [lib/segment/src/index/field\\_index/mod.rs23-35](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/mod.rs#L23-L35)\n\n---\n\n## Filter Evaluation Strategies\n\nQdrant uses different strategies to evaluate filters depending on the estimated cardinality and available indices.\n\n### Index-Based Filtering\n\nWhen primary conditions exist and field indices are available, Qdrant uses `query_field()` to retrieve matching point IDs directly from the index:\n\n```\n```\n\n**Diagram: Field Index Filter Methods**\n\nEach field index type implements filtering appropriate to its data type:\n\n| Index Type      | Filter Operations                                     | Implementation                         |\n| --------------- | ----------------------------------------------------- | -------------------------------------- |\n| `NumericIndex`  | Range queries (`lt`, `gt`, `gte`, `lte`), exact match | Iterates over sorted histogram buckets |",
      "index": 5,
      "token_count": 448,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 9640,
      "end_char": 11624
    },
    {
      "content": "| Range queries (`lt`, `gt`, `gte`, `lte`), exact match | Iterates over sorted histogram buckets |\n| `MapIndex`      | Exact match, `any_of`                                 | Hash map lookup                        |\n| `FullTextIndex` | Text match, phrase match                              | Inverted index query                   |\n| `GeoIndex`      | Radius, bounding box                                  | Geo-spatial index                      |\n| `BoolIndex`     | True/false                                            | Bitmap                                 |\n| `NullIndex`     | Is null, is not null                                  | Bitmap                                 |\n\nSources: [lib/segment/src/index/field\\_index/field\\_index\\_base.rs248-254](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/field_index/field_index_base.rs#L248-L254) [lib/segment/src/index/struct\\_payload\\_index.rs121-139](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L121-L139)\n\n### Full Scan Filtering\n\nWhen no indices are available or conditions are secondary, Qdrant falls back to full scan with `FilterContext`:\n\n```\n```\n\n**Diagram: Full Scan Filter Evaluation**\n\nTwo implementations of `FilterContext`:\n\n1. **`StructFilterContext`** ([lib/segment/src/index/struct\\_filter\\_context.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_filter_context.rs)): Uses optimized filter representation\n2. **`PlainFilterContext`** ([lib/segment/src/index/plain\\_payload\\_index.rs265-274](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/plain_payload_index.rs#L265-L274)): Simple condition checking\n\nSources: [lib/segment/src/index/struct\\_payload\\_index.rs490-505](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L490-L505) [lib/segment/src/payload\\_storage/mod.rs44-46](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/payload_storage/mod.rs#L44-L46)\n\n### Hybrid Strategy with Visited List",
      "index": 6,
      "token_count": 554,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 11524,
      "end_char": 13573
    },
    {
      "content": "ob/48203e41/lib/segment/src/payload_storage/mod.rs#L44-L46)\n\n### Hybrid Strategy with Visited List\n\nWhen some conditions are primary and others are secondary, Qdrant uses a hybrid approach with a visited list to ensure uniqueness:\n\n```\n```\n\n**Diagram: Hybrid Filtering with Visited List**\n\nThe visited list ensures that points returned by multiple primary condition iterators are only checked once.\n\nSources: [lib/segment/src/index/struct\\_payload\\_index.rs614-680](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/struct_payload_index.rs#L614-L680)\n\n---\n\n## Scoring Integration\n\n### FilteredScorer\n\nThe `FilteredScorer` combines filtering and vector scoring into a single component used by the HNSW index during search:\n\n```\n```\n\n**Diagram: FilteredScorer Structure**\n\nThe scorer provides:\n\n1. **Vector scoring** via `RawScorer` (delegates to vector storage)\n2. **Filter checking** via `ScorerFilters`\n3. **Deleted point filtering** via bitslice\n4. **Batch scoring** with integrated filtering\n\nSources: [lib/segment/src/index/hnsw\\_index/point\\_scorer.rs1-350](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/point_scorer.rs#L1-L350)\n\n### Scoring in HNSW Search\n\nDuring HNSW graph traversal, `FilteredScorer` is called at each step:\n\n```\n```\n\n**Diagram: FilteredScorer Interaction During HNSW Search**\n\nPoints that don't pass the filter receive a score of `f32::MIN`, effectively excluding them from results.\n\nSources: [lib/segment/src/index/hnsw\\_index/point\\_scorer.rs150-250](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/point_scorer.rs#L150-L250) [lib/segment/src/index/hnsw\\_index/graph\\_layers.rs63-97](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/graph_layers.rs#L63-L97)\n\n---\n\n## Search Strategy Selection\n\nThe HNSW index selects a search strategy based on cardinality estimation and configuration:\n\n### Strategy Decision Tree\n\n```\n```\n\n**Diagram: HNSW Search Strategy Selection**",
      "index": 7,
      "token_count": 572,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 13473,
      "end_char": 15486
    },
    {
      "content": "d configuration:\n\n### Strategy Decision Tree\n\n```\n```\n\n**Diagram: HNSW Search Strategy Selection**\n\nSources: [lib/segment/src/index/hnsw\\_index/hnsw.rs941-1165](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L941-L1165)\n\n### Strategy Implementations\n\n#### 1. Exact Unfiltered Search\n\nBrute force scoring of all available vectors (used when `params.exact = true` and no filter):\n\n```\nfor each point in vector_storage:\n    score = scorer.score_point(point)\n    add to top-k heap\n```\n\n**Telemetry**: Tracked in `exact_unfiltered` aggregator\n\n#### 2. Exact Filtered Search\n\nBrute force scoring of filtered points (used when cardinality is small):\n\n```\nfiltered_points = payload_index.iter_filtered_points(filter)\nfor each point in filtered_points:\n    score = scorer.score_point(point)\n    add to top-k heap\n```\n\n**Telemetry**: Tracked in `exact_filtered` aggregator\n\n**Threshold**: `available_vector_count < full_scan_threshold`\n\n#### 3. Unfiltered HNSW Search\n\nStandard HNSW graph traversal without filters:\n\n```\nentry_point = get highest level point\nlevel_entry = search_entry(entry_point, top_level, 0)\nresults = search_on_level(level_entry, 0, ef)\n```\n\n**Telemetry**: Tracked in `unfiltered_hnsw` aggregator\n\n#### 4. Filtered HNSW - Small Cardinality\n\nSample estimation to decide between graph-based or plain filtering:\n\n```\nsample_size = min(cardinality.exp, SAMPLE_SIZE)\nsample_points = random sample from filtered points\nsample_matched = count points in HNSW graph\n\nif sample_matched / sample_size < SAMPLE_OPTIMISTIC_THRESHOLD:\n    use exact_filtered_search()\nelse:\n    use filtered_hnsw_search()\n```\n\n**Telemetry**: Tracked in `small_cardinality` aggregator\n\n**Constants**:\n\n- `SAMPLE_SIZE = 20`\n- `SAMPLE_OPTIMISTIC_THRESHOLD = 0.2`\n\n#### 5. Filtered HNSW - Large Cardinality\n\nHNSW traversal with filter checks at each step:\n\n```\nentry_point = get filtered entry point\nlevel_entry = search_entry(entry_point, top_level, 0, filter)\nresults = search_on_level(level_entry, 0, ef, filter)\n```",
      "index": 8,
      "token_count": 525,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 15386,
      "end_char": 17424
    },
    {
      "content": "entry(entry_point, top_level, 0, filter)\nresults = search_on_level(level_entry, 0, ef, filter)\n```\n\n**Telemetry**: Tracked in `large_cardinality` aggregator\n\nSources: [lib/segment/src/index/hnsw\\_index/hnsw.rs1000-1165](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L1000-L1165) [lib/segment/src/index/sample\\_estimation.rs1-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/sample_estimation.rs#L1-L50)\n\n### Full Scan Threshold\n\nThe `full_scan_threshold` determines when to switch from graph-based to brute-force search:\n\n| Configuration      | Calculation                             |\n| ------------------ | --------------------------------------- |\n| HNSW Config        | `full_scan_threshold` (in KB)           |\n| Runtime Conversion | `threshold_kb * 1024 / avg_vector_size` |\n| Default            | `10000` (10KB)                          |\n\nThis threshold is computed during index construction and stored in `HnswGraphConfig`.\n\nSources: [lib/segment/src/index/hnsw\\_index/hnsw.rs140-165](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L140-L165) [lib/segment/src/index/hnsw\\_index/config.rs1-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/config.rs#L1-L100)\n\n---\n\n## Telemetry and Performance Tracking\n\nSearch strategies are tracked separately for performance analysis:\n\n```\n```\n\n**Diagram: Search Strategy Telemetry Tracking**\n\nEach search path uses `ScopeDurationMeasurer` to automatically track its execution time, enabling analysis of which strategies are most commonly used and their performance characteristics.\n\nSources: [lib/segment/src/index/hnsw\\_index/hnsw.rs96-118](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/index/hnsw_index/hnsw.rs#L96-L118) [lib/segment/src/common/operation\\_time\\_statistics.rs1-100](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/common/operation_time_statistics.rs#L1-L100)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh",
      "index": 9,
      "token_count": 597,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 17324,
      "end_char": 19373
    },
    {
      "content": "rc/common/operation_time_statistics.rs#L1-L100)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Filtering and Scoring](#filtering-and-scoring.md)\n- [Overview](#overview.md)\n- [Cardinality Estimation](#cardinality-estimation.md)\n- [CardinalityEstimation Structure](#cardinalityestimation-structure.md)\n- [Estimation Process](#estimation-process.md)\n- [Primary vs Secondary Conditions](#primary-vs-secondary-conditions.md)\n- [Filter Evaluation Strategies](#filter-evaluation-strategies.md)\n- [Index-Based Filtering](#index-based-filtering.md)\n- [Full Scan Filtering](#full-scan-filtering.md)\n- [Hybrid Strategy with Visited List](#hybrid-strategy-with-visited-list.md)\n- [Scoring Integration](#scoring-integration.md)\n- [FilteredScorer](#filteredscorer.md)\n- [Scoring in HNSW Search](#scoring-in-hnsw-search.md)\n- [Search Strategy Selection](#search-strategy-selection.md)\n- [Strategy Decision Tree](#strategy-decision-tree.md)\n- [Strategy Implementations](#strategy-implementations.md)\n- [1. Exact Unfiltered Search](#1-exact-unfiltered-search.md)\n- [2. Exact Filtered Search](#2-exact-filtered-search.md)\n- [3. Unfiltered HNSW Search](#3-unfiltered-hnsw-search.md)\n- [4. Filtered HNSW - Small Cardinality](#4-filtered-hnsw---small-cardinality.md)\n- [5. Filtered HNSW - Large Cardinality](#5-filtered-hnsw---large-cardinality.md)\n- [Full Scan Threshold](#full-scan-threshold.md)\n- [Telemetry and Performance Tracking](#telemetry-and-performance-tracking.md)",
      "index": 10,
      "token_count": 401,
      "metadata": {
        "title": "_qdrant_qdrant_5.2-filtering-and-scoring",
        "source": "qdrant_qdrant\\_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "file_name": "_qdrant_qdrant_5.2-filtering-and-scoring.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.482130",
        "total_chunks": 11
      },
      "start_char": 19273,
      "end_char": 21321
    },
    {
      "content": "Data Updates and Consistency | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 0,
      "end_char": 2042
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Data Updates and Consistency\n\nRelevant source files\n\n- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.",
      "index": 1,
      "token_count": 613,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 1942,
      "end_char": 3918
    },
    {
      "content": "ion_manager/collection_updater.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n- [lib/collection/src/shards/local\\_shard/scroll.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot\\_tests.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n\nThis page describes how Qdrant handles data updates and maintains consistency across replicas. It covers the write path architecture, durability guarantees through Write-Ahead Logs, logical clock-based consistency mechanisms, and the interaction between update handlers, segments, and replicas.\n\nFor detailed information about the update processing pipeline (WAL persistence, segment updates, optimization triggers), see [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md). For write consistency levels, replica coordination, and failure handling mechanisms, see [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md).\n\nFor information about the search and query flow, see [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.",
      "index": 2,
      "token_count": 553,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 3818,
      "end_char": 5867
    },
    {
      "content": "earch and query flow, see [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md).\n\n---\n\n## Write Path Overview\n\nWhen a client submits an update operation (upsert, delete, set payload, etc.), it flows through multiple layers of the system before being persisted to disk. The system provides configurable consistency guarantees and handles replica coordination, failure detection, and automatic recovery.\n\n### High-Level Write Flow\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs24-251](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L24-L251) [lib/collection/src/shards/local\\_shard/mod.rs84-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L84-L124)\n\n---\n\n## Write-Ahead Log (WAL)\n\nThe Write-Ahead Log ensures durability and enables crash recovery. All update operations are written to the WAL before being applied to in-memory segments, guaranteeing that no acknowledged writes are lost.\n\n### WAL Architecture\n\nThe `RecoverableWal` wrapper extends the basic WAL with clock tracking for consistency:\n\n```\n```\n\n**Key Components:**\n\n| Component       | Type                                          | Purpose                                 |\n| --------------- | --------------------------------------------- | --------------------------------------- |\n| `wal`           | `Arc<Mutex<SerdeWal<OperationWithClockTag>>>` | Underlying WAL implementation           |\n| `newest_clocks` | `Arc<Mutex<ClockMap>>`                        | Highest clock values seen for each peer |\n| `oldest_clocks` | `Arc<Mutex<ClockMap>>`                        | Cutoff clocks for recovery              |\n\n**Sources:** [lib/collection/src/wal\\_delta.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/wal_delta.rs) (referenced), [lib/collection/src/shards/local\\_shard/mod.rs95](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L95-L95)\n\n### WAL Recovery",
      "index": 3,
      "token_count": 501,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 5767,
      "end_char": 7805
    },
    {
      "content": "drant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L95-L95)\n\n### WAL Recovery\n\nOn shard startup, the WAL is replayed to restore the state:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs618-736](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L618-L736)\n\n---\n\n## Logical Clocks and Consistency\n\nQdrant uses logical clocks (Lamport-style) to establish a partial ordering of operations across replicas. This enables detection of stale operations and ensures convergence without requiring synchronized physical clocks.\n\n### Clock Tag Structure\n\nEvery update operation is tagged with a `ClockTag`:\n\n| Field        | Type     | Description                                    |\n| ------------ | -------- | ---------------------------------------------- |\n| `peer_id`    | `PeerId` | ID of the peer that created this clock tick    |\n| `clock_id`   | `u32`    | Identifies the specific clock instance         |\n| `clock_tick` | `u64`    | Monotonically increasing counter               |\n| `force`      | `bool`   | If true, bypass clock rejection (for recovery) |\n\n**Sources:** [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs) (referenced in update.rs)\n\n### ClockSet and Clock Assignment\n\nThe `ShardReplicaSet` maintains a `ClockSet` that assigns clock tags to new operations:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs195-251](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L195-L251) [lib/collection/src/shards/replica\\_set/clock\\_set.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/clock_set.rs) (referenced)\n\n### Clock-Based Rejection\n\nReplicas track the highest clock tick seen from each peer in their `ClockMap`. Operations with older ticks are rejected to prevent applying stale updates:",
      "index": 4,
      "token_count": 530,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 7705,
      "end_char": 9679
    },
    {
      "content": "r in their `ClockMap`. Operations with older ticks are rejected to prevent applying stale updates:\n\n- **Operation tick > newest tick**: Operation is applied, `newest_clocks` is updated\n- **Operation tick <= newest tick**: Operation is rejected with `UpdateStatus::ClockRejected`\n- **Operation has `force=true`**: Clock check is bypassed (used during recovery)\n\nWhen an operation is rejected, the replica set retries with a new clock tick up to `UPDATE_MAX_CLOCK_REJECTED_RETRIES` (3) times.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs16-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L16-L20) [lib/collection/src/shards/replica\\_set/update.rs212-244](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L212-L244)\n\n---\n\n## Update Handler Architecture\n\nThe `UpdateHandler` manages three types of background workers that process updates, optimize segments, and periodically flush data to disk.\n\n### Worker Types\n\n```\n```\n\n**Sources:** [lib/collection/src/update\\_handler.rs92-144](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L92-L144) [lib/collection/src/update\\_handler.rs193-252](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L193-L252)\n\n### Update Signal Types\n\n| Signal                         | Purpose                                               |\n| ------------------------------ | ----------------------------------------------------- |\n| `Operation(OperationData)`     | Contains the update operation to apply                |\n| `Stop`                         | Gracefully stops all workers                          |\n| `Nop`                          | Trigger signal to wake optimizers                     |\n| `Plunger(oneshot::Sender<()>)` | Ensures previous updates are applied before notifying |\n\n**Sources:** [lib/collection/src/update\\_handler.rs66-78](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.",
      "index": 5,
      "token_count": 515,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 9579,
      "end_char": 11621
    },
    {
      "content": "\\_handler.rs66-78](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L66-L78)\n\n---\n\n## Update Processing Pipeline\n\nWhen an update operation arrives at a `LocalShard`, it goes through a multi-stage pipeline:\n\n### Pipeline Stages\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/shard\\_trait.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/shard_trait.rs) (referenced), [lib/collection/src/shards/local\\_shard/shard\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/shard_ops.rs) (referenced)\n\n### CollectionUpdater\n\nThe `CollectionUpdater` applies operations to segments:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection\\_manager/collection\\_updater.rs42-78](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs#L42-L78)\n\n---\n\n## Write Consistency Models\n\nQdrant provides three write ordering levels that control consistency vs. availability tradeoffs.\n\n### WriteOrdering Levels\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs168-175](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L168-L175)\n\n### Leader Selection\n\nThe leader for an update is determined by the `WriteOrdering`:\n\n| Ordering | Leader Selection                                     | Lock Required               |\n| -------- | ---------------------------------------------------- | --------------------------- |\n| `Weak`   | Always local peer                                    | No                          |\n| `Medium` | Highest peer ID that is alive (Active or Resharding) | Yes (`write_ordering_lock`) |\n| `Strong` | Highest peer ID (even if dead)                       | Yes (`write_ordering_lock`) |\n\nIf the local peer is not the leader, the update is forwarded to the designated leader via internal gRPC.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs136-165](https://github.",
      "index": 6,
      "token_count": 522,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 11521,
      "end_char": 13523
    },
    {
      "content": "ternal gRPC.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs136-165](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L136-L165)\n\n### Write Consistency Factor\n\nAfter applying an update to replicas, the `ShardReplicaSet` checks if enough replicas succeeded:\n\n```\n```\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs355-542](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L355-L542)\n\n### Replica Failure Handling\n\nWhen a replica fails to apply an update:\n\n1. **Transient errors** (network issues, timeouts): Replica is marked as locally disabled\n2. **Non-transient errors** (validation failures): Only deactivated if there are full-completed updates\n3. **Locally disabled replicas**: Not considered for read or write operations\n4. **Consensus notification**: After timeout (30s default), failures are reported to consensus\n5. **Automatic recovery**: Failed replicas eventually recover via shard transfer\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs409-542](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L409-L542) [lib/collection/src/shards/replica\\_set/mod.rs94-98](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L94-L98)\n\n---\n\n## Key Data Structures\n\n### LocalShard\n\nThe `LocalShard` is the core data-holding component on each peer:\n\n| Field                   | Type                            | Purpose                                     |\n| ----------------------- | ------------------------------- | ------------------------------------------- |\n| `segments`              | `LockedSegmentHolder`           | Holds all segment data                      |\n| `wal`                   | `RecoverableWal`                | Write-ahead log for durability              |\n| `update_handler`        | `Arc<Mutex<UpdateHandler>>`     | Manages update processing workers           |",
      "index": 7,
      "token_count": 515,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 13423,
      "end_char": 15435
    },
    {
      "content": "e_handler`        | `Arc<Mutex<UpdateHandler>>`     | Manages update processing workers           |\n| `update_sender`         | `ArcSwap<Sender<UpdateSignal>>` | Channel to send updates to workers          |\n| `update_tracker`        | `UpdateTracker`                 | Tracks ongoing updates                      |\n| `update_operation_lock` | `Arc<RwLock<()>>`               | Prevents updates during critical operations |\n| `optimizers`            | `Arc<Vec<Arc<Optimizer>>>`      | Segment optimization strategies             |\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs84-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L84-L124)\n\n### ShardReplicaSet\n\nThe `ShardReplicaSet` coordinates replicas of a single shard:\n\n| Field                    | Type                               | Purpose                                      |\n| ------------------------ | ---------------------------------- | -------------------------------------------- |\n| `local`                  | `RwLock<Option<Shard>>`            | Local shard instance if present              |\n| `remotes`                | `RwLock<Vec<RemoteShard>>`         | Remote shard proxies                         |\n| `replica_state`          | `Arc<SaveOnDisk<ReplicaSetState>>` | Persisted replica states                     |\n| `locally_disabled_peers` | `RwLock<Registry>`                 | Peers marked as failed locally               |\n| `write_ordering_lock`    | `Mutex<()>`                        | Serializes writes for Medium/Strong ordering |\n| `clock_set`              | `Mutex<ClockSet>`                  | Assigns logical clocks                       |\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs90-119](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L90-L119)\n\n### UpdateHandler\n\nManages background workers for updates, optimization, and flushing:",
      "index": 8,
      "token_count": 449,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 15335,
      "end_char": 17285
    },
    {
      "content": "#L90-L119)\n\n### UpdateHandler\n\nManages background workers for updates, optimization, and flushing:\n\n| Field                  | Type                                         | Purpose                         |\n| ---------------------- | -------------------------------------------- | ------------------------------- |\n| `segments`             | `LockedSegmentHolder`                        | Reference to segments           |\n| `wal`                  | `LockedWal`                                  | Reference to WAL                |\n| `optimizers`           | `Arc<Vec<Arc<Optimizer>>>`                   | List of optimization strategies |\n| `update_worker`        | `Option<JoinHandle<()>>`                     | Update processing worker        |\n| `optimizer_worker`     | `Option<JoinHandle<()>>`                     | Optimization worker             |\n| `flush_worker`         | `Option<JoinHandle<()>>`                     | Periodic flush worker           |\n| `optimization_handles` | `Arc<Mutex<Vec<StoppableTaskHandle<bool>>>>` | Active optimization tasks       |\n\n**Sources:** [lib/collection/src/update\\_handler.rs92-144](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L92-L144)\n\n---\n\n## Update Operation Lock\n\nThe `update_operation_lock` is a `RwLock` that prevents data races between updates and certain read operations:\n\n**Write lock held during:**\n\n- Update operations (point upsert/delete, vector updates, payload operations)\n\n**Read lock held during:**\n\n- Scroll operations (ensuring consistent iteration)\n- Snapshot creation (preventing segment changes)\n\nThis lock ensures that scroll operations see a consistent view of the data and that snapshots capture a coherent state.\n\n**Sources:** [lib/collection/src/shards/local\\_shard/mod.rs108-123](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L123) [lib/collection/src/shards/local\\_shard/scroll.rs156-157](https://github.",
      "index": 9,
      "token_count": 442,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 17185,
      "end_char": 19159
    },
    {
      "content": "al_shard/mod.rs#L108-L123) [lib/collection/src/shards/local\\_shard/scroll.rs156-157](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs#L156-L157) [lib/collection/src/shards/local\\_shard/snapshot.rs93-106](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L93-L106)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Data Updates and Consistency](#data-updates-and-consistency.md)\n- [Write Path Overview](#write-path-overview.md)\n- [High-Level Write Flow](#high-level-write-flow.md)\n- [Write-Ahead Log (WAL)](#write-ahead-log-wal.md)\n- [WAL Architecture](#wal-architecture.md)\n- [WAL Recovery](#wal-recovery.md)\n- [Logical Clocks and Consistency](#logical-clocks-and-consistency.md)\n- [Clock Tag Structure](#clock-tag-structure.md)\n- [ClockSet and Clock Assignment](#clockset-and-clock-assignment.md)\n- [Clock-Based Rejection](#clock-based-rejection.md)\n- [Update Handler Architecture](#update-handler-architecture.md)\n- [Worker Types](#worker-types.md)\n- [Update Signal Types](#update-signal-types.md)\n- [Update Processing Pipeline](#update-processing-pipeline.md)\n- [Pipeline Stages](#pipeline-stages.md)\n- [CollectionUpdater](#collectionupdater.md)\n- [Write Consistency Models](#write-consistency-models.md)\n- [WriteOrdering Levels](#writeordering-levels.md)\n- [Leader Selection](#leader-selection.md)\n- [Write Consistency Factor](#write-consistency-factor.md)\n- [Replica Failure Handling](#replica-failure-handling.md)\n- [Key Data Structures](#key-data-structures.md)\n- [LocalShard](#localshard.md)\n- [ShardReplicaSet](#shardreplicaset.md)\n- [UpdateHandler](#updatehandler.md)\n- [Update Operation Lock](#update-operation-lock.md)",
      "index": 10,
      "token_count": 509,
      "metadata": {
        "title": "_qdrant_qdrant_6-data-updates-and-consistency",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6-data-updates-and-consistency.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "file_name": "_qdrant_qdrant_6-data-updates-and-consistency.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.514162",
        "total_chunks": 11
      },
      "start_char": 19059,
      "end_char": 21107
    },
    {
      "content": "Update Processing Pipeline | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 625,
      "metadata": {
        "title": "_qdrant_qdrant_6.1-update-processing-pipeline",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "file_name": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.549345",
        "total_chunks": 7
      },
      "start_char": 0,
      "end_char": 2040
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Update Processing and Optimization\n\nRelevant source files\n\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n- [lib/collection/src/shards/local\\_shard/scroll.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot\\_tests.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.",
      "index": 1,
      "token_count": 630,
      "metadata": {
        "title": "_qdrant_qdrant_6.1-update-processing-pipeline",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "file_name": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.549345",
        "total_chunks": 7
      },
      "start_char": 1940,
      "end_char": 3954
    },
    {
      "content": "/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n\nThis page covers Qdrant's update processing pipeline and segment optimization system. Update processing handles the ingestion and application of point operations (inserts, updates, deletes) to collection segments, while optimization manages background maintenance tasks that rebuild and consolidate segments for better performance.\n\nFor information about collection lifecycle management and configuration, see [Collection Management](qdrant/qdrant/5-search-and-query-processing.md). For details about snapshot creation and recovery mechanisms, see [Snapshots and Recovery](qdrant/qdrant/5.2-filtering-and-scoring.md).\n\n## Overview\n\nQdrant's update processing and optimization system operates through three main worker processes managed by the `UpdateHandler`:\n\n- **Update Worker**: Processes incoming point operations and applies them to segments\n- **Optimizer Worker**: Monitors segment conditions and launches optimization tasks\n- **Flush Worker**: Periodically flushes segment data to disk and manages WAL cleanup\n\nThe system uses a copy-on-write approach during optimization, allowing reads and writes to continue while segments are being rebuilt in the background.\n\n## Update Handler Architecture\n\nThe `UpdateHandler` serves as the central coordinator for all update and optimization operations within a collection shard.\n\n```\n```\n\nSources: [lib/collection/src/update\\_handler.rs87-129](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L87-L129) [lib/collection/src/update\\_handler.rs172-205](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L172-L205)\n\n## Update Processing Pipeline\n\n### Update Worker\n\nThe update worker processes incoming operations sequentially, ensuring consistency and proper ordering.\n\n```\n```\n\nThe update worker handles several operation types:",
      "index": 2,
      "token_count": 435,
      "metadata": {
        "title": "_qdrant_qdrant_6.1-update-processing-pipeline",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "file_name": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.549345",
        "total_chunks": 7
      },
      "start_char": 3854,
      "end_char": 5870
    },
    {
      "content": "ring consistency and proper ordering.\n\n```\n```\n\nThe update worker handles several operation types:\n\n| Signal Type | Purpose                    | Action                                  |\n| ----------- | -------------------------- | --------------------------------------- |\n| `Operation` | Point update/insert/delete | Apply to segments, trigger optimization |\n| `Stop`      | Shutdown signal            | Graceful worker termination             |\n| `Nop`       | Trigger optimization       | Signal optimizer without operation      |\n| `Plunger`   | Synchronization            | Ensure previous updates are applied     |\n\nSources: [lib/collection/src/update\\_handler.rs691-761](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L691-L761) [lib/collection/src/update\\_handler.rs63-74](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L63-L74)\n\n### Write-Ahead Log Integration\n\nUpdates are written to the WAL before being applied to segments, ensuring durability:\n\n```\n```\n\nSources: [lib/collection/src/update\\_handler.rs706-714](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L706-L714) [lib/collection/src/update\\_handler.rs831-834](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L831-L834)\n\n## Optimization System\n\n### Optimizer Types\n\nQdrant implements four main optimizers, each addressing specific segment maintenance needs:\n\n#### Indexing Optimizer\n\nCreates indexes for segments that exceed size thresholds but lack proper indexing:\n\n```\n```\n\nSources: [lib/collection/src/collection\\_manager/optimizers/indexing\\_optimizer.rs94-184](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/optimizers/indexing_optimizer.rs#L94-L184)\n\n#### Merge Optimizer\n\nConsolidates small segments to maintain optimal segment count:\n\n```\n```\n\nSources: [lib/collection/src/collection\\_manager/optimizers/merge\\_optimizer.rs96-151](https://github.",
      "index": 3,
      "token_count": 515,
      "metadata": {
        "title": "_qdrant_qdrant_6.1-update-processing-pipeline",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "file_name": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.549345",
        "total_chunks": 7
      },
      "start_char": 5770,
      "end_char": 7778
    },
    {
      "content": "urces: [lib/collection/src/collection\\_manager/optimizers/merge\\_optimizer.rs96-151](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/optimizers/merge_optimizer.rs#L96-L151)\n\n#### Vacuum Optimizer\n\nRemoves soft-deleted points and rebuilds fragmented indexes:\n\n```\n```\n\nSources: [lib/collection/src/collection\\_manager/optimizers/vacuum\\_optimizer.rs67-88](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/optimizers/vacuum_optimizer.rs#L67-L88)\n\n#### Config Mismatch Optimizer\n\nRebuilds segments when collection configuration changes require different segment parameters:\n\nSources: [lib/collection/src/collection\\_manager/optimizers/config\\_mismatch\\_optimizer.rs104-215](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/optimizers/config_mismatch_optimizer.rs#L104-L215)\n\n### Optimization Process\n\nThe optimization process uses proxy segments to maintain availability during rebuilding:\n\n```\n```\n\nSources: [lib/collection/src/collection\\_manager/optimizers/segment\\_optimizer.rs576-685](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/optimizers/segment_optimizer.rs#L576-L685)\n\n## Segment Builder\n\nThe `SegmentBuilder` constructs optimized segments by combining data from multiple source segments:\n\n```\n```\n\nKey building steps include:\n\n1. **Data Copying**: Transfer vectors and payloads from source segments\n2. **Index Building**: Create HNSW or other indexes based on configuration\n3. **Quantization**: Apply vector compression if configured\n4. **Defragmentation**: Reorganize data for better locality\n\nSources: [lib/segment/src/segment\\_constructor/segment\\_builder.rs459-685](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/segment_constructor/segment_builder.rs#L459-L685)\n\n## Resource Management\n\n### CPU and IO Budgeting\n\nOptimization tasks use resource permits to control concurrent operations:\n\n```\n```\n\nSources: [lib/collection/src/update\\_handler.rs270-326](https://github.",
      "index": 4,
      "token_count": 547,
      "metadata": {
        "title": "_qdrant_qdrant_6.1-update-processing-pipeline",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "file_name": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.549345",
        "total_chunks": 7
      },
      "start_char": 7678,
      "end_char": 9724
    },
    {
      "content": "urrent operations:\n\n```\n```\n\nSources: [lib/collection/src/update\\_handler.rs270-326](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L270-L326) [lib/collection/src/update\\_handler.rs521-526](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L521-L526)\n\n### Optimization Limits\n\nThe system enforces several limits to prevent resource exhaustion:\n\n| Parameter                   | Purpose                               | Configuration    |\n| --------------------------- | ------------------------------------- | ---------------- |\n| `max_optimization_threads`  | Concurrent optimizations per shard    | Optimizer config |\n| `optimizer_resource_budget` | CPU/IO permits available              | Global budget    |\n| `max_segment_size_kb`       | Maximum segment size before splitting | Threshold config |\n\nSources: [lib/collection/src/update\\_handler.rs121-123](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L121-L123) [lib/collection/src/collection\\_manager/optimizers/segment\\_optimizer.rs37-42](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/optimizers/segment_optimizer.rs#L37-L42)\n\n## Flush Operations\n\nThe flush worker manages periodic data persistence and WAL cleanup:\n\n```\n```\n\nThe flush interval is configurable through `flush_interval_sec`, with a default of 5 seconds in development mode.\n\nSources: [lib/collection/src/update\\_handler.rs769-835](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L769-L835) [config/development.yaml28](https://github.com/qdrant/qdrant/blob/48203e41/config/development.yaml#L28-L28)\n\n## Error Handling and Recovery\n\n### Failed Operation Recovery\n\nThe system maintains tracking of failed operations and attempts recovery:\n\n```\n```\n\nSources: [lib/collection/src/update\\_handler.rs247-265](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L247-L265)\n\n### Optimization Cancellation",
      "index": 5,
      "token_count": 551,
      "metadata": {
        "title": "_qdrant_qdrant_6.1-update-processing-pipeline",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "file_name": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.549345",
        "total_chunks": 7
      },
      "start_char": 9624,
      "end_char": 11657
    },
    {
      "content": "drant/blob/48203e41/lib/collection/src/update_handler.rs#L247-L265)\n\n### Optimization Cancellation\n\nOptimizations can be cancelled gracefully, restoring original segments:\n\nSources: [lib/collection/src/update\\_handler.rs381-396](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs#L381-L396) [lib/collection/src/collection\\_manager/optimizers/segment\\_optimizer.rs341-396](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/optimizers/segment_optimizer.rs#L341-L396)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Update Processing and Optimization](#update-processing-and-optimization.md)\n- [Overview](#overview.md)\n- [Update Handler Architecture](#update-handler-architecture.md)\n- [Update Processing Pipeline](#update-processing-pipeline.md)\n- [Update Worker](#update-worker.md)\n- [Write-Ahead Log Integration](#write-ahead-log-integration.md)\n- [Optimization System](#optimization-system.md)\n- [Optimizer Types](#optimizer-types.md)\n- [Indexing Optimizer](#indexing-optimizer.md)\n- [Merge Optimizer](#merge-optimizer.md)\n- [Vacuum Optimizer](#vacuum-optimizer.md)\n- [Config Mismatch Optimizer](#config-mismatch-optimizer.md)\n- [Optimization Process](#optimization-process.md)\n- [Segment Builder](#segment-builder.md)\n- [Resource Management](#resource-management.md)\n- [CPU and IO Budgeting](#cpu-and-io-budgeting.md)\n- [Optimization Limits](#optimization-limits.md)\n- [Flush Operations](#flush-operations.md)\n- [Error Handling and Recovery](#error-handling-and-recovery.md)\n- [Failed Operation Recovery](#failed-operation-recovery.md)\n- [Optimization Cancellation](#optimization-cancellation.md)",
      "index": 6,
      "token_count": 456,
      "metadata": {
        "title": "_qdrant_qdrant_6.1-update-processing-pipeline",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "file_name": "_qdrant_qdrant_6.1-update-processing-pipeline.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.549345",
        "total_chunks": 7
      },
      "start_char": 11557,
      "end_char": 13605
    },
    {
      "content": "Write Consistency and Replication | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 628,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 0,
      "end_char": 2047
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Write Consistency and Replication\n\nRelevant source files\n\n- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)",
      "index": 1,
      "token_count": 643,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 1947,
      "end_char": 3981
    },
    {
      "content": "rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n\nThis document explains how Qdrant ensures consistency across replicas when processing write operations. It covers write ordering guarantees, leader-based coordination, logical clock mechanisms, and failure handling strategies that enable Qdrant to maintain data consistency across distributed shard replicas.\n\nFor information about the update processing pipeline and WAL persistence, see [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md). For distributed consensus and metadata operations, see [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md).\n\n---\n\n## Purpose and Scope\n\nWhen a collection has multiple replicas of a shard distributed across peers, write operations must be coordinated to maintain consistency. This page describes:\n\n- **Write ordering levels** (`Weak`, `Medium`, `Strong`) and their consistency guarantees\n- **Leader-based replication** for coordinating updates across replicas\n- **Logical clock mechanisms** (`ClockTag`, `ClockSet`) for detecting and resolving conflicts\n- **Write consistency factor** configuration and enforcement\n- **Failure detection** and automatic replica deactivation\n- **Rate limiting** for write operations in strict mode\n\nThe core implementation resides in `ShardReplicaSet::update_with_consistency` and `ShardReplicaSet::update_impl`, which orchestrate parallel replica updates while enforcing consistency guarantees.\n\n---\n\n## Write Ordering Levels\n\nQdrant supports three write ordering levels that trade off between performance and consistency guarantees. These are defined in the `WriteOrdering` enum.\n\n| Ordering | Leader Selection             | Consistency Guarantee                  | Use Case                                           |",
      "index": 2,
      "token_count": 407,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 3881,
      "end_char": 5894
    },
    {
      "content": "| Consistency Guarantee                  | Use Case                                           |\n| -------- | ---------------------------- | -------------------------------------- | -------------------------------------------------- |\n| `Weak`   | Local peer                   | Best-effort, eventual consistency      | High throughput, tolerates temporary inconsistency |\n| `Medium` | Highest alive replica peer   | Consistent with highest alive peer     | Balanced consistency and availability              |\n| `Strong` | Highest replica peer (by ID) | Strict consistency across all replicas | Maximum consistency, lower throughput              |\n\n### WriteOrdering and Leader Selection\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs168-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L168-L190)\n- [lib/collection/src/shards/replica\\_set/update.rs111-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L111-L166)\n\n### Implementation Details\n\nThe leader peer for an update is determined by the `leader_peer_for_update` method:\n\n**Weak Ordering:**\n\n- Always uses the local peer (`this_peer_id()`)\n- No serialization lock acquired\n- Each peer processes updates independently\n- Provides highest throughput but weakest consistency\n\n**Medium Ordering:**\n\n- Selects the highest peer ID among **alive** replicas (Active or Resharding states)\n- Serialization lock (`write_ordering_lock`) acquired on the leader\n- Filters out locally disabled peers\n- Balances consistency with availability\n\n**Strong Ordering:**\n\n- Selects the highest peer ID among **all** replicas, regardless of state\n- Serialization lock acquired on the leader\n- Provides strongest consistency guarantees\n- May block if the highest peer is unavailable\n\nThe `write_ordering_lock` is a `Mutex<()>` that serializes updates on the leader peer, ensuring operations are applied in a consistent order.\n\n**Sources:**",
      "index": 3,
      "token_count": 440,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 5794,
      "end_char": 7799
    },
    {
      "content": "s updates on the leader peer, ensuring operations are applied in a consistent order.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs168-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L168-L190)\n- [lib/collection/src/shards/replica\\_set/mod.rs114](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L114-L114)\n- [lib/collection/src/shards/replica\\_set/update.rs136-142](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L136-L142)\n\n---\n\n## Replica Coordination and Leader Selection\n\n### Leader-Based Update Flow\n\nWhen `Medium` or `Strong` ordering is specified, updates flow through a designated leader peer to ensure consistent ordering:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs111-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L111-L166)\n- [lib/collection/src/shards/replica\\_set/update.rs669-686](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L669-L686)\n\n### Forwarding to Leader\n\nIf the local peer is not the designated leader, the update is forwarded via internal gRPC:\n\n1. `RemoteShard::forward_update` sends the operation to the leader peer\n2. If forwarding fails with a transient error, the leader is marked as locally disabled\n3. A service error is returned to the client to retry\n\nThis ensures that even if a client connects to a non-leader peer, the update will be properly coordinated through the leader.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs148-165](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L148-L165)\n\n---\n\n## Clock-Based Consistency\n\nQdrant uses logical clocks to detect and resolve conflicting updates across replicas. Each replica maintains a `ClockSet` that tracks logical timestamps.\n\n### ClockTag Structure",
      "index": 4,
      "token_count": 596,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 7699,
      "end_char": 9705
    },
    {
      "content": "licas. Each replica maintains a `ClockSet` that tracks logical timestamps.\n\n### ClockTag Structure\n\nEvery update operation is tagged with a `ClockTag` containing:\n\n```\n```\n\nThe `ClockSet` maintains a mapping of clocks and increments ticks for each new operation:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs290-292](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L290-L292)\n- [lib/collection/src/shards/replica\\_set/mod.rs116](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L116-L116)\n\n### Clock Rejection and Retry\n\nWhen an update is rejected due to an old clock (another replica has seen a newer tick), the operation is retried with a fresh clock:\n\n1. **Initial attempt:** Update sent with `clock_tick = N`\n2. **Replica A:** Accepts and stores `tick = N`\n3. **Replica B:** Already saw `tick = N+1` from a concurrent update\n4. **Replica B:** Returns `UpdateStatus::ClockRejected`\n5. **Leader:** Detects rejection, advances clock to `max(N, echo_ticks)`, retries\n6. **Retry:** Update sent with `clock_tick = N+2`\n7. **All replicas:** Accept the update\n\nThe maximum number of retries is defined by `UPDATE_MAX_CLOCK_REJECTED_RETRIES = 3`.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs16-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L16-L20)\n- [lib/collection/src/shards/replica\\_set/update.rs212-250](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L212-L250)\n- [lib/collection/src/shards/replica\\_set/update.rs368-396](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L368-L396)\n\n### Clock Advancement\n\nAfter each update, the leader examines the echoed clock ticks from all replicas and advances its local clock to the maximum observed:\n\n```\n```\n\nThis ensures that the local clock stays synchronized with the distributed state.\n\n**Sources:**",
      "index": 5,
      "token_count": 605,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 9605,
      "end_char": 11640
    },
    {
      "content": "``\n\nThis ensures that the local clock stays synchronized with the distributed state.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs368-396](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L368-L396)\n\n---\n\n## Write Consistency Factor\n\nThe write consistency factor determines how many replicas must successfully apply an update before the operation is considered successful.\n\n### Configuration\n\nThe `write_consistency_factor` is configured in collection parameters and defaults to 1:\n\n```\n```\n\n### Success Criteria\n\nAn update succeeds if:\n\n1. At least `write_consistency_factor` replicas successfully apply the update\n2. At least one **Active** or **Resharding** replica applies the update\n3. The consistency factor is capped at the total number of replicas\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs355-365](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L355-L365)\n- [lib/collection/src/shards/replica\\_set/update.rs432-511](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L432-L511)\n- [lib/collection/src/shards/replica\\_set/update.rs513-522](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L513-L522)\n\n### Handling Partial Failures\n\nWhen some replicas fail but enough succeed to meet the consistency factor:\n\n1. **Failed replicas** are marked as locally disabled\n2. If `wait=true`, the operation waits for consensus to deactivate the failed replicas (30s timeout)\n3. If deactivation times out, a consistency error is returned to the user\n4. Failed replicas will automatically recover via shard transfer\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs446-495](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L446-L495)\n\n---\n\n## Failure Handling and Recovery\n\n### Locally Disabled Peers",
      "index": 6,
      "token_count": 562,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 11540,
      "end_char": 13536
    },
    {
      "content": "eplica_set/update.rs#L446-L495)\n\n---\n\n## Failure Handling and Recovery\n\n### Locally Disabled Peers\n\nWhen a replica fails to apply an update, it is marked as **locally disabled** to prevent future updates from being sent to it:\n\n```\n```\n\nThe `locally_disabled_peers` registry tracks:\n\n- Which peers are disabled\n- When they were disabled\n- The replica state they were in when disabled\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs98](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L98-L98)\n- [lib/collection/src/shards/replica\\_set/update.rs597-662](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L597-L662)\n\n### Failure Detection Flow\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs597-662](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L597-L662)\n- [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L872-L896)\n\n### Replica State Transitions\n\nReplicas progress through various states during their lifecycle:\n\n| State          | Description                  | Accepts Updates? | Accepts Queries? |\n| -------------- | ---------------------------- | ---------------- | ---------------- |\n| `Initializing` | Initial state after creation | Yes              | No               |\n| `Active`       | Fully operational            | Yes              | Yes              |\n| `Partial`      | Receiving shard transfer     | Yes              | No               |\n| `Recovery`     | Recovering from snapshot     | Force only       | No               |\n| `Listener`     | Read-only replica            | Yes (no wait)    | Yes              |\n| `Resharding`   | Participating in resharding  | Yes              | Yes              |\n| `Dead`         | Failed replica               | No               | No               |",
      "index": 7,
      "token_count": 537,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 13436,
      "end_char": 15423
    },
    {
      "content": "|\n| `Dead`         | Failed replica               | No               | No               |\n\nThe `is_peer_updatable` method determines whether updates should be sent to a replica:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs567-586](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L567-L586)\n- [lib/collection/src/shards/replica\\_set/update.rs24-106](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L24-L106)\n\n### Consensus Synchronization\n\nThe `sync_local_state` method periodically reports locally disabled peers to consensus:\n\n1. `locally_disabled_peers.notify_elapsed()` returns peers ready to be reported\n2. `notify_peer_failure_cb` is called for each failed peer\n3. Consensus proposes a `SetShardReplicaState` operation to mark the peer as `Dead`\n4. Related shard transfers are aborted\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L872-L896)\n- [lib/collection/src/collection/mod.rs595-646](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L595-L646)\n\n---\n\n## Rate Limiting\n\nIn strict mode, Qdrant can enforce write rate limits to prevent resource exhaustion.\n\n### Write Rate Limiter\n\nThe `write_rate_limiter` is configured per replica set:\n\n```\n```\n\nThe rate limiter is initialized from collection configuration:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs117](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L117-L117)\n- [lib/collection/src/shards/replica\\_set/mod.rs196-204](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L196-L204)\n\n### Rate Limit Enforcement\n\nBefore applying an update, the rate limiter checks if the operation is allowed:\n\n```\n```\n\nThe cost is estimated based on the number of points affected by the operation.",
      "index": 8,
      "token_count": 612,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 15323,
      "end_char": 17365
    },
    {
      "content": "is allowed:\n\n```\n```\n\nThe cost is estimated based on the number of points affected by the operation. If the rate limit is exceeded, a `CollectionError::RateLimitError` is returned.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs540-565](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L540-L565)\n- [lib/collection/src/shards/replica\\_set/mod.rs843-868](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L843-L868)\n\n### Exemptions\n\nInternal operations and resharding operations are exempt from rate limiting:\n\n- Operations with `hw_measurement_acc.is_disposable()` are not rate limited\n- Resharding operations automatically use disposable hardware measurement\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs856-859](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L856-L859)\n- [lib/collection/src/shards/replica\\_set/update.rs128-132](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L128-L132)\n\n---\n\n## Complete Update Flow\n\n### End-to-End Write Path with Consistency\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs111-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L111-L166)\n- [lib/collection/src/shards/replica\\_set/update.rs195-251](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L195-L251)\n- [lib/collection/src/shards/replica\\_set/update.rs253-538](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L253-L538)\n\n### Failure Recovery Example\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs432-495](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L432-L495)\n- [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.",
      "index": 9,
      "token_count": 679,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 17265,
      "end_char": 19261
    },
    {
      "content": "ca_set/update.rs#L432-L495)\n- [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L872-L896)\n- [lib/collection/src/collection/mod.rs595-646](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L595-L646)\n\n---\n\n## Key Takeaways\n\n1. **Three ordering levels:** Weak (eventual), Medium (leader-based, alive peers), Strong (leader-based, all peers)\n\n2. **Logical clocks:** Every operation receives a `ClockTag` with monotonically increasing ticks to detect conflicts\n\n3. **Write consistency factor:** Configurable number of replicas that must successfully apply an update\n\n4. **Automatic failure recovery:** Failed replicas are marked locally disabled, reported to consensus, and automatically recovered via shard transfer\n\n5. **Rate limiting:** Optional per-minute write rate limits in strict mode, with cost based on affected points\n\n6. **Parallel execution:** Updates are sent to all replicas in parallel (with optional concurrency limit), reducing latency\n\n7. **Retry mechanism:** Clock-rejected operations are retried up to 3 times with fresh clocks\n\nThe combination of these mechanisms enables Qdrant to provide tunable consistency guarantees while maintaining high availability and performance across distributed replicas.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs1-686](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L1-L686)\n- [lib/collection/src/shards/replica\\_set/mod.rs1-1690](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L1-L1690)\n- [lib/collection/src/collection/mod.rs595-646](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L595-L646)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Write Consistency and Replication](#write-consistency-and-replication.md)\n- [Purpose and Scope](#purpose-and-scope.md)",
      "index": 10,
      "token_count": 562,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 19161,
      "end_char": 21184
    },
    {
      "content": "nd Replication](#write-consistency-and-replication.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Write Ordering Levels](#write-ordering-levels.md)\n- [WriteOrdering and Leader Selection](#writeordering-and-leader-selection.md)\n- [Implementation Details](#implementation-details.md)\n- [Replica Coordination and Leader Selection](#replica-coordination-and-leader-selection.md)\n- [Leader-Based Update Flow](#leader-based-update-flow.md)\n- [Forwarding to Leader](#forwarding-to-leader.md)\n- [Clock-Based Consistency](#clock-based-consistency.md)\n- [ClockTag Structure](#clocktag-structure.md)\n- [Clock Rejection and Retry](#clock-rejection-and-retry.md)\n- [Clock Advancement](#clock-advancement.md)\n- [Write Consistency Factor](#write-consistency-factor.md)\n- [Configuration](#configuration.md)\n- [Success Criteria](#success-criteria.md)\n- [Handling Partial Failures](#handling-partial-failures.md)\n- [Failure Handling and Recovery](#failure-handling-and-recovery.md)\n- [Locally Disabled Peers](#locally-disabled-peers.md)\n- [Failure Detection Flow](#failure-detection-flow.md)\n- [Replica State Transitions](#replica-state-transitions.md)\n- [Consensus Synchronization](#consensus-synchronization.md)\n- [Rate Limiting](#rate-limiting.md)\n- [Write Rate Limiter](#write-rate-limiter.md)\n- [Rate Limit Enforcement](#rate-limit-enforcement.md)\n- [Exemptions](#exemptions.md)\n- [Complete Update Flow](#complete-update-flow.md)\n- [End-to-End Write Path with Consistency](#end-to-end-write-path-with-consistency.md)\n- [Failure Recovery Example](#failure-recovery-example.md)\n- [Key Takeaways](#key-takeaways.md)",
      "index": 11,
      "token_count": 412,
      "metadata": {
        "title": "_qdrant_qdrant_6.2-write-consistency-and-replication",
        "source": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "file_name": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.590727",
        "total_chunks": 12
      },
      "start_char": 21084,
      "end_char": 23132
    },
    {
      "content": "Distributed System Features | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 626,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 0,
      "end_char": 2041
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Distributed System Features\n\nRelevant source files\n\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.",
      "index": 1,
      "token_count": 636,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 1941,
      "end_char": 3990
    },
    {
      "content": "n/snapshots_manager.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n\nThis document describes the distributed deployment capabilities of Qdrant.",
      "index": 2,
      "token_count": 685,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 3890,
      "end_char": 5899
    },
    {
      "content": "203e41/src/tonic/mod.rs)\n\nThis document describes the distributed deployment capabilities of Qdrant. It covers cluster architecture, data distribution through sharding and replication, write consistency models, and peer management. For detailed information about the Raft consensus protocol implementation, see [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md). For shard transfer mechanisms and resharding operations, see [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md).\n\n## Overview\n\nQdrant supports distributed deployment mode where multiple nodes (peers) form a cluster. In this mode:\n\n- **Metadata** (collection configurations, shard placement, peer membership) is coordinated through Raft consensus\n- **Data operations** (point updates, searches) use optimistic replication with logical clocks\n- **Collections** are split into shards distributed across peers\n- **Shards** are replicated for fault tolerance\n- **Peers** communicate via internal gRPC on a separate P2P port\n\nThe distributed mode is enabled via the `cluster.enabled` configuration and requires coordination through the Raft consensus protocol running in a dedicated thread on each peer.\n\n**Sources:** [src/main.rs280-306](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L280-L306) [config/config.yaml301-327](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L301-L327) [src/settings.rs68-88](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L68-L88)\n\n## Cluster Architecture\n\n### Peer Components\n\n```\n```\n\n**Peer Architecture**\n\nEach peer in the cluster runs:\n\n1. **Main thread** - Initializes services and spawns worker threads\n2. **Consensus thread** - Runs Raft protocol, processes metadata operations\n3. **REST/gRPC APIs** - Handle client requests\n4. **Internal gRPC server** - Handles peer-to-peer communication on the P2P port\n5. **Dispatcher** - Routes requests to consensus or directly to TableOfContent\n6. **TableOfContent** - Manages collections and shards",
      "index": 3,
      "token_count": 512,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 5799,
      "end_char": 7839
    },
    {
      "content": "to consensus or directly to TableOfContent\n6. **TableOfContent** - Manages collections and shards\n\n**Sources:** [src/main.rs388-502](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L388-L502) [src/consensus.rs44-58](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L44-L58) [src/tonic/mod.rs255-279](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L255-L279)\n\n### Cluster Configuration\n\nThe cluster is configured through the `cluster` section in `config.yaml`:\n\n| Configuration                      | Type  | Default | Description                          |\n| ---------------------------------- | ----- | ------- | ------------------------------------ |\n| `enabled`                          | bool  | `false` | Enable distributed mode              |\n| `peer_id`                          | u64   | auto    | Unique peer identifier (1 to 2^53-1) |\n| `p2p.port`                         | u16   | `6335`  | Port for internal P2P communication  |\n| `p2p.enable_tls`                   | bool  | `false` | Use TLS for peer communication       |\n| `p2p.connection_pool_size`         | usize | 1       | Number of connections per peer       |\n| `grpc_timeout_ms`                  | u64   | 5000    | Timeout for internal gRPC calls      |\n| `connection_timeout_ms`            | u64   | 5000    | Timeout for establishing connections |\n| `consensus.tick_period_ms`         | u64   | 100     | Raft tick interval                   |\n| `consensus.max_message_queue_size` | usize | 100     | Backpressure limit for consensus     |\n| `consensus.bootstrap_timeout_sec`  | u64   | 15      | Timeout for joining cluster          |\n| `consensus.compact_wal_entries`    | u64   | 128     | Compact WAL after this many entries  |\n\n**Sources:** [config/config.yaml301-327](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L301-L327) [src/settings.rs68-139](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L68-L139)\n\n### Peer Initialization\n\n```\n```\n\n**Peer Initialization Flow**",
      "index": 4,
      "token_count": 603,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 7739,
      "end_char": 9773
    },
    {
      "content": "48203e41/src/settings.rs#L68-L139)\n\n### Peer Initialization\n\n```\n```\n\n**Peer Initialization Flow**\n\nThe initialization process differs based on deployment type:\n\n1. **First peer** (`--uri` provided, no `--bootstrap`):\n\n   - Generates unique peer\\_id\n   - Self-elects as Raft leader\n   - Adds itself as first voter in consensus\n\n2. **Joining peer** (`--bootstrap` and `--uri` provided):\n\n   - Contacts bootstrap peer via `add_peer_to_known` RPC\n   - Receives list of all peers and their addresses\n   - Joins cluster as learner\n   - Receives log entries from leader\n   - Gets promoted to voter once caught up\n\n3. **Recovering peer** (has existing state):\n\n   - Loads persisted peer\\_id and Raft state\n   - Notifies peers if URI has changed\n   - Rejoins with existing role\n\n**Sources:** [src/main.rs260-306](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L260-L306) [src/consensus.rs172-283](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L172-L283) [src/consensus.rs286-323](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L286-L323) [src/consensus.rs420-463](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L420-L463)\n\n## Data Distribution\n\n### Sharding and Replication\n\n```\n```\n\n**Sharding and Replication Model**\n\nData is distributed across the cluster using:\n\n- **Shards** - Collection data is partitioned into multiple shards (controlled by `shard_number`)\n- **Replicas** - Each shard has multiple replicas on different peers (`replication_factor`)\n- **ShardReplicaSet** - Coordinates all replicas of a shard\n- **Local vs Remote** - Each peer has local shards (with data) and remote shards (proxies to other peers)\n\nThe `ShardHolder` on each peer manages the `ShardReplicaSet` instances, which in turn manage `LocalShard` and `RemoteShard` instances.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs84-119](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L84-L119) [lib/collection/src/collection/mod.rs61-94](https://github.",
      "index": 5,
      "token_count": 632,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 9673,
      "end_char": 11717
    },
    {
      "content": "/src/shards/replica_set/mod.rs#L84-L119) [lib/collection/src/collection/mod.rs61-94](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L61-L94)\n\n### Replica States\n\n```\n```\n\n**Replica State Transitions**\n\nEach replica has a state managed through consensus:\n\n| State                 | Description                                 | Accepts Updates    | Serves Queries |\n| --------------------- | ------------------------------------------- | ------------------ | -------------- |\n| `Initializing`        | Newly created, not yet activated            | Yes                | No             |\n| `Active`              | Fully operational                           | Yes                | Yes            |\n| `Partial`             | Receiving streaming updates during transfer | Yes                | No             |\n| `Recovery`            | Recovering from snapshot/WAL                | No (unless forced) | No             |\n| `PartialSnapshot`     | Creating snapshot                           | No (unless forced) | Yes            |\n| `Listener`            | Receives updates but doesn't serve queries  | Yes (async)        | No             |\n| `Resharding`          | Target shard during scale-up                | Yes                | No             |\n| `ReshardingScaleDown` | Source shard during scale-down              | Yes                | Yes            |\n| `Dead`                | Failed or deactivated                       | No                 | No             |\n\nState transitions are coordinated through the `SetShardReplicaState` consensus operation.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs47-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L47-L82) [lib/collection/src/shards/replica\\_set/update.rs46-106](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L46-L106) [lib/storage/src/content\\_manager/mod.rs20-207](https://github.",
      "index": 6,
      "token_count": 468,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 11617,
      "end_char": 13603
    },
    {
      "content": "ards/replica_set/update.rs#L46-L106) [lib/storage/src/content\\_manager/mod.rs20-207](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs#L20-L207)\n\n## Write Consistency\n\n### Write Ordering Levels\n\n```\n```\n\n**Write Ordering Modes**\n\nQdrant provides three write ordering levels that trade off between throughput and consistency:\n\n1. **Weak** (`WriteOrdering::Weak`):\n\n   - No leader selection - operations processed on any peer\n   - No serialization lock\n   - Highest throughput\n   - Eventual consistency via logical clocks\n   - Use case: High-volume ingestion where exact ordering doesn't matter\n\n2. **Medium** (`WriteOrdering::Medium`):\n\n   - Leader is highest *alive* peer\\_id\n   - Operations serialized through `write_ordering_lock` on leader\n   - Consistency guarantees per shard\n   - Leader forwards if not local\n   - Use case: Standard operations requiring ordering\n\n3. **Strong** (`WriteOrdering::Strong`):\n\n   - Leader is highest peer\\_id (even if temporarily unavailable)\n   - Operations serialized through `write_ordering_lock` on leader\n   - Strongest consistency guarantees\n   - May have higher latency if leader is slow\n   - Use case: Critical operations requiring strict ordering\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs108-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L108-L166) [lib/collection/src/shards/replica\\_set/update.rs169-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L169-L190)\n\n### Clock-Based Consistency\n\n```\n```\n\n**Logical Clock Mechanism**\n\nEach shard replica maintains a `LocalShardClocks` structure with per-peer logical clocks. Every update is tagged with:\n\n- **peer\\_id** - Originating peer\n- **clock\\_id** - Clock identifier\n- **tick** - Monotonically increasing counter\n\nWhen a replica receives an update:\n\n1. Checks if the clock tick is newer than its local clock for that peer\n2. If older, rejects the update (returns `None`)\n3.",
      "index": 7,
      "token_count": 541,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 13503,
      "end_char": 15535
    },
    {
      "content": "tick is newer than its local clock for that peer\n2. If older, rejects the update (returns `None`)\n3. If newer, applies update and advances local clock\n\nIf updates are rejected, the ReplicaSet retries up to 3 times with incremented ticks. This ensures:\n\n- Eventual consistency across replicas\n- Updates from same peer are applied in order\n- Concurrent updates from different peers can be reordered\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs16-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L16-L20) [lib/collection/src/shards/replica\\_set/update.rs195-251](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L195-L251) [lib/collection/src/shards/replica\\_set/update.rs253-363](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L253-L363)\n\n### Write Consistency Factor\n\nThe `write_consistency_factor` determines how many replicas must successfully apply an update:\n\n```\n```\n\nIf a replica fails to apply an update, it is marked as \"locally disabled\" and reported to consensus for automatic recovery through shard transfers.\n\n**Sources:** [lib/collection/src/shards/replica\\_set/update.rs355-428](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L355-L428)\n\n## Consensus Overview\n\nMetadata operations are coordinated through Raft consensus, including:\n\n- **Collection operations** - Create, update, delete collections\n- **Shard management** - Create/drop shards, replica state changes\n- **Peer management** - Add/remove peers from cluster\n- **Shard transfers** - Start, finish, abort transfers\n- **Resharding** - Start, finish, abort resharding operations\n\n### Consensus Operations\n\n| Operation Type  | Examples                                                   | Flow                                        |\n| --------------- | ---------------------------------------------------------- | ------------------------------------------- |",
      "index": 8,
      "token_count": 512,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 15435,
      "end_char": 17476
    },
    {
      "content": "--------------------------------------------------- | ------------------------------------------- |\n| Collection Meta | `CreateCollection`, `UpdateCollection`, `DeleteCollection` | Proposed → Replicated → Committed → Applied |\n| Replica State   | `SetShardReplicaState`                                     | State transitions managed by consensus      |\n| Peer Lifecycle  | `AddPeer`, `RemovePeer`                                    | Raft membership changes                     |\n| Data Transfer   | `TransferShard` (Start/Finish/Abort)                       | Coordination of shard movement              |\n| Resharding      | `Resharding` (Start/Finish/Abort)                          | Coordination of shard splitting/merging     |\n\n### Consensus Architecture\n\nThe consensus system uses:\n\n- **RawNode** from the `raft` crate for Raft state machine\n- **Persistent** for durable storage of Raft state and peer addresses\n- **ConsensusManager** for operation proposals and state queries\n- **Message channels** for communication between API layer and consensus thread\n\nDetailed implementation is covered in [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md).\n\n**Sources:** [src/consensus.rs1-58](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L1-L58) [lib/storage/src/content\\_manager/mod.rs20-207](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs#L20-L207) [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs25-123](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L25-L123)\n\n## Peer Management\n\n### Adding a Peer\n\n```\n```\n\n**Peer Addition Process**\n\n1. New peer starts with `--bootstrap` URI and optionally `--uri`\n2. Contacts bootstrap peer via `add_peer_to_known` gRPC\n3. Bootstrap peer proposes `AddPeer` to consensus\n4. All peers update their peer address mappings\n5. New peer receives list of all peers\n6. New peer joins as Raft learner (non-voting)\n7. Leader replicates log entries to new peer\n8.",
      "index": 9,
      "token_count": 502,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 17376,
      "end_char": 19421
    },
    {
      "content": "peers\n6. New peer joins as Raft learner (non-voting)\n7. Leader replicates log entries to new peer\n8. Once caught up, leader proposes promotion to voter\n9. New peer becomes voting member\n\n**Sources:** [src/consensus.rs420-463](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L420-L463) [src/tonic/api/raft\\_api.rs63-105](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L63-L105) [src/consensus.rs627-696](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L627-L696)\n\n### Removing a Peer\n\n```\n```\n\n**Peer Removal Process**\n\n1. Client issues `DELETE /cluster/peer/{id}` request\n2. API checks if peer has any shards\n3. If `force=false` and peer has shards, request is rejected\n4. If allowed, `RemovePeer` is proposed to consensus\n5. Consensus replicates and commits the operation\n6. All peers remove the peer from their address mappings\n7. Collections remove the peer from replica sets\n8. Removed peer becomes isolated (no longer receives updates)\n\nNote: Before removing a peer, it's recommended to transfer all shards off the peer first using shard transfer operations.\n\n**Sources:** [src/actix/api/cluster\\_api.rs58-96](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs#L58-L96)\n\n### Health Checking\n\n```\n```\n\n**Health Checking System**\n\nThe `HealthChecker` task runs in the background and:\n\n1. **Peer health checks**:\n\n   - Periodically pings each peer via `health_check` gRPC\n   - Tracks consecutive failures in `message_send_failures`\n   - Updates `ClusterInfo` with failure counts and timestamps\n\n2. **Replica health monitoring**:\n\n   - Checks for replicas in `Dead` state\n   - Identifies failed transfers\n   - Can trigger automatic recovery\n\n3. **Leader readiness**:\n\n   - Waits for Raft leader to be established\n   - Only performs checks once cluster is stable\n\nThe health information is exposed via the `/cluster` API endpoint.\n\n**Sources:** [src/main.rs424-430](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L424-L430) [lib/storage/src/types.",
      "index": 10,
      "token_count": 603,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 19321,
      "end_char": 21363
    },
    {
      "content": "4-430](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L424-L430) [lib/storage/src/types.rs200-246](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L200-L246)\n\n## Shard Operations Overview\n\n### Shard Transfer Lifecycle\n\nShard transfers move a shard replica from one peer to another. The high-level flow:\n\n1. **Initiation** - `TransferShard::Start` proposed to consensus\n2. **State change** - Target replica set to `Partial` or `Recovery` state\n3. **Data transfer** - Source streams data to target (method-specific)\n4. **Activation** - Target replica promoted to `Active`\n5. **Completion** - `TransferShard::Finish` committed to consensus\n\nTransfer methods:\n\n- `StreamRecords` - Incremental streaming of point updates\n- `Snapshot` - Transfer via snapshot file\n- `WalDelta` - Transfer WAL + catch-up\n- `ReshardingStreamRecords` - Special mode for resharding\n\nDetailed mechanisms are covered in [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md).\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs36-141](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L36-L141) [lib/collection/src/shards/transfer/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/transfer/mod.rs)\n\n### Resharding Operations\n\nResharding changes the number of shards in a collection:\n\n- **Scale Up** - Split shards to increase parallelism\n- **Scale Down** - Merge shards to reduce overhead\n\nResharding is managed through consensus operations:\n\n- `Resharding::Start` - Initiate resharding with new shard distribution\n- `Resharding::Finish` - Complete resharding, commit new hash ring\n- `Resharding::Abort` - Cancel ongoing resharding\n\nThe resharding process creates temporary target shards, migrates data, then atomically switches the routing (hash ring).\n\nDetailed resharding mechanisms are covered in [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md).",
      "index": 11,
      "token_count": 561,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 21263,
      "end_char": 23278
    },
    {
      "content": "covered in [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md).\n\n**Sources:** [lib/collection/src/collection/resharding.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/resharding.rs) [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs83-89](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L83-L89)\n\n## Cluster API\n\n### REST Endpoints\n\n| Endpoint                       | Method | Purpose                          |\n| ------------------------------ | ------ | -------------------------------- |\n| `/cluster`                     | GET    | Get cluster status and Raft info |\n| `/cluster/recover`             | POST   | Request consensus snapshot       |\n| `/cluster/peer/{id}`           | DELETE | Remove peer from cluster         |\n| `/cluster/metadata/keys`       | GET    | List cluster metadata keys       |\n| `/cluster/metadata/keys/{key}` | GET    | Get cluster metadata value       |\n| `/cluster/metadata/keys/{key}` | PUT    | Set cluster metadata value       |\n| `/cluster/metadata/keys/{key}` | DELETE | Delete cluster metadata          |\n\n### Cluster Status Response\n\n```\n```\n\n**Sources:** [src/actix/api/cluster\\_api.rs1-197](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs#L1-L197) [lib/storage/src/types.rs147-246](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L147-L246)\n\n### Internal gRPC Services\n\nThe internal gRPC server on the P2P port provides:\n\n| Service               | RPC                          | Purpose                          |\n| --------------------- | ---------------------------- | -------------------------------- |\n| `Raft`                | `send()`                     | Receive Raft messages from peers |\n| `Raft`                | `who_is()`                   | Query peer address by ID         |\n| `Raft`                | `add_peer_to_known()`        | Bootstrap new peer into cluster  |",
      "index": 12,
      "token_count": 508,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 23178,
      "end_char": 25193
    },
    {
      "content": "|\n| `Raft`                | `add_peer_to_known()`        | Bootstrap new peer into cluster  |\n| `QdrantInternal`      | `get_consensus_commit()`     | Get current Raft commit index    |\n| `QdrantInternal`      | `wait_on_consensus_commit()` | Wait for specific commit         |\n| `CollectionsInternal` | Collection operations        | Internal collection management   |\n| `PointsInternal`      | Point operations             | Internal point operations        |\n\n**Sources:** [src/tonic/mod.rs255-305](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L255-L305) [src/tonic/api/raft\\_api.rs1-105](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L1-L105)\n\n## Configuration Examples\n\n### Single Node to Cluster Migration\n\n```\n```\n\n```\n```\n\n```\n```\n\n```\n```\n\n```\n```\n\n### TLS Configuration for P2P\n\n```\n```\n\n**Sources:** [config/config.yaml301-355](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L301-L355) [src/main.rs74-88](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L74-L88)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Distributed System Features](#distributed-system-features.md)\n- [Overview](#overview.md)\n- [Cluster Architecture](#cluster-architecture.md)\n- [Peer Components](#peer-components.md)\n- [Cluster Configuration](#cluster-configuration.md)\n- [Peer Initialization](#peer-initialization.md)\n- [Data Distribution](#data-distribution.md)\n- [Sharding and Replication](#sharding-and-replication.md)\n- [Replica States](#replica-states.md)\n- [Write Consistency](#write-consistency.md)\n- [Write Ordering Levels](#write-ordering-levels.md)\n- [Clock-Based Consistency](#clock-based-consistency.md)\n- [Write Consistency Factor](#write-consistency-factor.md)\n- [Consensus Overview](#consensus-overview.md)\n- [Consensus Operations](#consensus-operations.md)\n- [Consensus Architecture](#consensus-architecture.md)\n- [Peer Management](#peer-management.md)\n- [Adding a Peer](#adding-a-peer.md)\n- [Removing a Peer](#removing-a-peer.md)",
      "index": 13,
      "token_count": 592,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 25093,
      "end_char": 27134
    },
    {
      "content": "(#peer-management.md)\n- [Adding a Peer](#adding-a-peer.md)\n- [Removing a Peer](#removing-a-peer.md)\n- [Health Checking](#health-checking.md)\n- [Shard Operations Overview](#shard-operations-overview.md)\n- [Shard Transfer Lifecycle](#shard-transfer-lifecycle.md)\n- [Resharding Operations](#resharding-operations.md)\n- [Cluster API](#cluster-api.md)\n- [REST Endpoints](#rest-endpoints.md)\n- [Cluster Status Response](#cluster-status-response.md)\n- [Internal gRPC Services](#internal-grpc-services.md)\n- [Configuration Examples](#configuration-examples.md)\n- [Single Node to Cluster Migration](#single-node-to-cluster-migration.md)\n- [TLS Configuration for P2P](#tls-configuration-for-p2p.md)",
      "index": 14,
      "token_count": 181,
      "metadata": {
        "title": "_qdrant_qdrant_7-distributed-system-features",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7-distributed-system-features.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7-distributed-system-features.md",
        "file_name": "_qdrant_qdrant_7-distributed-system-features.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.623433",
        "total_chunks": 15
      },
      "start_char": 27034,
      "end_char": 29082
    },
    {
      "content": "Raft Consensus Protocol | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 0,
      "end_char": 2037
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Raft Consensus Protocol\n\nRelevant source files\n\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.",
      "index": 1,
      "token_count": 655,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 1937,
      "end_char": 3971
    },
    {
      "content": "ps://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n\nThis document describes the implementation of the Raft consensus protocol in Qdrant's distributed deployment mode. The Raft implementation coordinates metadata operations across cluster peers, ensuring that collection configurations, shard assignments, and peer membership changes are consistently applied across all nodes.\n\nFor information about data-level replication and shard transfers, see [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md). For general distributed system concepts, see [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md).\n\n---\n\n## Purpose and Scope\n\nThe Raft consensus protocol in Qdrant serves a specific role: **coordinating metadata operations** across the cluster. This includes:\n\n- Collection creation, deletion, and configuration changes\n- Shard assignment and replica placement\n- Peer membership (adding/removing nodes)\n- Shard transfer coordination\n- Cluster metadata key-value storage\n\n**What Raft does NOT handle:**\n\n- Individual point operations (upserts, deletes) - these use optimistic replication with logical clocks",
      "index": 2,
      "token_count": 565,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 3871,
      "end_char": 5896
    },
    {
      "content": "dividual point operations (upserts, deletes) - these use optimistic replication with logical clocks\n- Search queries - these are routed directly to appropriate shards\n- Shard-level data replication - handled by `ShardReplicaSet` with write consistency factors\n\nThe consensus layer operates independently from data operations, allowing high throughput for vector operations while maintaining strong consistency for cluster topology changes.\n\nSources: [src/consensus.rs1-150](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L1-L150) [lib/storage/src/content\\_manager/consensus\\_ops.rs20-207](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_ops.rs#L20-L207)\n\n---\n\n## Architecture Overview\n\n```\n```\n\n**Key Components:**\n\n| Component           | Type             | Purpose                                          |\n| ------------------- | ---------------- | ------------------------------------------------ |\n| `Consensus`         | Thread Runner    | Main consensus loop processing Raft protocol     |\n| `RawNode`           | Raft Library     | `raft` crate's Raft node implementation          |\n| `ConsensusStateRef` | State Manager    | `Arc<ConsensusManager>` managing consensus state |\n| `Persistent`        | WAL Storage      | Persistent Raft log and hard state               |\n| `OperationSender`   | Proposal Channel | High-level API for proposing operations          |\n| `RaftService`       | gRPC Service     | Receives Raft messages from peers                |\n| `RaftMessageBroker` | Message Sender   | Sends Raft messages to peers                     |\n\nSources: [src/consensus.rs34-58](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L34-L58) [src/main.rs329-447](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L329-L447) [lib/storage/src/content\\_manager/consensus\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_manager.rs)\n\n---\n\n## Consensus Thread Lifecycle",
      "index": 3,
      "token_count": 503,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 5796,
      "end_char": 7809
    },
    {
      "content": "48203e41/lib/storage/src/content_manager/consensus_manager.rs)\n\n---\n\n## Consensus Thread Lifecycle\n\nThe consensus thread is spawned during service initialization and runs independently from the main application logic:\n\n```\n```\n\n**Thread Initialization Steps:**\n\n1. **Load Persistent State** [src/main.rs273-278](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L273-L278) - `Persistent::load_or_init()` loads existing Raft state or initializes new state with optional peer\\_id\n2. **Create Consensus Instance** [src/consensus.rs174-283](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L174-L283) - `Consensus::new()` sets up Raft config, channels, and determines if initialization or recovery is needed\n3. **Bootstrap or Recover** [src/consensus.rs286-463](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L286-L463) - New deployments bootstrap from a peer or self-initialize; existing deployments recover by notifying peers of address changes\n4. **Apply Uncommitted Entries** [src/consensus.rs249-251](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L249-L251) - Before starting the loop, apply any committed but unapplied entries from previous shutdown\n5. **Start Main Loop** [src/consensus.rs465-546](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L465-L546) - Enter infinite loop processing Raft protocol\n\nSources: [src/consensus.rs60-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L60-L170) [src/main.rs273-447](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L273-L447)\n\n---\n\n## Operation Types and Flow\n\nAll operations that require cluster-wide consensus are modeled as `ConsensusOperations`:\n\n```\n```\n\n**Operation Processing Flow:**\n\n```\n```\n\n**Helper Methods for Common Operations:**\n\nThe `ConsensusOperations` enum provides factory methods for common patterns:",
      "index": 4,
      "token_count": 580,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 7709,
      "end_char": 9587
    },
    {
      "content": "Common Operations:**\n\nThe `ConsensusOperations` enum provides factory methods for common patterns:\n\n| Method                 | Purpose                   | Citation                                                                                                                                                               |\n| ---------------------- | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `abort_transfer()`     | Abort a shard transfer    | [lib/storage/src/content\\_manager/consensus\\_ops.rs70-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_ops.rs#L70-L82)     |\n| `finish_transfer()`    | Complete a shard transfer | [lib/storage/src/content\\_manager/consensus\\_ops.rs84-89](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_ops.rs#L84-L89)     |\n| `set_replica_state()`  | Change replica state      | [lib/storage/src/content\\_manager/consensus\\_ops.rs105-122](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_ops.rs#L105-L122) |\n| `initialize_replica()` | Mark replica as Active    | [lib/storage/src/content\\_manager/consensus\\_ops.rs151-163](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_ops.rs#L151-L163) |\n| `start_transfer()`     | Begin shard transfer      | [lib/storage/src/content\\_manager/consensus\\_ops.rs165-170](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_ops.rs#L165-L170) |\n\nSources: [lib/storage/src/content\\_manager/consensus\\_ops.rs38-207](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_ops.rs#L38-L207) [src/consensus.rs627-696](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L627-L696)\n\n---\n\n## Bootstrapping and Peer Management\n\n### First Peer (Origin Peer)",
      "index": 5,
      "token_count": 534,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 9487,
      "end_char": 11505
    },
    {
      "content": "c/consensus.rs#L627-L696)\n\n---\n\n## Bootstrapping and Peer Management\n\n### First Peer (Origin Peer)\n\nThe first peer in a cluster starts without a bootstrap URI and self-initializes:\n\n```\n```\n\nThe origin peer goes through special handling in `try_add_origin()` [src/consensus.rs720-777](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L720-L777):\n\n- Only executes if peer count is 1 and commit index ≤ 1\n- Waits until the peer self-elects as Leader\n- Proposes itself as a voter (AddNode conf change)\n\n### Adding a New Peer\n\nWhen a new peer joins the cluster:\n\n```\n```\n\n**Learner Promotion Logic** [src/consensus.rs784-832](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L784-L832):\n\n- Only the leader promotes learners\n- Promotion only happens when there are no uncommitted changes (commit == last\\_log\\_entry)\n- A learner is promoted when its `matched` index equals the current `commit` index\n- Learners are promoted one at a time to ensure safety\n\n**Recovery After Restart** [src/consensus.rs358-418](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L358-L418): If a peer restarts with a different URI, it notifies other peers:\n\n- Tries to contact any known peer via `add_peer_to_known` with new URI\n- Uses exponential backoff with up to 3 retries\n- Other peers update their `peer_address_by_id` mapping\n\nSources: [src/consensus.rs286-323](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L286-L323) [src/consensus.rs420-463](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L420-L463) [src/tonic/api/raft\\_api.rs64-149](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L64-L149)\n\n---\n\n## Message Processing and Raft Loop\n\nThe consensus thread runs a continuous loop processing two types of messages:\n\n### Message Types\n\n```\n```\n\n### Main Loop Structure\n\nThe consensus loop in `start()` [src/consensus.rs465-546](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L465-L546) operates as follows:\n\n```\n```\n\n**Key Loop Features:**\n\n1.",
      "index": 6,
      "token_count": 664,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 11405,
      "end_char": 13452
    },
    {
      "content": "/blob/48203e41/src/consensus.rs#L465-L546) operates as follows:\n\n```\n```\n\n**Key Loop Features:**\n\n1. **Batching**: Processes up to 128 messages per iteration for efficiency [src/consensus.rs559](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L559-L559)\n2. **Tick Capping**: If Raft messages were received, caps reported ticks to prevent spurious elections [src/consensus.rs488-513](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L488-L513)\n3. **Early Break on Conf-Change**: Only one conf-change can be pending at a time [src/consensus.rs587-611](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L587-L611)\n4. **Idle Detection**: After 3 idle cycles with activity, syncs local state changes [src/consensus.rs541-544](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L541-L544)\n\nSources: [src/consensus.rs465-546](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L465-L546) [src/consensus.rs548-625](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L548-L625)\n\n---\n\n## Processing Ready State\n\nWhen the Raft node has updates to process, the `on_ready()` method handles the work:\n\n```\n```\n\n**Ready State Components** [src/consensus.rs834-979](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L834-L979):\n\n| Component           | Purpose                                          |\n| ------------------- | ------------------------------------------------ |\n| `snapshot`          | Full state snapshot to apply (for lagging peers) |\n| `hs` (HardState)    | Persistent Raft state: term, vote, commit        |\n| `entries`           | Log entries to persist                           |\n| `committed_entries` | Entries to apply to state machine                |\n| `messages`          | Raft messages to send to peers                   |\n| `conf_state`        | Updated cluster configuration                    |\n\n**Entry Application** [lib/storage/src/content\\_manager/consensus/state.rs](https://github.",
      "index": 7,
      "token_count": 621,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 13352,
      "end_char": 15355
    },
    {
      "content": "|\n\n**Entry Application** [lib/storage/src/content\\_manager/consensus/state.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus/state.rs):\n\n- Decodes each entry's data as `ConsensusOperations` (CBOR format)\n- Routes `CollectionMeta` operations to `TableOfContent`\n- Updates `peer_address_by_id` for peer management operations\n- Updates `cluster_metadata` for metadata operations\n- Tracks `last_applied_entry` to avoid re-application\n\nSources: [src/consensus.rs834-979](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L834-L979) [src/consensus.rs981-1133](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L981-L1133)\n\n---\n\n## Sending Messages to Peers\n\nThe `RaftMessageBroker` handles sending Raft protocol messages to other peers:\n\n```\n```\n\n**Message Sending Process** [src/consensus.rs1135-1308](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L1135-L1308):\n\n1. **Batch Messages**: Groups messages by destination peer ID\n2. **Spawn Async Tasks**: Uses tokio runtime to send messages concurrently\n3. **Get gRPC Channel**: Retrieves connection from `TransportChannelPool`\n4. **Encode and Send**: Encodes Raft message as protobuf and sends via `RaftClient::send()`\n5. **Error Tracking**: Records failures in `message_send_failures` for monitoring\n\n**Message Batching Strategy**:\n\n- Messages are batched per peer to reduce task overhead\n- Each batch is sent in a single async task\n- Failures are logged but don't block the consensus loop\n\n**Special Handling for Snapshots** [src/consensus.rs1225-1261](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L1225-L1261):\n\n- Snapshot messages trigger `ConsensusOperations::RequestSnapshot` to be sent to self\n- This ensures snapshots are created in the consensus thread context\n- After creation, `report_snapshot()` notifies Raft of success/failure\n\nSources: [src/consensus.rs1135-1308](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L1135-L1308)\n\n---\n\n## WAL and State Persistence",
      "index": 8,
      "token_count": 605,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 15255,
      "end_char": 17303
    },
    {
      "content": "b.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L1135-L1308)\n\n---\n\n## WAL and State Persistence\n\n### Persistent Storage Structure\n\nThe `Persistent` struct manages Raft's durable state:\n\n```\n```\n\n**State Files**:\n\n| File              | Content                             | Purpose                               |\n| ----------------- | ----------------------------------- | ------------------------------------- |\n| `meta.json`       | `{this_peer_id, is_new_deployment}` | Peer identity and cluster init status |\n| `hard_state.json` | `{term, vote, commit}`              | Raft's persistent hard state          |\n| `conf_state.json` | `{voters, learners, ...}`           | Current cluster configuration         |\n| `raft_log_*.dat`  | CBOR-encoded log entries            | Write-ahead log of operations         |\n| `snapshot_*.dat`  | Consensus state snapshot            | Full state for recovering peers       |\n\n**WAL Compaction** [src/consensus.rs253-258](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L253-L258):\n\n- Compacts WAL when it exceeds `compact_wal_entries` applied operations (default: 128)\n- Creates a snapshot of current state\n- Truncates old log entries before the snapshot\n- Allows faster bootstrap for new peers (transfer snapshot instead of replaying full log)\n\nSources: [lib/storage/src/content\\_manager/consensus/persistent.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus/persistent.rs) [config/config.yaml314-326](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L314-L326)\n\n---\n\n## Configuration\n\nThe consensus configuration is specified in `ConsensusConfig`:\n\n```\n```\n\n**Configuration Parameters**:\n\n| Parameter                | Default | Description                                                                         |\n| ------------------------ | ------- | ----------------------------------------------------------------------------------- |\n| `tick_period_ms`         | 100     | How often Raft ticks (in ms).",
      "index": 9,
      "token_count": 478,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 17203,
      "end_char": 19229
    },
    {
      "content": "----------------------------- |\n| `tick_period_ms`         | 100     | How often Raft ticks (in ms). Lower = faster election/heartbeat, higher CPU/network |\n| `bootstrap_timeout_sec`  | 15      | Timeout for initial peer bootstrap requests                                         |\n| `max_message_queue_size` | 100     | Backpressure limit for consensus operation channel                                  |\n| `message_timeout_ticks`  | 10      | (Unused in current implementation)                                                  |\n| `compact_wal_entries`    | 128     | Compact WAL after this many applied entries                                         |\n\n**Derived Timeouts**:\n\n- **Election Timeout**: `tick_period_ms * max_election_tick` (typically \\~2 seconds with default config)\n- **Heartbeat Interval**: `tick_period_ms * heartbeat_tick` (typically \\~1 second)\n- **Leader Established**: `tick_period_ms * max_election_tick` (\\~2 seconds)\n\n**Important Tuning Notes** [config/config.yaml314-326](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L314-L326):\n\n> \"Setting this parameter to lower value will allow consensus to detect disconnected nodes earlier, but too frequent tick period may create significant network and CPU overhead. We encourage you NOT to change this parameter unless you know what you are doing.\"\n\nSources: [src/settings.rs111-139](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L111-L139) [config/config.yaml314-326](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L314-L326) [src/consensus.rs203-209](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L203-L209)\n\n---\n\n## Internal gRPC API\n\nThe `RaftService` provides the gRPC API for inter-peer Raft communication:\n\n```\n```\n\n**RPC Methods**:\n\n| Method                    | Request                 | Response   | Purpose                                   |\n| ------------------------- | ----------------------- | ---------- | ----------------------------------------- |",
      "index": 10,
      "token_count": 496,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 19129,
      "end_char": 21143
    },
    {
      "content": "-------------- | ----------------------- | ---------- | ----------------------------------------- |\n| `send`                    | `RaftMessage` (encoded) | `()`       | Receive Raft protocol messages from peers |\n| `who_is`                  | `PeerId`                | `UriStr`   | Resolve peer ID to URI                    |\n| `add_peer_to_known`       | `{id, uri?, port?}`     | `AllPeers` | Bootstrap a new peer into cluster         |\n| `add_peer_as_participant` | `PeerId`                | `()`       | Deprecated, no-op for compatibility       |\n\n**Bootstrap Peer Sequence** [src/tonic/api/raft\\_api.rs64-149](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L64-L149):\n\n1. New peer calls `add_peer_to_known` on bootstrap peer\n2. Bootstrap peer proposes `ConsensusOperations::AddPeer` with `AddLearnerNode`\n3. Operation replicates and commits via Raft\n4. Bootstrap peer returns `AllPeers` with all current peer addresses plus `first_peer_id`\n5. New peer stores peer addresses and sets initial conf state with `first_voter_id`\n\nSources: [src/tonic/api/raft\\_api.rs1-150](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L1-L150) [src/tonic/mod.rs256-360](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L256-L360)\n\n---\n\n## Cluster Metadata Storage\n\nQdrant supports arbitrary key-value metadata storage in consensus:\n\n```\n```\n\n**API Endpoints**:\n\n| Endpoint                       | Method | Description                |\n| ------------------------------ | ------ | -------------------------- |\n| `/cluster/metadata/keys`       | GET    | List all metadata keys     |\n| `/cluster/metadata/keys/{key}` | GET    | Get value for specific key |\n| `/cluster/metadata/keys/{key}` | PUT    | Set value (JSON) for key   |\n| `/cluster/metadata/keys/{key}` | DELETE | Remove key (sets to null)  |\n\n**Use Cases**:\n\n- Storing cluster-wide configuration\n- Coordination flags between nodes\n- Custom metadata for tooling/monitoring\n\nSources: [src/actix/api/cluster\\_api.rs98-178](https://github.",
      "index": 11,
      "token_count": 561,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 21043,
      "end_char": 23089
    },
    {
      "content": "stom metadata for tooling/monitoring\n\nSources: [src/actix/api/cluster\\_api.rs98-178](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs#L98-L178) [lib/storage/src/content\\_manager/consensus\\_ops.rs50-53](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/consensus_ops.rs#L50-L53)\n\n---\n\n## High Priority Thread\n\nThe consensus thread attempts to run with high priority on Linux systems:\n\n```\n```\n\nThis is a best-effort optimization - it will likely fail without elevated permissions but gracefully continues. The reasoning is that consensus timing is critical for cluster stability:\n\n- Election timeouts depend on timely message processing\n- Heartbeat delays can trigger unnecessary leader elections\n- Higher priority reduces latency variance\n\nSources: [src/consensus.rs99-106](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L99-L106) [src/consensus.rs121-128](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L121-L128)\n\n---\n\n## Monitoring and Health\n\n### Cluster Status API\n\nThe `/cluster` endpoint returns consensus health information:\n\n```\n```\n\n**Key Metrics**:\n\n- `term`: Current Raft term (increases with elections)\n- `commit`: Index of last committed operation\n- `pending_operations`: Uncommitted entries count\n- `role`: Follower, Candidate, Leader, or PreCandidate\n- `consensus_thread_status`: Working, Stopped, or StoppedWithErr\n\n### Health Tracking\n\nThe `ConsensusManager` tracks consensus health:\n\n- `record_consensus_working()`: Called on each `on_ready()` cycle\n- `on_consensus_thread_err()`: Called if consensus thread panics\n- `on_consensus_stopped()`: Called on clean shutdown\n\nSources: [lib/storage/src/types.rs148-246](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs#L148-L246) [src/actix/api/cluster\\_api.rs32-41](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs#L32-L41)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page",
      "index": 12,
      "token_count": 582,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 22989,
      "end_char": 24986
    },
    {
      "content": "/api/cluster_api.rs#L32-L41)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Raft Consensus Protocol](#raft-consensus-protocol.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Architecture Overview](#architecture-overview.md)\n- [Consensus Thread Lifecycle](#consensus-thread-lifecycle.md)\n- [Operation Types and Flow](#operation-types-and-flow.md)\n- [Bootstrapping and Peer Management](#bootstrapping-and-peer-management.md)\n- [First Peer (Origin Peer)](#first-peer-origin-peer.md)\n- [Adding a New Peer](#adding-a-new-peer.md)\n- [Message Processing and Raft Loop](#message-processing-and-raft-loop.md)\n- [Message Types](#message-types.md)\n- [Main Loop Structure](#main-loop-structure.md)\n- [Processing Ready State](#processing-ready-state.md)\n- [Sending Messages to Peers](#sending-messages-to-peers.md)\n- [WAL and State Persistence](#wal-and-state-persistence.md)\n- [Persistent Storage Structure](#persistent-storage-structure.md)\n- [Configuration](#configuration.md)\n- [Internal gRPC API](#internal-grpc-api.md)\n- [Cluster Metadata Storage](#cluster-metadata-storage.md)\n- [High Priority Thread](#high-priority-thread.md)\n- [Monitoring and Health](#monitoring-and-health.md)\n- [Cluster Status API](#cluster-status-api.md)\n- [Health Tracking](#health-tracking.md)",
      "index": 13,
      "token_count": 325,
      "metadata": {
        "title": "_qdrant_qdrant_7.1-raft-consensus-protocol",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "file_name": "_qdrant_qdrant_7.1-raft-consensus-protocol.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.659935",
        "total_chunks": 14
      },
      "start_char": 24886,
      "end_char": 26934
    },
    {
      "content": "Shard Transfers and Resharding | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 630,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 0,
      "end_char": 2044
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Shard Transfers and Resharding\n\nRelevant source files\n\n- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)",
      "index": 1,
      "token_count": 644,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 1944,
      "end_char": 3975
    },
    {
      "content": "rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n\nThis page describes the mechanisms for transferring shard data between peers in a distributed Qdrant cluster, and the resharding process that reorganizes data distribution across shards. For information about the basic shard and replica architecture, see [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md). For details on consensus coordination, see [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md).\n\nShard transfers enable:\n\n- **Replica recovery**: Restoring dead or failed replicas from active ones\n- **Cluster rebalancing**: Moving shards to new peers when scaling the cluster\n- **Resharding**: Redistributing data when changing the number of shards\n\n## Shard Transfer Concepts\n\nA shard transfer moves data from one peer (source) to another peer (destination). Transfers are coordinated through Raft consensus and executed asynchronously with progress tracking.\n\n### Transfer Descriptor\n\nThe `ShardTransfer` struct identifies and configures a transfer:\n\n```\n```\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs17-19](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L17-L19)\n\n### Transfer Methods\n\nFour transfer methods are supported, each using different replica states:\n\n| Method                    | Replica State                         | Use Case          | Description                               |\n| ------------------------- | ------------------------------------- | ----------------- | ----------------------------------------- |\n| `StreamRecords`           | `Partial`                             | Default transfer  | Streams individual points                 |",
      "index": 2,
      "token_count": 428,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 3875,
      "end_char": 5832
    },
    {
      "content": "tial`                             | Default transfer  | Streams individual points                 |\n| `Snapshot`                | `Recovery`                            | Large transfers   | Transfers snapshot files                  |\n| `WalDelta`                | `Recovery`                            | Recent divergence | Transfers WAL operations since divergence |\n| `ReshardingStreamRecords` | `Resharding` or `ReshardingScaleDown` | Resharding only   | Streams points during resharding          |\n\nThe method is selected based on cluster version compatibility and configuration. If all peers are version 1.8.0+, `WalDelta` is preferred; otherwise `StreamRecords` is used.\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs82-103](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L82-L103)\n\n## Replica State Machine\n\nReplica states govern which operations are allowed on a shard replica. The state transitions form the core of the transfer lifecycle:\n\n```\n```\n\n**Key States:**\n\n- **Initializing**: Newly created replica, not yet operational\n- **Active**: Fully operational, serves reads and writes\n- **Listener**: Read-only mode for listener nodes\n- **Partial**: Receiving data via StreamRecords, accepts writes but incomplete data\n- **Recovery**: Receiving snapshot/WAL, rejects normal writes (force flag required)\n- **PartialSnapshot**: Temporarily set during snapshot transfer\n- **Resharding/ReshardingScaleDown**: During resharding operations\n- **Dead**: Failed replica, excluded from operations\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs48-82](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L48-L82) [lib/collection/src/shards/replica\\_set/update.rs58-103](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L58-L103)\n\n## Shard Transfer Lifecycle\n\n### Initiation Phase\n\n```\n```",
      "index": 3,
      "token_count": 485,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 5732,
      "end_char": 7686
    },
    {
      "content": "shards/replica_set/update.rs#L58-L103)\n\n## Shard Transfer Lifecycle\n\n### Initiation Phase\n\n```\n```\n\nThe transfer begins when a `ShardTransferOperations::Start` operation is committed through consensus:\n\n1. **Validation**: Check that source peer exists and has the shard, destination peer exists, and no conflicting transfers exist\n2. **State Registration**: Add transfer to `ShardHolder.shard_transfers`\n3. **Replica Initialization**: Create or update destination replica with appropriate state (Partial/Recovery/Resharding)\n4. **Task Spawning**: If sender is local, spawn background transfer task\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs390-480](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L390-L480) [lib/collection/src/collection/shard\\_transfer.rs36-141](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L36-L141)\n\n### Execution Phase\n\nTransfer tasks run asynchronously in the background, managed by `TransferTasksPool`:\n\n```\n```\n\nEach transfer method operates differently:\n\n- **StreamRecords**: Scrolls through source shard, batches points, and updates destination\n- **Snapshot**: Creates snapshot file, transfers to destination, destination recovers from snapshot\n- **WalDelta**: Identifies WAL operations since cutoff point, replays on destination\n\nThe task updates `TransferTaskProgress` which can be queried for status. On completion or failure, callbacks propose consensus operations to finalize the transfer.\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs143-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L143-L190)\n\n### Completion Phase\n\n```\n```\n\nWhen transfer completes successfully:\n\n1. **Stop Task**: Remove from `TransferTasksPool`\n\n2. **Promote Destination**:\n\n   - Regular transfer: `Partial`/`Recovery` → `Active`\n   - Resharding transfer: Keep `Resharding`/`ReshardingScaleDown` state\n\n3. **Handle Source**:",
      "index": 4,
      "token_count": 518,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 7586,
      "end_char": 9630
    },
    {
      "content": "ve`\n   - Resharding transfer: Keep `Resharding`/`ReshardingScaleDown` state\n\n3. **Handle Source**:\n\n   - **Sync transfer**: Keep source replica (un-proxify if proxied)\n   - **Non-sync transfer**: Remove source replica entirely\n\n4. **Unregister Transfer**: Remove from `shard_transfers` state\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs195-300](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L195-L300)\n\n### Abort/Failure Handling\n\n```\n```\n\nTransfer abort handling depends on transfer type:\n\n- **Regular sync transfer**: Mark destination as `Dead` (triggers recovery)\n- **Regular non-sync transfer**: Remove destination replica entirely\n- **Resharding transfer**: No state change (resharding abort handles cleanup)\n- **Source handling**: If source was proxied, revert proxy to normal `LocalShard`\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs303-361](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L303-L361)\n\n## Automatic Transfer Initiation\n\nThe system automatically initiates transfers to recover `Dead` replicas during `sync_local_state`:\n\n```\n```\n\nConditions for automatic recovery:\n\n- Replica state is `Dead`\n- At least one `Active` or `ReshardingScaleDown` remote replica exists\n- No conflicting transfers exist\n- Transfer limits not exceeded (incoming/outgoing per peer)\n- Target peer passes health check\n\nTransfer method is selected based on cluster version and configuration.\n\n**Sources:** [lib/collection/src/collection/mod.rs686-776](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L686-L776)\n\n## Resharding Operations\n\nResharding reorganizes data distribution by changing the number of shards in a collection. It is a multi-step process coordinated through consensus.\n\n### Resharding State\n\n```\n```\n\n### Resharding Lifecycle\n\n```\n```\n\n**Resharding Steps:**\n\n1. **Start**:\n\n   - Create new target shards (scale-up) or identify source shard (scale-down)",
      "index": 5,
      "token_count": 528,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 9530,
      "end_char": 11564
    },
    {
      "content": "s:**\n\n1. **Start**:\n\n   - Create new target shards (scale-up) or identify source shard (scale-down)\n   - Mark relevant replicas as `Resharding` or `ReshardingScaleDown`\n   - Start transfers using `ReshardingStreamRecords` method\n\n2. **MigratingPoints**: Transfer tasks execute in background, moving data\n\n3. **CommitRead**: Switch read operations to new hash ring while writes still use old ring\n\n4. **CommitWrite**: Switch write operations to new hash ring\n\n5. **Finish**:\n\n   - Promote resharding replicas to `Active`\n   - Remove old shards (scale-down) or update routing\n   - Clean up resharding state\n\n6. **Abort**: Roll back any changes, remove temporary shards\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs306-376](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L306-L376) [lib/collection/src/collection/resharding.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/resharding.rs) (referenced but not in provided files)\n\n### Scale-Up vs Scale-Down\n\n**Scale-Up** (increase shard count):\n\n- Creates new empty shards with `Resharding` state\n- Transfers subset of data from existing shards to new shards\n- New shards become `Active` when resharding finishes\n- Original shards remain `Active` throughout\n\n**Scale-Down** (decrease shard count):\n\n- Marks shard-to-be-removed as `ReshardingScaleDown`\n- Transfers all data from that shard to remaining shards\n- Removes the scaled-down shard when resharding finishes\n- Other shards remain `Active`, accepting transferred data\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs89-102](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L89-L102) [lib/collection/src/collection/shard\\_transfer.rs241-257](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L241-L257)\n\n## Transfer Task Management\n\n### TransferTasksPool\n\nThe `TransferTasksPool` manages active transfer tasks:\n\n```\n```",
      "index": 6,
      "token_count": 558,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 11464,
      "end_char": 13513
    },
    {
      "content": "Management\n\n### TransferTasksPool\n\nThe `TransferTasksPool` manages active transfer tasks:\n\n```\n```\n\nTask pool operations:\n\n- `add_task()`: Register new transfer task with progress tracker\n- `stop_task()`: Cancel running task and return result\n- `get_task_status()`: Query current task progress\n\nThe pool allows Collection to track all active transfers and their progress, essential for reporting cluster state and handling failures.\n\n**Sources:** [lib/collection/src/collection/shard\\_transfer.rs154-189](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs#L154-L189) [lib/collection/src/shards/transfer/transfer\\_tasks\\_pool.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/transfer/transfer_tasks_pool.rs) (referenced)\n\n## Consensus Integration\n\nShard transfers integrate tightly with Raft consensus:\n\n### Consensus Operations\n\n```\n```\n\nEach operation is proposed through consensus and applied on all peers when committed. This ensures all peers agree on:\n\n- Which transfers are active\n- Current state of each replica\n- When transfers complete or fail\n\n**Sources:** [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs390-603](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L390-L603)\n\n### Transfer Validation\n\nBefore starting a transfer, the system validates:\n\n1. **Peer existence**: Source and destination peers are in the cluster\n2. **Shard existence**: Source shard exists with active replicas\n3. **No conflicts**: No other transfer affects the same replica\n4. **State consistency**: Source is not in recovery/partial state\n\nValidation prevents inconsistent states and transfer conflicts.\n\n**Sources:** [lib/collection/src/shards/transfer/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/transfer/helpers.rs) (referenced), [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs423-430](https://github.",
      "index": 7,
      "token_count": 496,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 13413,
      "end_char": 15405
    },
    {
      "content": "(referenced), [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs423-430](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L423-L430)\n\n## Shard Key Operations\n\nCustom shard keys allow user-defined partitioning. Creating and dropping shard keys involves transfer-like operations:\n\n### Creating Shard Key\n\n```\n```\n\nNew shards start in `Initializing` state (on version 1.14.2+) or `Active` state (older versions). The `Initializing` state ensures shards are properly set up before accepting traffic.\n\n**Sources:** [lib/collection/src/collection/sharding\\_keys.rs59-144](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs#L59-L144) [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs623-641](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs#L623-L641)\n\n### Dropping Shard Key\n\nDropping a shard key:\n\n1. Aborts any active resharding on that shard key\n2. Invalidates shard cleaning tasks\n3. Removes all shards associated with the key\n4. Cancels related transfers (on version 1.9.0+)\n\n**Sources:** [lib/collection/src/collection/sharding\\_keys.rs146-191](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs#L146-L191)\n\n## State Persistence\n\nTransfer and resharding state is persisted to survive restarts:\n\n- **ShardHolder state**: Stored in `shard_transfers` and `resharding_state` within `ShardHolder`\n- **ReplicaSet state**: Each replica set persists its `replica_state.json` including peer states\n- **Transfer progress**: Lost on restart; transfers restart from beginning\n\nOn recovery, the system:\n\n1. Loads persisted replica states\n2. Checks for in-progress transfers in consensus state\n3. Re-initiates transfers as needed based on replica states (`Partial`/`Recovery`)\n\n**Sources:** [lib/collection/src/shards/replica\\_set/mod.rs125](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.",
      "index": 8,
      "token_count": 575,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 15305,
      "end_char": 17347
    },
    {
      "content": "mod.rs125](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L125-L125) [lib/collection/src/shards/replica\\_set/mod.rs232-382](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L232-L382)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Shard Transfers and Resharding](#shard-transfers-and-resharding.md)\n- [Shard Transfer Concepts](#shard-transfer-concepts.md)\n- [Transfer Descriptor](#transfer-descriptor.md)\n- [Transfer Methods](#transfer-methods.md)\n- [Replica State Machine](#replica-state-machine.md)\n- [Shard Transfer Lifecycle](#shard-transfer-lifecycle.md)\n- [Initiation Phase](#initiation-phase.md)\n- [Execution Phase](#execution-phase.md)\n- [Completion Phase](#completion-phase.md)\n- [Abort/Failure Handling](#abortfailure-handling.md)\n- [Automatic Transfer Initiation](#automatic-transfer-initiation.md)\n- [Resharding Operations](#resharding-operations.md)\n- [Resharding State](#resharding-state.md)\n- [Resharding Lifecycle](#resharding-lifecycle.md)\n- [Scale-Up vs Scale-Down](#scale-up-vs-scale-down.md)\n- [Transfer Task Management](#transfer-task-management.md)\n- [TransferTasksPool](#transfertaskspool.md)\n- [Consensus Integration](#consensus-integration.md)\n- [Consensus Operations](#consensus-operations.md)\n- [Transfer Validation](#transfer-validation.md)\n- [Shard Key Operations](#shard-key-operations.md)\n- [Creating Shard Key](#creating-shard-key.md)\n- [Dropping Shard Key](#dropping-shard-key.md)\n- [State Persistence](#state-persistence.md)",
      "index": 9,
      "token_count": 451,
      "metadata": {
        "title": "_qdrant_qdrant_7.2-shard-transfers-and-resharding",
        "source": "qdrant_qdrant\\_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "file_name": "_qdrant_qdrant_7.2-shard-transfers-and-resharding.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.793249",
        "total_chunks": 10
      },
      "start_char": 17247,
      "end_char": 19295
    },
    {
      "content": "Snapshots and Recovery | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 626,
      "metadata": {
        "title": "_qdrant_qdrant_8-snapshots-and-recovery",
        "source": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "file_name": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.829820",
        "total_chunks": 8
      },
      "start_char": 0,
      "end_char": 2036
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Snapshots and Recovery\n\nRelevant source files\n\n- [lib/collection/benches/batch\\_query\\_bench.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_query_bench.rs)\n- [lib/collection/benches/batch\\_search\\_bench.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_search_bench.rs)\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n- [lib/collection/src/shards/local\\_shard/scroll.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.",
      "index": 1,
      "token_count": 632,
      "metadata": {
        "title": "_qdrant_qdrant_8-snapshots-and-recovery",
        "source": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "file_name": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.829820",
        "total_chunks": 8
      },
      "start_char": 1936,
      "end_char": 3918
    },
    {
      "content": "shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot\\_tests.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/tests/snapshot\\_test.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/tests/snapshot_test.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n\nThis page describes Qdrant's snapshot and recovery system, which provides data backup, restoration, and cluster synchronization capabilities. The system supports both full collection snapshots and individual shard snapshots, with various recovery strategies for distributed deployments.\n\nFor information about collection management and optimization processes, see [Update Processing and Optimization](qdrant/qdrant/5.1-query-request-flow.md). For consensus mechanisms that coordinate snapshot operations in distributed mode, see [Consensus Mechanism](qdrant/qdrant/6-data-updates-and-consistency.md).\n\n## Snapshot Creation Architecture\n\nSnapshots in Qdrant are created at the `LocalShard` level, with the core implementation in the `snapshot.rs` module. The process involves temporarily proxying segments to allow writes to continue during snapshot creation.\n\nSnapshot Creation Flow: LocalShard::create\\_snapshot to segment archiving\n\n```\n```\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs1-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L1-L352) [lib/collection/src/shards/local\\_shard/mod.rs84-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L84-L124)\n\n## Segment Proxying Mechanism",
      "index": 2,
      "token_count": 500,
      "metadata": {
        "title": "_qdrant_qdrant_8-snapshots-and-recovery",
        "source": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "file_name": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.829820",
        "total_chunks": 8
      },
      "start_char": 3818,
      "end_char": 5737
    },
    {
      "content": "lob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L84-L124)\n\n## Segment Proxying Mechanism\n\nThe key innovation in Qdrant's snapshot system is the segment proxying mechanism, which allows writes to continue during snapshot creation. This is implemented in `proxy_all_segments_and_apply`.\n\nSegment Proxying: Temporary redirection of writes during snapshot\n\n```\n```\n\nThe `proxy_all_segments_and_apply` function performs the following steps:\n\n1. **Acquire upgradable read lock** on `SegmentHolder` to prevent external modifications\n2. **Create temporary segment** to receive all writes during snapshot\n3. **Wrap all segments in ProxySegment** - each proxy redirects writes to the temporary segment while allowing reads from the wrapped segment\n4. **Apply operation** (e.g., `take_snapshot`) to each wrapped segment sequentially\n5. **Unproxy segments incrementally** - as each segment finishes, restore it to reduce proxy overhead\n6. **Final atomic unproxy** - restore remaining segments and promote temporary segment if it has data\n\nThis mechanism ensures:\n\n- **No write blocking**: Updates continue via temporary segment during long-running snapshot operations\n- **Consistent point-in-time view**: All wrapped segments represent the same moment\n- **Minimal proxy duration**: Segments are unproxied as soon as their snapshot completes\n- **Atomic state transitions**: All segment changes use proper locking\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L268-L352) [lib/collection/src/shards/local\\_shard/mod.rs108-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L124)\n\n## Snapshot Creation Process\n\nThe `LocalShard::create_snapshot` method orchestrates the complete snapshot creation process, with special handling for the WAL and coordination with the update system.\n\nLocalShard Snapshot Creation: WAL handling and segment archiving\n\n```\n```",
      "index": 3,
      "token_count": 478,
      "metadata": {
        "title": "_qdrant_qdrant_8-snapshots-and-recovery",
        "source": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "file_name": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.829820",
        "total_chunks": 8
      },
      "start_char": 5637,
      "end_char": 7659
    },
    {
      "content": "with the update system.\n\nLocalShard Snapshot Creation: WAL handling and segment archiving\n\n```\n```\n\n### WAL Handling Strategies\n\nThe snapshot system supports two WAL handling modes:\n\n| Mode          | Function               | Behavior                            | Use Case                           |\n| ------------- | ---------------------- | ----------------------------------- | ---------------------------------- |\n| **Save WAL**  | `snapshot_wal()`       | Archives complete WAL contents      | Full backup with operation history |\n| **Empty WAL** | `snapshot_empty_wal()` | Generates empty WAL at `last_index` | Compact snapshots without history  |\n\nWhen `save_wal=false`, the system uses the `UpdateSignal::Plunger` mechanism to ensure all pending updates are flushed to segments before snapshotting. This ensures the snapshot is complete without needing the WAL.\n\nThe empty WAL generation creates a minimal WAL structure that maintains compatibility:\n\n- Uses same `segment_capacity` as original WAL\n- Positioned at the `last_index` of original WAL\n- Allows normal WAL operations after recovery\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs62-121](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L62-L121) [lib/collection/src/shards/local\\_shard/snapshot.rs128-161](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L128-L161) [lib/collection/src/shards/local\\_shard/snapshot.rs168-197](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L168-L197)\n\n## Update Lock Coordination\n\nThe `update_operation_lock` in `LocalShard` is critical for coordinating snapshots with concurrent update operations. This `Arc<tokio::sync::RwLock<()>>` prevents data races during critical sections.\n\nUpdate Lock Usage During Snapshot Operations\n\n```\n```\n\nThe lock serves two critical purposes:\n\n1. **During snapshots**: Prevents updates during segment proxy/unproxy operations to maintain consistency\n2.",
      "index": 4,
      "token_count": 485,
      "metadata": {
        "title": "_qdrant_qdrant_8-snapshots-and-recovery",
        "source": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "file_name": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.829820",
        "total_chunks": 8
      },
      "start_char": 7559,
      "end_char": 9607
    },
    {
      "content": "ing snapshots**: Prevents updates during segment proxy/unproxy operations to maintain consistency\n2. **During scroll operations**: Prevents updates that could corrupt scroll cursors, critical for re-sharding and shard transfer\n\nLock acquisition pattern:\n\n- **Write lock**: Held during all update operations and segment state changes\n- **Read lock**: Held during scroll operations and while segments are in proxied state\n- **Blocking operations**: Uses `blocking_write()` in sync contexts, `write().await` in async\n\nThe lock is passed to `proxy_all_segments_and_apply` which acquires it via `update_lock.blocking_write()` when unproxying segments, ensuring no updates can modify segment state during transitions.\n\nSources: [lib/collection/src/shards/local\\_shard/mod.rs108-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L124) [lib/collection/src/shards/local\\_shard/snapshot.rs218-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L218-L352) [lib/collection/src/shards/local\\_shard/scroll.rs156-213](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs#L156-L213) [lib/collection/src/collection\\_manager/collection\\_updater.rs42-77](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs#L42-L77)\n\n## Snapshot Recovery Process\n\nRecovery restores a snapshot by unpacking segment data and reinitializing the shard. The `LocalShard::restore_snapshot` method handles segment-level recovery.\n\nLocalShard Recovery: Segment restoration from snapshot archive\n\n```\n```\n\n### Recovery Implementation Details\n\nThe recovery process follows these steps:\n\n1. **Read snapshot directory**: `LocalShard::restore_snapshot` reads the `segments/` directory from the snapshot path\n2. **Filter entries**: Hidden files (starting with `.`) are skipped to avoid temporary or system files\n3.",
      "index": 5,
      "token_count": 510,
      "metadata": {
        "title": "_qdrant_qdrant_8-snapshots-and-recovery",
        "source": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "file_name": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.829820",
        "total_chunks": 8
      },
      "start_char": 9507,
      "end_char": 11471
    },
    {
      "content": "Filter entries**: Hidden files (starting with `.`) are skipped to avoid temporary or system files\n3. **Per-segment recovery**: Each segment directory calls `Segment::restore_snapshot_in_place` to unpack its data\n4. **In-place restoration**: Segments restore themselves directly into their final location (no temporary moves)\n5. **Error propagation**: Any segment restoration failure aborts the entire recovery\n\nKey characteristics:\n\n- **No WAL replay**: Recovery assumes snapshot contains complete data; WAL (if present) provides operation history but isn't replayed\n- **Atomic per-segment**: Each segment restores atomically, but overall recovery is not atomic across all segments\n- **Path-based**: Recovery expects a specific directory structure with `segments/` and `wal/` subdirectories\n\n### Directory Structure After Recovery\n\n```\nshard_path/\n├── segments/\n│   ├── <segment_id_1>/\n│   │   ├── segment.json\n│   │   ├── vector_storage/\n│   │   └── payload_index/\n│   ├── <segment_id_2>/\n│   └── ...\n├── wal/\n│   └── (WAL files)\n├── newest_clocks.json\n└── oldest_clocks.json\n```\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs33-59](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L33-L59) [lib/collection/src/shards/local\\_shard/mod.rs76-83](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L76-L83)\n\n## Consensus and State Management\n\nIn distributed deployments, snapshot operations coordinate with the Raft consensus system to maintain cluster consistency:\n\n```\n```\n\nThe system handles complex scenarios like:\n\n- **Split-brain prevention**: Consensus ensures only valid state transitions\n- **Replication factor maintenance**: Automatic replica management during recovery\n- **Synchronization conflicts**: Priority-based resolution when multiple replicas exist\n- **Partial snapshot locks**: Prevents concurrent partial snapshot operations\n\nSources: [lib/storage/src/content\\_manager/snapshots/recover.rs213-346](https://github.",
      "index": 6,
      "token_count": 495,
      "metadata": {
        "title": "_qdrant_qdrant_8-snapshots-and-recovery",
        "source": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "file_name": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.829820",
        "total_chunks": 8
      },
      "start_char": 11371,
      "end_char": 13407
    },
    {
      "content": "operations\n\nSources: [lib/storage/src/content\\_manager/snapshots/recover.rs213-346](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/snapshots/recover.rs#L213-L346) [lib/collection/src/shards/replica\\_set/snapshots.rs34-109](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/snapshots.rs#L34-L109) [src/common/snapshots.rs318-337](https://github.com/qdrant/qdrant/blob/48203e41/src/common/snapshots.rs#L318-L337)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Snapshots and Recovery](#snapshots-and-recovery.md)\n- [Snapshot Creation Architecture](#snapshot-creation-architecture.md)\n- [Segment Proxying Mechanism](#segment-proxying-mechanism.md)\n- [Snapshot Creation Process](#snapshot-creation-process.md)\n- [WAL Handling Strategies](#wal-handling-strategies.md)\n- [Update Lock Coordination](#update-lock-coordination.md)\n- [Snapshot Recovery Process](#snapshot-recovery-process.md)\n- [Recovery Implementation Details](#recovery-implementation-details.md)\n- [Directory Structure After Recovery](#directory-structure-after-recovery.md)\n- [Consensus and State Management](#consensus-and-state-management.md)",
      "index": 7,
      "token_count": 347,
      "metadata": {
        "title": "_qdrant_qdrant_8-snapshots-and-recovery",
        "source": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "file_name": "_qdrant_qdrant_8-snapshots-and-recovery.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.829820",
        "total_chunks": 8
      },
      "start_char": 13307,
      "end_char": 15355
    },
    {
      "content": "API Reference | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 624,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 0,
      "end_char": 2027
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# API Reference\n\nRelevant source files\n\n- [Cargo.lock](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.lock)\n- [Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/Cargo.toml)\n- [docs/grpc/docs.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/grpc/docs.md)\n- [docs/redoc/default\\_version.js](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/default_version.js)\n- [docs/redoc/index.html](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/index.html)\n- [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json)\n- [docs/redoc/v0.10.3/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.3/openapi.json)\n- [docs/redoc/v0.10.4/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.4/openapi.json)\n- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.",
      "index": 1,
      "token_count": 712,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 1927,
      "end_char": 3969
    },
    {
      "content": "- [docs/redoc/v0.10.5/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v0.10.5/openapi.json)\n- [docs/redoc/v1.10.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.10.x/openapi.json)\n- [docs/redoc/v1.11.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.11.x/openapi.json)\n- [docs/redoc/v1.13.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.13.x/openapi.json)\n- [docs/redoc/v1.15.x/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/v1.15.x/openapi.json)\n- [lib/api/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/Cargo.toml)\n- [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n- [lib/api/src/grpc/proto/collections.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto)\n- [lib/api/src/grpc/proto/points.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto)\n- [lib/api/src/grpc/qdrant.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs)\n- [lib/collection/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/Cargo.toml)\n- [lib/collection/src/config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs)\n- [lib/collection/src/operations/config\\_diff.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs)\n- [lib/collection/src/operations/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs)\n- [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs)\n- [lib/collection/src/optimizers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/optimizers_builder.rs)\n- [lib/common/common/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)",
      "index": 2,
      "token_count": 716,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 3869,
      "end_char": 5903
    },
    {
      "content": "/src/defaults.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/common/src/defaults.rs)\n- [lib/common/dataset/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/dataset/Cargo.toml)\n- [lib/common/issues/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/common/issues/Cargo.toml)\n- [lib/segment/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/Cargo.toml)\n- [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n- [lib/sparse/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/sparse/Cargo.toml)\n- [lib/storage/Cargo.toml](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/Cargo.toml)\n- [lib/storage/src/content\\_manager/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/collection_meta_ops.rs)\n- [lib/storage/src/content\\_manager/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs)\n- [tools/missed\\_cherry\\_picks.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/missed_cherry_picks.sh)\n\nThis document provides a comprehensive overview of Qdrant's API interfaces, covering both REST and gRPC protocols. It describes the architectural structure, service organization, and common patterns used across all API endpoints. For detailed endpoint documentation, see [REST API](qdrant/qdrant/7.1-raft-consensus-protocol.md) for HTTP interface specifics and [gRPC API](qdrant/qdrant/7.2-shard-transfers-and-resharding.md) for gRPC service details.\n\n## API Architecture Overview\n\nQdrant exposes multiple API interfaces to support different client needs and deployment scenarios. The system provides both external-facing APIs for client applications and internal APIs for distributed cluster communication.\n\n```\n```\n\nSources: [docs/redoc/master/openapi.json1-50](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L1-L50) [lib/api/src/grpc/proto/points.proto1-30](https://github.",
      "index": 3,
      "token_count": 605,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 5803,
      "end_char": 7851
    },
    {
      "content": "e41/docs/redoc/master/openapi.json#L1-L50) [lib/api/src/grpc/proto/points.proto1-30](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L1-L30) [lib/api/src/grpc/proto/qdrant\\_internal\\_service.proto1-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/qdrant_internal_service.proto#L1-L20) [src/tonic/api/points\\_api.rs34-45](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_api.rs#L34-L45)\n\n## Service Organization\n\nThe API is organized into distinct services, each handling specific aspects of vector database operations. Each service is implemented in both REST and gRPC protocols with consistent functionality.\n\n```\n```\n\nSources: [lib/api/src/grpc/proto/collections\\_service.proto1-30](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections_service.proto#L1-L30) [lib/api/src/grpc/proto/points\\_service.proto1-30](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points_service.proto#L1-L30) [lib/api/src/grpc/proto/snapshots\\_service.proto1-30](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/snapshots_service.proto#L1-L30) [docs/grpc/docs.md116-125](https://github.com/qdrant/qdrant/blob/48203e41/docs/grpc/docs.md#L116-L125)\n\n## Request Processing Flow\n\nAll API requests follow a consistent processing pattern through the system's layered architecture, with different paths for read and write operations.\n\n```\n```\n\nSources: [src/tonic/api/points\\_api.rs61-85](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_api.rs#L61-L85) [src/actix/api/update\\_api.rs31-65](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/update_api.rs#L31-L65) [storage/dispatcher.rs](https://github.com/qdrant/qdrant/blob/48203e41/storage/dispatcher.rs) [src/common/strict\\_mode.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/strict_mode.rs) [storage/content\\_manager/toc/](https://github.com/qdrant/qdrant/blob/48203e41/storage/content_manager/toc/)\n\n## API Response Structure",
      "index": 4,
      "token_count": 675,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 7751,
      "end_char": 9800
    },
    {
      "content": "s://github.com/qdrant/qdrant/blob/48203e41/storage/content_manager/toc/)\n\n## API Response Structure\n\nAll API responses follow a consistent structure with metadata about request processing, hardware usage, and timing information.\n\n### Standard Response Format\n\n| Field    | Type   | Description                           |\n| -------- | ------ | ------------------------------------- |\n| `result` | Object | The actual response data              |\n| `status` | String | Operation status (\"ok\" or error)      |\n| `time`   | Number | Processing time in seconds            |\n| `usage`  | Object | Optional hardware and inference usage |\n\n### Hardware Usage Reporting\n\nThe system tracks detailed hardware usage for operations when enabled:\n\n```\n```\n\nSources: [lib/api/src/grpc/qdrant.rs180-290](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L180-L290) [lib/api/src/grpc/ops.rs5-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/ops.rs#L5-L50) [docs/redoc/master/openapi.json276-307](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L276-L307)\n\n## Authentication and Authorization\n\nThe API supports multiple authentication mechanisms and role-based access control for securing operations.\n\n### Access Control Implementation\n\n| Component        | Purpose                           | Location                                                                              |\n| ---------------- | --------------------------------- | ------------------------------------------------------------------------------------- |\n| `ActixAccess`    | REST API authentication extractor | [src/actix/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/auth.rs) |\n| `rbac::Access`   | Role-based access control         | [storage/rbac/](https://github.com/qdrant/qdrant/blob/48203e41/storage/rbac/)         |\n| `extract_access` | gRPC authentication extractor     | [src/tonic/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/auth.rs) |\n\n### API Key Authentication",
      "index": 5,
      "token_count": 503,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 9700,
      "end_char": 11747
    },
    {
      "content": "s](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/auth.rs) |\n\n### API Key Authentication\n\nThe system supports API key-based authentication through HTTP headers:\n\n- **Header**: `api-key`\n- **Validation**: Keys are validated against configured access rules\n- **Scope**: Different keys can have different permissions (read-only, read-write, admin)\n\nSources: [src/actix/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/auth.rs) [src/tonic/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/auth.rs) [storage/rbac/](https://github.com/qdrant/qdrant/blob/48203e41/storage/rbac/)\n\n## Error Handling\n\nThe API provides consistent error handling across both REST and gRPC interfaces with detailed error information.\n\n### Error Response Structure\n\n```\n```\n\n### Status Code Mapping\n\n| Internal Error      | REST HTTP Code            | gRPC Code           |\n| ------------------- | ------------------------- | ------------------- |\n| `BadInput`          | 400 Bad Request           | `InvalidArgument`   |\n| `NotFound`          | 404 Not Found             | `NotFound`          |\n| `ServiceError`      | 500 Internal Server Error | `Internal`          |\n| `Timeout`           | 408 Request Timeout       | `DeadlineExceeded`  |\n| `RateLimitExceeded` | 429 Too Many Requests     | `ResourceExhausted` |\n| `Forbidden`         | 403 Forbidden             | `PermissionDenied`  |\n\nSources: [lib/storage/src/content\\_manager/conversions.rs21-61](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs#L21-L61) [docs/redoc/master/openapi.json40-60](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L40-L60)\n\n## Request Validation\n\nAll API requests undergo validation using the `validator` crate with custom validation rules specific to vector database operations.\n\n### Validation Patterns\n\n| Field Type        | Validation Rules               | Example                                    |",
      "index": 6,
      "token_count": 517,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 11647,
      "end_char": 13628
    },
    {
      "content": "| Field Type        | Validation Rules               | Example                                    |\n| ----------------- | ------------------------------ | ------------------------------------------ |\n| Collection Names  | Length 1-255, valid characters | `validate_collection_name_legacy`          |\n| Vector Dimensions | Range 1-65536                  | `#[validate(range(min = 1, max = 65536))]` |\n| Search Limits     | Minimum 1                      | `#[validate(range(min = 1))]`              |\n| HNSW Parameters   | `ef_construct >= 4`            | `#[validate(range(min = 4))]`              |\n| Quantization      | `quantile` 0.5-1.0             | `#[validate(range(min = 0.5, max = 1.0))]` |\n\n### Validation Implementation\n\nThe validation occurs at multiple levels:\n\n1. **Protocol Level**: Protobuf/JSON schema validation\n2. **Field Level**: Individual field constraints using `#[validate()]` annotations\n3. **Business Logic**: Custom validation functions for complex rules\n4. **Strict Mode**: Additional constraints when strict mode is enabled\n\nSources: [lib/api/src/grpc/qdrant.rs2-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L2-L50) [lib/segment/src/types.rs448-503](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L448-L503) [common/validation.rs](https://github.com/qdrant/qdrant/blob/48203e41/common/validation.rs) [src/common/strict\\_mode.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/strict_mode.rs)\n\n## Internal vs External APIs\n\nThe system distinguishes between external client-facing APIs and internal peer-to-peer communication APIs for distributed operations.\n\n### External APIs\n\n- **Purpose**: Client application integration\n- **Authentication**: API key or token-based\n- **Rate Limiting**: Configurable per-client limits\n- **Protocols**: REST HTTP/JSON and gRPC\n\n### Internal APIs\n\n- **Purpose**: Cluster node communication\n- **Authentication**: Full access assumed (`FULL_ACCESS`)\n- **Services**: `PointsInternal`, `QdrantInternal`",
      "index": 7,
      "token_count": 515,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 13528,
      "end_char": 15558
    },
    {
      "content": "ntication**: Full access assumed (`FULL_ACCESS`)\n- **Services**: `PointsInternal`, `QdrantInternal`\n- **Usage**: Shard operations, consensus, replication\n\n| Service       | Port    | Purpose            | Access Level  |\n| ------------- | ------- | ------------------ | ------------- |\n| REST API      | 6333    | Client operations  | Authenticated |\n| gRPC API      | 6334    | Client operations  | Authenticated |\n| Internal gRPC | Various | Peer communication | Internal      |\n| Health Checks | Same    | Kubernetes probes  | Public        |\n\nSources: [src/tonic/api/points\\_internal\\_api.rs40-55](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_internal_api.rs#L40-L55) [lib/api/src/grpc/proto/points\\_internal\\_service.proto1-30](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points_internal_service.proto#L1-L30) [lib/api/src/grpc/proto/qdrant\\_internal\\_service.proto1-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/qdrant_internal_service.proto#L1-L20)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [API Reference](#api-reference.md)\n- [API Architecture Overview](#api-architecture-overview.md)\n- [Service Organization](#service-organization.md)\n- [Request Processing Flow](#request-processing-flow.md)\n- [API Response Structure](#api-response-structure.md)\n- [Standard Response Format](#standard-response-format.md)\n- [Hardware Usage Reporting](#hardware-usage-reporting.md)\n- [Authentication and Authorization](#authentication-and-authorization.md)\n- [Access Control Implementation](#access-control-implementation.md)\n- [API Key Authentication](#api-key-authentication.md)\n- [Error Handling](#error-handling.md)\n- [Error Response Structure](#error-response-structure.md)\n- [Status Code Mapping](#status-code-mapping.md)\n- [Request Validation](#request-validation.md)\n- [Validation Patterns](#validation-patterns.md)\n- [Validation Implementation](#validation-implementation.md)\n- [Internal vs External APIs](#internal-vs-external-apis.md)",
      "index": 8,
      "token_count": 522,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 15458,
      "end_char": 17504
    },
    {
      "content": "tation](#validation-implementation.md)\n- [Internal vs External APIs](#internal-vs-external-apis.md)\n- [External APIs](#external-apis.md)\n- [Internal APIs](#internal-apis.md)",
      "index": 9,
      "token_count": 47,
      "metadata": {
        "title": "_qdrant_qdrant_9-api-reference",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9-api-reference.md",
        "file_name": "_qdrant_qdrant_9-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.868947",
        "total_chunks": 10
      },
      "start_char": 17404,
      "end_char": 19452
    },
    {
      "content": "REST API Endpoints | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 626,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 0,
      "end_char": 2032
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# REST API Endpoints\n\nRelevant source files\n\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [docs/grpc/docs.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/grpc/docs.md)\n- [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json)\n- [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n- [lib/api/src/grpc/proto/collections.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto)\n- [lib/api/src/grpc/proto/points.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto)\n- [lib/api/src/grpc/qdrant.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.",
      "index": 1,
      "token_count": 644,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 1932,
      "end_char": 3927
    },
    {
      "content": "3e41/lib/api/src/grpc/qdrant.rs)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs)\n- [lib/collection/src/operations/config\\_diff.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs)\n- [lib/collection/src/operations/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs)\n- [lib/collection/src/optimizers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/optimizers_builder.rs)\n- [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n- [lib/storage/src/content\\_manager/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/collection_meta_ops.rs)\n- [lib/storage/src/content\\_manager/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.",
      "index": 2,
      "token_count": 640,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 3827,
      "end_char": 5838
    },
    {
      "content": "m/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n\n## Purpose and Scope\n\nThis document describes the REST API endpoints provided by Qdrant's HTTP server. The REST API is the primary interface for client applications to interact with Qdrant collections, points, and cluster operations. It provides JSON-based HTTP endpoints for all vector database operations including collection management, point CRUD operations, search, recommendations, and cluster administration.\n\nFor information about the gRPC API interface, see [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md). For details on internal data type conversions between API formats, see [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md).\n\n## REST API Server Architecture\n\nThe REST API is implemented using the Actix-web framework and runs on the HTTP port specified in the service configuration (default: 6333). The server is initialized in [src/actix/mod.rs55-116](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L116) and configured with various middleware layers.\n\n### Request Flow Architecture\n\n```\n```\n\n**Diagram: REST API Request Processing Flow**",
      "index": 3,
      "token_count": 558,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 5738,
      "end_char": 7642
    },
    {
      "content": "are layers.\n\n### Request Flow Architecture\n\n```\n```\n\n**Diagram: REST API Request Processing Flow**\n\nThe request enters through the Actix-web server and passes through multiple middleware layers before being routed to the appropriate API module, which then interacts with the core storage layer.\n\nSources: [src/actix/mod.rs55-180](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L180) [src/actix/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/auth.rs) [src/actix/actix\\_telemetry.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/actix_telemetry.rs)\n\n### API Module to Route Mapping\n\n```\n```\n\n**Diagram: API Modules to Route Mapping**\n\nEach API module configures a specific set of related endpoints. The configuration functions are called during server initialization to register routes.\n\nSources: [src/actix/mod.rs99-158](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L99-L158) [src/actix/api/service\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/service_api.rs) [src/actix/api/collections\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/collections_api.rs) [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n\n## API Endpoint Categories\n\nThe REST API endpoints are organized into the following functional categories:\n\n| Category        | Base Path                                     | Purpose                                      | Source Module                                                                                                        |\n| --------------- | --------------------------------------------- | -------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| **Service**     | `/`                                           | Server information, health checks, telemetry | [src/actix/api/service\\_api.rs](https://github.",
      "index": 4,
      "token_count": 483,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 7542,
      "end_char": 9562
    },
    {
      "content": "| Server information, health checks, telemetry | [src/actix/api/service\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/service_api.rs)         |\n| **Collections** | `/collections`                                | Collection lifecycle management              | [src/actix/api/collections\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/collections_api.rs) |\n| **Points**      | `/collections/{name}/points`                  | Point CRUD operations                        | [src/actix/api/update\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/update_api.rs)           |\n| **Search**      | `/collections/{name}/points/search`           | Vector similarity search                     | [src/actix/api/search\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/search_api.rs)           |\n| **Recommend**   | `/collections/{name}/points/recommend`        | Recommendation queries                       | [src/actix/api/recommend\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/recommend_api.rs)     |\n| **Query**       | `/collections/{name}/points/query`            | Universal query API                          | [src/actix/api/query\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/query_api.rs)             |\n| **Discovery**   | `/collections/{name}/points/discover`         | Context-based discovery                      | [src/actix/api/discovery\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/discovery_api.rs)     |\n| **Scroll**      | `/collections/{name}/points/scroll`           | Paginated point retrieval                    | [src/actix/api/retrieve\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/retrieve_api.rs)       |\n| **Facet**       | `/collections/{name}/facet`                   | Faceted search                               | [lib/api/src/facet\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/facet_api.rs)                 |",
      "index": 5,
      "token_count": 557,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 9462,
      "end_char": 11506
    },
    {
      "content": "_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/facet_api.rs)                 |\n| **Cluster**     | `/cluster`                                    | Distributed cluster management               | [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)         |\n| **Snapshots**   | `/snapshots`, `/collections/{name}/snapshots` | Snapshot operations                          | [src/actix/api/snapshot\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/snapshot_api.rs)       |\n| **Shards**      | `/collections/{name}/shards`                  | Shard key management                         | [src/actix/api/shards\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/shards_api.rs)           |\n\nSources: [docs/redoc/master/openapi.json2-194](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L2-L194)\n\n## Common Request/Response Format\n\n### Standard Response Envelope\n\nAll successful REST API responses follow a consistent envelope structure:\n\n```\n```\n\n- `result`: The actual response data (varies by endpoint)\n- `status`: Operation status, typically `\"ok\"` for success\n- `time`: Time spent processing the request in seconds\n\nSome responses may include an optional `usage` field when hardware reporting is enabled:\n\n```\n```\n\nSources: [docs/redoc/master/openapi.json60-95](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L60-L95) [lib/api/src/rest/models.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/rest/models.rs)\n\n### Error Response Format\n\nError responses use the `ErrorResponse` schema:\n\n```\n```\n\nHTTP status codes follow standard conventions:\n\n- `200 OK`: Successful operation\n- `4XX`: Client errors (invalid request, not found, etc.)\n- `5XX`: Server errors\n\nSources: [docs/redoc/master/openapi.json42-48](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L42-L48)\n\n### Common Query Parameters",
      "index": 6,
      "token_count": 567,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 11406,
      "end_char": 13418
    },
    {
      "content": "m/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L42-L48)\n\n### Common Query Parameters\n\nMany endpoints support common query parameters:\n\n| Parameter     | Type           | Description                                   | Used By                      |\n| ------------- | -------------- | --------------------------------------------- | ---------------------------- |\n| `timeout`     | integer        | Operation timeout in seconds                  | Collections, Points, Cluster |\n| `wait`        | boolean        | Wait for operation to complete                | Collections, Points          |\n| `ordering`    | string         | Write ordering guarantee (weak/medium/strong) | Points updates               |\n| `shard_key`   | string/array   | Target specific shard(s)                      | Points operations            |\n| `consistency` | integer/string | Read consistency level                        | Points queries               |\n\nSources: [docs/redoc/master/openapi.json30-37](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L30-L37) [lib/collection/src/operations/point\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/point_ops.rs)\n\n## Service Endpoints\n\n### Version Information\n\n**GET /** - Returns Qdrant instance version information\n\n```\nGET /\n```\n\nResponse:\n\n```\n```\n\nSources: [src/actix/mod.rs50-53](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L50-L53) [docs/redoc/master/openapi.json195-218](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L195-L218)\n\n### Health Checks\n\nKubernetes-compatible health check endpoints:\n\n| Endpoint       | Purpose              |\n| -------------- | -------------------- |\n| `GET /healthz` | General health check |\n| `GET /livez`   | Liveness probe       |\n| `GET /readyz`  | Readiness probe      |\n\nAll return `200 OK` with text response `\"healthz check passed\"` when healthy.\n\nSources: [docs/redoc/master/openapi.json492-569](https://github.",
      "index": 7,
      "token_count": 513,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 13318,
      "end_char": 15333
    },
    {
      "content": "althz check passed\"` when healthy.\n\nSources: [docs/redoc/master/openapi.json492-569](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L492-L569) [src/actix/api/service\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/service_api.rs)\n\n### Telemetry\n\n**GET /telemetry** - Collect telemetry data about the instance\n\nQuery Parameters:\n\n- `anonymize` (boolean): Anonymize sensitive information\n- `details_level` (integer): Level of detail (0=minimal, higher=more detail)\n\nReturns comprehensive telemetry including app info, system info, collections info, cluster info, and statistics.\n\nSources: [docs/redoc/master/openapi.json220-307](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L220-L307) [src/actix/api/service\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/service_api.rs)\n\n### Metrics\n\n**GET /metrics** - Prometheus-compatible metrics endpoint\n\nQuery Parameters:\n\n- `anonymize` (boolean): Anonymize result\n\nReturns metrics in Prometheus text format.\n\nSources: [docs/redoc/master/openapi.json309-344](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L309-L344) [src/actix/api/service\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/service_api.rs)\n\n### Issues Reporting\n\n**GET /issues** - Get performance issues and configuration suggestions\n\n**DELETE /issues** - Clear all reported issues\n\nSources: [docs/redoc/master/openapi.json570-616](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L570-L616) [src/actix/api/issues\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/issues_api.rs)\n\n## Collections Endpoints\n\n### List Collections\n\n**GET /collections** - Get list of all collections\n\nResponse includes collection names:\n\n```\n```\n\nSources: [docs/redoc/master/openapi.json849-915](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L849-L915)\n\n### Get Collection Info",
      "index": 8,
      "token_count": 620,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 15233,
      "end_char": 17236
    },
    {
      "content": "com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L849-L915)\n\n### Get Collection Info\n\n**GET /collections/{collection\\_name}** - Get detailed collection information\n\nReturns comprehensive collection metadata including:\n\n- Configuration (vectors, HNSW, optimization settings)\n- Status (green/yellow/grey/red)\n- Statistics (point count, segment count, indexed vectors)\n- Payload schema\n\nSources: [docs/redoc/master/openapi.json917-993](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L917-L993)\n\n### Create Collection\n\n**PUT /collections/{collection\\_name}** - Create a new collection\n\nRequest body specifies collection configuration including vector parameters, HNSW settings, quantization, and optimization settings.\n\nQuery Parameters:\n\n- `timeout` (integer): Operation timeout in seconds\n\nSources: [docs/redoc/master/openapi.json995-1088](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L995-L1088) [src/actix/api/collections\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/collections_api.rs)\n\n### Update Collection\n\n**PATCH /collections/{collection\\_name}** - Update collection parameters\n\nSupports partial updates of:\n\n- Optimizers configuration\n- HNSW configuration\n- Vector parameters\n- Quantization settings\n\nSources: [docs/redoc/master/openapi.json1090-1183](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L1090-L1183)\n\n### Delete Collection\n\n**DELETE /collections/{collection\\_name}** - Delete a collection and all data\n\nQuery Parameters:\n\n- `timeout` (integer): Operation timeout in seconds\n\nSources: [docs/redoc/master/openapi.json1185-1272](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L1185-L1272)\n\n### Collection Aliases\n\nCollections support aliasing for flexible naming:\n\n| Endpoint               | Method | Purpose                           |\n| ---------------------- | ------ | --------------------------------- |",
      "index": 9,
      "token_count": 541,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 17136,
      "end_char": 19126
    },
    {
      "content": "|\n| ---------------------- | ------ | --------------------------------- |\n| `/collections/aliases` | POST   | Create, rename, or delete aliases |\n\nSources: [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json) [src/actix/api/collections\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/collections_api.rs)\n\n## Points Endpoints\n\n### Upsert Points\n\n**PUT /collections/{collection\\_name}/points** - Insert or update points\n\nRequest body contains points with ID, vector(s), and optional payload:\n\n```\n```\n\nQuery Parameters:\n\n- `wait` (boolean): Wait for operation to complete\n- `ordering` (string): Write ordering guarantee\n\nSources: [lib/collection/src/operations/point\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/point_ops.rs) [src/actix/api/update\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/update_api.rs)\n\n### Get Points\n\n**POST /collections/{collection\\_name}/points** - Retrieve points by IDs\n\nRequest:\n\n```\n```\n\nSources: [src/actix/api/retrieve\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/retrieve_api.rs)\n\n### Scroll Points\n\n**POST /collections/{collection\\_name}/points/scroll** - Paginated point retrieval\n\nSupports:\n\n- Filtering by payload conditions\n- Ordering by payload fields\n- Cursor-based pagination\n\nSources: [src/actix/api/retrieve\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/retrieve_api.rs) [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json)\n\n### Delete Points\n\n**POST /collections/{collection\\_name}/points/delete** - Delete points\n\nCan delete by:\n\n- Point IDs list\n- Filter conditions\n\nSources: [src/actix/api/update\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/update_api.rs)\n\n### Update Vectors\n\n**PUT /collections/{collection\\_name}/points/vectors** - Update only vectors",
      "index": 10,
      "token_count": 561,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 19026,
      "end_char": 21033
    },
    {
      "content": "### Update Vectors\n\n**PUT /collections/{collection\\_name}/points/vectors** - Update only vectors\n\n**DELETE /collections/{collection\\_name}/points/vectors** - Delete specific named vectors\n\nSources: [src/actix/api/update\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/update_api.rs)\n\n### Set/Delete/Clear Payload\n\n| Endpoint                                    | Method | Purpose               |\n| ------------------------------------------- | ------ | --------------------- |\n| `/collections/{name}/points/payload`        | POST   | Set payload fields    |\n| `/collections/{name}/points/payload`        | PUT    | Overwrite payload     |\n| `/collections/{name}/points/payload/delete` | POST   | Delete payload fields |\n| `/collections/{name}/points/payload/clear`  | POST   | Clear all payload     |\n\nSources: [src/actix/api/update\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/update_api.rs)\n\n### Batch Operations\n\n**POST /collections/{collection\\_name}/points/batch** - Execute multiple operations in a batch\n\nSupports batching of upsert, delete, and payload operations for efficiency.\n\nSources: [src/actix/api/update\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/update_api.rs)\n\n## Search Endpoints\n\n### Vector Search\n\n**POST /collections/{collection\\_name}/points/search** - Vector similarity search\n\nRequest:\n\n```\n```\n\nSearch parameters:\n\n- `hnsw_ef`: Size of beam in HNSW search (accuracy vs speed)\n- `exact`: Force exact search (no approximation)\n- `quantization`: Quantization search parameters\n- `indexed_only`: Search only indexed segments\n\nSources: [src/actix/api/search\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/search_api.rs) [lib/segment/src/types.rs471-546](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L471-L546)\n\n### Batch Search\n\n**POST /collections/{collection\\_name}/points/search/batch** - Execute multiple searches\n\nReturns results for all searches in a single request.",
      "index": 11,
      "token_count": 526,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 20933,
      "end_char": 22953
    },
    {
      "content": "/search/batch** - Execute multiple searches\n\nReturns results for all searches in a single request.\n\nSources: [src/actix/api/search\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/search_api.rs)\n\n### Search Groups\n\n**POST /collections/{collection\\_name}/points/search/groups** - Group search results\n\nSupports grouping results by payload field values.\n\nSources: [src/actix/api/search\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/search_api.rs)\n\n### Search Matrix\n\nMatrix search endpoints for computing pairwise similarities:\n\n| Endpoint                                                | Purpose               |\n| ------------------------------------------------------- | --------------------- |\n| `POST /collections/{name}/points/search/matrix/pairs`   | Find similar pairs    |\n| `POST /collections/{name}/points/search/matrix/offsets` | Compute offset matrix |\n\nSources: [src/actix/api/search\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/search_api.rs)\n\n## Recommendation Endpoints\n\n### Recommend Points\n\n**POST /collections/{collection\\_name}/points/recommend** - Get recommendations\n\nRequest:\n\n```\n```\n\nRecommendation strategies:\n\n- `average_vector`: Average positive examples, subtract negatives\n- `best_score`: Use best scoring positive example\n\nSources: [src/actix/api/recommend\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/recommend_api.rs) [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs)\n\n### Recommend Batch\n\n**POST /collections/{collection\\_name}/points/recommend/batch** - Batch recommendations\n\nSources: [src/actix/api/recommend\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/recommend_api.rs)\n\n### Recommend Groups\n\n**POST /collections/{collection\\_name}/points/recommend/groups** - Group recommendations\n\nSources: [src/actix/api/recommend\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/recommend_api.rs)",
      "index": 12,
      "token_count": 520,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 22853,
      "end_char": 24894
    },
    {
      "content": "/recommend\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/recommend_api.rs)\n\n## Query API\n\n### Universal Query\n\n**POST /collections/{collection\\_name}/points/query** - Universal query interface\n\nUnified endpoint supporting:\n\n- Nearest neighbor search\n- Recommendations\n- Discovery (context-based search)\n- Fusion (combining multiple queries)\n- Prefetch (multi-stage queries)\n\nRequest example:\n\n```\n```\n\nQuery types:\n\n- `nearest`: Vector similarity\n- `recommend`: Recommendation query\n- `discover`: Context discovery\n- `context`: Context pairs\n- `fusion`: RRF/DBF fusion\n- `order_by`: Order by payload field\n\nSources: [src/actix/api/query\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/query_api.rs) [lib/collection/src/operations/universal\\_query/](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/universal_query/)\n\n### Query Batch\n\n**POST /collections/{collection\\_name}/points/query/batch** - Batch universal queries\n\nSources: [src/actix/api/query\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/query_api.rs)\n\n### Query Groups\n\n**POST /collections/{collection\\_name}/points/query/groups** - Universal query with grouping\n\nSources: [src/actix/api/query\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/query_api.rs)\n\n## Discovery Endpoints\n\n### Discover Points\n\n**POST /collections/{collection\\_name}/points/discover** - Context-based discovery\n\nRequest:\n\n```\n```\n\nFinds points similar to target while considering context pairs.\n\nSources: [src/actix/api/discovery\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/discovery_api.rs) [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs)\n\n### Discover Batch\n\n**POST /collections/{collection\\_name}/points/discover/batch** - Batch discovery\n\nSources: [src/actix/api/discovery\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/discovery_api.rs)\n\n## Facet Endpoints",
      "index": 13,
      "token_count": 572,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 24794,
      "end_char": 26840
    },
    {
      "content": "https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/discovery_api.rs)\n\n## Facet Endpoints\n\n### Facet Search\n\n**POST /collections/{collection\\_name}/facet** - Get faceted search results\n\nReturns aggregated counts/values for specified payload fields.\n\nSources: [lib/api/src/facet\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/facet_api.rs)\n\n## Count Endpoint\n\n### Count Points\n\n**POST /collections/{collection\\_name}/points/count** - Count points matching filter\n\nRequest:\n\n```\n```\n\nReturns point count, optionally with exact counting.\n\nSources: [src/actix/api/count\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/count_api.rs)\n\n## Cluster Management Endpoints\n\n### Cluster Status\n\n**GET /cluster** - Get cluster status and composition\n\nReturns information about:\n\n- Peer IDs and states\n- Raft consensus status\n- Cluster membership\n\nSources: [docs/redoc/master/openapi.json618-683](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L618-L683) [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n\n### Recover Cluster\n\n**POST /cluster/recover** - Attempt to recover current peer Raft state\n\nUsed for disaster recovery scenarios.\n\nSources: [docs/redoc/master/openapi.json686-751](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L686-L751) [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n\n### Remove Peer\n\n**DELETE /cluster/peer/{peer\\_id}** - Remove peer from cluster\n\nQuery Parameters:\n\n- `force` (boolean): Force removal even if peer has shards\n- `timeout` (integer): Operation timeout\n\nSources: [docs/redoc/master/openapi.json753-847](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L753-L847) [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n\n### Collection Cluster Info",
      "index": 14,
      "token_count": 606,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 26740,
      "end_char": 28731
    },
    {
      "content": "/github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n\n### Collection Cluster Info\n\n**GET /collections/{collection\\_name}/cluster** - Get collection's cluster distribution\n\nReturns:\n\n- Shard distribution across peers\n- Replica states\n- Active shard transfers\n- Resharding operations (if enabled)\n\nSources: [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n\n### Cluster Setup Operations\n\n**POST /collections/{collection\\_name}/cluster** - Update collection cluster setup\n\nSupports operations:\n\n- Move shard between peers\n- Replicate shard to peer\n- Abort shard transfer\n- Drop replica\n- Restart transfer\n\nSources: [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs) [lib/collection/src/operations/cluster\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/cluster_ops.rs)\n\n## Shard Key Endpoints\n\n### Create Shard Key\n\n**PUT /collections/{collection\\_name}/shards** - Create custom shard key\n\nUsed for custom sharding strategies.\n\nSources: [docs/redoc/master/openapi.json3-97](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L3-L97) [src/actix/api/shards\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/shards_api.rs)\n\n### Delete Shard Key\n\n**POST /collections/{collection\\_name}/shards/delete** - Delete shard key\n\nSources: [docs/redoc/master/openapi.json99-193](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L99-L193) [src/actix/api/shards\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/shards_api.rs)\n\n## Snapshot Endpoints\n\n### Collection Snapshots\n\n| Endpoint                                          | Method | Purpose                          |\n| ------------------------------------------------- | ------ | -------------------------------- |\n| `GET /collections/{name}/snapshots`               | GET    | List collection snapshots        |",
      "index": 15,
      "token_count": 554,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 28631,
      "end_char": 30652
    },
    {
      "content": "|\n| `GET /collections/{name}/snapshots`               | GET    | List collection snapshots        |\n| `POST /collections/{name}/snapshots`              | POST   | Create collection snapshot       |\n| `DELETE /collections/{name}/snapshots/{snapshot}` | DELETE | Delete collection snapshot       |\n| `GET /collections/{name}/snapshots/{snapshot}`    | GET    | Download snapshot                |\n| `PUT /collections/{name}/snapshots/upload`        | PUT    | Upload and recover from snapshot |\n| `POST /collections/{name}/snapshots/recover`      | POST   | Recover from uploaded snapshot   |\n\nSources: [src/actix/api/snapshot\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/snapshot_api.rs)\n\n### Full Storage Snapshots\n\n| Endpoint                       | Method | Purpose                      |\n| ------------------------------ | ------ | ---------------------------- |\n| `GET /snapshots`               | GET    | List full storage snapshots  |\n| `POST /snapshots`              | POST   | Create full storage snapshot |\n| `DELETE /snapshots/{snapshot}` | DELETE | Delete storage snapshot      |\n| `GET /snapshots/{snapshot}`    | GET    | Download snapshot            |\n\nSources: [src/actix/api/snapshot\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/snapshot_api.rs)\n\n### Shard Snapshots\n\nCollection shard-level snapshot operations for distributed recovery:\n\n| Endpoint                                                            | Method | Purpose                     |\n| ------------------------------------------------------------------- | ------ | --------------------------- |\n| `POST /collections/{name}/shards/{shard_id}/snapshots`              | POST   | Create shard snapshot       |\n| `GET /collections/{name}/shards/{shard_id}/snapshots`               | GET    | List shard snapshots        |\n| `DELETE /collections/{name}/shards/{shard_id}/snapshots/{snapshot}` | DELETE | Delete shard snapshot       |",
      "index": 16,
      "token_count": 431,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 30552,
      "end_char": 32510
    },
    {
      "content": "collections/{name}/shards/{shard_id}/snapshots/{snapshot}` | DELETE | Delete shard snapshot       |\n| `GET /collections/{name}/shards/{shard_id}/snapshots/{snapshot}`    | GET    | Download shard snapshot     |\n| `PUT /collections/{name}/shards/{shard_id}/snapshots/upload`        | PUT    | Upload shard snapshot       |\n| `POST /collections/{name}/shards/{shard_id}/snapshots/recover`      | POST   | Recover shard from snapshot |\n\nSources: [src/actix/api/snapshot\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/snapshot_api.rs)\n\n## Payload Index Endpoints\n\n### Create Field Index\n\n**PUT /collections/{collection\\_name}/index** - Create payload field index\n\nRequest:\n\n```\n```\n\nSupported index types:\n\n- `keyword`: Exact match indexing\n- `integer`: Integer range indexing\n- `float`: Float range indexing\n- `geo`: Geospatial indexing\n- `text`: Full-text search indexing\n- `bool`: Boolean indexing\n- `datetime`: Datetime range indexing\n- `uuid`: UUID indexing\n\nSources: [src/actix/api/collections\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/collections_api.rs) [segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/segment/src/types.rs)\n\n### Delete Field Index\n\n**DELETE /collections/{collection\\_name}/index/{field\\_name}** - Delete payload field index\n\nSources: [src/actix/api/collections\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/collections_api.rs)\n\n## Authentication\n\nThe REST API supports multiple authentication methods:\n\n### API Key Authentication\n\nProvide API key in request header:\n\n```\napi-key: your-api-key-here\n```\n\nTwo types of API keys:\n\n- Full access key (read + write)\n- Read-only key (read operations only)\n\nConfigured via `service.api_key` and `service.read_only_api_key` settings.\n\nSources: [src/actix/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/auth.rs) [src/settings.rs36-37](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L36-L37)\n\n### JWT RBAC Authentication\n\nWhen JWT RBAC is enabled (`service.",
      "index": 17,
      "token_count": 578,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 32410,
      "end_char": 34459
    },
    {
      "content": "/48203e41/src/settings.rs#L36-L37)\n\n### JWT RBAC Authentication\n\nWhen JWT RBAC is enabled (`service.jwt_rbac: true`), authentication uses JWT tokens in the Authorization header:\n\n```\nAuthorization: Bearer <jwt-token>\n```\n\nJWT tokens encode access permissions for fine-grained access control.\n\nSources: [src/actix/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/auth.rs) [src/common/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/auth.rs)\n\n### Whitelisted Endpoints\n\nSome endpoints are accessible without authentication:\n\n- `GET /`\n- `GET /healthz`\n- `GET /livez`\n- `GET /readyz`\n- Web UI paths (if enabled)\n\nSources: [src/actix/mod.rs89-97](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L89-L97)\n\n## OpenAPI Specification\n\nThe complete OpenAPI specification is available at the `/openapi` endpoint and is also stored in [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json) This specification can be used to:\n\n- Generate client libraries in various languages\n- Browse the API documentation interactively (via Swagger UI/Redoc)\n- Validate requests and responses\n- Generate mock servers for testing\n\nThe OpenAPI spec is automatically generated from the code annotations and schemas defined in the API implementation modules.\n\nSources: [docs/redoc/master/openapi.json1-519829](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json#L1-L519829) [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [REST API Endpoints](#rest-api-endpoints.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [REST API Server Architecture](#rest-api-server-architecture.md)\n- [Request Flow Architecture](#request-flow-architecture.md)\n- [API Module to Route Mapping](#api-module-to-route-mapping.md)\n- [API Endpoint Categories](#api-endpoint-categories.md)\n- [Common Request/Response Format](#common-requestresponse-format.md)",
      "index": 18,
      "token_count": 571,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 34359,
      "end_char": 36404
    },
    {
      "content": "(#api-endpoint-categories.md)\n- [Common Request/Response Format](#common-requestresponse-format.md)\n- [Standard Response Envelope](#standard-response-envelope.md)\n- [Error Response Format](#error-response-format.md)\n- [Common Query Parameters](#common-query-parameters.md)\n- [Service Endpoints](#service-endpoints.md)\n- [Version Information](#version-information.md)\n- [Health Checks](#health-checks.md)\n- [Telemetry](#telemetry.md)\n- [Metrics](#metrics.md)\n- [Issues Reporting](#issues-reporting.md)\n- [Collections Endpoints](#collections-endpoints.md)\n- [List Collections](#list-collections.md)\n- [Get Collection Info](#get-collection-info.md)\n- [Create Collection](#create-collection.md)\n- [Update Collection](#update-collection.md)\n- [Delete Collection](#delete-collection.md)\n- [Collection Aliases](#collection-aliases.md)\n- [Points Endpoints](#points-endpoints.md)\n- [Upsert Points](#upsert-points.md)\n- [Get Points](#get-points.md)\n- [Scroll Points](#scroll-points.md)\n- [Delete Points](#delete-points.md)\n- [Update Vectors](#update-vectors.md)\n- [Set/Delete/Clear Payload](#setdeleteclear-payload.md)\n- [Batch Operations](#batch-operations.md)\n- [Search Endpoints](#search-endpoints.md)\n- [Vector Search](#vector-search.md)\n- [Batch Search](#batch-search.md)\n- [Search Groups](#search-groups.md)\n- [Search Matrix](#search-matrix.md)\n- [Recommendation Endpoints](#recommendation-endpoints.md)\n- [Recommend Points](#recommend-points.md)\n- [Recommend Batch](#recommend-batch.md)\n- [Recommend Groups](#recommend-groups.md)\n- [Query API](#query-api.md)\n- [Universal Query](#universal-query.md)\n- [Query Batch](#query-batch.md)\n- [Query Groups](#query-groups.md)\n- [Discovery Endpoints](#discovery-endpoints.md)\n- [Discover Points](#discover-points.md)\n- [Discover Batch](#discover-batch.md)\n- [Facet Endpoints](#facet-endpoints.md)\n- [Facet Search](#facet-search.md)\n- [Count Endpoint](#count-endpoint.md)\n- [Count Points](#count-points.md)\n- [Cluster Management Endpoints](#cluster-management-endpoints.md)\n- [Cluster Status](#cluster-status.",
      "index": 19,
      "token_count": 533,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 36304,
      "end_char": 38350
    },
    {
      "content": "[Cluster Management Endpoints](#cluster-management-endpoints.md)\n- [Cluster Status](#cluster-status.md)\n- [Recover Cluster](#recover-cluster.md)\n- [Remove Peer](#remove-peer.md)\n- [Collection Cluster Info](#collection-cluster-info.md)\n- [Cluster Setup Operations](#cluster-setup-operations.md)\n- [Shard Key Endpoints](#shard-key-endpoints.md)\n- [Create Shard Key](#create-shard-key.md)\n- [Delete Shard Key](#delete-shard-key.md)\n- [Snapshot Endpoints](#snapshot-endpoints.md)\n- [Collection Snapshots](#collection-snapshots.md)\n- [Full Storage Snapshots](#full-storage-snapshots.md)\n- [Shard Snapshots](#shard-snapshots.md)\n- [Payload Index Endpoints](#payload-index-endpoints.md)\n- [Create Field Index](#create-field-index.md)\n- [Delete Field Index](#delete-field-index.md)\n- [Authentication](#authentication.md)\n- [API Key Authentication](#api-key-authentication.md)\n- [JWT RBAC Authentication](#jwt-rbac-authentication.md)\n- [Whitelisted Endpoints](#whitelisted-endpoints.md)\n- [OpenAPI Specification](#openapi-specification.md)",
      "index": 20,
      "token_count": 269,
      "metadata": {
        "title": "_qdrant_qdrant_9.1-rest-api-endpoints",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "file_name": "_qdrant_qdrant_9.1-rest-api-endpoints.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.904262",
        "total_chunks": 21
      },
      "start_char": 38250,
      "end_char": 40298
    },
    {
      "content": "gRPC API Services | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 626,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 0,
      "end_char": 2031
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# gRPC API\n\nRelevant source files\n\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [docs/grpc/docs.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/grpc/docs.md)\n- [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json)\n- [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n- [lib/api/src/grpc/proto/collections.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto)\n- [lib/api/src/grpc/proto/points.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto)\n- [lib/api/src/grpc/qdrant.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.",
      "index": 1,
      "token_count": 643,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 1931,
      "end_char": 3916
    },
    {
      "content": "3e41/lib/api/src/grpc/qdrant.rs)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs)\n- [lib/collection/src/operations/config\\_diff.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs)\n- [lib/collection/src/operations/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs)\n- [lib/collection/src/optimizers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/optimizers_builder.rs)\n- [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n- [lib/storage/src/content\\_manager/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/collection_meta_ops.rs)\n- [lib/storage/src/content\\_manager/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.",
      "index": 2,
      "token_count": 640,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 3816,
      "end_char": 5827
    },
    {
      "content": "m/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n\nThis document describes Qdrant's gRPC API implementation, which provides high-performance remote procedure call (RPC) interfaces for both external client communication and internal cluster coordination. The gRPC API serves as an alternative to the REST API for client operations and enables efficient peer-to-peer communication in distributed deployments.\n\nFor information about the REST API interface, see [REST API](qdrant/qdrant/7.1-raft-consensus-protocol.md). For details about distributed consensus mechanisms, see [Consensus Mechanism](qdrant/qdrant/6-data-updates-and-consistency.md).\n\n## API Architecture Overview\n\nQdrant's gRPC implementation uses the Tonic framework and operates on two distinct communication channels with different purposes and security models.\n\n```\n```\n\nSources: [src/tonic/mod.rs147-360](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L360) [src/main.rs580-600](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L580-L600)\n\n## Server Initialization and Configuration\n\nThe gRPC servers are initialized during application startup with separate configurations for external and internal communication.\n\n### External gRPC Server Setup",
      "index": 3,
      "token_count": 586,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 5727,
      "end_char": 7710
    },
    {
      "content": "h separate configurations for external and internal communication.\n\n### External gRPC Server Setup\n\nThe external gRPC server handles client requests and includes middleware for authentication, telemetry, and compression.\n\n```\n```\n\nSources: [src/tonic/mod.rs147-253](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L253) [src/tonic/mod.rs192-210](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L192-L210)\n\n### Internal gRPC Server Setup\n\nThe internal server facilitates peer-to-peer communication within the cluster, including consensus operations and shard management.\n\n```\n```\n\nSources: [src/tonic/mod.rs256-360](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L256-L360) [src/tonic/mod.rs289-297](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L289-L297)\n\n## Core gRPC Services\n\n### Points Service\n\nThe `PointsService` handles vector and payload operations for external clients, implementing the complete points management interface.\n\n| Method           | Purpose                      | Input Type           | Output Type               |\n| ---------------- | ---------------------------- | -------------------- | ------------------------- |\n| `upsert`         | Insert or update points      | `UpsertPoints`       | `PointsOperationResponse` |\n| `delete`         | Delete points by selector    | `DeletePoints`       | `PointsOperationResponse` |\n| `search`         | Vector similarity search     | `SearchPoints`       | `SearchResponse`          |\n| `scroll`         | Paginated point retrieval    | `ScrollPoints`       | `ScrollResponse`          |\n| `get`            | Retrieve specific points     | `GetPoints`          | `GetResponse`             |\n| `count`          | Count points matching filter | `CountPoints`        | `CountResponse`           |\n| `query`          | Universal query interface    | `QueryPoints`        | `QueryResponse`           |\n| `update_vectors` | Update point vectors         | `UpdatePointVectors` | `PointsOperationResponse` |",
      "index": 4,
      "token_count": 523,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 7610,
      "end_char": 9648
    },
    {
      "content": "update_vectors` | Update point vectors         | `UpdatePointVectors` | `PointsOperationResponse` |\n| `set_payload`    | Set point payload fields     | `SetPayloadPoints`   | `PointsOperationResponse` |\n\nSources: [src/tonic/api/points\\_api.rs61-681](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_api.rs#L61-L681) [src/tonic/api/points\\_api.rs34-59](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_api.rs#L34-L59)\n\n### Points Internal Service\n\nThe `PointsInternalService` provides the same operations optimized for peer-to-peer communication within the cluster.\n\n```\n```\n\nSources: [src/tonic/api/points\\_internal\\_api.rs42-55](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_internal_api.rs#L42-L55) [src/tonic/api/points\\_internal\\_api.rs332-385](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_internal_api.rs#L332-L385)\n\n### Raft Service\n\nThe `RaftService` implements consensus communication between cluster peers using the Raft protocol.\n\n| Method              | Purpose                          | Input Type              | Output Type |\n| ------------------- | -------------------------------- | ----------------------- | ----------- |\n| `send`              | Send Raft messages between peers | `RaftMessageBytes`      | `()`        |\n| `who_is`            | Resolve peer ID to URI           | `PeerId`                | `UriStr`    |\n| `add_peer_to_known` | Add new peer to cluster          | `AddPeerToKnownMessage` | `AllPeers`  |\n\n```\n```\n\nSources: [src/tonic/api/raft\\_api.rs16-34](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L16-L34) [src/tonic/api/raft\\_api.rs37-149](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L37-L149)\n\n## Request Processing Architecture\n\n### External Request Processing\n\nExternal gRPC requests follow a standardized processing pipeline with authentication, validation, and telemetry collection.\n\n```\n```\n\nSources: [src/tonic/api/points\\_api.rs63-85](https://github.",
      "index": 5,
      "token_count": 608,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 9548,
      "end_char": 11584
    },
    {
      "content": "on, and telemetry collection.\n\n```\n```\n\nSources: [src/tonic/api/points\\_api.rs63-85](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_api.rs#L63-L85) [src/tonic/api/update\\_common.rs40-82](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/update_common.rs#L40-L82)\n\n### Internal Request Processing\n\nInternal requests bypass authentication but include shard targeting and clock synchronization for distributed consistency.\n\n```\n```\n\nSources: [src/tonic/api/points\\_internal\\_api.rs56-81](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_internal_api.rs#L56-L81) [src/common/update.rs54-70](https://github.com/qdrant/qdrant/blob/48203e41/src/common/update.rs#L54-L70)\n\n## Protocol Buffer Integration\n\nThe gRPC API relies on Protocol Buffer definitions that specify message formats and service contracts.\n\n### Key Protocol Definitions\n\n| Service          | Proto File                      | Purpose                       |\n| ---------------- | ------------------------------- | ----------------------------- |\n| `Points`         | `points.proto`                  | Vector and payload operations |\n| `PointsInternal` | `points_internal_service.proto` | Internal peer operations      |\n| `Collections`    | `collections.proto`             | Collection management         |\n| `Raft`           | `raft_service.proto`            | Consensus communication       |\n\n### Internal Message Types\n\nThe internal API uses specialized message types optimized for cluster communication:\n\n```\n```\n\nSources: [lib/api/src/grpc/proto/points\\_internal\\_service.proto137-143](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points_internal_service.proto#L137-L143) [lib/api/src/grpc/proto/points\\_internal\\_service.proto40-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points_internal_service.proto#L40-L50)\n\n## Authentication and Security\n\n### TLS Configuration\n\nBoth external and internal gRPC servers support TLS encryption with separate configuration options.\n\n```\n```",
      "index": 6,
      "token_count": 530,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 11484,
      "end_char": 13533
    },
    {
      "content": "nal and internal gRPC servers support TLS encryption with separate configuration options.\n\n```\n```\n\nSources: [src/tonic/mod.rs180-190](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L180-L190) [src/tonic/mod.rs299-305](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L299-L305)\n\n### Authentication Middleware\n\nThe external gRPC server includes optional API key authentication through the `AuthLayer` middleware.\n\nSources: [src/tonic/mod.rs198-209](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L198-L209) [src/tonic/auth.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/auth.rs)\n\n## Performance and Monitoring\n\n### Hardware Usage Tracking\n\nThe gRPC API includes comprehensive hardware usage monitoring for performance analysis and resource accounting.\n\n```\n```\n\nSources: [src/tonic/api/points\\_api.rs47-58](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_api.rs#L47-L58) [src/tonic/api/points\\_internal\\_api.rs436-447](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_internal_api.rs#L436-L447)\n\n### Telemetry Collection\n\nThe gRPC server integrates with Qdrant's telemetry system to collect operational metrics and performance data.\n\nSources: [src/tonic/mod.rs195-197](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L195-L197) [src/tonic/tonic\\_telemetry.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/tonic_telemetry.rs)\n\n## Error Handling and Status Codes\n\nThe gRPC API uses Tonic's `Status` type to return standardized error responses with appropriate gRPC status codes.\n\n### Common Error Patterns\n\n| Error Type            | gRPC Status           | Usage                                       |\n| --------------------- | --------------------- | ------------------------------------------- |\n| `invalid_argument`    | `INVALID_ARGUMENT`    | Malformed requests, missing required fields |\n| `internal`            | `INTERNAL`            | System errors, consensus failures           |",
      "index": 7,
      "token_count": 600,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 13433,
      "end_char": 15452
    },
    {
      "content": "s |\n| `internal`            | `INTERNAL`            | System errors, consensus failures           |\n| `failed_precondition` | `FAILED_PRECONDITION` | State validation failures                   |\n| `not_found`           | `NOT_FOUND`           | Missing collections or points               |\n\nSources: [src/tonic/api/raft\\_api.rs42-43](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L42-L43) [src/tonic/api/points\\_internal\\_api.rs568-569](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/points_internal_api.rs#L568-L569)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [gRPC API](#grpc-api.md)\n- [API Architecture Overview](#api-architecture-overview.md)\n- [Server Initialization and Configuration](#server-initialization-and-configuration.md)\n- [External gRPC Server Setup](#external-grpc-server-setup.md)\n- [Internal gRPC Server Setup](#internal-grpc-server-setup.md)\n- [Core gRPC Services](#core-grpc-services.md)\n- [Points Service](#points-service.md)\n- [Points Internal Service](#points-internal-service.md)\n- [Raft Service](#raft-service.md)\n- [Request Processing Architecture](#request-processing-architecture.md)\n- [External Request Processing](#external-request-processing.md)\n- [Internal Request Processing](#internal-request-processing.md)\n- [Protocol Buffer Integration](#protocol-buffer-integration.md)\n- [Key Protocol Definitions](#key-protocol-definitions.md)\n- [Internal Message Types](#internal-message-types.md)\n- [Authentication and Security](#authentication-and-security.md)\n- [TLS Configuration](#tls-configuration.md)\n- [Authentication Middleware](#authentication-middleware.md)\n- [Performance and Monitoring](#performance-and-monitoring.md)\n- [Hardware Usage Tracking](#hardware-usage-tracking.md)\n- [Telemetry Collection](#telemetry-collection.md)\n- [Error Handling and Status Codes](#error-handling-and-status-codes.md)\n- [Common Error Patterns](#common-error-patterns.md)",
      "index": 8,
      "token_count": 490,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 15352,
      "end_char": 17400
    },
    {
      "content": "r-patterns.md)",
      "index": 9,
      "token_count": 5,
      "metadata": {
        "title": "_qdrant_qdrant_9.2-grpc-api-services",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.2-grpc-api-services.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "file_name": "_qdrant_qdrant_9.2-grpc-api-services.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.944142",
        "total_chunks": 10
      },
      "start_char": 17300,
      "end_char": 19348
    },
    {
      "content": "Data Types and Conversions | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)",
      "index": 0,
      "token_count": 627,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 0,
      "end_char": 2040
    },
    {
      "content": "and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Data Types and Conversions\n\nRelevant source files\n\n- [docs/grpc/docs.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/grpc/docs.md)\n- [docs/redoc/master/openapi.json](https://github.com/qdrant/qdrant/blob/48203e41/docs/redoc/master/openapi.json)\n- [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n- [lib/api/src/grpc/proto/collections.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto)\n- [lib/api/src/grpc/proto/points.proto](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto)\n- [lib/api/src/grpc/qdrant.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs)\n- [lib/collection/src/config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs)\n- [lib/collection/src/operations/config\\_diff.rs](https://github.",
      "index": 1,
      "token_count": 650,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 1940,
      "end_char": 3961
    },
    {
      "content": "3e41/lib/collection/src/config.rs)\n- [lib/collection/src/operations/config\\_diff.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs)\n- [lib/collection/src/operations/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs)\n- [lib/collection/src/operations/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs)\n- [lib/collection/src/optimizers\\_builder.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/optimizers_builder.rs)\n- [lib/segment/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs)\n- [lib/storage/src/content\\_manager/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/collection_meta_ops.rs)\n- [lib/storage/src/content\\_manager/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs)\n\n## Purpose and Scope\n\nThis document describes the data type system used throughout Qdrant's API layer and the conversion mechanisms between different representations. It covers:\n\n- The three-layer type architecture (REST JSON, gRPC Protobuf, Internal Rust)\n- Core data types for points, vectors, payloads, filters, and configuration\n- Conversion and validation logic between type representations\n- Type patterns used for API flexibility (optional fields, diff types, enumerations)\n\nFor information about the actual API endpoints and RPC methods, see [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md) and [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md).\n\n## Type System Architecture\n\nQdrant maintains three distinct type representations that are converted between as requests flow through the system:\n\n```\n```\n\n**Type Flow Architecture**\n\nThe system uses different type representations at each layer to optimize for their specific use cases:",
      "index": 2,
      "token_count": 501,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 3861,
      "end_char": 5827
    },
    {
      "content": "system uses different type representations at each layer to optimize for their specific use cases:\n\n- **REST JSON**: Human-readable, flexible field naming, optional fields via `Option<T>`\n- **gRPC Protobuf**: Efficient binary encoding, strict schema, backward compatibility\n- **Internal Rust**: Type-safe, optimized for processing, domain-specific validation\n\nSources: [lib/api/src/grpc/conversions.rs1-64](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs#L1-L64) [lib/collection/src/operations/conversions.rs1-60](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs#L1-L60)\n\n## Core Data Types\n\n### Point Identifiers\n\nPoints can be identified by either numeric IDs or UUIDs, represented by `ExtendedPointId`:\n\n```\n```\n\n**Point ID Type Hierarchy**\n\n| Type Layer | Representation                         | Source                                                                                                                                 |\n| ---------- | -------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| REST       | Untagged union: `u64` or `String` UUID | OpenAPI schema                                                                                                                         |\n| gRPC       | `PointId { oneof point_id_options }`   | [lib/api/src/grpc/proto/points.proto38-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L38-L43) |\n| Internal   | `ExtendedPointId` enum                 | [lib/segment/src/types.rs155-162](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L155-L162)                   |\n\nThe internal `ExtendedPointId` provides methods for type checking and display:\n\nSources: [lib/segment/src/types.rs155-220](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L155-L220) [lib/api/src/grpc/proto/points.proto38-43](https://github.",
      "index": 3,
      "token_count": 475,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 5727,
      "end_char": 7776
    },
    {
      "content": "03e41/lib/segment/src/types.rs#L155-L220) [lib/api/src/grpc/proto/points.proto38-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L38-L43)\n\n### Vector Types\n\nQdrant supports multiple vector representations with different storage and indexing characteristics:\n\n```\n```\n\n**Vector Type Conversion Flow**\n\nKey vector type definitions:\n\n| Type                   | Purpose                         | Definition                                |\n| ---------------------- | ------------------------------- | ----------------------------------------- |\n| `DenseVector`          | Standard dense vectors          | `Vec<f32>`                                |\n| `SparseVector`         | Sparse vectors with indices     | `{ values: Vec<f32>, indices: Vec<u32> }` |\n| `MultiDenseVector`     | Multiple vectors per point      | `Vec<DenseVector>`                        |\n| `VectorStructInternal` | Internal unified representation | Enum over all vector types                |\n\nSources: [lib/api/src/grpc/proto/points.proto68-117](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L68-L117) [lib/segment/src/types.rs39](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L39-L39) [lib/api/src/grpc/conversions.rs16-17](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs#L16-L17)\n\n### Vector Configuration\n\nVector configuration defines how vectors are stored and indexed:\n\n```\n```\n\n**Vector Configuration Schema**\n\nSources: [lib/api/src/grpc/proto/collections.proto8-73](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/collections.proto#L8-L73) [lib/api/src/grpc/qdrant.rs102-240](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L102-L240) [lib/collection/src/operations/types.rs32-37](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L32-L37)\n\n### Payload Types\n\nPayloads are arbitrary JSON-like data attached to points:\n\n```\n```\n\n**Payload Type System**",
      "index": 4,
      "token_count": 570,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 7676,
      "end_char": 9722
    },
    {
      "content": "Types\n\nPayloads are arbitrary JSON-like data attached to points:\n\n```\n```\n\n**Payload Type System**\n\nThe internal `Payload` type wraps `serde_json::Map<String, Value>` for flexibility. Payload fields can be indexed with type-specific parameters:\n\nSources: [lib/api/src/grpc/qdrant.rs1-101](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L1-L101) [lib/segment/src/types.rs48-66](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L48-L66) [lib/api/src/grpc/conversions.rs149-283](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs#L149-L283)\n\n### Filter Conditions\n\nFilters enable complex querying with various condition types:\n\n```\n```\n\n**Filter Condition Hierarchy**\n\nSources: [lib/api/src/grpc/proto/points.proto163-176](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L163-L176) [lib/api/src/grpc/qdrant.rs40-60](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L40-L60)\n\n## Conversion Mechanisms\n\n### REST to Internal Conversions\n\nREST JSON types are converted using `serde` deserialization with custom traits:\n\n```\n```\n\n**REST Conversion Pipeline**\n\nExample conversion for collection creation:\n\nSources: [lib/storage/src/content\\_manager/conversions.rs65-122](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs#L65-L122)\n\n### gRPC to Internal Conversions\n\ngRPC uses protobuf-generated types with explicit conversion implementations:\n\n```\n```\n\n**gRPC Conversion Pipeline**\n\nKey conversion implementations:\n\n| From                 | To                         | Trait     | Location                                                                                                                                    |\n| -------------------- | -------------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------- |",
      "index": 5,
      "token_count": 492,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 9622,
      "end_char": 11627
    },
    {
      "content": "------------------------------------------------------------------------------------------------- |\n| `grpc::PointId`      | `ExtendedPointId`          | `TryFrom` | [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)                           |\n| `grpc::Filter`       | `segment::types::Filter`   | `TryFrom` | [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)                           |\n| `grpc::VectorParams` | `VectorParams`             | `TryFrom` | [lib/collection/src/operations/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs) |\n| `grpc::ShardKey`     | `segment::types::ShardKey` | Custom    | [lib/api/src/grpc/conversions.rs65-91](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs#L65-L91)              |\n\nSources: [lib/api/src/grpc/conversions.rs1-64](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs#L1-L64) [lib/collection/src/operations/conversions.rs1-60](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs#L1-L60)\n\n### Bidirectional Conversions\n\nSome types require bidirectional conversion for request/response handling:\n\n```\n```\n\n**Bidirectional Conversion Pattern**\n\nCommon bidirectional conversions:\n\n- `PointStruct` ↔ `RecordInternal` - [lib/collection/src/operations/conversions.rs116-152](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs#L116-L152)\n- `ScoredPoint` ↔ response types - [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n- `CollectionInfo` ↔ response types - [lib/collection/src/operations/types.rs189-273](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L189-L273)\n\nSources: [lib/collection/src/operations/conversions.rs116-152](https://github.",
      "index": 6,
      "token_count": 594,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 11527,
      "end_char": 13540
    },
    {
      "content": "/types.rs#L189-L273)\n\nSources: [lib/collection/src/operations/conversions.rs116-152](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs#L116-L152) [lib/api/src/grpc/conversions.rs1-50](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs#L1-L50)\n\n## Configuration Diff Types\n\nTo support partial updates, configuration uses \"diff\" types with all optional fields:\n\n```\n```\n\n**Configuration Update Pattern**\n\nDiff types use the `DiffConfig` trait to apply partial updates:\n\n| Full Type            | Diff Type                | Purpose                          |\n| -------------------- | ------------------------ | -------------------------------- |\n| `HnswConfig`         | `HnswConfigDiff`         | HNSW index configuration updates |\n| `OptimizersConfig`   | `OptimizersConfigDiff`   | Optimizer parameter updates      |\n| `WalConfig`          | `WalConfigDiff`          | WAL configuration updates        |\n| `CollectionParams`   | `CollectionParamsDiff`   | Collection parameter updates     |\n| `QuantizationConfig` | `QuantizationConfigDiff` | Quantization updates             |\n\nThe `DiffConfig` trait provides update logic:\n\nSources: [lib/collection/src/operations/config\\_diff.rs23-43](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs#L23-L43) [lib/collection/src/operations/config\\_diff.rs45-99](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs#L45-L99) [lib/collection/src/operations/config\\_diff.rs101-112](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs#L101-L112)\n\n## Type Validation\n\nValidation occurs at multiple stages using the `validator` crate:\n\n```\n```\n\n**Validation Pipeline**\n\nExample validation attributes in use:\n\n```\n```\n\nValidation is performed in conversions using the `Validate` trait:\n\nSources: [lib/api/src/grpc/qdrant.rs102-131](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.",
      "index": 7,
      "token_count": 559,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 13440,
      "end_char": 15464
    },
    {
      "content": "i/src/grpc/qdrant.rs102-131](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs#L102-L131) [lib/collection/src/operations/config\\_diff.rs45-99](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/config_diff.rs#L45-L99) [lib/collection/src/config.rs86-133](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/config.rs#L86-L133)\n\n## Special Type Patterns\n\n### Datetime Handling\n\nDatetimes are stored as microsecond timestamps (i64) with flexible parsing:\n\n```\n```\n\n**Datetime Type Conversion**\n\nSources: [lib/segment/src/types.rs68-138](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L68-L138)\n\n### Shard Key Selectors\n\nShard keys support both keyword and numeric types:\n\n```\n```\n\n**Shard Key Conversion**\n\nSources: [lib/api/src/grpc/conversions.rs65-106](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs#L65-L106) [lib/api/src/grpc/proto/points.proto123-125](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/proto/points.proto#L123-L125)\n\n### Enumeration Mappings\n\nEnumerations are mapped between protobuf integers and Rust enums:\n\n| Concept           | gRPC Proto                                                   | Internal Rust                                                                                                                                  |\n| ----------------- | ------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| Distance          | `enum Distance { Cosine=1, Euclid=2, Dot=3, Manhattan=4 }`   | [lib/segment/src/types.rs291-310](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L291-L310)                           |\n| Collection Status | `enum CollectionStatus { Green=1, Yellow=2, Red=3, Grey=4 }` | [lib/collection/src/operations/types.rs67-107](https://github.",
      "index": 8,
      "token_count": 546,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 15364,
      "end_char": 17366
    },
    {
      "content": "Green=1, Yellow=2, Red=3, Grey=4 }` | [lib/collection/src/operations/types.rs67-107](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L67-L107) |\n| Write Ordering    | `enum WriteOrderingType { Weak=0, Medium=1, Strong=2 }`      | [lib/collection/src/operations/point\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/point_ops.rs)       |\n| Quantization Type | `enum QuantizationType { Int8=1 }`                           | [lib/segment/src/types.rs688-691](https://github.com/qdrant/qdrant/blob/48203e41/lib/segment/src/types.rs#L688-L691)                           |\n\nConversion uses `TryFrom` with error handling for invalid enum values:\n\nSources: [lib/collection/src/operations/conversions.rs81-114](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/conversions.rs#L81-L114) [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n\n### Update Result Types\n\nUpdate operations return status and optional metadata:\n\n```\n```\n\n**Update Result Conversion**\n\nThe `UpdateResult` type supports asynchronous operation tracking:\n\nSources: [lib/collection/src/operations/types.rs399-423](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/types.rs#L399-L423) [lib/api/src/grpc/qdrant.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/qdrant.rs)\n\n## Type Safety and Error Handling\n\nType conversions handle errors through the `Result` type with specific error variants:\n\n| Error Type         | Usage                  | Example                            |\n| ------------------ | ---------------------- | ---------------------------------- |\n| `tonic::Status`    | gRPC conversion errors | Invalid enum value, malformed UUID |\n| `OperationError`   | Segment-level errors   | Invalid vector dimension           |\n| `StorageError`     | Storage-level errors   | Collection not found               |",
      "index": 9,
      "token_count": 552,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 17266,
      "end_char": 19255
    },
    {
      "content": "on           |\n| `StorageError`     | Storage-level errors   | Collection not found               |\n| `ValidationErrors` | Validation failures    | Out of range value                 |\n\nError conversion chain:\n\n```\n```\n\n**Error Conversion Flow**\n\nSources: [lib/storage/src/content\\_manager/conversions.rs22-63](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/conversions.rs#L22-L63) [lib/api/src/grpc/conversions.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/api/src/grpc/conversions.rs)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Data Types and Conversions](#data-types-and-conversions.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Type System Architecture](#type-system-architecture.md)\n- [Core Data Types](#core-data-types.md)\n- [Point Identifiers](#point-identifiers.md)\n- [Vector Types](#vector-types.md)\n- [Vector Configuration](#vector-configuration.md)\n- [Payload Types](#payload-types.md)\n- [Filter Conditions](#filter-conditions.md)\n- [Conversion Mechanisms](#conversion-mechanisms.md)\n- [REST to Internal Conversions](#rest-to-internal-conversions.md)\n- [gRPC to Internal Conversions](#grpc-to-internal-conversions.md)\n- [Bidirectional Conversions](#bidirectional-conversions.md)\n- [Configuration Diff Types](#configuration-diff-types.md)\n- [Type Validation](#type-validation.md)\n- [Special Type Patterns](#special-type-patterns.md)\n- [Datetime Handling](#datetime-handling.md)\n- [Shard Key Selectors](#shard-key-selectors.md)\n- [Enumeration Mappings](#enumeration-mappings.md)\n- [Update Result Types](#update-result-types.md)\n- [Type Safety and Error Handling](#type-safety-and-error-handling.md)",
      "index": 10,
      "token_count": 434,
      "metadata": {
        "title": "_qdrant_qdrant_9.3-data-types-and-conversions",
        "source": "qdrant_qdrant\\_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "file_name": "_qdrant_qdrant_9.3-data-types-and-conversions.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:04.976922",
        "total_chunks": 11
      },
      "start_char": 19155,
      "end_char": 21203
    }
  ]
}