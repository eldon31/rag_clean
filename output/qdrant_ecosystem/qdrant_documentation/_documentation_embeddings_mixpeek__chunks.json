{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
  "source_repo": "qdrant_documentation",
  "total_chunks": 13,
  "chunks": [
    {
      "content": "Mixpeek - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)",
      "index": 0,
      "token_count": 545,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 0,
      "end_char": 2019
    },
    {
      "content": "ata-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.",
      "index": 1,
      "token_count": 535,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 1919,
      "end_char": 3928
    },
    {
      "content": "ai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.",
      "index": 2,
      "token_count": 551,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 3828,
      "end_char": 5862
    },
    {
      "content": "VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.",
      "index": 3,
      "token_count": 531,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 5762,
      "end_char": 7784
    },
    {
      "content": "drant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
      "index": 4,
      "token_count": 498,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 7684,
      "end_char": 9686
    },
    {
      "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)",
      "index": 5,
      "token_count": 536,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 9586,
      "end_char": 11626
    },
    {
      "content": "h/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)",
      "index": 6,
      "token_count": 542,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 11526,
      "end_char": 13560
    },
    {
      "content": "entation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
      "index": 7,
      "token_count": 554,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 13460,
      "end_char": 15503
    },
    {
      "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.",
      "index": 8,
      "token_count": 504,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 15403,
      "end_char": 17406
    },
    {
      "content": "les/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Embeddings](https://qdrant.tech/documentation/embeddings/)\n-\n- Mixpeek\n\n# Mixpeek Video Embeddings\n\nMixpeek’s video processing capabilities allow you to chunk and embed videos, while Qdrant provides efficient storage and retrieval of these embeddings.\n\n## Prerequisites\n\n- Python 3.7+\n- Mixpeek API key\n- Mixpeek client installed (`pip install mixpeek`)\n- Qdrant client installed (`pip install qdrant-client`)\n\n## Installation\n\n1. Install the required packages:\n\n```bash\npip install mixpeek qdrant-client\n```\n\n2. Set up your Mixpeek API key:\n\n```python\nfrom mixpeek import Mixpeek\n\nmixpeek = Mixpeek('your_api_key_here')\n```\n\n3. Initialize the Qdrant client:\n\n```python\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(\"localhost\", port=6333)\n```\n\n## Usage\n\n### 1. Create Qdrant Collection\n\nMake sure to create a Qdrant collection before inserting vectors. You can create a collection with the appropriate vector size (768 for “vuse-generic-v1” model) using:\n\n```python\nclient.create_collection(\n    collection_name=\"video_chunks\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE)\n)\n```\n\n### 2. Process and Embed Video\n\nFirst, process the video into chunks and embed each chunk:\n\n```python\nfrom mixpeek import Mixpeek",
      "index": 9,
      "token_count": 500,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 17306,
      "end_char": 19355
    },
    {
      "content": "First, process the video into chunks and embed each chunk:\n\n```python\nfrom mixpeek import Mixpeek\nfrom qdrant_client import QdrantClient, models\n\nmixpeek = Mixpeek('your_api_key_here')\nclient = QdrantClient(\"localhost\", port=6333)\n\nvideo_url = \"https://mixpeek-public-demo.s3.us-east-2.amazonaws.com/starter/jurassic_park_trailer.mp4\"\n\n# Process video chunks\nprocessed_chunks = mixpeek.tools.video.process(\n    video_source=video_url,\n    chunk_interval=1,  # 1 second intervals\n    resolution=[720, 1280]\n)\n\n# Embed each chunk and insert into Qdrant\nfor index, chunk in enumerate(processed_chunks):\n    print(f\"Processing video chunk: {index}\")\n\n    embedding = mixpeek.embed.video(\n        model_id=\"vuse-generic-v1\",\n        input=chunk['base64_chunk'],\n        input_type=\"base64\"\n    )['embedding']\n\n    # Insert into Qdrant\n    client.upsert(\n        collection_name=\"video_chunks\",\n        points=[models.PointStruct(\n            id=index,\n            vector=embedding,\n            payload={\n                \"start_time\": chunk[\"start_time\"],\n                \"end_time\": chunk[\"end_time\"]\n            }\n        )]\n    )\n\n    print(f\"  Embedding preview: {embedding[:5] + ['...'] + embedding[-5:]}\")\n\nprint(f\"Processed and inserted {len(processed_chunks)} chunks\")\n```\n\n### 3. Search for Similar Video Chunks\n\nTo search for similar video chunks, you can use either text or video queries:\n\n#### Text Query\n\n```python\nquery_text = \"a car chase scene\"\n\n# Embed the text query\nquery_embedding = mixpeek.embed.video(\n    model_id=\"vuse-generic-v1\",\n    input=query_text,\n    input_type=\"text\"\n)['embedding']\n\n# Search in Qdrant\nsearch_results = client.query_points(\n    collection_name=\"video_chunks\",\n    query=query_embedding,\n    limit=5\n).points\n\nfor result in search_results:\n    print(f\"Chunk ID: {result.id}, Score: {result.score}\")\n    print(f\"Time range: {result.payload['start_time']} - {result.payload['end_time']}\")\n```\n\n#### Video Query\n\n```python\nquery_video_url = \"https://mixpeek-public-demo.s3.us-east-2.amazonaws.",
      "index": 10,
      "token_count": 509,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 19255,
      "end_char": 21289
    },
    {
      "content": "#### Video Query\n\n```python\nquery_video_url = \"https://mixpeek-public-demo.s3.us-east-2.amazonaws.com/starter/jurassic_bunny.mp4\"\n\n# Embed the video query\nquery_embedding = mixpeek.embed.video(\n    model_id=\"vuse-generic-v1\",\n    input=query_video_url,\n    input_type=\"url\"\n)['embedding']\n\n# Search in Qdrant\nsearch_results = client.query_points(\n    collection_name=\"video_chunks\",\n    query=query_embedding,\n    limit=5\n).points\n\nfor result in search_results:\n    print(f\"Chunk ID: {result.id}, Score: {result.score}\")\n    print(f\"Time range: {result.payload['start_time']} - {result.payload['end_time']}\")\n```\n\n## Resources\n\nFor more information on Mixpeek Embed, review the official documentation: <https://docs.mixpeek.com/api-documentation/inference/embed>\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/embeddings/mixpeek.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Mixpeek Video Embeddings](#mixpeek-video-embeddings.md)\n\n  - [Prerequisites](#prerequisites.md)\n\n  - [Installation](#installation.md)\n\n  - [Usage](#usage.md)\n\n    - [1. Create Qdrant Collection](#1-create-qdrant-collection.md)\n    - [2. Process and Embed Video](#2-process-and-embed-video.md)\n    - [3. Search for Similar Video Chunks](#3-search-for-similar-video-chunks.md)\n\n  - [Resources](#resources.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/embeddings/mixpeek.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
      "index": 11,
      "token_count": 528,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 21189,
      "end_char": 23237
    },
    {
      "content": "pressum](https://qdrant.tech/legal/impressum/)",
      "index": 12,
      "token_count": 14,
      "metadata": {
        "title": "_documentation_embeddings_mixpeek_",
        "source": "qdrant_documentation\\documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_embeddings_mixpeek",
        "category": "embeddings",
        "file_path": "documentation_embeddings_mixpeek\\_documentation_embeddings_mixpeek_.md",
        "file_name": "_documentation_embeddings_mixpeek_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.799713",
        "total_chunks": 13
      },
      "start_char": 23137,
      "end_char": 25185
    }
  ]
}