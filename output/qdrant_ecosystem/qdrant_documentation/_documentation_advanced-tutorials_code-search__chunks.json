{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
  "source_repo": "qdrant_documentation",
  "total_chunks": 19,
  "chunks": [
    {
      "content": "Search Through Your Codebase - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.",
      "index": 0,
      "token_count": 530,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 0,
      "end_char": 2039
    },
    {
      "content": "[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.",
      "index": 1,
      "token_count": 507,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 1939,
      "end_char": 3943
    },
    {
      "content": "ocumentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)",
      "index": 2,
      "token_count": 472,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 3843,
      "end_char": 5858
    },
    {
      "content": "fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)",
      "index": 3,
      "token_count": 514,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 5758,
      "end_char": 7806
    },
    {
      "content": "n/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.",
      "index": 4,
      "token_count": 501,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 7706,
      "end_char": 9703
    },
    {
      "content": "nced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Advanced tutorials](https://qdrant.tech/documentation/advanced-tutorials/)\n-\n- Search Through Your Codebase\n\n# Navigate Your Codebase with Semantic Search and Qdrant\n\n| Time: 45 min | Level: Intermediate | [](https://colab.research.google.",
      "index": 5,
      "token_count": 482,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 9603,
      "end_char": 11633
    },
    {
      "content": "Semantic Search and Qdrant\n\n| Time: 45 min | Level: Intermediate | [](https://colab.research.google.com/github/qdrant/examples/blob/master/code-search/code-search.ipynb) |   |\n| ------------ | ------------------- | ------------------------------------------------------------------------------------------------------ | - |\n\nYou too can enrich your applications with Qdrant semantic search. In this tutorial, we describe how you can use Qdrant to navigate a codebase, to help you find relevant code snippets. As an example, we will use the [Qdrant](https://github.com/qdrant/qdrant) source code itself, which is mostly written in Rust.\n\nThis tutorial might not work on code bases that are not disciplined or structured. For good code search, you may need to refactor the project first.\n\n## The approach\n\nWe want to search codebases using natural semantic queries, and searching for code based on similar logic. You can set up these tasks with embeddings:\n\n1. General usage neural encoder for Natural Language Processing (NLP), in our case `sentence-transformers/all-MiniLM-L6-v2`.\n2. Specialized embeddings for code-to-code similarity search. We use the `jina-embeddings-v2-base-code` model.\n\nTo prepare our code for `all-MiniLM-L6-v2`, we preprocess the code to text that more closely resembles natural language. The Jina embeddings model supports a variety of standard programming languages, so there is no need to preprocess the snippets. We can use the code as is.\n\nNLP-based search is based on function signatures, but code search may return smaller pieces, such as loops. So, if we receive a particular function signature from the NLP model and part of its implementation from the code model, we merge the results and highlight the overlap.\n\n## Data preparation\n\nChunking the application sources into smaller parts is a non-trivial task. In general, functions, class methods, structs, enums, and all the other language-specific constructs are good candidates for chunks.",
      "index": 6,
      "token_count": 410,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 11533,
      "end_char": 13509
    },
    {
      "content": "hods, structs, enums, and all the other language-specific constructs are good candidates for chunks. They are big enough to contain some meaningful information, but small enough to be processed by embedding models with a limited context window. You can also use docstrings, comments, and other metadata can be used to enrich the chunks with additional information.\n\n### Parsing the codebase\n\nWhile our example uses Rust, you can use our approach with any other language. You can parse code with a [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) (**LSP**) compatible tool. You can use an LSP to build a graph of the codebase, and then extract chunks. We did our work with the [rust-analyzer](https://rust-analyzer.github.io/). We exported the parsed codebase into the [LSIF](https://microsoft.github.io/language-server-protocol/specifications/lsif/0.4.0/specification/) format, a standard for code intelligence data. Next, we used the LSIF data to navigate the codebase and extract the chunks. For details, see our [code search demo](https://github.com/qdrant/demo-code-search).\n\nFor other languages, you can use the same approach. There are [plenty of implementations available ](https://microsoft.github.io/language-server-protocol/implementors/servers/).\n\nWe then exported the chunks into JSON documents with not only the code itself, but also context with the location of the code in the project. For example, see the description of the `await_ready_for_timeout` function from the `IsReady` struct in the `common` module:\n\n```json\n{\n   \"name\":\"await_ready_for_timeout\",\n   \"signature\":\"fn await_ready_for_timeout (& self , timeout : Duration) -> bool\",\n   \"code_type\":\"Function\",\n   \"docstring\":\"= \\\" Return `true` if ready, `false` if timed out.\\\"\",\n   \"line\":44,\n   \"line_from\":43,\n   \"line_to\":51,\n   \"context\":{\n      \"module\":\"common\",\n      \"file_path\":\"lib/collection/src/common/is_ready.rs\",\n      \"file_name\":\"is_ready.rs\",\n      \"struct_name\":\"IsReady\",",
      "index": 7,
      "token_count": 463,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 13409,
      "end_char": 15410
    },
    {
      "content": "collection/src/common/is_ready.rs\",\n      \"file_name\":\"is_ready.rs\",\n      \"struct_name\":\"IsReady\",\n      \"snippet\":\"    /// Return `true` if ready, `false` if timed out.\\n    pub fn await_ready_for_timeout(&self, timeout: Duration) -> bool {\\n        let mut is_ready = self.value.lock();\\n        if !*is_ready {\\n            !self.condvar.wait_for(&mut is_ready, timeout).timed_out()\\n        } else {\\n            true\\n        }\\n    }\\n\"\n   }\n}\n```\n\nYou can examine the Qdrant structures, parsed in JSON, in the [`structures.jsonl` file](https://storage.googleapis.com/tutorial-attachments/code-search/structures.jsonl) in our Google Cloud Storage bucket. Download it and use it as a source of data for our code search.\n\n```shell\nwget https://storage.googleapis.com/tutorial-attachments/code-search/structures.jsonl\n```\n\nNext, load the file and parse the lines into a list of dictionaries:\n\n```python\nimport json\n\nstructures = []\nwith open(\"structures.jsonl\", \"r\") as fp:\n    for i, row in enumerate(fp):\n        entry = json.loads(row)\n        structures.append(entry)\n```\n\n### Code to *natural language* conversion\n\nEach programming language has its own syntax which is not a part of the natural language. Thus, a general-purpose model probably does not understand the code as is. We can, however, normalize the data by removing code specifics and including additional context, such as module, class, function, and file name. We took the following steps:\n\n1. Extract the signature of the function, method, or other code construct.\n2. Divide camel case and snake case names into separate words.\n3. Take the docstring, comments, and other important metadata.\n4. Build a sentence from the extracted data using a predefined template.\n5. Remove the special characters and replace them with spaces.\n\nAs input, expect dictionaries with the same structure. Define a `textify` function to do the conversion. We’ll use an `inflection` library to convert with different naming conventions.\n\n```shell\npip install inflection\n```",
      "index": 8,
      "token_count": 455,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 15310,
      "end_char": 17335
    },
    {
      "content": "ection` library to convert with different naming conventions.\n\n```shell\npip install inflection\n```\n\nOnce all dependencies are installed, we define the `textify` function:\n\n```python\nimport inflection\nimport re\n\nfrom typing import Dict, Any\n\ndef textify(chunk: Dict[str, Any]) -> str:\n    # Get rid of all the camel case / snake case\n    # - inflection.underscore changes the camel case to snake case\n    # - inflection.humanize converts the snake case to human readable form\n    name = inflection.humanize(inflection.underscore(chunk[\"name\"]))\n    signature = inflection.humanize(inflection.underscore(chunk[\"signature\"]))\n\n    # Check if docstring is provided\n    docstring = \"\"\n    if chunk[\"docstring\"]:\n        docstring = f\"that does {chunk['docstring']} \"\n\n    # Extract the location of that snippet of code\n    context = (\n        f\"module {chunk['context']['module']} \"\n        f\"file {chunk['context']['file_name']}\"\n    )\n    if chunk[\"context\"][\"struct_name\"]:\n        struct_name = inflection.humanize(\n            inflection.underscore(chunk[\"context\"][\"struct_name\"])\n        )\n        context = f\"defined in struct {struct_name} {context}\"\n\n    # Combine all the bits and pieces together\n    text_representation = (\n        f\"{chunk['code_type']} {name} \"\n        f\"{docstring}\"\n        f\"defined as {signature} \"\n        f\"{context}\"\n    )\n\n    # Remove any special characters and concatenate the tokens\n    tokens = re.split(r\"\\W\", text_representation)\n    tokens = filter(lambda x: x, tokens)\n    return \" \".join(tokens)\n```\n\nNow we can use `textify` to convert all chunks into text representations:\n\n```python\ntext_representations = list(map(textify, structures))\n```\n\nThis is how the `await_ready_for_timeout` function description appears:\n\n```text\nFunction Await ready for timeout that does Return true if ready false if timed out defined as Fn await ready for timeout self timeout duration bool defined in struct Is ready module common file is_ready rs\n```\n\n## Ingestion pipeline",
      "index": 9,
      "token_count": 459,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 17235,
      "end_char": 19238
    },
    {
      "content": "duration bool defined in struct Is ready module common file is_ready rs\n```\n\n## Ingestion pipeline\n\nNext, we’ll build a pipeline for vectorizing the data and set up a semantic search mechanism for both embedding models.\n\n### Building Qdrant collection\n\nWe use the `qdrant-client` library with the `fastembed` extra to interact with the Qdrant server and generate vector embeddings locally. Let’s install it:\n\n```shell\npip install \"qdrant-client[fastembed]\"\n```\n\nOf course, we need a running Qdrant server for vector search. If you need one, you can [use a local Docker container](https://qdrant.tech/documentation/quick-start/) or deploy it using the [Qdrant Cloud](https://cloud.qdrant.io/). You can use either to follow this tutorial. Configure the connection parameters:\n\n```python\nQDRANT_URL = \"https://my-cluster.cloud.qdrant.io:6333\" # http://localhost:6333 for local instance\nQDRANT_API_KEY = \"THIS_IS_YOUR_API_KEY\" # None for local instance\n```\n\nThen use the library to create a collection:\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(QDRANT_URL, api_key=QDRANT_API_KEY)\nclient.create_collection(\n    \"qdrant-sources\",\n    vectors_config={\n        \"text\": models.VectorParams(\n            size=client.get_embedding_size(\n                model_name=\"sentence-transformers/all-MiniLM-L6-v2\"\n            ),\n            distance=models.Distance.COSINE,\n        ),\n        \"code\": models.VectorParams(\n            size=client.get_embedding_size(\n                model_name=\"jinaai/jina-embeddings-v2-base-code\"\n            ),\n            distance=models.Distance.COSINE,\n        ),\n    },\n)\n```\n\nOur newly created collection is ready to accept the data. Let’s upload the embeddings:\n\n```python\nimport uuid\n\n# Extract the code snippets from the structures to a separate list\ncode_snippets = [\n    structure[\"context\"][\"snippet\"] for structure in structures\n]\n\npoints = [\n    models.PointStruct(\n        id=uuid.uuid4().hex,\n        vector={\n            \"text\": models.Document(",
      "index": 10,
      "token_count": 474,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 19138,
      "end_char": 21155
    },
    {
      "content": "els.PointStruct(\n        id=uuid.uuid4().hex,\n        vector={\n            \"text\": models.Document(\n                text=text, model=\"sentence-transformers/all-MiniLM-L6-v2\"\n            ),\n            \"code\": models.Document(\n                text=code, model=\"jinaai/jina-embeddings-v2-base-code\"\n            ),\n        },\n        payload=structure,\n    )\n    for text, code, structure in zip(text_representations, code_snippets, structures)\n]\n\n# Note: This might take a while since inference happens implicitly.\n# Parallel processing can help.\n# But too many processes may trigger swap memory and hurt performance.\nclient.upload_points(\"qdrant-sources\", points=points, batch_size=64)\n```\n\nInternally, `qdrant-client` uses [FastEmbed](https://github.com/qdrant/fastembed) to implicitly convert our documents into their vector representations. The uploaded points are immediately available for search. Next, query the collection to find relevant code snippets.\n\n## Querying the codebase\n\nWe use one of the models to search the collection. Start with text embeddings. Run the following query “*How do I count points in a collection?*”. Review the results.\n\nIn these tables, we link to longer code excerpts from a \\`file\\_name\\` in the \\`Qdrant\\` repository. The results are subject to change. Fortunately, this model should continue to provide the results you need.\n\n```python\nquery = \"How do I count points in a collection?\"\n\nhits = client.query_points(\n    \"qdrant-sources\",\n    query=models.Document(text=query, model=\"sentence-transformers/all-MiniLM-L6-v2\"),\n    using=\"text\",\n    limit=5,\n).points\n```\n\nNow, review the results. The following table lists the module, the file name and score. Each line includes a link to the signature, as a code block from the file.\n\n| module              | file\\_name           | score      | signature                                                                                                                                                                             |",
      "index": 11,
      "token_count": 419,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 21055,
      "end_char": 23070
    },
    {
      "content": "|\n| ------------------- | -------------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| toc                 | point\\_ops.rs        | 0.59448624 | [`pub async fn count`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/storage/src/content_manager/toc/point_ops.rs#L120)                          |\n| operations          | types.rs             | 0.5493385  | [`pub struct CountRequestInternal`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/collection/src/operations/types.rs#L831)                       |\n| collection\\_manager | segments\\_updater.rs | 0.5121002  | [`pub(crate) fn upsert_points<'a, T>`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/collection/src/collection_manager/segments_updater.rs#L339) |\n| collection          | point\\_ops.rs        | 0.5063539  | [`pub async fn count`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/collection/src/collection/point_ops.rs#L213)                                |\n| map\\_index          | mod.rs               | 0.49973983 | [`fn get_points_with_value_count<Q>`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/segment/src/index/field_index/map_index/mod.rs#L88)          |\n\nIt seems we were able to find some relevant code structures. Let’s try the same with the code embeddings:\n\n```python\nhits = client.query_points(\n    \"qdrant-sources\",\n    query=models.Document(text=query, model=\"jinaai/jina-embeddings-v2-base-code\"),\n    using=\"code\",\n    limit=5,\n).points\n```\n\nOutput:",
      "index": 12,
      "token_count": 562,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 22970,
      "end_char": 24840
    },
    {
      "content": "model=\"jinaai/jina-embeddings-v2-base-code\"),\n    using=\"code\",\n    limit=5,\n).points\n```\n\nOutput:\n\n| module         | file\\_name                   | score      | signature                                                                                                                                                               |\n| -------------- | ---------------------------- | ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| field\\_index   | geo\\_index.rs                | 0.73278356 | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/segment/src/index/field_index/geo_index.rs#L612)         |\n| numeric\\_index | mod.rs                       | 0.7254976  | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/field_index/numeric_index/mod.rs#L322) |\n| map\\_index     | mod.rs                       | 0.7124739  | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/field_index/map_index/mod.rs#L315)     |\n| map\\_index     | mod.rs                       | 0.7124739  | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/field_index/map_index/mod.rs#L429)     |\n| fixtures       | payload\\_context\\_fixture.rs | 0.706204   | [`fn total_point_count`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/fixtures/payload_context_fixture.rs#L122)       |\n\nWhile the scores retrieved by different models are not comparable, but we can see that the results are different. Code and text embeddings can capture different aspects of the codebase.",
      "index": 13,
      "token_count": 555,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 24740,
      "end_char": 26657
    },
    {
      "content": "t the results are different. Code and text embeddings can capture different aspects of the codebase. We can use both models to query the collection and then combine the results to get the most relevant code snippets, from a single batch request.\n\n```python\nresponses = client.query_batch_points(\n    collection_name=\"qdrant-sources\",\n    requests=[\n        models.QueryRequest(\n            query=models.Document(\n                text=query, model=\"sentence-transformers/all-MiniLM-L6-v2\"\n            ),\n            using=\"text\",\n            with_payload=True,\n            limit=5,\n        ),\n        models.QueryRequest(\n            query=models.Document(\n                text=query, model=\"jinaai/jina-embeddings-v2-base-code\"\n            ),\n            using=\"code\",\n            with_payload=True,\n            limit=5,\n        ),\n    ],\n)\n\nresults = [response.points for response in responses]\n```\n\nOutput:\n\n| module              | file\\_name                   | score      | signature                                                                                                                                                                             |\n| ------------------- | ---------------------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| toc                 | point\\_ops.rs                | 0.59448624 | [`pub async fn count`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/storage/src/content_manager/toc/point_ops.rs#L120)                          |\n| operations          | types.rs                     | 0.5493385  | [`pub struct CountRequestInternal`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/collection/src/operations/types.rs#L831)                       |\n| collection\\_manager | segments\\_updater.rs         | 0.5121002  | [`pub(crate) fn upsert_points<'a, T>`](https://github.",
      "index": 14,
      "token_count": 434,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 26557,
      "end_char": 28597
    },
    {
      "content": "| segments\\_updater.rs         | 0.5121002  | [`pub(crate) fn upsert_points<'a, T>`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/collection/src/collection_manager/segments_updater.rs#L339) |\n| collection          | point\\_ops.rs                | 0.5063539  | [`pub async fn count`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/collection/src/collection/point_ops.rs#L213)                                |\n| map\\_index          | mod.rs                       | 0.49973983 | [`fn get_points_with_value_count<Q>`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/segment/src/index/field_index/map_index/mod.rs#L88)          |\n| field\\_index        | geo\\_index.rs                | 0.73278356 | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/segment/src/index/field_index/geo_index.rs#L612)                       |\n| numeric\\_index      | mod.rs                       | 0.7254976  | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/field_index/numeric_index/mod.rs#L322)               |\n| map\\_index          | mod.rs                       | 0.7124739  | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/field_index/map_index/mod.rs#L315)                   |\n| map\\_index          | mod.rs                       | 0.7124739  | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/field_index/map_index/mod.rs#L429)                   |\n| fixtures            | payload\\_context\\_fixture.rs | 0.706204   | [`fn total_point_count`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/fixtures/payload_context_fixture.rs#L122)                     |",
      "index": 15,
      "token_count": 747,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 28497,
      "end_char": 30492
    },
    {
      "content": "b45cfe6749ac76ed59/lib/segment/src/fixtures/payload_context_fixture.rs#L122)                     |\n\nThis is one example of how you can use different models and combine the results. In a real-world scenario, you might run some reranking and deduplication, as well as additional processing of the results.\n\n### Code search demo\n\nOur [Code search demo](https://code-search.qdrant.tech/) uses the following process:\n\n1. The user sends a query.\n\n2. Both models vectorize that query simultaneously. We get two different vectors.\n\n3. Both vectors are used in parallel to find relevant snippets. We expect 5 examples from the NLP search and 20 examples from the code search.\n\n4. Once we retrieve results for both vectors, we merge them in one of the following scenarios:\n\n   1. If both methods return different results, we prefer the results from the general usage model (NLP).\n   2. If there is an overlap between the search results, we merge overlapping snippets.\n\nIn the screenshot, we search for `flush of wal`. The result shows relevant code, merged from both models. Note the highlighted code in lines 621-629. It’s where both models agree.\n\nNow you see semantic code intelligence, in action.\n\n### Grouping the results\n\nYou can improve the search results, by grouping them by payload properties. In our case, we can group the results by the module. If we use code embeddings, we can see multiple results from the `map_index` module. Let’s group the results and assume a single result per module:\n\n```python\nresults = client.query_points_groups(\n    collection_name=\"qdrant-sources\",\n    using=\"code\",\n    query=models.Document(text=query, model=\"jinaai/jina-embeddings-v2-base-code\"),\n    group_by=\"context.module\",\n    limit=5,\n    group_size=1,\n)\n```\n\nOutput:\n\n| module         | file\\_name                   | score      | signature                                                                                                                                                               |",
      "index": 16,
      "token_count": 426,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 30392,
      "end_char": 32386
    },
    {
      "content": "|\n| -------------- | ---------------------------- | ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| field\\_index   | geo\\_index.rs                | 0.73278356 | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/7aa164bd2dda1c0fc9bf3a0da42e656c95c2e52a/lib/segment/src/index/field_index/geo_index.rs#L612)         |\n| numeric\\_index | mod.rs                       | 0.7254976  | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/field_index/numeric_index/mod.rs#L322) |\n| map\\_index     | mod.rs                       | 0.7124739  | [`fn count_indexed_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/field_index/map_index/mod.rs#L315)     |\n| fixtures       | payload\\_context\\_fixture.rs | 0.706204   | [`fn total_point_count`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/fixtures/payload_context_fixture.rs#L122)       |\n| hnsw\\_index    | graph\\_links.rs              | 0.6998417  | [`fn num_points`](https://github.com/qdrant/qdrant/blob/3fbe1cae6cb7f51a0c5bb4b45cfe6749ac76ed59/lib/segment/src/index/hnsw_index/graph_links.rs#L477)                  |\n\nWith the grouping feature, we get more diverse results.\n\n## Summary\n\nThis tutorial demonstrates how to use Qdrant to navigate a codebase. For an end-to-end implementation, review the [code search notebook](https://colab.research.google.com/github/qdrant/examples/blob/master/code-search/code-search.ipynb) and the [code-search-demo](https://github.com/qdrant/demo-code-search). You can also check out [a running version of the code search demo](https://code-search.qdrant.tech/) which exposes Qdrant codebase for search with a web interface.",
      "index": 17,
      "token_count": 599,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 32286,
      "end_char": 34328
    },
    {
      "content": "](https://code-search.qdrant.tech/) which exposes Qdrant codebase for search with a web interface.\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Navigate Your Codebase with Semantic Search and Qdrant](#navigate-your-codebase-with-semantic-search-and-qdrant.md)\n\n  - [The approach](#the-approach.md)\n\n  - [Data preparation](#data-preparation.md)\n\n    - [Parsing the codebase](#parsing-the-codebase.md)\n    - [Code to *natural language* conversion](#code-to-natural-language-conversion.md)\n\n  - [Ingestion pipeline](#ingestion-pipeline.md)\n    - [Building Qdrant collection](#building-qdrant-collection.md)\n\n  - [Querying the codebase](#querying-the-codebase.md)\n\n    - [Code search demo](#code-search-demo.md)\n    - [Grouping the results](#grouping-the-results.md)\n\n  - [Summary](#summary.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/advanced-tutorials/code-search.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
      "index": 18,
      "token_count": 426,
      "metadata": {
        "title": "_documentation_advanced-tutorials_code-search_",
        "source": "qdrant_documentation\\documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_advanced-tutorials_code-search",
        "category": "advanced-tutorials",
        "file_path": "documentation_advanced-tutorials_code-search\\_documentation_advanced-tutorials_code-search_.md",
        "file_name": "_documentation_advanced-tutorials_code-search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.874978",
        "total_chunks": 19
      },
      "start_char": 34228,
      "end_char": 36276
    }
  ]
}