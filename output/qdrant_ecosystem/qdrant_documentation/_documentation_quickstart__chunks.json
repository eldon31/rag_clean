{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
  "source_repo": "qdrant_documentation",
  "total_chunks": 15,
  "chunks": [
    {
      "content": "Local Quickstart - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.",
      "index": 0,
      "token_count": 528,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 0,
      "end_char": 2027
    },
    {
      "content": "[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.",
      "index": 1,
      "token_count": 507,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 1927,
      "end_char": 3931
    },
    {
      "content": "ocumentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)",
      "index": 2,
      "token_count": 472,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 3831,
      "end_char": 5846
    },
    {
      "content": "fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)",
      "index": 3,
      "token_count": 514,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 5746,
      "end_char": 7794
    },
    {
      "content": "n/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.",
      "index": 4,
      "token_count": 501,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 7694,
      "end_char": 9691
    },
    {
      "content": "nced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- Local Quickstart\n\n# How to Get Started with Qdrant Locally\n\nIn this short example, you will use the Python Client to create a Collection, load data into it and run a basic search query.",
      "index": 5,
      "token_count": 467,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 9591,
      "end_char": 11568
    },
    {
      "content": "will use the Python Client to create a Collection, load data into it and run a basic search query.\n\nBefore you start, please make sure Docker is installed and running on your system.\n\n## Download and run\n\nFirst, download the latest Qdrant image from Dockerhub:\n\n```bash\ndocker pull qdrant/qdrant\n```\n\nThen, run the service:\n\n```bash\ndocker run -p 6333:6333 -p 6334:6334 \\\n    -v \"$(pwd)/qdrant_storage:/qdrant/storage:z\" \\\n    qdrant/qdrant\n```\n\nOn Windows, you may need to create a named Docker volume instead of mounting a local folder.\n\nUnder the default configuration all data will be stored in the `./qdrant_storage` directory. This will also be the only directory that both the Container and the host machine can both see.\n\nQdrant is now accessible:\n\n- REST API: [localhost:6333](http://localhost:6333)\n- Web UI: [localhost:6333/dashboard](http://localhost:6333/dashboard)\n- GRPC API: [localhost:6334](http://localhost:6334)\n\n## Initialize the client\n\n```python\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n```\n\n```rust\nuse qdrant_client::Qdrant;\n\n// The Rust client uses Qdrant's gRPC interface\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\n// The Java client uses Qdrant's gRPC interface\nQdrantClient client = new QdrantClient(\n    QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n```\n\n```csharp\nusing Qdrant.Client;\n\n// The C# client uses Qdrant's gRPC interface\nvar client = new QdrantClient(\"localhost\", 6334);\n```\n\n```go\nimport \"github.com/qdrant/go-client/qdrant\"\n\n// The Go client uses Qdrant's gRPC interface\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n```\n\nBy default, Qdrant starts with no encryption or authentication .",
      "index": 6,
      "token_count": 587,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 11468,
      "end_char": 13462
    },
    {
      "content": ": \"localhost\",\n\tPort: 6334,\n})\n```\n\nBy default, Qdrant starts with no encryption or authentication . This means anyone with network access to your machine can access your Qdrant container instance. Please read [Security](https://qdrant.tech/documentation/security/) carefully for details on how to secure your instance.\n\n## Create a collection\n\nYou will be storing all of your vector data in a Qdrant collection. Let’s call it `test_collection`. This collection will be using a dot product distance metric to compare vectors.\n\n```python\nfrom qdrant_client.models import Distance, VectorParams\n\nclient.create_collection(\n    collection_name=\"test_collection\",\n    vectors_config=VectorParams(size=4, distance=Distance.DOT),\n)\n```\n\n```typescript\nawait client.createCollection(\"test_collection\", {\n  vectors: { size: 4, distance: \"Dot\" },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{CreateCollectionBuilder, VectorParamsBuilder};\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"test_collection\")\n            .vectors_config(VectorParamsBuilder::new(4, Distance::Dot)),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nclient.createCollectionAsync(\"test_collection\",\n        VectorParams.newBuilder().setDistance(Distance.Dot).setSize(4).build()).get();\n```\n\n```csharp\nusing Qdrant.Client.Grpc;\n\nawait client.CreateCollectionAsync(collectionName: \"test_collection\", vectorsConfig: new VectorParams\n{\n    Size = 4, Distance = Distance.Dot\n});\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     4,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n})\n```\n\n## Add vectors\n\nLet’s now add a few vectors with a payload. Payloads are other data you want to associate with the vector:\n\n```python\nfrom qdrant_client.models import PointStruct",
      "index": 7,
      "token_count": 473,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 13362,
      "end_char": 15402
    },
    {
      "content": "ata you want to associate with the vector:\n\n```python\nfrom qdrant_client.models import PointStruct\n\noperation_info = client.upsert(\n    collection_name=\"test_collection\",\n    wait=True,\n    points=[\n        PointStruct(id=1, vector=[0.05, 0.61, 0.76, 0.74], payload={\"city\": \"Berlin\"}),\n        PointStruct(id=2, vector=[0.19, 0.81, 0.75, 0.11], payload={\"city\": \"London\"}),\n        PointStruct(id=3, vector=[0.36, 0.55, 0.47, 0.94], payload={\"city\": \"Moscow\"}),\n        PointStruct(id=4, vector=[0.18, 0.01, 0.85, 0.80], payload={\"city\": \"New York\"}),\n        PointStruct(id=5, vector=[0.24, 0.18, 0.22, 0.44], payload={\"city\": \"Beijing\"}),\n        PointStruct(id=6, vector=[0.35, 0.08, 0.11, 0.44], payload={\"city\": \"Mumbai\"}),\n    ],\n)\n\nprint(operation_info)\n```\n\n```typescript\nconst operationInfo = await client.upsert(\"test_collection\", {\n  wait: true,\n  points: [\n    { id: 1, vector: [0.05, 0.61, 0.76, 0.74], payload: { city: \"Berlin\" } },\n    { id: 2, vector: [0.19, 0.81, 0.75, 0.11], payload: { city: \"London\" } },\n    { id: 3, vector: [0.36, 0.55, 0.47, 0.94], payload: { city: \"Moscow\" } },\n    { id: 4, vector: [0.18, 0.01, 0.85, 0.80], payload: { city: \"New York\" } },\n    { id: 5, vector: [0.24, 0.18, 0.22, 0.44], payload: { city: \"Beijing\" } },\n    { id: 6, vector: [0.35, 0.08, 0.11, 0.44], payload: { city: \"Mumbai\" } },\n  ],\n});\n\nconsole.debug(operationInfo);\n```\n\n```rust\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\n\nlet points = vec![\n    PointStruct::new(1, vec![0.05, 0.61, 0.76, 0.74], [(\"city\", \"Berlin\".into())]),\n    PointStruct::new(2, vec![0.19, 0.81, 0.75, 0.11], [(\"city\", \"London\".into())]),\n    PointStruct::new(3, vec![0.36, 0.55, 0.47, 0.94], [(\"city\", \"Moscow\".into())]),\n    // ..truncated\n];\n\nlet response = client\n    .upsert_points(UpsertPointsBuilder::new(\"test_collection\", points).wait(true))\n    .await?;\n\ndbg!(response);\n```\n\n```java\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.ValueFactory.value;",
      "index": 8,
      "token_count": 819,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 15302,
      "end_char": 17349
    },
    {
      "content": "mport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.ValueFactory.value;\nimport static io.qdrant.client.VectorsFactory.vectors;\n\nimport io.qdrant.client.grpc.Points.PointStruct;\nimport io.qdrant.client.grpc.Points.UpdateResult;\n\nUpdateResult operationInfo =\n    client\n        .upsertAsync(\n            \"test_collection\",\n            List.of(\n                PointStruct.newBuilder()\n                    .setId(id(1))\n                    .setVectors(vectors(0.05f, 0.61f, 0.76f, 0.74f))\n                    .putAllPayload(Map.of(\"city\", value(\"Berlin\")))\n                    .build(),\n                PointStruct.newBuilder()\n                    .setId(id(2))\n                    .setVectors(vectors(0.19f, 0.81f, 0.75f, 0.11f))\n                    .putAllPayload(Map.of(\"city\", value(\"London\")))\n                    .build(),\n                PointStruct.newBuilder()\n                    .setId(id(3))\n                    .setVectors(vectors(0.36f, 0.55f, 0.47f, 0.94f))\n                    .putAllPayload(Map.of(\"city\", value(\"Moscow\")))\n                    .build()))\n                // Truncated\n            .get();\n\nSystem.out.println(operationInfo);\n```\n\n```csharp\nusing Qdrant.Client.Grpc;\n\nvar operationInfo = await client.UpsertAsync(collectionName: \"test_collection\", points: new List<PointStruct>\n{\n    new()\n    {\n        Id = 1,\n            Vectors = new float[]\n            {\n                0.05f, 0.61f, 0.76f, 0.74f\n            },\n            Payload = {\n                [\"city\"] = \"Berlin\"\n            }\n    },\n    new()\n    {\n        Id = 2,\n            Vectors = new float[]\n            {\n                0.19f, 0.81f, 0.75f, 0.11f\n            },\n            Payload = {\n                [\"city\"] = \"London\"\n            }\n    },\n    new()\n    {\n        Id = 3,\n            Vectors = new float[]\n            {\n                0.36f, 0.55f, 0.47f, 0.94f\n            },\n            Payload = {\n                [\"city\"] = \"Moscow\"\n            }\n    },\n    // Truncated\n});\n\nConsole.WriteLine(operationInfo);",
      "index": 9,
      "token_count": 542,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 17249,
      "end_char": 19298
    },
    {
      "content": "[\"city\"] = \"Moscow\"\n            }\n    },\n    // Truncated\n});\n\nConsole.WriteLine(operationInfo);\n```\n\n```go\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\noperationInfo, err := client.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"test_collection\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectors(0.05, 0.61, 0.76, 0.74),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"city\": \"Berlin\"}),\n\t\t},\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(2),\n\t\t\tVectors: qdrant.NewVectors(0.19, 0.81, 0.75, 0.11),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"city\": \"London\"}),\n\t\t},\n\t\t{\n\t\t\tId:      qdrant.NewIDNum(3),\n\t\t\tVectors: qdrant.NewVectors(0.36, 0.55, 0.47, 0.94),\n\t\t\tPayload: qdrant.NewValueMap(map[string]any{\"city\": \"Moscow\"}),\n\t\t},\n        // Truncated\n\t},\n})\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(operationInfo)\n```\n\n**Response:**\n\n```python\noperation_id=0 status=<UpdateStatus.COMPLETED: 'completed'>\n```\n\n```typescript\n{ operation_id: 0, status: 'completed' }\n```\n\n```rust\nPointsOperationResponse {\n    result: Some(\n        UpdateResult {\n            operation_id: Some(\n                0,\n            ),\n            status: Completed,\n        },\n    ),\n    time: 0.00094027,\n}\n```\n\n```java\noperation_id: 0\nstatus: Completed\n```\n\n```csharp\n{ \"operationId\": \"0\", \"status\": \"Completed\" }\n```\n\n```go\noperation_id:0  status:Acknowledged\n```\n\n## Run a query\n\nLet’s ask a basic question - Which of our stored vectors are most similar to the query vector `[0.2, 0.1, 0.9, 0.7]`?\n\n```python\nsearch_result = client.query_points(\n    collection_name=\"test_collection\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_payload=False,\n    limit=3\n).points\n\nprint(search_result)\n```\n\n```typescript\nlet searchResult = await client.query(\n    \"test_collection\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    limit: 3\n});\n\nconsole.debug(searchResult.points);\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\n\nlet search_result = client\n    .query(",
      "index": 10,
      "token_count": 662,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 19198,
      "end_char": 21216
    },
    {
      "content": "```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\n\nlet search_result = client\n    .query(\n        QueryPointsBuilder::new(\"test_collection\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n    )\n    .await?;\n\ndbg!(search_result);\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.ScoredPoint;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nList<ScoredPoint> searchResult =\n    client.queryAsync(QueryPoints.newBuilder()\n                .setCollectionName(\"test_collection\")\n                .setLimit(3)\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .build()).get();\n      \nSystem.out.println(searchResult);\n```\n\n```csharp\nvar searchResult = await client.QueryAsync(\n    collectionName: \"test_collection\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    limit: 3,\n);\n\nConsole.WriteLine(searchResult);\n```\n\n```go\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nsearchResult, err := client.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"test_collection\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n})\nif err != nil {\n\tpanic(err)\n}\n\nfmt.Println(searchResult)\n```\n\n**Response:**\n\n```json\n[\n  {\n    \"id\": 4,\n    \"version\": 0,\n    \"score\": 1.362,\n    \"payload\": null,\n    \"vector\": null\n  },\n  {\n    \"id\": 1,\n    \"version\": 0,\n    \"score\": 1.273,\n    \"payload\": null,\n    \"vector\": null\n  },\n  {\n    \"id\": 3,\n    \"version\": 0,\n    \"score\": 1.208,\n    \"payload\": null,\n    \"vector\": null\n  }\n]\n```\n\nThe results are returned in decreasing similarity order. Note that payload and vector data is missing in these results by default. See [payload and vector in the result](https://qdrant.tech/documentation/concepts/search/#payload-and-vector-in-the-result) on how to enable it.\n\n## Add a filter\n\nWe can narrow down the results further by filtering by payload. Let’s find the closest results that include “London”.\n\n```python\nfrom qdrant_client.",
      "index": 11,
      "token_count": 582,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 21116,
      "end_char": 23124
    },
    {
      "content": "ing by payload. Let’s find the closest results that include “London”.\n\n```python\nfrom qdrant_client.models import Filter, FieldCondition, MatchValue\n\nsearch_result = client.query_points(\n    collection_name=\"test_collection\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    query_filter=Filter(\n        must=[FieldCondition(key=\"city\", match=MatchValue(value=\"London\"))]\n    ),\n    with_payload=True,\n    limit=3,\n).points\n\nprint(search_result)\n```\n\n```typescript\nsearchResult = await client.query(\"test_collection\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    filter: {\n        must: [{ key: \"city\", match: { value: \"London\" } }],\n    },\n    with_payload: true,\n    limit: 3,\n});\n\nconsole.debug(searchResult);\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, QueryPointsBuilder};\n\nlet search_result = client\n    .query(\n        QueryPointsBuilder::new(\"test_collection\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )]))\n            .with_payload(true),\n    )\n    .await?;\n\ndbg!(search_result);\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nList<ScoredPoint> searchResult =\n    client.queryAsync(QueryPoints.newBuilder()\n                .setCollectionName(\"test_collection\")\n                .setLimit(3)\n                .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")))\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(enable(true))\n                .build()).get();\n\nSystem.out.println(searchResult);\n```\n\n```csharp\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar searchResult = await client.QueryAsync(\n    collectionName: \"test_collection\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    filter: MatchKeyword(\"city\", \"London\"),\n    limit: 3,\n    payloadSelector: true\n);\n\nConsole.WriteLine(searchResult);\n```\n\n```go\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nsearchResult, err := client.",
      "index": 12,
      "token_count": 546,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 23024,
      "end_char": 25065
    },
    {
      "content": "go\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nsearchResult, err := client.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"test_collection\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t},\n\t},\n\tWithPayload: qdrant.NewWithPayload(true),\n})\nif err != nil {\n\tpanic(err)\n}\n\nfmt.Println(searchResult)\n```\n\n**Response:**\n\n```json\n[\n    {\n        \"id\": 2,\n        \"version\": 0,\n        \"score\": 0.871,\n        \"payload\": {\n            \"city\": \"London\"\n        },\n        \"vector\": null\n    }\n]\n```\n\nTo make filtered search fast on real datasets, we highly recommend to create [payload indexes](https://qdrant.tech/documentation/concepts/indexing/#payload-index)!\n\nYou have just conducted vector search. You loaded vectors into a database and queried the database with a vector of your own. Qdrant found the closest results and presented you with a similarity score.\n\n## Next steps\n\nNow you know how Qdrant works. Getting started with [Qdrant Cloud](https://qdrant.tech/documentation/cloud/quickstart-cloud/) is just as easy. [Create an account](https://qdrant.to/cloud) and use our SaaS completely free. We will take care of infrastructure maintenance and software updates.\n\nTo move onto some more complex examples of vector search, read our [Tutorials](https://qdrant.tech/documentation/tutorials/) and create your own app with the help of our [Examples](https://qdrant.tech/documentation/examples/).\n\n**Note:** There is another way of running Qdrant locally. If you are a Python developer, we recommend that you try Local Mode in [Qdrant Client](https://github.com/qdrant/qdrant-client), as it only takes a few moments to get setup.\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/quickstart.md) this page on GitHub, or [create](https://github.",
      "index": 13,
      "token_count": 523,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 24965,
      "end_char": 27004
    },
    {
      "content": "qdrant-landing/content/documentation/quickstart.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [How to Get Started with Qdrant Locally](#how-to-get-started-with-qdrant-locally.md)\n\n  - [Download and run](#download-and-run.md)\n  - [Initialize the client](#initialize-the-client.md)\n  - [Create a collection](#create-a-collection.md)\n  - [Add vectors](#add-vectors.md)\n  - [Run a query](#run-a-query.md)\n  - [Add a filter](#add-a-filter.md)\n  - [Next steps](#next-steps.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/quickstart.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
      "index": 14,
      "token_count": 291,
      "metadata": {
        "title": "_documentation_quickstart_",
        "source": "qdrant_documentation\\documentation_quickstart\\_documentation_quickstart_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_quickstart",
        "category": "quickstart",
        "file_path": "documentation_quickstart\\_documentation_quickstart_.md",
        "file_name": "_documentation_quickstart_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:33.679351",
        "total_chunks": 15
      },
      "start_char": 26904,
      "end_char": 28952
    }
  ]
}