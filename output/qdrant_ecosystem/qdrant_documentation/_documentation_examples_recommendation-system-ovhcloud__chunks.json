{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
  "source_repo": "qdrant_documentation",
  "total_chunks": 16,
  "chunks": [
    {
      "content": "Movie Recommendation System - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)",
      "index": 0,
      "token_count": 546,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 0,
      "end_char": 2039
    },
    {
      "content": "ata-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.",
      "index": 1,
      "token_count": 535,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 1939,
      "end_char": 3948
    },
    {
      "content": "ai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.",
      "index": 2,
      "token_count": 551,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 3848,
      "end_char": 5882
    },
    {
      "content": "VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.",
      "index": 3,
      "token_count": 531,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 5782,
      "end_char": 7804
    },
    {
      "content": "drant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
      "index": 4,
      "token_count": 498,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 7704,
      "end_char": 9706
    },
    {
      "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)",
      "index": 5,
      "token_count": 536,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 9606,
      "end_char": 11646
    },
    {
      "content": "h/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)",
      "index": 6,
      "token_count": 542,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 11546,
      "end_char": 13580
    },
    {
      "content": "entation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
      "index": 7,
      "token_count": 554,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 13480,
      "end_char": 15523
    },
    {
      "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.",
      "index": 8,
      "token_count": 504,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 15423,
      "end_char": 17426
    },
    {
      "content": "les/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Examples](https://qdrant.tech/documentation/examples/)\n-\n- Movie Recommendation System\n\n# Movie Recommendation System\n\n| Time: 120 min | Level: Advanced | Output: [GitHub](https://github.com/infoslack/qdrant-example/blob/main/HC-demo/HC-OVH.ipynb) |   |\n| ------------- | --------------- | -------------------------------------------------------------------------------------------- | - |\n\nIn this tutorial, you will build a mechanism that recommends movies based on defined preferences. Vector databases like Qdrant are good for storing high-dimensional data, such as user and item embeddings. They can enable personalized recommendations by quickly retrieving similar entries based on advanced indexing techniques. In this specific case, we will use [sparse vectors](https://qdrant.tech/articles/sparse-vectors/) to create an efficient and accurate recommendation system.\n\n**Privacy and Sovereignty:** Since preference data is proprietary, it should be stored in a secure and controlled environment. Our vector database can easily be hosted on [OVHcloud](https://ovhcloud.com/), our trusted [Qdrant Hybrid Cloud](https://qdrant.tech/documentation/hybrid-cloud/) partner.",
      "index": 9,
      "token_count": 421,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 17326,
      "end_char": 19283
    },
    {
      "content": "d.com/), our trusted [Qdrant Hybrid Cloud](https://qdrant.tech/documentation/hybrid-cloud/) partner. This means that Qdrant can be run from your OVHcloud region, but the database itself can still be managed from within Qdrant Cloud’s interface. Both products have been tested for compatibility and scalability, and we recommend their [managed Kubernetes](https://www.ovhcloud.com/en/public-cloud/kubernetes/) service.\n\n> To see the entire output, use our [notebook with complete instructions](https://github.com/infoslack/qdrant-example/blob/main/HC-demo/HC-OVH.ipynb).\n\n## Components\n\n- **Dataset:** The [MovieLens dataset](https://grouplens.org/datasets/movielens/) contains a list of movies and ratings given by users.\n- **Cloud:** [OVHcloud](https://ovhcloud.com/), with managed Kubernetes.\n- **Vector DB:** [Qdrant Hybrid Cloud](https://hybrid-cloud.qdrant.tech) running on [OVHcloud](https://ovhcloud.com/).\n\n**Methodology:** We’re adopting a collaborative filtering approach to construct a recommendation system from the dataset provided. Collaborative filtering works on the premise that if two users share similar tastes, they’re likely to enjoy similar movies. Leveraging this concept, we’ll identify users whose ratings align closely with ours, and explore the movies they liked but we haven’t seen yet. To do this, we’ll represent each user’s ratings as a vector in a high-dimensional, sparse space. Using Qdrant, we’ll index these vectors and search for users whose ratings vectors closely match ours. Ultimately, we will see which movies were enjoyed by users similar to us.\n\n## Deploying Qdrant Hybrid Cloud on OVHcloud\n\n[Service Managed Kubernetes](https://www.ovhcloud.com/en-in/public-cloud/kubernetes/), powered by OVH Public Cloud Instances, a leading European cloud provider. With OVHcloud Load Balancers and disks built in. OVHcloud Managed Kubernetes provides high availability, compliance, and CNCF conformance, allowing you to focus on your containerized software layers with total reversibility.\n\n1.",
      "index": 10,
      "token_count": 452,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 19183,
      "end_char": 21208
    },
    {
      "content": "nformance, allowing you to focus on your containerized software layers with total reversibility.\n\n1. To start using managed Kubernetes on OVHcloud, follow the [platform-specific documentation](https://qdrant.tech/documentation/hybrid-cloud/platform-deployment-options/#ovhcloud).\n2. Once your Kubernetes clusters are up, [you can begin deploying Qdrant Hybrid Cloud](https://qdrant.tech/documentation/hybrid-cloud/).\n\n## Prerequisites\n\nDownload and unzip the MovieLens dataset:\n\n```shell\nmkdir -p data\nwget https://files.grouplens.org/datasets/movielens/ml-1m.zip\nunzip ml-1m.zip -d data\n```\n\nThe necessary \\* libraries are installed using `pip`, including `pandas` for data manipulation, `qdrant-client` for interfacing with Qdrant, and `*-dotenv` for managing environment variables.\n\n```python\n!pip install -U  \\\n    pandas  \\\n    qdrant-client \\\n    *-dotenv\n```\n\nThe `.env` file is used to store sensitive information like the Qdrant host URL and API key securely.\n\n```shell\nQDRANT_HOST\nQDRANT_API_KEY\n```\n\nLoad all environment variables into the setup:\n\n```python\nimport os\nfrom dotenv import load_dotenv\nload_dotenv('./.env')\n```\n\n## Implementation\n\nLoad the data from the MovieLens dataset into pandas DataFrames to facilitate data manipulation and analysis.\n\n```python\nfrom qdrant_client import QdrantClient, models\nimport pandas as pd\n```\n\nLoad user data:\n\n```python\nusers = pd.read_csv(\n    'data/ml-1m/users.dat', \n    sep='::', \n    names=['user_id', 'gender', 'age', 'occupation', 'zip'],\n    engine='*'\n)\nusers.head()\n```\n\nAdd movies:\n\n```python\nmovies = pd.read_csv(\n    'data/ml-1m/movies.dat',\n    sep='::', \n    names=['movie_id', 'title', 'genres'], \n    engine='*', \n    encoding='latin-1'\n)\nmovies.head()\n```\n\nFinally, add the ratings:\n\n```python\nratings = pd.read_csv( \n    'data/ml-1m/ratings.dat', \n    sep='::', \n    names=['user_id', 'movie_id', 'rating', 'timestamp'], \n    engine='*'\n)\nratings.head()\n```\n\n### Normalize the ratings",
      "index": 11,
      "token_count": 513,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 21108,
      "end_char": 23069
    },
    {
      "content": "movie_id', 'rating', 'timestamp'], \n    engine='*'\n)\nratings.head()\n```\n\n### Normalize the ratings\n\nSparse vectors can use advantage of negative values, so we can normalize ratings to have a mean of 0 and a standard deviation of 1. This normalization ensures that ratings are consistent and centered around zero, enabling accurate similarity calculations. In this scenario we can take into account movies that we don’t like.\n\n```python\nratings.rating = (ratings.rating - ratings.rating.mean()) / ratings.rating.std()\n```\n\nTo get the results:\n\n```python\nratings.head()\n```\n\n### Data preparation\n\nNow you will transform user ratings into sparse vectors, where each vector represents ratings for different movies. This step prepares the data for indexing in Qdrant.\n\nFirst, create a collection with configured sparse vectors. For sparse vectors, you don’t need to specify the dimension, because it’s extracted from the data automatically.\n\n```python\nfrom collections import defaultdict\n\nuser_sparse_vectors = defaultdict(lambda: {\"values\": [], \"indices\": []})\n\nfor row in ratings.itertuples():\n    user_sparse_vectors[row.user_id][\"values\"].append(row.rating)\n    user_sparse_vectors[row.user_id][\"indices\"].append(row.movie_id)\n```\n\nConnect to Qdrant and create a collection called **movielens**:\n\n```python\nclient = QdrantClient(\n    url = os.getenv(\"QDRANT_HOST\"),\n    api_key = os.getenv(\"QDRANT_API_KEY\")\n)\n\nclient.create_collection(\n    \"movielens\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"ratings\": models.SparseVectorParams()\n    }\n)\n```\n\nUpload user ratings to the **movielens** collection in Qdrant as sparse vectors, along with user metadata. This step populates the database with the necessary data for recommendation generation.\n\n```python\ndef data_generator():\n    for user in users.itertuples():\n        yield models.PointStruct(\n            id=user.user_id,\n            vector={\n                \"ratings\": user_sparse_vectors[user.user_id]\n            },\n            payload=user._asdict()\n        )\n\nclient.",
      "index": 12,
      "token_count": 430,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 22969,
      "end_char": 25010
    },
    {
      "content": "er_sparse_vectors[user.user_id]\n            },\n            payload=user._asdict()\n        )\n\nclient.upload_points(\n    \"movielens\",\n    data_generator()\n)\n```\n\n## Recommendations\n\nPersonal movie ratings are specified, where positive ratings indicate likes and negative ratings indicate dislikes. These ratings serve as the basis for finding similar users with comparable tastes.\n\nPersonal ratings are converted into a sparse vector representation suitable for querying Qdrant. This vector represents the user’s preferences across different movies.\n\nLet’s try to recommend something for ourselves:\n\n```\n1 = Like\n-1 = dislike\n```\n\n```python\n# Search with movies[movies.title.str.contains(\"Matrix\", case=False)].\n\nmy_ratings = { \n    2571: 1,  # Matrix\n    329: 1,   # Star Trek\n    260: 1,   # Star Wars\n    2288: -1, # The Thing\n    1: 1,     # Toy Story\n    1721: -1, # Titanic\n    296: -1,  # Pulp Fiction\n    356: 1,   # Forrest Gump\n    2116: 1,  # Lord of the Rings\n    1291: -1, # Indiana Jones\n    1036: -1  # Die Hard\n}\n\ninverse_ratings = {k: -v for k, v in my_ratings.items()}\n\ndef to_vector(ratings):\n    vector = models.SparseVector(\n        values=[],\n        indices=[]\n    )\n    for movie_id, rating in ratings.items():\n        vector.values.append(rating)\n        vector.indices.append(movie_id)\n    return vector\n```\n\nQuery Qdrant to find users with similar tastes based on the provided personal ratings. The search returns a list of similar users along with their ratings, facilitating collaborative filtering.\n\n```python\nresults = client.query_points(\n    \"movielens\",\n    query=to_vector(my_ratings),\n    using=\"ratings\",\n    with_vectors=True, # We will use those to find new movies\n    limit=20\n).points\n```\n\nMovie scores are computed based on how frequently each movie appears in the ratings of similar users, weighted by their ratings. This step identifies popular movies among users with similar tastes. Calculate how frequently each movie is found in similar users’ ratings\n\n```python\ndef results_to_scores(results):",
      "index": 13,
      "token_count": 514,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 24910,
      "end_char": 26951
    },
    {
      "content": "frequently each movie is found in similar users’ ratings\n\n```python\ndef results_to_scores(results):\n    movie_scores = defaultdict(lambda: 0)\n\n    for user in results:\n        user_scores = user.vector['ratings']\n        for idx, rating in zip(user_scores.indices, user_scores.values):\n            if idx in my_ratings:\n                continue\n            movie_scores[idx] += rating\n\n    return movie_scores\n```\n\nThe top-rated movies are sorted based on their scores and printed as recommendations for the user. These recommendations are tailored to the user’s preferences and aligned with their tastes. Sort movies by score and print top five:\n\n```python\nmovie_scores = results_to_scores(results)\ntop_movies = sorted(movie_scores.items(), key=lambda x: x[1], reverse=True)\n\nfor movie_id, score in top_movies[:5]:\n    print(movies[movies.movie_id == movie_id].title.values[0], score)\n```\n\nResult:\n\n```text\nStar Wars: Episode V - The Empire Strikes Back (1980) 20.02387858\nStar Wars: Episode VI - Return of the Jedi (1983) 16.443184379999998\nPrincess Bride, The (1987) 15.840068229999996\nRaiders of the Lost Ark (1981) 14.94489462\nSixth Sense, The (1999) 14.570322149999999\n```\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Movie Recommendation System](#movie-recommendation-system.md)\n\n  - [Components](#components.md)\n\n  - [Deploying Qdrant Hybrid Cloud on OVHcloud](#deploying-qdrant-hybrid-cloud-on-ovhcloud.md)\n\n  - [Prerequisites](#prerequisites.md)\n\n  - [Implementation](#implementation.md)\n\n    - [Normalize the ratings](#normalize-the-ratings.md)\n    - [Data preparation](#data-preparation.md)\n\n  - [Recommendations](#recommendations.md)\n\n* [Edit on Github](https://github.",
      "index": 14,
      "token_count": 566,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 26851,
      "end_char": 28859
    },
    {
      "content": "data-preparation.md)\n\n  - [Recommendations](#recommendations.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/examples/recommendation-system-ovhcloud.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
      "index": 15,
      "token_count": 152,
      "metadata": {
        "title": "_documentation_examples_recommendation-system-ovhcloud_",
        "source": "qdrant_documentation\\documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_examples_recommendation-system-ovhcloud",
        "category": "examples",
        "file_path": "documentation_examples_recommendation-system-ovhcloud\\_documentation_examples_recommendation-system-ovhcloud_.md",
        "file_name": "_documentation_examples_recommendation-system-ovhcloud_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:31.376132",
        "total_chunks": 16
      },
      "start_char": 28759,
      "end_char": 30807
    }
  ]
}