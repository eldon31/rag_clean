{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
  "source_repo": "qdrant_documentation",
  "total_chunks": 39,
  "chunks": [
    {
      "content": "Search - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.",
      "index": 0,
      "token_count": 526,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 0,
      "end_char": 2017
    },
    {
      "content": "[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.",
      "index": 1,
      "token_count": 507,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 1917,
      "end_char": 3921
    },
    {
      "content": "ocumentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)",
      "index": 2,
      "token_count": 472,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 3821,
      "end_char": 5836
    },
    {
      "content": "fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)",
      "index": 3,
      "token_count": 514,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 5736,
      "end_char": 7784
    },
    {
      "content": "n/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.",
      "index": 4,
      "token_count": 501,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 7684,
      "end_char": 9681
    },
    {
      "content": "nced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Concepts](https://qdrant.tech/documentation/concepts/)\n-\n- Search\n\n# Similarity search\n\nSearching for the nearest vectors is at the core of many representational learning applications.",
      "index": 5,
      "token_count": 463,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 9581,
      "end_char": 11556
    },
    {
      "content": "ch\n\nSearching for the nearest vectors is at the core of many representational learning applications. Modern neural networks are trained to transform objects into vectors so that objects close in the real world appear close in vector space. It could be, for example, texts with similar meanings, visually similar pictures, or songs of the same genre.\n\nThis is how vector similarity works\n\n## Query API\n\n*Available as of v1.10.0*\n\nQdrant provides a single interface for all kinds of search and exploration requests - the `Query API`. Here is a reference list of what kind of queries you can perform with the `Query API` in Qdrant:\n\nDepending on the `query` parameter, Qdrant might prefer different strategies for the search.\n\n|                                                                                                      |                                                                     |\n| ---------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- |\n| Nearest Neighbors Search                                                                             | Vector Similarity Search, also known as k-NN                        |\n| Search By Id                                                                                         | Search by an already stored vector - skip embedding model inference |\n| [Recommendations](https://qdrant.tech/documentation/concepts/explore/#recommendation-api)            | Provide positive and negative examples                              |\n| [Discovery Search](https://qdrant.tech/documentation/concepts/explore/#discovery-api)                | Guide the search using context as a one-shot training set           |\n| [Scroll](https://qdrant.tech/documentation/concepts/points/#scroll-points)                           | Get all points with optional filtering                              |\n| [Grouping](https://qdrant.",
      "index": 6,
      "token_count": 311,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 11456,
      "end_char": 13433
    },
    {
      "content": "| Get all points with optional filtering                              |\n| [Grouping](https://qdrant.tech/documentation/concepts/search/#grouping-api)                          | Group results by a certain field                                    |\n| [Order By](https://qdrant.tech/documentation/concepts/hybrid-queries/#re-ranking-with-stored-values) | Order points by payload key                                         |\n| [Hybrid Search](https://qdrant.tech/documentation/concepts/hybrid-queries/#hybrid-search)            | Combine multiple queries to get better results                      |\n| [Multi-Stage Search](https://qdrant.tech/documentation/concepts/hybrid-queries/#multi-stage-queries) | Optimize performance for large embeddings                           |\n| [Random Sampling](#random-sampling.md)                                                               | Get random points from the collection                               |\n\n**Nearest Neighbors Search**\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7] // <--- Dense vector\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7], # <--- Dense vector\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7], // <--- Dense vector\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Condition, Filter, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_nearest(vec![0.2, 0.1, 0.9, 0.7]))\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;",
      "index": 7,
      "token_count": 506,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 13333,
      "end_char": 15355
    },
    {
      "content": "Client;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n  .setCollectionName(\"{collectionName}\")\n  .setQuery(nearest(List.of(0.2f, 0.1f, 0.9f, 0.7f)))\n  .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n collectionName: \"{collection_name}\",\n query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n})\n```\n\n**Search By Id**\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\" // <--- point id\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", # <--- point id\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Condition, Filter, PointId, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_nearest(PointId::new(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n    )\n    .await?;\n```\n\n```java\nimport java.util.UUID;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;",
      "index": 8,
      "token_count": 683,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 15255,
      "end_char": 17272
    },
    {
      "content": "Client;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n  .setCollectionName(\"{collectionName}\")\n  .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n  .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")),\n})\n```\n\n## Metrics\n\nThere are many ways to estimate the similarity of vectors with each other. In Qdrant terms, these ways are called metrics. The choice of metric depends on the vectors obtained and, in particular, on the neural network encoder training method.\n\nQdrant supports these most popular types of metrics:\n\n- Dot product: `Dot` - <https://en.wikipedia.org/wiki/Dot_product>\n- Cosine similarity: `Cosine` - <https://en.wikipedia.org/wiki/Cosine_similarity>\n- Euclidean distance: `Euclid` - <https://en.wikipedia.org/wiki/Euclidean_distance>\n- Manhattan distance: `Manhattan`\\*- <https://en.wikipedia.org/wiki/Taxicab_geometry> *\\*Available as of v1.7*\n\nThe most typical metric used in similarity learning models is the cosine metric.\n\nQdrant counts this metric in 2 steps, due to which a higher search speed is achieved. The first step is to normalize the vector when adding it to the collection. It happens only once for each vector.\n\nThe second step is the comparison of vectors. In this case, it becomes equivalent to dot production - a very fast operation due to SIMD.",
      "index": 9,
      "token_count": 565,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 17172,
      "end_char": 19202
    },
    {
      "content": "ectors. In this case, it becomes equivalent to dot production - a very fast operation due to SIMD.\n\nDepending on the query configuration, Qdrant might prefer different strategies for the search. Read more about it in the [query planning](#query-planning.md) section.\n\n## Search API\n\nLet’s look at an example of a search query.\n\nREST API - API Schema definition is available [here](https://api.qdrant.tech/api-reference/search/query-points)\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.79],\n    \"filter\": {\n        \"must\": [\n            {\n                \"key\": \"city\",\n                \"match\": {\n                    \"value\": \"London\"\n                }\n            }\n        ]\n    },\n    \"params\": {\n        \"hnsw_ef\": 128,\n        \"exact\": false\n    },\n    \"limit\": 3\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(\n                    value=\"London\",\n                ),\n            )\n        ]\n    ),\n    search_params=models.SearchParams(hnsw_ef=128, exact=False),\n    limit=3,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    filter: {\n        must: [\n            {\n                key: \"city\",\n                match: {\n                    value: \"London\",\n                },\n            },\n        ],\n    },\n    params: {\n        hnsw_ef: 128,\n        exact: false,\n    },\n    limit: 3,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, QueryPointsBuilder, SearchParamsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .",
      "index": 10,
      "token_count": 525,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 19102,
      "end_char": 21142
    },
    {
      "content": "ient::Qdrant;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )]))\n            .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false)),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n        .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build())\n        .setParams(SearchParams.newBuilder().setExact(false).setHnswEf(128).build())\n        .setLimit(3)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    filter: MatchKeyword(\"city\", \"London\"),\n    searchParams: new SearchParams { Exact = false, HnswEf = 128 },\n    limit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tFilter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t},\n\t},",
      "index": 11,
      "token_count": 594,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 21042,
      "end_char": 23083
    },
    {
      "content": "Filter: &qdrant.Filter{\n\t\tMust: []*qdrant.Condition{\n\t\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t\t},\n\t},\n\tParams: &qdrant.SearchParams{\n\t\tExact:  qdrant.PtrOf(false),\n\t\tHnswEf: qdrant.PtrOf(uint64(128)),\n\t},\n})\n```\n\nIn this example, we are looking for vectors similar to vector `[0.2, 0.1, 0.9, 0.7]`. Parameter `limit` (or its alias - `top`) specifies the amount of most similar results we would like to retrieve.\n\nValues under the key `params` specify custom parameters for the search. Currently, it could be:\n\n- `hnsw_ef` - value that specifies `ef` parameter of the HNSW algorithm.\n- `exact` - option to not use the approximate search (ANN). If set to true, the search may run for a long as it performs a full scan to retrieve exact results.\n- `indexed_only` - With this option you can disable the search in those segments where vector index is not built yet. This may be useful if you want to minimize the impact to the search performance whilst the collection is also being updated. Using this option may lead to a partial result if the collection is not fully indexed yet, consider using it only if eventual consistency is acceptable for your use case.\n\nSince the `filter` parameter is specified, the search is performed only among those points that satisfy the filter condition. See details of possible filters and their work in the [filtering](https://qdrant.tech/documentation/concepts/filtering/) section.\n\nExample result of this API would be\n\n```json\n{\n  \"result\": [\n    { \"id\": 10, \"score\": 0.81 },\n    { \"id\": 14, \"score\": 0.75 },\n    { \"id\": 11, \"score\": 0.73 }\n  ],\n  \"status\": \"ok\",\n  \"time\": 0.001\n}\n```\n\nThe `result` contains ordered by `score` list of found point ids.\n\nNote that payload and vector data is missing in these results by default. See [payload and vector in the result](#payload-and-vector-in-the-result.md) on how to include it.\n\nIf the collection was created with multiple vectors, the name of the vector to use for searching should be provided:\n\n```http\nPOST /collections/{collection_name}/points/query\n{",
      "index": 12,
      "token_count": 533,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 22983,
      "end_char": 25019
    },
    {
      "content": "o use for searching should be provided:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"using\": \"image\",\n    \"limit\": 3\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    using=\"image\",\n    limit=3,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  using: \"image\",\n  limit: 3,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .using(\"image\"),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n        .setUsing(\"image\")\n        .setLimit(3)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tusingVector: \"image\",\n\tlimit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",",
      "index": 13,
      "token_count": 644,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 24919,
      "end_char": 26945
    },
    {
      "content": ",\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tUsing:          qdrant.PtrOf(\"image\"),\n})\n```\n\nSearch is processing only among vectors with the same name.\n\nIf the collection was created with sparse vectors, the name of the sparse vector to use for searching should be provided:\n\nYou can still use payload filtering and other features of the search API with sparse vectors.\n\nThere are however important differences between dense and sparse vector search:\n\n| Index            | Sparse Query                                                                      | Dense Query                                       |\n| ---------------- | --------------------------------------------------------------------------------- | ------------------------------------------------- |\n| Scoring Metric   | Default is `Dot product`, no need to specify it                                   | `Distance` has supported metrics e.g. Dot, Cosine |\n| Search Type      | Always exact in Qdrant                                                            | HNSW is an approximate NN                         |\n| Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors                           |\n\nIn general, the speed of the search is proportional to the number of non-zero values in the query vector.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": {\n        \"indices\": [1, 3, 5, 7],\n        \"values\": [0.1, 0.2, 0.3, 0.4]\n    },\n    \"using\": \"text\"\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\n\nresult = client.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.SparseVector(indices=[1, 3, 5, 7], values=[0.1, 0.2, 0.3, 0.4]),\n    using=\"text\",\n).points\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";",
      "index": 14,
      "token_count": 438,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 26845,
      "end_char": 28846
    },
    {
      "content": "using=\"text\",\n).points\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        indices: [1, 3, 5, 7],\n        values: [0.1, 0.2, 0.3, 0.4]\n    },\n    using: \"text\",\n    limit: 3,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![(1, 0.2), (3, 0.1), (5, 0.9), (7, 0.7)])\n            .limit(10)\n            .using(\"text\"),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setUsing(\"text\")\n                .setQuery(nearest(List.of(0.1f, 0.2f, 0.3f, 0.4f), List.of(1, 3, 5, 7)))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: new (float, uint)[] {(0.1f, 1), (0.2f, 3), (0.3f, 5), (0.4f, 7)},\n  usingVector: \"text\",\n  limit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery: qdrant.NewQuerySparse(\n\t\t[]uint32{1, 3, 5, 7},\n\t\t[]float32{0.1, 0.2, 0.3, 0.4}),\n\tUsing: qdrant.PtrOf(\"text\"),\n})\n```\n\n### Filtering results by score",
      "index": 15,
      "token_count": 659,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 28746,
      "end_char": 30741
    },
    {
      "content": "float32{0.1, 0.2, 0.3, 0.4}),\n\tUsing: qdrant.PtrOf(\"text\"),\n})\n```\n\n### Filtering results by score\n\nIn addition to payload filtering, it might be useful to filter out results with a low similarity score. For example, if you know the minimal acceptance score for your model and do not want any results which are less similar than the threshold. In this case, you can use `score_threshold` parameter of the search query. It will exclude all results with a score worse than the given.\n\nThis parameter may exclude lower or higher scores depending on the used metric. For example, higher scores of Euclidean metric are considered more distant and, therefore, will be excluded.\n\n### Payload and vector in the result\n\nBy default, retrieval methods do not return any stored information such as payload and vectors. Additional parameters `with_vectors` and `with_payload` alter this behavior.\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_vectors\": true,\n    \"with_payload\": true\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_vectors=True,\n    with_payload=True,\n)\n```\n\n```typescript\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_vector: true,\n  with_payload: true,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .with_payload(true)\n            .with_vectors(true),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.WithVectorsSelectorFactory;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\n\nQdrantClient client =",
      "index": 16,
      "token_count": 544,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 30641,
      "end_char": 32688
    },
    {
      "content": ".nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(enable(true))\n                .setWithVectors(WithVectorsSelectorFactory.enable(true))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tpayloadSelector: true,\n\tvectorsSelector: true,\n\tlimit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tWithPayload:    qdrant.NewWithPayload(true),\n\tWithVectors:    qdrant.NewWithVectors(true),\n})\n```\n\nYou can use `with_payload` to scope to or filter a specific payload subset. You can even specify an array of items to include, such as `city`, `village`, and `town`:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_payload\": [\"city\", \"village\", \"town\"]\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_payload=[\"city\", \"village\", \"town\"],\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_payload: [\"city\", \"village\", \"town\"],\n});\n```\n\n```rust",
      "index": 17,
      "token_count": 619,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 32588,
      "end_char": 34630
    },
    {
      "content": "e}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_payload: [\"city\", \"village\", \"town\"],\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{with_payload_selector::SelectorOptions, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .with_payload(SelectorOptions::Include(\n                vec![\n                    \"city\".to_string(),\n                    \"village\".to_string(),\n                    \"town\".to_string(),\n                ]\n                .into(),\n            ))\n            .with_vectors(true),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.include;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(include(List.of(\"city\", \"village\", \"town\")))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    payloadSelector: new WithPayloadSelector\n    {\n        Include = new PayloadIncludeSelector\n        {\n            Fields = { new string[] { \"city\", \"village\", \"town\" } }\n        }\n    },\n    limit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{",
      "index": 18,
      "token_count": 558,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 34530,
      "end_char": 36556
    },
    {
      "content": "onfig{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tWithPayload:    qdrant.NewWithPayloadInclude(\"city\", \"village\", \"town\"),\n})\n```\n\nOr use `include` or `exclude` explicitly. For example, to exclude `city`:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_payload\": {\n      \"exclude\": [\"city\"]\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_payload=models.PayloadSelectorExclude(\n        exclude=[\"city\"],\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_payload: {\n    exclude: [\"city\"],\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{with_payload_selector::SelectorOptions, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .with_payload(SelectorOptions::Exclude(vec![\"city\".to_string()].into()))\n            .with_vectors(true),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.exclude;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .",
      "index": 19,
      "token_count": 592,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 36456,
      "end_char": 38501
    },
    {
      "content": "QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(exclude(List.of(\"city\")))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tpayloadSelector: new WithPayloadSelector\n\t{\n\t\tExclude = new PayloadExcludeSelector { Fields = { new string[] { \"city\" } } }\n\t},\n\tlimit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tWithPayload:    qdrant.NewWithPayloadExclude(\"city\"),\n})\n```\n\nIt is possible to target nested fields using a dot notation:\n\n- `payload.nested_field` - for a nested field\n- `payload.nested_array[].sub_field` - for projecting nested fields within an array\n\nAccessing array elements by index is currently not supported.\n\n## Batch search API\n\nThe batch search API enables to perform multiple search requests via a single request.\n\nIts semantic is straightforward, `n` batched search requests are equivalent to `n` singular search requests.\n\nThis approach has several advantages. Logically, fewer network connections are required which can be very beneficial on its own.\n\nMore importantly, batched requests will be efficiently processed via the query planner which can detect and optimize requests if they have the same `filter`.\n\nThis can have a great effect on latency for non trivial filters as the intermediary results can be shared among the request.\n\nIn order to use it, simply pack together your search requests. All the regular attributes of a search request are of course available.\n\n```http",
      "index": 20,
      "token_count": 509,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 38401,
      "end_char": 40442
    },
    {
      "content": "r search requests. All the regular attributes of a search request are of course available.\n\n```http\nPOST /collections/{collection_name}/points/query/batch\n{\n    \"searches\": [\n        {\n            \"query\": [0.2, 0.1, 0.9, 0.7],\n            \"filter\": {\n                \"must\": [\n                    {\n                        \"key\": \"city\",\n                        \"match\": {\n                            \"value\": \"London\"\n                        }\n                    }\n                ]\n            },\n            \"limit\": 3\n        },\n        {\n            \"query\": [0.5, 0.3, 0.2, 0.3],\n            \"filter\": {\n                \"must\": [\n                    {\n                        \"key\": \"city\",\n                        \"match\": {\n                            \"value\": \"London\"\n                        }\n                    }\n                ]\n            },\n            \"limit\": 3\n        }\n    ]\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nfilter_ = models.Filter(\n    must=[\n        models.FieldCondition(\n            key=\"city\",\n            match=models.MatchValue(\n                value=\"London\",\n            ),\n        )\n    ]\n)\n\nsearch_queries = [\n    models.QueryRequest(query=[0.2, 0.1, 0.9, 0.7], filter=filter_, limit=3),\n    models.QueryRequest(query=[0.5, 0.3, 0.2, 0.3], filter=filter_, limit=3),\n]\n\nclient.query_batch_points(collection_name=\"{collection_name}\", requests=search_queries)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst filter = {\n    must: [\n        {\n            key: \"city\",\n            match: {\n                value: \"London\",\n            },\n        },\n    ],\n};\n\nconst searches = [\n    {\n        query: [0.2, 0.1, 0.9, 0.7],\n        filter,\n        limit: 3,\n    },\n    {\n        query: [0.5, 0.3, 0.2, 0.3],\n        filter,\n        limit: 3,\n    },\n];\n\nclient.queryBatch(\"{collection_name}\", {\n    searches,\n});\n```\n\n```rust",
      "index": 21,
      "token_count": 517,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 40342,
      "end_char": 42381
    },
    {
      "content": "limit: 3,\n    },\n];\n\nclient.queryBatch(\"{collection_name}\", {\n    searches,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, QueryBatchPointsBuilder, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet filter = Filter::must([Condition::matches(\"city\", \"London\".to_string())]);\n\nlet searches = vec![\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(vec![0.1, 0.2, 0.3, 0.4])\n        .limit(3)\n        .filter(filter.clone())\n        .build(),\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(vec![0.5, 0.3, 0.2, 0.3])\n        .limit(3)\n        .filter(filter)\n        .build(),\n];\n\nclient\n        .query_batch(QueryBatchPointsBuilder::new(\"{collection_name}\", searches))\n        .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nFilter filter = Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build();\n\nList<QueryPoints> searches = List.of(\n        QueryPoints.newBuilder()\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setFilter(filter)\n                .setLimit(3)\n                .build(),\n        QueryPoints.newBuilder()\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setFilter(filter)\n                .setLimit(3)\n                .build());\n\nclient.queryBatchAsync(\"{collection_name}\", searches).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nvar filter = MatchKeyword(\"city\", \"London\");\n\nvar queries = new List<QueryPoints>\n{\n    new()",
      "index": 22,
      "token_count": 553,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 42281,
      "end_char": 44325
    },
    {
      "content": "34);\n\nvar filter = MatchKeyword(\"city\", \"London\");\n\nvar queries = new List<QueryPoints>\n{\n    new()\n    {\n        CollectionName = \"{collection_name}\",\n        Query = new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n        Filter = filter,\n        Limit = 3\n    },\n    new()\n    {\n        CollectionName = \"{collection_name}\",\n        Query = new float[] { 0.5f, 0.3f, 0.2f, 0.3f },\n        Filter = filter,\n        Limit = 3\n    }\n};\n\nawait client.QueryBatchAsync(collectionName: \"{collection_name}\", queries: queries);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nfilter := qdrant.Filter{\n\tMust: []*qdrant.Condition{\n\t\tqdrant.NewMatch(\"city\", \"London\"),\n\t},\n}\n\nclient.QueryBatch(context.Background(), &qdrant.QueryBatchPoints{\n\tCollectionName: \"{collection_name}\",\n\tQueryPoints: []*qdrant.QueryPoints{\n\t\t{\n\t\t\tCollectionName: \"{collection_name}\",\n\t\t\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\t\t\tFilter:         &filter,\n\t\t},\n\t\t{\n\t\t\tCollectionName: \"{collection_name}\",\n\t\t\tQuery:          qdrant.NewQuery(0.5, 0.3, 0.2, 0.3),\n\t\t\tFilter:         &filter,\n\t\t},\n\t},\n})\n```\n\nThe result of this API contains one array per search requests.\n\n```json\n{\n  \"result\": [\n    [\n        { \"id\": 10, \"score\": 0.81 },\n        { \"id\": 14, \"score\": 0.75 },\n        { \"id\": 11, \"score\": 0.73 }\n    ],\n    [\n        { \"id\": 1, \"score\": 0.92 },\n        { \"id\": 3, \"score\": 0.89 },\n        { \"id\": 9, \"score\": 0.75 }\n    ]\n  ],\n  \"status\": \"ok\",\n  \"time\": 0.001\n}\n```\n\n## Query by ID\n\nWhenever you need to use a vector as an input, you can always use a [point ID](https://qdrant.tech/documentation/concepts/points/#point-ids) instead.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\" // <--- point id\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", # <--- point id\n)\n```\n\n```typescript",
      "index": 23,
      "token_count": 698,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 44225,
      "end_char": 46250
    },
    {
      "content": "tion_name}\",\n    query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", # <--- point id\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Condition, Filter, PointId, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_nearest(PointId::new(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n    )\n    .await?;\n```\n\n```java\nimport java.util.UUID;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n  .setCollectionName(\"{collectionName}\")\n  .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n  .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")),\n})\n```\n\nThe above example will fetch the default vector from the point with this id, and use it as the query vector.\n\nIf the `using` parameter is also specified, Qdrant will use the vector with that name.",
      "index": 24,
      "token_count": 662,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 46150,
      "end_char": 48131
    },
    {
      "content": "ry vector.\n\nIf the `using` parameter is also specified, Qdrant will use the vector with that name.\n\nIt is also possible to reference an ID from a different collection, by setting the `lookup_from` parameter.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": \"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\", // <--- point id\n    \"using\": \"512d-vector\"\n    \"lookup_from\": {\n        \"collection\": \"another_collection\", // <--- other collection name\n        \"vector\": \"image-512\" // <--- vector name in the other collection\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\",  # <--- point id\n    using=\"512d-vector\",\n    lookup_from=models.LookupLocation(\n        collection=\"another_collection\",  # <--- other collection name\n        vector=\"image-512\",  # <--- vector name in the other collection\n    )\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: '43cf51e2-8777-4f52-bc74-c2cbde0c8b04', // <--- point id\n    using: '512d-vector',\n    lookup_from: {\n        collection: 'another_collection', // <--- other collection name\n        vector: 'image-512', // <--- vector name in the other collection\n    }\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{LookupLocationBuilder, PointId, Query, QueryPointsBuilder};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(Query::new_nearest(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\"))\n        .using(\"512d-vector\")\n        .lookup_from(\n            LookupLocationBuilder::new(\"another_collection\")\n                .vector_name(\"image-512\")\n        )\n).await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.",
      "index": 25,
      "token_count": 623,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 48031,
      "end_char": 50079
    },
    {
      "content": ".await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.LookupLocation;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport java.util.UUID;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setQuery(nearest(UUID.fromString(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")))\n            .setUsing(\"512d-vector\")\n            .setLookupFrom(\n                LookupLocation.newBuilder()\n                    .setCollectionName(\"another_collection\")\n                    .setVectorName(\"image-512\")\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: Guid.Parse(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\"), // <--- point id\n  usingVector: \"512d-vector\",\n  lookupFrom: new() {\n    CollectionName = \"another_collection\", // <--- other collection name\n      VectorName = \"image-512\" // <--- vector name in the other collection\n  }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQueryID(qdrant.NewID(\"43cf51e2-8777-4f52-bc74-c2cbde0c8b04\")),\n\tUsing:          qdrant.PtrOf(\"512d-vector\"),\n\tLookupFrom: &qdrant.LookupLocation{\n\t\tCollectionName: \"another_collection\",\n\t\tVectorName:     qdrant.PtrOf(\"image-512\"),\n\t},\n})\n```\n\nIn the case above, Qdrant will fetch the `\"image-512\"` vector from the specified point id in the collection `another_collection`.",
      "index": 26,
      "token_count": 568,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 49979,
      "end_char": 51937
    },
    {
      "content": "fetch the `\"image-512\"` vector from the specified point id in the collection `another_collection`.\n\nThe fetched vector(s) must match the characteristics of the `using` vector, otherwise, an error will be returned.\n\n## Pagination\n\nSearch and [recommendation](https://qdrant.tech/documentation/concepts/explore/#recommendation-api) APIs allow to skip first results of the search and return only the result starting from some specified offset:\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"with_vectors\": true,\n    \"with_payload\": true,\n    \"limit\": 10,\n    \"offset\": 100\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    with_vectors=True,\n    with_payload=True,\n    limit=10,\n    offset=100,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  with_vector: true,\n  with_payload: true,\n  limit: 10,\n  offset: 100,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .with_payload(true)\n            .with_vectors(true)\n            .limit(10)\n            .offset(100),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.WithVectorsSelectorFactory;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());",
      "index": 27,
      "token_count": 591,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 51837,
      "end_char": 53886
    },
    {
      "content": "lient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setWithPayload(enable(true))\n                .setWithVectors(WithVectorsSelectorFactory.enable(true))\n                .setLimit(10)\n                .setOffset(100)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    payloadSelector: true,\n    vectorsSelector: true,\n    limit: 10,\n    offset: 100\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tWithPayload:    qdrant.NewWithPayload(true),\n\tWithVectors:    qdrant.NewWithVectors(true),\n\tOffset:         qdrant.PtrOf(uint64(100)),\n})\n```\n\nIs equivalent to retrieving the 11th page with 10 records per page.\n\nLarge offset values may cause performance issues\n\nVector-based retrieval in general and HNSW index in particular, are not designed to be paginated. It is impossible to retrieve Nth closest vector without retrieving the first N vectors first.\n\nHowever, using the offset parameter saves the resources by reducing network traffic and the number of times the storage is accessed.\n\nUsing an `offset` parameter, will require to internally retrieve `offset + limit` points, but only access payload and vector from the storage those points which are going to be actually returned.\n\n## Grouping API\n\nIt is possible to group results by a certain field.",
      "index": 28,
      "token_count": 510,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 53786,
      "end_char": 55731
    },
    {
      "content": "going to be actually returned.\n\n## Grouping API\n\nIt is possible to group results by a certain field. This is useful when you have multiple points for the same item, and you want to avoid redundancy of the same item in the results.\n\nFor example, if you have a large document split into multiple chunks, and you want to search or [recommend](https://qdrant.tech/documentation/concepts/explore/#recommendation-api) on a per-document basis, you can group the results by the document ID.\n\nConsider having points with the following payloads:\n\n```json\n[\n    {\n        \"id\": 0,\n        \"payload\": {\n            \"chunk_part\": 0, \n            \"document_id\": \"a\"\n        },\n        \"vector\": [0.91]\n    },\n    {\n        \"id\": 1,\n        \"payload\": {\n            \"chunk_part\": 1, \n            \"document_id\": [\"a\", \"b\"]\n        },\n        \"vector\": [0.8]\n    },\n    {\n        \"id\": 2,\n        \"payload\": {\n            \"chunk_part\": 2, \n            \"document_id\": \"a\"\n        },\n        \"vector\": [0.2]\n    },\n    {\n        \"id\": 3,\n        \"payload\": {\n            \"chunk_part\": 0, \n            \"document_id\": 123\n        },\n        \"vector\": [0.79]\n    },\n    {\n        \"id\": 4,\n        \"payload\": {\n            \"chunk_part\": 1, \n            \"document_id\": 123\n        },\n        \"vector\": [0.75]\n    },\n    {\n        \"id\": 5,\n        \"payload\": {\n            \"chunk_part\": 0, \n            \"document_id\": -10\n        },\n        \"vector\": [0.6]\n    }\n]\n```\n\nWith the ***groups*** API, you will be able to get the best *N* points for each document, assuming that the payload of the points contains the document ID. Of course there will be times where the best *N* points cannot be fulfilled due to lack of points or a big distance with respect to the query. In every case, the `group_size` is a best-effort parameter, akin to the `limit` parameter.\n\n### Search groups\n\nREST API ([Schema](https://api.qdrant.tech/api-reference/search/query-points-groups)):\n\n```http\nPOST /collections/{collection_name}/points/query/groups\n{\n    // Same as in the regular query API",
      "index": 29,
      "token_count": 533,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 55631,
      "end_char": 57680
    },
    {
      "content": "p\nPOST /collections/{collection_name}/points/query/groups\n{\n    // Same as in the regular query API\n    \"query\": [1.1],\n    // Grouping parameters\n    \"group_by\": \"document_id\",  // Path of the field to group by\n    \"limit\": 4,                 // Max amount of groups\n    \"group_size\": 2            // Max amount of points per group\n}\n```\n\n```python\nclient.query_points_groups(\n    collection_name=\"{collection_name}\",\n    # Same as in the regular query_points() API\n    query=[1.1],\n    # Grouping parameters\n    group_by=\"document_id\",  # Path of the field to group by\n    limit=4,  # Max amount of groups\n    group_size=2,  # Max amount of points per group\n)\n```\n\n```typescript\nclient.queryGroups(\"{collection_name}\", {\n    query: [1.1],\n    group_by: \"document_id\",\n    limit: 4,\n    group_size: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointGroupsBuilder;\n\nclient\n    .query_groups(\n        QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .group_size(2u64)\n            .with_payload(true)\n            .with_vectors(true)\n            .limit(4u64),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.SearchPointGroups;\n\nclient.queryGroupsAsync(\n        QueryPointGroups.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setGroupBy(\"document_id\")\n                .setLimit(4)\n                .setGroupSize(2)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryGroupsAsync(\n    collectionName: \"{collection_name}\",\n    query: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n    groupBy: \"document_id\",\n    limit: 4,\n    groupSize: 2\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.",
      "index": 30,
      "token_count": 579,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 57580,
      "end_char": 59612
    },
    {
      "content": ":= qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tGroupBy:        \"document_id\",\n\tGroupSize:      qdrant.PtrOf(uint64(2)),\n})\n```\n\nThe output of a ***groups*** call looks like this:\n\n```json\n{\n    \"result\": {\n        \"groups\": [\n            {\n                \"id\": \"a\",\n                \"hits\": [\n                    { \"id\": 0, \"score\": 0.91 },\n                    { \"id\": 1, \"score\": 0.85 }\n                ]\n            },\n            {\n                \"id\": \"b\",\n                \"hits\": [\n                    { \"id\": 1, \"score\": 0.85 }\n                ]\n            },\n            {\n                \"id\": 123,\n                \"hits\": [\n                    { \"id\": 3, \"score\": 0.79 },\n                    { \"id\": 4, \"score\": 0.75 }\n                ]\n            },\n            {\n                \"id\": -10,\n                \"hits\": [\n                    { \"id\": 5, \"score\": 0.6 }\n                ]\n            }\n        ]\n    },\n    \"status\": \"ok\",\n    \"time\": 0.001\n}\n```\n\nThe groups are ordered by the score of the top point in the group. Inside each group the points are sorted too.\n\nIf the `group_by` field of a point is an array (e.g. `\"document_id\": [\"a\", \"b\"]`), the point can be included in multiple groups (e.g. `\"document_id\": \"a\"` and `document_id: \"b\"`).\n\nThis feature relies heavily on the \\`group\\_by\\` key provided. To improve performance, make sure to create a dedicated index for it.\n\n**Limitations**:\n\n- Only [keyword](https://qdrant.tech/documentation/concepts/payload/#keyword) and [integer](https://qdrant.tech/documentation/concepts/payload/#integer) payload values are supported for the `group_by` parameter. Payload values with other types will be ignored.\n- At the moment, pagination is not enabled when using **groups**, so the `offset` parameter is not allowed.\n\n### Lookup in groups",
      "index": 31,
      "token_count": 533,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 59512,
      "end_char": 61506
    },
    {
      "content": "not enabled when using **groups**, so the `offset` parameter is not allowed.\n\n### Lookup in groups\n\nHaving multiple points for parts of the same item often introduces redundancy in the stored data. Which may be fine if the information shared by the points is small, but it can become a problem if the payload is large, because it multiplies the storage space needed to store the points by a factor of the amount of points we have per group.\n\nOne way of optimizing storage when using groups is to store the information shared by the points with the same group id in a single point in another collection. Then, when using the [**groups** API](#grouping-api.md), add the `with_lookup` parameter to bring the information from those points into each group.\n\nStore only document-level metadata (e.g., titles, abstracts) in the lookup collection, not chunks or duplicated data.\n\nThis has the extra benefit of having a single point to update when the information shared by the points in a group changes.\n\nFor example, if you have a collection of documents, you may want to chunk them and store the points for the chunks in a separate collection, making sure that you store the point id from the document it belongs in the payload of the chunk point.\n\nIn this case, to bring the information from the documents into the chunks grouped by the document id, you can use the `with_lookup` parameter:\n\n```http\nPOST /collections/chunks/points/query/groups\n{\n    // Same as in the regular query API\n    \"query\": [1.1],\n\n    // Grouping parameters\n    \"group_by\": \"document_id\",\n    \"limit\": 2,\n    \"group_size\": 2,\n\n    // Lookup parameters\n    \"with_lookup\": {\n        // Name of the collection to look up points in\n        \"collection\": \"documents\",\n\n        // Options for specifying what to bring from the payload \n        // of the looked up point, true by default\n        \"with_payload\": [\"title\", \"text\"],\n\n        // Options for specifying what to bring from the vector(s) \n        // of the looked up point, true by default\n        \"with_vectors\": false",
      "index": 32,
      "token_count": 446,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 61406,
      "end_char": 63452
    },
    {
      "content": "rom the vector(s) \n        // of the looked up point, true by default\n        \"with_vectors\": false\n    }\n}\n```\n\n```python\nclient.query_points_groups(\n    collection_name=\"chunks\",\n    # Same as in the regular search() API\n    query=[1.1],\n    # Grouping parameters\n    group_by=\"document_id\",  # Path of the field to group by\n    limit=2,  # Max amount of groups\n    group_size=2,  # Max amount of points per group\n    # Lookup parameters\n    with_lookup=models.WithLookup(\n        # Name of the collection to look up points in\n        collection=\"documents\",\n        # Options for specifying what to bring from the payload\n        # of the looked up point, True by default\n        with_payload=[\"title\", \"text\"],\n        # Options for specifying what to bring from the vector(s)\n        # of the looked up point, True by default\n        with_vectors=False,\n    ),\n)\n```\n\n```typescript\nclient.queryGroups(\"{collection_name}\", {\n    query: [1.1],\n    group_by: \"document_id\",\n    limit: 2,\n    group_size: 2,\n    with_lookup: {\n        collection: \"documents\",\n        with_payload: [\"title\", \"text\"],\n        with_vectors: false,\n    },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{with_payload_selector::SelectorOptions, QueryPointGroupsBuilder, WithLookupBuilder};\n\nclient\n    .query_groups(\n        QueryPointGroupsBuilder::new(\"{collection_name}\", \"document_id\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(2u64)\n            .limit(2u64)\n            .with_lookup(\n                WithLookupBuilder::new(\"documents\")\n                    .with_payload(SelectorOptions::Include(\n                        vec![\"title\".to_string(), \"text\".to_string()].into(),\n                    ))\n                    .with_vectors(false),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.QueryPointGroups;\nimport io.qdrant.client.grpc.Points.WithLookup;\n\nimport static io.qdrant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithVectorsSelectorFactory.enable;",
      "index": 33,
      "token_count": 489,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 63352,
      "end_char": 65389
    },
    {
      "content": "rant.client.QueryFactory.nearest;\nimport static io.qdrant.client.WithVectorsSelectorFactory.enable;\nimport static io.qdrant.client.WithPayloadSelectorFactory.include;\n\nclient.queryGroupsAsync(\n        QueryPointGroups.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setGroupBy(\"document_id\")\n                .setLimit(2)\n                .setGroupSize(2)\n                .setWithLookup(\n                        WithLookup.newBuilder()\n                                .setCollection(\"documents\")\n                                .setWithPayload(include(List.of(\"title\", \"text\")))\n                                .setWithVectors(enable(false))\n                                .build())\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchGroupsAsync(\n    collectionName: \"{collection_name}\",\n    vector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f},\n    groupBy: \"document_id\",\n    limit: 2,\n    groupSize: 2,\n    withLookup: new WithLookup\n    {\n        Collection = \"documents\",\n        WithPayload = new WithPayloadSelector\n        {\n            Include = new PayloadIncludeSelector { Fields = { new string[] { \"title\", \"text\" } } }\n        },\n        WithVectors = false\n    }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tGroupBy:        \"document_id\",\n\tGroupSize:      qdrant.PtrOf(uint64(2)),\n\tWithLookup: &qdrant.WithLookup{\n\t\tCollection:  \"documents\",\n\t\tWithPayload: qdrant.NewWithPayloadInclude(\"title\", \"text\"),\n\t},\n})\n```",
      "index": 34,
      "token_count": 491,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 65289,
      "end_char": 67208
    },
    {
      "content": "Collection:  \"documents\",\n\t\tWithPayload: qdrant.NewWithPayloadInclude(\"title\", \"text\"),\n\t},\n})\n```\n\nFor the `with_lookup` parameter, you can also use the shorthand `with_lookup=\"documents\"` to bring the whole payload and vector(s) without explicitly specifying it.\n\nThe looked up result will show up under `lookup` in each group.\n\n```json\n{\n    \"result\": {\n        \"groups\": [\n            {\n                \"id\": 1,\n                \"hits\": [\n                    { \"id\": 0, \"score\": 0.91 },\n                    { \"id\": 1, \"score\": 0.85 }\n                ],\n                \"lookup\": {\n                    \"id\": 1,\n                    \"payload\": {\n                        \"title\": \"Document A\",\n                        \"text\": \"This is document A\"\n                    }\n                }\n            },\n            {\n                \"id\": 2,\n                \"hits\": [\n                    { \"id\": 1, \"score\": 0.85 }\n                ],\n                \"lookup\": {\n                    \"id\": 2,\n                    \"payload\": {\n                        \"title\": \"Document B\",\n                        \"text\": \"This is document B\"\n                    }\n                }\n            }\n        ]\n    },\n    \"status\": \"ok\",\n    \"time\": 0.001\n}\n```\n\nSince the lookup is done by matching directly with the point id, the lookup collection must be pre-populated with points where the `id` matches the `group_by` value (e.g., document\\_id) from your primary collection.\n\nAny group id that is not an existing (and valid) point id in the lookup collection will be ignored, and the `lookup` field will be empty.\n\n## Random Sampling\n\n*Available as of v1.11.0*\n\nIn some cases it might be useful to retrieve a random sample of points from the collection. This can be useful for debugging, testing, or for providing entry points for exploration.\n\nRandom sampling API is a part of [Universal Query API](#query-api.md) and can be used in the same way as regular search API.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": {",
      "index": 35,
      "token_count": 462,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 67108,
      "end_char": 69132
    },
    {
      "content": "y as regular search API.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": {\n        \"sample\": \"random\"\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\n\nsampled = client.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.SampleQuery(sample=models.Sample.RANDOM)\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst sampled = await client.query(\"{collection_name}\", {\n  query: {\n    sample: \"random\",\n  },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{Query, QueryPointsBuilder};\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet sampled = client\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(Query::new_sample(Sample::Random))\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.sample;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.Sample;\n\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\n\nclient\n    .queryAsync(\n        QueryPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setQuery(sample(Sample.Random))\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(collectionName: \"{collection_name}\", query: Sample.Random);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.QueryGroups(context.Background(), &qdrant.QueryPointGroups{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuerySample(qdrant.Sample_Random),\n})\n```\n\n## Query planning",
      "index": 36,
      "token_count": 516,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 69032,
      "end_char": 71016
    },
    {
      "content": "on_name}\",\n\tQuery:          qdrant.NewQuerySample(qdrant.Sample_Random),\n})\n```\n\n## Query planning\n\nDepending on the filter used in the search - there are several possible scenarios for query execution. Qdrant chooses one of the query execution options depending on the available indexes, the complexity of the conditions and the cardinality of the filtering result. This process is called query planning.\n\nThe strategy selection process relies heavily on heuristics and can vary from release to release. However, the general principles are:\n\n- planning is performed for each segment independently (see [storage](https://qdrant.tech/documentation/concepts/storage/) for more information about segments)\n- prefer a full scan if the amount of points is below a threshold\n- estimate the cardinality of a filtered result before selecting a strategy\n- retrieve points using payload index (see [indexing](https://qdrant.tech/documentation/concepts/indexing/)) if cardinality is below threshold\n- use filterable vector index if the cardinality is above a threshold\n\nYou can adjust the threshold using a [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml), as well as independently for each collection.\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/search.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Similarity search](#similarity-search.md)\n\n  - [Query API](#query-api.md)\n\n  - [Metrics](#metrics.md)\n\n  - [Search API](#search-api.md)\n\n    - [Filtering results by score](#filtering-results-by-score.md)\n    - [Payload and vector in the result](#payload-and-vector-in-the-result.md)\n\n  - [Batch search API](#batch-search-api.md)\n\n  - [Query by ID](#query-by-id.md)\n\n  - [Pagination](#pagination.md)\n\n  - [Grouping API](#grouping-api.md)",
      "index": 37,
      "token_count": 463,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 70916,
      "end_char": 72930
    },
    {
      "content": "ry by ID](#query-by-id.md)\n\n  - [Pagination](#pagination.md)\n\n  - [Grouping API](#grouping-api.md)\n\n    - [Search groups](#search-groups.md)\n    - [Lookup in groups](#lookup-in-groups.md)\n\n  - [Random Sampling](#random-sampling.md)\n\n  - [Query planning](#query-planning.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/search.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
      "index": 38,
      "token_count": 210,
      "metadata": {
        "title": "_documentation_concepts_search_",
        "source": "qdrant_documentation\\documentation_concepts_search\\_documentation_concepts_search_.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_documentation",
        "source_subdir": "documentation_concepts_search",
        "category": "concepts",
        "file_path": "documentation_concepts_search\\_documentation_concepts_search_.md",
        "file_name": "_documentation_concepts_search_.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:30.042433",
        "total_chunks": 39
      },
      "start_char": 72830,
      "end_char": 74878
    }
  ]
}