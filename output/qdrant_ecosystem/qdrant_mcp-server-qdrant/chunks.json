{
  "collection": "qdrant_ecosystem",
  "subdirectory": "qdrant_mcp-server-qdrant",
  "total_chunks": 86,
  "chunks": [
    {
      "content": "qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Overview\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [pyproject.toml](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml)\n- [src/mcp\\_server\\_qdrant/server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py)\n\nThis document provides an introduction to the mcp-server-qdrant repository, which implements a semantic memory layer on top of the Qdrant vector database using the Model Context Protocol (MCP).",
      "index": 0,
      "token_count": 611,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant.md",
        "file_name": "_qdrant_mcp-server-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.022072",
        "total_chunks": 5
      },
      "start_char": 0,
      "end_char": 1961
    },
    {
      "content": "a semantic memory layer on top of the Qdrant vector database using the Model Context Protocol (MCP). For detailed information about the architecture, see [Architecture](qdrant/mcp-server-qdrant/2-architecture.md), and for installation instructions, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md).\n\n## What is mcp-server-qdrant?\n\nmcp-server-qdrant is an official Model Context Protocol server that enables LLM applications to store and retrieve information in a Qdrant vector database using semantic search. It converts text into vector embeddings and performs similarity searches to find the most relevant information based on meaning rather than just keywords.\n\nThe server acts as a bridge between LLM applications and the Qdrant vector database, allowing AI systems to maintain persistent memory that can be queried semantically.\n\nSources: [README.md1-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L1-L17)\n\n## System Components\n\nThe mcp-server-qdrant system consists of three main components:\n\n1. **QdrantMCPServer**: The core server that implements the Model Context Protocol interface, exposing tools for storing and finding information.\n2. **QdrantConnector**: Handles the connection to the Qdrant database and manages vector operations.\n3. **EmbeddingProvider**: Generates vector embeddings from text, with FastEmbedProvider as the current implementation.\n\nThese components are configured through three settings classes: ToolSettings, QdrantSettings, and EmbeddingProviderSettings.\n\nSources: [src/mcp\\_server\\_qdrant/server.py1-12](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L12) [README.md19-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L19-L38)\n\n## Core Architecture\n\nBelow is a diagram showing the high-level architecture of the mcp-server-qdrant system:\n\n```\n```\n\nSources: [README.md14-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.",
      "index": 1,
      "token_count": 491,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant.md",
        "file_name": "_qdrant_mcp-server-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.022072",
        "total_chunks": 5
      },
      "start_char": 1861,
      "end_char": 3873
    },
    {
      "content": "```\n```\n\nSources: [README.md14-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L14-L38) [src/mcp\\_server\\_qdrant/server.py1-12](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L12)\n\n## Key Information Flows\n\nThe system handles two primary operations: storing information and finding information. Here's how these processes work:\n\n```\n```\n\nSources: [README.md19-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L19-L38)\n\n## Exposed Tools\n\nThe mcp-server-qdrant exposes two primary tools to clients:\n\n| Tool Name      | Purpose                                         | Parameters                                                                                                                           | Return Value                              |\n| -------------- | ----------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------- |\n| `qdrant-store` | Store information in the Qdrant database        | `information` (string): Content to store `metadata` (JSON): Optional metadata `collection_name` (string): Optional target collection | Confirmation message                      |\n| `qdrant-find`  | Retrieve relevant information from the database | `query` (string): Search query `collection_name` (string): Optional target collection                                                | Relevant information as separate messages |\n\nSources: [README.md21-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L21-L37)\n\n## Configuration System\n\nThe system is configured through environment variables that map to three settings classes:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/server.py1-12](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L12) [README.md39-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.",
      "index": 2,
      "token_count": 469,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant.md",
        "file_name": "_qdrant_mcp-server-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.022072",
        "total_chunks": 5
      },
      "start_char": 3773,
      "end_char": 5816
    },
    {
      "content": "server.py#L1-L12) [README.md39-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L57)\n\n## Deployment Methods\n\nmcp-server-qdrant can be deployed using several methods:\n\n1. **Using uvx**: Direct execution with the `uvx` command\n2. **Using Docker**: Running as a containerized application\n3. **Smithery Installation**: Automated installation for Claude Desktop\n4. **Manual Configuration**: Custom setup for various clients\n\nThe server supports two transport protocols:\n\n- `stdio` (default): For local MCP clients\n- `sse`: Server-Sent Events for remote clients\n\nSources: [README.md59-150](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L59-L150)\n\n## Integration Options\n\nThe server can be integrated with various MCP-compatible clients:\n\n1. **Claude Desktop**: For AI-assisted chat and work\n2. **Cursor/Windsurf**: For code search and development\n3. **VS Code**: For coding with AI assistance\n4. **Claude Code**: For code generation and search capabilities\n\nEach integration can be customized by modifying the tool descriptions to suit specific use cases.\n\nSources: [README.md154-350](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L154-L350)\n\n## Technical Requirements\n\n- Python 3.10 or later\n\n- Dependencies:\n\n  - mcp\\[cli] ≥ 1.3.0\n  - fastembed ≥ 0.6.0\n  - qdrant-client ≥ 1.12.0\n  - pydantic ≥ 2.10.6\n\nSources: [pyproject.toml1-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L1-L38)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Overview](#overview.md)\n- [What is mcp-server-qdrant?](#what-is-mcp-server-qdrant.md)\n- [System Components](#system-components.md)\n- [Core Architecture](#core-architecture.md)\n- [Key Information Flows](#key-information-flows.md)\n- [Exposed Tools](#exposed-tools.md)\n- [Configuration System](#configuration-system.md)\n- [Deployment Methods](#deployment-methods.md)\n- [Integration Options](#integration-options.md)\n- [Technical Requirements](#technical-requirements.md)",
      "index": 3,
      "token_count": 583,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant.md",
        "file_name": "_qdrant_mcp-server-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.022072",
        "total_chunks": 5
      },
      "start_char": 5716,
      "end_char": 7764
    },
    {
      "content": "gration-options.md)\n- [Technical Requirements](#technical-requirements.md)",
      "index": 4,
      "token_count": 16,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant.md",
        "file_name": "_qdrant_mcp-server-qdrant.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.022072",
        "total_chunks": 5
      },
      "start_char": 7664,
      "end_char": 9712
    },
    {
      "content": "qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Overview\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [pyproject.toml](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml)\n- [src/mcp\\_server\\_qdrant/server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py)\n\nThis document provides an introduction to the mcp-server-qdrant repository, which implements a semantic memory layer on top of the Qdrant vector database using the Model Context Protocol (MCP).",
      "index": 0,
      "token_count": 611,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_1-overview",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_1-overview.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_1-overview.md",
        "file_name": "_qdrant_mcp-server-qdrant_1-overview.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.026828",
        "total_chunks": 5
      },
      "start_char": 0,
      "end_char": 1961
    },
    {
      "content": "a semantic memory layer on top of the Qdrant vector database using the Model Context Protocol (MCP). For detailed information about the architecture, see [Architecture](qdrant/mcp-server-qdrant/2-architecture.md), and for installation instructions, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md).\n\n## What is mcp-server-qdrant?\n\nmcp-server-qdrant is an official Model Context Protocol server that enables LLM applications to store and retrieve information in a Qdrant vector database using semantic search. It converts text into vector embeddings and performs similarity searches to find the most relevant information based on meaning rather than just keywords.\n\nThe server acts as a bridge between LLM applications and the Qdrant vector database, allowing AI systems to maintain persistent memory that can be queried semantically.\n\nSources: [README.md1-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L1-L17)\n\n## System Components\n\nThe mcp-server-qdrant system consists of three main components:\n\n1. **QdrantMCPServer**: The core server that implements the Model Context Protocol interface, exposing tools for storing and finding information.\n2. **QdrantConnector**: Handles the connection to the Qdrant database and manages vector operations.\n3. **EmbeddingProvider**: Generates vector embeddings from text, with FastEmbedProvider as the current implementation.\n\nThese components are configured through three settings classes: ToolSettings, QdrantSettings, and EmbeddingProviderSettings.\n\nSources: [src/mcp\\_server\\_qdrant/server.py1-12](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L12) [README.md19-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L19-L38)\n\n## Core Architecture\n\nBelow is a diagram showing the high-level architecture of the mcp-server-qdrant system:\n\n```\n```\n\nSources: [README.md14-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.",
      "index": 1,
      "token_count": 491,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_1-overview",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_1-overview.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_1-overview.md",
        "file_name": "_qdrant_mcp-server-qdrant_1-overview.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.026828",
        "total_chunks": 5
      },
      "start_char": 1861,
      "end_char": 3873
    },
    {
      "content": "```\n```\n\nSources: [README.md14-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L14-L38) [src/mcp\\_server\\_qdrant/server.py1-12](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L12)\n\n## Key Information Flows\n\nThe system handles two primary operations: storing information and finding information. Here's how these processes work:\n\n```\n```\n\nSources: [README.md19-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L19-L38)\n\n## Exposed Tools\n\nThe mcp-server-qdrant exposes two primary tools to clients:\n\n| Tool Name      | Purpose                                         | Parameters                                                                                                                           | Return Value                              |\n| -------------- | ----------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------- |\n| `qdrant-store` | Store information in the Qdrant database        | `information` (string): Content to store `metadata` (JSON): Optional metadata `collection_name` (string): Optional target collection | Confirmation message                      |\n| `qdrant-find`  | Retrieve relevant information from the database | `query` (string): Search query `collection_name` (string): Optional target collection                                                | Relevant information as separate messages |\n\nSources: [README.md21-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L21-L37)\n\n## Configuration System\n\nThe system is configured through environment variables that map to three settings classes:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/server.py1-12](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L12) [README.md39-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.",
      "index": 2,
      "token_count": 469,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_1-overview",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_1-overview.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_1-overview.md",
        "file_name": "_qdrant_mcp-server-qdrant_1-overview.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.026828",
        "total_chunks": 5
      },
      "start_char": 3773,
      "end_char": 5816
    },
    {
      "content": "server.py#L1-L12) [README.md39-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L57)\n\n## Deployment Methods\n\nmcp-server-qdrant can be deployed using several methods:\n\n1. **Using uvx**: Direct execution with the `uvx` command\n2. **Using Docker**: Running as a containerized application\n3. **Smithery Installation**: Automated installation for Claude Desktop\n4. **Manual Configuration**: Custom setup for various clients\n\nThe server supports two transport protocols:\n\n- `stdio` (default): For local MCP clients\n- `sse`: Server-Sent Events for remote clients\n\nSources: [README.md59-150](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L59-L150)\n\n## Integration Options\n\nThe server can be integrated with various MCP-compatible clients:\n\n1. **Claude Desktop**: For AI-assisted chat and work\n2. **Cursor/Windsurf**: For code search and development\n3. **VS Code**: For coding with AI assistance\n4. **Claude Code**: For code generation and search capabilities\n\nEach integration can be customized by modifying the tool descriptions to suit specific use cases.\n\nSources: [README.md154-350](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L154-L350)\n\n## Technical Requirements\n\n- Python 3.10 or later\n\n- Dependencies:\n\n  - mcp\\[cli] ≥ 1.3.0\n  - fastembed ≥ 0.6.0\n  - qdrant-client ≥ 1.12.0\n  - pydantic ≥ 2.10.6\n\nSources: [pyproject.toml1-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L1-L38)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Overview](#overview.md)\n- [What is mcp-server-qdrant?](#what-is-mcp-server-qdrant.md)\n- [System Components](#system-components.md)\n- [Core Architecture](#core-architecture.md)\n- [Key Information Flows](#key-information-flows.md)\n- [Exposed Tools](#exposed-tools.md)\n- [Configuration System](#configuration-system.md)\n- [Deployment Methods](#deployment-methods.md)\n- [Integration Options](#integration-options.md)\n- [Technical Requirements](#technical-requirements.md)",
      "index": 3,
      "token_count": 583,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_1-overview",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_1-overview.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_1-overview.md",
        "file_name": "_qdrant_mcp-server-qdrant_1-overview.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.026828",
        "total_chunks": 5
      },
      "start_char": 5716,
      "end_char": 7764
    },
    {
      "content": "gration-options.md)\n- [Technical Requirements](#technical-requirements.md)",
      "index": 4,
      "token_count": 16,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_1-overview",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_1-overview.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_1-overview.md",
        "file_name": "_qdrant_mcp-server-qdrant_1-overview.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.026828",
        "total_chunks": 5
      },
      "start_char": 7664,
      "end_char": 9712
    },
    {
      "content": "Architecture | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Architecture\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [src/mcp\\_server\\_qdrant/mcp\\_server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py)\n- [src/mcp\\_server\\_qdrant/qdrant.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py)\n- [src/mcp\\_server\\_qdrant/server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py)",
      "index": 0,
      "token_count": 640,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2-architecture",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "file_name": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.031702",
        "total_chunks": 5
      },
      "start_char": 0,
      "end_char": 1961
    },
    {
      "content": "ver.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py)\n\nThis document provides a high-level overview of the mcp-server-qdrant architecture, explaining the main components and their interactions. It covers the core structural elements, data flows, and integration points that make up the system. For installation and configuration details, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md).\n\n## System Overview\n\nThe mcp-server-qdrant is a Model Context Protocol (MCP) server that provides a semantic memory layer on top of the Qdrant vector database. It allows LLM applications to store and retrieve information using vector embeddings for semantic similarity search rather than simple keyword matching.\n\n### High-Level Architecture Diagram\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/server.py1-13](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L13) [src/mcp\\_server\\_qdrant/mcp\\_server.py1-170](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L1-L170) [README.md1-50](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L1-L50)\n\n## Core Components\n\nThe architecture consists of four main components that work together to provide the semantic memory functionality:\n\n### QdrantMCPServer\n\nThe `QdrantMCPServer` class is the central component that initializes the server and registers the MCP tools. It inherits from `FastMCP` and serves as the entry point for client requests. The server:\n\n1. Sets up the embedding provider and Qdrant connector\n2. Registers the `qdrant-store` and `qdrant-find` tools\n3. Handles formatting of entries for display to clients\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py18-50](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L18-L50) [src/mcp\\_server\\_qdrant/server.py1-13](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.",
      "index": 1,
      "token_count": 565,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2-architecture",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "file_name": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.031702",
        "total_chunks": 5
      },
      "start_char": 1861,
      "end_char": 3905
    },
    {
      "content": "rver.py1-13](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L13)\n\n### QdrantConnector\n\nThe `QdrantConnector` handles all interactions with the Qdrant vector database. It provides methods to:\n\n1. Connect to either a remote Qdrant instance or a local database file\n2. Store entries with their vector embeddings\n3. Search for semantically similar entries using vector similarity\n4. Manage collections in the Qdrant database\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py24-149](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L149)\n\n### Embedding System\n\nThe embedding system converts text to vector embeddings that can be stored and searched in the Qdrant database. It uses an abstraction called `EmbeddingProvider` with implementations for different embedding technologies. The current implementation supports FastEmbed for generating embeddings.\n\nFor detailed information about embedding providers, see [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md).\n\n### MCP Tools\n\nThe server provides two main tools to clients:\n\n1. **qdrant-store**: Allows storing information with optional metadata in a specified collection\n2. **qdrant-find**: Enables semantic search for information based on a query\n\nThe behavior of these tools adapts based on the server configuration. For example, if a default collection name is configured, the tools don't require a collection name parameter.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py58-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L58-L169) [README.md21-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L21-L38)\n\n## Data Flow\n\nThe mcp-server-qdrant handles two primary operations: storing information and finding relevant information. Here's how data flows through the system for these operations:\n\n### Store Operation Flow\n\n```\n```\n\n### Find Operation Flow\n\n```\n```",
      "index": 2,
      "token_count": 517,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2-architecture",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "file_name": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.031702",
        "total_chunks": 5
      },
      "start_char": 3805,
      "end_char": 5811
    },
    {
      "content": "system for these operations:\n\n### Store Operation Flow\n\n```\n```\n\n### Find Operation Flow\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py63-138](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L138) [src/mcp\\_server\\_qdrant/qdrant.py59-126](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L59-L126)\n\n## Configuration Architecture\n\nThe system uses a layered configuration approach based on environment variables. There are three main settings classes:\n\n1. **QdrantSettings**: Configures the connection to the Qdrant database\n2. **EmbeddingProviderSettings**: Configures the embedding provider\n3. **ToolSettings**: Configures the behavior and descriptions of the MCP tools\n\n```\n```\n\nFor detailed information about configuration options, see [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md).\n\nSources: [src/mcp\\_server\\_qdrant/server.py1-13](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L13) [README.md39-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L57)\n\n## Deployment Architecture\n\nThe mcp-server-qdrant can be deployed in several ways:\n\n1. Using `uvx` for direct execution\n2. Using Docker containers\n3. Via Smithery installation\n\nThe server supports multiple transport protocols:\n\n- **stdio**: Standard input/output transport for local clients\n- **sse**: Server-Sent Events transport for remote clients\n\n```\n```\n\nFor detailed deployment instructions, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md).\n\nSources: [README.md59-149](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L59-L149)\n\n## Security Considerations\n\nThe architecture supports secure connections to Qdrant through:\n\n1. API key authentication for remote Qdrant instances\n2. Local file-based storage for sensitive environments",
      "index": 3,
      "token_count": 544,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2-architecture",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "file_name": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.031702",
        "total_chunks": 5
      },
      "start_char": 5711,
      "end_char": 7674
    },
    {
      "content": "authentication for remote Qdrant instances\n2. Local file-based storage for sensitive environments\n\nWhen using the SSE transport protocol, the server listens on port 8000 by default and should be secured appropriately if exposed to external networks.\n\nSources: [README.md39-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L57) [src/mcp\\_server\\_qdrant/qdrant.py35-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L35-L49)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Architecture](#architecture.md)\n- [System Overview](#system-overview.md)\n- [High-Level Architecture Diagram](#high-level-architecture-diagram.md)\n- [Core Components](#core-components.md)\n- [QdrantMCPServer](#qdrantmcpserver.md)\n- [QdrantConnector](#qdrantconnector.md)\n- [Embedding System](#embedding-system.md)\n- [MCP Tools](#mcp-tools.md)\n- [Data Flow](#data-flow.md)\n- [Store Operation Flow](#store-operation-flow.md)\n- [Find Operation Flow](#find-operation-flow.md)\n- [Configuration Architecture](#configuration-architecture.md)\n- [Deployment Architecture](#deployment-architecture.md)\n- [Security Considerations](#security-considerations.md)",
      "index": 4,
      "token_count": 336,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2-architecture",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2-architecture.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "file_name": "_qdrant_mcp-server-qdrant_2-architecture.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.031702",
        "total_chunks": 5
      },
      "start_char": 7574,
      "end_char": 9622
    },
    {
      "content": "Core Components | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Core Components\n\nRelevant source files\n\n- [src/mcp\\_server\\_qdrant/mcp\\_server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py)\n- [src/mcp\\_server\\_qdrant/qdrant.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py)\n- [src/mcp\\_server\\_qdrant/server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py)\n\nThis document details the main software components that form the foundation of the MCP Server Qdrant system.",
      "index": 0,
      "token_count": 632,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.1-core-components",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.037452",
        "total_chunks": 5
      },
      "start_char": 0,
      "end_char": 1992
    },
    {
      "content": "ument details the main software components that form the foundation of the MCP Server Qdrant system. It covers the key classes and their interactions that enable vector search functionality through the Model Context Protocol (MCP). For details about the embedding system that powers vector generation, see [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md).\n\n## Overview of Core Components\n\nThe MCP Server Qdrant system consists of three primary components that work together to provide vector-based semantic search capabilities:\n\n1. **QdrantMCPServer** - The main server class that handles MCP protocol requests and exposes tools to clients\n2. **QdrantConnector** - Manages the connection to Qdrant and handles vector storage and retrieval operations\n3. **Entry** - A data model representing a single entry in the Qdrant collection\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py20-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L20-L169) [src/mcp\\_server\\_qdrant/qdrant.py15-21](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L15-L21) [src/mcp\\_server\\_qdrant/qdrant.py24-148](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L148)\n\n## QdrantMCPServer\n\nThe `QdrantMCPServer` class serves as the primary entry point for the system, extending the `FastMCP` base class to provide an MCP-compatible interface for Qdrant operations. It configures and initializes the other core components and registers the MCP tools that will be exposed to clients.\n\n### Key Responsibilities\n\n- Initializing the embedding provider and Qdrant connector components\n- Registering MCP tools (qdrant-store and qdrant-find) based on configuration\n- Formatting entries for client presentation\n- Handling client requests for storing and finding information\n\n### Main Methods\n\n| Method         | Purpose                                                              |",
      "index": 1,
      "token_count": 501,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.1-core-components",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.037452",
        "total_chunks": 5
      },
      "start_char": 1892,
      "end_char": 3900
    },
    {
      "content": "Methods\n\n| Method         | Purpose                                                              |\n| -------------- | -------------------------------------------------------------------- |\n| `__init__`     | Initializes the server with settings and creates required components |\n| `setup_tools`  | Registers the MCP tools based on configuration                       |\n| `format_entry` | Formats an Entry object for client presentation                      |\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py20-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L20-L49) [src/mcp\\_server\\_qdrant/mcp\\_server.py58-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L58-L169)\n\n## QdrantConnector\n\nThe `QdrantConnector` class encapsulates all interactions with the Qdrant vector database. It handles the connection setup and provides methods for storing and retrieving vectors.\n\n### Key Responsibilities\n\n- Managing the connection to the Qdrant server\n- Creating collections when needed\n- Converting text entries to vector embeddings (via the embedding provider)\n- Storing and retrieving vectors and their associated metadata\n\n### Main Methods\n\n| Method                      | Purpose                                                |\n| --------------------------- | ------------------------------------------------------ |\n| `store`                     | Embeds and stores an entry in the specified collection |\n| `search`                    | Finds semantically similar entries based on a query    |\n| `_ensure_collection_exists` | Creates a collection if it doesn't exist               |\n| `get_collection_names`      | Retrieves all collection names from the server         |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py24-148](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L148)\n\n## Entry Model\n\nThe `Entry` class is a Pydantic model that represents a single entry in the Qdrant collection.",
      "index": 2,
      "token_count": 454,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.1-core-components",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.037452",
        "total_chunks": 5
      },
      "start_char": 3800,
      "end_char": 5835
    },
    {
      "content": "odel\n\nThe `Entry` class is a Pydantic model that represents a single entry in the Qdrant collection. It encapsulates both the content text and optional metadata.\n\n### Structure\n\n| Field      | Type                       | Description                                           |\n| ---------- | -------------------------- | ----------------------------------------------------- |\n| `content`  | str                        | The text content to be stored and retrieved           |\n| `metadata` | Optional\\[Dict\\[str, Any]] | Optional key-value metadata associated with the entry |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py15-21](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L15-L21)\n\n## Request Flow\n\nThe following diagram illustrates how these components interact during the two primary operations: storing and finding information.\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py63-138](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L138) [src/mcp\\_server\\_qdrant/qdrant.py59-126](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L59-L126)\n\n## Component Initialization\n\nThe system initialization starts with the server creation in `server.py`, which sets up all the core components with their respective settings:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/server.py1-12](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L12) [src/mcp\\_server\\_qdrant/mcp\\_server.py25-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L25-L49)\n\n## Server Configuration\n\nThe server is configured via three main settings classes passed to the `QdrantMCPServer` constructor:\n\n1. **ToolSettings** - Controls tool descriptions and behavior\n2. **QdrantSettings** - Configures the Qdrant connection and collection parameters\n3. **EmbeddingProviderSettings** - Specifies which embedding provider and model to use",
      "index": 3,
      "token_count": 543,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.1-core-components",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.037452",
        "total_chunks": 5
      },
      "start_char": 5735,
      "end_char": 7767
    },
    {
      "content": "parameters\n3. **EmbeddingProviderSettings** - Specifies which embedding provider and model to use\n\nThese settings determine how the components are initialized and how they interact. For more details on configuration options, see [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md).\n\nSources: [src/mcp\\_server\\_qdrant/server.py1-12](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/server.py#L1-L12) [src/mcp\\_server\\_qdrant/mcp\\_server.py25-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L25-L37)\n\n## Tool Registration\n\nThe `QdrantMCPServer` registers two primary tools for client use:\n\n1. **qdrant-store** - Allows clients to store information with metadata in Qdrant\n2. **qdrant-find** - Enables semantic search to retrieve relevant information\n\nThe exact tool registration depends on configuration settings, particularly:\n\n- Whether a default collection name is provided\n- Whether the server is in read-only mode\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py58-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L58-L169)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Core Components](#core-components.md)\n- [Overview of Core Components](#overview-of-core-components.md)\n- [QdrantMCPServer](#qdrantmcpserver.md)\n- [Key Responsibilities](#key-responsibilities.md)\n- [Main Methods](#main-methods.md)\n- [QdrantConnector](#qdrantconnector.md)\n- [Key Responsibilities](#key-responsibilities-1.md)\n- [Main Methods](#main-methods-1.md)\n- [Entry Model](#entry-model.md)\n- [Structure](#structure.md)\n- [Request Flow](#request-flow.md)\n- [Component Initialization](#component-initialization.md)\n- [Server Configuration](#server-configuration.md)\n- [Tool Registration](#tool-registration.md)",
      "index": 4,
      "token_count": 516,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.1-core-components",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.1-core-components.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.037452",
        "total_chunks": 5
      },
      "start_char": 7667,
      "end_char": 9715
    },
    {
      "content": "Embedding System | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Embedding System\n\nRelevant source files\n\n- [src/mcp\\_server\\_qdrant/embeddings/\\_\\_init\\_\\_.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/__init__.py)\n- [src/mcp\\_server\\_qdrant/embeddings/base.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/base.py)\n- [src/mcp\\_server\\_qdrant/embeddings/factory.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/factory.py)\n- [src/mcp\\_server\\_qdrant/embeddings/fastembed.py](https://github.",
      "index": 0,
      "token_count": 648,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.2-embedding-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.071683",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 2015
    },
    {
      "content": "er_qdrant/embeddings/factory.py)\n- [src/mcp\\_server\\_qdrant/embeddings/fastembed.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py)\n- [src/mcp\\_server\\_qdrant/embeddings/types.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/types.py)\n\nThe Embedding System is a core component of the mcp-server-qdrant architecture responsible for converting text data (both documents and queries) into vector representations that enable semantic search capabilities in the Qdrant vector database. This page documents the design, implementation, and usage of the embedding system.\n\nFor information about the overall architecture, see [Architecture](qdrant/mcp-server-qdrant/2-architecture.md), and for details about configuring the embedding system, see [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md).\n\n## System Overview\n\nThe Embedding System serves as the bridge between natural language text and the vector space where semantic similarity operations can be performed.\n\n```\n```\n\nThe Embedding System transforms raw text into numerical vector representations that capture semantic meaning, enabling similarity-based search rather than simple keyword matching.\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/factory.py6-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/factory.py#L6-L17) [src/mcp\\_server\\_qdrant/embeddings/base.py5-26](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/base.py#L5-L26) [src/mcp\\_server\\_qdrant/embeddings/fastembed.py10-51](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L10-L51)\n\n## EmbeddingProvider Interface\n\nAt the core of the embedding system is the abstract `EmbeddingProvider` interface:\n\n```\n```\n\nThis interface defines four critical methods that all embedding providers must implement:",
      "index": 1,
      "token_count": 507,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.2-embedding-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.071683",
        "total_chunks": 6
      },
      "start_char": 1915,
      "end_char": 3906
    },
    {
      "content": "```\n```\n\nThis interface defines four critical methods that all embedding providers must implement:\n\n| Method            | Purpose                                                 | Return Type         |\n| ----------------- | ------------------------------------------------------- | ------------------- |\n| `embed_documents` | Converts multiple text documents into vector embeddings | `List[List[float]]` |\n| `embed_query`     | Converts a single query string into a vector embedding  | `List[float]`       |\n| `get_vector_name` | Returns an identifier for the vector type               | `str`               |\n| `get_vector_size` | Returns the dimensionality of the vectors               | `int`               |\n\nBoth embedding methods are asynchronous, allowing the server to handle multiple concurrent requests efficiently.\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/base.py5-26](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/base.py#L5-L26)\n\n## FastEmbed Implementation\n\nThe current implementation uses the FastEmbed library through the `FastEmbedProvider` class:\n\n```\n```\n\nThe `FastEmbedProvider` class:\n\n1. Is initialized with a model name and creates an internal `TextEmbedding` instance\n2. Implements `embed_documents` by running FastEmbed's `passage_embed` method\n3. Implements `embed_query` by running FastEmbed's `query_embed` method\n4. Provides a vector name in the format `fast-{model_name}`\n5. Retrieves the vector dimensionality from the model's metadata\n\nSince FastEmbed's API is synchronous but the `EmbeddingProvider` interface is asynchronous, the implementation uses `asyncio.get_event_loop().run_in_executor()` to run the embedding operations in thread pools, preventing blocking of the main event loop.\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/fastembed.py10-51](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L10-L51)\n\n## Provider Factory",
      "index": 2,
      "token_count": 437,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.2-embedding-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.071683",
        "total_chunks": 6
      },
      "start_char": 3806,
      "end_char": 5778
    },
    {
      "content": "r-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L10-L51)\n\n## Provider Factory\n\nThe embedding system uses a factory pattern to create embedding providers based on configuration settings:\n\n```\n```\n\nThe `create_embedding_provider` factory function:\n\n1. Takes an `EmbeddingProviderSettings` instance as input\n2. Checks the `provider_type` field to determine which implementation to create\n3. Creates and returns the appropriate `EmbeddingProvider` implementation\n4. Raises a `ValueError` for unsupported provider types\n\nCurrently, only the `FASTEMBED` provider type is supported, defined in the `EmbeddingProviderType` enum.\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/factory.py6-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/factory.py#L6-L17) [src/mcp\\_server\\_qdrant/embeddings/types.py1-5](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/types.py#L1-L5)\n\n## Embedding Workflow\n\nThe following sequence diagram illustrates how the embedding system is used in the two main operations of the mcp-server-qdrant:\n\n```\n```\n\n1. **Store Operation**: When storing information, the text is first embedded into a vector before being stored in Qdrant\n2. **Find Operation**: When searching for information, the query text is embedded to perform semantic similarity search\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/fastembed.py20-36](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L20-L36)\n\n## Technical Implementation Details\n\n### Asynchronous Operation\n\nThe embedding interface is designed to be asynchronous, but the FastEmbed library provides synchronous methods. To bridge this gap, the `FastEmbedProvider` implementation runs the synchronous FastEmbed operations in thread pools:\n\n```\n```\n\nThis approach allows the server to handle multiple requests efficiently without being blocked by embedding operations.\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/fastembed.",
      "index": 3,
      "token_count": 499,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.2-embedding-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.071683",
        "total_chunks": 6
      },
      "start_char": 5678,
      "end_char": 7711
    },
    {
      "content": "hout being blocked by embedding operations.\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/fastembed.py20-27](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L20-L27)\n\n### Vector Characteristics\n\nEach embedding model produces vectors with specific characteristics that need to be communicated to the Qdrant database:\n\n| Method              | Purpose                                          | Example (for FastEmbed)                 |\n| ------------------- | ------------------------------------------------ | --------------------------------------- |\n| `get_vector_name()` | Provides a unique identifier for the vector type | `\"fast-baai-bge-small-en\"`              |\n| `get_vector_size()` | Provides the dimensionality of the vectors       | Typically 384 or 768 depending on model |\n\nThe `FastEmbedProvider` implementation:\n\n- Generates vector names in the format `fast-{model_name}`\n- Retrieves the vector dimensionality from the model's metadata via `model_description.dim`\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/fastembed.py38-51](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L38-L51)\n\n## Extending the Embedding System\n\nTo add support for new embedding models or libraries:\n\n1. Add a new value to the `EmbeddingProviderType` enum in `types.py`\n2. Create a new implementation of the `EmbeddingProvider` interface\n3. Update the `create_embedding_provider` factory function to handle the new provider type\n\nThis modular design allows the system to evolve with minimal changes to existing code.\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/types.py1-5](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/types.py#L1-L5) [src/mcp\\_server\\_qdrant/embeddings/factory.py6-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/factory.py#L6-L17)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page",
      "index": 4,
      "token_count": 500,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.2-embedding-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.071683",
        "total_chunks": 6
      },
      "start_char": 7611,
      "end_char": 9629
    },
    {
      "content": "mbeddings/factory.py#L6-L17)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Embedding System](#embedding-system.md)\n- [System Overview](#system-overview.md)\n- [EmbeddingProvider Interface](#embeddingprovider-interface.md)\n- [FastEmbed Implementation](#fastembed-implementation.md)\n- [Provider Factory](#provider-factory.md)\n- [Embedding Workflow](#embedding-workflow.md)\n- [Technical Implementation Details](#technical-implementation-details.md)\n- [Asynchronous Operation](#asynchronous-operation.md)\n- [Vector Characteristics](#vector-characteristics.md)\n- [Extending the Embedding System](#extending-the-embedding-system.md)",
      "index": 5,
      "token_count": 154,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.2-embedding-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.2-embedding-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.071683",
        "total_chunks": 6
      },
      "start_char": 9529,
      "end_char": 11577
    },
    {
      "content": "Configuration System | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Configuration System\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [src/mcp\\_server\\_qdrant/settings.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py)\n- [tests/test\\_settings.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_settings.py)\n\nThe mcp-server-qdrant configuration system provides a flexible way to customize the server's behavior through environment variables.",
      "index": 0,
      "token_count": 600,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.3-configuration-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.104563",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 1956
    },
    {
      "content": "ion system provides a flexible way to customize the server's behavior through environment variables. This page describes how configuration works in the codebase, including the settings classes, environment variables, and how they interact with the rest of the system.\n\nFor installation options and deployment guidelines, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md), and for detailed configuration options, see [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md).\n\n## Configuration Overview\n\nThe configuration system in mcp-server-qdrant is built on top of Pydantic's settings management, which automatically loads values from environment variables. The system uses three main settings classes to organize configuration by functional area:\n\n1. `QdrantSettings` - Configuration for the Qdrant vector database connection\n2. `EmbeddingProviderSettings` - Configuration for the embedding model\n3. `ToolSettings` - Configuration for the tool descriptions and behaviors\n\n### Configuration Flow\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/settings.py1-64](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L1-L64) [README.md39-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L57)\n\n## Settings Classes\n\nThe configuration system is based on three Pydantic settings classes that map environment variables to typed Python attributes:\n\n### Class Structure\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/settings.py19-64](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L19-L64)\n\n### QdrantSettings\n\nThe `QdrantSettings` class manages all configuration related to the Qdrant vector database connection:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/settings.py49-64](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L49-L64)\n\n### EmbeddingProviderSettings",
      "index": 1,
      "token_count": 494,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.3-configuration-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.104563",
        "total_chunks": 6
      },
      "start_char": 1856,
      "end_char": 3825
    },
    {
      "content": "ver-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L49-L64)\n\n### EmbeddingProviderSettings\n\nThe `EmbeddingProviderSettings` class manages configuration for the embedding model used to convert text to vector embeddings:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/settings.py34-47](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L34-L47)\n\n### ToolSettings\n\nThe `ToolSettings` class manages configuration for the MCP tool descriptions that determine how the tools are presented to LLM clients:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/settings.py19-31](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L19-L31)\n\n## Environment Variables\n\nThe configuration system uses environment variables to configure all aspects of the server. The following table lists all supported environment variables:\n\n| Environment Variable     | Description                                       | Default Value                            |\n| ------------------------ | ------------------------------------------------- | ---------------------------------------- |\n| `QDRANT_URL`             | URL of the Qdrant server                          | None                                     |\n| `QDRANT_API_KEY`         | API key for the Qdrant server                     | None                                     |\n| `COLLECTION_NAME`        | Name of the default collection to use             | None                                     |\n| `QDRANT_LOCAL_PATH`      | Path to the local Qdrant database                 | None                                     |\n| `QDRANT_SEARCH_LIMIT`    | Maximum number of results to return from searches | 10                                       |\n| `QDRANT_READ_ONLY`       | Whether to operate in read-only mode              | False                                    |\n| `EMBEDDING_PROVIDER`     | Embedding provider to use                         | `fastembed`                              |",
      "index": 2,
      "token_count": 415,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.3-configuration-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.104563",
        "total_chunks": 6
      },
      "start_char": 3725,
      "end_char": 5732
    },
    {
      "content": "| Embedding provider to use                         | `fastembed`                              |\n| `EMBEDDING_MODEL`        | Name of the embedding model to use                | `sentence-transformers/all-MiniLM-L6-v2` |\n| `TOOL_STORE_DESCRIPTION` | Custom description for the store tool             | See default in settings.py               |\n| `TOOL_FIND_DESCRIPTION`  | Custom description for the find tool              | See default in settings.py               |\n\nSources: [README.md39-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L57) [src/mcp\\_server\\_qdrant/settings.py8-16](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L8-L16) [src/mcp\\_server\\_qdrant/settings.py19-64](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L19-L64)\n\n## Configuration Loading and Usage\n\nThe configuration system automatically loads values from environment variables when the settings classes are instantiated. This process happens at server startup.\n\n```\n```\n\nSources: [tests/test\\_settings.py14-107](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_settings.py#L14-L107)\n\n## Configuration Validation\n\nThe settings classes leverage Pydantic's validation system to ensure that values are of the correct type and format. When an invalid configuration is provided, the server will fail to start with a detailed error message indicating which value was invalid and why.\n\nKey validation features:\n\n1. Type checking - ensures values are of the correct type (string, integer, boolean, etc.)\n2. Enum validation - ensures that values like `provider_type` are one of the allowed options\n3. Default values - provides sensible defaults for optional settings\n\nSources: [src/mcp\\_server\\_qdrant/settings.py19-64](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L19-L64) [tests/test\\_settings.py14-107](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_settings.",
      "index": 3,
      "token_count": 535,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.3-configuration-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.104563",
        "total_chunks": 6
      },
      "start_char": 5632,
      "end_char": 7674
    },
    {
      "content": "t\\_settings.py14-107](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_settings.py#L14-L107)\n\n## Configuration Best Practices\n\n### Minimal Configuration\n\nAt minimum, you need to configure the Qdrant connection:\n\n```\n```\n\nSources: [README.md65-70](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L65-L70) [README.md133-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L133-L147)\n\n### Custom Tool Descriptions\n\nTo customize how the tools appear to LLM applications, you can set custom tool descriptions:\n\n```\n```\n\nThis can help guide the LLM on how best to use the tools for specific use cases, such as code retrieval or knowledge management.\n\nSources: [README.md164-177](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L164-L177) [tests/test\\_settings.py76-107](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_settings.py#L76-L107)\n\n### Deployment-Specific Configuration\n\nDifferent deployment methods may have different ways of providing environment variables:\n\n1. **Direct environment variables** - Used with `uvx` and direct execution\n2. **Docker environment variables** - Passed to Docker containers using `-e` flags\n3. **Configuration files** - Used with Claude Desktop and VS Code\n\nEach method serves the same purpose - providing values to the settings classes through environment variables.\n\nSources: [README.md61-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L61-L147) [README.md266-305](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L266-L305)\n\n## Integration with System Components\n\nThe settings classes are used to initialize and configure the core system components:\n\n```\n```\n\nSources: [README.md19-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L19-L37)\n\n## Summary\n\nThe configuration system in mcp-server-qdrant provides a flexible, type-safe way to customize the server's behavior through environment variables.",
      "index": 4,
      "token_count": 582,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.3-configuration-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.104563",
        "total_chunks": 6
      },
      "start_char": 7574,
      "end_char": 9577
    },
    {
      "content": "provides a flexible, type-safe way to customize the server's behavior through environment variables. The three main settings classes - `QdrantSettings`, `EmbeddingProviderSettings`, and `ToolSettings` - organize configuration by functional area and automatically load values from environment variables using Pydantic's settings system.\n\nThis approach makes it easy to configure the server for different environments and use cases without modifying code, whether running locally with `uvx`, in a Docker container, or integrated with tools like Claude Desktop or VS Code.\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Configuration System](#configuration-system.md)\n- [Configuration Overview](#configuration-overview.md)\n- [Configuration Flow](#configuration-flow.md)\n- [Settings Classes](#settings-classes.md)\n- [Class Structure](#class-structure.md)\n- [QdrantSettings](#qdrantsettings.md)\n- [EmbeddingProviderSettings](#embeddingprovidersettings.md)\n- [ToolSettings](#toolsettings.md)\n- [Environment Variables](#environment-variables.md)\n- [Configuration Loading and Usage](#configuration-loading-and-usage.md)\n- [Configuration Validation](#configuration-validation.md)\n- [Configuration Best Practices](#configuration-best-practices.md)\n- [Minimal Configuration](#minimal-configuration.md)\n- [Custom Tool Descriptions](#custom-tool-descriptions.md)\n- [Deployment-Specific Configuration](#deployment-specific-configuration.md)\n- [Integration with System Components](#integration-with-system-components.md)\n- [Summary](#summary.md)",
      "index": 5,
      "token_count": 321,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_2.3-configuration-system",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "file_name": "_qdrant_mcp-server-qdrant_2.3-configuration-system.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.104563",
        "total_chunks": 6
      },
      "start_char": 9477,
      "end_char": 11525
    },
    {
      "content": "Installation & Deployment | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Installation & Deployment\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [pyproject.toml](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml)\n- [src/mcp\\_server\\_qdrant/main.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/main.py)\n- [uv.lock](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/uv.lock)\n\nThis page provides comprehensive instructions for installing and deploying the mcp-server-qdrant system.",
      "index": 0,
      "token_count": 626,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3-installation-and-deployment",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "file_name": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.138140",
        "total_chunks": 5
      },
      "start_char": 0,
      "end_char": 1992
    },
    {
      "content": "page provides comprehensive instructions for installing and deploying the mcp-server-qdrant system. The document covers various installation methods, configuration options, and client integration approaches. For detailed configuration settings, see [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md).\n\n## Installation Methods\n\nThe mcp-server-qdrant can be installed and run using several methods. Choose the approach that best fits your environment and needs.\n\n### Using uvx (Recommended)\n\nThe simplest way to run mcp-server-qdrant is using `uvx`, which allows direct execution without a separate installation step:\n\n```\n```\n\nThis method requires the `uvx` tool from the `uv` Python package manager to be installed on your system.\n\n### Using Docker\n\nThe repository includes a Dockerfile for containerized deployment:\n\n```\n```\n\nDocker deployment is ideal for production environments or when you need isolation from the host system.\n\n### Installing via Smithery\n\nFor automatic installation with Claude Desktop integration, you can use Smithery:\n\n```\n```\n\nThis installs and configures the MCP server for immediate use with Claude Desktop.\n\n### Manual Installation\n\nYou can install the package directly using pip:\n\n```\n```\n\nThen run it using the installed entry point:\n\n```\n```\n\nSources: [README.md59-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L59-L147) [pyproject.toml1-32](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L1-L32)\n\n## Transport Protocols\n\nThe server supports multiple transport protocols for communication with clients:\n\n```\n```\n\nTo specify a transport protocol, use the `--transport` flag:\n\n```\n```\n\n- `stdio` (default): Standard input/output transport, suitable for local MCP clients\n- `sse`: Server-Sent Events transport, ideal for remote clients (listening on port 8000)\n\nSources: [README.md72-86](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L72-L86) [src/mcp\\_server\\_qdrant/main.py1-25](https://github.",
      "index": 1,
      "token_count": 490,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3-installation-and-deployment",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "file_name": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.138140",
        "total_chunks": 5
      },
      "start_char": 1892,
      "end_char": 3921
    },
    {
      "content": "server-qdrant/blob/a3ab0b96/README.md#L72-L86) [src/mcp\\_server\\_qdrant/main.py1-25](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/main.py#L1-L25)\n\n## Deployment Architecture\n\nThe following diagram illustrates the overall deployment architecture of mcp-server-qdrant:\n\n```\n```\n\nThe deployment consists of:\n\n1. The MCP server that implements the Model Context Protocol\n2. A connection to a Qdrant vector database (either local or hosted)\n3. An embedding provider for converting text to vectors\n4. Client applications that communicate with the server using the MCP protocol\n\nSources: [README.md14-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L14-L38)\n\n## Configuration Flow\n\nThe configuration system uses environment variables to set up the server components:\n\n```\n```\n\nThis shows how environment variables are mapped to settings classes that configure different components of the system.\n\nSources: [README.md39-58](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L58)\n\n## Client Integration Examples\n\n### Claude Desktop Integration\n\nAdd the following to your `claude_desktop_config.json`:\n\n```\n```\n\nFor local Qdrant:\n\n```\n```\n\nSources: [README.md102-152](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L102-L152)\n\n### VS Code Integration\n\nVS Code offers both one-click installation and manual setup options.\n\nFor manual installation, add the following to your VS Code User Settings (JSON):\n\n```\n```\n\nAlternatively, create a `.vscode/mcp.json` file in your workspace with similar configuration.\n\nSources: [README.md257-386](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L257-L386)\n\n### Cursor/Windsurf Integration\n\nFor Cursor and Windsurf, configure the MCP server with SSE transport:\n\n```\n```\n\nThen in Cursor/Windsurf, configure the MCP server using the URL:\n\n```\nhttp://localhost:8000/sse\n```\n\nSources: [README.md158-212](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L158-L212)",
      "index": 2,
      "token_count": 575,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3-installation-and-deployment",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "file_name": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.138140",
        "total_chunks": 5
      },
      "start_char": 3821,
      "end_char": 5851
    },
    {
      "content": "[README.md158-212](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L158-L212)\n\n### Claude Code Integration\n\nAdd the MCP server to Claude Code:\n\n```\n```\n\nSources: [README.md213-247](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L213-L247)\n\n## Development Mode\n\nFor development and testing purposes, use the MCP dev command:\n\n```\n```\n\nThis starts the server and opens the MCP inspector in your browser for testing the API.\n\nSources: [README.md248-256](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L248-L256)\n\n## Client Integration Matrix\n\nThe following table summarizes the integration options for different clients:\n\n| Client          | Transport | Integration Method  | Configuration Location                             |\n| --------------- | --------- | ------------------- | -------------------------------------------------- |\n| Claude Desktop  | stdio     | Smithery or Manual  | claude\\_desktop\\_config.json                       |\n| VS Code         | stdio     | One-click or Manual | User Settings or .vscode/mcp.json                  |\n| Cursor/Windsurf | sse       | Manual              | Cursor settings (URL: <http://localhost:8000/sse>) |\n| Claude Code     | stdio     | Command-line        | claude configuration                               |\n\nThis matrix helps you determine the appropriate deployment approach based on your client application.\n\nSources: [README.md102-247](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L102-L247)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Installation & Deployment](#installation-deployment.md)\n- [Installation Methods](#installation-methods.md)\n- [Using uvx (Recommended)](#using-uvx-recommended.md)\n- [Using Docker](#using-docker.md)\n- [Installing via Smithery](#installing-via-smithery.md)\n- [Manual Installation](#manual-installation.md)\n- [Transport Protocols](#transport-protocols.md)\n- [Deployment Architecture](#deployment-architecture.md)",
      "index": 3,
      "token_count": 513,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3-installation-and-deployment",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "file_name": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.138140",
        "total_chunks": 5
      },
      "start_char": 5751,
      "end_char": 7769
    },
    {
      "content": "nsport Protocols](#transport-protocols.md)\n- [Deployment Architecture](#deployment-architecture.md)\n- [Configuration Flow](#configuration-flow.md)\n- [Client Integration Examples](#client-integration-examples.md)\n- [Claude Desktop Integration](#claude-desktop-integration.md)\n- [VS Code Integration](#vs-code-integration.md)\n- [Cursor/Windsurf Integration](#cursorwindsurf-integration.md)\n- [Claude Code Integration](#claude-code-integration.md)\n- [Development Mode](#development-mode.md)\n- [Client Integration Matrix](#client-integration-matrix.md)",
      "index": 4,
      "token_count": 130,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3-installation-and-deployment",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "file_name": "_qdrant_mcp-server-qdrant_3-installation-and-deployment.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.138140",
        "total_chunks": 5
      },
      "start_char": 7669,
      "end_char": 9717
    },
    {
      "content": "Configuration Options | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Configuration Options\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [src/mcp\\_server\\_qdrant/settings.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py)\n\nThis page details all configuration options available for the mcp-server-qdrant. The server's behavior can be customized entirely through environment variables that map to internal settings classes. This page documents all supported environment variables, their purposes, default values, and usage patterns.",
      "index": 0,
      "token_count": 595,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.1-configuration-options",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.171981",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 2025
    },
    {
      "content": "documents all supported environment variables, their purposes, default values, and usage patterns.\n\nFor information about installation and deployment methods, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md), and for details about client integration, see [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md).\n\n## Configuration System Overview\n\nThe mcp-server-qdrant configuration is organized into three logical groups, each managed by a dedicated settings class:\n\n1. **Qdrant Connection Settings**: Configure how the server connects to Qdrant vector database\n2. **Embedding Provider Settings**: Configure which embedding model to use\n3. **Tool Settings**: Customize the descriptions of the MCP tools\n\n## Core Settings Classes\n\nThe configuration system is implemented through three Pydantic settings classes that map environment variables to typed Python objects:\n\n```\n```\n\n**Figure: Settings Class Hierarchy**\n\nSources: [src/mcp\\_server\\_qdrant/settings.py19-63](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L19-L63)\n\n## Environment Variables Reference\n\nThe following table lists all environment variables that can be used to configure the server:\n\n| Environment Variable     | Description                       | Default Value                            | Settings Class            | Required |\n| ------------------------ | --------------------------------- | ---------------------------------------- | ------------------------- | -------- |\n| `QDRANT_URL`             | URL of the Qdrant server          | None                                     | QdrantSettings            | Yes\\*    |\n| `QDRANT_API_KEY`         | API key for the Qdrant server     | None                                     | QdrantSettings            | No       |\n| `COLLECTION_NAME`        | Name of the default collection    | None                                     | QdrantSettings            | Yes      |",
      "index": 1,
      "token_count": 397,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.1-configuration-options",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.171981",
        "total_chunks": 6
      },
      "start_char": 1925,
      "end_char": 3919
    },
    {
      "content": "t collection    | None                                     | QdrantSettings            | Yes      |\n| `QDRANT_LOCAL_PATH`      | Path to local Qdrant database     | None                                     | QdrantSettings            | Yes\\*    |\n| `QDRANT_SEARCH_LIMIT`    | Maximum number of search results  | 10                                       | QdrantSettings            | No       |\n| `QDRANT_READ_ONLY`       | Run in read-only mode             | False                                    | QdrantSettings            | No       |\n| `EMBEDDING_PROVIDER`     | Embedding provider to use         | \"fastembed\"                              | EmbeddingProviderSettings | No       |\n| `EMBEDDING_MODEL`        | Name of the embedding model       | \"sentence-transformers/all-MiniLM-L6-v2\" | EmbeddingProviderSettings | No       |\n| `TOOL_STORE_DESCRIPTION` | Custom description for store tool | See below                                | ToolSettings              | No       |\n| `TOOL_FIND_DESCRIPTION`  | Custom description for find tool  | See below                                | ToolSettings              | No       |\n\n\\* Either `QDRANT_URL` or `QDRANT_LOCAL_PATH` must be provided, but not both.\n\nSources: [src/mcp\\_server\\_qdrant/settings.py19-63](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L19-L63) [README.md39-54](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L54)\n\n### Default Tool Descriptions\n\nThe default tool descriptions are defined in [src/mcp\\_server\\_qdrant/settings.py8-16](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L8-L16):\n\nFor `TOOL_STORE_DESCRIPTION`:\n\n```\nKeep the memory for later use, when you are asked to remember something.\n```\n\nFor `TOOL_FIND_DESCRIPTION`:\n\n```\nLook up memories in Qdrant. Use this tool when you need to:\n - Find memories by their content\n - Access memories for further analysis\n - Get some personal information about the user\n```",
      "index": 2,
      "token_count": 500,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.1-configuration-options",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.171981",
        "total_chunks": 6
      },
      "start_char": 3819,
      "end_char": 5830
    },
    {
      "content": "ontent\n - Access memories for further analysis\n - Get some personal information about the user\n```\n\nSources: [src/mcp\\_server\\_qdrant/settings.py8-16](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L8-L16)\n\n## Configuration Flow\n\nThe following diagram illustrates how environment variables flow through the system to configure its behavior:\n\n```\n```\n\n**Figure: Configuration Flow Through System Components**\n\nSources: [src/mcp\\_server\\_qdrant/settings.py19-63](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/settings.py#L19-L63) [README.md39-54](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L54)\n\n## Configuration Examples\n\n### Basic Qdrant Cloud Configuration\n\n```\n```\n\n### Local Qdrant Configuration\n\n```\n```\n\n### In-Memory Configuration (for Testing)\n\n```\n```\n\n### Custom Embedding Model Configuration\n\n```\n```\n\nSources: [README.md62-70](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L62-L70) [README.md112-152](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L112-L152)\n\n## Configuration Use Cases\n\n### Customizing Tool Descriptions for Code Search\n\nCustomizing the tool descriptions can adapt the server for specific use cases, such as code search:\n\n```\n```\n\nSources: [README.md166-178](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L166-L178)\n\n## Integration with Deployment Methods\n\nThe following diagram shows how configuration options integrate with different deployment methods:\n\n```\n```\n\n**Figure: Configuration Integration with Deployment Methods**\n\nSources: [README.md59-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L59-L147) [README.md156-187](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L156-L187)\n\n## Configuration Method Evolution\n\n> \\[!IMPORTANT] Command-line arguments are not supported anymore! Please use environment variables for all configuration.",
      "index": 3,
      "token_count": 582,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.1-configuration-options",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.171981",
        "total_chunks": 6
      },
      "start_char": 5730,
      "end_char": 7723
    },
    {
      "content": "-line arguments are not supported anymore! Please use environment variables for all configuration.\n\nAll configuration must be done through environment variables. The system previously supported command-line arguments, but this approach has been deprecated in favor of environment variables for consistency across deployment methods.\n\nSources: [README.md56-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L56-L57)\n\n## Important Constraints\n\n1. You cannot provide both `QDRANT_URL` and `QDRANT_LOCAL_PATH` at the same time.\n2. If no `COLLECTION_NAME` is provided, the server will require it as a parameter to the tools.\n3. For production use with Qdrant Cloud, both `QDRANT_URL` and `QDRANT_API_KEY` should be provided.\n\nSources: [README.md54](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L54-L54)\n\n## Client-Specific Configuration\n\n### Claude Desktop Configuration\n\nAdd the following to your `claude_desktop_config.json` file:\n\n```\n```\n\nSources: [README.md118-130](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L118-L130)\n\n### VS Code Configuration\n\nAdd the following to your VS Code settings or `.vscode/mcp.json` file:\n\n```\n```\n\nSources: [README.md356-386](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L356-L386)\n\n## Development Configuration\n\nWhen developing or testing the server, you can use the MCP inspector:\n\n```\n```\n\nThis runs the server with an in-memory Qdrant database and opens the MCP inspector in your browser for interactive testing.\n\nSources: [README.md444-447](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L444-L447)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Configuration Options](#configuration-options.md)\n- [Configuration System Overview](#configuration-system-overview.md)\n- [Core Settings Classes](#core-settings-classes.md)\n- [Environment Variables Reference](#environment-variables-reference.md)\n- [Default Tool Descriptions](#default-tool-descriptions.md)",
      "index": 4,
      "token_count": 538,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.1-configuration-options",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.171981",
        "total_chunks": 6
      },
      "start_char": 7623,
      "end_char": 9652
    },
    {
      "content": "](#environment-variables-reference.md)\n- [Default Tool Descriptions](#default-tool-descriptions.md)\n- [Configuration Flow](#configuration-flow.md)\n- [Configuration Examples](#configuration-examples.md)\n- [Basic Qdrant Cloud Configuration](#basic-qdrant-cloud-configuration.md)\n- [Local Qdrant Configuration](#local-qdrant-configuration.md)\n- [In-Memory Configuration (for Testing)](#in-memory-configuration-for-testing.md)\n- [Custom Embedding Model Configuration](#custom-embedding-model-configuration.md)\n- [Configuration Use Cases](#configuration-use-cases.md)\n- [Customizing Tool Descriptions for Code Search](#customizing-tool-descriptions-for-code-search.md)\n- [Integration with Deployment Methods](#integration-with-deployment-methods.md)\n- [Configuration Method Evolution](#configuration-method-evolution.md)\n- [Important Constraints](#important-constraints.md)\n- [Client-Specific Configuration](#client-specific-configuration.md)\n- [Claude Desktop Configuration](#claude-desktop-configuration.md)\n- [VS Code Configuration](#vs-code-configuration.md)\n- [Development Configuration](#development-configuration.md)",
      "index": 5,
      "token_count": 243,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.1-configuration-options",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.1-configuration-options.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.171981",
        "total_chunks": 6
      },
      "start_char": 9552,
      "end_char": 11600
    },
    {
      "content": "Client Integration | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Client Integration\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [src/mcp\\_server\\_qdrant/main.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/main.py)\n\nThis page describes how to integrate the Qdrant MCP server with various LLM applications and development environments. It covers configuration methods for different client tools, transport protocol options, and specific integration patterns for each supported client application.",
      "index": 0,
      "token_count": 587,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.2-client-integration",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.212583",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 1983
    },
    {
      "content": "ansport protocol options, and specific integration patterns for each supported client application.\n\nFor details on server installation and deployment methods, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md).\n\n## Supported Clients and Integration Methods\n\nThe Qdrant MCP server can be integrated with various client applications that support the Model Context Protocol. Each client offers different integration methods:\n\n### Client Integration Overview\n\n```\n```\n\nSources: [README.md105-149](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L105-L149) [README.md156-212](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L156-L212) [README.md213-257](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L213-L257) [README.md258-431](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L258-L431)\n\n## Transport Protocols\n\nThe MCP server supports different transport protocols for communication with clients:\n\n### Transport Protocol Selection\n\n```\n```\n\nSources: [README.md72-87](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L72-L87) [src/mcp\\_server\\_qdrant/main.py11-18](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/main.py#L11-L18)\n\n| Protocol        | Description           | Use Case       | Configuration       |\n| --------------- | --------------------- | -------------- | ------------------- |\n| stdio (default) | Standard input/output | Local clients  | `--transport stdio` |\n| sse             | Server-Sent Events    | Remote clients | `--transport sse`   |\n\n## Claude Desktop Integration\n\nClaude Desktop can be integrated with the Qdrant MCP server in two ways:\n\n### Smithery Installation (Recommended)\n\nSmithery provides a streamlined installation process:\n\n```\n```\n\nSources: [README.md105-111](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L105-L111)\n\n### Manual Configuration\n\nTo manually configure Claude Desktop:\n\n1.",
      "index": 1,
      "token_count": 569,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.2-client-integration",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.212583",
        "total_chunks": 6
      },
      "start_char": 1883,
      "end_char": 3902
    },
    {
      "content": "b/a3ab0b96/README.md#L105-L111)\n\n### Manual Configuration\n\nTo manually configure Claude Desktop:\n\n1. Locate your `claude_desktop_config.json` file\n2. Add the Qdrant server configuration to the \"mcpServers\" section:\n\n```\n```\n\nFor local Qdrant mode:\n\n```\n```\n\nSources: [README.md114-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L114-L147)\n\n## Cursor/Windsurf Integration\n\nCursor and Windsurf can be configured to use the MCP server as a code search tool.\n\n### Setup Process\n\n1. Start the MCP server with customized tool descriptions for code search:\n\n```\n```\n\n2. In Cursor/Windsurf, configure the MCP server in settings by pointing to the running server using the URL:\n\n```\nhttp://localhost:8000/sse\n```\n\nSources: [README.md160-187](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L160-L187)\n\n### Usage in Cursor/Windsurf\n\nWith this configuration, the Qdrant MCP server acts as a specialized code search tool that can:\n\n- Store code snippets with natural language descriptions\n- Retrieve relevant code examples based on semantic search\n- Provide a persistent memory for code patterns and solutions\n\nFor best results, create [Cursor rules](https://docs.cursor.com/context/rules-for-ai) to ensure the MCP tools are always used when generating new code snippets.\n\nSources: [README.md189-212](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L189-L212)\n\n## VS Code Integration\n\nVS Code provides multiple methods for integrating with the Qdrant MCP server.\n\n### One-Click Installation\n\nVS Code and VS Code Insiders offer one-click installation options:\n\n- VS Code with UVX\n- VS Code Insiders with UVX\n- VS Code with Docker\n- VS Code Insiders with Docker\n\nThese installation methods are available as buttons in the VS Code documentation.\n\nSources: [README.md260-263](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L260-L263)\n\n### Manual Installation\n\nTo manually configure VS Code:\n\n1.",
      "index": 2,
      "token_count": 538,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.2-client-integration",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.212583",
        "total_chunks": 6
      },
      "start_char": 3802,
      "end_char": 5767
    },
    {
      "content": "rant/blob/a3ab0b96/README.md#L260-L263)\n\n### Manual Installation\n\nTo manually configure VS Code:\n\n1. Add the configuration to User Settings (JSON) by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`:\n\n```\n```\n\nAlternatively, create a `.vscode/mcp.json` file in your workspace with similar configuration.\n\nSources: [README.md265-385](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L265-L385)\n\n## Claude Code Integration\n\nClaude Code can be enhanced with the Qdrant MCP server for semantic search capabilities.\n\n### Setup Process\n\n1. Add the MCP server to Claude Code:\n\n```\n```\n\n2. Verify the server was added:\n\n```\n```\n\nSources: [README.md217-237](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L217-L237)\n\n## Common Integration Patterns\n\nThe integration of the Qdrant MCP server with various clients follows common patterns, particularly for code storage and retrieval.\n\n### Code Repository Integration Pattern\n\n```\n```\n\nSources: [README.md168-183](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L168-L183) [README.md193-206](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L193-L206)\n\nWhen configured as a code repository, this pattern enables:\n\n| Parameter       | Usage                                                 |\n| --------------- | ----------------------------------------------------- |\n| `information`   | Natural language description of code functionality    |\n| `metadata.code` | Actual code snippet to be stored                      |\n| `query`         | Natural language description of desired functionality |\n\n## Development and Testing\n\nFor development and testing purposes, you can run the MCP server in development mode with the MCP inspector:\n\n```\n```\n\nThis starts the server and opens the MCP inspector in your browser at <http://localhost:5173>, which provides an interface for testing and debugging tool interactions.\n\nSources: [README.md249-256](https://github.",
      "index": 3,
      "token_count": 510,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.2-client-integration",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.212583",
        "total_chunks": 6
      },
      "start_char": 5667,
      "end_char": 7668
    },
    {
      "content": "interface for testing and debugging tool interactions.\n\nSources: [README.md249-256](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L249-L256) [README.md444-450](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L444-L450)\n\n## Troubleshooting\n\n### Common Issues\n\n- If the MCP server doesn't appear to be used in Cursor, check that you have configured proper [Cursor rules](https://docs.cursor.com/context/rules-for-ai)\n- For VS Code integration issues, verify that the MCP extension is properly installed and configured\n- When using SSE transport, ensure port 8000 is accessible to the client\n- For Claude Desktop integration, check that the configuration JSON is correctly formatted and in the right location\n\nSources: [README.md208-212](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L208-L212)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Client Integration](#client-integration.md)\n- [Supported Clients and Integration Methods](#supported-clients-and-integration-methods.md)\n- [Client Integration Overview](#client-integration-overview.md)\n- [Transport Protocols](#transport-protocols.md)\n- [Transport Protocol Selection](#transport-protocol-selection.md)\n- [Claude Desktop Integration](#claude-desktop-integration.md)\n- [Smithery Installation (Recommended)](#smithery-installation-recommended.md)\n- [Manual Configuration](#manual-configuration.md)\n- [Cursor/Windsurf Integration](#cursorwindsurf-integration.md)\n- [Setup Process](#setup-process.md)\n- [Usage in Cursor/Windsurf](#usage-in-cursorwindsurf.md)\n- [VS Code Integration](#vs-code-integration.md)\n- [One-Click Installation](#one-click-installation.md)\n- [Manual Installation](#manual-installation.md)\n- [Claude Code Integration](#claude-code-integration.md)\n- [Setup Process](#setup-process-1.md)\n- [Common Integration Patterns](#common-integration-patterns.md)\n- [Code Repository Integration Pattern](#code-repository-integration-pattern.md)\n- [Development and Testing](#development-and-testing.",
      "index": 4,
      "token_count": 528,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.2-client-integration",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.212583",
        "total_chunks": 6
      },
      "start_char": 7568,
      "end_char": 9617
    },
    {
      "content": "tern](#code-repository-integration-pattern.md)\n- [Development and Testing](#development-and-testing.md)\n- [Troubleshooting](#troubleshooting.md)\n- [Common Issues](#common-issues.md)",
      "index": 5,
      "token_count": 46,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_3.2-client-integration",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "file_name": "_qdrant_mcp-server-qdrant_3.2-client-integration.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.212583",
        "total_chunks": 6
      },
      "start_char": 9517,
      "end_char": 11565
    },
    {
      "content": "API Reference | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# API Reference\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [src/mcp\\_server\\_qdrant/mcp\\_server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py)\n\nThis document provides a comprehensive overview of the Model Context Protocol (MCP) API for the mcp-server-qdrant system. It documents the available tools, their parameters, and how they interact with the Qdrant vector database. For detailed information about individual tools, see [qdrant-store Tool](qdrant/mcp-server-qdrant/4.",
      "index": 0,
      "token_count": 622,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4-api-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.234028",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 2034
    },
    {
      "content": "For detailed information about individual tools, see [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md) and [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md).\n\n## Available Tools\n\nThe mcp-server-qdrant exposes two primary MCP tools:\n\n| Tool Name      | Purpose                                         | Key Parameters                                          |\n| -------------- | ----------------------------------------------- | ------------------------------------------------------- |\n| `qdrant-store` | Store information in the Qdrant vector database | `information`, `metadata`, `collection_name` (optional) |\n| `qdrant-find`  | Retrieve relevant information from the database | `query`, `collection_name` (optional)                   |\n\nSources: [README.md22-38](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L22-L38)\n\n## API Architecture\n\n### Tool Integration in MCP Server\n\n```\n```\n\nThe diagram shows how client applications interact with the MCP tools provided by QdrantMCPServer. Each tool calls specific methods in the QdrantConnector, which handles the interaction with the Qdrant database and the EmbeddingProvider.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py18-20](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L18-L20) [src/mcp\\_server\\_qdrant/mcp\\_server.py58-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L58-L169)\n\n### Tool Registration Flow\n\n```\n```\n\nThis diagram illustrates the tool registration logic in the `setup_tools()` method, showing how different tools are registered based on configuration settings.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py142-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L142-L169)\n\n## Data Flow\n\n### qdrant-store Data Flow\n\n```\n```\n\nThis diagram shows the data flow when using the `qdrant-store` tool, from client request to storage in the Qdrant database.",
      "index": 1,
      "token_count": 541,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4-api-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.234028",
        "total_chunks": 6
      },
      "start_char": 1934,
      "end_char": 3972
    },
    {
      "content": "ta flow when using the `qdrant-store` tool, from client request to storage in the Qdrant database.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py63-89](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L89) [src/mcp\\_server\\_qdrant/mcp\\_server.py90-99](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L90-L99)\n\n### qdrant-find Data Flow\n\n```\n```\n\nThis diagram illustrates the data flow when using the `qdrant-find` tool, from search query to retrieving and formatting results.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py100-132](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L100-L132) [src/mcp\\_server\\_qdrant/mcp\\_server.py133-139](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L133-L139) [src/mcp\\_server\\_qdrant/mcp\\_server.py51-56](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L51-L56)\n\n## Tool Parameters\n\n### qdrant-store Parameters\n\n| Parameter         | Type   | Required    | Description                                              |\n| ----------------- | ------ | ----------- | -------------------------------------------------------- |\n| `information`     | string | Yes         | The content to be stored in the database                 |\n| `metadata`        | JSON   | No          | Additional structured data to associate with the content |\n| `collection_name` | string | Conditional | Required if no default collection is configured          |\n\nThe tool returns a confirmation message indicating that the information was successfully stored.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py63-71](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L71) [README.md23-30](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L23-L30)\n\n### qdrant-find Parameters",
      "index": 2,
      "token_count": 601,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4-api-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.234028",
        "total_chunks": 6
      },
      "start_char": 3872,
      "end_char": 5861
    },
    {
      "content": "//github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L23-L30)\n\n### qdrant-find Parameters\n\n| Parameter         | Type   | Required    | Description                                        |\n| ----------------- | ------ | ----------- | -------------------------------------------------- |\n| `query`           | string | Yes         | The search query used to find relevant information |\n| `collection_name` | string | Conditional | Required if no default collection is configured    |\n\nThe tool returns a list of entries that match the query, formatted according to the `format_entry` method.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py100-105](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L100-L105) [README.md31-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L31-L37)\n\n## Response Format\n\nWhen using the `qdrant-find` tool, results are returned as a list of formatted entries. Each entry is formatted as:\n\n```\n<entry><content>The stored information</content><metadata>{\"any\": \"metadata\", \"as\": \"JSON\"}</metadata></entry>\n```\n\nThe first message always contains the text: `Results for the query '{query}'`. If no results are found, the response will be: `No information found for the query '{query}'`.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py51-56](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L51-L56) [src/mcp\\_server\\_qdrant/mcp\\_server.py124-131](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L124-L131)\n\n## Example Usage\n\n### Basic Usage Examples\n\n**Storing Information:**\n\n```\nqdrant-store(\n  information=\"The capital of France is Paris.\",\n  metadata={\"category\": \"geography\", \"confidence\": \"high\"}\n)\n```\n\n**Finding Information:**\n\n```\nqdrant-find(query=\"What is the capital of France?\")\n```\n\n### Common Use Cases\n\n1. **Knowledge Base Creation and Retrieval:**\n\n   - Store facts, knowledge, or documentation",
      "index": 3,
      "token_count": 559,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4-api-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.234028",
        "total_chunks": 6
      },
      "start_char": 5761,
      "end_char": 7768
    },
    {
      "content": "Cases\n\n1. **Knowledge Base Creation and Retrieval:**\n\n   - Store facts, knowledge, or documentation\n   - Retrieve relevant information based on semantic search\n\n2. **Code Snippet Management:**\n\n   - Store code snippets with descriptions\n   - Retrieve snippets based on functionality needs\n\n3. **Conversation Memory:**\n\n   - Store important parts of conversations\n   - Retrieve context from previous exchanges\n\nSources: [README.md14-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L14-L17) [README.md166-197](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L166-L197)\n\n## Configuration Impact on API\n\nThe API behavior is affected by several environment variables:\n\n| Environment Variable     | Effect on API                                                      |\n| ------------------------ | ------------------------------------------------------------------ |\n| `COLLECTION_NAME`        | When set, makes `collection_name` parameter optional in both tools |\n| `QDRANT_READ_ONLY`       | When set to `true`, disables the `qdrant-store` tool               |\n| `QDRANT_SEARCH_LIMIT`    | Controls the maximum number of results returned by `qdrant-find`   |\n| `TOOL_STORE_DESCRIPTION` | Customizes the description of the `qdrant-store` tool              |\n| `TOOL_FIND_DESCRIPTION`  | Customizes the description of the `qdrant-find` tool               |\n\nFor a complete list of configuration options, see [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md).\n\nSources: [README.md39-53](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L53) [src/mcp\\_server\\_qdrant/mcp\\_server.py142-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L142-L169)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [API Reference](#api-reference.md)\n- [Available Tools](#available-tools.md)\n- [API Architecture](#api-architecture.md)\n- [Tool Integration in MCP Server](#tool-integration-in-mcp-server.md)",
      "index": 4,
      "token_count": 529,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4-api-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.234028",
        "total_chunks": 6
      },
      "start_char": 7668,
      "end_char": 9713
    },
    {
      "content": "cture](#api-architecture.md)\n- [Tool Integration in MCP Server](#tool-integration-in-mcp-server.md)\n- [Tool Registration Flow](#tool-registration-flow.md)\n- [Data Flow](#data-flow.md)\n- [qdrant-store Data Flow](#qdrant-store-data-flow.md)\n- [qdrant-find Data Flow](#qdrant-find-data-flow.md)\n- [Tool Parameters](#tool-parameters.md)\n- [qdrant-store Parameters](#qdrant-store-parameters.md)\n- [qdrant-find Parameters](#qdrant-find-parameters.md)\n- [Response Format](#response-format.md)\n- [Example Usage](#example-usage.md)\n- [Basic Usage Examples](#basic-usage-examples.md)\n- [Common Use Cases](#common-use-cases.md)\n- [Configuration Impact on API](#configuration-impact-on-api.md)",
      "index": 5,
      "token_count": 193,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4-api-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4-api-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_4-api-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.234028",
        "total_chunks": 6
      },
      "start_char": 9613,
      "end_char": 11661
    },
    {
      "content": "qdrant-store Tool | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# qdrant-store Tool\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [src/mcp\\_server\\_qdrant/mcp\\_server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py)\n\n## Purpose and Scope\n\nThe `qdrant-store` tool enables applications to store text information and optional metadata in the Qdrant vector database with semantic meaning preserved through vector embeddings.",
      "index": 0,
      "token_count": 591,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.374442",
        "total_chunks": 7
      },
      "start_char": 0,
      "end_char": 1916
    },
    {
      "content": "al metadata in the Qdrant vector database with semantic meaning preserved through vector embeddings. This tool is one of the two primary tools provided by the mcp-server-qdrant, with the other being the `qdrant-find` tool (see [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md) for more details on retrieving stored information).\n\nThe tool's primary purpose is to create persistent memory for LLM applications by storing information that can later be retrieved based on semantic similarity rather than exact keyword matching.\n\nSources: [README.md22-30](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L22-L30) [src/mcp\\_server\\_qdrant/mcp\\_server.py63-88](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L88)\n\n## Parameters and Usage\n\nThe `qdrant-store` tool accepts the following parameters:\n\n| Parameter         | Type   | Required    | Description                                             |\n| ----------------- | ------ | ----------- | ------------------------------------------------------- |\n| `information`     | string | Yes         | The text content to store in the vector database        |\n| `metadata`        | JSON   | No          | Optional structured data to store alongside the content |\n| `collection_name` | string | Conditional | Required only if no default collection is configured    |\n\n### Parameter Details\n\n- **information**: The text content that will be converted to a vector embedding and stored in Qdrant. This is the primary data that will be returned in search results.\n- **metadata**: Optional JSON object containing additional structured data you want to associate with the text content. This can include tags, timestamps, source references, or any other organizational data.\n- **collection\\_name**: The name of the Qdrant collection in which to store the information. This parameter is conditionally required - if you've configured the server with a default collection name, this parameter will not be available.",
      "index": 1,
      "token_count": 448,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.374442",
        "total_chunks": 7
      },
      "start_char": 1816,
      "end_char": 3853
    },
    {
      "content": "you've configured the server with a default collection name, this parameter will not be available.\n\nSources: [README.md22-30](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L22-L30) [src/mcp\\_server\\_qdrant/mcp\\_server.py63-88](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L88)\n\n## Implementation Flow\n\nThe following diagram illustrates how the `qdrant-store` tool processes and stores information:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py63-88](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L88) [README.md22-30](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L22-L30)\n\n## Internal Architecture\n\nThe following class diagram shows how the `qdrant-store` tool is implemented within the system architecture:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py20-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L20-L169)\n\n## Configuration Options\n\nThe behavior of the `qdrant-store` tool can be customized using several environment variables:\n\n| Environment Variable     | Description                          | Default                                  | Effect on qdrant-store                              |\n| ------------------------ | ------------------------------------ | ---------------------------------------- | --------------------------------------------------- |\n| `QDRANT_URL`             | URL of the Qdrant server             | None                                     | Defines where information is stored                 |\n| `QDRANT_API_KEY`         | API key for the Qdrant server        | None                                     | Authentication for storage operations               |\n| `COLLECTION_NAME`        | Default collection name              | None                                     | When set, the `collection_name` parameter is hidden |",
      "index": 2,
      "token_count": 486,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.374442",
        "total_chunks": 7
      },
      "start_char": 3753,
      "end_char": 5742
    },
    {
      "content": "| None                                     | When set, the `collection_name` parameter is hidden |\n| `QDRANT_LOCAL_PATH`      | Path to local Qdrant database        | None                                     | Alternative to `QDRANT_URL` for local storage       |\n| `QDRANT_READ_ONLY`       | Set server to read-only mode         | False                                    | When `true`, disables the `qdrant-store` tool       |\n| `EMBEDDING_MODEL`        | Model used for generating embeddings | `sentence-transformers/all-MiniLM-L6-v2` | Affects how text is converted to vectors            |\n| `TOOL_STORE_DESCRIPTION` | Custom description for the tool      | Default in settings.py                   | Modifies how the tool appears to users              |\n\n### Important Configuration Details\n\n1. If `QDRANT_READ_ONLY` is set to `true`, the `qdrant-store` tool will not be available.\n2. If `COLLECTION_NAME` is provided, the `collection_name` parameter will not be available to users, and all storage operations will use the default collection.\n3. You cannot provide both `QDRANT_URL` and `QDRANT_LOCAL_PATH` simultaneously.\n\nSources: [README.md39-54](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L54) [src/mcp\\_server\\_qdrant/mcp\\_server.py155-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L155-L169)\n\n## Tool Registration Logic\n\nThe following flowchart illustrates how the `qdrant-store` tool is registered in the server based on configuration:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py155-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L155-L169)\n\n## Usage Examples\n\n### Basic Usage\n\nWhen storing simple text without metadata:\n\n```\nqdrant-store(\n  information: \"The Python language was created by Guido van Rossum and first released in 1991.\"\n)\n```\n\nResponse: `\"Remembered: The Python language was created by Guido van Rossum and first released in 1991.\"`\n\n### With Metadata",
      "index": 3,
      "token_count": 537,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.374442",
        "total_chunks": 7
      },
      "start_char": 5642,
      "end_char": 7674
    },
    {
      "content": "e Python language was created by Guido van Rossum and first released in 1991.\"`\n\n### With Metadata\n\nStoring information with optional metadata:\n\n```\nqdrant-store(\n  information: \"Python uses indentation for scope such as loops and functions\",\n  metadata: {\n    \"language\": \"Python\",\n    \"category\": \"syntax\",\n    \"importance\": \"high\"\n  }\n)\n```\n\nResponse: `\"Remembered: Python uses indentation for scope such as loops and functions\"`\n\n### With Custom Collection\n\nWhen no default collection is configured:\n\n```\nqdrant-store(\n  information: \"FastAPI is a modern Python web framework for building APIs\",\n  metadata: {\"framework\": \"FastAPI\", \"purpose\": \"API development\"},\n  collection_name: \"python_frameworks\"\n)\n```\n\nResponse: `\"Remembered: FastAPI is a modern Python web framework for building APIs in collection python_frameworks\"`\n\nSources: [README.md22-30](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L22-L30) [src/mcp\\_server\\_qdrant/mcp\\_server.py63-88](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L88)\n\n## Use Case: Code Snippet Storage\n\nThe `qdrant-store` tool can be configured for specialized use cases, such as storing code snippets for later retrieval. The following diagram shows how to structure this use case:\n\n```\n```\n\nThis approach allows for natural language querying of code snippets, where:\n\n1. The description is used to generate the vector embedding for semantic search\n2. The actual code and additional metadata are stored in the payload\n3. When retrieved with `qdrant-find`, both the description and code are available\n\nSources: [README.md160-199](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L160-L199)\n\n## Best Practices\n\n1. **Meaningful Information**: Provide clear, descriptive information that captures the semantic meaning you want to retrieve later.\n\n2. **Structured Metadata**: Use consistent metadata schemas to enable more advanced filtering when retrieving information.\n\n3.",
      "index": 4,
      "token_count": 500,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.374442",
        "total_chunks": 7
      },
      "start_char": 7574,
      "end_char": 9580
    },
    {
      "content": ": Use consistent metadata schemas to enable more advanced filtering when retrieving information.\n\n3. **Collection Organization**: Use separate collections for different types of information or contexts (e.g., code snippets, documentation, project notes).\n\n4. **Information Size**: Keep individual entries reasonably sized - very large text blocks may not embed as effectively.\n\n5. **Contextual Information**: Include relevant context in the information field to improve retrieval accuracy.\n\nSources: [README.md160-199](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L160-L199) [src/mcp\\_server\\_qdrant/mcp\\_server.py63-88](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L63-L88)\n\n## Common Issues and Troubleshooting\n\n| Issue                         | Possible Cause                   | Solution                                                                          |\n| ----------------------------- | -------------------------------- | --------------------------------------------------------------------------------- |\n| Tool not available            | Server in read-only mode         | Check `QDRANT_READ_ONLY` setting                                                  |\n| Collection parameter missing  | Default collection configured    | This is expected behavior; use the default collection                             |\n| Collection parameter required | No default collection configured | Provide `collection_name` parameter or set `COLLECTION_NAME` environment variable |\n| Connection errors             | Incorrect Qdrant URL or API key  | Verify `QDRANT_URL` and `QDRANT_API_KEY` settings                                 |\n| Permission errors             | Missing write permissions        | Check Qdrant permissions for your API key                                         |\n\nSources: [README.md39-54](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L39-L54) [src/mcp\\_server\\_qdrant/mcp\\_server.py155-169](https://github.",
      "index": 5,
      "token_count": 415,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.374442",
        "total_chunks": 7
      },
      "start_char": 9480,
      "end_char": 11504
    },
    {
      "content": "ant/blob/a3ab0b96/README.md#L39-L54) [src/mcp\\_server\\_qdrant/mcp\\_server.py155-169](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L155-L169)\n\n## Related Components\n\nThe `qdrant-store` tool works closely with:\n\n1. The `qdrant-find` tool (see [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)) for retrieving stored information\n2. The embedding system (see [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)) for converting text to vector embeddings\n3. The QdrantConnector (see [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)) for interaction with the Qdrant database\n\nSources: [README.md19-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L19-L37)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [qdrant-store Tool](#qdrant-store-tool.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Parameters and Usage](#parameters-and-usage.md)\n- [Parameter Details](#parameter-details.md)\n- [Implementation Flow](#implementation-flow.md)\n- [Internal Architecture](#internal-architecture.md)\n- [Configuration Options](#configuration-options.md)\n- [Important Configuration Details](#important-configuration-details.md)\n- [Tool Registration Logic](#tool-registration-logic.md)\n- [Usage Examples](#usage-examples.md)\n- [Basic Usage](#basic-usage.md)\n- [With Metadata](#with-metadata.md)\n- [With Custom Collection](#with-custom-collection.md)\n- [Use Case: Code Snippet Storage](#use-case-code-snippet-storage.md)\n- [Best Practices](#best-practices.md)\n- [Common Issues and Troubleshooting](#common-issues-and-troubleshooting.md)\n- [Related Components](#related-components.md)",
      "index": 6,
      "token_count": 496,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.1-qdrant-store-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.374442",
        "total_chunks": 7
      },
      "start_char": 11404,
      "end_char": 13452
    },
    {
      "content": "qdrant-find Tool | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# qdrant-find Tool\n\nRelevant source files\n\n- [README.md](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md)\n- [src/mcp\\_server\\_qdrant/mcp\\_server.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py)\n\n## Purpose and Overview\n\nThe `qdrant-find` tool is a core component of the mcp-server-qdrant system that enables semantic search capabilities within a Qdrant vector database.",
      "index": 0,
      "token_count": 593,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.393971",
        "total_chunks": 5
      },
      "start_char": 0,
      "end_char": 1885
    },
    {
      "content": "mcp-server-qdrant system that enables semantic search capabilities within a Qdrant vector database. This tool allows LLM applications to retrieve information previously stored in the database based on the semantic meaning of a query, rather than exact keyword matching.\n\nThis page documents the `qdrant-find` tool specifically. For information about storing information in the Qdrant database, see the [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md) page.\n\nSources: [README.md31-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L31-L37)\n\n## How It Works\n\nThe `qdrant-find` tool operates by converting natural language queries into vector embeddings, then using these embeddings to perform similarity searches against stored information in the Qdrant vector database.\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py100-138](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L100-L138)\n\n### Technical Implementation\n\nThe `qdrant-find` tool is implemented in the `QdrantMCPServer` class through either the `find` or `find_with_default_collection` functions, depending on whether a default collection name is configured.\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py100-131](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L100-L131) [README.md31-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L31-L37)\n\n## Parameters\n\nThe `qdrant-find` tool accepts the following parameters:\n\n| Parameter         | Type   | Required    | Description                                                                               |\n| ----------------- | ------ | ----------- | ----------------------------------------------------------------------------------------- |\n| `query`           | string | Yes         | The natural language query to search for                                                  |",
      "index": 1,
      "token_count": 483,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.393971",
        "total_chunks": 5
      },
      "start_char": 1785,
      "end_char": 3755
    },
    {
      "content": "| The natural language query to search for                                                  |\n| `collection_name` | string | Conditional | Name of the collection to search in. Required only if no default collection is configured |\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py101-104](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L101-L104) [README.md33-36](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L33-L36)\n\n## Return Value\n\nThe tool returns a list of strings containing:\n\n1. A header message indicating the query that was used\n2. Zero or more formatted entries that match the query\n3. If no entries are found, a message indicating no information was found\n\nEach entry is formatted by the `format_entry` method, which by default returns a string in the following format:\n\n```\n<entry><content>The content of the entry</content><metadata>{\"metadata_field\": \"value\"}</metadata></entry>\n```\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py51-56](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L51-L56) [src/mcp\\_server\\_qdrant/mcp\\_server.py119-131](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L119-L131)\n\n## Configuration\n\nThe `qdrant-find` tool can be configured using several environment variables:\n\n| Environment Variable    | Description                                | Default                                  |\n| ----------------------- | ------------------------------------------ | ---------------------------------------- |\n| `QDRANT_URL`            | URL of the Qdrant server                   | None                                     |\n| `QDRANT_API_KEY`        | API key for the Qdrant server              | None                                     |\n| `COLLECTION_NAME`       | Default collection name to use             | None                                     |",
      "index": 2,
      "token_count": 481,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.393971",
        "total_chunks": 5
      },
      "start_char": 3655,
      "end_char": 5619
    },
    {
      "content": "ME`       | Default collection name to use             | None                                     |\n| `QDRANT_SEARCH_LIMIT`   | Maximum number of search results to return | (Not specified in provided files)        |\n| `TOOL_FIND_DESCRIPTION` | Custom description for the find tool       | (Default in settings.py)                 |\n| `EMBEDDING_PROVIDER`    | Embedding provider to use                  | `fastembed`                              |\n| `EMBEDDING_MODEL`       | Name of the embedding model to use         | `sentence-transformers/all-MiniLM-L6-v2` |\n\nSources: [README.md43-52](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L43-L52)\n\n## Usage Examples\n\n### Basic Usage with Default Collection\n\nWhen a default collection is configured:\n\n```\nqdrant-find(\"How to implement a binary search algorithm?\")\n```\n\n### Specifying a Collection\n\nWhen no default collection is configured, or to override the default:\n\n```\nqdrant-find(\"How to implement a binary search algorithm?\", \"code-examples\")\n```\n\n### Integration in Cursor/Windsurf\n\nThe `qdrant-find` tool can be customized for specific use cases, such as code search in Cursor/Windsurf, by modifying the tool description:\n\n```\n```\n\nSources: [README.md166-178](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L166-L178)\n\n## Implementation Details\n\nThe search operation is performed through several key steps:\n\n1. The query string is converted to a vector embedding using the configured embedding provider\n2. The QdrantConnector's search method is called with the query, collection name, and limit\n3. The Qdrant database performs a similarity search on the vector embeddings\n4. Matching entries are returned to the server\n5. The server formats each entry using the format\\_entry method\n6. A list of formatted strings is returned to the client\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py100-138](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L100-L138)\n\n## Related Components",
      "index": 3,
      "token_count": 508,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.393971",
        "total_chunks": 5
      },
      "start_char": 5519,
      "end_char": 7545
    },
    {
      "content": "-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L100-L138)\n\n## Related Components\n\nThe `qdrant-find` tool relies on two key components:\n\n1. **EmbeddingProvider**: Responsible for converting text queries into vector embeddings\n2. **QdrantConnector**: Handles communication with the Qdrant database, including vector similarity searches\n\nFor more information about the embedding system, see the [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md) page. For more details about the QdrantConnector, see the [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md) page.\n\nSources: [src/mcp\\_server\\_qdrant/mcp\\_server.py37-45](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/mcp_server.py#L37-L45) [README.md19-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/README.md#L19-L37)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [qdrant-find Tool](#qdrant-find-tool.md)\n- [Purpose and Overview](#purpose-and-overview.md)\n- [How It Works](#how-it-works.md)\n- [Technical Implementation](#technical-implementation.md)\n- [Parameters](#parameters.md)\n- [Return Value](#return-value.md)\n- [Configuration](#configuration.md)\n- [Usage Examples](#usage-examples.md)\n- [Basic Usage with Default Collection](#basic-usage-with-default-collection.md)\n- [Specifying a Collection](#specifying-a-collection.md)\n- [Integration in Cursor/Windsurf](#integration-in-cursorwindsurf.md)\n- [Implementation Details](#implementation-details.md)\n- [Related Components](#related-components.md)",
      "index": 4,
      "token_count": 443,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "file_name": "_qdrant_mcp-server-qdrant_4.2-qdrant-find-tool.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.393971",
        "total_chunks": 5
      },
      "start_char": 7445,
      "end_char": 9493
    },
    {
      "content": "QdrantConnector Reference | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# QdrantConnector Reference\n\nRelevant source files\n\n- [src/mcp\\_server\\_qdrant/qdrant.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py)\n- [tests/test\\_qdrant\\_integration.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py)\n\n## Purpose and Scope\n\nThis technical reference document provides detailed information about the `QdrantConnector` class, which serves as the interface between the MCP Server and the Qdrant vector database. The connector handles vector storage, retrieval, and collection management.",
      "index": 0,
      "token_count": 615,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.419395",
        "total_chunks": 7
      },
      "start_char": 0,
      "end_char": 2049
    },
    {
      "content": "Qdrant vector database. The connector handles vector storage, retrieval, and collection management. For information about embedding generation, see [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md).\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py24-149](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L149)\n\n## Class Overview\n\n```\n```\n\nThe `QdrantConnector` class is responsible for:\n\n- Managing connections to the Qdrant database\n- Creating and managing collections\n- Storing entries with their vector embeddings\n- Performing semantic similarity searches\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py24-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L49)\n\n## Initialization Parameters\n\nThe `QdrantConnector` constructor accepts the following parameters:\n\n| Parameter            | Type                | Description                                     | Required |\n| -------------------- | ------------------- | ----------------------------------------------- | -------- |\n| `qdrant_url`         | `Optional[str]`     | URL of the Qdrant server (remote or `:memory:`) | No       |\n| `qdrant_api_key`     | `Optional[str]`     | API key for the Qdrant server                   | No       |\n| `collection_name`    | `Optional[str]`     | Default collection name                         | No       |\n| `embedding_provider` | `EmbeddingProvider` | Provider for generating embeddings              | Yes      |\n| `qdrant_local_path`  | `Optional[str]`     | Path for local Qdrant storage                   | No       |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py35-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L35-L49)\n\n## Entry Model\n\nThe `Entry` class represents a single item stored in the Qdrant collection:\n\n```\n```\n\n| Field      | Type                 | Description                                            |",
      "index": 1,
      "token_count": 498,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.419395",
        "total_chunks": 7
      },
      "start_char": 1949,
      "end_char": 3927
    },
    {
      "content": "```\n\n| Field      | Type                 | Description                                            |\n| ---------- | -------------------- | ------------------------------------------------------ |\n| `content`  | `str`                | The text content to be embedded and stored             |\n| `metadata` | `Optional[Metadata]` | Additional data associated with the content (optional) |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py15-21](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L15-L21)\n\n## Core Operations\n\n### Store Operation\n\nThe `store` method adds an entry to a Qdrant collection.\n\n```\n```\n\n**Method Signature**:\n\n```\n```\n\n**Parameters**:\n\n- `entry`: The `Entry` object containing content and optional metadata\n- `collection_name`: Optional name of the collection (uses default if not specified)\n\n**Implementation Details**:\n\n1. Determines the collection name to use\n2. Ensures the collection exists (creates it if needed)\n3. Generates embeddings for the entry content\n4. Creates a point with unique ID, embedding vectors, and payload\n5. Stores the point in the Qdrant collection\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py59-87](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L59-L87)\n\n### Search Operation\n\nThe `search` method performs semantic similarity search in a Qdrant collection.\n\n```\n```\n\n**Method Signature**:\n\n```\n```\n\n**Parameters**:\n\n- `query`: The text query to search for\n- `collection_name`: Optional name of the collection (uses default if not specified)\n- `limit`: Maximum number of results to return (default: 10)\n\n**Returns**:\n\n- List of `Entry` objects containing the matched content and metadata\n\n**Implementation Details**:\n\n1. Determines the collection name to use\n2. Checks if the collection exists (returns empty list if not)\n3. Generates embeddings for the query\n4. Performs vector similarity search in the Qdrant collection\n5. Converts the results to `Entry` objects\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.",
      "index": 2,
      "token_count": 498,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.419395",
        "total_chunks": 7
      },
      "start_char": 3827,
      "end_char": 5862
    },
    {
      "content": "ant collection\n5. Converts the results to `Entry` objects\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py89-126](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L89-L126)\n\n## Collection Management\n\n### Get Collection Names\n\nRetrieves all collection names from the Qdrant server.\n\n**Method Signature**:\n\n```\n```\n\n**Returns**:\n\n- List of collection names as strings\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py51-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L51-L57)\n\n### Ensure Collection Exists\n\nInternal method to create a collection if it doesn't exist.\n\n**Method Signature**:\n\n```\n```\n\n**Implementation Details**:\n\n1. Checks if the collection exists\n\n2. If not, creates a new collection with vector configuration:\n\n   - Vector size from the embedding provider\n   - Vector name from the embedding provider\n   - COSINE distance metric\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py128-148](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L128-L148)\n\n## Integration with System Architecture\n\nThe `QdrantConnector` is positioned between the QdrantMCPServer and the Qdrant vector database:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py24-149](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L149)\n\n## Usage Examples\n\n### Basic Store and Search\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.py32-48](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L32-L48)\n\n### Working with Multiple Collections\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.py192-225](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L192-L225)\n\n### Handling Metadata\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.py113-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L113-L147)\n\n## Qdrant Connection Options",
      "index": 3,
      "token_count": 634,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.419395",
        "total_chunks": 7
      },
      "start_char": 5762,
      "end_char": 7770
    },
    {
      "content": "ver-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L113-L147)\n\n## Qdrant Connection Options\n\nThe `QdrantConnector` supports multiple ways to connect to Qdrant:\n\n| Connection Type            | Configuration                                                          |\n| -------------------------- | ---------------------------------------------------------------------- |\n| Remote Qdrant Server       | Set `qdrant_url` to server URL and optionally provide `qdrant_api_key` |\n| Local Qdrant Instance      | Set `qdrant_local_path` to a directory path                            |\n| In-Memory Qdrant (testing) | Set `qdrant_url` to `:memory:`                                         |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py47-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L47-L49) [tests/test\\_qdrant\\_integration.py16-29](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L16-L29)\n\n## Technical Implementation Details\n\n### Point Storage Structure\n\nWhen storing entries, `QdrantConnector` creates points with this structure:\n\n| Field     | Description                                             |\n| --------- | ------------------------------------------------------- |\n| `id`      | Unique UUID generated for each point                    |\n| `vector`  | Dictionary mapping vector name to embedding array       |\n| `payload` | Contains \"document\" (the content) and \"metadata\" fields |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py76-87](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L76-L87)\n\n### Collection Creation Parameters\n\nWhen creating a new collection, these parameters are used:\n\n| Parameter       | Value                            |\n| --------------- | -------------------------------- |\n| Vector size     | Obtained from embedding provider |\n| Vector name     | Obtained from embedding provider |\n| Distance metric | COSINE (similarity measure)      |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.",
      "index": 4,
      "token_count": 487,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.419395",
        "total_chunks": 7
      },
      "start_char": 7670,
      "end_char": 9718
    },
    {
      "content": "|\n| Distance metric | COSINE (similarity measure)      |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py140-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L140-L147)\n\n## Best Practices\n\n1. **Default Collection**: Set a default collection name during initialization to avoid passing it with every operation.\n2. **Error Handling**: The connector handles non-existent collections gracefully by returning empty results.\n3. **Metadata Usage**: Use metadata for storing additional information that doesn't need to be embedded.\n4. **Collection Design**: Create separate collections for logically distinct data sets.\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py59-126](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L59-L126) [tests/test\\_qdrant\\_integration.py192-239](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L192-L239)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [QdrantConnector Reference](#qdrantconnector-reference.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Class Overview](#class-overview.md)\n- [Initialization Parameters](#initialization-parameters.md)\n- [Entry Model](#entry-model.md)\n- [Core Operations](#core-operations.md)\n- [Store Operation](#store-operation.md)\n- [Search Operation](#search-operation.md)\n- [Collection Management](#collection-management.md)\n- [Get Collection Names](#get-collection-names.md)\n- [Ensure Collection Exists](#ensure-collection-exists.md)\n- [Integration with System Architecture](#integration-with-system-architecture.md)\n- [Usage Examples](#usage-examples.md)\n- [Basic Store and Search](#basic-store-and-search.md)\n- [Working with Multiple Collections](#working-with-multiple-collections.md)\n- [Handling Metadata](#handling-metadata.md)\n- [Qdrant Connection Options](#qdrant-connection-options.md)\n- [Technical Implementation Details](#technical-implementation-details.md)\n- [Point Storage Structure](#point-storage-structure.md)",
      "index": 5,
      "token_count": 531,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.419395",
        "total_chunks": 7
      },
      "start_char": 9618,
      "end_char": 11661
    },
    {
      "content": "ils](#technical-implementation-details.md)\n- [Point Storage Structure](#point-storage-structure.md)\n- [Collection Creation Parameters](#collection-creation-parameters.md)\n- [Best Practices](#best-practices.md)",
      "index": 6,
      "token_count": 47,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "file_name": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.419395",
        "total_chunks": 7
      },
      "start_char": 11561,
      "end_char": 13609
    },
    {
      "content": "Embedding Providers | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Embedding Providers\n\nRelevant source files\n\n- [src/mcp\\_server\\_qdrant/embeddings/base.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/base.py)\n- [src/mcp\\_server\\_qdrant/embeddings/factory.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/factory.py)\n- [src/mcp\\_server\\_qdrant/embeddings/fastembed.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py)\n- [tests/test\\_fastembed\\_integration.py](https://github.",
      "index": 0,
      "token_count": 636,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_6-embedding-providers",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "file_name": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.441739",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 2009
    },
    {
      "content": "mcp_server_qdrant/embeddings/fastembed.py)\n- [tests/test\\_fastembed\\_integration.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py)\n\n## Purpose and Scope\n\nThis document details the embedding system within the mcp-server-qdrant repository, which is responsible for converting text into vector representations (embeddings) for semantic search operations. It covers the embedding provider interface, available implementations, configuration options, and extension points. For information about the overall system architecture, see [Architecture](qdrant/mcp-server-qdrant/2-architecture.md).\n\n## Overview\n\nEmbedding providers are fundamental components in the mcp-server-qdrant system that transform natural language text into high-dimensional vector representations. These vectors capture semantic meaning, enabling similarity-based search operations in the Qdrant vector database.\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/base.py1-27](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/base.py#L1-L27) [src/mcp\\_server\\_qdrant/embeddings/fastembed.py1-52](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L1-L52)\n\n## Architecture\n\nThe embedding system follows a simple yet extensible architecture based on the Provider pattern. It consists of an abstract interface that all concrete embedding providers must implement, with a factory method to instantiate the appropriate provider based on configuration.\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/base.py1-27](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/base.py#L1-L27) [src/mcp\\_server\\_qdrant/embeddings/fastembed.py1-52](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L1-L52) [src/mcp\\_server\\_qdrant/embeddings/factory.py1-18](https://github.",
      "index": 1,
      "token_count": 500,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_6-embedding-providers",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "file_name": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.441739",
        "total_chunks": 6
      },
      "start_char": 1909,
      "end_char": 3877
    },
    {
      "content": "/embeddings/fastembed.py#L1-L52) [src/mcp\\_server\\_qdrant/embeddings/factory.py1-18](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/factory.py#L1-L18)\n\n## EmbeddingProvider Interface\n\nThe `EmbeddingProvider` abstract base class defines the contract that all embedding providers must implement:\n\n| Method                                  | Description                                                | Return Type         |\n| --------------------------------------- | ---------------------------------------------------------- | ------------------- |\n| `embed_documents(documents: List[str])` | Converts multiple text documents into vector embeddings    | `List[List[float]]` |\n| `embed_query(query: str)`               | Converts a single query text into a vector embedding       | `List[float]`       |\n| `get_vector_name()`                     | Returns the name identifier for the vector field in Qdrant | `str`               |\n| `get_vector_size()`                     | Returns the dimensionality of the embedding vectors        | `int`               |\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/base.py5-26](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/base.py#L5-L26)\n\n## Current Implementation: FastEmbedProvider\n\nThe system currently includes one implementation based on the FastEmbed library, which wraps various sentence transformer models.\n\n### Implementation Details\n\nThe `FastEmbedProvider` uses the FastEmbed library to generate embeddings:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/fastembed.py10-52](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L10-L52)\n\n### Key Features\n\n1. **Async Operation**: Although FastEmbed operates synchronously, the provider wraps operations in `run_in_executor` to maintain the async interface.\n\n2. **Vector Naming Convention**: The provider generates standardized vector names based on the model used (e.g., `fast-minilm-l6-v2`).\n\n3.",
      "index": 2,
      "token_count": 465,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_6-embedding-providers",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "file_name": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.441739",
        "total_chunks": 6
      },
      "start_char": 3777,
      "end_char": 5821
    },
    {
      "content": "rovider generates standardized vector names based on the model used (e.g., `fast-minilm-l6-v2`).\n\n3. **Automatic Dimension Detection**: Retrieves the correct vector dimension from the model description.\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/fastembed.py20-51](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L20-L51) [tests/test\\_fastembed\\_integration.py56-64](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py#L56-L64)\n\n## Configuring Embedding Providers\n\nThe embedding provider is configured through environment variables:\n\n| Environment Variable | Description                                                        | Default                                  |\n| -------------------- | ------------------------------------------------------------------ | ---------------------------------------- |\n| EMBEDDING\\_PROVIDER  | The type of embedding provider to use (currently only \"fastembed\") | \"fastembed\"                              |\n| EMBEDDING\\_MODEL     | The model name to use for embedding generation                     | \"sentence-transformers/all-MiniLM-L6-v2\" |\n\nExample configuration:\n\n```\nEMBEDDING_PROVIDER=fastembed\nEMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2\n```\n\nThe configuration flow works as follows:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/factory.py6-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/factory.py#L6-L17)\n\n## Available Models\n\nThe FastEmbedProvider supports several models from the FastEmbed library:\n\n| Model Name                                      | Dimensions | Use Case                                        |\n| ----------------------------------------------- | ---------- | ----------------------------------------------- |\n| sentence-transformers/all-MiniLM-L6-v2          | 384        | General purpose, balanced performance (default) |",
      "index": 3,
      "token_count": 429,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_6-embedding-providers",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "file_name": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.441739",
        "total_chunks": 6
      },
      "start_char": 5721,
      "end_char": 7686
    },
    {
      "content": "sformers/all-MiniLM-L6-v2          | 384        | General purpose, balanced performance (default) |\n| sentence-transformers/all-mpnet-base-v2         | 768        | Higher quality, larger model                    |\n| sentence-transformers/multi-qa-MiniLM-L6-cos-v1 | 384        | Optimized for question-answering                |\n| intfloat/e5-small                               | 384        | Efficient general-purpose model                 |\n| intfloat/e5-base                                | 768        | Higher quality general-purpose model            |\n\nSources: [tests/test\\_fastembed\\_integration.py12-15](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py#L12-L15) [src/mcp\\_server\\_qdrant/embeddings/fastembed.py16-18](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/fastembed.py#L16-L18)\n\n## Integration Testing\n\nThe embedding system includes integration tests that verify:\n\n1. Proper initialization with a model\n2. Consistent embedding generation for documents\n3. Consistent embedding generation for queries\n4. Vector dimensionality and stability\n5. Proper vector naming convention\n\nThese tests ensure the embedding providers function correctly when integrated with actual models.\n\nSources: [tests/test\\_fastembed\\_integration.py8-63](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py#L8-L63)\n\n## Extending with Custom Providers\n\nTo implement a custom embedding provider:\n\n1. Create a new class that inherits from `EmbeddingProvider`\n2. Implement all required methods\n3. Update the `create_embedding_provider` factory function to support your new provider type\n4. Add a new value to the `EmbeddingProviderType` enum\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/embeddings/factory.py6-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/factory.py#L6-L17) [src/mcp\\_server\\_qdrant/embeddings/base.py5-26](https://github.",
      "index": 4,
      "token_count": 519,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_6-embedding-providers",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "file_name": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.441739",
        "total_chunks": 6
      },
      "start_char": 7586,
      "end_char": 9590
    },
    {
      "content": "drant/embeddings/factory.py#L6-L17) [src/mcp\\_server\\_qdrant/embeddings/base.py5-26](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/embeddings/base.py#L5-L26)\n\n## System Integration\n\nThe embedding provider is used by the following system components:\n\n1. **QdrantMCPServer**: Uses the provider to embed queries and documents for the MCP tools\n2. **QdrantConnector**: Uses the provider to configure vector properties in Qdrant collections\n\nThis integration enables seamless translation between natural language and vector space for both storing and retrieving information.\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Embedding Providers](#embedding-providers.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Overview](#overview.md)\n- [Architecture](#architecture.md)\n- [EmbeddingProvider Interface](#embeddingprovider-interface.md)\n- [Current Implementation: FastEmbedProvider](#current-implementation-fastembedprovider.md)\n- [Implementation Details](#implementation-details.md)\n- [Key Features](#key-features.md)\n- [Configuring Embedding Providers](#configuring-embedding-providers.md)\n- [Available Models](#available-models.md)\n- [Integration Testing](#integration-testing.md)\n- [Extending with Custom Providers](#extending-with-custom-providers.md)\n- [System Integration](#system-integration.md)",
      "index": 5,
      "token_count": 324,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_6-embedding-providers",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "file_name": "_qdrant_mcp-server-qdrant_6-embedding-providers.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.441739",
        "total_chunks": 6
      },
      "start_char": 9490,
      "end_char": 11538
    },
    {
      "content": "Development Guide | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# Development Guide\n\nRelevant source files\n\n- [.gitignore](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/.gitignore)\n- [pyproject.toml](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml)\n- [tests/\\_\\_init\\_\\_.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/__init__.py)\n- [tests/test\\_fastembed\\_integration.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py)\n- [tests/test\\_qdrant\\_integration.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py)",
      "index": 0,
      "token_count": 650,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_7-development-guide",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "file_name": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.461813",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 2041
    },
    {
      "content": "on.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py)\n\nThis guide provides essential information for developers who want to contribute to the mcp-server-qdrant project. It covers setting up a development environment, testing procedures, code quality tools, and contribution workflows. For information about using the server as an end-user, see [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md).\n\n## 1. Development Environment Setup\n\n### 1.1 Prerequisites\n\nBefore beginning development, ensure you have the following prerequisites:\n\n- Python 3.10 or higher\n- Git for version control\n- uv (optional but recommended for dependency management)\n\n### 1.2 Setting Up Your Environment\n\n```\n```\n\nSources: [pyproject.toml1-28](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L1-L28)\n\n## 2. Project Structure\n\nThe codebase follows a modular structure to separate concerns and maintain clean architecture.\n\n```\n```\n\nKey directories and files:\n\n- `mcp_server_qdrant/`: Main package with the server implementation\n- `mcp_server_qdrant/embeddings/`: Embedding providers implementation\n- `tests/`: Test suite for the project\n- `pyproject.toml`: Project configuration and dependencies\n\nSources: [pyproject.toml1-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L1-L37) [tests/\\_\\_init\\_\\_.py1-2](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/__init__.py#L1-L2)\n\n## 3. Testing\n\nThe project uses pytest with asyncio support for testing. Tests are primarily integration tests that verify the functionality of key components like QdrantConnector and FastEmbedProvider.\n\n### 3.1 Running Tests\n\n```\n```\n\n### 3.2 Test Structure\n\n```\n```\n\n### 3.3 Testing Patterns\n\nThe codebase follows several key testing patterns:\n\n1. **Fixtures for Component Setup**: Test fixtures are used to create isolated instances of components for testing.\n\n   ```\n   ```\n\n2.",
      "index": 1,
      "token_count": 504,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_7-development-guide",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "file_name": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.461813",
        "total_chunks": 6
      },
      "start_char": 1941,
      "end_char": 3920
    },
    {
      "content": "*: Test fixtures are used to create isolated instances of components for testing.\n\n   ```\n   ```\n\n2. **Randomized Collection Names**: Tests use UUIDs to create unique collection names, ensuring tests don't interfere with each other.\n\n3. **In-memory Database**: Tests use Qdrant's in-memory mode (`:memory:`) instead of connecting to a real server.\n\n4. **Asynchronous Testing**: All tests use `@pytest.mark.asyncio` to handle async functions.\n\nSources: [tests/test\\_qdrant\\_integration.py9-32](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L9-L32) [tests/test\\_fastembed\\_integration.py8-16](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py#L8-L16) [pyproject.toml33-37](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L33-L37)\n\n## 4. Code Quality Tools\n\nThe project uses several tools to maintain code quality:\n\n| Tool       | Purpose                      | Configuration             |\n| ---------- | ---------------------------- | ------------------------- |\n| isort      | Sort imports                 | From `pyproject.toml`     |\n| mypy       | Static type checking         | From `pyproject.toml`     |\n| pyright    | Static type checking         | From `pyproject.toml`     |\n| ruff       | Fast Python linter           | From `pyproject.toml`     |\n| pre-commit | Git hooks to enforce quality | `.pre-commit-config.yaml` |\n\n### 4.1 Running Code Quality Checks\n\n```\n```\n\nSources: [pyproject.toml20-28](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L20-L28)\n\n## 5. Writing Tests\n\nWhen writing new tests for the project, follow these guidelines:\n\n### 5.1 QdrantConnector Testing\n\nQdrantConnector tests should verify:\n\n- Storing entries with various content and metadata\n- Searching for entries with different queries\n- Handling of multiple collections\n- Error handling and edge cases\n\nExample pattern for QdrantConnector test:\n\n```\n```\n\n### 5.2 EmbeddingProvider Testing",
      "index": 2,
      "token_count": 523,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_7-development-guide",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "file_name": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.461813",
        "total_chunks": 6
      },
      "start_char": 3820,
      "end_char": 5838
    },
    {
      "content": "edge cases\n\nExample pattern for QdrantConnector test:\n\n```\n```\n\n### 5.2 EmbeddingProvider Testing\n\nEmbeddingProvider tests should verify:\n\n- Successful model initialization\n- Consistent embedding generation\n- Correct vector dimensions\n- Handling of different input types\n\nExample pattern for EmbeddingProvider test:\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.py32-239](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L32-L239) [tests/test\\_fastembed\\_integration.py8-64](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_fastembed_integration.py#L8-L64)\n\n## 6. Contribution Workflow\n\n### 6.1 Git Workflow\n\n```\n```\n\n1. **Fork the Repository**: Create a fork of the main repository\n2. **Create a Feature Branch**: Work on features in isolated branches\n3. **Implement and Test**: Add your changes with appropriate tests\n4. **Submit a Pull Request**: Create a PR against the main repository\n5. **Code Review**: Address feedback from maintainers\n6. **Merge**: Once approved, your changes will be merged\n\n### 6.2 Pull Request Guidelines\n\n- Ensure all tests pass\n- Include new tests for new functionality\n- Maintain or improve code coverage\n- Follow the project's code style\n- Include a clear description of the changes\n\n## 7. Building and Packaging\n\nThe project uses hatchling for building Python packages.\n\n### 7.1 Building the Package\n\n```\n```\n\n### 7.2 Local Installation for Testing\n\n```\n```\n\n### 7.3 Version Management\n\nVersion numbers are defined in `pyproject.toml`. Follow semantic versioning principles:\n\n- MAJOR version for incompatible API changes\n- MINOR version for added functionality in a backward compatible manner\n- PATCH version for backward compatible bug fixes\n\nSources: [pyproject.toml2-3](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L2-L3) [pyproject.toml15-17](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L15-L17)\n\n## 8. Dependency Management\n\n### 8.1 Runtime Dependencies",
      "index": 3,
      "token_count": 527,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_7-development-guide",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "file_name": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.461813",
        "total_chunks": 6
      },
      "start_char": 5738,
      "end_char": 7758
    },
    {
      "content": "t/blob/a3ab0b96/pyproject.toml#L15-L17)\n\n## 8. Dependency Management\n\n### 8.1 Runtime Dependencies\n\nThe project uses several key dependencies:\n\n- `mcp[cli]`: Core MCP protocol implementation\n- `fastembed`: Fast embedding generation library\n- `qdrant-client`: Client for interacting with Qdrant vector database\n- `pydantic`: Data validation and settings management\n\n### 8.2 Adding New Dependencies\n\nWhen adding new dependencies:\n\n1. Add them to `pyproject.toml` in the appropriate section\n2. Document the reason for adding the dependency\n3. Consider compatibility with existing dependencies\n4. Update development environments with the new dependency\n\nSources: [pyproject.toml8-13](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L8-L13) [pyproject.toml20-28](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/pyproject.toml#L20-L28)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Development Guide](#development-guide.md)\n- [1. Development Environment Setup](#1-development-environment-setup.md)\n- [1.1 Prerequisites](#11-prerequisites.md)\n- [1.2 Setting Up Your Environment](#12-setting-up-your-environment.md)\n- [2. Project Structure](#2-project-structure.md)\n- [3. Testing](#3-testing.md)\n- [3.1 Running Tests](#31-running-tests.md)\n- [3.2 Test Structure](#32-test-structure.md)\n- [3.3 Testing Patterns](#33-testing-patterns.md)\n- [4. Code Quality Tools](#4-code-quality-tools.md)\n- [4.1 Running Code Quality Checks](#41-running-code-quality-checks.md)\n- [5. Writing Tests](#5-writing-tests.md)\n- [5.1 QdrantConnector Testing](#51-qdrantconnector-testing.md)\n- [5.2 EmbeddingProvider Testing](#52-embeddingprovider-testing.md)\n- [6. Contribution Workflow](#6-contribution-workflow.md)\n- [6.1 Git Workflow](#61-git-workflow.md)\n- [6.2 Pull Request Guidelines](#62-pull-request-guidelines.md)\n- [7. Building and Packaging](#7-building-and-packaging.md)\n- [7.1 Building the Package](#71-building-the-package.md)\n- [7.2 Local Installation for Testing](#72-local-installation-for-testing.md)",
      "index": 4,
      "token_count": 581,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_7-development-guide",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "file_name": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.461813",
        "total_chunks": 6
      },
      "start_char": 7658,
      "end_char": 9707
    },
    {
      "content": "lding-the-package.md)\n- [7.2 Local Installation for Testing](#72-local-installation-for-testing.md)\n- [7.3 Version Management](#73-version-management.md)\n- [8. Dependency Management](#8-dependency-management.md)\n- [8.1 Runtime Dependencies](#81-runtime-dependencies.md)\n- [8.2 Adding New Dependencies](#82-adding-new-dependencies.md)",
      "index": 5,
      "token_count": 90,
      "metadata": {
        "title": "_qdrant_mcp-server-qdrant_7-development-guide",
        "source": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_7-development-guide.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_mcp-server-qdrant",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "file_name": "_qdrant_mcp-server-qdrant_7-development-guide.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T00:18:03.461813",
        "total_chunks": 6
      },
      "start_char": 9607,
      "end_char": 11655
    }
  ]
}