{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
  "source_repo": "qdrant_examples",
  "total_chunks": 6,
  "chunks": [
    {
      "content": "Meeting Analysis with Agentic RAG | qdrant/examples | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/examples](https://github.com/qdrant/examples \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 26 June 2025 ([b3c4b2](https://github.com/qdrant/examples/commits/b3c4b28f))\n\n- [Overview](qdrant/examples/1-overview.md)\n- [Getting Started with Qdrant](qdrant/examples/2-getting-started-with-qdrant.md)\n- [Text Data Applications](qdrant/examples/3-text-data-applications.md)\n- [Code Search with Dual Embeddings](qdrant/examples/3.1-code-search-with-dual-embeddings.md)\n- [Extractive Question Answering](qdrant/examples/3.2-extractive-question-answering.md)\n- [Movie Recommendations with Sparse Vectors](qdrant/examples/3.3-movie-recommendations-with-sparse-vectors.md)\n- [Image Data Applications](qdrant/examples/4-image-data-applications.md)\n- [E-commerce Reverse Image Search](qdrant/examples/4.1-e-commerce-reverse-image-search.md)\n- [Medical Image Search with Vision Transformers](qdrant/examples/4.2-medical-image-search-with-vision-transformers.md)\n- [Audio Data Applications](qdrant/examples/5-audio-data-applications.md)\n- [Music Recommendation Engine](qdrant/examples/5.1-music-recommendation-engine.md)\n- [Advanced RAG Systems](qdrant/examples/6-advanced-rag-systems.md)\n- [Multivector RAG with DSPy](qdrant/examples/6.1-multivector-rag-with-dspy.md)\n- [Graph-Enhanced RAG with Neo4j](qdrant/examples/6.2-graph-enhanced-rag-with-neo4j.md)\n- [PDF Retrieval at Scale](qdrant/examples/6.3-pdf-retrieval-at-scale.md)\n- [Agentic Systems with CrewAI](qdrant/examples/7-agentic-systems-with-crewai.md)\n- [Meeting Analysis with Agentic RAG](qdrant/examples/7.1-meeting-analysis-with-agentic-rag.md)\n- [Additional Use Cases](qdrant/examples/8-additional-use-cases.md)\n- [Self-Query Systems with LangChain](qdrant/examples/8.1-self-query-systems-with-langchain.md)\n- [Development Environment Setup](qdrant/examples/8.",
      "index": 0,
      "token_count": 590,
      "metadata": {
        "title": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag",
        "source": "qdrant_examples\\_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "file_name": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.203822",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 2041
    },
    {
      "content": "mples/8.1-self-query-systems-with-langchain.md)\n- [Development Environment Setup](qdrant/examples/8.2-development-environment-setup.md)\n\nMenu\n\n# Meeting Analysis with Agentic RAG\n\nRelevant source files\n\n- [agentic\\_rag\\_zoom\\_crewai/.env.example](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/.env.example)\n- [agentic\\_rag\\_zoom\\_crewai/data/user\\_1NMxS3qhkROnLEsHmf0XiJ.txt](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/data/user_1NMxS3qhkROnLEsHmf0XiJ.txt)\n- [agentic\\_rag\\_zoom\\_crewai/data/user\\_1rydFrQocHdttmKsA0OhkV.txt](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/data/user_1rydFrQocHdttmKsA0OhkV.txt)\n- [agentic\\_rag\\_zoom\\_crewai/data/user\\_2ibz7AAZ0cPTlw584CMT3K.txt](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/data/user_2ibz7AAZ0cPTlw584CMT3K.txt)\n- [agentic\\_rag\\_zoom\\_crewai/readme.md](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/readme.md)\n- [agentic\\_rag\\_zoom\\_crewai/tutorial.md](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/tutorial.md)\n- [agentic\\_rag\\_zoom\\_crewai/vector/crew.py](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py)\n\n## Purpose and Scope\n\nThis system demonstrates an Agentic RAG (Retrieval-Augmented Generation) implementation that analyzes meeting recordings using a combination of vector search and AI agents. The system processes meeting transcripts, stores them as embeddings in Qdrant, and uses CrewAI to orchestrate specialized agents that can search, analyze, and synthesize insights from meeting content.\n\nFor basic RAG patterns without agent orchestration, see [Self-Query Systems with LangChain](qdrant/examples/8.1-self-query-systems-with-langchain.md). For graph-enhanced retrieval approaches, see [Graph-Enhanced RAG with Neo4j](qdrant/examples/6.2-graph-enhanced-rag-with-neo4j.md).\n\n## System Architecture",
      "index": 1,
      "token_count": 620,
      "metadata": {
        "title": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag",
        "source": "qdrant_examples\\_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "file_name": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.203822",
        "total_chunks": 6
      },
      "start_char": 1941,
      "end_char": 3910
    },
    {
      "content": "ced RAG with Neo4j](qdrant/examples/6.2-graph-enhanced-rag-with-neo4j.md).\n\n## System Architecture\n\nThe system operates as a multi-agent workflow where specialized AI agents coordinate to process natural language queries about meeting content through vector search and analysis.\n\n```\n```\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/vector/crew.py1-206](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py#L1-L206) [agentic\\_rag\\_zoom\\_crewai/readme.md9-34](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/readme.md#L9-L34)\n\n## Data Processing Pipeline\n\nThe system processes meeting data through a structured pipeline that converts raw meeting transcripts into searchable vector embeddings.\n\n### Meeting Data Structure\n\nThe system expects meeting data in a specific JSON format with user information and recording arrays:\n\n| Field                   | Type   | Description              |\n| ----------------------- | ------ | ------------------------ |\n| `userid`                | string | Unique user identifier   |\n| `firstname`, `lastname` | string | User names               |\n| `email`                 | string | User email address       |\n| `recordings`            | array  | Array of meeting objects |\n\nEach recording contains:\n\n- `uuid` - Meeting identifier\n- `topic` - Meeting subject\n- `start_time` - ISO timestamp\n- `duration` - Meeting length in minutes\n- `vtt_content` - Timestamped transcript\n- `summary` - AI-generated summary with structured details\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/readme.md17-34](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/readme.md#L17-L34) [agentic\\_rag\\_zoom\\_crewai/data/user\\_1rydFrQocHdttmKsA0OhkV.txt1-64](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/data/user_1rydFrQocHdttmKsA0OhkV.txt#L1-L64)\n\n### Vector Embedding Process\n\n```\n```\n\nThe `data_loader.",
      "index": 2,
      "token_count": 520,
      "metadata": {
        "title": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag",
        "source": "qdrant_examples\\_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "file_name": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.203822",
        "total_chunks": 6
      },
      "start_char": 3810,
      "end_char": 5728
    },
    {
      "content": "ta/user_1rydFrQocHdttmKsA0OhkV.txt#L1-L64)\n\n### Vector Embedding Process\n\n```\n```\n\nThe `data_loader.py` script constructs text representations by concatenating meeting topic, VTT content, and summary data before generating embeddings.\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/tutorial.md134-154](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/tutorial.md#L134-L154) [agentic\\_rag\\_zoom\\_crewai/readme.md94-101](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/readme.md#L94-L101)\n\n## Agent System Components\n\n### Core Agents\n\nThe system employs two specialized agents that work in sequence:\n\n```\n```\n\nThe `researcher` agent handles information gathering and analysis, while the `synthesizer` agent creates structured responses from the research results.\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/vector/crew.py143-159](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py#L143-L159) [agentic\\_rag\\_zoom\\_crewai/vector/crew.py162-184](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py#L162-L184)\n\n### Tool System\n\nThe agents utilize three specialized tools for different operations:\n\n```\n```\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/vector/crew.py45-135](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py#L45-L135)\n\n#### SearchMeetingsTool Implementation\n\nThe vector search tool performs semantic search against the meeting collection:\n\n```\n```\n\nThe tool returns structured results with meeting metadata including topic, start time, duration, and summary overview.\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/vector/crew.py61-85](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py#L61-L85)\n\n#### MeetingAnalysisTool Implementation\n\nThe analysis tool leverages Anthropic Claude for deep meeting analysis:\n\n```\n```\n\nThe tool provides structured analysis including key discussion points, decisions, patterns, and recommendations.",
      "index": 3,
      "token_count": 582,
      "metadata": {
        "title": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag",
        "source": "qdrant_examples\\_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "file_name": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.203822",
        "total_chunks": 6
      },
      "start_char": 5628,
      "end_char": 7653
    },
    {
      "content": "des structured analysis including key discussion points, decisions, patterns, and recommendations.\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/vector/crew.py92-134](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py#L92-L134)\n\n## User Interface Architecture\n\nThe Streamlit application provides an interactive chat interface with real-time processing feedback:\n\n```\n```\n\nThe interface maintains conversation history and provides configurable settings for search behavior and analysis depth.\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/tutorial.md227-313](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/tutorial.md#L227-L313) [agentic\\_rag\\_zoom\\_crewai/readme.md124-143](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/readme.md#L124-L143)\n\n### Real-time Processing Feedback\n\nThe `ConsoleOutput` class provides buffered real-time updates during agent processing:\n\n```\n```\n\nThis enables users to see agent reasoning and tool execution in real-time.\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/tutorial.md258-270](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/tutorial.md#L258-L270)\n\n## Configuration and Environment\n\nThe system requires four environment variables for external service integration:\n\n| Variable            | Service      | Purpose                 |\n| ------------------- | ------------ | ----------------------- |\n| `OPENAI_API_KEY`    | OpenAI       | Embedding generation    |\n| `ANTHROPIC_API_KEY` | Anthropic    | Meeting analysis        |\n| `QDRANT_URL`        | Qdrant Cloud | Vector database URL     |\n| `QDRANT_API_KEY`    | Qdrant Cloud | Database authentication |\n\nEnvironment variables are loaded from `.env.local` using the `dotenv` library.\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/.env.example1-4](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/.env.example#L1-L4) [agentic\\_rag\\_zoom\\_crewai/vector/crew.py15-17](https://github.",
      "index": 4,
      "token_count": 537,
      "metadata": {
        "title": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag",
        "source": "qdrant_examples\\_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "file_name": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.203822",
        "total_chunks": 6
      },
      "start_char": 7553,
      "end_char": 9545
    },
    {
      "content": "rag_zoom_crewai/.env.example#L1-L4) [agentic\\_rag\\_zoom\\_crewai/vector/crew.py15-17](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py#L15-L17)\n\n## Execution Flow\n\nThe complete system execution follows this sequence:\n\n```\n```\n\nThe system maintains real-time feedback throughout this process, showing users the agent reasoning and tool execution steps.\n\n**Sources:** [agentic\\_rag\\_zoom\\_crewai/vector/crew.py136-194](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/vector/crew.py#L136-L194) [agentic\\_rag\\_zoom\\_crewai/tutorial.md274-286](https://github.com/qdrant/examples/blob/b3c4b28f/agentic_rag_zoom_crewai/tutorial.md#L274-L286)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Meeting Analysis with Agentic RAG](#meeting-analysis-with-agentic-rag.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [System Architecture](#system-architecture.md)\n- [Data Processing Pipeline](#data-processing-pipeline.md)\n- [Meeting Data Structure](#meeting-data-structure.md)\n- [Vector Embedding Process](#vector-embedding-process.md)\n- [Agent System Components](#agent-system-components.md)\n- [Core Agents](#core-agents.md)\n- [Tool System](#tool-system.md)\n- [SearchMeetingsTool Implementation](#searchmeetingstool-implementation.md)\n- [MeetingAnalysisTool Implementation](#meetinganalysistool-implementation.md)\n- [User Interface Architecture](#user-interface-architecture.md)\n- [Real-time Processing Feedback](#real-time-processing-feedback.md)\n- [Configuration and Environment](#configuration-and-environment.md)\n- [Execution Flow](#execution-flow.md)",
      "index": 5,
      "token_count": 445,
      "metadata": {
        "title": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag",
        "source": "qdrant_examples\\_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "file_name": "_qdrant_examples_7.1-meeting-analysis-with-agentic-rag.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.203822",
        "total_chunks": 6
      },
      "start_char": 9445,
      "end_char": 11493
    }
  ]
}