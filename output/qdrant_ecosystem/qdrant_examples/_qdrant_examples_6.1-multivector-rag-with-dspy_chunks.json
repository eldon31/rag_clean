{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_examples\\_qdrant_examples_6.1-multivector-rag-with-dspy.md",
  "source_repo": "qdrant_examples",
  "total_chunks": 6,
  "chunks": [
    {
      "content": "Multivector RAG with DSPy | qdrant/examples | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/examples](https://github.com/qdrant/examples \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 26 June 2025 ([b3c4b2](https://github.com/qdrant/examples/commits/b3c4b28f))\n\n- [Overview](qdrant/examples/1-overview.md)\n- [Getting Started with Qdrant](qdrant/examples/2-getting-started-with-qdrant.md)\n- [Text Data Applications](qdrant/examples/3-text-data-applications.md)\n- [Code Search with Dual Embeddings](qdrant/examples/3.1-code-search-with-dual-embeddings.md)\n- [Extractive Question Answering](qdrant/examples/3.2-extractive-question-answering.md)\n- [Movie Recommendations with Sparse Vectors](qdrant/examples/3.3-movie-recommendations-with-sparse-vectors.md)\n- [Image Data Applications](qdrant/examples/4-image-data-applications.md)\n- [E-commerce Reverse Image Search](qdrant/examples/4.1-e-commerce-reverse-image-search.md)\n- [Medical Image Search with Vision Transformers](qdrant/examples/4.2-medical-image-search-with-vision-transformers.md)\n- [Audio Data Applications](qdrant/examples/5-audio-data-applications.md)\n- [Music Recommendation Engine](qdrant/examples/5.1-music-recommendation-engine.md)\n- [Advanced RAG Systems](qdrant/examples/6-advanced-rag-systems.md)\n- [Multivector RAG with DSPy](qdrant/examples/6.1-multivector-rag-with-dspy.md)\n- [Graph-Enhanced RAG with Neo4j](qdrant/examples/6.2-graph-enhanced-rag-with-neo4j.md)\n- [PDF Retrieval at Scale](qdrant/examples/6.3-pdf-retrieval-at-scale.md)\n- [Agentic Systems with CrewAI](qdrant/examples/7-agentic-systems-with-crewai.md)\n- [Meeting Analysis with Agentic RAG](qdrant/examples/7.1-meeting-analysis-with-agentic-rag.md)\n- [Additional Use Cases](qdrant/examples/8-additional-use-cases.md)\n- [Self-Query Systems with LangChain](qdrant/examples/8.1-self-query-systems-with-langchain.md)\n- [Development Environment Setup](qdrant/examples/8.",
      "index": 0,
      "token_count": 591,
      "metadata": {
        "title": "_qdrant_examples_6.1-multivector-rag-with-dspy",
        "source": "qdrant_examples\\_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "file_name": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.178848",
        "total_chunks": 6
      },
      "start_char": 0,
      "end_char": 2033
    },
    {
      "content": "mples/8.1-self-query-systems-with-langchain.md)\n- [Development Environment Setup](qdrant/examples/8.2-development-environment-setup.md)\n\nMenu\n\n# Multivector RAG with DSPy\n\nRelevant source files\n\n- [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb)\n- [multivector-representation/multivector\\_representation\\_qdrant.ipynb](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb)\n\n## Purpose and Scope\n\nThis document covers the implementation of multivector retrieval-augmented generation (RAG) systems that combine dense and late-interaction embeddings with DSPy framework programming. The system demonstrates how to use Qdrant's multivector capabilities for efficient retrieval and reranking workflows, specifically applied to medical question-answering applications.\n\nFor basic Qdrant setup and operations, see [Getting Started with Qdrant](qdrant/examples/2-getting-started-with-qdrant.md). For other RAG implementations, see [Graph-Enhanced RAG with Neo4j](qdrant/examples/6.2-graph-enhanced-rag-with-neo4j.md) and [PDF Retrieval at Scale](qdrant/examples/6.3-pdf-retrieval-at-scale.md).\n\n## System Architecture\n\nThe multivector RAG system operates on a two-stage retrieval pipeline combining fast dense vector search with precise ColBERT reranking.\n\n### Core Components Architecture\n\n```\n```\n\n**Sources:** [multivector-representation/multivector\\_representation\\_qdrant.ipynb1-382](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L1-L382) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb1-801](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L1-L801)\n\n### Multivector Configuration Details\n\nThe system uses distinct vector configurations optimized for different retrieval stages:",
      "index": 1,
      "token_count": 529,
      "metadata": {
        "title": "_qdrant_examples_6.1-multivector-rag-with-dspy",
        "source": "qdrant_examples\\_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "file_name": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.178848",
        "total_chunks": 6
      },
      "start_char": 1933,
      "end_char": 3894
    },
    {
      "content": "Details\n\nThe system uses distinct vector configurations optimized for different retrieval stages:\n\n| Vector Type | Model                    | Size | Distance | Indexing              | Purpose                |\n| ----------- | ------------------------ | ---- | -------- | --------------------- | ---------------------- |\n| `dense`     | `BAAI/bge-small-en`      | 384  | COSINE   | HNSW enabled          | Fast initial retrieval |\n| `colbert`   | `colbert-ir/colbertv2.0` | 128  | COSINE   | HNSW disabled (`m=0`) | Precise reranking      |\n\nThe ColBERT vector includes `MultiVectorConfig` with `MAX_SIM` comparator for token-level similarity computation.\n\n**Sources:** [multivector-representation/multivector\\_representation\\_qdrant.ipynb206-225](https://github.com/qdrant/examples/blob/b3c4b28f/multivector-representation/multivector_representation_qdrant.ipynb#L206-L225) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb222-252](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L222-L252)\n\n## DSPy Integration Architecture\n\n### DSPy Component Mapping\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb375-389](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L375-L389) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb478-486](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L478-L486)\n\n### MedicalAnswer Signature Structure\n\nThe `MedicalAnswer` signature defines the input-output contract for the DSPy system:\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb478-486](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L478-L486)\n\n## Medical Application Implementation\n\n### Document Processing Pipeline\n\nThe medical bot processes documents from the MIRIAD dataset with dual embedding generation:\n\n```\n```\n\nDocuments are uploaded in batches with both vector types and structured payload:\n\n```\n```",
      "index": 2,
      "token_count": 613,
      "metadata": {
        "title": "_qdrant_examples_6.1-multivector-rag-with-dspy",
        "source": "qdrant_examples\\_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "file_name": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.178848",
        "total_chunks": 6
      },
      "start_char": 3794,
      "end_char": 5832
    },
    {
      "content": "```\n```\n\nDocuments are uploaded in batches with both vector types and structured payload:\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb185-194](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L185-L194) [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb294-305](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L294-L305)\n\n### Payload Indexing Configuration\n\nThe system creates specialized indexes for efficient filtering:\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb241-252](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L241-L252)\n\n## Query Pipeline Architecture\n\n### Two-Stage Retrieval Process\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb414-450](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L414-L450)\n\n### Reranking Implementation\n\nThe `rerank_with_colbert` function implements the complete retrieval pipeline:\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb414-450](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L414-L450)\n\n## Guardrail System\n\n### Medical Question Classification\n\nThe `MedicalGuardrail` module provides input validation to ensure only medical questions are processed:\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb515-524](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L515-L524)\n\n### MedicalRAG Module Integration\n\nThe main `MedicalRAG` module coordinates guardrails, retrieval, and response generation:\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb553-571](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L553-L571)\n\n### Specialty Categories",
      "index": 3,
      "token_count": 669,
      "metadata": {
        "title": "_qdrant_examples_6.1-multivector-rag-with-dspy",
        "source": "qdrant_examples\\_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "file_name": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.178848",
        "total_chunks": 6
      },
      "start_char": 5732,
      "end_char": 7713
    },
    {
      "content": "/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L553-L571)\n\n### Specialty Categories\n\nThe system supports filtering across 47 medical specialties including:\n\n| Primary Specialties          | Surgical Specialties     | Research Areas                     |\n| ---------------------------- | ------------------------ | ---------------------------------- |\n| `Rheumatology`               | `General Surgery`        | `Medical Research & Methodology`   |\n| `Cardiology`                 | `Orthopedic Surgery`     | `Public Health & Epidemiology`     |\n| `Neurology`                  | `Neurosurgery`           | `Medical Ethics & Law`             |\n| `Endocrinology & Metabolism` | `Cardiothoracic Surgery` | `Medical Technology & Informatics` |\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb624-637](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L624-L637)\n\n## Performance Characteristics\n\n### Multivector Benefits\n\nThe system achieves optimal performance through:\n\n1. **Fast Initial Retrieval**: Dense vectors with HNSW indexing enable sub-millisecond candidate selection\n2. **Precise Reranking**: ColBERT multivectors provide token-level MaxSim scoring without indexing overhead\n3. **Memory Efficiency**: Disabled HNSW on ColBERT vectors (`m=0`) reduces storage requirements\n4. **Single API Call**: Combined prefetch + rerank operations minimize network latency\n\n### Batch Processing Configuration\n\nLarge-scale document processing uses batch uploads to handle ColBERT's \\~1000 vectors per document:\n\n```\n```\n\n**Sources:** [DSPy-medical-bot/medical\\_bot\\_DSPy\\_Qdrant.ipynb290-316](https://github.com/qdrant/examples/blob/b3c4b28f/DSPy-medical-bot/medical_bot_DSPy_Qdrant.ipynb#L290-L316)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Multivector RAG with DSPy](#multivector-rag-with-dspy.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [System Architecture](#system-architecture.md)",
      "index": 4,
      "token_count": 522,
      "metadata": {
        "title": "_qdrant_examples_6.1-multivector-rag-with-dspy",
        "source": "qdrant_examples\\_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "file_name": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.178848",
        "total_chunks": 6
      },
      "start_char": 7613,
      "end_char": 9606
    },
    {
      "content": "y.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [System Architecture](#system-architecture.md)\n- [Core Components Architecture](#core-components-architecture.md)\n- [Multivector Configuration Details](#multivector-configuration-details.md)\n- [DSPy Integration Architecture](#dspy-integration-architecture.md)\n- [DSPy Component Mapping](#dspy-component-mapping.md)\n- [MedicalAnswer Signature Structure](#medicalanswer-signature-structure.md)\n- [Medical Application Implementation](#medical-application-implementation.md)\n- [Document Processing Pipeline](#document-processing-pipeline.md)\n- [Payload Indexing Configuration](#payload-indexing-configuration.md)\n- [Query Pipeline Architecture](#query-pipeline-architecture.md)\n- [Two-Stage Retrieval Process](#two-stage-retrieval-process.md)\n- [Reranking Implementation](#reranking-implementation.md)\n- [Guardrail System](#guardrail-system.md)\n- [Medical Question Classification](#medical-question-classification.md)\n- [MedicalRAG Module Integration](#medicalrag-module-integration.md)\n- [Specialty Categories](#specialty-categories.md)\n- [Performance Characteristics](#performance-characteristics.md)\n- [Multivector Benefits](#multivector-benefits.md)\n- [Batch Processing Configuration](#batch-processing-configuration.md)",
      "index": 5,
      "token_count": 284,
      "metadata": {
        "title": "_qdrant_examples_6.1-multivector-rag-with-dspy",
        "source": "qdrant_examples\\_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_examples",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "file_name": "_qdrant_examples_6.1-multivector-rag-with-dspy.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:34.178848",
        "total_chunks": 6
      },
      "start_char": 9506,
      "end_char": 11554
    }
  ]
}