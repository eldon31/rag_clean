{
  "source_file": "C:\\Users\\raze0\\Documents\\LLM_KNOWLEDGE_CREATOR\\RAG\\RAG_CLEAN\\Docs\\qdrant_ecosystem\\qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
  "source_repo": "qdrant_client_docs",
  "total_chunks": 9,
  "chunks": [
    {
      "content": "Point Operations | qdrant/qdrant-client | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant-client](https://github.com/qdrant/qdrant-client \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 9 July 2025 ([ac6f6c](https://github.com/qdrant/qdrant-client/commits/ac6f6cd2))\n\n- [Overview](qdrant/qdrant-client/1-overview.md)\n- [Client Architecture](qdrant/qdrant-client/2-client-architecture.md)\n- [Client Interface](qdrant/qdrant-client/2.1-client-interface.md)\n- [Local Mode](qdrant/qdrant-client/2.2-local-mode.md)\n- [Remote Mode](qdrant/qdrant-client/2.3-remote-mode.md)\n- [Protocol Handling](qdrant/qdrant-client/2.4-protocol-handling.md)\n- [Core Operations](qdrant/qdrant-client/3-core-operations.md)\n- [Search Operations](qdrant/qdrant-client/3.1-search-operations.md)\n- [Collection Management](qdrant/qdrant-client/3.2-collection-management.md)\n- [Point Operations](qdrant/qdrant-client/3.3-point-operations.md)\n- [Advanced Features](qdrant/qdrant-client/4-advanced-features.md)\n- [FastEmbed Integration](qdrant/qdrant-client/4.1-fastembed-integration.md)\n- [Batch Operations](qdrant/qdrant-client/4.2-batch-operations.md)\n- [Hybrid Search](qdrant/qdrant-client/4.3-hybrid-search.md)\n- [Local Inference](qdrant/qdrant-client/4.4-local-inference.md)\n- [Implementation Details](qdrant/qdrant-client/5-implementation-details.md)\n- [Payload Filtering](qdrant/qdrant-client/5.1-payload-filtering.md)\n- [Type Inspector System](qdrant/qdrant-client/5.2-type-inspector-system.md)\n- [Expression Evaluation](qdrant/qdrant-client/5.3-expression-evaluation.md)\n- [Development & Testing](qdrant/qdrant-client/6-development-and-testing.md)\n- [Project Setup](qdrant/qdrant-client/6.1-project-setup.md)\n- [Testing Framework](qdrant/qdrant-client/6.2-testing-framework.md)\n- [Documentation System](qdrant/qdrant-client/6.3-documentation-system.md)\n\nMenu\n\n# Point Operations\n\nRelevant source files",
      "index": 0,
      "token_count": 611,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 0,
      "end_char": 2016
    },
    {
      "content": "qdrant/qdrant-client/6.3-documentation-system.md)\n\nMenu\n\n# Point Operations\n\nRelevant source files\n\n- [qdrant\\_client/grpc/points\\_pb2.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/grpc/points_pb2.py)\n- [qdrant\\_client/http/api/collections\\_api.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/collections_api.py)\n- [qdrant\\_client/http/api/points\\_api.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py)\n- [qdrant\\_client/http/api/service\\_api.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/service_api.py)\n- [qdrant\\_client/http/api/snapshots\\_api.py](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/snapshots_api.py)\n- [qdrant\\_client/proto/points.proto](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto)\n\nThis document covers the fundamental CRUD (Create, Read, Update, Delete) operations for points in the Qdrant client library. Point operations include inserting, retrieving, updating, and deleting vector points along with their associated payload data. These operations work across both local and remote Qdrant instances through HTTP and gRPC protocols.\n\nFor information about search and query operations on points, see [Search Operations](qdrant/qdrant-client/3.1-search-operations.md). For collection-level management, see [Collection Management](qdrant/qdrant-client/3.2-collection-management.md).\n\n## Overview\n\nPoint operations in Qdrant are the core data manipulation functions that allow users to manage vector points and their associated metadata. Each point consists of:\n\n- **Point ID**: A unique identifier (numeric or UUID)\n- **Vector Data**: Dense, sparse, or multi-dense vectors\n- **Payload**: Key-value metadata associated with the point\n\nThe system supports both individual and batch operations, with configurable consistency guarantees and write ordering options.\n\n```\n```\n\nSources: [qdrant\\_client/http/api/points\\_api.",
      "index": 1,
      "token_count": 516,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 1916,
      "end_char": 3962
    },
    {
      "content": "ency guarantees and write ordering options.\n\n```\n```\n\nSources: [qdrant\\_client/http/api/points\\_api.py51-521](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py#L51-L521) [qdrant\\_client/grpc/points\\_pb2.py1-50](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/grpc/points_pb2.py#L1-L50) [qdrant\\_client/proto/points.proto1-50](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L1-L50)\n\n## Core Point Operations\n\n### Upsert Points\n\nThe `upsert_points` operation inserts new points or updates existing ones. If a point with the given ID already exists, it will be completely replaced.\n\n**HTTP Implementation:**\n\n- Method: `PUT /collections/{collection_name}/points`\n- Function: `upsert_points(collection_name, point_insert_operations, wait, ordering)`\n\n**gRPC Implementation:**\n\n- Message: `UpsertPoints`\n- Fields: `collection_name`, `points`, `wait`, `ordering`, `shard_key_selector`\n\n```\n```\n\nSources: [qdrant\\_client/http/api/points\\_api.py488-520](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py#L488-L520) [qdrant\\_client/proto/points.proto132-138](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L132-L138)\n\n### Delete Points\n\nThe `delete_points` operation removes points from the collection based on a points selector.\n\n**HTTP Implementation:**\n\n- Method: `POST /collections/{collection_name}/points/delete`\n- Function: `delete_points(collection_name, points_selector, wait, ordering)`\n\n**gRPC Implementation:**\n\n- Message: `DeletePoints`\n- Fields: `collection_name`, `points`, `wait`, `ordering`, `shard_key_selector`\n\n**Points Selection Methods:**\n\n- By ID list: Specify exact point IDs to delete\n- By filter: Delete points matching payload conditions\n- By point selector: Combined ID and filter criteria\n\nSources: [qdrant\\_client/http/api/points\\_api.py188-220](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.",
      "index": 2,
      "token_count": 586,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 3862,
      "end_char": 5899
    },
    {
      "content": ".py188-220](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py#L188-L220) [qdrant\\_client/proto/points.proto140-146](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L140-L146)\n\n### Get Points\n\nThe `get_points` operations retrieve point data by ID. Two variants are available:\n\n1. **Get Single Point**: `get_point(collection_name, id)`\n2. **Get Multiple Points**: `get_points(collection_name, point_request)`\n\n**HTTP Implementation:**\n\n- Single: `GET /collections/{collection_name}/points/{id}`\n- Multiple: `POST /collections/{collection_name}/points`\n\n**gRPC Implementation:**\n\n- Message: `GetPoints`\n- Fields: `collection_name`, `ids`, `with_payload`, `with_vectors`, `read_consistency`\n\n**Response Control:**\n\n- `with_payload`: Control which payload fields to include/exclude\n- `with_vectors`: Control which vector types to include\n- `read_consistency`: Specify consistency guarantees\n\nSources: [qdrant\\_client/http/api/points\\_api.py290-350](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py#L290-L350) [qdrant\\_client/proto/points.proto148-157](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L148-L157)\n\n## Vector Operations\n\n### Update Point Vectors\n\nThe `update_vectors` operation updates specific named vectors for points while keeping other vectors intact.\n\n**HTTP Implementation:**\n\n- Method: `PUT /collections/{collection_name}/points/vectors`\n- Function: `update_vectors(collection_name, update_vectors, wait, ordering)`\n\n**gRPC Implementation:**\n\n- Message: `UpdatePointVectors`\n- Fields: `collection_name`, `points`, `wait`, `ordering`, `shard_key_selector`\n\n### Delete Point Vectors\n\nThe `delete_vectors` operation removes specific named vectors from points without deleting the points themselves.\n\n**HTTP Implementation:**\n\n- Method: `POST /collections/{collection_name}/points/vectors/delete`\n- Function: `delete_vectors(collection_name, delete_vectors, wait, ordering)`",
      "index": 3,
      "token_count": 542,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 5799,
      "end_char": 7847
    },
    {
      "content": "ints/vectors/delete`\n- Function: `delete_vectors(collection_name, delete_vectors, wait, ordering)`\n\n**gRPC Implementation:**\n\n- Message: `DeletePointVectors`\n- Fields: `collection_name`, `points_selector`, `vectors`, `wait`, `ordering`\n\nSources: [qdrant\\_client/http/api/points\\_api.py454-486](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py#L454-L486) [qdrant\\_client/proto/points.proto159-179](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L159-L179)\n\n## Payload Operations\n\n### Set Payload\n\nThe `set_payload` operation adds or updates payload fields for selected points.\n\n**HTTP Implementation:**\n\n- Method: `POST /collections/{collection_name}/points/payload`\n- Function: `set_payload(collection_name, set_payload, wait, ordering)`\n\n**gRPC Implementation:**\n\n- Message: `SetPayloadPoints`\n- Fields: `collection_name`, `payload`, `points_selector`, `wait`, `ordering`\n\n### Delete Payload\n\nThe `delete_payload` operation removes specific payload keys from selected points.\n\n**HTTP Implementation:**\n\n- Method: `POST /collections/{collection_name}/points/payload/delete`\n- Function: `delete_payload(collection_name, delete_payload, wait, ordering)`\n\n**gRPC Implementation:**\n\n- Message: `DeletePayloadPoints`\n- Fields: `collection_name`, `keys`, `points_selector`, `wait`, `ordering`\n\n### Clear Payload\n\nThe `clear_payload` operation removes all payload data from selected points.\n\n**HTTP Implementation:**\n\n- Method: `POST /collections/{collection_name}/points/payload/clear`\n- Function: `clear_payload(collection_name, points_selector, wait, ordering)`\n\n**gRPC Implementation:**\n\n- Message: `ClearPayloadPoints`\n- Fields: `collection_name`, `points`, `wait`, `ordering`\n\n```\n```\n\nSources: [qdrant\\_client/http/api/points\\_api.py420-452](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py#L420-L452) [qdrant\\_client/proto/points.proto181-208](https://github.",
      "index": 4,
      "token_count": 530,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 7747,
      "end_char": 9731
    },
    {
      "content": "_client/http/api/points_api.py#L420-L452) [qdrant\\_client/proto/points.proto181-208](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L181-L208)\n\n## Batch Operations\n\n### Batch Update\n\nThe `batch_update` operation allows multiple point operations to be executed in a single request for improved performance.\n\n**HTTP Implementation:**\n\n- Method: `POST /collections/{collection_name}/points/batch`\n- Function: `batch_update(collection_name, update_operations, wait, ordering)`\n\n**gRPC Implementation:**\n\n- Message: `UpdateBatchPoints`\n- Fields: `collection_name`, `operations`, `wait`, `ordering`\n\n**Supported Batch Operations:**\n\n- `upsert`: Insert or update points\n- `delete_points`: Delete points by selector\n- `set_payload`: Set payload fields\n- `overwrite_payload`: Replace entire payload\n- `delete_payload`: Delete payload keys\n- `clear_payload`: Clear all payload\n- `update_vectors`: Update vector data\n- `delete_vectors`: Delete specific vectors\n\n```\n```\n\nSources: [qdrant\\_client/http/api/points\\_api.py55-87](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py#L55-L87) [qdrant\\_client/proto/points.proto848-865](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L848-L865)\n\n## Point Retrieval Operations\n\n### Scroll Points\n\nThe `scroll_points` operation provides paginated access to points in a collection with optional filtering.\n\n**HTTP Implementation:**\n\n- Method: `POST /collections/{collection_name}/points/scroll`\n- Function: `scroll_points(collection_name, scroll_request, consistency, timeout)`\n\n**gRPC Implementation:**\n\n- Message: `ScrollPoints`\n- Fields: `collection_name`, `filter`, `offset`, `limit`, `with_payload`, `with_vectors`, `order_by`\n\n**Pagination Control:**\n\n- `offset`: Starting point ID for pagination\n- `limit`: Maximum number of points to return\n- `order_by`: Sort by payload field with direction\n\n### Count Points",
      "index": 5,
      "token_count": 511,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 9631,
      "end_char": 11598
    },
    {
      "content": "um number of points to return\n- `order_by`: Sort by payload field with direction\n\n### Count Points\n\nThe `count_points` operation returns the number of points matching a filter condition.\n\n**HTTP Implementation:**\n\n- Method: `POST /collections/{collection_name}/points/count`\n- Function: `count_points(collection_name, count_request, timeout)`\n\n**gRPC Implementation:**\n\n- Message: `CountPoints`\n- Fields: `collection_name`, `filter`, `exact`, `read_consistency`\n\n**Count Options:**\n\n- `exact`: Whether to return exact count (slower) or approximate count (faster)\n- `filter`: Optional filter condition to count only matching points\n\nSources: [qdrant\\_client/http/api/points\\_api.py386-418](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/http/api/points_api.py#L386-L418) [qdrant\\_client/proto/points.proto404-543](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L404-L543)\n\n## Consistency and Ordering\n\n### Write Ordering\n\nPoint operations support different write ordering guarantees:\n\n| Ordering Type | Description                         | Performance | Consistency         |\n| ------------- | ----------------------------------- | ----------- | ------------------- |\n| `Weak`        | Operations may be reordered         | Fastest     | Eventual            |\n| `Medium`      | Operations through dynamic leader   | Medium      | Short inconsistency |\n| `Strong`      | Operations through permanent leader | Slowest     | Strong              |\n\n### Read Consistency\n\nPoint retrieval operations support different read consistency levels:\n\n| Consistency Type | Description                        | Latency      | Reliability   |\n| ---------------- | ---------------------------------- | ------------ | ------------- |\n| `All`            | Read from all nodes                | Highest      | Most reliable |\n| `Majority`       | Read from majority of nodes        | Medium       | Balanced      |\n| `Quorum`         | Read from half + 1 nodes           | Lowest       | Faster        |",
      "index": 6,
      "token_count": 455,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 11498,
      "end_char": 13542
    },
    {
      "content": "ced      |\n| `Quorum`         | Read from half + 1 nodes           | Lowest       | Faster        |\n| `factor`         | Read from specific number of nodes | Configurable | Configurable  |\n\nSources: [qdrant\\_client/proto/points.proto11-32](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/proto/points.proto#L11-L32)\n\n## Error Handling and Responses\n\nAll point operations return structured responses containing:\n\n- **Result**: Operation-specific data (points, count, etc.)\n- **Status**: Success/failure indication\n- **Time**: Execution time in seconds\n- **Usage**: Hardware resource usage statistics (optional)\n\n**Common Response Types:**\n\n- `UpdateResult`: For modification operations (upsert, delete, update)\n- `RetrievedPoint[]`: For retrieval operations (get, scroll)\n- `CountResult`: For count operations\n- `BatchResult`: For batch operations\n\n```\n```\n\nSources: [qdrant\\_client/grpc/points\\_pb2.py1000-1100](https://github.com/qdrant/qdrant-client/blob/ac6f6cd2/qdrant_client/grpc/points_pb2.py#L1000-L1100)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Point Operations](#point-operations.md)\n- [Overview](#overview.md)\n- [Core Point Operations](#core-point-operations.md)\n- [Upsert Points](#upsert-points.md)\n- [Delete Points](#delete-points.md)\n- [Get Points](#get-points.md)\n- [Vector Operations](#vector-operations.md)\n- [Update Point Vectors](#update-point-vectors.md)\n- [Delete Point Vectors](#delete-point-vectors.md)\n- [Payload Operations](#payload-operations.md)\n- [Set Payload](#set-payload.md)\n- [Delete Payload](#delete-payload.md)\n- [Clear Payload](#clear-payload.md)\n- [Batch Operations](#batch-operations.md)\n- [Batch Update](#batch-update.md)\n- [Point Retrieval Operations](#point-retrieval-operations.md)\n- [Scroll Points](#scroll-points.md)\n- [Count Points](#count-points.md)\n- [Consistency and Ordering](#consistency-and-ordering.md)\n- [Write Ordering](#write-ordering.md)\n- [Read Consistency](#read-consistency.md)",
      "index": 7,
      "token_count": 536,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 13442,
      "end_char": 15430
    },
    {
      "content": "-and-ordering.md)\n- [Write Ordering](#write-ordering.md)\n- [Read Consistency](#read-consistency.md)\n- [Error Handling and Responses](#error-handling-and-responses.md)",
      "index": 8,
      "token_count": 44,
      "metadata": {
        "title": "_qdrant_qdrant-client_3.3-point-operations",
        "source": "qdrant_client_docs\\_qdrant_qdrant-client_3.3-point-operations.md",
        "chunk_method": "simple_fallback",
        "source_repo": "qdrant_client_docs",
        "source_subdir": "root",
        "category": "general",
        "file_path": "_qdrant_qdrant-client_3.3-point-operations.md",
        "file_name": "_qdrant_qdrant-client_3.3-point-operations.md",
        "collection": "qdrant_ecosystem",
        "processed_date": "2025-10-16T01:58:28.647363",
        "total_chunks": 9
      },
      "start_char": 15330,
      "end_char": 17378
    }
  ]
}