[
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:0",
    "content": "# PDF Processing Backends\n\n\nRelevant source files",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "PDF Processing Backends",
      "heading_level": 1,
      "chunk_index": 0,
      "collection": "docling",
      "char_count": 49,
      "estimated_tokens": 12,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:1",
    "content": "- [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py)\n- [docling/backend/docling\\_parse\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py)\n- [docling/backend/docling\\_parse\\_v2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py)\n- [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py)\n- [docling/backend/pypdfium2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py)\n- [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py)\n- [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py)\n- [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py)\n- [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py)\n- [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py)\n- [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py)\n- [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py)\n- [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py)\n- [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py)\n- [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py)\n- [docling/utils/locks.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py)\n- [tests/test\\_backend\\_docling\\_parse\\_v4.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py)\n- [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py)\n- [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "PDF Processing Backends",
      "heading_level": 1,
      "chunk_index": 1,
      "collection": "docling",
      "char_count": 2628,
      "estimated_tokens": 657,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:2",
    "content": "## Purpose and Scope\n\n\nThis page documents the PDF backend implementations in Docling, which are responsible for extracting text, images, and layout information from PDF documents. PDF backends provide the low-level document reading interface that supplies data to the processing pipelines.\n\nFor information about how backends are selected and used in the conversion flow, see [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md). For details on pipeline processing that operates on backend data, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md).",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Purpose and Scope",
      "heading_level": 2,
      "chunk_index": 2,
      "collection": "docling",
      "char_count": 618,
      "estimated_tokens": 154,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:3",
    "content": "## Overview\n\n\nDocling provides four PDF backend implementations, each with different capabilities and use cases:\n\n| Backend                         | Status              | Text Extraction  | Granularity              | Use Case                                           |\n| ------------------------------- | ------------------- | ---------------- | ------------------------ | -------------------------------------------------- |\n| `DoclingParseV4DocumentBackend` | **Current default** | docling-parse v4 | Characters, words, lines | High-quality text extraction with fine granularity |\n| `DoclingParseV2DocumentBackend` | Stable              | docling-parse v2 | Text lines               | Sanitized format, good for most documents          |\n| `DoclingParseDocumentBackend`   | Legacy              | docling-parse v1 | Text lines               | Backward compatibility                             |\n| `PyPdfiumDocumentBackend`       | Alternative         | pypdfium2 only   | Text lines (merged)      | Pure pypdfium2, no docling-parse dependency        |\n\nAll backends use `pypdfium2` for PDF rendering and page image generation. The DoclingParse variants add sophisticated text extraction capabilities through the `docling-parse` library.\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py1-250](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L1-L250) [docling/backend/docling\\_parse\\_v2\\_backend.py1-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L1-L277) [docling/backend/docling\\_parse\\_backend.py1-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L1-L238) [docling/backend/pypdfium2\\_backend.py1-400](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L1-L400)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Overview",
      "heading_level": 2,
      "chunk_index": 3,
      "collection": "docling",
      "char_count": 1887,
      "estimated_tokens": 471,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:4",
    "content": "## Backend Architecture\n\n\n```\n```\n\nEach backend consists of two classes:\n\n- **Document Backend**: Manages the entire PDF document, handles loading/unloading, and creates page backends\n- **Page Backend**: Provides access to individual page data including text cells, images, and rendering\n\n**Sources:** [docling/backend/abstract\\_backend.py1-64](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py#L1-L64) [docling/backend/docling\\_parse\\_v4\\_backend.py191-250](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L191-L250) [docling/backend/docling\\_parse\\_v2\\_backend.py228-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L228-L277)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Backend Architecture",
      "heading_level": 2,
      "chunk_index": 4,
      "collection": "docling",
      "char_count": 781,
      "estimated_tokens": 195,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:5",
    "content": "## DoclingParseV4Backend (Current Default)\n\n\n`DoclingParseV4DocumentBackend` is the current default backend, providing the highest quality text extraction with character, word, and line-level granularity.",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "DoclingParseV4Backend (Current Default)",
      "heading_level": 2,
      "chunk_index": 5,
      "collection": "docling",
      "char_count": 204,
      "estimated_tokens": 51,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:6",
    "content": "### Key Features\n\n\n- **Multi-level granularity**: Extracts characters, words, and text lines\n- **Lazy parsing**: Page data is parsed on-demand via `_ensure_parsed()` method\n- **Configurable extraction**: Options for `create_words`, `create_textlines`, `keep_chars`, `keep_lines`\n- **Memory efficient**: Pages can be unloaded individually",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Key Features",
      "heading_level": 3,
      "chunk_index": 6,
      "collection": "docling",
      "char_count": 337,
      "estimated_tokens": 84,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:7",
    "content": "### Implementation Details\n\n\n```\n```\n\nThe v4 backend uses the modern `docling-parse` API with `DoclingPdfParser` and `PdfDocument` classes. Text extraction happens lazily when `get_text_cells()` or `get_segmented_page()` is called:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py52-74](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L52-L74)\n\nThe `_ensure_parsed()` method retrieves character, word, and line cells from docling-parse, then converts them to top-left coordinate origin:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py66-74](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L66-L74)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Implementation Details",
      "heading_level": 3,
      "chunk_index": 7,
      "collection": "docling",
      "char_count": 704,
      "estimated_tokens": 176,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:8",
    "content": "### Usage Example\n\n\n```\n```\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py24-189](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L24-L189) [tests/test\\_backend\\_docling\\_parse\\_v4.py18-26](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py#L18-L26)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Usage Example",
      "heading_level": 3,
      "chunk_index": 8,
      "collection": "docling",
      "char_count": 362,
      "estimated_tokens": 90,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:9",
    "content": "## DoclingParseV2Backend (Sanitized Format)\n\n\n`DoclingParseV2DocumentBackend` provides a \"sanitized\" data format with structured arrays, offering a balance between quality and simplicity.",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "DoclingParseV2Backend (Sanitized Format)",
      "heading_level": 2,
      "chunk_index": 9,
      "collection": "docling",
      "char_count": 187,
      "estimated_tokens": 46,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:10",
    "content": "### Data Structure\n\n\nV2 uses a structured format with separate header and data arrays:\n\n[docling/backend/docling\\_parse\\_v2\\_backend.py60-77](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L60-L77)\n\nThe sanitized format includes:\n\n- `dimension`: Page width and height\n- `cells`: Header array (field names) + data array (cell values)\n- `images`: Bitmap locations\n\nThis structure allows efficient access to cell properties like `x0`, `y0`, `x1`, `y1`, `text` without parsing complex nested structures.",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Data Structure",
      "heading_level": 3,
      "chunk_index": 10,
      "collection": "docling",
      "char_count": 553,
      "estimated_tokens": 138,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:11",
    "content": "### Coordinate Scaling\n\n\nV2 requires coordinate scaling from parser space to pypdfium2 space:\n\n[docling/backend/docling\\_parse\\_v2\\_backend.py84-92](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L84-L92)\n\nThe scaling factors are computed as:\n\n```\nscale_x = pypdfium_width / parser_width\nscale_y = pypdfium_height / parser_height\n```\n\n**Sources:** [docling/backend/docling\\_parse\\_v2\\_backend.py32-226](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L32-L226)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Coordinate Scaling",
      "heading_level": 3,
      "chunk_index": 11,
      "collection": "docling",
      "char_count": 567,
      "estimated_tokens": 141,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:12",
    "content": "## DoclingParseBackend (Legacy v1)\n\n\n`DoclingParseDocumentBackend` is the original implementation, maintained for backward compatibility.",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "DoclingParseBackend (Legacy v1)",
      "heading_level": 2,
      "chunk_index": 12,
      "collection": "docling",
      "char_count": 137,
      "estimated_tokens": 34,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:13",
    "content": "### Differences from V2\n\n\nThe v1 backend uses a simpler, less structured format:\n\n[docling/backend/docling\\_parse\\_backend.py54-67](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L54-L67)\n\nKey differences:\n\n- Direct access to `_dpage[\"cells\"]` array without header/data separation\n- Uses `content[\"rnormalized\"]` for text content\n- Similar coordinate scaling requirements\n\nThe v1 parser API is also different:\n\n[docling/backend/docling\\_parse\\_backend.py207-220](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L207-L220)\n\nV1 uses `pdf_parser_v1()` with methods like `load_document()` and `parse_pdf_from_key_on_page()`.\n\n**Sources:** [docling/backend/docling\\_parse\\_backend.py26-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L26-L238)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Differences from V2",
      "heading_level": 3,
      "chunk_index": 13,
      "collection": "docling",
      "char_count": 894,
      "estimated_tokens": 223,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:14",
    "content": "## PyPdfiumBackend (Pure pypdfium2)\n\n\n`PyPdfiumDocumentBackend` provides PDF reading without the `docling-parse` dependency, using only `pypdfium2`.",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "PyPdfiumBackend (Pure pypdfium2)",
      "heading_level": 2,
      "chunk_index": 14,
      "collection": "docling",
      "char_count": 148,
      "estimated_tokens": 37,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:15",
    "content": "### Cell Extraction and Merging\n\n\nPyPdfium2 produces highly fragmented text cells (often sub-word level). The backend implements sophisticated cell merging:\n\n```\n```\n\nThe merging algorithm:\n\n[docling/backend/pypdfium2\\_backend.py157-252](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L157-L252)\n\nThe algorithm:\n\n1. **Groups rows** based on vertical alignment (top/bottom within 0.5× height threshold)\n2. **Merges horizontally** within each row (gap < 1.0× average height)\n3. **Re-extracts text** from merged bounding boxes to avoid concatenation errors",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Cell Extraction and Merging",
      "heading_level": 3,
      "chunk_index": 15,
      "collection": "docling",
      "char_count": 600,
      "estimated_tokens": 150,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:16",
    "content": "### Thread Safety\n\n\nAll pypdfium2 operations are protected by a global lock:\n\n[docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3)\n\nThis lock is used throughout pypdfium2 operations:\n\n[docling/backend/pypdfium2\\_backend.py122-124](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L122-L124) [docling/backend/pypdfium2\\_backend.py348-349](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L348-L349)\n\n**Sources:** [docling/backend/pypdfium2\\_backend.py101-400](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L101-L400) [docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Thread Safety",
      "heading_level": 3,
      "chunk_index": 16,
      "collection": "docling",
      "char_count": 830,
      "estimated_tokens": 207,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:17",
    "content": "### Transformation Implementation\n\n\nAll backends convert coordinates from bottom-left (PDF native) to top-left (Docling standard):\n\n[docling/backend/docling\\_parse\\_v2\\_backend.py84-92](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L84-L92)\n\nThe conversion formula for a bounding box:\n\n```\nl_new = l_old * scale_x\nr_new = r_old * scale_x\nt_new = (parser_height - t_old) * scale_y  # Flip Y-axis\nb_new = (parser_height - b_old) * scale_y\n```",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Transformation Implementation",
      "heading_level": 3,
      "chunk_index": 17,
      "collection": "docling",
      "char_count": 495,
      "estimated_tokens": 123,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:18",
    "content": "### Scaling Operations\n\n\nBackends support scaling for different DPI requirements:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py171-173](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L171-L173)\n\nCommon scaling factors:\n\n- `scale=1.0`: Native 72 DPI\n- `scale=1.67`: \\~120 DPI (used by CodeFormulaModel)\n- `scale=2.0`: 144 DPI (used by TableStructureModel)\n- `scale=3.0`: 216 DPI (used by OCR models)\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169) [docling/backend/pypdfium2\\_backend.py327-361](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L327-L361)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Scaling Operations",
      "heading_level": 3,
      "chunk_index": 18,
      "collection": "docling",
      "char_count": 789,
      "estimated_tokens": 197,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:19",
    "content": "### Common Interface\n\n\nAll page backends implement these text extraction methods:\n\n| Method                   | Purpose                      | Return Type                  |\n| ------------------------ | ---------------------------- | ---------------------------- |\n| `get_text_cells()`       | Get all text cells on page   | `Iterable[TextCell]`         |\n| `get_segmented_page()`   | Get structured page data     | `Optional[SegmentedPdfPage]` |\n| `get_text_in_rect(bbox)` | Extract text in bounding box | `str`                        |",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Common Interface",
      "heading_level": 3,
      "chunk_index": 19,
      "collection": "docling",
      "char_count": 537,
      "estimated_tokens": 134,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:20",
    "content": "### Text in Rect Implementation\n\n\nThe `get_text_in_rect()` method finds text cells that overlap with a given bounding box:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py79-105](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L79-L105)\n\nThe algorithm:\n\n1. Iterate through all text cells on the page\n2. Convert cell bbox to same coordinate system as query bbox\n3. Calculate `intersection_over_self` ratio\n4. Include cells with overlap > 0.5 (50% threshold)\n5. Concatenate text with spaces",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Text in Rect Implementation",
      "heading_level": 3,
      "chunk_index": 20,
      "collection": "docling",
      "char_count": 541,
      "estimated_tokens": 135,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:21",
    "content": "### SegmentedPdfPage Structure\n\n\nThe `SegmentedPdfPage` object contains:\n\n```\n```\n\nDoclingParseV4 is the only backend that populates word and character cells.\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py107-115](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L107-L115) [docling/backend/pypdfium2\\_backend.py304-322](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L304-L322)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "SegmentedPdfPage Structure",
      "heading_level": 3,
      "chunk_index": 21,
      "collection": "docling",
      "char_count": 492,
      "estimated_tokens": 123,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:22",
    "content": "### Page Image Generation\n\n\nAll backends implement `get_page_image()` with identical signatures:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169)\n\nThe rendering process:\n\n1. Determine cropbox (defaults to full page)\n2. Calculate padbox in bottom-left coordinates for pypdfium2\n3. Render at 1.5× the requested scale for sharpness\n4. Resize down to the target scale\n\nThis technique (render at higher resolution, then downsample) produces sharper images than rendering directly at the target scale.",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Page Image Generation",
      "heading_level": 3,
      "chunk_index": 22,
      "collection": "docling",
      "char_count": 615,
      "estimated_tokens": 153,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:23",
    "content": "### Bitmap Detection\n\n\nThe `get_bitmap_rects()` method identifies image regions:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py117-133](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L117-L133)\n\nV4 uses docling-parse's bitmap resources, while PyPdfium2 uses pypdfium2's object API:\n\n[docling/backend/pypdfium2\\_backend.py254-289](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L254-L289)\n\nPyPdfium2 handles page rotation (90°, 180°, 270°) by adjusting bitmap coordinates.\n\n**Sources:** [docling/backend/pypdfium2\\_backend.py327-361](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L327-L361) [docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Bitmap Detection",
      "heading_level": 3,
      "chunk_index": 23,
      "collection": "docling",
      "char_count": 908,
      "estimated_tokens": 227,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:24",
    "content": "### Role in PDF Processing\n\n\n`LayoutPostprocessor` is used by v2+ backends to refine layout predictions from the `LayoutModel`. While not directly part of the backend classes, it operates on data extracted by backends.\n\n```\n```",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Role in PDF Processing",
      "heading_level": 3,
      "chunk_index": 24,
      "collection": "docling",
      "char_count": 227,
      "estimated_tokens": 56,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:25",
    "content": "### Spatial Indexing\n\n\nLayoutPostprocessor uses R-tree spatial indexing for efficient overlap detection:\n\n[docling/utils/layout\\_postprocessor.py50-106](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L50-L106)\n\nKey features:\n\n- 2D R-tree for spatial queries\n- Interval trees for 1D overlap checks\n- Combined strategy for finding overlap candidates",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Spatial Indexing",
      "heading_level": 3,
      "chunk_index": 25,
      "collection": "docling",
      "char_count": 395,
      "estimated_tokens": 98,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:26",
    "content": "### Overlap Resolution\n\n\nThe postprocessor resolves overlapping clusters using Union-Find:\n\n[docling/utils/layout\\_postprocessor.py488-543](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L488-L543)\n\nProcess:\n\n1. Build spatial index of clusters\n2. Use UnionFind to group overlapping clusters\n3. Select best cluster from each group based on rules\n4. Merge cells from removed clusters into the selected cluster\n\n**Sources:** [docling/utils/layout\\_postprocessor.py155-256](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L155-L256) [docling/models/layout\\_model.py208-212](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L208-L212)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Overlap Resolution",
      "heading_level": 3,
      "chunk_index": 26,
      "collection": "docling",
      "char_count": 763,
      "estimated_tokens": 190,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:27",
    "content": "### Lock Management\n\n\npypdfium2 operations require thread-safe access via a global lock:\n\n[docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3)\n\nThis lock is applied in all backends that use pypdfium2:\n\n[docling/backend/pypdfium2\\_backend.py376-378](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L376-L378)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Lock Management",
      "heading_level": 3,
      "chunk_index": 27,
      "collection": "docling",
      "char_count": 415,
      "estimated_tokens": 103,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:28",
    "content": "### Resource Cleanup\n\n\nAll backends implement `unload()` for proper resource cleanup:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py181-188](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L181-L188)\n\nThe cleanup sequence:\n\n1. **Page-level cleanup**: Unload individual pages from docling-parse\n2. **Document-level cleanup**: Close pypdfium2 document with lock\n3. **Stream cleanup**: Close BytesIO streams if applicable\n\nProper cleanup prevents memory leaks and file descriptor exhaustion, especially important in multi-threaded or batch processing scenarios.",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Resource Cleanup",
      "heading_level": 3,
      "chunk_index": 28,
      "collection": "docling",
      "char_count": 613,
      "estimated_tokens": 153,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:29",
    "content": "### Page Caching in V4\n\n\nDoclingParseV4 implements page-level unloading:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py181-184](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L181-L184)\n\nThis allows selective memory management - frequently accessed pages can remain loaded while others are unloaded to conserve memory.\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py234-249](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L234-L249) [docling/backend/pypdfium2\\_backend.py395-399](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L395-L399)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Page Caching in V4",
      "heading_level": 3,
      "chunk_index": 29,
      "collection": "docling",
      "char_count": 708,
      "estimated_tokens": 177,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:30",
    "content": "### Testing Multiple Backends\n\n\nThe test suite verifies all backends work correctly:\n\n[tests/test\\_options.py141-165](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L141-L165)\n\nThis ensures API compatibility across all backend implementations.\n\n**Sources:** [tests/test\\_options.py141-165](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L141-L165) [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "Testing Multiple Backends",
      "heading_level": 3,
      "chunk_index": 30,
      "collection": "docling",
      "char_count": 632,
      "estimated_tokens": 158,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:31",
    "content": "### On this page",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "On this page",
      "heading_level": 3,
      "chunk_index": 31,
      "collection": "docling",
      "char_count": 16,
      "estimated_tokens": 4,
      "total_chunks": 33
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:32",
    "content": "- [PDF Processing Backends](#pdf-processing-backends.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Overview](#overview.md)\n- [Backend Architecture](#backend-architecture.md)\n- [DoclingParseV4Backend (Current Default)](#doclingparsev4backend-current-default.md)\n- [Key Features](#key-features.md)\n- [Implementation Details](#implementation-details.md)\n- [Usage Example](#usage-example.md)\n- [DoclingParseV2Backend (Sanitized Format)](#doclingparsev2backend-sanitized-format.md)\n- [Data Structure](#data-structure.md)\n- [Coordinate Scaling](#coordinate-scaling.md)\n- [DoclingParseBackend (Legacy v1)](#doclingparsebackend-legacy-v1.md)\n- [Differences from V2](#differences-from-v2.md)\n- [PyPdfiumBackend (Pure pypdfium2)](#pypdfiumbackend-pure-pypdfium2.md)\n- [Cell Extraction and Merging](#cell-extraction-and-merging.md)\n- [Thread Safety](#thread-safety.md)\n- [Coordinate System Transformations](#coordinate-system-transformations.md)\n- [Origins and Conventions](#origins-and-conventions.md)\n- [Transformation Implementation](#transformation-implementation.md)\n- [Scaling Operations](#scaling-operations.md)\n- [Text Extraction and Cell Processing](#text-extraction-and-cell-processing.md)\n- [Common Interface](#common-interface.md)\n- [Text in Rect Implementation](#text-in-rect-implementation.md)\n- [SegmentedPdfPage Structure](#segmentedpdfpage-structure.md)\n- [Image Rendering and Cropping](#image-rendering-and-cropping.md)\n- [Page Image Generation](#page-image-generation.md)\n- [Bitmap Detection](#bitmap-detection.md)\n- [LayoutPostprocessor Integration](#layoutpostprocessor-integration.md)\n- [Role in PDF Processing](#role-in-pdf-processing.md)\n- [Spatial Indexing](#spatial-indexing.md)\n- [Overlap Resolution](#overlap-resolution.md)\n- [Thread Safety and Resource Management](#thread-safety-and-resource-management.md)\n- [Lock Management](#lock-management.md)\n- [Resource Cleanup](#resource-cleanup.md)\n- [Page Caching in V4](#page-caching-in-v4.md)\n- [Backend Selection and Configuration](#backend-selection-and-configuration.md)\n- [Selection via FormatOption](#selection-via-formatoption.md)\n- [Testing Multiple Backends](#testing-multiple-backends.md)",
    "metadata": {
      "source": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "heading": "On this page",
      "heading_level": 3,
      "chunk_index": 32,
      "collection": "docling",
      "char_count": 2167,
      "estimated_tokens": 541,
      "total_chunks": 33
    }
  }
]