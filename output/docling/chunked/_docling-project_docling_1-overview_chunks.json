[
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:0",
    "content": "# Overview\n\n\nRelevant source files\n\n- [.github/SECURITY.md](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md)\n- [CHANGELOG.md](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md)\n- [CITATION.cff](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff)\n- [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md)\n- [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py)\n- [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md)\n- [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md)\n- [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md)\n- [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md)\n- [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml)\n- [pyproject.toml](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml)\n- [uv.lock](https://github.com/docling-project/docling/blob/f7244a43/uv.lock)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Overview",
      "heading_level": 1,
      "chunk_index": 0,
      "collection": "docling",
      "char_count": 1198,
      "estimated_tokens": 299,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:1",
    "content": "## Purpose and Scope\n\n\nThis document provides a high-level technical overview of Docling, a document parsing and conversion system. It explains the system's purpose, core architecture, key components, and processing flow. This overview serves as an entry point for understanding how Docling transforms diverse document formats into structured, unified representations.\n\nFor installation instructions, see [Installation](docling-project/docling/1.1-installation.md). For quick start examples, see [Quick Start](docling-project/docling/1.2-quick-start.md). For detailed architecture concepts, see [Core Architecture](docling-project/docling/2-core-architecture.md).",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Purpose and Scope",
      "heading_level": 2,
      "chunk_index": 1,
      "collection": "docling",
      "char_count": 663,
      "estimated_tokens": 165,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:2",
    "content": "## System Purpose\n\n\nDocling is an SDK and CLI for parsing documents in multiple formats (PDF, DOCX, PPTX, XLSX, HTML, images, audio, and more) into a unified `DoclingDocument` representation. The system is designed to power downstream workflows such as generative AI applications, RAG systems, and document analysis pipelines.\n\nKey capabilities:\n\n- **Format-agnostic parsing**: Handles 15+ document formats through specialized backends\n- **Advanced PDF understanding**: Page layout detection, reading order, table structure, formula extraction, OCR integration\n- **Unified output**: All formats convert to `DoclingDocument`, which exports to Markdown, HTML, JSON, or DocTags\n- **AI model integration**: OCR engines, layout models, table structure models, vision-language models, and enrichment models\n- **Local execution**: Supports air-gapped environments and sensitive data processing\n- **Framework integrations**: Native support for LangChain, LlamaIndex, Haystack, and other AI frameworks\n\nSources: [pyproject.toml1-80](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L80) [README.md28-43](https://github.com/docling-project/docling/blob/f7244a43/README.md#L28-L43) [docs/index.md20-34](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L20-L34)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "System Purpose",
      "heading_level": 2,
      "chunk_index": 2,
      "collection": "docling",
      "char_count": 1297,
      "estimated_tokens": 324,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:3",
    "content": "## Core Architecture\n\n\nDocling implements a layered architecture with clear separation between user interfaces, orchestration logic, processing pipelines, and model integration.",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Core Architecture",
      "heading_level": 2,
      "chunk_index": 3,
      "collection": "docling",
      "char_count": 177,
      "estimated_tokens": 44,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:4",
    "content": "### System Architecture Diagram\n\n\n```\n```\n\nSources: Diagram 1 from high-level overview, [pyproject.toml84-89](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L89)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "System Architecture Diagram",
      "heading_level": 3,
      "chunk_index": 4,
      "collection": "docling",
      "char_count": 190,
      "estimated_tokens": 47,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:5",
    "content": "### Component Overview\n\n\n| Layer               | Key Classes                                                            | Purpose                                                 |\n| ------------------- | ---------------------------------------------------------------------- | ------------------------------------------------------- |\n| **User Interfaces** | `CLI (docling)`, `DocumentConverter`, `DocumentExtractor`              | Entry points for document processing                    |\n| **Orchestration**   | `DocumentConverter`, `FormatOption` mapping                            | Routes documents to appropriate pipelines and backends  |\n| **Pipelines**       | `BasePipeline`, `StandardPdfPipeline`, `VlmPipeline`, `SimplePipeline` | Implements format-specific processing strategies        |\n| **Backends**        | `DoclingParseV4Backend`, `MsWordBackend`, `HTMLBackend`, etc.          | Provides format-specific document readers               |\n| **Models**          | `LayoutModel`, `TableStructureModel`, `OcrAutoModel`, VLM models       | AI/ML models for document understanding                 |\n| **Output**          | `DoclingDocument`                                                      | Unified representation that exports to multiple formats |\n\nSources: [pyproject.toml84-90](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L90) Diagram 1 from high-level overview",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Component Overview",
      "heading_level": 3,
      "chunk_index": 5,
      "collection": "docling",
      "char_count": 1412,
      "estimated_tokens": 353,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:6",
    "content": "### User Interfaces\n\n\n**CLI (`docling` command)**\n\n- Entry point: [pyproject.toml88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L88-L88)\n- Implementation: `docling.cli.main:app`\n- Provides command-line interface for document conversion with extensive options\n\n**Python SDK**\n\n- `DocumentConverter`: Main class for document conversion\n- `DocumentExtractor`: Schema-based structured extraction (beta)\n- Used programmatically in Python applications\n\n**MCP Server**\n\n- Model Context Protocol server for AI agent integration\n- Enables Docling capabilities in agentic AI systems\n- See [MCP Server](docling-project/docling/6.2-model-management-cli.md) for details\n\nSources: [pyproject.toml84-89](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L89) [README.md84-97](https://github.com/docling-project/docling/blob/f7244a43/README.md#L84-L97) [docs/usage/mcp.md1-31](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md#L1-L31)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "User Interfaces",
      "heading_level": 3,
      "chunk_index": 6,
      "collection": "docling",
      "char_count": 998,
      "estimated_tokens": 249,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:7",
    "content": "### Core Orchestration Layer\n\n\n**DocumentConverter**\n\n- Central orchestration class that routes documents through the system\n- Maintains `format_to_options` dictionary mapping `InputFormat` to `FormatOption` instances\n- Implements pipeline caching via `_initialized_pipelines` dictionary\n- Key methods: `convert()`, `convert_all()`, `_get_pipeline()`\n\n**FormatOption Classes**\n\n- `PdfFormatOption`, `WordFormatOption`, `HtmlFormatOption`, etc.\n- Each pairs an `InputFormat` with a `pipeline_cls` (pipeline class) and `backend_cls` (backend class)\n- Contains format-specific `PipelineOptions`\n\n**Format Detection**\n\n- Function `_guess_format()` uses MIME types, file extensions, and content analysis\n- Routes to correct backend for processing\n\nSources: Diagram 2 from high-level overview, Diagram 6 from high-level overview",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Core Orchestration Layer",
      "heading_level": 3,
      "chunk_index": 7,
      "collection": "docling",
      "char_count": 822,
      "estimated_tokens": 205,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:8",
    "content": "### Processing Pipelines\n\n\nAll pipelines inherit from `BasePipeline` which defines a three-phase execution model:\n\n```\n```\n\n**Pipeline Execution Phases**:\n\n1. `_build_document`: Extract raw structure from backend\n2. `_assemble_document`: Construct hierarchical document representation\n3. `_enrich_document`: Apply enrichment models (code detection, picture classification, etc.)\n\n**Key Pipeline Implementations**:\n\n- `StandardPdfPipeline`: Sequential 5-stage processing (preprocess → OCR → layout → table → assemble)\n- `ThreadedStandardPdfPipeline`: Default for PDFs, uses multi-threading with bounded queues\n- `VlmPipeline`: End-to-end processing with vision-language models\n- `SimplePipeline`: Direct conversion for DOCX, HTML, Markdown\n- `AsrPipeline`: Audio transcription using Whisper models\n- `ExtractionVlmPipeline`: Schema-based data extraction (beta)\n\nSources: Diagram 4 from high-level overview, [README.md38-46](https://github.com/docling-project/docling/blob/f7244a43/README.md#L38-L46)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Processing Pipelines",
      "heading_level": 3,
      "chunk_index": 8,
      "collection": "docling",
      "char_count": 998,
      "estimated_tokens": 249,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:9",
    "content": "### Document Backends\n\n\nBackends provide format-specific document readers implementing the `AbstractDocumentBackend` interface.\n\n**PDF Backends**:\n\n- `DoclingParseV4Backend`: Current default, uses `docling-parse` library for character-level text extraction\n- `DoclingParseV2Backend`: Legacy sanitized format\n- `PyPdfiumBackend`: Pure `pypdfium2` implementation\n\n**Office Format Backends**:\n\n- `MsWordBackend`: Uses `python-docx` library\n- `MsExcelBackend`: Uses `openpyxl` library\n- `MsPowerpointBackend`: Uses `python-pptx` library\n\n**Web and Markup Backends**:\n\n- `HTMLBackend`: Uses `BeautifulSoup` parser\n- `MarkdownBackend`: Uses `marko` parser\n- `AsciiDocBackend`: AsciiDoc support\n\n**Specialized Backends**:\n\n- `JATSBackend`: Scientific articles in JATS XML format\n- `METSBackend`: Google Books METS archives\n- `USPTOBackend`: Patent documents\n- `ImageBackend`: Image files (PNG, JPEG, TIFF, WEBP, etc.)\n- `AudioBackend`: Audio files (WAV, MP3)\n- `WebVTTBackend`: Subtitle files\n\nSources: Diagram 3 from high-level overview, [pyproject.toml45-76](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L45-L76)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Document Backends",
      "heading_level": 3,
      "chunk_index": 9,
      "collection": "docling",
      "char_count": 1134,
      "estimated_tokens": 283,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:10",
    "content": "### AI/ML Model Layer\n\n\nThe model layer uses a plugin system for discovery and registration.\n\n**OCR Models**:\n\n- `OcrAutoModel`: Automatic selection with fallback logic\n- `RapidOcrModel`: ONNX/Torch backends (default on most platforms)\n- `EasyOcrModel`: Deep learning OCR\n- `TesseractOcrModel`: Tesseract binding\n- `OcrMacModel`: macOS native OCR\n\n**Layout and Table Models**:\n\n- `LayoutModel`: Heron model (default), DocLayoutModel (legacy)\n- `TableStructureModel`: TableFormer with FAST/ACCURATE modes\n- `PagePreprocessingModel`: Image generation and cell extraction\n- `PageAssembleModel`: Hierarchy construction\n\n**Vision-Language Models**:\n\n- `HuggingFaceTransformersVlmModel`: AutoModel + Transformers framework\n- `HuggingFaceMlxModel`: Apple Silicon acceleration\n- `VllmVlmModel`: Optimized inference (Linux x86\\_64 only)\n- `ApiVlmModel`: OpenAI-compatible API clients\n- Models: GraniteDocling, SmolDocling, Qwen2.5-VL, Pixtral, Gemma3, Phi-4\n\n**Enrichment Models**:\n\n- `CodeFormulaModel`: LaTeX extraction from images\n- `DocumentPictureClassifier`: Figure classification\n- `PictureDescriptionVlmModel`: Image caption generation\n- `PictureDescriptionApiModel`: External API-based captions\n\nSources: Diagram 5 from high-level overview, [pyproject.toml49-110](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L49-L110) [docs/usage/vision\\_models.md1-124](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md#L1-L124)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "AI/ML Model Layer",
      "heading_level": 3,
      "chunk_index": 10,
      "collection": "docling",
      "char_count": 1475,
      "estimated_tokens": 368,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:11",
    "content": "### Document Conversion Flow\n\n\n```\n```\n\n**Key Flow Points**:\n\n1. **Format Detection**: `_guess_format()` analyzes MIME type, file extension, and content to determine `InputFormat`\n2. **Pipeline Selection**: `FormatOption` mapping routes to appropriate pipeline class and backend class\n3. **Pipeline Caching**: Pipelines cached by `(pipeline_class, options_hash)` to avoid redundant model loading\n4. **Three-Phase Processing**: `_build_document()` → `_assemble_document()` → `_enrich_document()`\n5. **Model Integration**: Models invoked throughout pipeline stages\n6. **Unified Output**: All pipelines produce `DoclingDocument` instance\n\nSources: Diagram 2 from high-level overview",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Document Conversion Flow",
      "heading_level": 3,
      "chunk_index": 11,
      "collection": "docling",
      "char_count": 679,
      "estimated_tokens": 169,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:12",
    "content": "### Pipeline Caching Strategy\n\n\nThe `DocumentConverter` maintains an `_initialized_pipelines` cache keyed by `(pipeline_class, options_hash)`. This ensures:\n\n- Models loaded once per configuration\n- Pipelines reused across documents with identical settings\n- Significant performance improvement for batch processing\n\nSources: Diagram 6 from high-level overview",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Pipeline Caching Strategy",
      "heading_level": 3,
      "chunk_index": 12,
      "collection": "docling",
      "char_count": 360,
      "estimated_tokens": 90,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:13",
    "content": "### Core Dependencies\n\n\n| Dependency           | Purpose                           |\n| -------------------- | --------------------------------- |\n| `docling-core`       | Core data models and utilities    |\n| `docling-parse`      | PDF text extraction library       |\n| `docling-ibm-models` | Layout and table structure models |\n| `pypdfium2`          | PDF rendering                     |\n| `pydantic`           | Data validation and settings      |\n| `huggingface_hub`    | Model downloading                 |",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Core Dependencies",
      "heading_level": 3,
      "chunk_index": 13,
      "collection": "docling",
      "char_count": 511,
      "estimated_tokens": 127,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:14",
    "content": "### Optional Dependencies\n\n\n| Extra       | Dependencies                                       | Purpose                           |\n| ----------- | -------------------------------------------------- | --------------------------------- |\n| `easyocr`   | `easyocr`                                          | Deep learning OCR engine          |\n| `tesserocr` | `tesserocr`                                        | Tesseract OCR binding             |\n| `ocrmac`    | `ocrmac`                                           | macOS native OCR                  |\n| `vlm`       | `transformers`, `mlx-vlm`, `vllm`, `qwen-vl-utils` | Vision-language model support     |\n| `rapidocr`  | `rapidocr`, `onnxruntime`                          | RapidOCR engine with ONNX backend |\n| `asr`       | `openai-whisper`                                   | Audio transcription               |",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Optional Dependencies",
      "heading_level": 3,
      "chunk_index": 14,
      "collection": "docling",
      "char_count": 867,
      "estimated_tokens": 216,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:15",
    "content": "### Platform Support\n\n\n- **Operating Systems**: macOS, Linux (x86\\_64, aarch64, arm64), Windows\n- **Python Versions**: 3.9, 3.10, 3.11, 3.12, 3.13\n- **Accelerators**: CPU, CUDA, MPS (Apple Silicon), AUTO detection\n\nSources: [pyproject.toml44-111](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L44-L111) [uv.lock1-15](https://github.com/docling-project/docling/blob/f7244a43/uv.lock#L1-L15)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Platform Support",
      "heading_level": 3,
      "chunk_index": 15,
      "collection": "docling",
      "char_count": 415,
      "estimated_tokens": 103,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:16",
    "content": "### CLI Entry Points\n\n\n```\ndocling          # Main CLI: docling.cli.main:app\ndocling-tools    # Model management: docling.cli.tools:app\n```",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "CLI Entry Points",
      "heading_level": 3,
      "chunk_index": 16,
      "collection": "docling",
      "char_count": 139,
      "estimated_tokens": 34,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:17",
    "content": "### Plugin System\n\n\nEntry point `docling_defaults` registered at [pyproject.toml84-85](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L85) enables plugin discovery:\n\n- `docling.models.plugins.defaults` provides default OCR engines and picture description models\n- Third-party plugins can extend Docling without modifying core",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Plugin System",
      "heading_level": 3,
      "chunk_index": 17,
      "collection": "docling",
      "char_count": 354,
      "estimated_tokens": 88,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:18",
    "content": "### Python API Entry Points\n\n\n```\n```\n\nSources: [pyproject.toml84-90](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L84-L90) [docs/usage/index.md1-46](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md#L1-L46) [docs/examples/minimal\\_vlm\\_pipeline.py1-71](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py#L1-L71)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Python API Entry Points",
      "heading_level": 3,
      "chunk_index": 18,
      "collection": "docling",
      "char_count": 410,
      "estimated_tokens": 102,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:19",
    "content": "### Configuration Hierarchy\n\n\n1. **CLI Arguments**: Parsed into option objects\n2. **Environment Variables**: `DOCLING_DEVICE`, `OMP_NUM_THREADS`, `DOCLING_NUM_THREADS`\n3. **Pipeline Options**: `PdfPipelineOptions`, `VlmPipelineOptions`, `AsrPipelineOptions`\n4. **Model-Specific Options**: `OcrOptions`, `LayoutOptions`, `TableStructureOptions`\n5. **Accelerator Options**: Device placement and thread configuration",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Configuration Hierarchy",
      "heading_level": 3,
      "chunk_index": 19,
      "collection": "docling",
      "char_count": 413,
      "estimated_tokens": 103,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:20",
    "content": "### Key Configuration Classes\n\n\n- `AcceleratorOptions`: Hardware acceleration settings\n- `PdfPipelineOptions`: PDF processing configuration\n- `VlmPipelineOptions`: Vision-language model settings\n- `InlineVlmOptions` / `ApiVlmOptions`: Local vs. remote VLM configuration\n- `OcrOptions`: OCR engine selection and language settings\n- `TableStructureOptions`: Table model precision modes (FAST/ACCURATE)\n\nSources: Diagram 6 from high-level overview",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Key Configuration Classes",
      "heading_level": 3,
      "chunk_index": 20,
      "collection": "docling",
      "char_count": 444,
      "estimated_tokens": 111,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:21",
    "content": "## Output Formats\n\n\n`DoclingDocument` supports multiple export formats:\n\n| Format   | Method                 | Use Case                                    |\n| -------- | ---------------------- | ------------------------------------------- |\n| Markdown | `export_to_markdown()` | Human-readable, LLM-friendly                |\n| HTML     | `export_to_html()`     | Web display, rich formatting                |\n| JSON     | `export_to_json()`     | Lossless serialization, programmatic access |\n| DocTags  | `export_to_doctags()`  | Structured markup format                    |\n\nAll exports preserve document structure, provenance, and metadata. The `DoclingDocument` data model is defined in `docling-core` package.\n\nSources: [README.md35](https://github.com/docling-project/docling/blob/f7244a43/README.md#L35-L35) Diagram 1 from high-level overview",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Output Formats",
      "heading_level": 2,
      "chunk_index": 21,
      "collection": "docling",
      "char_count": 850,
      "estimated_tokens": 212,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:22",
    "content": "### Package Distribution\n\n\n- **PyPI**: `pip install docling` - [pyproject.toml2](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L2-L2)\n- **Version**: 2.55.1 (auto-updated via semantic release)\n- **License**: MIT - [pyproject.toml5](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L5-L5)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Package Distribution",
      "heading_level": 3,
      "chunk_index": 22,
      "collection": "docling",
      "char_count": 335,
      "estimated_tokens": 83,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:23",
    "content": "### Development Tools\n\n\n- **Package Manager**: `uv` - [pyproject.toml155-157](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L155-L157)\n- **Code Formatting**: `ruff` - [pyproject.toml162-238](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L162-L238)\n- **Type Checking**: `mypy` - [pyproject.toml239-266](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L239-L266)\n- **Testing**: `pytest` with coverage\n- **CI/CD**: GitHub Actions, semantic release",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Development Tools",
      "heading_level": 3,
      "chunk_index": 23,
      "collection": "docling",
      "char_count": 520,
      "estimated_tokens": 130,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:24",
    "content": "### Versioning\n\n\nSemantic versioning with automated releases based on conventional commits:\n\n- `feat:` triggers minor version bump\n- `fix:`, `perf:` trigger patch version bump\n- Version stored in [pyproject.toml3](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L3-L3)\n\nSources: [pyproject.toml1-280](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L1-L280) [CHANGELOG.md1-430](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md#L1-L430)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Versioning",
      "heading_level": 3,
      "chunk_index": 24,
      "collection": "docling",
      "char_count": 504,
      "estimated_tokens": 126,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:25",
    "content": "## Security and Compliance\n\n\nDocling participates in the OpenSSF Best Practices Badge Program and implements:\n\n- HTTPS for network communication\n- TLS certificate verification\n- Cryptographically signed releases on PyPI, Quay.io, and GHCR.io\n- Private vulnerability reporting via email: [deepsearch-core@zurich.ibm.com](mailto:deepsearch-core@zurich.ibm.com.md)\n- Issue tracking on GitHub\n\nSecurity-conscious features:\n\n- Local execution support for air-gapped environments\n- No telemetry or data transmission by default\n- Configurable model artifact storage\n\nSources: [.github/SECURITY.md1-43](https://github.com/docling-project/docling/blob/f7244a43/.github/SECURITY.md#L1-L43)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Security and Compliance",
      "heading_level": 2,
      "chunk_index": 25,
      "collection": "docling",
      "char_count": 679,
      "estimated_tokens": 169,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:26",
    "content": "## Project Governance\n\n\n- **Hosted by**: LF AI & Data Foundation\n- **Started by**: IBM Research Zurich (AI for knowledge team)\n- **Code Repository**: <https://github.com/docling-project/docling>\n- **Documentation**: <https://docling-project.github.io/docling/>\n- **License**: MIT\n- **Citation**: arXiv:2408.09869 (Docling Technical Report)\n\nSources: [README.md149-156](https://github.com/docling-project/docling/blob/f7244a43/README.md#L149-L156) [CITATION.cff1-16](https://github.com/docling-project/docling/blob/f7244a43/CITATION.cff#L1-L16) [docs/index.md59-65](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md#L59-L65)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "Project Governance",
      "heading_level": 2,
      "chunk_index": 26,
      "collection": "docling",
      "char_count": 744,
      "estimated_tokens": 186,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_1-overview.md:chunk:27",
    "content": "### On this page\n\n\n- [Overview](#overview.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [System Purpose](#system-purpose.md)\n- [Core Architecture](#core-architecture.md)\n- [System Architecture Diagram](#system-architecture-diagram.md)\n- [Component Overview](#component-overview.md)\n- [Key Components](#key-components.md)\n- [User Interfaces](#user-interfaces.md)\n- [Core Orchestration Layer](#core-orchestration-layer.md)\n- [Processing Pipelines](#processing-pipelines.md)\n- [Document Backends](#document-backends.md)\n- [AI/ML Model Layer](#aiml-model-layer.md)\n- [Processing Flow](#processing-flow.md)\n- [Document Conversion Flow](#document-conversion-flow.md)\n- [Pipeline Caching Strategy](#pipeline-caching-strategy.md)\n- [Technology Stack](#technology-stack.md)\n- [Core Dependencies](#core-dependencies.md)\n- [Optional Dependencies](#optional-dependencies.md)\n- [Platform Support](#platform-support.md)\n- [Entry Points](#entry-points.md)\n- [CLI Entry Points](#cli-entry-points.md)\n- [Plugin System](#plugin-system.md)\n- [Python API Entry Points](#python-api-entry-points.md)\n- [Configuration and Environment](#configuration-and-environment.md)\n- [Configuration Hierarchy](#configuration-hierarchy.md)\n- [Key Configuration Classes](#key-configuration-classes.md)\n- [Output Formats](#output-formats.md)\n- [Development and Distribution](#development-and-distribution.md)\n- [Package Distribution](#package-distribution.md)\n- [Development Tools](#development-tools.md)\n- [Versioning](#versioning.md)\n- [Security and Compliance](#security-and-compliance.md)\n- [Project Governance](#project-governance.md)",
    "metadata": {
      "source": "_docling-project_docling_1-overview.md",
      "heading": "On this page",
      "heading_level": 3,
      "chunk_index": 27,
      "collection": "docling",
      "char_count": 1606,
      "estimated_tokens": 401,
      "total_chunks": 28
    }
  }
]