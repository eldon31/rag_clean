[
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:0",
    "content": "# Document Backends\n\n\nRelevant source files",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Document Backends",
      "heading_level": 1,
      "chunk_index": 0,
      "collection": "docling",
      "char_count": 43,
      "estimated_tokens": 10,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:1",
    "content": "- [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py)\n- [docling/backend/docling\\_parse\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py)\n- [docling/backend/docling\\_parse\\_v2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py)\n- [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py)\n- [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py)\n- [docling/backend/pypdfium2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py)\n- [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py)\n- [docling/utils/locks.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py)\n- [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt)\n- [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json)\n- [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md)\n- [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt)\n- [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json)\n- [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md)\n- [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt)\n- [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json)\n- [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md)\n- [tests/test\\_backend\\_docling\\_parse\\_v4.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py)\n- [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Document Backends",
      "heading_level": 1,
      "chunk_index": 1,
      "collection": "docling",
      "char_count": 2907,
      "estimated_tokens": 726,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:2",
    "content": "om/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py)\n- [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py)\n\nThis document covers the backend architecture in Docling that handles parsing and initial processing of different document formats. Document backends are responsible for extracting raw content and structure from input files before they enter the AI/ML processing pipeline.\n\nFor information about the complete document conversion process, see [Document Conversion Process](docling-project/docling/2.1-document-conversion-flow.md). For details about pipeline processing that occurs after backend parsing, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md).",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Document Backends",
      "heading_level": 1,
      "chunk_index": 2,
      "collection": "docling",
      "char_count": 781,
      "estimated_tokens": 195,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:3",
    "content": "## Backend Architecture Overview\n\n\nThe backend system uses a hierarchical class structure to handle different document types with specialized parsing logic. All backends inherit from abstract base classes that define common interfaces for document processing.\n\n```\n```\n\n**Backend Class Hierarchy**\n\nThe architecture distinguishes between two main backend categories:\n\n- **PaginatedDocumentBackend**: Backends that process documents page-by-page, typically for PDFs and images\n- **DeclarativeDocumentBackend**: Backends that can directly convert structured documents to `DoclingDocument` format\n\nSources: [docling/backend/abstract\\_backend.py13-64](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py#L13-L64) [docling/document\\_converter.py16-29](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L16-L29)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Backend Architecture Overview",
      "heading_level": 2,
      "chunk_index": 3,
      "collection": "docling",
      "char_count": 883,
      "estimated_tokens": 220,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:4",
    "content": "## Format Detection and Backend Selection\n\n\nThe system automatically detects document formats and selects appropriate backends through a sophisticated detection process implemented in `_DocumentConversionInput`.\n\n```\n```\n\n**Format Detection and Backend Selection Flow**\n\nThe detection process handles complex scenarios like ZIP-based Office formats and ambiguous MIME types through multi-stage analysis.\n\nSources: [docling/datamodel/document.py280-374](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L280-L374) [docling/datamodel/base\\_models.py85-139](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L85-L139)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Format Detection and Backend Selection",
      "heading_level": 2,
      "chunk_index": 4,
      "collection": "docling",
      "char_count": 692,
      "estimated_tokens": 173,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:5",
    "content": "## PDF Processing Backends\n\n\nPDF backends represent the most sophisticated document processing capabilities in Docling, with multiple implementation options for different use cases.",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "PDF Processing Backends",
      "heading_level": 2,
      "chunk_index": 5,
      "collection": "docling",
      "char_count": 181,
      "estimated_tokens": 45,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:6",
    "content": "### DoclingParseV4DocumentBackend\n\n\nThe primary PDF backend using the latest version of the docling-parse library for advanced PDF processing.\n\n```\n```\n\n**DoclingParseV4 Backend Processing Flow**\n\nSources: [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py) (referenced but not shown in files), [docling/document\\_converter.py118-124](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L118-L124)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "DoclingParseV4DocumentBackend",
      "heading_level": 3,
      "chunk_index": 6,
      "collection": "docling",
      "char_count": 531,
      "estimated_tokens": 132,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:7",
    "content": "### PyPdfiumDocumentBackend\n\n\nA fallback PDF backend using the pypdfium2 library for basic PDF text extraction and rendering.\n\n| Feature         | DoclingParseV4                   | PyPdfium2                      |\n| --------------- | -------------------------------- | ------------------------------ |\n| Text extraction | Advanced with normalized content | Basic text boundary extraction |\n| Cell merging    | Built-in intelligent merging     | Manual horizontal cell merging |\n| Image detection | Native image region detection    | PyPdfium2 object enumeration   |\n| Performance     | Optimized for document AI        | General-purpose PDF rendering  |\n| Dependencies    | docling-parse library            | pypdfium2 only                 |\n\nSources: [docling/backend/pypdfium2\\_backend.py101-400](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L101-L400) [docling/backend/pypdfium2\\_backend.py156-252](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L156-L252)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "PyPdfiumDocumentBackend",
      "heading_level": 3,
      "chunk_index": 7,
      "collection": "docling",
      "char_count": 1056,
      "estimated_tokens": 264,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:8",
    "content": "### Legacy DoclingParse Backends\n\n\nThe system maintains backward compatibility with older docling-parse versions through dedicated backend implementations.\n\nSources: [docling/backend/docling\\_parse\\_backend.py200-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L200-L238) [docling/backend/docling\\_parse\\_v2\\_backend.py228-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L228-L277)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Legacy DoclingParse Backends",
      "heading_level": 3,
      "chunk_index": 8,
      "collection": "docling",
      "char_count": 494,
      "estimated_tokens": 123,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:9",
    "content": "## Office Document Backends\n\n\nOffice document backends handle Microsoft Office formats through direct parsing of the underlying XML structures.\n\n```\n```\n\n**Office Document Backend Processing**\n\nOffice backends extend `DeclarativeDocumentBackend` and implement direct conversion to `DoclingDocument` without requiring AI/ML pipeline processing.\n\nSources: [docling/document\\_converter.py76-88](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L76-L88) [docling/document\\_converter.py132-144](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L132-L144)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Office Document Backends",
      "heading_level": 2,
      "chunk_index": 9,
      "collection": "docling",
      "char_count": 625,
      "estimated_tokens": 156,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:10",
    "content": "## Web and Text Document Backends\n\n\nWeb and text backends handle various markup and plain text formats through specialized parsers.",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Web and Text Document Backends",
      "heading_level": 2,
      "chunk_index": 10,
      "collection": "docling",
      "char_count": 131,
      "estimated_tokens": 32,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:11",
    "content": "### HTML and Markdown Backends\n\n\n| Backend                   | Parser Library | Supported Formats | Key Features                      |\n| ------------------------- | -------------- | ----------------- | --------------------------------- |\n| `HTMLDocumentBackend`     | BeautifulSoup  | HTML, XHTML       | DOM parsing, tag preservation     |\n| `MarkdownDocumentBackend` | marko          | Markdown, MD      | CommonMark compliance, extensions |\n| `AsciiDocBackend`         | Custom parser  | AsciiDoc, ADOC    | Structured document markup        |",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "HTML and Markdown Backends",
      "heading_level": 3,
      "chunk_index": 11,
      "collection": "docling",
      "char_count": 547,
      "estimated_tokens": 136,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:12",
    "content": "### Structured Data Backends\n\n\n```\n```\n\n**Structured Data Backend Processing**\n\nSources: [docling/document\\_converter.py71-74](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L71-L74) [docling/document\\_converter.py169-171](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L169-L171)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Structured Data Backends",
      "heading_level": 3,
      "chunk_index": 12,
      "collection": "docling",
      "char_count": 360,
      "estimated_tokens": 90,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:13",
    "content": "## Specialized Format Backends\n\n\nSpecialized backends handle domain-specific document formats with custom parsing logic.",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Specialized Format Backends",
      "heading_level": 2,
      "chunk_index": 13,
      "collection": "docling",
      "char_count": 120,
      "estimated_tokens": 30,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:14",
    "content": "### Audio Processing Backend\n\n\nThe `NoOpBackend` serves as a placeholder for audio files, which are processed entirely through the ASR pipeline rather than traditional document parsing.\n\nSources: [docling/document\\_converter.py126-129](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L126-L129) [docling/document\\_converter.py154-172](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L154-L172)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Audio Processing Backend",
      "heading_level": 3,
      "chunk_index": 14,
      "collection": "docling",
      "char_count": 471,
      "estimated_tokens": 117,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:15",
    "content": "## Backend Lifecycle and Integration\n\n\nDocument backends follow a structured lifecycle within the conversion process, managed by the `DocumentConverter` class.\n\n```\n```\n\n**Backend Lifecycle in Document Conversion**\n\nThe lifecycle ensures proper resource management and error handling throughout the conversion process.\n\nSources: [docling/datamodel/document.py183-191](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L183-L191) [docling/document\\_converter.py376-428](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L376-L428)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Backend Lifecycle and Integration",
      "heading_level": 2,
      "chunk_index": 15,
      "collection": "docling",
      "char_count": 603,
      "estimated_tokens": 150,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:16",
    "content": "## Backend Configuration and Options\n\n\nEach backend type is configured through corresponding `FormatOption` classes that specify both the backend implementation and associated pipeline.\n\n| InputFormat | Backend Class                   | Pipeline Class        | FormatOption Class  |\n| ----------- | ------------------------------- | --------------------- | ------------------- |\n| `PDF`       | `DoclingParseV4DocumentBackend` | `StandardPdfPipeline` | `PdfFormatOption`   |\n| `DOCX`      | `MsWordDocumentBackend`         | `SimplePipeline`      | `WordFormatOption`  |\n| `HTML`      | `HTMLDocumentBackend`           | `SimplePipeline`      | `HTMLFormatOption`  |\n| `CSV`       | `CsvDocumentBackend`            | `SimplePipeline`      | `CsvFormatOption`   |\n| `AUDIO`     | `NoOpBackend`                   | `AsrPipeline`         | `AudioFormatOption` |\n\nThe `DocumentConverter` uses these configurations to automatically select and initialize the appropriate backend and pipeline combination for each input format.\n\nSources: [docling/document\\_converter.py61-178](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L61-L178) [docling/datamodel/base\\_models.py39-46](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L39-L46)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "Backend Configuration and Options",
      "heading_level": 2,
      "chunk_index": 16,
      "collection": "docling",
      "char_count": 1406,
      "estimated_tokens": 351,
      "total_chunks": 18
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_3-document-backends.md:chunk:17",
    "content": "### On this page\n\n\n- [Document Backends](#document-backends.md)\n- [Backend Architecture Overview](#backend-architecture-overview.md)\n- [Format Detection and Backend Selection](#format-detection-and-backend-selection.md)\n- [PDF Processing Backends](#pdf-processing-backends.md)\n- [DoclingParseV4DocumentBackend](#doclingparsev4documentbackend.md)\n- [PyPdfiumDocumentBackend](#pypdfiumdocumentbackend.md)\n- [Legacy DoclingParse Backends](#legacy-doclingparse-backends.md)\n- [Office Document Backends](#office-document-backends.md)\n- [Web and Text Document Backends](#web-and-text-document-backends.md)\n- [HTML and Markdown Backends](#html-and-markdown-backends.md)\n- [Structured Data Backends](#structured-data-backends.md)\n- [Specialized Format Backends](#specialized-format-backends.md)\n- [XML-based Scientific Documents](#xml-based-scientific-documents.md)\n- [Audio Processing Backend](#audio-processing-backend.md)\n- [Backend Lifecycle and Integration](#backend-lifecycle-and-integration.md)\n- [Backend Configuration and Options](#backend-configuration-and-options.md)",
    "metadata": {
      "source": "_docling-project_docling_3-document-backends.md",
      "heading": "On this page",
      "heading_level": 3,
      "chunk_index": 17,
      "collection": "docling",
      "char_count": 1070,
      "estimated_tokens": 267,
      "total_chunks": 18
    }
  }
]