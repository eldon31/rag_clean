[
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:0",
    "content": "# AI/ML Models\n\n\nRelevant source files",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "AI/ML Models",
      "heading_level": 1,
      "chunk_index": 0,
      "collection": "docling",
      "char_count": 38,
      "estimated_tokens": 9,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:1",
    "content": "- [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py)\n- [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py)\n- [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py)\n- [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py)\n- [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py)\n- [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py)\n- [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py)\n- [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py)\n- [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py)\n- [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py)\n- [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py)\n- [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py)\n- [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py)\n- [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py)\n- [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py)\n- [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py)\n- [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "AI/ML Models",
      "heading_level": 1,
      "chunk_index": 1,
      "collection": "docling",
      "char_count": 2305,
      "estimated_tokens": 576,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:2",
    "content": "## Purpose and Scope\n\n\nThis document provides an overview of the AI/ML model layer in Docling, covering the architecture, plugin system, model downloading, and common interfaces that all models implement. The model layer provides specialized AI capabilities for document understanding tasks such as OCR, layout analysis, table structure recognition, and enrichment.\n\nFor detailed information about specific model types, see:\n\n- OCR engines and text extraction: [OCR Models](docling-project/docling/4.1-ocr-models.md)\n- Layout analysis and table structure: [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md)\n- Vision-language models: [Vision Language Models](docling-project/docling/4.3-vision-language-models.md)\n- Content enrichment models: [Enrichment Models](docling-project/docling/4.4-enrichment-models.md)\n\nFor information about how models are integrated into document processing workflows, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md).\n\n---",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Purpose and Scope",
      "heading_level": 2,
      "chunk_index": 2,
      "collection": "docling",
      "char_count": 1031,
      "estimated_tokens": 257,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:3",
    "content": "## Model Architecture Overview\n\n\nThe Docling model layer is organized around a hierarchy of base classes that define common interfaces for different model types. Models are categorized into two primary groups based on their processing scope:\n\n**Diagram: Model Class Hierarchy**\n\n```\n```\n\nSources: [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) [docling/models/base\\_ocr\\_model.py24-228](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L24-L228) [docling/models/layout\\_model.py28-238](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L28-L238) [docling/models/table\\_structure\\_model.py29-305](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L29-L305)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Model Architecture Overview",
      "heading_level": 2,
      "chunk_index": 3,
      "collection": "docling",
      "char_count": 853,
      "estimated_tokens": 213,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:4",
    "content": "### Page-Level Models\n\n\nPage-level models inherit from `BasePageModel` and process entire pages through a batch iterator pattern. They implement:\n\n```\n```\n\nModels in this category include:\n\n- **OCR Models**: Extract text from images ([RapidOcrModel](https://github.com/docling-project/docling/blob/f7244a43/RapidOcrModel) [EasyOcrModel](https://github.com/docling-project/docling/blob/f7244a43/EasyOcrModel) [TesseractOcrModel](https://github.com/docling-project/docling/blob/f7244a43/TesseractOcrModel) [OcrMacModel](https://github.com/docling-project/docling/blob/f7244a43/OcrMacModel))\n- **LayoutModel**: Analyzes page layout and identifies document elements\n- **TableStructureModel**: Recognizes table structure and extracts cells\n- **PagePreprocessingModel**: Generates page images and extracts text cells\n- **PageAssembleModel**: Assembles page elements into structured output",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Page-Level Models",
      "heading_level": 3,
      "chunk_index": 4,
      "collection": "docling",
      "char_count": 882,
      "estimated_tokens": 220,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:5",
    "content": "### Item-Level Enrichment Models\n\n\nItem-level models inherit from `BaseItemAndImageEnrichmentModel` and process individual document items after page assembly. They implement:\n\n```\n```\n\nModels in this category include:\n\n- **CodeFormulaModel**: Converts code and formula images to LaTeX/text\n- **DocumentPictureClassifier**: Classifies figure types\n- **PictureDescriptionVlmModel**: Generates text descriptions of images\n\nSources: [docling/models/code\\_formula\\_model.py45-338](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L45-L338) [docling/models/document\\_picture\\_classifier.py36-186](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L36-L186) [docling/models/picture\\_description\\_vlm\\_model.py24-117](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L24-L117)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Item-Level Enrichment Models",
      "heading_level": 3,
      "chunk_index": 5,
      "collection": "docling",
      "char_count": 927,
      "estimated_tokens": 231,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:6",
    "content": "## Plugin System and Model Discovery\n\n\nDocling uses a plugin-based architecture for model discovery, allowing external packages to register additional model implementations without modifying core code.\n\n**Diagram: Plugin Discovery Mechanism**\n\n```\n```\n\nSources: [docling/models/plugins/defaults.py1-31](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py#L1-L31) [docling/models/factories.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/factories.py)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Plugin System and Model Discovery",
      "heading_level": 2,
      "chunk_index": 6,
      "collection": "docling",
      "char_count": 518,
      "estimated_tokens": 129,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:7",
    "content": "### Plugin Registration\n\n\nThe default plugin entry point is registered in the package setup configuration:\n\n```\n[docling_defaults]\ndocling.models.plugins.defaults = \n```\n\nThe plugin system provides two primary extension points:\n\n1. **OCR Engines** - Registered via `ocr_engines()` function returning a dictionary with key `\"ocr_engines\"`\n2. **Picture Description** - Registered via `picture_description()` function returning a dictionary with key `\"picture_description\"`\n\nDefault implementations are registered in [docling/models/plugins/defaults.py1-31](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py#L1-L31):\n\n```\n```",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Plugin Registration",
      "heading_level": 3,
      "chunk_index": 7,
      "collection": "docling",
      "char_count": 664,
      "estimated_tokens": 166,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:8",
    "content": "### Factory Pattern\n\n\nFactories use the plugin system to discover and instantiate models based on options classes. The `get_ocr_factory()` function creates an `OcrModelFactory` that:\n\n1. Discovers registered OCR models via entry points\n2. Matches options classes to implementation classes via `get_options_type()`\n3. Instantiates the appropriate model based on user-provided options\n\nThe `allow_external_plugins` flag controls whether external plugins are loaded, providing security for production deployments.\n\nSources: [docling/models/factories.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/factories.py) [docling/pipeline/standard\\_pdf\\_pipeline.py115-124](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L115-L124)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Factory Pattern",
      "heading_level": 3,
      "chunk_index": 8,
      "collection": "docling",
      "char_count": 804,
      "estimated_tokens": 201,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:9",
    "content": "## Model Downloading and Artifact Management\n\n\nModels require artifact files (weights, configurations) that are downloaded from HuggingFace or ModelScope repositories. Docling provides both programmatic and CLI interfaces for model management.\n\n**Diagram: Model Download and Loading Flow**\n\n```\n```\n\nSources: [docling/utils/model\\_downloader.py30-159](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L30-L159) [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py) [docling/cli/models.py54-127](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L127)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Model Downloading and Artifact Management",
      "heading_level": 2,
      "chunk_index": 9,
      "collection": "docling",
      "char_count": 717,
      "estimated_tokens": 179,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:10",
    "content": "### Model Download Interface\n\n\nEach model class implements a static `download_models()` method:\n\n```\n```\n\nThis method handles downloading from the appropriate source:\n\n- **HuggingFace** (default): Uses `huggingface_hub.snapshot_download()`\n- **ModelScope** (alternative): Uses `modelscope` library for downloads in China",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Model Download Interface",
      "heading_level": 3,
      "chunk_index": 10,
      "collection": "docling",
      "char_count": 320,
      "estimated_tokens": 80,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:11",
    "content": "### Model Repository Structure\n\n\nModels are organized by repository folders:\n\n| Model                     | Repository Folder                 | HuggingFace Repo ID              |\n| ------------------------- | --------------------------------- | -------------------------------- |\n| LayoutModel               | `ds4sd--docling-models`           | `ds4sd/docling-models`           |\n| TableStructureModel       | `ds4sd--docling-models`           | `ds4sd/docling-models`           |\n| CodeFormulaModel          | `ds4sd--CodeFormulaV2`            | `ds4sd/CodeFormulaV2`            |\n| DocumentPictureClassifier | `ds4sd--DocumentFigureClassifier` | `ds4sd/DocumentFigureClassifier` |\n| RapidOcrModel             | `RapidOcr`                        | Custom downloads from ModelScope |\n| EasyOcrModel              | `EasyOcr`                         | Custom downloads from GitHub     |\n\nSources: [docling/models/layout\\_model.py90-102](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L90-L102) [docling/models/table\\_structure\\_model.py91-101](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L91-L101) [docling/models/code\\_formula\\_model.py118-129](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L118-L129)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Model Repository Structure",
      "heading_level": 3,
      "chunk_index": 11,
      "collection": "docling",
      "char_count": 1343,
      "estimated_tokens": 335,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:12",
    "content": "### CLI Model Management\n\n\nThe `docling-tools` CLI provides model downloading capabilities:\n\n```\n```\n\nAvailable models defined in [docling/cli/models.py30-43](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L30-L43):\n\n```\n```\n\nDefault models (downloaded when no specific models are requested): `layout`, `tableformer`, `code_formula`, `picture_classifier`, `rapidocr`\n\nSources: [docling/cli/models.py54-136](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py#L54-L136)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "CLI Model Management",
      "heading_level": 3,
      "chunk_index": 12,
      "collection": "docling",
      "char_count": 527,
      "estimated_tokens": 131,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:13",
    "content": "### Artifact Path Resolution\n\n\nModels support two artifact path patterns for backward compatibility:\n\n1. **Modern structure** (recommended): `artifacts_path / model_repo_folder / model_path`\n2. **Legacy structure** (deprecated): `artifacts_path / model_path`\n\nExample from [docling/models/layout\\_model.py64-81](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L64-L81):\n\n```\n```\n\n---",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Artifact Path Resolution",
      "heading_level": 3,
      "chunk_index": 13,
      "collection": "docling",
      "char_count": 423,
      "estimated_tokens": 105,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:14",
    "content": "## Common Model Interfaces\n\n\nAll models implement specific interfaces based on their processing type, with common patterns for initialization, configuration, and execution.\n\n**Diagram: Model Interface Contracts**\n\n```\n```\n\nSources: [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) [docling/models/base\\_ocr\\_model.py24-228](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py#L24-L228)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Common Model Interfaces",
      "heading_level": 2,
      "chunk_index": 14,
      "collection": "docling",
      "char_count": 493,
      "estimated_tokens": 123,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:15",
    "content": "### Initialization Pattern\n\n\nAll models follow a consistent initialization pattern:\n\n1. **enabled**: Boolean flag controlling whether the model is active\n2. **artifacts\\_path**: Optional path to model artifacts (triggers download if None)\n3. **options**: Model-specific configuration object\n4. **accelerator\\_options**: Hardware acceleration settings (device, threads)\n\nExample from [docling/models/layout\\_model.py49-87](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L49-L87):\n\n```\n```",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Initialization Pattern",
      "heading_level": 3,
      "chunk_index": 15,
      "collection": "docling",
      "char_count": 528,
      "estimated_tokens": 132,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:16",
    "content": "### Page-Level Processing\n\n\nPage-level models process batches of pages, yielding results iteratively:\n\n```\n```\n\nKey characteristics:\n\n- **Streaming**: Pages are processed and yielded one at a time\n- **Profiling**: Wrapped in `TimeRecorder` for performance tracking\n- **Disabled passthrough**: If `enabled=False`, pages pass through unmodified\n\nSources: [docling/models/layout\\_model.py148-238](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L148-L238) [docling/models/table\\_structure\\_model.py170-305](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py#L170-L305)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Page-Level Processing",
      "heading_level": 3,
      "chunk_index": 16,
      "collection": "docling",
      "char_count": 651,
      "estimated_tokens": 162,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:17",
    "content": "### Item-Level Enrichment\n\n\nItem-level models filter and process document items:\n\n```\n```\n\nKey characteristics:\n\n- **Filtering**: `is_processable()` determines which items to process\n- **Batch processing**: Items are collected and processed in batches\n- **In-place enrichment**: Items are modified and yielded\n\nSources: [docling/models/code\\_formula\\_model.py131-338](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L131-L338) [docling/models/document\\_picture\\_classifier.py118-186](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py#L118-L186)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Item-Level Enrichment",
      "heading_level": 3,
      "chunk_index": 17,
      "collection": "docling",
      "char_count": 648,
      "estimated_tokens": 162,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:18",
    "content": "## Model Configuration and Options\n\n\nModels are configured through specialized options classes that follow the Pydantic `BaseModel` pattern. Options control model behavior, resource paths, and inference parameters.\n\n**Diagram: Options Class Hierarchy**\n\n```\n```\n\nSources: [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) [docling/models/code\\_formula\\_model.py26-43](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L26-L43)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Model Configuration and Options",
      "heading_level": 2,
      "chunk_index": 18,
      "collection": "docling",
      "char_count": 557,
      "estimated_tokens": 139,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:19",
    "content": "### OCR Options\n\n\nOCR options control text extraction behavior:\n\n**Common OCR Options** (base class):\n\n- `bitmap_area_threshold` (float, default 0.05): Minimum page coverage to trigger OCR\n- `force_full_page_ocr` (bool, default False): Always OCR entire page\n\n**RapidOcrOptions** ([docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py)):\n\n- `backend`: Engine type (\"onnxruntime\", \"torch\", \"openvino\", \"paddle\")\n- `use_det`: Enable text detection (default True)\n- `use_cls`: Enable text direction classification (default True)\n- `use_rec`: Enable text recognition (default True)\n- `text_score`: Confidence threshold for text detection\n- Model paths: `det_model_path`, `cls_model_path`, `rec_model_path`, `rec_keys_path`\n\n**EasyOcrOptions**:\n\n- `lang`: List of language codes (default \\[\"en\"])\n- `recog_network`: Recognition network to use\n- `use_gpu`: Enable GPU acceleration (deprecated, use `accelerator_options.device`)\n- `confidence_threshold`: Minimum confidence for OCR results",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "OCR Options",
      "heading_level": 3,
      "chunk_index": 19,
      "collection": "docling",
      "char_count": 1064,
      "estimated_tokens": 266,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:20",
    "content": "### Layout and Table Options\n\n\n**LayoutOptions**:\n\n- `model_spec`: `LayoutModelConfig` specifying the model variant (default: Heron/DOCLING\\_LAYOUT\\_V2)\n\n**TableStructureOptions**:\n\n- `mode`: `TableFormerMode.FAST` or `TableFormerMode.ACCURATE` (default FAST)\n- `do_cell_matching`: Enable cell matching between table cells and text cells (default True)\n\nExample from [tests/test\\_options.py25-33](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L25-L33):\n\n```\n```\n\nSources: [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Layout and Table Options",
      "heading_level": 3,
      "chunk_index": 20,
      "collection": "docling",
      "char_count": 641,
      "estimated_tokens": 160,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:21",
    "content": "### Enrichment Model Options\n\n\n**CodeFormulaModelOptions** ([docling/models/code\\_formula\\_model.py26-43](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py#L26-L43)):\n\n- `do_code_enrichment`: Enable code block enrichment (default True)\n- `do_formula_enrichment`: Enable formula enrichment (default True)\n\n**PictureDescriptionVlmOptions** ([docling/models/picture\\_description\\_vlm\\_model.py31-46](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L31-L46)):\n\n- `repo_id`: HuggingFace repository ID\n- `prompt`: Text prompt for image description\n- `generation_config`: Dictionary of generation parameters",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Enrichment Model Options",
      "heading_level": 3,
      "chunk_index": 21,
      "collection": "docling",
      "char_count": 701,
      "estimated_tokens": 175,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:22",
    "content": "### Accelerator Options\n\n\nAll models receive `AcceleratorOptions` controlling hardware acceleration:\n\n```\n```\n\n**Device Options**:\n\n- `AUTO`: Automatically select best available device\n- `CPU`: Force CPU execution\n- `CUDA`: Use NVIDIA GPU\n- `MPS`: Use Apple Metal Performance Shaders\n- `DML`: Use DirectML (Windows)\n\nEnvironment variable overrides:\n\n- `DOCLING_DEVICE` or `DEVICE`: Override device selection\n- `DOCLING_NUM_THREADS` or `OMP_NUM_THREADS`: Override thread count\n\nSources: [docling/datamodel/accelerator\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/accelerator_options.py) [tests/test\\_options.py43-96](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L43-L96)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Accelerator Options",
      "heading_level": 3,
      "chunk_index": 22,
      "collection": "docling",
      "char_count": 751,
      "estimated_tokens": 187,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:23",
    "content": "## Model Integration in Pipelines\n\n\nModels are integrated into pipelines through two primary mechanisms: build pipelines (page-level) and enrichment pipelines (item-level).\n\n**Diagram: Model Integration Points**\n\n```\n```\n\nSources: [docling/pipeline/standard\\_pdf\\_pipeline.py34-99](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L34-L99)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Model Integration in Pipelines",
      "heading_level": 2,
      "chunk_index": 23,
      "collection": "docling",
      "char_count": 389,
      "estimated_tokens": 97,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:24",
    "content": "### Build Pipeline Construction\n\n\nThe build pipeline is constructed in `StandardPdfPipeline.__init__()` [docling/pipeline/standard\\_pdf\\_pipeline.py51-75](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L51-L75):\n\n```\n```\n\nModels in the build pipeline:\n\n1. Process pages sequentially in order\n2. Each model receives output from previous model\n3. Operate on `Page` objects with backend access\n4. Execute during `_build_document()` phase",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Build Pipeline Construction",
      "heading_level": 3,
      "chunk_index": 24,
      "collection": "docling",
      "char_count": 486,
      "estimated_tokens": 121,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:25",
    "content": "### Enrichment Pipeline Construction\n\n\nThe enrichment pipeline is constructed by the `ConvertPipeline` base class and extended in `StandardPdfPipeline` [docling/pipeline/standard\\_pdf\\_pipeline.py77-90](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L77-L90):\n\n```\n```\n\nModels in the enrichment pipeline:\n\n1. Process document items after page assembly\n2. Filter items via `is_processable()`\n3. Operate on `DoclingDocument` and `NodeItem` objects\n4. Execute during `_enrich_document()` phase\n\nSources: [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) [docling/pipeline/standard\\_pdf\\_pipeline.py34-99](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L34-L99)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Enrichment Pipeline Construction",
      "heading_level": 3,
      "chunk_index": 25,
      "collection": "docling",
      "char_count": 840,
      "estimated_tokens": 210,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:26",
    "content": "### Model Execution Order\n\n\nThe complete model execution sequence in `StandardPdfPipeline`:\n\n1. **Page Initialization**: Backend loads page ([line 126-132](<https://github.com/docling-project/docling/blob/f7244a43/line 126-132>))\n\n2. **Build Phase**: Sequential application of build\\_pipe models\n\n   - PagePreprocessingModel generates images\n   - OCR model extracts text from bitmaps\n   - LayoutModel identifies document structure\n   - TableStructureModel recognizes tables\n   - PageAssembleModel creates structured elements\n\n3. **Assembly Phase**: Pages combined into document ([line 134-234](<https://github.com/docling-project/docling/blob/f7244a43/line 134-234>))\n\n4. **Enrichment Phase**: Enrichment models process document items\n\n   - CodeFormulaModel converts code/formula images\n   - PictureClassifier classifies figures\n   - PictureDescription generates captions\n\nEach model respects its `enabled` flag, passing data through unmodified when disabled.\n\n---\n\nThis page provides an overview of the model architecture and common patterns. For details on specific model implementations, see the child pages for OCR, Layout/Table, VLM, and Enrichment models.\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "Model Execution Order",
      "heading_level": 3,
      "chunk_index": 26,
      "collection": "docling",
      "char_count": 1261,
      "estimated_tokens": 315,
      "total_chunks": 28
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_4-aiml-models.md:chunk:27",
    "content": "### On this page\n\n\n- [AI/ML Models](#aiml-models.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Model Architecture Overview](#model-architecture-overview.md)\n- [Page-Level Models](#page-level-models.md)\n- [Item-Level Enrichment Models](#item-level-enrichment-models.md)\n- [Plugin System and Model Discovery](#plugin-system-and-model-discovery.md)\n- [Plugin Registration](#plugin-registration.md)\n- [Factory Pattern](#factory-pattern.md)\n- [Model Downloading and Artifact Management](#model-downloading-and-artifact-management.md)\n- [Model Download Interface](#model-download-interface.md)\n- [Model Repository Structure](#model-repository-structure.md)\n- [CLI Model Management](#cli-model-management.md)\n- [Artifact Path Resolution](#artifact-path-resolution.md)\n- [Common Model Interfaces](#common-model-interfaces.md)\n- [Initialization Pattern](#initialization-pattern.md)\n- [Page-Level Processing](#page-level-processing.md)\n- [Item-Level Enrichment](#item-level-enrichment.md)\n- [Model Configuration and Options](#model-configuration-and-options.md)\n- [OCR Options](#ocr-options.md)\n- [Layout and Table Options](#layout-and-table-options.md)\n- [Enrichment Model Options](#enrichment-model-options.md)\n- [Accelerator Options](#accelerator-options.md)\n- [Model Integration in Pipelines](#model-integration-in-pipelines.md)\n- [Build Pipeline Construction](#build-pipeline-construction.md)\n- [Enrichment Pipeline Construction](#enrichment-pipeline-construction.md)\n- [Model Execution Order](#model-execution-order.md)",
    "metadata": {
      "source": "_docling-project_docling_4-aiml-models.md",
      "heading": "On this page",
      "heading_level": 3,
      "chunk_index": 27,
      "collection": "docling",
      "char_count": 1521,
      "estimated_tokens": 380,
      "total_chunks": 28
    }
  }
]