[
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:0",
    "content": "# Processing Pipelines\n\n\nRelevant source files",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Processing Pipelines",
      "heading_level": 1,
      "chunk_index": 0,
      "collection": "docling",
      "char_count": 46,
      "estimated_tokens": 11,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:1",
    "content": "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py)\n- [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py)\n- [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py)\n- [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py)\n- [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py)\n- [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py)\n- [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py)\n- [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py)\n- [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py)\n- [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py)\n- [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py)\n- [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py)\n- [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py)\n- [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py)\n- [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Processing Pipelines",
      "heading_level": 1,
      "chunk_index": 1,
      "collection": "docling",
      "char_count": 2056,
      "estimated_tokens": 514,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:2",
    "content": "ing/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py)\n- [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py)\n\nProcessing pipelines form the core orchestration layer in Docling that coordinates document backends, AI/ML models, and configuration options to convert raw documents into structured `DoclingDocument` representations. This page covers the pipeline architecture, available pipeline types, and how models are orchestrated within pipelines.\n\nFor information about specific pipeline implementations, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) and [VLM Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md). For details about the models used within pipelines, see [AI/ML Models](docling-project/docling/4-aiml-models.md). For configuration of pipeline behavior, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md).",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Processing Pipelines",
      "heading_level": 1,
      "chunk_index": 2,
      "collection": "docling",
      "char_count": 1014,
      "estimated_tokens": 253,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:3",
    "content": "## Pipeline Architecture Overview\n\n\nDocling provides two main pipeline hierarchies: conversion pipelines for document processing and extraction pipelines for structured data extraction. Each pipeline type is designed for specific document formats and processing requirements.",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Pipeline Architecture Overview",
      "heading_level": 2,
      "chunk_index": 3,
      "collection": "docling",
      "char_count": 275,
      "estimated_tokens": 68,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:4",
    "content": "### Pipeline Base Architecture\n\n\n```\n```\n\nSources: [docling/pipeline/base\\_pipeline.py43-184](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L184) [docling/pipeline/vlm\\_pipeline.py50](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L50) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L296) [docling/pipeline/simple\\_pipeline.py16](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L16-L16) [docling/pipeline/asr\\_pipeline.py204](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L204-L204) [docling/pipeline/base\\_extraction\\_pipeline.py15](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L15) [docling/pipeline/extraction\\_vlm\\_pipeline.py32](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L32)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Pipeline Base Architecture",
      "heading_level": 3,
      "chunk_index": 4,
      "collection": "docling",
      "char_count": 1114,
      "estimated_tokens": 278,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:5",
    "content": "# Processing Pipelines\n\n\nProcessing pipelines form the core orchestration layer in Docling that coordinates document backends, AI/ML models, and configuration options to convert raw documents into structured `DoclingDocument` representations. This page covers the pipeline architecture, available pipeline types, and how models are orchestrated within pipelines.\n\nFor information about specific pipeline implementations, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md) and [VLM Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md). For details about the models used within pipelines, see [AI/ML Models](docling-project/docling/4-aiml-models.md). For configuration of pipeline behavior, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md).",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Processing Pipelines",
      "heading_level": 1,
      "chunk_index": 5,
      "collection": "docling",
      "char_count": 839,
      "estimated_tokens": 209,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:6",
    "content": "## Pipeline Architecture Overview\n\n\nPipelines in Docling implement the `PaginatedPipeline` base class and orchestrate multiple processing models in sequence. Each pipeline type is designed for specific document formats and processing requirements.",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Pipeline Architecture Overview",
      "heading_level": 2,
      "chunk_index": 6,
      "collection": "docling",
      "char_count": 247,
      "estimated_tokens": 61,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:7",
    "content": "### Pipeline Base Architecture\n\n\n```\n```\n\nSources: [docling/pipeline/base\\_pipeline.py29-106](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L29-L106) [docling/pipeline/standard\\_pdf\\_pipeline.py39-42](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L39-L42) [docling/pipeline/vlm\\_pipeline.py50-53](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L53)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Pipeline Base Architecture",
      "heading_level": 3,
      "chunk_index": 7,
      "collection": "docling",
      "char_count": 493,
      "estimated_tokens": 123,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:8",
    "content": "## Pipeline Types and Backend Compatibility\n\n\nDifferent pipeline types are designed for specific document formats and processing approaches. The `DocumentConverter` selects pipelines based on backend compatibility using the `is_backend_supported()` method.",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Pipeline Types and Backend Compatibility",
      "heading_level": 2,
      "chunk_index": 8,
      "collection": "docling",
      "char_count": 256,
      "estimated_tokens": 64,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:9",
    "content": "### Pipeline Type Selection\n\n\n```\n```\n\nSources: [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py636-637](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L636-L637) [docling/pipeline/vlm\\_pipeline.py386-388](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L386-L388) [docling/pipeline/simple\\_pipeline.py54-55](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L54-L55) [docling/pipeline/asr\\_pipeline.py240-241](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L240-L241)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Pipeline Type Selection",
      "heading_level": 3,
      "chunk_index": 9,
      "collection": "docling",
      "char_count": 663,
      "estimated_tokens": 165,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:10",
    "content": "## Pipeline Implementations\n\n\nDocling provides five main pipeline implementations for different document processing needs:\n\n1. **ThreadedStandardPdfPipeline**: High-performance parallel PDF processing with multi-stage AI models\n2. **VlmPipeline**: Vision-Language Model based processing for document understanding\n3. **SimplePipeline**: Direct conversion for declarative document formats\n4. **AsrPipeline**: Audio transcription using Whisper models\n5. **ExtractionVlmPipeline**: Structured data extraction using vision-language models",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Pipeline Implementations",
      "heading_level": 2,
      "chunk_index": 10,
      "collection": "docling",
      "char_count": 534,
      "estimated_tokens": 133,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:11",
    "content": "### ThreadedStandardPdfPipeline Architecture\n\n\nThe `ThreadedStandardPdfPipeline` uses a sophisticated queue-based architecture with parallel processing stages. Each stage runs in its own thread with bounded queues for back-pressure control.\n\n```\n```\n\nSources: [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296-427](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L427) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py96-163](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L96-L163)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "ThreadedStandardPdfPipeline Architecture",
      "heading_level": 3,
      "chunk_index": 11,
      "collection": "docling",
      "char_count": 621,
      "estimated_tokens": 155,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:12",
    "content": "### ThreadedQueue Implementation\n\n\nThe threaded pipeline uses custom queue implementation with explicit close semantics and timeout support.\n\n```\n```\n\nSources: [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py59-94](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L59-L94) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py96-163](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L96-L163)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "ThreadedQueue Implementation",
      "heading_level": 3,
      "chunk_index": 12,
      "collection": "docling",
      "char_count": 517,
      "estimated_tokens": 129,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:13",
    "content": "### VlmPipeline and ExtractionVlmPipeline\n\n\nThe `VlmPipeline` processes documents using Vision-Language Models with different inference frameworks and response formats. The `ExtractionVlmPipeline` specializes in structured data extraction from documents.\n\n```\n```\n\nSources: [docling/pipeline/vlm\\_pipeline.py50-113](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L113) [docling/pipeline/vlm\\_pipeline.py136-159](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L136-L159) [docling/pipeline/vlm\\_pipeline.py188-380](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L188-L380) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-126](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L126)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "VlmPipeline and ExtractionVlmPipeline",
      "heading_level": 3,
      "chunk_index": 13,
      "collection": "docling",
      "char_count": 868,
      "estimated_tokens": 217,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:14",
    "content": "### SimplePipeline and AsrPipeline\n\n\nThe `SimplePipeline` handles declarative document backends that can directly produce `DoclingDocument` objects. The `AsrPipeline` processes audio files using Whisper models.\n\n```\n```\n\nSources: [docling/pipeline/simple\\_pipeline.py16-55](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L16-L55) [docling/pipeline/asr\\_pipeline.py98-201](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L98-L201) [docling/pipeline/asr\\_pipeline.py204-241](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L204-L241)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "SimplePipeline and AsrPipeline",
      "heading_level": 3,
      "chunk_index": 14,
      "collection": "docling",
      "char_count": 661,
      "estimated_tokens": 165,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:15",
    "content": "## Model Factory Integration\n\n\nPipelines use factory patterns to instantiate models with appropriate configurations. This allows for plugin support and model selection based on options.",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Model Factory Integration",
      "heading_level": 2,
      "chunk_index": 15,
      "collection": "docling",
      "char_count": 185,
      "estimated_tokens": 46,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:16",
    "content": "### Factory-Based Model Creation\n\n\n| Model Type          | Factory Method                      | Configuration Source                           | Plugin Support |\n| ------------------- | ----------------------------------- | ---------------------------------------------- | -------------- |\n| OCR Models          | `get_ocr_factory()`                 | `pipeline_options.ocr_options`                 | Yes            |\n| Picture Description | `get_picture_description_factory()` | `pipeline_options.picture_description_options` | Yes            |\n| Layout Analysis     | Direct instantiation                | `pipeline_options.layout_options`              | No             |\n| Table Structure     | Direct instantiation                | `pipeline_options.table_structure_options`     | No             |\n| VLM Models          | Conditional instantiation           | `pipeline_options.vlm_options`                 | No             |\n\n```\n```\n\nSources: [docling/pipeline/standard\\_pdf\\_pipeline.py150-173](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L150-L173) [docling/pipeline/vlm\\_pipeline.py77-113](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L77-L113)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Factory-Based Model Creation",
      "heading_level": 3,
      "chunk_index": 16,
      "collection": "docling",
      "char_count": 1254,
      "estimated_tokens": 313,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:17",
    "content": "## Pipeline Execution Flow\n\n\nPipelines follow a common execution pattern with different implementations for page processing, document assembly, and enrichment. The base execution flow handles error management and resource cleanup.",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Pipeline Execution Flow",
      "heading_level": 2,
      "chunk_index": 17,
      "collection": "docling",
      "char_count": 230,
      "estimated_tokens": 57,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:18",
    "content": "### BasePipeline Execution Flow\n\n\n```\n```\n\nSources: [docling/pipeline/base\\_pipeline.py62-123](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L123) [docling/pipeline/base\\_pipeline.py93-115](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L93-L115)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "BasePipeline Execution Flow",
      "heading_level": 3,
      "chunk_index": 18,
      "collection": "docling",
      "char_count": 339,
      "estimated_tokens": 84,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:19",
    "content": "### PaginatedPipeline vs ThreadedPipeline Processing\n\n\n```\n```\n\nSources: [docling/pipeline/base\\_pipeline.py197-283](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L197-L283) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py428-506](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L428-L506) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py226-272](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L226-L272)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "PaginatedPipeline vs ThreadedPipeline Processing",
      "heading_level": 3,
      "chunk_index": 19,
      "collection": "docling",
      "char_count": 582,
      "estimated_tokens": 145,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:20",
    "content": "### ThreadedStandardPdfPipeline Document Assembly\n\n\n```\n```\n\nSources: [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py535-627](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L535-L627) [docling/pipeline/vlm\\_pipeline.py136-185](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L136-L185) [docling/pipeline/vlm\\_pipeline.py188-303](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L188-L303)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "ThreadedStandardPdfPipeline Document Assembly",
      "heading_level": 3,
      "chunk_index": 20,
      "collection": "docling",
      "char_count": 539,
      "estimated_tokens": 134,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:21",
    "content": "## Configuration and Model Selection\n\n\nPipeline behavior is controlled through `PipelineOptions` classes that enable/disable models and configure their parameters. Models can be conditionally instantiated based on these options.",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Configuration and Model Selection",
      "heading_level": 2,
      "chunk_index": 21,
      "collection": "docling",
      "char_count": 228,
      "estimated_tokens": 57,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:22",
    "content": "### Configuration-Driven Model Instantiation\n\n\n```\n```\n\nSources: [docling/pipeline/standard\\_pdf\\_pipeline.py42-134](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py#L42-L134) [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "Configuration-Driven Model Instantiation",
      "heading_level": 3,
      "chunk_index": 22,
      "collection": "docling",
      "char_count": 462,
      "estimated_tokens": 115,
      "total_chunks": 24
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_5-processing-pipelines.md:chunk:23",
    "content": "### On this page\n\n\n- [Processing Pipelines](#processing-pipelines.md)\n- [Pipeline Architecture Overview](#pipeline-architecture-overview.md)\n- [Pipeline Base Architecture](#pipeline-base-architecture.md)\n- [Processing Pipelines](#processing-pipelines-1.md)\n- [Pipeline Architecture Overview](#pipeline-architecture-overview-1.md)\n- [Pipeline Base Architecture](#pipeline-base-architecture-1.md)\n- [Pipeline Types and Backend Compatibility](#pipeline-types-and-backend-compatibility.md)\n- [Pipeline Type Selection](#pipeline-type-selection.md)\n- [Pipeline Implementations](#pipeline-implementations.md)\n- [ThreadedStandardPdfPipeline Architecture](#threadedstandardpdfpipeline-architecture.md)\n- [ThreadedQueue Implementation](#threadedqueue-implementation.md)\n- [VlmPipeline and ExtractionVlmPipeline](#vlmpipeline-and-extractionvlmpipeline.md)\n- [SimplePipeline and AsrPipeline](#simplepipeline-and-asrpipeline.md)\n- [Model Factory Integration](#model-factory-integration.md)\n- [Factory-Based Model Creation](#factory-based-model-creation.md)\n- [Pipeline Execution Flow](#pipeline-execution-flow.md)\n- [BasePipeline Execution Flow](#basepipeline-execution-flow.md)\n- [PaginatedPipeline vs ThreadedPipeline Processing](#paginatedpipeline-vs-threadedpipeline-processing.md)\n- [ThreadedStandardPdfPipeline Document Assembly](#threadedstandardpdfpipeline-document-assembly.md)\n- [Configuration and Model Selection](#configuration-and-model-selection.md)\n- [Configuration-Driven Model Instantiation](#configuration-driven-model-instantiation.md)",
    "metadata": {
      "source": "_docling-project_docling_5-processing-pipelines.md",
      "heading": "On this page",
      "heading_level": 3,
      "chunk_index": 23,
      "collection": "docling",
      "char_count": 1541,
      "estimated_tokens": 385,
      "total_chunks": 24
    }
  }
]