[
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:0",
    "content": "# Document Conversion Flow\n\n\nRelevant source files",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Document Conversion Flow",
      "heading_level": 1,
      "chunk_index": 0,
      "collection": "docling",
      "char_count": 50,
      "estimated_tokens": 12,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:1",
    "content": "- [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py)\n- [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py)\n- [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py)\n- [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py)\n- [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py)\n- [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py)\n- [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py)\n- [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py)\n- [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py)\n- [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py)\n- [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py)\n- [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py)\n- [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py)\n- [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py)\n- [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Document Conversion Flow",
      "heading_level": 1,
      "chunk_index": 1,
      "collection": "docling",
      "char_count": 2056,
      "estimated_tokens": 514,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:2",
    "content": "ing/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py)\n- [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py)\n\nThis document describes the end-to-end process of converting an input document to a structured `DoclingDocument` representation. It covers format detection, backend/pipeline routing, the three-phase execution model, and output generation.\n\nFor configuration of pipeline options and format-specific settings, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md). For details on the `DoclingDocument` data structure, see [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md). For backend implementations, see [Document Backends](docling-project/docling/3-document-backends.md).\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Document Conversion Flow",
      "heading_level": 1,
      "chunk_index": 2,
      "collection": "docling",
      "char_count": 869,
      "estimated_tokens": 217,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:3",
    "content": "## Overview\n\n\nThe document conversion flow orchestrates multiple components to transform raw documents (PDF, DOCX, HTML, etc.) into structured `DoclingDocument` objects. The process follows these stages:\n\n1. **Input Processing**: Format detection and `InputDocument` creation\n2. **Routing**: Backend and pipeline selection based on format\n3. **Pipeline Execution**: Three-phase processing (build, assemble, enrich)\n4. **Output Generation**: `ConversionResult` with embedded `DoclingDocument`\n\nThe central orchestrator is `DocumentConverter`, which manages format-to-pipeline mappings, pipeline caching, and execution.\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Overview",
      "heading_level": 2,
      "chunk_index": 3,
      "collection": "docling",
      "char_count": 622,
      "estimated_tokens": 155,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:4",
    "content": "### DocumentConverter Initialization\n\n\nThe `DocumentConverter` class serves as the primary entry point for document conversion:\n\n```\n```\n\n**Key responsibilities:**\n\n- Maintain `format_to_options` mapping: `Dict[InputFormat, FormatOption]`\n- Cache initialized pipelines: `Dict[Tuple[Type[BasePipeline], str], BasePipeline]`\n- Coordinate batch processing with concurrency control\n\n**Entry Point Diagram**\n\n```\n```\n\n**Sources:** [docling/document\\_converter.py184-205](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L205) [docling/cli/main.py299-816](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L299-L816)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "DocumentConverter Initialization",
      "heading_level": 3,
      "chunk_index": 4,
      "collection": "docling",
      "char_count": 680,
      "estimated_tokens": 170,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:5",
    "content": "### Conversion Methods\n\n\nThe API provides two methods:\n\n| Method                | Description                | Return Type                  |\n| --------------------- | -------------------------- | ---------------------------- |\n| `convert(source)`     | Convert single document    | `ConversionResult`           |\n| `convert_all(source)` | Convert multiple documents | `Iterator[ConversionResult]` |\n\nBoth methods accept:\n\n- `source`: `Path`, `str` (URL), or `DocumentStream` (BytesIO)\n- `headers`: Optional HTTP headers for URL sources\n- `raises_on_error`: Control error propagation\n- `max_num_pages`, `max_file_size`: Document limits\n- `page_range`: Tuple of (start\\_page, end\\_page)\n\n**Sources:** [docling/document\\_converter.py228-283](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L228-L283)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Conversion Methods",
      "heading_level": 3,
      "chunk_index": 5,
      "collection": "docling",
      "char_count": 842,
      "estimated_tokens": 210,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:6",
    "content": "### Format Detection Mechanism\n\n\nFormat detection is handled by `_DocumentConversionInput._guess_format()`, which uses a three-tier strategy:",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Format Detection Mechanism",
      "heading_level": 3,
      "chunk_index": 6,
      "collection": "docling",
      "char_count": 141,
      "estimated_tokens": 35,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:7",
    "content": "#### Format Detection Strategy\n\n\n```\n```\n\n**Sources:** [docling/datamodel/document.py280-489](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L280-L489)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Format Detection Strategy",
      "heading_level": 4,
      "chunk_index": 7,
      "collection": "docling",
      "char_count": 191,
      "estimated_tokens": 47,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:8",
    "content": "#### Tier 1: MIME Type Detection\n\n\nUses `filetype.guess_mime()` on file path or first 8KB of stream:\n\n- For `Path`: Reads file signature\n- For `DocumentStream`: Reads first 8KB, seeks back to 0\n\nSpecial cases:\n\n- `application/zip` → Infer DOCX/XLSX/PPTX from file extension\n- `application/gzip` → Check for METS metadata via `_detect_mets_gbs()`\n\n**Sources:** [docling/datamodel/document.py285-323](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L285-L323)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Tier 1: MIME Type Detection",
      "heading_level": 4,
      "chunk_index": 8,
      "collection": "docling",
      "char_count": 496,
      "estimated_tokens": 124,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:9",
    "content": "#### Tier 2: Extension Mapping\n\n\nIf MIME detection fails, use extension-based lookup:\n\n```\n```\n\nMappings defined in `FormatToMimeType` dictionary.\n\n**Sources:** [docling/datamodel/document.py376-400](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L376-L400) [docling/datamodel/base\\_models.py101-133](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L101-L133)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Tier 2: Extension Mapping",
      "heading_level": 4,
      "chunk_index": 9,
      "collection": "docling",
      "char_count": 441,
      "estimated_tokens": 110,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:10",
    "content": "#### Tier 3: Content Analysis\n\n\nFor ambiguous formats (e.g., `application/xml`), parse DOCTYPE declarations:\n\n| DOCTYPE Pattern                            | Format                  |\n| ------------------------------------------ | ----------------------- |\n| `us-patent-application-v4`, `us-grant-025` | `InputFormat.XML_USPTO` |\n| `JATS-journalpublishing`, `JATS-archive`   | `InputFormat.XML_JATS`  |\n| `PATN\\r\\n` (plain text)                    | `InputFormat.XML_USPTO` |\n\n**Sources:** [docling/datamodel/document.py341-374](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L341-L374)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Tier 3: Content Analysis",
      "heading_level": 4,
      "chunk_index": 10,
      "collection": "docling",
      "char_count": 625,
      "estimated_tokens": 156,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:11",
    "content": "### InputDocument Creation\n\n\nOnce format is detected, `_DocumentConversionInput.docs()` creates `InputDocument` instances:\n\n**InputDocument Creation Flow**\n\n```\n```\n\n**Key validation checks:**\n\n- File size ≤ `limits.max_file_size`\n- Page count ≤ `limits.max_num_pages`\n- Page range within bounds: `limits.page_range`\n- Backend validity: `backend.is_valid()`\n\nIf any check fails, `InputDocument.valid = False`.\n\n**Sources:** [docling/datamodel/document.py104-191](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L104-L191) [docling/datamodel/document.py236-278](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L236-L278)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "InputDocument Creation",
      "heading_level": 3,
      "chunk_index": 11,
      "collection": "docling",
      "char_count": 702,
      "estimated_tokens": 175,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:12",
    "content": "### FormatOption Mapping\n\n\nThe routing mechanism uses `FormatOption` objects that pair formats with pipelines and backends:\n\n**FormatOption Structure**\n\n```\n```\n\n**Sources:** [docling/document\\_converter.py62-130](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L62-L130)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "FormatOption Mapping",
      "heading_level": 3,
      "chunk_index": 12,
      "collection": "docling",
      "char_count": 310,
      "estimated_tokens": 77,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:13",
    "content": "### Default Format Options\n\n\nDefault mappings are defined in `_get_default_option()`:\n\n| InputFormat | Pipeline              | Backend                         |\n| ----------- | --------------------- | ------------------------------- |\n| `PDF`       | `StandardPdfPipeline` | `DoclingParseV4DocumentBackend` |\n| `IMAGE`     | `StandardPdfPipeline` | `DoclingParseV4DocumentBackend` |\n| `DOCX`      | `SimplePipeline`      | `MsWordDocumentBackend`         |\n| `XLSX`      | `SimplePipeline`      | `MsExcelDocumentBackend`        |\n| `PPTX`      | `SimplePipeline`      | `MsPowerpointDocumentBackend`   |\n| `HTML`      | `SimplePipeline`      | `HTMLDocumentBackend`           |\n| `MD`        | `SimplePipeline`      | `MarkdownDocumentBackend`       |\n| `AUDIO`     | `AsrPipeline`         | `NoOpBackend`                   |\n\n**Sources:** [docling/document\\_converter.py132-182](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L132-L182)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Default Format Options",
      "heading_level": 3,
      "chunk_index": 13,
      "collection": "docling",
      "char_count": 978,
      "estimated_tokens": 244,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:14",
    "content": "### Pipeline Selection and Caching\n\n\nPipelines are cached by `(pipeline_class, options_hash)` to avoid redundant initialization:\n\n**Pipeline Caching Flow**\n\n```\n```\n\n**Cache key construction:**\n\n1. Serialize `pipeline_options.model_dump()` to string\n2. Compute MD5 hash: `hashlib.md5(options_str.encode(\"utf-8\"))`\n3. Create tuple: `(pipeline_class, options_hash)`\n\nThis ensures:\n\n- Same pipeline class + options → Same pipeline instance\n- Thread-safe via `_PIPELINE_CACHE_LOCK`\n- Models loaded only once per unique configuration\n\n**Sources:** [docling/document\\_converter.py207-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L207-L378)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Pipeline Selection and Caching",
      "heading_level": 3,
      "chunk_index": 14,
      "collection": "docling",
      "char_count": 685,
      "estimated_tokens": 171,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:15",
    "content": "## Pipeline Execution Phases\n\n\nAll pipelines inherit from `BasePipeline` and implement a three-phase execution model:\n\n**Three-Phase Execution Model**\n\n```\n```\n\n**Sources:** [docling/pipeline/base\\_pipeline.py62-123](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L123)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Pipeline Execution Phases",
      "heading_level": 2,
      "chunk_index": 15,
      "collection": "docling",
      "char_count": 317,
      "estimated_tokens": 79,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:16",
    "content": "### Phase 1: Build Document (\\_build\\_document)\n\n\nAbstract method implemented by each pipeline. Responsibilities:\n\n- Load document pages/content from backend\n- Apply models (OCR, layout, tables) to extract structure\n- Populate `ConversionResult.pages` with predictions\n\n**Examples:**\n\n- **PaginatedPipeline**: Iterate pages, apply sequential models via `build_pipe`\n- **SimplePipeline**: Call `backend.convert()` directly to get `DoclingDocument`\n- **VlmPipeline**: Generate page images, run VLM model for predictions\n- **AsrPipeline**: Transcribe audio, create text-based document\n\n**Sources:** [docling/pipeline/base\\_pipeline.py86-88](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L86-L88) [docling/pipeline/simple\\_pipeline.py26-41](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L26-L41)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Phase 1: Build Document (\\_build\\_document)",
      "heading_level": 3,
      "chunk_index": 16,
      "collection": "docling",
      "char_count": 883,
      "estimated_tokens": 220,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:17",
    "content": "### Phase 2: Assemble Document (\\_assemble\\_document)\n\n\nConstructs the hierarchical `DoclingDocument` from page-level predictions:\n\n**Assembly Process (PaginatedPipeline Example)**\n\n```\n```\n\n**Key operations:**\n\n- Convert page-level `Cluster`, `Table`, `FigureElement` to `DocItem` hierarchy\n- Assign provenance metadata (page numbers, bounding boxes)\n- Generate cropped images for `PictureItem`, `TableItem` if requested\n- Clear page backends/caches if not needed downstream\n\n**Sources:** [docling/pipeline/base\\_pipeline.py90-91](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L90-L91)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Phase 2: Assemble Document (\\_assemble\\_document)",
      "heading_level": 3,
      "chunk_index": 17,
      "collection": "docling",
      "char_count": 631,
      "estimated_tokens": 157,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:18",
    "content": "### Phase 3: Enrich Document (\\_enrich\\_document)\n\n\nApplies enrichment models to individual `NodeItem` elements in the `DoclingDocument`:\n\n**Enrichment Pipeline Flow**\n\n```\n```\n\n**Common enrichment models:**\n\n- `CodeFormulaModel`: Extract LaTeX from code/formula images\n- `DocumentPictureClassifier`: Classify picture types\n- `PictureDescriptionVlmModel`: Generate image captions\n\n**Sources:** [docling/pipeline/base\\_pipeline.py93-115](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L93-L115) [docling/pipeline/base\\_pipeline.py135-177](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L135-L177)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Phase 3: Enrich Document (\\_enrich\\_document)",
      "heading_level": 3,
      "chunk_index": 18,
      "collection": "docling",
      "char_count": 688,
      "estimated_tokens": 172,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:19",
    "content": "## Complete Conversion Flow Sequence\n\n\nThe following diagram shows the complete end-to-end flow with all components:\n\n**End-to-End Document Conversion Sequence**\n\n```\n```\n\n**Sources:** [docling/document\\_converter.py313-432](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L313-L432) [docling/pipeline/base\\_pipeline.py62-123](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L123)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Complete Conversion Flow Sequence",
      "heading_level": 2,
      "chunk_index": 19,
      "collection": "docling",
      "char_count": 471,
      "estimated_tokens": 117,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:20",
    "content": "### ConversionResult Structure\n\n\nThe `ConversionResult` object encapsulates all conversion outputs:\n\n| Field        | Type                       | Description                                     |\n| ------------ | -------------------------- | ----------------------------------------------- |\n| `input`      | `InputDocument`            | Original input metadata                         |\n| `status`     | `ConversionStatus`         | `SUCCESS`, `FAILURE`, `PARTIAL_SUCCESS`         |\n| `errors`     | `List[ErrorItem]`          | Error details per component                     |\n| `pages`      | `List[Page]`               | Page-level data (may be cleared after assembly) |\n| `document`   | `DoclingDocument`          | Final structured document                       |\n| `timings`    | `Dict[str, ProfilingItem]` | Performance metrics                             |\n| `confidence` | `ConfidenceReport`         | Quality scores per page/model                   |\n\n**Sources:** [docling/datamodel/document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L198-L215)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "ConversionResult Structure",
      "heading_level": 3,
      "chunk_index": 20,
      "collection": "docling",
      "char_count": 1115,
      "estimated_tokens": 278,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:21",
    "content": "### Export Formats\n\n\nThe `DoclingDocument` can be exported to multiple formats:\n\n**Export Method Overview**\n\n```\n```\n\n**Export options:**\n\n- `image_mode`: `PLACEHOLDER`, `EMBEDDED` (base64), `REFERENCED` (separate PNG files)\n- `strict_text`: Strip all formatting (for Markdown)\n- `split_page_view`: Separate HTML page per document page\n\n**Sources:** [docling/cli/main.py191-289](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L191-L289)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Export Formats",
      "heading_level": 3,
      "chunk_index": 21,
      "collection": "docling",
      "char_count": 466,
      "estimated_tokens": 116,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:22",
    "content": "### Status Determination\n\n\nThe `_determine_status()` method evaluates conversion success:\n\n**Status Resolution Logic**\n\n```\n```\n\n**Implementation varies by pipeline:**\n\n- **PaginatedPipeline**: Check each page backend validity\n- **SimplePipeline**: Return `SUCCESS` if no exceptions raised\n- **AsrPipeline**: Check transcription success\n\n**Sources:** [docling/pipeline/base\\_pipeline.py118-119](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L118-L119) [docling/pipeline/base\\_pipeline.py295-314](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L295-L314)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Status Determination",
      "heading_level": 3,
      "chunk_index": 22,
      "collection": "docling",
      "char_count": 647,
      "estimated_tokens": 161,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:23",
    "content": "## Batch Processing and Concurrency\n\n\nThe `DocumentConverter` supports concurrent document processing:\n\n**Batch Processing Configuration**\n\n| Setting                 | Environment Variable            | Default | Description              |\n| ----------------------- | ------------------------------- | ------- | ------------------------ |\n| `doc_batch_size`        | `DOCLING_DOC_BATCH_SIZE`        | 10      | Documents per batch      |\n| `doc_batch_concurrency` | `DOCLING_DOC_BATCH_CONCURRENCY` | 1       | Worker threads           |\n| `page_batch_size`       | `DOCLING_PAGE_BATCH_SIZE`       | 10      | Pages processed together |\n\n**Concurrency Flow**\n\n```\n```\n\n**Key design points:**\n\n- Each document processes independently (no shared mutable state)\n- Pipeline instances are cached and reused (thread-safe)\n- Models are initialized once per pipeline (read-only access from workers)\n- ThreadPoolExecutor manages worker threads automatically\n\n**Sources:** [docling/document\\_converter.py313-349](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L313-L349) [docling/datamodel/settings.py1-82](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/settings.py#L1-L82)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Batch Processing and Concurrency",
      "heading_level": 2,
      "chunk_index": 23,
      "collection": "docling",
      "char_count": 1234,
      "estimated_tokens": 308,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:24",
    "content": "### Error Capture\n\n\nErrors are captured at multiple levels and stored in `ConversionResult.errors`:\n\n| Component Type     | Module Examples                      | Typical Errors                 |\n| ------------------ | ------------------------------------ | ------------------------------ |\n| `DOCUMENT_BACKEND` | `DoclingParseV4DocumentBackend`      | Corrupt PDF, invalid format    |\n| `MODEL`            | `LayoutModel`, `TableStructureModel` | Model inference failure        |\n| `DOC_ASSEMBLER`    | `PageAssembleModel`                  | Hierarchy construction error   |\n| `USER_INPUT`       | `DocumentConverter`                  | Invalid format, file not found |\n\n**Error Item Structure:**\n\n```\n```\n\n**Sources:** [docling/datamodel/base\\_models.py147-158](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py#L147-L158)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Error Capture",
      "heading_level": 3,
      "chunk_index": 24,
      "collection": "docling",
      "char_count": 864,
      "estimated_tokens": 216,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:25",
    "content": "### Raises vs Non-Raises Mode\n\n\nConversion behavior controlled by `raises_on_error` parameter:\n\n**Error Handling Modes**\n\n```\n```\n\n**Non-raises mode allows:**\n\n- Processing multiple documents even if some fail\n- Collecting all errors for batch analysis\n- Partial success scenarios (some pages succeed)\n\n**Sources:** [docling/document\\_converter.py380-432](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L380-L432) [docling/pipeline/base\\_pipeline.py62-84](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L84)\n\n---",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Raises vs Non-Raises Mode",
      "heading_level": 3,
      "chunk_index": 25,
      "collection": "docling",
      "char_count": 600,
      "estimated_tokens": 150,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:26",
    "content": "## Summary\n\n\nThe document conversion flow implements a clean separation of concerns:\n\n1. **Format Detection**: Multi-tier strategy (MIME → Extension → Content)\n2. **Routing**: `FormatOption` maps formats to pipeline/backend pairs\n3. **Caching**: Pipelines reused via `(class, options_hash)` keys\n4. **Execution**: Three-phase model (build → assemble → enrich)\n5. **Output**: Unified `DoclingDocument` with multiple export formats\n\nThe architecture enables:\n\n- **Extensibility**: New formats add backend + pipeline + `FormatOption`\n- **Performance**: Pipeline/model caching, batch processing, concurrency\n- **Reliability**: Isolated execution, comprehensive error capture\n- **Flexibility**: Per-format configuration, multiple output formats\n\n**Key Code Entities:**",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Summary",
      "heading_level": 2,
      "chunk_index": 26,
      "collection": "docling",
      "char_count": 763,
      "estimated_tokens": 190,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:27",
    "content": "caching, batch processing, concurrency\n- **Reliability**: Isolated execution, comprehensive error capture\n- **Flexibility**: Per-format configuration, multiple output formats\n\n**Key Code Entities:**\n\n| Entity                     | Location                                                                                                                  | Role                              |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------- | --------------------------------- |\n| `DocumentConverter`        | [document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L184-L433) | Orchestrator                      |\n| `_DocumentConversionInput` | [document.py236-489](https://github.com/docling-project/docling/blob/f7244a43/document.py#L236-L489)                      | Format detection, input parsing   |\n| `InputDocument`            | [document.py104-191](https://github.com/docling-project/docling/blob/f7244a43/document.py#L104-L191)                      | Document metadata + backend       |\n| `FormatOption`             | [document\\_converter.py62-130](https://github.com/docling-project/docling/blob/f7244a43/document_converter.py#L62-L130)   | Format → pipeline/backend mapping |\n| `BasePipeline`             | [base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/base_pipeline.py#L43-L133)             | Three-phase execution model       |\n| `ConversionResult`         | [document.py198-215](https://github.com/docling-project/docling/blob/f7244a43/document.py#L198-L215)                      | Output container                  |\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "Summary",
      "heading_level": 2,
      "chunk_index": 27,
      "collection": "docling",
      "char_count": 1827,
      "estimated_tokens": 456,
      "total_chunks": 29
    }
  },
  {
    "chunk_id": "docling:_docling-project_docling_2.1-document-conversion-flow.md:chunk:28",
    "content": "### On this page\n\n\n- [Document Conversion Flow](#document-conversion-flow.md)\n- [Overview](#overview.md)\n- [Entry Points and Initialization](#entry-points-and-initialization.md)\n- [DocumentConverter Initialization](#documentconverter-initialization.md)\n- [Conversion Methods](#conversion-methods.md)\n- [Format Detection and Input Processing](#format-detection-and-input-processing.md)\n- [Format Detection Mechanism](#format-detection-mechanism.md)\n- [Format Detection Strategy](#format-detection-strategy.md)\n- [Tier 1: MIME Type Detection](#tier-1-mime-type-detection.md)\n- [Tier 2: Extension Mapping](#tier-2-extension-mapping.md)\n- [Tier 3: Content Analysis](#tier-3-content-analysis.md)\n- [InputDocument Creation](#inputdocument-creation.md)\n- [Backend and Pipeline Routing](#backend-and-pipeline-routing.md)\n- [FormatOption Mapping](#formatoption-mapping.md)\n- [Default Format Options](#default-format-options.md)\n- [Pipeline Selection and Caching](#pipeline-selection-and-caching.md)\n- [Pipeline Execution Phases](#pipeline-execution-phases.md)\n- [Phase 1: Build Document (\\_build\\_document)](#phase-1-build-document-_build_document.md)\n- [Phase 2: Assemble Document (\\_assemble\\_document)](#phase-2-assemble-document-_assemble_document.md)\n- [Phase 3: Enrich Document (\\_enrich\\_document)](#phase-3-enrich-document-_enrich_document.md)\n- [Complete Conversion Flow Sequence](#complete-conversion-flow-sequence.md)\n- [Output Generation](#output-generation.md)\n- [ConversionResult Structure](#conversionresult-structure.md)\n- [Export Formats](#export-formats.md)\n- [Status Determination](#status-determination.md)\n- [Batch Processing and Concurrency](#batch-processing-and-concurrency.md)\n- [Error Handling and Recovery](#error-handling-and-recovery.md)\n- [Error Capture](#error-capture.md)\n- [Raises vs Non-Raises Mode](#raises-vs-non-raises-mode.md)\n- [Summary](#summary.md)",
    "metadata": {
      "source": "_docling-project_docling_2.1-document-conversion-flow.md",
      "heading": "On this page",
      "heading_level": 3,
      "chunk_index": 28,
      "collection": "docling",
      "char_count": 1880,
      "estimated_tokens": 470,
      "total_chunks": 29
    }
  }
]