[
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:0",
    "content": "PDF Processing Backends | docling-project/docling | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[docling-project/docling](https://github.com/docling-project/docling \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 12 October 2025 ([f7244a](https://github.com/docling-project/docling/commits/f7244a43))\n\n- [Overview](docling-project/docling/1-overview.md)\n- [Installation](docling-project/docling/1.1-installation.md)\n- [Quick Start](docling-project/docling/1.2-quick-start.md)\n- [Core Architecture](docling-project/docling/2-core-architecture.md)\n- [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md)\n- [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md)\n- [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md)\n- [Format Detection and Routing](docling-project/docling/2.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 276,
      "char_count": 1011,
      "start_char": 0,
      "end_char": 1011
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:1",
    "content": "3-configuration-and-pipeline-options.md)\n- [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md)\n- [Document Backends](docling-project/docling/3-document-backends.md)\n- [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md)\n- [Office Document Backends](docling-project/docling/3.2-office-document-backends.md)\n- [Web and Markup Backends](docling-project/docling/3.3-web-and-markup-backends.md)\n- [AI/ML Models](docling-project/docling/4-aiml-models.md)\n- [OCR Models](docling-project/docling/4.1-ocr-models.md)\n- [Layout and Table Structure Models](docling-project/docling/4.2-layout-and-table-structure-models.md)\n- [Vision Language Models](docling-project/docling/4.3-vision-language-models.md)\n- [Inline VLM Models](docling-project/docling/4.3.1-inline-vlm-models.md)\n- [API-Based VLM Models](docling-project/docling/4.3.2-api-based-vlm-models.md)\n- [Enrichment Models](docling-project/docling/4.4-enrichment-models.md)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 283,
      "char_count": 987,
      "start_char": 911,
      "end_char": 1899
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:2",
    "content": ".2-api-based-vlm-models.md)\n- [Enrichment Models](docling-project/docling/4.4-enrichment-models.md)\n- [Processing Pipelines](docling-project/docling/5-processing-pipelines.md)\n- [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md)\n- [Threaded PDF Pipeline](docling-project/docling/5.2-threaded-pdf-pipeline.md)\n- [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md)\n- [Extraction Pipeline](docling-project/docling/5.4-extraction-pipeline.md)\n- [ASR Pipeline](docling-project/docling/5.5-asr-pipeline.md)\n- [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md)\n- [Command Line Interface](docling-project/docling/6-command-line-interface.md)\n- [Document Conversion CLI](docling-project/docling/6.1-document-conversion-cli.md)\n- [Model Management CLI](docling-project/docling/6.2-model-management-cli.md)\n- [Python SDK](docling-project/docling/7-python-sdk.md)\n- [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 275,
      "char_count": 1003,
      "start_char": 1799,
      "end_char": 2803
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:3",
    "content": "ng/7-python-sdk.md)\n- [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md)\n- [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md)\n- [Usage Examples](docling-project/docling/7.3-usage-examples.md)\n- [Output and Integration](docling-project/docling/8-output-and-integration.md)\n- [Export Formats](docling-project/docling/8.1-export-formats.md)\n- [Document Chunking](docling-project/docling/8.2-document-chunking.md)\n- [Framework Integrations](docling-project/docling/8.3-framework-integrations.md)\n- [Development and Testing](docling-project/docling/9-development-and-testing.md)\n- [Testing Framework](docling-project/docling/9.1-testing-framework.md)\n- [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md)\n- [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md)\n- [Deployment](docling-project/docling/10-deployment.md)\n- [Docker Deployment](docling-project/docling/10.1-docker-deployment.md)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 270,
      "char_count": 998,
      "start_char": 2703,
      "end_char": 3702
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:4",
    "content": "/docling/10-deployment.md)\n- [Docker Deployment](docling-project/docling/10.1-docker-deployment.md)\n- [Model Artifacts Management](docling-project/docling/10.2-model-artifacts-management.md)\n\nMenu\n\n# PDF Processing Backends\n\nRelevant source files\n\n- [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py)\n- [docling/backend/docling\\_parse\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py)\n- [docling/backend/docling\\_parse\\_v2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py)\n- [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py)\n- [docling/backend/pypdfium2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py)\n- [docling/models/base\\_ocr\\_model.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 288,
      "char_count": 1007,
      "start_char": 3602,
      "end_char": 4609
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:5",
    "content": "ject/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py)\n- [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py)\n- [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py)\n- [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py)\n- [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py)\n- [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py)\n- [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py)\n- [docling/models/page\\_preprocessing\\_model.py](https://github.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 268,
      "char_count": 945,
      "start_char": 4509,
      "end_char": 5454
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:6",
    "content": "ling/models/page_assemble_model.py)\n- [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py)\n- [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py)\n- [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py)\n- [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py)\n- [docling/utils/locks.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py)\n- [tests/test\\_backend\\_docling\\_parse\\_v4.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py)\n- [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 280,
      "char_count": 1017,
      "start_char": 5354,
      "end_char": 6372
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:7",
    "content": "https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py)\n- [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py)\n\n## Purpose and Scope\n\nThis page documents the PDF backend implementations in Docling, which are responsible for extracting text, images, and layout information from PDF documents. PDF backends provide the low-level document reading interface that supplies data to the processing pipelines.\n\nFor information about how backends are selected and used in the conversion flow, see [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md). For details on pipeline processing that operates on backend data, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md).\n\n## Overview\n\nDocling provides four PDF backend implementations, each with different capabilities and use cases:",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 195,
      "char_count": 938,
      "start_char": 6272,
      "end_char": 7212
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:8",
    "content": "Docling provides four PDF backend implementations, each with different capabilities and use cases:\n\n| Backend                         | Status              | Text Extraction  | Granularity              | Use Case                                           |\n| ------------------------------- | ------------------- | ---------------- | ------------------------ | -------------------------------------------------- |\n| `DoclingParseV4DocumentBackend` | **Current default** | docling-parse v4 | Characters, words, lines | High-quality text extraction with fine granularity |\n| `DoclingParseV2DocumentBackend` | Stable              | docling-parse v2 | Text lines               | Sanitized format, good for most documents          |\n| `DoclingParseDocumentBackend`   | Legacy              | docling-parse v1 | Text lines               | Backward compatibility                             |",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 148,
      "char_count": 884,
      "start_char": 7112,
      "end_char": 7997
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:9",
    "content": "docling-parse v1 | Text lines               | Backward compatibility                             |\n| `PyPdfiumDocumentBackend`       | Alternative         | pypdfium2 only   | Text lines (merged)      | Pure pypdfium2, no docling-parse dependency        |\n\nAll backends use `pypdfium2` for PDF rendering and page image generation. The DoclingParse variants add sophisticated text extraction capabilities through the `docling-parse` library.\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py1-250](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L1-L250) [docling/backend/docling\\_parse\\_v2\\_backend.py1-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L1-L277) [docling/backend/docling\\_parse\\_backend.py1-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L1-L238) [docling/backend/pypdfium2\\_backend.py1-400](https://github.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 283,
      "char_count": 1000,
      "start_char": 7897,
      "end_char": 8898
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:10",
    "content": "ckend/docling_parse_backend.py#L1-L238) [docling/backend/pypdfium2\\_backend.py1-400](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L1-L400)\n\n## Backend Architecture\n\n```\n```\n\nEach backend consists of two classes:\n\n- **Document Backend**: Manages the entire PDF document, handles loading/unloading, and creates page backends\n- **Page Backend**: Provides access to individual page data including text cells, images, and rendering\n\n**Sources:** [docling/backend/abstract\\_backend.py1-64](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py#L1-L64) [docling/backend/docling\\_parse\\_v4\\_backend.py191-250](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L191-L250) [docling/backend/docling\\_parse\\_v2\\_backend.py228-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L228-L277)\n\n## DoclingParseV4Backend (Current Default)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 307,
      "char_count": 1013,
      "start_char": 8798,
      "end_char": 9813
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:11",
    "content": "docling/backend/docling_parse_v2_backend.py#L228-L277)\n\n## DoclingParseV4Backend (Current Default)\n\n`DoclingParseV4DocumentBackend` is the current default backend, providing the highest quality text extraction with character, word, and line-level granularity.\n\n### Key Features\n\n- **Multi-level granularity**: Extracts characters, words, and text lines\n- **Lazy parsing**: Page data is parsed on-demand via `_ensure_parsed()` method\n- **Configurable extraction**: Options for `create_words`, `create_textlines`, `keep_chars`, `keep_lines`\n- **Memory efficient**: Pages can be unloaded individually\n\n### Implementation Details\n\n```\n```\n\nThe v4 backend uses the modern `docling-parse` API with `DoclingPdfParser` and `PdfDocument` classes. Text extraction happens lazily when `get_text_cells()` or `get_segmented_page()` is called:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py52-74](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L52-L74)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 248,
      "char_count": 994,
      "start_char": 9713,
      "end_char": 10709
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:12",
    "content": "hub.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L52-L74)\n\nThe `_ensure_parsed()` method retrieves character, word, and line cells from docling-parse, then converts them to top-left coordinate origin:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py66-74](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L66-L74)\n\n### Usage Example\n\n```\n```\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py24-189](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L24-L189) [tests/test\\_backend\\_docling\\_parse\\_v4.py18-26](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py#L18-L26)\n\n## DoclingParseV2Backend (Sanitized Format)\n\n`DoclingParseV2DocumentBackend` provides a \"sanitized\" data format with structured arrays, offering a balance between quality and simplicity.\n\n### Data Structure",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 287,
      "char_count": 977,
      "start_char": 10609,
      "end_char": 11588
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:13",
    "content": "mat with structured arrays, offering a balance between quality and simplicity.\n\n### Data Structure\n\nV2 uses a structured format with separate header and data arrays:\n\n[docling/backend/docling\\_parse\\_v2\\_backend.py60-77](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L60-L77)\n\nThe sanitized format includes:\n\n- `dimension`: Page width and height\n- `cells`: Header array (field names) + data array (cell values)\n- `images`: Bitmap locations\n\nThis structure allows efficient access to cell properties like `x0`, `y0`, `x1`, `y1`, `text` without parsing complex nested structures.\n\n### Coordinate Scaling\n\nV2 requires coordinate scaling from parser space to pypdfium2 space:\n\n[docling/backend/docling\\_parse\\_v2\\_backend.py84-92](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L84-L92)\n\nThe scaling factors are computed as:\n\n```\nscale_x = pypdfium_width / parser_width\nscale_y = pypdfium_height / parser_height\n```",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 269,
      "char_count": 1020,
      "start_char": 11488,
      "end_char": 12510
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:14",
    "content": "ted as:\n\n```\nscale_x = pypdfium_width / parser_width\nscale_y = pypdfium_height / parser_height\n```\n\n**Sources:** [docling/backend/docling\\_parse\\_v2\\_backend.py32-226](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L32-L226)\n\n## DoclingParseBackend (Legacy v1)\n\n`DoclingParseDocumentBackend` is the original implementation, maintained for backward compatibility.\n\n### Differences from V2\n\nThe v1 backend uses a simpler, less structured format:\n\n[docling/backend/docling\\_parse\\_backend.py54-67](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L54-L67)\n\nKey differences:\n\n- Direct access to `_dpage[\"cells\"]` array without header/data separation\n- Uses `content[\"rnormalized\"]` for text content\n- Similar coordinate scaling requirements\n\nThe v1 parser API is also different:\n\n[docling/backend/docling\\_parse\\_backend.py207-220](https://github.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 259,
      "char_count": 946,
      "start_char": 12410,
      "end_char": 13356
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:15",
    "content": "1 parser API is also different:\n\n[docling/backend/docling\\_parse\\_backend.py207-220](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L207-L220)\n\nV1 uses `pdf_parser_v1()` with methods like `load_document()` and `parse_pdf_from_key_on_page()`.\n\n**Sources:** [docling/backend/docling\\_parse\\_backend.py26-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L26-L238)\n\n## PyPdfiumBackend (Pure pypdfium2)\n\n`PyPdfiumDocumentBackend` provides PDF reading without the `docling-parse` dependency, using only `pypdfium2`.\n\n### Cell Extraction and Merging\n\nPyPdfium2 produces highly fragmented text cells (often sub-word level). The backend implements sophisticated cell merging:\n\n```\n```\n\nThe merging algorithm:\n\n[docling/backend/pypdfium2\\_backend.py157-252](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L157-L252)\n\nThe algorithm:\n\n1.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 285,
      "char_count": 977,
      "start_char": 13256,
      "end_char": 14233
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:16",
    "content": "ng-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L157-L252)\n\nThe algorithm:\n\n1. **Groups rows** based on vertical alignment (top/bottom within 0.5× height threshold)\n2. **Merges horizontally** within each row (gap < 1.0× average height)\n3. **Re-extracts text** from merged bounding boxes to avoid concatenation errors\n\n### Thread Safety\n\nAll pypdfium2 operations are protected by a global lock:\n\n[docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3)\n\nThis lock is used throughout pypdfium2 operations:\n\n[docling/backend/pypdfium2\\_backend.py122-124](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L122-L124) [docling/backend/pypdfium2\\_backend.py348-349](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L348-L349)\n\n**Sources:** [docling/backend/pypdfium2\\_backend.py101-400](https://github.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 313,
      "char_count": 965,
      "start_char": 14133,
      "end_char": 15098
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:17",
    "content": "2_backend.py#L348-L349)\n\n**Sources:** [docling/backend/pypdfium2\\_backend.py101-400](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L101-L400) [docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3)\n\n## Coordinate System Transformations\n\n### Origins and Conventions\n\nPDF and Docling use different coordinate systems:\n\n```\n```\n\n### Transformation Implementation\n\nAll backends convert coordinates from bottom-left (PDF native) to top-left (Docling standard):\n\n[docling/backend/docling\\_parse\\_v2\\_backend.py84-92](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L84-L92)\n\nThe conversion formula for a bounding box:\n\n```\nl_new = l_old * scale_x\nr_new = r_old * scale_x\nt_new = (parser_height - t_old) * scale_y  # Flip Y-axis\nb_new = (parser_height - b_old) * scale_y\n```\n\n### Scaling Operations\n\nBackends support scaling for different DPI requirements:",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 296,
      "char_count": 1009,
      "start_char": 14998,
      "end_char": 16009
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:18",
    "content": "d) * scale_y\n```\n\n### Scaling Operations\n\nBackends support scaling for different DPI requirements:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py171-173](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L171-L173)\n\nCommon scaling factors:\n\n- `scale=1.0`: Native 72 DPI\n- `scale=1.67`: \\~120 DPI (used by CodeFormulaModel)\n- `scale=2.0`: 144 DPI (used by TableStructureModel)\n- `scale=3.0`: 216 DPI (used by OCR models)\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169) [docling/backend/pypdfium2\\_backend.py327-361](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L327-L361)\n\n## Text Extraction and Cell Processing\n\n### Common Interface\n\nAll page backends implement these text extraction methods:\n\n| Method                   | Purpose                      | Return Type                  |",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 313,
      "char_count": 1020,
      "start_char": 15909,
      "end_char": 16930
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:19",
    "content": "ethods:\n\n| Method                   | Purpose                      | Return Type                  |\n| ------------------------ | ---------------------------- | ---------------------------- |\n| `get_text_cells()`       | Get all text cells on page   | `Iterable[TextCell]`         |\n| `get_segmented_page()`   | Get structured page data     | `Optional[SegmentedPdfPage]` |\n| `get_text_in_rect(bbox)` | Extract text in bounding box | `str`                        |\n\n### Text in Rect Implementation\n\nThe `get_text_in_rect()` method finds text cells that overlap with a given bounding box:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py79-105](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L79-L105)\n\nThe algorithm:\n\n1. Iterate through all text cells on the page\n2. Convert cell bbox to same coordinate system as query bbox\n3. Calculate `intersection_over_self` ratio\n4. Include cells with overlap > 0.5 (50% threshold)\n5. Concatenate text with spaces",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 239,
      "char_count": 1005,
      "start_char": 16830,
      "end_char": 17837
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:20",
    "content": "er_self` ratio\n4. Include cells with overlap > 0.5 (50% threshold)\n5. Concatenate text with spaces\n\n### SegmentedPdfPage Structure\n\nThe `SegmentedPdfPage` object contains:\n\n```\n```\n\nDoclingParseV4 is the only backend that populates word and character cells.\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py107-115](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L107-L115) [docling/backend/pypdfium2\\_backend.py304-322](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L304-L322)\n\n## Image Rendering and Cropping\n\n### Page Image Generation\n\nAll backends implement `get_page_image()` with identical signatures:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169)\n\nThe rendering process:\n\n1. Determine cropbox (defaults to full page)\n2. Calculate padbox in bottom-left coordinates for pypdfium2\n3.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 307,
      "char_count": 1024,
      "start_char": 17737,
      "end_char": 18761
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:21",
    "content": "mine cropbox (defaults to full page)\n2. Calculate padbox in bottom-left coordinates for pypdfium2\n3. Render at 1.5× the requested scale for sharpness\n4. Resize down to the target scale\n\nThis technique (render at higher resolution, then downsample) produces sharper images than rendering directly at the target scale.\n\n### Bitmap Detection\n\nThe `get_bitmap_rects()` method identifies image regions:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py117-133](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L117-L133)\n\nV4 uses docling-parse's bitmap resources, while PyPdfium2 uses pypdfium2's object API:\n\n[docling/backend/pypdfium2\\_backend.py254-289](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L254-L289)\n\nPyPdfium2 handles page rotation (90°, 180°, 270°) by adjusting bitmap coordinates.\n\n**Sources:** [docling/backend/pypdfium2\\_backend.py327-361](https://github.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 288,
      "char_count": 968,
      "start_char": 18661,
      "end_char": 19629
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:22",
    "content": "ing bitmap coordinates.\n\n**Sources:** [docling/backend/pypdfium2\\_backend.py327-361](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L327-L361) [docling/backend/docling\\_parse\\_v4\\_backend.py135-169](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L135-L169)\n\n## LayoutPostprocessor Integration\n\n### Role in PDF Processing\n\n`LayoutPostprocessor` is used by v2+ backends to refine layout predictions from the `LayoutModel`. While not directly part of the backend classes, it operates on data extracted by backends.\n\n```\n```\n\n### Spatial Indexing\n\nLayoutPostprocessor uses R-tree spatial indexing for efficient overlap detection:\n\n[docling/utils/layout\\_postprocessor.py50-106](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L50-L106)\n\nKey features:\n\n- 2D R-tree for spatial queries\n- Interval trees for 1D overlap checks\n- Combined strategy for finding overlap candidates",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 281,
      "char_count": 1017,
      "start_char": 19529,
      "end_char": 20548
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:23",
    "content": "queries\n- Interval trees for 1D overlap checks\n- Combined strategy for finding overlap candidates\n\n### Overlap Resolution\n\nThe postprocessor resolves overlapping clusters using Union-Find:\n\n[docling/utils/layout\\_postprocessor.py488-543](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L488-L543)\n\nProcess:\n\n1. Build spatial index of clusters\n2. Use UnionFind to group overlapping clusters\n3. Select best cluster from each group based on rules\n4. Merge cells from removed clusters into the selected cluster\n\n**Sources:** [docling/utils/layout\\_postprocessor.py155-256](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py#L155-L256) [docling/models/layout\\_model.py208-212](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L208-L212)\n\n## Thread Safety and Resource Management\n\n### Lock Management\n\npypdfium2 operations require thread-safe access via a global lock:\n\n[docling/utils/locks.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 270,
      "char_count": 1015,
      "start_char": 20448,
      "end_char": 21464
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:24",
    "content": "anagement\n\npypdfium2 operations require thread-safe access via a global lock:\n\n[docling/utils/locks.py1-3](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py#L1-L3)\n\nThis lock is applied in all backends that use pypdfium2:\n\n[docling/backend/pypdfium2\\_backend.py376-378](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L376-L378)\n\n### Resource Cleanup\n\nAll backends implement `unload()` for proper resource cleanup:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py181-188](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L181-L188)\n\nThe cleanup sequence:\n\n1. **Page-level cleanup**: Unload individual pages from docling-parse\n2. **Document-level cleanup**: Close pypdfium2 document with lock\n3. **Stream cleanup**: Close BytesIO streams if applicable\n\nProper cleanup prevents memory leaks and file descriptor exhaustion, especially important in multi-threaded or batch processing scenarios.",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 281,
      "char_count": 1018,
      "start_char": 21364,
      "end_char": 22384
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:25",
    "content": "file descriptor exhaustion, especially important in multi-threaded or batch processing scenarios.\n\n### Page Caching in V4\n\nDoclingParseV4 implements page-level unloading:\n\n[docling/backend/docling\\_parse\\_v4\\_backend.py181-184](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L181-L184)\n\nThis allows selective memory management - frequently accessed pages can remain loaded while others are unloaded to conserve memory.\n\n**Sources:** [docling/backend/docling\\_parse\\_v4\\_backend.py234-249](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L234-L249) [docling/backend/pypdfium2\\_backend.py395-399](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py#L395-L399)\n\n## Backend Selection and Configuration\n\n### Selection via FormatOption\n\nBackends are selected through `PdfFormatOption`:\n\n```\n```\n\n### Testing Multiple Backends\n\nThe test suite verifies all backends work correctly:",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 278,
      "char_count": 1022,
      "start_char": 22284,
      "end_char": 23309
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:26",
    "content": "on`:\n\n```\n```\n\n### Testing Multiple Backends\n\nThe test suite verifies all backends work correctly:\n\n[tests/test\\_options.py141-165](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L141-L165)\n\nThis ensures API compatibility across all backend implementations.\n\n**Sources:** [tests/test\\_options.py141-165](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py#L141-L165) [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py)\n\nDismiss\n\nRefresh this wiki\n\nThis wiki was recently refreshed. Please wait 4 days to refresh again.\n\n### On this page\n\n- [PDF Processing Backends](#pdf-processing-backends.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Overview](#overview.md)\n- [Backend Architecture](#backend-architecture.md)\n- [DoclingParseV4Backend (Current Default)](#doclingparsev4backend-current-default.md)\n- [Key Features](#key-features.md)\n- [Implementation Details](#implementation-details.md)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 275,
      "char_count": 1022,
      "start_char": 23209,
      "end_char": 24232
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:27",
    "content": "fault.md)\n- [Key Features](#key-features.md)\n- [Implementation Details](#implementation-details.md)\n- [Usage Example](#usage-example.md)\n- [DoclingParseV2Backend (Sanitized Format)](#doclingparsev2backend-sanitized-format.md)\n- [Data Structure](#data-structure.md)\n- [Coordinate Scaling](#coordinate-scaling.md)\n- [DoclingParseBackend (Legacy v1)](#doclingparsebackend-legacy-v1.md)\n- [Differences from V2](#differences-from-v2.md)\n- [PyPdfiumBackend (Pure pypdfium2)](#pypdfiumbackend-pure-pypdfium2.md)\n- [Cell Extraction and Merging](#cell-extraction-and-merging.md)\n- [Thread Safety](#thread-safety.md)\n- [Coordinate System Transformations](#coordinate-system-transformations.md)\n- [Origins and Conventions](#origins-and-conventions.md)\n- [Transformation Implementation](#transformation-implementation.md)\n- [Scaling Operations](#scaling-operations.md)\n- [Text Extraction and Cell Processing](#text-extraction-and-cell-processing.md)\n- [Common Interface](#common-interface.md)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 257,
      "char_count": 980,
      "start_char": 24132,
      "end_char": 25113
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:28",
    "content": "ell Processing](#text-extraction-and-cell-processing.md)\n- [Common Interface](#common-interface.md)\n- [Text in Rect Implementation](#text-in-rect-implementation.md)\n- [SegmentedPdfPage Structure](#segmentedpdfpage-structure.md)\n- [Image Rendering and Cropping](#image-rendering-and-cropping.md)\n- [Page Image Generation](#page-image-generation.md)\n- [Bitmap Detection](#bitmap-detection.md)\n- [LayoutPostprocessor Integration](#layoutpostprocessor-integration.md)\n- [Role in PDF Processing](#role-in-pdf-processing.md)\n- [Spatial Indexing](#spatial-indexing.md)\n- [Overlap Resolution](#overlap-resolution.md)\n- [Thread Safety and Resource Management](#thread-safety-and-resource-management.md)\n- [Lock Management](#lock-management.md)\n- [Resource Cleanup](#resource-cleanup.md)\n- [Page Caching in V4](#page-caching-in-v4.md)\n- [Backend Selection and Configuration](#backend-selection-and-configuration.md)\n- [Selection via FormatOption](#selection-via-formatoption.md)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 233,
      "char_count": 968,
      "start_char": 25013,
      "end_char": 25982
    }
  },
  {
    "chunk_id": "docling-project_docling:_docling-project_docling_3.1-pdf-processing-backends.md:chunk:29",
    "content": "kend-selection-and-configuration.md)\n- [Selection via FormatOption](#selection-via-formatoption.md)\n- [Testing Multiple Backends](#testing-multiple-backends.md)",
    "metadata": {
      "source_file": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "source_collection": "docling-project_docling",
      "subdirectory": "root",
      "filename": "_docling-project_docling_3.1-pdf-processing-backends.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 38,
      "char_count": 160,
      "start_char": 25882,
      "end_char": 26906
    }
  }
]