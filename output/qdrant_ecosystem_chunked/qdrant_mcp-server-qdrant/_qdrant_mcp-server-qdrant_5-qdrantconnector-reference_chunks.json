[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:0",
    "content": "QdrantConnector Reference | qdrant/mcp-server-qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/mcp-server-qdrant](https://github.com/qdrant/mcp-server-qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 20 April 2025 ([a3ab0b](https://github.com/qdrant/mcp-server-qdrant/commits/a3ab0b96))\n\n- [Overview](qdrant/mcp-server-qdrant/1-overview.md)\n- [Architecture](qdrant/mcp-server-qdrant/2-architecture.md)\n- [Core Components](qdrant/mcp-server-qdrant/2.1-core-components.md)\n- [Embedding System](qdrant/mcp-server-qdrant/2.2-embedding-system.md)\n- [Configuration System](qdrant/mcp-server-qdrant/2.3-configuration-system.md)\n- [Installation & Deployment](qdrant/mcp-server-qdrant/3-installation-and-deployment.md)\n- [Configuration Options](qdrant/mcp-server-qdrant/3.1-configuration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 315,
      "char_count": 1007,
      "start_char": 0,
      "end_char": 1008
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:1",
    "content": "onfiguration-options.md)\n- [Client Integration](qdrant/mcp-server-qdrant/3.2-client-integration.md)\n- [API Reference](qdrant/mcp-server-qdrant/4-api-reference.md)\n- [qdrant-store Tool](qdrant/mcp-server-qdrant/4.1-qdrant-store-tool.md)\n- [qdrant-find Tool](qdrant/mcp-server-qdrant/4.2-qdrant-find-tool.md)\n- [QdrantConnector Reference](qdrant/mcp-server-qdrant/5-qdrantconnector-reference.md)\n- [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md)\n- [Development Guide](qdrant/mcp-server-qdrant/7-development-guide.md)\n\nMenu\n\n# QdrantConnector Reference\n\nRelevant source files\n\n- [src/mcp\\_server\\_qdrant/qdrant.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py)\n- [tests/test\\_qdrant\\_integration.py](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py)\n\n## Purpose and Scope",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 283,
      "char_count": 880,
      "start_char": 908,
      "end_char": 1790
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:2",
    "content": "com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py)\n\n## Purpose and Scope\n\nThis technical reference document provides detailed information about the `QdrantConnector` class, which serves as the interface between the MCP Server and the Qdrant vector database. The connector handles vector storage, retrieval, and collection management. For information about embedding generation, see [Embedding Providers](qdrant/mcp-server-qdrant/6-embedding-providers.md).\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py24-149](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L149)\n\n## Class Overview\n\n```\n```\n\nThe `QdrantConnector` class is responsible for:\n\n- Managing connections to the Qdrant database\n- Creating and managing collections\n- Storing entries with their vector embeddings\n- Performing semantic similarity searches\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py24-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 275,
      "char_count": 1021,
      "start_char": 1690,
      "end_char": 2711
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:3",
    "content": "ant.py24-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L49)\n\n## Initialization Parameters\n\nThe `QdrantConnector` constructor accepts the following parameters:\n\n| Parameter            | Type                | Description                                     | Required |\n| -------------------- | ------------------- | ----------------------------------------------- | -------- |\n| `qdrant_url`         | `Optional[str]`     | URL of the Qdrant server (remote or `:memory:`) | No       |\n| `qdrant_api_key`     | `Optional[str]`     | API key for the Qdrant server                   | No       |\n| `collection_name`    | `Optional[str]`     | Default collection name                         | No       |\n| `embedding_provider` | `EmbeddingProvider` | Provider for generating embeddings              | Yes      |\n| `qdrant_local_path`  | `Optional[str]`     | Path for local Qdrant storage                   | No       |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 241,
      "char_count": 1010,
      "start_char": 2611,
      "end_char": 3621
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:4",
    "content": "h for local Qdrant storage                   | No       |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py35-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L35-L49)\n\n## Entry Model\n\nThe `Entry` class represents a single item stored in the Qdrant collection:\n\n```\n```\n\n| Field      | Type                 | Description                                            |\n| ---------- | -------------------- | ------------------------------------------------------ |\n| `content`  | `str`                | The text content to be embedded and stored             |\n| `metadata` | `Optional[Metadata]` | Additional data associated with the content (optional) |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py15-21](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L15-L21)\n\n## Core Operations\n\n### Store Operation\n\nThe `store` method adds an entry to a Qdrant collection.\n\n```\n```\n\n**Method Signature**:\n\n```\n```\n\n**Parameters**:",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 262,
      "char_count": 997,
      "start_char": 3521,
      "end_char": 4520
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:5",
    "content": "od adds an entry to a Qdrant collection.\n\n```\n```\n\n**Method Signature**:\n\n```\n```\n\n**Parameters**:\n\n- `entry`: The `Entry` object containing content and optional metadata\n- `collection_name`: Optional name of the collection (uses default if not specified)\n\n**Implementation Details**:\n\n1. Determines the collection name to use\n2. Ensures the collection exists (creates it if needed)\n3. Generates embeddings for the entry content\n4. Creates a point with unique ID, embedding vectors, and payload\n5. Stores the point in the Qdrant collection\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py59-87](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L59-L87)\n\n### Search Operation\n\nThe `search` method performs semantic similarity search in a Qdrant collection.\n\n```\n```\n\n**Method Signature**:\n\n```\n```\n\n**Parameters**:\n\n- `query`: The text query to search for\n- `collection_name`: Optional name of the collection (uses default if not specified)",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 250,
      "char_count": 976,
      "start_char": 4420,
      "end_char": 5397
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:6",
    "content": "to search for\n- `collection_name`: Optional name of the collection (uses default if not specified)\n- `limit`: Maximum number of results to return (default: 10)\n\n**Returns**:\n\n- List of `Entry` objects containing the matched content and metadata\n\n**Implementation Details**:\n\n1. Determines the collection name to use\n2. Checks if the collection exists (returns empty list if not)\n3. Generates embeddings for the query\n4. Performs vector similarity search in the Qdrant collection\n5. Converts the results to `Entry` objects\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py89-126](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L89-L126)\n\n## Collection Management\n\n### Get Collection Names\n\nRetrieves all collection names from the Qdrant server.\n\n**Method Signature**:\n\n```\n```\n\n**Returns**:\n\n- List of collection names as strings\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py51-57](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L51-L57)",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 285,
      "char_count": 1016,
      "start_char": 5297,
      "end_char": 6316
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:7",
    "content": "https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L51-L57)\n\n### Ensure Collection Exists\n\nInternal method to create a collection if it doesn't exist.\n\n**Method Signature**:\n\n```\n```\n\n**Implementation Details**:\n\n1. Checks if the collection exists\n\n2. If not, creates a new collection with vector configuration:\n\n   - Vector size from the embedding provider\n   - Vector name from the embedding provider\n   - COSINE distance metric\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py128-148](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L128-L148)\n\n## Integration with System Architecture\n\nThe `QdrantConnector` is positioned between the QdrantMCPServer and the Qdrant vector database:\n\n```\n```\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py24-149](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L24-L149)\n\n## Usage Examples\n\n### Basic Store and Search\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 308,
      "char_count": 1022,
      "start_char": 6216,
      "end_char": 7238
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:8",
    "content": "## Usage Examples\n\n### Basic Store and Search\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.py32-48](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L32-L48)\n\n### Working with Multiple Collections\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.py192-225](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L192-L225)\n\n### Handling Metadata\n\n```\n```\n\nSources: [tests/test\\_qdrant\\_integration.py113-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L113-L147)\n\n## Qdrant Connection Options\n\nThe `QdrantConnector` supports multiple ways to connect to Qdrant:\n\n| Connection Type            | Configuration                                                          |\n| -------------------------- | ---------------------------------------------------------------------- |\n| Remote Qdrant Server       | Set `qdrant_url` to server URL and optionally provide `qdrant_api_key` |",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 271,
      "char_count": 1009,
      "start_char": 7138,
      "end_char": 8150
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:9",
    "content": "mote Qdrant Server       | Set `qdrant_url` to server URL and optionally provide `qdrant_api_key` |\n| Local Qdrant Instance      | Set `qdrant_local_path` to a directory path                            |\n| In-Memory Qdrant (testing) | Set `qdrant_url` to `:memory:`                                         |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py47-49](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L47-L49) [tests/test\\_qdrant\\_integration.py16-29](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L16-L29)\n\n## Technical Implementation Details\n\n### Point Storage Structure\n\nWhen storing entries, `QdrantConnector` creates points with this structure:\n\n| Field     | Description                                             |\n| --------- | ------------------------------------------------------- |\n| `id`      | Unique UUID generated for each point                    |",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 243,
      "char_count": 959,
      "start_char": 8050,
      "end_char": 9010
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:10",
    "content": "------------------------- |\n| `id`      | Unique UUID generated for each point                    |\n| `vector`  | Dictionary mapping vector name to embedding array       |\n| `payload` | Contains \"document\" (the content) and \"metadata\" fields |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py76-87](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L76-L87)\n\n### Collection Creation Parameters\n\nWhen creating a new collection, these parameters are used:\n\n| Parameter       | Value                            |\n| --------------- | -------------------------------- |\n| Vector size     | Obtained from embedding provider |\n| Vector name     | Obtained from embedding provider |\n| Distance metric | COSINE (similarity measure)      |\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py140-147](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L140-L147)\n\n## Best Practices\n\n1.",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 249,
      "char_count": 942,
      "start_char": 8910,
      "end_char": 9852
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:11",
    "content": "nt/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L140-L147)\n\n## Best Practices\n\n1. **Default Collection**: Set a default collection name during initialization to avoid passing it with every operation.\n2. **Error Handling**: The connector handles non-existent collections gracefully by returning empty results.\n3. **Metadata Usage**: Use metadata for storing additional information that doesn't need to be embedded.\n4. **Collection Design**: Create separate collections for logically distinct data sets.\n\nSources: [src/mcp\\_server\\_qdrant/qdrant.py59-126](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/src/mcp_server_qdrant/qdrant.py#L59-L126) [tests/test\\_qdrant\\_integration.py192-239](https://github.com/qdrant/mcp-server-qdrant/blob/a3ab0b96/tests/test_qdrant_integration.py#L192-L239)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [QdrantConnector Reference](#qdrantconnector-reference.md)\n- [Purpose and Scope](#purpose-and-scope.md)",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 279,
      "char_count": 995,
      "start_char": 9752,
      "end_char": 10748
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:12",
    "content": "antConnector Reference](#qdrantconnector-reference.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Class Overview](#class-overview.md)\n- [Initialization Parameters](#initialization-parameters.md)\n- [Entry Model](#entry-model.md)\n- [Core Operations](#core-operations.md)\n- [Store Operation](#store-operation.md)\n- [Search Operation](#search-operation.md)\n- [Collection Management](#collection-management.md)\n- [Get Collection Names](#get-collection-names.md)\n- [Ensure Collection Exists](#ensure-collection-exists.md)\n- [Integration with System Architecture](#integration-with-system-architecture.md)\n- [Usage Examples](#usage-examples.md)\n- [Basic Store and Search](#basic-store-and-search.md)\n- [Working with Multiple Collections](#working-with-multiple-collections.md)\n- [Handling Metadata](#handling-metadata.md)\n- [Qdrant Connection Options](#qdrant-connection-options.md)\n- [Technical Implementation Details](#technical-implementation-details.md)\n- [Point Storage Structure](#point-storage-structure.md)",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 233,
      "char_count": 1012,
      "start_char": 10648,
      "end_char": 11661
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md:chunk:13",
    "content": "ils](#technical-implementation-details.md)\n- [Point Storage Structure](#point-storage-structure.md)\n- [Collection Creation Parameters](#collection-creation-parameters.md)\n- [Best Practices](#best-practices.md)",
    "metadata": {
      "source_file": "qdrant_mcp-server-qdrant\\_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_mcp-server-qdrant",
      "filename": "_qdrant_mcp-server-qdrant_5-qdrantconnector-reference.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 47,
      "char_count": 209,
      "start_char": 11561,
      "end_char": 12585
    }
  }
]