[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:0",
    "content": "Snapshots and Recovery | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 313,
      "char_count": 1003,
      "start_char": 0,
      "end_char": 1003
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:1",
    "content": "rant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 298,
      "char_count": 970,
      "start_char": 903,
      "end_char": 1874
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:2",
    "content": "nt/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 321,
      "char_count": 1008,
      "start_char": 1774,
      "end_char": 2783
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:3",
    "content": "-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Snapshots and Recovery\n\nRelevant source files\n\n- [lib/collection/benches/batch\\_query\\_bench.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_query_bench.rs)\n- [lib/collection/benches/batch\\_search\\_bench.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/benches/batch_search_bench.rs)\n- [lib/collection/src/collection\\_manager/collection\\_updater.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs)\n- [lib/collection/src/shards/local\\_shard/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 322,
      "char_count": 1015,
      "start_char": 2683,
      "end_char": 3699
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:4",
    "content": "od.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs)\n- [lib/collection/src/shards/local\\_shard/scroll.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs)\n- [lib/collection/src/shards/local\\_shard/snapshot\\_tests.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot_tests.rs)\n- [lib/collection/src/tests/snapshot\\_test.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/tests/snapshot_test.rs)\n- [lib/collection/src/update\\_handler.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/update_handler.rs)\n\nThis page describes Qdrant's snapshot and recovery system, which provides data backup, restoration, and cluster synchronization capabilities.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 291,
      "char_count": 974,
      "start_char": 3599,
      "end_char": 4573
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:5",
    "content": "recovery system, which provides data backup, restoration, and cluster synchronization capabilities. The system supports both full collection snapshots and individual shard snapshots, with various recovery strategies for distributed deployments.\n\nFor information about collection management and optimization processes, see [Update Processing and Optimization](qdrant/qdrant/5.1-query-request-flow.md). For consensus mechanisms that coordinate snapshot operations in distributed mode, see [Consensus Mechanism](qdrant/qdrant/6-data-updates-and-consistency.md).\n\n## Snapshot Creation Architecture\n\nSnapshots in Qdrant are created at the `LocalShard` level, with the core implementation in the `snapshot.rs` module. The process involves temporarily proxying segments to allow writes to continue during snapshot creation.\n\nSnapshot Creation Flow: LocalShard::create\\_snapshot to segment archiving\n\n```\n```\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs1-352](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 196,
      "char_count": 984,
      "start_char": 4473,
      "end_char": 5458
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:6",
    "content": "chiving\n\n```\n```\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs1-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L1-L352) [lib/collection/src/shards/local\\_shard/mod.rs84-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L84-L124)\n\n## Segment Proxying Mechanism\n\nThe key innovation in Qdrant's snapshot system is the segment proxying mechanism, which allows writes to continue during snapshot creation. This is implemented in `proxy_all_segments_and_apply`.\n\nSegment Proxying: Temporary redirection of writes during snapshot\n\n```\n```\n\nThe `proxy_all_segments_and_apply` function performs the following steps:\n\n1. **Acquire upgradable read lock** on `SegmentHolder` to prevent external modifications\n2. **Create temporary segment** to receive all writes during snapshot\n3.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 238,
      "char_count": 887,
      "start_char": 5358,
      "end_char": 6245
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:7",
    "content": "vent external modifications\n2. **Create temporary segment** to receive all writes during snapshot\n3. **Wrap all segments in ProxySegment** - each proxy redirects writes to the temporary segment while allowing reads from the wrapped segment\n4. **Apply operation** (e.g., `take_snapshot`) to each wrapped segment sequentially\n5. **Unproxy segments incrementally** - as each segment finishes, restore it to reduce proxy overhead\n6. **Final atomic unproxy** - restore remaining segments and promote temporary segment if it has data\n\nThis mechanism ensures:\n\n- **No write blocking**: Updates continue via temporary segment during long-running snapshot operations\n- **Consistent point-in-time view**: All wrapped segments represent the same moment\n- **Minimal proxy duration**: Segments are unproxied as soon as their snapshot completes\n- **Atomic state transitions**: All segment changes use proper locking\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 206,
      "char_count": 987,
      "start_char": 6145,
      "end_char": 7132
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:8",
    "content": "proper locking\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs268-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L268-L352) [lib/collection/src/shards/local\\_shard/mod.rs108-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L124)\n\n## Snapshot Creation Process\n\nThe `LocalShard::create_snapshot` method orchestrates the complete snapshot creation process, with special handling for the WAL and coordination with the update system.\n\nLocalShard Snapshot Creation: WAL handling and segment archiving\n\n```\n```\n\n### WAL Handling Strategies\n\nThe snapshot system supports two WAL handling modes:\n\n| Mode          | Function               | Behavior                            | Use Case                           |\n| ------------- | ---------------------- | ----------------------------------- | ---------------------------------- |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 224,
      "char_count": 945,
      "start_char": 7032,
      "end_char": 7978
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:9",
    "content": "---------------------- | ----------------------------------- | ---------------------------------- |\n| **Save WAL**  | `snapshot_wal()`       | Archives complete WAL contents      | Full backup with operation history |\n| **Empty WAL** | `snapshot_empty_wal()` | Generates empty WAL at `last_index` | Compact snapshots without history  |\n\nWhen `save_wal=false`, the system uses the `UpdateSignal::Plunger` mechanism to ensure all pending updates are flushed to segments before snapshotting. This ensures the snapshot is complete without needing the WAL.\n\nThe empty WAL generation creates a minimal WAL structure that maintains compatibility:\n\n- Uses same `segment_capacity` as original WAL\n- Positioned at the `last_index` of original WAL\n- Allows normal WAL operations after recovery\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs62-121](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L62-L121) [lib/collection/src/shards/local\\_shard/snapshot.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 228,
      "char_count": 1008,
      "start_char": 7878,
      "end_char": 8886
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:10",
    "content": "ction/src/shards/local_shard/snapshot.rs#L62-L121) [lib/collection/src/shards/local\\_shard/snapshot.rs128-161](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L128-L161) [lib/collection/src/shards/local\\_shard/snapshot.rs168-197](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L168-L197)\n\n## Update Lock Coordination\n\nThe `update_operation_lock` in `LocalShard` is critical for coordinating snapshots with concurrent update operations. This `Arc<tokio::sync::RwLock<()>>` prevents data races during critical sections.\n\nUpdate Lock Usage During Snapshot Operations\n\n```\n```\n\nThe lock serves two critical purposes:\n\n1. **During snapshots**: Prevents updates during segment proxy/unproxy operations to maintain consistency\n2. **During scroll operations**: Prevents updates that could corrupt scroll cursors, critical for re-sharding and shard transfer\n\nLock acquisition pattern:",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 265,
      "char_count": 974,
      "start_char": 8786,
      "end_char": 9762
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:11",
    "content": "uld corrupt scroll cursors, critical for re-sharding and shard transfer\n\nLock acquisition pattern:\n\n- **Write lock**: Held during all update operations and segment state changes\n- **Read lock**: Held during scroll operations and while segments are in proxied state\n- **Blocking operations**: Uses `blocking_write()` in sync contexts, `write().await` in async\n\nThe lock is passed to `proxy_all_segments_and_apply` which acquires it via `update_lock.blocking_write()` when unproxying segments, ensuring no updates can modify segment state during transitions.\n\nSources: [lib/collection/src/shards/local\\_shard/mod.rs108-124](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L108-L124) [lib/collection/src/shards/local\\_shard/snapshot.rs218-352](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L218-L352) [lib/collection/src/shards/local\\_shard/scroll.rs156-213](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 268,
      "char_count": 966,
      "start_char": 9662,
      "end_char": 10628
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:12",
    "content": "ard/snapshot.rs#L218-L352) [lib/collection/src/shards/local\\_shard/scroll.rs156-213](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/scroll.rs#L156-L213) [lib/collection/src/collection\\_manager/collection\\_updater.rs42-77](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection_manager/collection_updater.rs#L42-L77)\n\n## Snapshot Recovery Process\n\nRecovery restores a snapshot by unpacking segment data and reinitializing the shard. The `LocalShard::restore_snapshot` method handles segment-level recovery.\n\nLocalShard Recovery: Segment restoration from snapshot archive\n\n```\n```\n\n### Recovery Implementation Details\n\nThe recovery process follows these steps:\n\n1. **Read snapshot directory**: `LocalShard::restore_snapshot` reads the `segments/` directory from the snapshot path\n2. **Filter entries**: Hidden files (starting with `.`) are skipped to avoid temporary or system files\n3.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 255,
      "char_count": 943,
      "start_char": 10528,
      "end_char": 11471
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:13",
    "content": "Filter entries**: Hidden files (starting with `.`) are skipped to avoid temporary or system files\n3. **Per-segment recovery**: Each segment directory calls `Segment::restore_snapshot_in_place` to unpack its data\n4. **In-place restoration**: Segments restore themselves directly into their final location (no temporary moves)\n5. **Error propagation**: Any segment restoration failure aborts the entire recovery\n\nKey characteristics:\n\n- **No WAL replay**: Recovery assumes snapshot contains complete data; WAL (if present) provides operation history but isn't replayed\n- **Atomic per-segment**: Each segment restores atomically, but overall recovery is not atomic across all segments\n- **Path-based**: Recovery expects a specific directory structure with `segments/` and `wal/` subdirectories\n\n### Directory Structure After Recovery\n\n```\nshard_path/\n├── segments/\n│   ├── <segment_id_1>/\n│   │   ├── segment.json\n│   │   ├── vector_storage/\n│   │   └── payload_index/\n│   ├── <segment_id_2>/\n│   └── ...\n├── wal/",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 231,
      "char_count": 1010,
      "start_char": 11371,
      "end_char": 12382
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:14",
    "content": "│   │   ├── vector_storage/\n│   │   └── payload_index/\n│   ├── <segment_id_2>/\n│   └── ...\n├── wal/\n│   └── (WAL files)\n├── newest_clocks.json\n└── oldest_clocks.json\n```\n\nSources: [lib/collection/src/shards/local\\_shard/snapshot.rs33-59](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/snapshot.rs#L33-L59) [lib/collection/src/shards/local\\_shard/mod.rs76-83](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/local_shard/mod.rs#L76-L83)\n\n## Consensus and State Management\n\nIn distributed deployments, snapshot operations coordinate with the Raft consensus system to maintain cluster consistency:\n\n```\n```\n\nThe system handles complex scenarios like:\n\n- **Split-brain prevention**: Consensus ensures only valid state transitions\n- **Replication factor maintenance**: Automatic replica management during recovery\n- **Synchronization conflicts**: Priority-based resolution when multiple replicas exist",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 262,
      "char_count": 958,
      "start_char": 12282,
      "end_char": 13241
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:15",
    "content": "ng recovery\n- **Synchronization conflicts**: Priority-based resolution when multiple replicas exist\n- **Partial snapshot locks**: Prevents concurrent partial snapshot operations\n\nSources: [lib/storage/src/content\\_manager/snapshots/recover.rs213-346](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/snapshots/recover.rs#L213-L346) [lib/collection/src/shards/replica\\_set/snapshots.rs34-109](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/snapshots.rs#L34-L109) [src/common/snapshots.rs318-337](https://github.com/qdrant/qdrant/blob/48203e41/src/common/snapshots.rs#L318-L337)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Snapshots and Recovery](#snapshots-and-recovery.md)\n- [Snapshot Creation Architecture](#snapshot-creation-architecture.md)\n- [Segment Proxying Mechanism](#segment-proxying-mechanism.md)\n- [Snapshot Creation Process](#snapshot-creation-process.md)\n- [WAL Handling Strategies](#wal-handling-strategies.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 301,
      "char_count": 1022,
      "start_char": 13141,
      "end_char": 14164
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md:chunk:16",
    "content": "on Process](#snapshot-creation-process.md)\n- [WAL Handling Strategies](#wal-handling-strategies.md)\n- [Update Lock Coordination](#update-lock-coordination.md)\n- [Snapshot Recovery Process](#snapshot-recovery-process.md)\n- [Recovery Implementation Details](#recovery-implementation-details.md)\n- [Directory Structure After Recovery](#directory-structure-after-recovery.md)\n- [Consensus and State Management](#consensus-and-state-management.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_8-snapshots-and-recovery.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_8-snapshots-and-recovery.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 99,
      "char_count": 442,
      "start_char": 14064,
      "end_char": 15088
    }
  }
]