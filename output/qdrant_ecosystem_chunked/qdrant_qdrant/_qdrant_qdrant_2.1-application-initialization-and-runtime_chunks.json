[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:0",
    "content": "Application Initialization and Runtime | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 313,
      "char_count": 1019,
      "start_char": 0,
      "end_char": 1019
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:1",
    "content": "rant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 298,
      "char_count": 970,
      "start_char": 919,
      "end_char": 1890
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:2",
    "content": "nt/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 321,
      "char_count": 1008,
      "start_char": 1790,
      "end_char": 2799
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:3",
    "content": "-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Application Initialization and Runtime\n\nRelevant source files\n\n- [config/config.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml)\n- [lib/collection/src/common/snapshots\\_manager.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/common/snapshots_manager.rs)\n- [lib/collection/src/operations/shared\\_storage\\_config.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/operations/shared_storage_config.rs)\n- [lib/storage/src/content\\_manager/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 299,
      "char_count": 1005,
      "start_char": 2699,
      "end_char": 3704
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:4",
    "content": "t/blob/48203e41/lib/storage/src/content_manager/mod.rs)\n- [lib/storage/src/types.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/types.rs)\n- [src/actix/api/cluster\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/cluster_api.rs)\n- [src/actix/api/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/api/mod.rs)\n- [src/actix/certificate\\_helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs)\n- [src/actix/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs)\n- [src/common/helpers.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs)\n- [src/common/http\\_client.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/common/http_client.rs)\n- [src/consensus.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs)\n- [src/main.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 372,
      "char_count": 1014,
      "start_char": 3604,
      "end_char": 4619
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:5",
    "content": "41/src/main.rs)\n- [src/settings.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs)\n- [src/tonic/api/raft\\_api.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs)\n- [src/tonic/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs)\n\nThis document describes how Qdrant initializes and runs as a service, covering the entry point, configuration loading, runtime creation, storage initialization, API server setup, and thread management. For information about the collections and data management layer, see [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md). For distributed consensus mechanics, see [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md).\n\n## Entry Point and Command-Line Arguments\n\nThe application starts in the `main()` function at [src/main.rs140-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L645) The entry point handles:",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 286,
      "char_count": 978,
      "start_char": 4519,
      "end_char": 5499
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:6",
    "content": "45](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L645) The entry point handles:\n\n- Command-line argument parsing using the `Args` struct\n- Settings initialization from configuration files\n- Global feature flags setup\n- Logging infrastructure configuration\n- Panic hook registration\n- Core initialization sequence\n\n### Command-Line Arguments\n\nThe `Args` struct [src/main.rs72-138](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L72-L138) defines the CLI interface:\n\n```\nArgs\n├── bootstrap: Option<Uri>        // Bootstrap peer for joining cluster\n├── uri: Option<Uri>              // This peer's advertised URI\n├── force_snapshot: bool          // Force collection recreation from snapshots\n├── snapshot: Option<Vec<String>> // Individual collection snapshots\n├── storage_snapshot: Option<String> // Full storage snapshot\n├── config_path: Option<String>   // Alternative config file path\n├── disable_telemetry: bool       // Disable telemetry reporting",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 244,
      "char_count": 982,
      "start_char": 5399,
      "end_char": 6382
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:7",
    "content": "// Alternative config file path\n├── disable_telemetry: bool       // Disable telemetry reporting\n├── stacktrace: bool              // Run stacktrace collector\n└── reinit: bool                  // Reinitialize consensus state\n```\n\n**Sources:** [src/main.rs72-138](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L72-L138)\n\n### Initialization Sequence Overview\n\n```\n```\n\n**Sources:** [src/main.rs140-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L645)\n\n## Configuration Loading\n\nConfiguration is loaded through a hierarchical system managed by the `Settings` struct. The loading order (from lowest to highest precedence) is:\n\n```\n```\n\nThe `Settings::new()` function [src/settings.rs230-286](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L230-L286) implements this hierarchy using the `config` crate. Configuration sources are merged, with later sources overriding earlier ones.\n\n**Key Configuration Sections:**",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 267,
      "char_count": 959,
      "start_char": 6282,
      "end_char": 7246
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:8",
    "content": "n sources are merged, with later sources overriding earlier ones.\n\n**Key Configuration Sections:**\n\n| Section   | Description                                   | Struct          |\n| --------- | --------------------------------------------- | --------------- |\n| `storage` | Storage paths, optimizers, WAL, HNSW settings | `StorageConfig` |\n| `service` | HTTP/gRPC ports, TLS, API keys, CORS          | `ServiceConfig` |\n| `cluster` | Distributed mode, P2P settings, consensus     | `ClusterConfig` |\n| `tls`     | Certificate paths, CA cert, TTL               | `TlsConfig`     |\n| `logger`  | Logging configuration                         | `LoggerConfig`  |\n\n**Sources:** [src/settings.rs197-327](https://github.com/qdrant/qdrant/blob/48203e41/src/settings.rs#L197-L327) [config/config.yaml1-355](https://github.com/qdrant/qdrant/blob/48203e41/config/config.yaml#L1-L355)\n\n## Runtime Creation\n\nQdrant uses three separate Tokio runtimes to isolate different workload types:\n\n### Runtime Architecture\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 259,
      "char_count": 1009,
      "start_char": 7146,
      "end_char": 8157
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:9",
    "content": "ee separate Tokio runtimes to isolate different workload types:\n\n### Runtime Architecture\n\n```\n```\n\n**Sources:** [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322) [src/common/helpers.rs20-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L63)\n\n### Runtime Creation Details\n\nThe three runtimes are created at [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322):\n\n1. **Search Runtime** [src/common/helpers.rs20-32](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L32)\n\n   - Thread count: `common::defaults::search_thread_count(max_search_threads)`\n   - Used for all search and query operations\n   - Each thread can handle blocking operations\n\n2. **Update Runtime** [src/common/helpers.rs34-50](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L34-L50)\n\n   - Thread count: Configurable via `max_optimization_runtime_threads`",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 317,
      "char_count": 973,
      "start_char": 8057,
      "end_char": 9031
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:10",
    "content": "/common/helpers.rs#L34-L50)\n\n   - Thread count: Configurable via `max_optimization_runtime_threads`\n   - Used for segment optimization and index building\n   - Background workers run here\n\n3. **General Purpose Runtime** [src/common/helpers.rs52-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L52-L63)\n\n   - Thread count: `max(num_cpus, 2)`\n   - Used for API request handling, consensus, and general async operations\n   - Handle to this runtime is stored for use throughout the application\n\n**Sources:** [src/main.rs309-322](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L309-L322) [src/common/helpers.rs20-63](https://github.com/qdrant/qdrant/blob/48203e41/src/common/helpers.rs#L20-L63)\n\n## Storage Initialization: TableOfContent\n\nThe `TableOfContent` (ToC) is the central collection manager. It's initialized at [src/main.rs365-383](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L365-L383):\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 303,
      "char_count": 952,
      "start_char": 8931,
      "end_char": 9885
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:11",
    "content": "rc/main.rs365-383](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L365-L383):\n\n```\n```\n\nThe ToC is then wrapped in an `Arc` for shared ownership across threads [src/main.rs385](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L385-L385)\n\n**Sources:** [src/main.rs365-386](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L365-L386)\n\n## Distributed vs Standalone Mode\n\nThe application can run in two modes, controlled by `settings.cluster.enabled`:\n\n```\n```\n\n**Sources:** [src/main.rs280-502](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L280-L502)\n\n### Standalone Mode\n\nIn standalone mode [src/main.rs494-502](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L494-L502):\n\n- No consensus manager is created\n- `Dispatcher` routes requests directly to `TableOfContent`\n- Only external REST and gRPC APIs are started\n- Single-node operation, no replication\n\n### Distributed Mode\n\nIn distributed mode [src/main.rs395-493](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 343,
      "char_count": 988,
      "start_char": 9785,
      "end_char": 10773
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:12",
    "content": "tion, no replication\n\n### Distributed Mode\n\nIn distributed mode [src/main.rs395-493](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L395-L493):\n\n1. **Consensus State Initialization** [src/main.rs396-403](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L396-L403)\n\n   - Creates `ConsensusManager` with persistent state\n   - Wraps in `ConsensusStateRef` for shared access\n\n2. **Dispatcher Configuration** [src/main.rs405-409](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L405-L409)\n\n   - Dispatcher is configured with consensus state\n   - Routes metadata operations through Raft consensus\n\n3. **Consensus Thread** [src/main.rs432-447](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L432-L447)\n\n   - Spawned via `Consensus::run()`\n   - Runs Raft protocol in dedicated thread\n   - Processes proposals from `propose_receiver` channel\n\n4. **Internal gRPC Server** [src/main.rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L152-L168) in [src/consensus.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 353,
      "char_count": 1016,
      "start_char": 10673,
      "end_char": 11689
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:13",
    "content": ".rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L152-L168) in [src/consensus.rs96-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L96-L170)\n\n   - Started via `init_internal()` in separate thread\n   - Handles inter-peer Raft messages\n   - P2P communication on configured port\n\n**Sources:** [src/main.rs395-493](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L395-L493) [src/consensus.rs63-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L170)\n\n## Dispatcher and Request Routing\n\nThe `Dispatcher` acts as the routing layer between API servers and storage:\n\n```\n```\n\n**Creation:**\n\n- Standalone: `Dispatcher::new(toc)` [src/main.rs393](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L393-L393)\n- Distributed: `dispatcher.with_consensus(consensus_state, resharding_enabled)` [src/main.rs405-406](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L405-L406)\n\n**Sources:** [src/main.rs393-411](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 379,
      "char_count": 1005,
      "start_char": 11589,
      "end_char": 12594
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:14",
    "content": "drant/qdrant/blob/48203e41/src/main.rs#L405-L406)\n\n**Sources:** [src/main.rs393-411](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L393-L411)\n\n## API Server Initialization\n\n### Thread Topology\n\nThe application spawns multiple threads for different services:\n\n```\n```\n\n**Sources:** [src/main.rs389-641](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L389-L641)\n\n### REST API Server (Actix-web)\n\nStarted at [src/main.rs549-568](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L549-L568):\n\n```\n```\n\nThe `actix::init()` function [src/actix/mod.rs55-205](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L205):\n\n- Binds to `settings.service.host:http_port`\n- Configures middleware (compression, CORS, authentication, logging)\n- Registers all API endpoints\n- Optionally enables TLS with certificate rotation\n- Worker count: `max_web_workers(&settings)`\n\n**Key Features:**\n\n- **Authentication:** API key middleware via `Auth` layer",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 332,
      "char_count": 979,
      "start_char": 12494,
      "end_char": 13474
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:15",
    "content": "b_workers(&settings)`\n\n**Key Features:**\n\n- **Authentication:** API key middleware via `Auth` layer\n- **Compression:** Automatic gzip compression\n- **Validation:** Request validation using `actix-web-validator`\n- **TLS:** Optional with certificate TTL rotation [src/actix/certificate\\_helpers.rs1-207](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/certificate_helpers.rs#L1-L207)\n\n**Sources:** [src/main.rs549-568](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L549-L568) [src/actix/mod.rs55-205](https://github.com/qdrant/qdrant/blob/48203e41/src/actix/mod.rs#L55-L205)\n\n### Public gRPC API Server (Tonic)\n\nStarted at [src/main.rs574-592](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L574-L592) if `settings.service.grpc_port` is set:\n\n```\n```\n\nThe `tonic::init()` function [src/tonic/mod.rs147-253](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L253):\n\n- Binds to `settings.service.host:grpc_port`",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 345,
      "char_count": 960,
      "start_char": 13374,
      "end_char": 14335
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:16",
    "content": "ant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L253):\n\n- Binds to `settings.service.host:grpc_port`\n- Registers services: `Qdrant`, `Collections`, `Points`, `Snapshots`, `Health`\n- Configures middleware (logging, telemetry, authentication)\n- Enables gRPC reflection\n- Optional TLS configuration\n\n**Services Registered:**\n\n- `QdrantServer` - Health checks and version info\n- `CollectionsServer` - Collection management\n- `PointsServer` - Point operations\n- `SnapshotsServer` - Snapshot operations\n- `HealthServer` - Standard gRPC health protocol\n\n**Sources:** [src/main.rs574-592](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L574-L592) [src/tonic/mod.rs147-253](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L147-L253)\n\n### Internal gRPC Server (Distributed Mode Only)\n\nStarted within the consensus thread at [src/consensus.rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L152-L168):\n\n```\n```\n\nThe `init_internal()` function [src/tonic/mod.rs256-360](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 339,
      "char_count": 1025,
      "start_char": 14235,
      "end_char": 15260
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:17",
    "content": "us.rs#L152-L168):\n\n```\n```\n\nThe `init_internal()` function [src/tonic/mod.rs256-360](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L256-L360):\n\n- Binds to `settings.service.host:p2p.port`\n- Handles Raft messages between peers\n- Provides internal APIs for shard transfers and consensus\n- Mandatory TLS configuration in production clusters\n\n**Internal Services:**\n\n- `RaftServer` - Raft message handling [src/tonic/api/raft\\_api.rs16-150](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/api/raft_api.rs#L16-L150)\n- `QdrantInternalServer` - Consensus commit tracking\n- `PointsInternalServer` - Internal point operations\n- `CollectionsInternalServer` - Internal collection operations\n- `ShardSnapshotsServer` - Shard snapshot transfers\n\n**Sources:** [src/consensus.rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L152-L168) [src/tonic/mod.rs256-360](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L256-L360)\n\n## Consensus Thread Lifecycle",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 342,
      "char_count": 1005,
      "start_char": 15160,
      "end_char": 16167
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:18",
    "content": "/github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L256-L360)\n\n## Consensus Thread Lifecycle\n\nIn distributed mode, the consensus thread is critical for cluster coordination:\n\n### Consensus Thread Setup\n\n```\n```\n\n**Sources:** [src/consensus.rs63-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L170) [src/main.rs329-447](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L329-L447)\n\n### Consensus Initialization Flow\n\nThe `Consensus::run()` function [src/consensus.rs63-170](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L170) performs:\n\n1. **TLS Configuration** [src/consensus.rs76](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L76-L76)\n\n   - Loads TLS client config if `cluster.p2p.enable_tls` is enabled\n\n2. **Consensus Object Creation** [src/consensus.rs82-93](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L82-L93)\n\n   - Calls `Consensus::new()` with state, bootstrap peer, URI, config",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 359,
      "char_count": 988,
      "start_char": 16067,
      "end_char": 17056
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:19",
    "content": "41/src/consensus.rs#L82-L93)\n\n   - Calls `Consensus::new()` with state, bootstrap peer, URI, config\n   - Creates bounded tokio channel for backpressure\n\n3. **Bootstrap or Recovery** [src/consensus.rs213-244](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L213-L244)\n\n   - New deployment: Bootstrap from peer or initialize as first peer\n   - Existing deployment: Recover state and potentially update URI\n\n4. **Thread Spawning** [src/consensus.rs96-115](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L96-L115)\n\n   - Main consensus thread runs `consensus.start()`\n   - Sets high thread priority on Linux for better latency\n   - Error handling reports to `ConsensusStateRef`\n\n5. **Proposal Forwarder** [src/consensus.rs117-139](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L117-L139)\n\n   - Separate thread forwards proposals from `std::sync::mpsc` to tokio channel\n   - Bridges sync and async worlds\n\n6. **Internal gRPC Server** [src/consensus.rs152-168](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 327,
      "char_count": 1020,
      "start_char": 16956,
      "end_char": 17976
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:20",
    "content": "Bridges sync and async worlds\n\n6. **Internal gRPC Server** [src/consensus.rs152-168](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L152-L168)\n\n   - Spawns thread for internal peer communication\n   - Receives Raft messages via gRPC and forwards to consensus\n\n**Sources:** [src/consensus.rs63-244](https://github.com/qdrant/qdrant/blob/48203e41/src/consensus.rs#L63-L244)\n\n## Resource Budgets\n\nBefore initialization, CPU and I/O budgets are computed for optimization tasks:\n\n```\n```\n\nThese budgets control how many CPU cores and parallel I/O operations can be used for segment optimization and index building [src/main.rs325-327](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L325-L327)\n\n**Sources:** [src/main.rs325-327](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L325-L327)\n\n## Telemetry and Monitoring\n\nTelemetry collection is initialized for both standalone and distributed modes:\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 299,
      "char_count": 938,
      "start_char": 17876,
      "end_char": 18816
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:21",
    "content": "onitoring\n\nTelemetry collection is initialized for both standalone and distributed modes:\n\n```\n```\n\nIf reporting is enabled, a background task is spawned to periodically report metrics [src/main.rs513-519](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L513-L519)\n\n**Sources:** [src/main.rs413-519](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L413-L519)\n\n## Lifecycle Management\n\nThe main thread waits for all spawned threads to complete:\n\n```\n```\n\nThis blocks until a shutdown signal is received by one of the servers [src/main.rs635-641](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L635-L641)\n\n**Shutdown Handling:**\n\n- REST API: Controlled by Actix runtime\n- gRPC API: Uses `wait_stop_signal()` [src/tonic/mod.rs130-145](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L130-L145)\n- Signals: SIGTERM and SIGINT are handled gracefully\n\n**Sources:** [src/main.rs635-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L635-L645) [src/tonic/mod.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 347,
      "char_count": 1014,
      "start_char": 18716,
      "end_char": 19730
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:22",
    "content": "ain.rs635-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L635-L645) [src/tonic/mod.rs130-145](https://github.com/qdrant/qdrant/blob/48203e41/src/tonic/mod.rs#L130-L145)\n\n## Summary: Complete Initialization Flow\n\n```\n```\n\n**Sources:** [src/main.rs140-645](https://github.com/qdrant/qdrant/blob/48203e41/src/main.rs#L140-L645)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Application Initialization and Runtime](#application-initialization-and-runtime.md)\n- [Entry Point and Command-Line Arguments](#entry-point-and-command-line-arguments.md)\n- [Command-Line Arguments](#command-line-arguments.md)\n- [Initialization Sequence Overview](#initialization-sequence-overview.md)\n- [Configuration Loading](#configuration-loading.md)\n- [Runtime Creation](#runtime-creation.md)\n- [Runtime Architecture](#runtime-architecture.md)\n- [Runtime Creation Details](#runtime-creation-details.md)\n- [Storage Initialization: TableOfContent](#storage-initialization-tableofcontent.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 294,
      "char_count": 1008,
      "start_char": 19630,
      "end_char": 20639
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:23",
    "content": "n-details.md)\n- [Storage Initialization: TableOfContent](#storage-initialization-tableofcontent.md)\n- [Distributed vs Standalone Mode](#distributed-vs-standalone-mode.md)\n- [Standalone Mode](#standalone-mode.md)\n- [Distributed Mode](#distributed-mode.md)\n- [Dispatcher and Request Routing](#dispatcher-and-request-routing.md)\n- [API Server Initialization](#api-server-initialization.md)\n- [Thread Topology](#thread-topology.md)\n- [REST API Server (Actix-web)](#rest-api-server-actix-web.md)\n- [Public gRPC API Server (Tonic)](#public-grpc-api-server-tonic.md)\n- [Internal gRPC Server (Distributed Mode Only)](#internal-grpc-server-distributed-mode-only.md)\n- [Consensus Thread Lifecycle](#consensus-thread-lifecycle.md)\n- [Consensus Thread Setup](#consensus-thread-setup.md)\n- [Consensus Initialization Flow](#consensus-initialization-flow.md)\n- [Resource Budgets](#resource-budgets.md)\n- [Telemetry and Monitoring](#telemetry-and-monitoring.md)\n- [Lifecycle Management](#lifecycle-management.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 248,
      "char_count": 996,
      "start_char": 20539,
      "end_char": 21536
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md:chunk:24",
    "content": "ry and Monitoring](#telemetry-and-monitoring.md)\n- [Lifecycle Management](#lifecycle-management.md)\n- [Summary: Complete Initialization Flow](#summary-complete-initialization-flow.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_2.1-application-initialization-and-runtime.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 39,
      "char_count": 183,
      "start_char": 21436,
      "end_char": 22460
    }
  }
]