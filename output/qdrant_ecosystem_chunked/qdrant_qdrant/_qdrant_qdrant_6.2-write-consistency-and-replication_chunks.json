[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:0",
    "content": "Write Consistency and Replication | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 315,
      "char_count": 1014,
      "start_char": 0,
      "end_char": 1014
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:1",
    "content": "rant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 298,
      "char_count": 970,
      "start_char": 914,
      "end_char": 1885
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:2",
    "content": "nt/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 321,
      "char_count": 1008,
      "start_char": 1785,
      "end_char": 2794
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:3",
    "content": "-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Write Consistency and Replication\n\nRelevant source files\n\n- [lib/collection/src/collection/collection\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/collection_ops.rs)\n- [lib/collection/src/collection/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs)\n- [lib/collection/src/collection/shard\\_transfer.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/shard_transfer.rs)\n- [lib/collection/src/collection/sharding\\_keys.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 304,
      "char_count": 994,
      "start_char": 2694,
      "end_char": 3689
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:4",
    "content": ".rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/sharding_keys.rs)\n- [lib/collection/src/shards/replica\\_set/mod.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs)\n- [lib/collection/src/shards/replica\\_set/update.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs)\n- [lib/storage/src/content\\_manager/toc/collection\\_meta\\_ops.rs](https://github.com/qdrant/qdrant/blob/48203e41/lib/storage/src/content_manager/toc/collection_meta_ops.rs)\n\nThis document explains how Qdrant ensures consistency across replicas when processing write operations. It covers write ordering guarantees, leader-based coordination, logical clock mechanisms, and failure handling strategies that enable Qdrant to maintain data consistency across distributed shard replicas.\n\nFor information about the update processing pipeline and WAL persistence, see [Update Processing Pipeline](qdrant/qdrant/6.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 256,
      "char_count": 999,
      "start_char": 3589,
      "end_char": 4588
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:5",
    "content": "he update processing pipeline and WAL persistence, see [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md). For distributed consensus and metadata operations, see [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md).\n\n---\n\n## Purpose and Scope\n\nWhen a collection has multiple replicas of a shard distributed across peers, write operations must be coordinated to maintain consistency. This page describes:\n\n- **Write ordering levels** (`Weak`, `Medium`, `Strong`) and their consistency guarantees\n- **Leader-based replication** for coordinating updates across replicas\n- **Logical clock mechanisms** (`ClockTag`, `ClockSet`) for detecting and resolving conflicts\n- **Write consistency factor** configuration and enforcement\n- **Failure detection** and automatic replica deactivation\n- **Rate limiting** for write operations in strict mode",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 180,
      "char_count": 882,
      "start_char": 4488,
      "end_char": 5372
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:6",
    "content": "ction** and automatic replica deactivation\n- **Rate limiting** for write operations in strict mode\n\nThe core implementation resides in `ShardReplicaSet::update_with_consistency` and `ShardReplicaSet::update_impl`, which orchestrate parallel replica updates while enforcing consistency guarantees.\n\n---\n\n## Write Ordering Levels\n\nQdrant supports three write ordering levels that trade off between performance and consistency guarantees. These are defined in the `WriteOrdering` enum.\n\n| Ordering | Leader Selection             | Consistency Guarantee                  | Use Case                                           |\n| -------- | ---------------------------- | -------------------------------------- | -------------------------------------------------- |\n| `Weak`   | Local peer                   | Best-effort, eventual consistency      | High throughput, tolerates temporary inconsistency |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 148,
      "char_count": 897,
      "start_char": 5272,
      "end_char": 6170
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:7",
    "content": "| Best-effort, eventual consistency      | High throughput, tolerates temporary inconsistency |\n| `Medium` | Highest alive replica peer   | Consistent with highest alive peer     | Balanced consistency and availability              |\n| `Strong` | Highest replica peer (by ID) | Strict consistency across all replicas | Maximum consistency, lower throughput              |\n\n### WriteOrdering and Leader Selection\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs168-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L168-L190)\n- [lib/collection/src/shards/replica\\_set/update.rs111-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L111-L166)\n\n### Implementation Details\n\nThe leader peer for an update is determined by the `leader_peer_for_update` method:\n\n**Weak Ordering:**\n\n- Always uses the local peer (`this_peer_id()`)\n- No serialization lock acquired",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 260,
      "char_count": 982,
      "start_char": 6070,
      "end_char": 7057
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:8",
    "content": "*Weak Ordering:**\n\n- Always uses the local peer (`this_peer_id()`)\n- No serialization lock acquired\n- Each peer processes updates independently\n- Provides highest throughput but weakest consistency\n\n**Medium Ordering:**\n\n- Selects the highest peer ID among **alive** replicas (Active or Resharding states)\n- Serialization lock (`write_ordering_lock`) acquired on the leader\n- Filters out locally disabled peers\n- Balances consistency with availability\n\n**Strong Ordering:**\n\n- Selects the highest peer ID among **all** replicas, regardless of state\n- Serialization lock acquired on the leader\n- Provides strongest consistency guarantees\n- May block if the highest peer is unavailable\n\nThe `write_ordering_lock` is a `Mutex<()>` that serializes updates on the leader peer, ensuring operations are applied in a consistent order.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs168-190](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L168-L190)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 237,
      "char_count": 1007,
      "start_char": 6957,
      "end_char": 7965
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:9",
    "content": "//github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L168-L190)\n- [lib/collection/src/shards/replica\\_set/mod.rs114](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L114-L114)\n- [lib/collection/src/shards/replica\\_set/update.rs136-142](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L136-L142)\n\n---\n\n## Replica Coordination and Leader Selection\n\n### Leader-Based Update Flow\n\nWhen `Medium` or `Strong` ordering is specified, updates flow through a designated leader peer to ensure consistent ordering:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs111-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L111-L166)\n- [lib/collection/src/shards/replica\\_set/update.rs669-686](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L669-L686)\n\n### Forwarding to Leader",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 350,
      "char_count": 1011,
      "start_char": 7865,
      "end_char": 8878
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:10",
    "content": "blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L669-L686)\n\n### Forwarding to Leader\n\nIf the local peer is not the designated leader, the update is forwarded via internal gRPC:\n\n1. `RemoteShard::forward_update` sends the operation to the leader peer\n2. If forwarding fails with a transient error, the leader is marked as locally disabled\n3. A service error is returned to the client to retry\n\nThis ensures that even if a client connects to a non-leader peer, the update will be properly coordinated through the leader.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs148-165](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L148-L165)\n\n---\n\n## Clock-Based Consistency\n\nQdrant uses logical clocks to detect and resolve conflicting updates across replicas. Each replica maintains a `ClockSet` that tracks logical timestamps.\n\n### ClockTag Structure\n\nEvery update operation is tagged with a `ClockTag` containing:\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 257,
      "char_count": 998,
      "start_char": 8778,
      "end_char": 9778
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:11",
    "content": ".\n\n### ClockTag Structure\n\nEvery update operation is tagged with a `ClockTag` containing:\n\n```\n```\n\nThe `ClockSet` maintains a mapping of clocks and increments ticks for each new operation:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs290-292](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L290-L292)\n- [lib/collection/src/shards/replica\\_set/mod.rs116](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L116-L116)\n\n### Clock Rejection and Retry\n\nWhen an update is rejected due to an old clock (another replica has seen a newer tick), the operation is retried with a fresh clock:\n\n1. **Initial attempt:** Update sent with `clock_tick = N`\n2. **Replica A:** Accepts and stores `tick = N`\n3. **Replica B:** Already saw `tick = N+1` from a concurrent update\n4. **Replica B:** Returns `UpdateStatus::ClockRejected`\n5. **Leader:** Detects rejection, advances clock to `max(N, echo_ticks)`, retries\n6.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 302,
      "char_count": 1016,
      "start_char": 9678,
      "end_char": 10694
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:12",
    "content": ":ClockRejected`\n5. **Leader:** Detects rejection, advances clock to `max(N, echo_ticks)`, retries\n6. **Retry:** Update sent with `clock_tick = N+2`\n7. **All replicas:** Accept the update\n\nThe maximum number of retries is defined by `UPDATE_MAX_CLOCK_REJECTED_RETRIES = 3`.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs16-20](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L16-L20)\n- [lib/collection/src/shards/replica\\_set/update.rs212-250](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L212-L250)\n- [lib/collection/src/shards/replica\\_set/update.rs368-396](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L368-L396)\n\n### Clock Advancement\n\nAfter each update, the leader examines the echoed clock ticks from all replicas and advances its local clock to the maximum observed:\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 300,
      "char_count": 948,
      "start_char": 10594,
      "end_char": 11544
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:13",
    "content": "choed clock ticks from all replicas and advances its local clock to the maximum observed:\n\n```\n```\n\nThis ensures that the local clock stays synchronized with the distributed state.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs368-396](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L368-L396)\n\n---\n\n## Write Consistency Factor\n\nThe write consistency factor determines how many replicas must successfully apply an update before the operation is considered successful.\n\n### Configuration\n\nThe `write_consistency_factor` is configured in collection parameters and defaults to 1:\n\n```\n```\n\n### Success Criteria\n\nAn update succeeds if:\n\n1. At least `write_consistency_factor` replicas successfully apply the update\n2. At least one **Active** or **Resharding** replica applies the update\n3. The consistency factor is capped at the total number of replicas\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs355-365](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 248,
      "char_count": 1018,
      "start_char": 11444,
      "end_char": 12462
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:14",
    "content": "```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs355-365](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L355-L365)\n- [lib/collection/src/shards/replica\\_set/update.rs432-511](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L432-L511)\n- [lib/collection/src/shards/replica\\_set/update.rs513-522](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L513-L522)\n\n### Handling Partial Failures\n\nWhen some replicas fail but enough succeed to meet the consistency factor:\n\n1. **Failed replicas** are marked as locally disabled\n2. If `wait=true`, the operation waits for consensus to deactivate the failed replicas (30s timeout)\n3. If deactivation times out, a consistency error is returned to the user\n4. Failed replicas will automatically recover via shard transfer\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs446-495](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 317,
      "char_count": 1013,
      "start_char": 12362,
      "end_char": 13377
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:15",
    "content": "transfer\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs446-495](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L446-L495)\n\n---\n\n## Failure Handling and Recovery\n\n### Locally Disabled Peers\n\nWhen a replica fails to apply an update, it is marked as **locally disabled** to prevent future updates from being sent to it:\n\n```\n```\n\nThe `locally_disabled_peers` registry tracks:\n\n- Which peers are disabled\n- When they were disabled\n- The replica state they were in when disabled\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs98](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L98-L98)\n- [lib/collection/src/shards/replica\\_set/update.rs597-662](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L597-L662)\n\n### Failure Detection Flow\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs597-662](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 317,
      "char_count": 1003,
      "start_char": 13277,
      "end_char": 14281
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:16",
    "content": "```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs597-662](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L597-L662)\n- [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L872-L896)\n\n### Replica State Transitions\n\nReplicas progress through various states during their lifecycle:\n\n| State          | Description                  | Accepts Updates? | Accepts Queries? |\n| -------------- | ---------------------------- | ---------------- | ---------------- |\n| `Initializing` | Initial state after creation | Yes              | No               |\n| `Active`       | Fully operational            | Yes              | Yes              |\n| `Partial`      | Receiving shard transfer     | Yes              | No               |\n| `Recovery`     | Recovering from snapshot     | Force only       | No               |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 253,
      "char_count": 974,
      "start_char": 14181,
      "end_char": 15158
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:17",
    "content": "|\n| `Recovery`     | Recovering from snapshot     | Force only       | No               |\n| `Listener`     | Read-only replica            | Yes (no wait)    | Yes              |\n| `Resharding`   | Participating in resharding  | Yes              | Yes              |\n| `Dead`         | Failed replica               | No               | No               |\n\nThe `is_peer_updatable` method determines whether updates should be sent to a replica:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs567-586](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L567-L586)\n- [lib/collection/src/shards/replica\\_set/update.rs24-106](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L24-L106)\n\n### Consensus Synchronization\n\nThe `sync_local_state` method periodically reports locally disabled peers to consensus:\n\n1. `locally_disabled_peers.notify_elapsed()` returns peers ready to be reported\n2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 276,
      "char_count": 999,
      "start_char": 15058,
      "end_char": 16067
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:18",
    "content": "rs to consensus:\n\n1. `locally_disabled_peers.notify_elapsed()` returns peers ready to be reported\n2. `notify_peer_failure_cb` is called for each failed peer\n3. Consensus proposes a `SetShardReplicaState` operation to mark the peer as `Dead`\n4. Related shard transfers are aborted\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L872-L896)\n- [lib/collection/src/collection/mod.rs595-646](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L595-L646)\n\n---\n\n## Rate Limiting\n\nIn strict mode, Qdrant can enforce write rate limits to prevent resource exhaustion.\n\n### Write Rate Limiter\n\nThe `write_rate_limiter` is configured per replica set:\n\n```\n```\n\nThe rate limiter is initialized from collection configuration:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs117](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 280,
      "char_count": 953,
      "start_char": 15967,
      "end_char": 16920
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:19",
    "content": "ration:\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs117](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L117-L117)\n- [lib/collection/src/shards/replica\\_set/mod.rs196-204](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L196-L204)\n\n### Rate Limit Enforcement\n\nBefore applying an update, the rate limiter checks if the operation is allowed:\n\n```\n```\n\nThe cost is estimated based on the number of points affected by the operation. If the rate limit is exceeded, a `CollectionError::RateLimitError` is returned.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs540-565](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L540-L565)\n- [lib/collection/src/shards/replica\\_set/mod.rs843-868](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L843-L868)\n\n### Exemptions",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 334,
      "char_count": 982,
      "start_char": 16820,
      "end_char": 17804
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:20",
    "content": "drant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L843-L868)\n\n### Exemptions\n\nInternal operations and resharding operations are exempt from rate limiting:\n\n- Operations with `hw_measurement_acc.is_disposable()` are not rate limited\n- Resharding operations automatically use disposable hardware measurement\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/mod.rs856-859](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L856-L859)\n- [lib/collection/src/shards/replica\\_set/update.rs128-132](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L128-L132)\n\n---\n\n## Complete Update Flow\n\n### End-to-End Write Path with Consistency\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs111-166](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L111-L166)\n- [lib/collection/src/shards/replica\\_set/update.rs195-251](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 333,
      "char_count": 1008,
      "start_char": 17704,
      "end_char": 18712
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:21",
    "content": "set/update.rs#L111-L166)\n- [lib/collection/src/shards/replica\\_set/update.rs195-251](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L195-L251)\n- [lib/collection/src/shards/replica\\_set/update.rs253-538](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L253-L538)\n\n### Failure Recovery Example\n\n```\n```\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs432-495](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L432-L495)\n- [lib/collection/src/shards/replica\\_set/mod.rs872-896](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L872-L896)\n- [lib/collection/src/collection/mod.rs595-646](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L595-L646)\n\n---\n\n## Key Takeaways\n\n1. **Three ordering levels:** Weak (eventual), Medium (leader-based, alive peers), Strong (leader-based, all peers)\n\n2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 378,
      "char_count": 1023,
      "start_char": 18612,
      "end_char": 19635
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:22",
    "content": "levels:** Weak (eventual), Medium (leader-based, alive peers), Strong (leader-based, all peers)\n\n2. **Logical clocks:** Every operation receives a `ClockTag` with monotonically increasing ticks to detect conflicts\n\n3. **Write consistency factor:** Configurable number of replicas that must successfully apply an update\n\n4. **Automatic failure recovery:** Failed replicas are marked locally disabled, reported to consensus, and automatically recovered via shard transfer\n\n5. **Rate limiting:** Optional per-minute write rate limits in strict mode, with cost based on affected points\n\n6. **Parallel execution:** Updates are sent to all replicas in parallel (with optional concurrency limit), reducing latency\n\n7. **Retry mechanism:** Clock-rejected operations are retried up to 3 times with fresh clocks\n\nThe combination of these mechanisms enables Qdrant to provide tunable consistency guarantees while maintaining high availability and performance across distributed replicas.\n\n**Sources:**",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 188,
      "char_count": 990,
      "start_char": 19535,
      "end_char": 20528
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:23",
    "content": "ees while maintaining high availability and performance across distributed replicas.\n\n**Sources:**\n\n- [lib/collection/src/shards/replica\\_set/update.rs1-686](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/update.rs#L1-L686)\n- [lib/collection/src/shards/replica\\_set/mod.rs1-1690](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/shards/replica_set/mod.rs#L1-L1690)\n- [lib/collection/src/collection/mod.rs595-646](https://github.com/qdrant/qdrant/blob/48203e41/lib/collection/src/collection/mod.rs#L595-L646)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Write Consistency and Replication](#write-consistency-and-replication.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Write Ordering Levels](#write-ordering-levels.md)\n- [WriteOrdering and Leader Selection](#writeordering-and-leader-selection.md)\n- [Implementation Details](#implementation-details.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 285,
      "char_count": 942,
      "start_char": 20428,
      "end_char": 21371
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:24",
    "content": "ion](#writeordering-and-leader-selection.md)\n- [Implementation Details](#implementation-details.md)\n- [Replica Coordination and Leader Selection](#replica-coordination-and-leader-selection.md)\n- [Leader-Based Update Flow](#leader-based-update-flow.md)\n- [Forwarding to Leader](#forwarding-to-leader.md)\n- [Clock-Based Consistency](#clock-based-consistency.md)\n- [ClockTag Structure](#clocktag-structure.md)\n- [Clock Rejection and Retry](#clock-rejection-and-retry.md)\n- [Clock Advancement](#clock-advancement.md)\n- [Write Consistency Factor](#write-consistency-factor.md)\n- [Configuration](#configuration.md)\n- [Success Criteria](#success-criteria.md)\n- [Handling Partial Failures](#handling-partial-failures.md)\n- [Failure Handling and Recovery](#failure-handling-and-recovery.md)\n- [Locally Disabled Peers](#locally-disabled-peers.md)\n- [Failure Detection Flow](#failure-detection-flow.md)\n- [Replica State Transitions](#replica-state-transitions.md)\n- [Consensus Synchronization](#consensus-synchronization.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 252,
      "char_count": 1013,
      "start_char": 21271,
      "end_char": 22285
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md:chunk:25",
    "content": "itions](#replica-state-transitions.md)\n- [Consensus Synchronization](#consensus-synchronization.md)\n- [Rate Limiting](#rate-limiting.md)\n- [Write Rate Limiter](#write-rate-limiter.md)\n- [Rate Limit Enforcement](#rate-limit-enforcement.md)\n- [Exemptions](#exemptions.md)\n- [Complete Update Flow](#complete-update-flow.md)\n- [End-to-End Write Path with Consistency](#end-to-end-write-path-with-consistency.md)\n- [Failure Recovery Example](#failure-recovery-example.md)\n- [Key Takeaways](#key-takeaways.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_6.2-write-consistency-and-replication.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 136,
      "char_count": 503,
      "start_char": 22185,
      "end_char": 23209
    }
  }
]