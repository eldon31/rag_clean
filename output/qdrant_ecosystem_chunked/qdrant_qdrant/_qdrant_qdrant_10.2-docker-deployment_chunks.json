[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:0",
    "content": "Docker Deployment | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 312,
      "char_count": 998,
      "start_char": 0,
      "end_char": 998
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:1",
    "content": "rant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 298,
      "char_count": 970,
      "start_char": 898,
      "end_char": 1869
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:2",
    "content": "nt/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 321,
      "char_count": 1008,
      "start_char": 1769,
      "end_char": 2778
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:3",
    "content": "-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Docker Deployment\n\nRelevant source files\n\n- [.config/nextest.toml](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml)\n- [.github/ISSUE\\_TEMPLATE/flaky\\_test.md](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md)\n- [.github/workflows/coverage.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml)\n- [.github/workflows/docker-image.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml)\n- [.github/workflows/integration-tests.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 322,
      "char_count": 1002,
      "start_char": 2678,
      "end_char": 3680
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:4",
    "content": "ts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.github/workflows/release-artifacts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml)\n- [.github/workflows/rust-gpu.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml)\n- [.github/workflows/rust.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml)\n- [.github/workflows/storage-compat.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml)\n- [Dockerfile](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile)\n- [config/deb.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml)\n- [tests/integration-tests.sh](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh)\n- [tools/sync-web-ui.sh](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 338,
      "char_count": 994,
      "start_char": 3580,
      "end_char": 4574
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:5",
    "content": "com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh)\n- [tools/sync-web-ui.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh)\n\nThis page describes the Docker build system, image variants, build configuration, and deployment workflows for Qdrant. It covers the multi-stage Dockerfile architecture, build arguments, image variants (CPU/GPU), cross-compilation support, and CI/CD integration.\n\nFor information about configuration options that can be set via environment variables, see [Configuration System](qdrant/qdrant/10.1-configuration-system.md). For details on the CI/CD workflows and build artifacts, see [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md).\n\n---\n\n## Multi-Stage Build Architecture\n\nThe Dockerfile implements a multi-stage build process optimized for Docker layer caching and cross-platform compilation. The build consists of three primary stages and conditional GPU-specific base images.\n\n```\n```\n\n**Sources:** [Dockerfile1-231](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 245,
      "char_count": 1004,
      "start_char": 4474,
      "end_char": 5478
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:6",
    "content": "s and conditional GPU-specific base images.\n\n```\n```\n\n**Sources:** [Dockerfile1-231](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L1-L231)\n\n### Planner Stage\n\nThe planner stage uses `cargo-chef` to analyze dependencies and generate a recipe file. This enables Docker to cache dependency builds separately from application code.\n\n```\n```\n\n**Sources:** [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)\n\n### Builder Stage\n\nThe builder stage performs the actual compilation with support for cross-compilation, custom linkers, and multiple build profiles. It consists of several distinct phases:\n\n1. **Dependency Installation** - System packages and Rust components\n2. **Mold Linker Setup** - Fast linker for reduced build times\n3. **Cross-compilation Setup** - Platform-specific toolchains via `xx`\n4. **Web UI Download** - Static assets from qdrant-web-ui repository\n5. **Dependency Compilation** - Using cargo-chef recipe\n6. **Application Compilation** - Final Qdrant binary\n7.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 265,
      "char_count": 1024,
      "start_char": 5378,
      "end_char": 6402
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:7",
    "content": "ency Compilation** - Using cargo-chef recipe\n6. **Application Compilation** - Final Qdrant binary\n7. **SBOM Generation** - Software Bill of Materials\n\n```\n```\n\n**Sources:** [Dockerfile28-122](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L28-L122)\n\n---\n\n## Build Arguments and Configuration\n\nThe Dockerfile accepts multiple build arguments that control compilation behavior, features, and target architecture.\n\n| Argument         | Default       | Purpose                    | Usage                                 |\n| ---------------- | ------------- | -------------------------- | ------------------------------------- |\n| `BUILDPLATFORM`  | `linux/amd64` | Host platform for build    | Set by Docker buildx                  |\n| `TARGETPLATFORM` | `linux/amd64` | Target platform for binary | Set by Docker buildx                  |\n| `PROFILE`        | `release`     | Cargo build profile        | `release`, `dev`, or `ci`             |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 217,
      "char_count": 952,
      "start_char": 6302,
      "end_char": 7255
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:8",
    "content": "FILE`        | `release`     | Cargo build profile        | `release`, `dev`, or `ci`             |\n| `FEATURES`       | (none)        | Cargo feature flags        | Comma-separated list                  |\n| `RUSTFLAGS`      | (none)        | Custom Rust compiler flags | E.g., `--cfg tokio_unstable`          |\n| `LINKER`         | `mold`        | Linker to use              | `mold`, `lld`, or empty               |\n| `GPU`            | (none)        | GPU support variant        | `nvidia` or `amd`                     |\n| `GIT_COMMIT_ID`  | (none)        | Git commit hash            | Embedded in binary                    |\n| `USER_ID`        | `0`           | Runtime user ID            | `0` for root, `1000` for unprivileged |\n| `PACKAGES`       | (none)        | Additional apt packages    | E.g., `gdb lldb`                      |\n| `SOURCES`        | (none)        | Include source code        | Any non-empty value                   |\n\n### Build Profile Selection",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 248,
      "char_count": 976,
      "start_char": 7155,
      "end_char": 8133
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:9",
    "content": "Include source code        | Any non-empty value                   |\n\n### Build Profile Selection\n\nThe `PROFILE` argument determines the optimization level and debug information:\n\n```\n```\n\n**Sources:** [Dockerfile76-77](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L76-L77)\n\n### Feature Flag Configuration\n\nFeatures are enabled via the `FEATURES` argument and combined with mandatory features:\n\n```\n```\n\nThe build always includes the `stacktrace` feature for better error diagnostics.\n\n**Sources:** [Dockerfile79-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L79-L104) [Dockerfile113-118](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L113-L118)\n\n### Linker Configuration\n\nThe build supports multiple linkers for optimization:\n\n```\n```\n\nThe linker is set via `RUSTFLAGS` during compilation:\n\n```\nRUSTFLAGS=\"${LINKER:+-C link-arg=-fuse-ld=}$LINKER $RUSTFLAGS\"\n```\n\n**Sources:** [Dockerfile85-86](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 285,
      "char_count": 952,
      "start_char": 8033,
      "end_char": 8986
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:10",
    "content": "INKER:+-C link-arg=-fuse-ld=}$LINKER $RUSTFLAGS\"\n```\n\n**Sources:** [Dockerfile85-86](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L85-L86) [Dockerfile101-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L101-L104) [Dockerfile113-116](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L113-L116)\n\n---\n\n## Image Variants\n\nQdrant provides multiple Docker image variants to support different hardware and security requirements.\n\n```\n```\n\n### CPU Variant (Default)\n\nThe default image uses `debian:13-slim` as the base, minimizing image size while providing necessary runtime libraries.\n\n**Base Image:** `debian:13-slim`\n\n**Installed Packages:**\n\n- `ca-certificates` - SSL/TLS certificates\n- `tzdata` - Timezone data\n- `libunwind8` - Stack unwinding support\n\n**Image Name Pattern:** `qdrant/qdrant:{version}`\n\n**Sources:** [Dockerfile126-128](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L126-L128)\n\n### GPU NVIDIA Variant",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 335,
      "char_count": 964,
      "start_char": 8886,
      "end_char": 9852
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:11",
    "content": "-128](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L126-L128)\n\n### GPU NVIDIA Variant\n\nFor NVIDIA GPU acceleration, the image uses `nvidia/opengl:1.2-glvnd-devel-ubuntu22.04` as the base.\n\n**Base Image:** `nvidia/opengl:1.2-glvnd-devel-ubuntu22.04`\n\n**Environment Variables:**\n\n- `NVIDIA_DRIVER_CAPABILITIES=compute,graphics,utility` - Enables compute and graphics capabilities\n- `DEBIAN_FRONTEND=noninteractive` - Non-interactive apt-get\n\n**Additional Files:**\n\n- `/etc/vulkan/icd.d/nvidia_icd.json` - Vulkan ICD loader configuration\n\n**Installed GPU Packages:**\n\n- `libvulkan1`, `libvulkan-dev` - Vulkan runtime and development files\n- `vulkan-tools` - Vulkan utilities\n\n**Image Name Pattern:** `qdrant/qdrant:{version}-gpu-nvidia`\n\n**Sources:** [Dockerfile130-140](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L130-L140) [Dockerfile152-161](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L152-L161)\n\n### GPU AMD Variant\n\nFor AMD GPU acceleration, the image uses `rocm/dev-ubuntu-22.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 343,
      "char_count": 1022,
      "start_char": 9752,
      "end_char": 10774
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:12",
    "content": "rfile#L152-L161)\n\n### GPU AMD Variant\n\nFor AMD GPU acceleration, the image uses `rocm/dev-ubuntu-22.04` as the base.\n\n**Base Image:** `rocm/dev-ubuntu-22.04`\n\n**Environment Variables:**\n\n- `DEBIAN_FRONTEND=noninteractive` - Non-interactive apt-get\n\n**Installed GPU Packages:**\n\n- Same Vulkan packages as NVIDIA variant\n\n**Image Name Pattern:** `qdrant/qdrant:{version}-gpu-amd`\n\n**Sources:** [Dockerfile142-148](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L142-L148) [Dockerfile152-161](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L152-L161)\n\n### Unprivileged Variant\n\nSecurity-hardened variant that runs as a non-root user with UID 1000.\n\n**Build Configuration:**\n\n```\n```\n\n**Runtime User:** `qdrant:qdrant` (UID/GID 1000)\n\n**Pre-created Directories:**\n\n- `/qdrant/storage` - Data storage directory\n- `/qdrant/snapshots` - Snapshot directory\n\n**Image Name Pattern:** `qdrant/qdrant:{version}-unprivileged`\n\n**Sources:** [Dockerfile198-215](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 333,
      "char_count": 984,
      "start_char": 10674,
      "end_char": 11658
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:13",
    "content": "Pattern:** `qdrant/qdrant:{version}-unprivileged`\n\n**Sources:** [Dockerfile198-215](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L198-L215) [.github/workflows/docker-image.yml64-79](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L64-L79)\n\n---\n\n## Cross-Platform Compilation\n\nThe Docker build system supports multi-platform builds using Docker Buildx and the `xx` cross-compilation toolkit.\n\n```\n```\n\n### Platform-Specific Toolchain Setup\n\nThe build uses `xx-apt-get` to install platform-specific development dependencies:\n\n```\n```\n\nThis installs cross-compilation toolchains for the target platform specified by `TARGETPLATFORM`.\n\n**Sources:** [Dockerfile71-74](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L71-L74)\n\n### Cross-Compilation Wrapper\n\nThe `xx-cargo` wrapper automatically configures Cargo for cross-compilation:\n\n```\n```\n\nThe `PKG_CONFIG` workaround addresses a bug in `xx-cargo` for crates using `pkg-config`.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 281,
      "char_count": 984,
      "start_char": 11558,
      "end_char": 12545
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:14",
    "content": "```\n```\n\nThe `PKG_CONFIG` workaround addresses a bug in `xx-cargo` for crates using `pkg-config`.\n\n**Sources:** [Dockerfile96-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L96-L104) [Dockerfile109-118](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L109-L118)\n\n### Mold Linker Platform Support\n\nThe Mold linker is installed with platform-specific binaries:\n\n```\n```\n\n**Supported Platforms:**\n\n- `x86_64-linux` (amd64)\n- `aarch64-linux` (arm64)\n\n**Sources:** [Dockerfile52-66](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L52-L66)\n\n---\n\n## Layer Caching Strategy\n\nThe build implements cargo-chef for efficient Docker layer caching, significantly reducing rebuild times when only application code changes.\n\n```\n```\n\n### Recipe Generation\n\nThe planner analyzes `Cargo.toml` and `Cargo.lock` files to generate a dependency recipe:\n\n```\n```\n\n**Sources:** [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)\n\n### Dependency Cooking",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 325,
      "char_count": 999,
      "start_char": 12445,
      "end_char": 13447
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:15",
    "content": "e22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)\n\n### Dependency Cooking\n\nThe builder uses the recipe to compile dependencies before copying application code:\n\n```\n```\n\nThis layer is cached and only invalidated when dependencies change.\n\n**Sources:** [Dockerfile96-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L96-L104)\n\n### Application Build\n\nAfter dependencies are built, application code is copied and compiled:\n\n```\n```\n\nOnly this layer needs rebuilding when application code changes.\n\n**Sources:** [Dockerfile106-118](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L106-L118)\n\n---\n\n## Web UI Integration\n\nThe Docker build includes the Qdrant web UI by downloading the latest release from the qdrant-web-ui repository.\n\n```\n```\n\n### Download Process\n\nThe `sync-web-ui.sh` script fetches the latest web UI bundle:\n\n```\n```\n\n**Sources:** [tools/sync-web-ui.sh1-27](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh#L1-L27)\n\n### Build Integration",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 304,
      "char_count": 1020,
      "start_char": 13347,
      "end_char": 14369
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:16",
    "content": "https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh#L1-L27)\n\n### Build Integration\n\nThe Dockerfile invokes the sync script during the builder stage:\n\n```\n```\n\n**Sources:** [Dockerfile92-94](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L92-L94)\n\n### Runtime Deployment\n\nStatic files are copied to the final image:\n\n```\n```\n\nThe web UI is served at the root path `/` on the HTTP API port (6333).\n\n**Sources:** [Dockerfile211](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L211-L211)\n\n---\n\n## Runtime Configuration\n\nThe final Docker image exposes standard ports, sets environment variables, and defines the entrypoint for container execution.\n\n### Exposed Ports\n\n| Port | Protocol  | Purpose                           |\n| ---- | --------- | --------------------------------- |\n| 6333 | HTTP/gRPC | REST API and gRPC API             |\n| 6334 | gRPC      | Internal gRPC (P2P communication) |\n\n**Sources:** [Dockerfile220-221](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 287,
      "char_count": 978,
      "start_char": 14269,
      "end_char": 15247
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:17",
    "content": "| gRPC      | Internal gRPC (P2P communication) |\n\n**Sources:** [Dockerfile220-221](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L220-L221)\n\n### Environment Variables\n\n| Variable   | Default      | Purpose            |\n| ---------- | ------------ | ------------------ |\n| `TZ`       | `Etc/UTC`    | Container timezone |\n| `RUN_MODE` | `production` | Runtime mode       |\n\nAdditional configuration can be set via `QDRANT__*` environment variables (see [Configuration System](qdrant/qdrant/10.1-configuration-system.md)).\n\n**Sources:** [Dockerfile217-218](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L217-L218)\n\n### File System Layout\n\n```\n/qdrant/\n├── qdrant              # Binary executable\n├── qdrant.spdx.json    # Software Bill of Materials\n├── config/             # Configuration files\n├── static/             # Web UI static files\n├── entrypoint.sh       # Container entrypoint\n├── storage/            # Data directory (volume mount)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 281,
      "char_count": 966,
      "start_char": 15147,
      "end_char": 16115
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:18",
    "content": "entrypoint.sh       # Container entrypoint\n├── storage/            # Data directory (volume mount)\n└── snapshots/          # Snapshot directory (volume mount)\n```\n\n**Sources:** [Dockerfile196-213](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L196-L213)\n\n### Entrypoint Script\n\nThe container executes via `entrypoint.sh`:\n\n```\n```\n\nThis script is located at [tools/entrypoint.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/entrypoint.sh) and handles initialization before starting the Qdrant process.\n\n**Sources:** [Dockerfile210](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L210-L210) [Dockerfile230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L230-L230)\n\n### User Configuration\n\nThe image supports two user modes:\n\n**Root Mode (USER\\_ID=0, default):**\n\n- Runs as root user\n- No pre-created directories\n- Maximum flexibility for volume mounting\n\n**Unprivileged Mode (USER\\_ID=1000):**\n\n- Runs as `qdrant:qdrant` user (UID/GID 1000)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 318,
      "char_count": 983,
      "start_char": 16015,
      "end_char": 17000
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:19",
    "content": "ume mounting\n\n**Unprivileged Mode (USER\\_ID=1000):**\n\n- Runs as `qdrant:qdrant` user (UID/GID 1000)\n- Pre-created `storage` and `snapshots` directories\n- Enhanced security posture\n\n**Sources:** [Dockerfile198-215](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L198-L215)\n\n---\n\n## CI/CD Integration\n\nQdrant's Docker images are built and deployed through GitHub Actions workflows that handle multi-platform builds, tagging strategies, and image signing.\n\n```\n```\n\n### Multi-Platform Build Configuration\n\nThe CPU build targets multiple platforms using Docker Buildx:\n\n```\n```\n\nGPU builds are limited to `linux/amd64` due to GPU driver compatibility.\n\n**Sources:** [.github/workflows/docker-image.yml38-62](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L38-L62) [.github/workflows/docker-image.yml108-148](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L108-L148)\n\n### Tag Generation Strategy\n\nFor a release tag like `v1.2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 304,
      "char_count": 1002,
      "start_char": 16900,
      "end_char": 17902
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:20",
    "content": "ub/workflows/docker-image.yml#L108-L148)\n\n### Tag Generation Strategy\n\nFor a release tag like `v1.2.3`, the workflow generates multiple tags:\n\n| Tag Pattern   | Example                | Purpose       |\n| ------------- | ---------------------- | ------------- |\n| Full version  | `qdrant/qdrant:v1.2.3` | Exact release |\n| Minor version | `qdrant/qdrant:1.2`    | Latest patch  |\n| Major version | `qdrant/qdrant:1`      | Latest minor  |\n| Latest        | `qdrant/qdrant:latest` | Latest stable |\n\n**Version Extraction:**\n\n```\n```\n\n**Sources:** [.github/workflows/docker-image.yml26-37](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L26-L37) [.github/workflows/docker-image.yml95-106](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L95-L106)\n\n### Image Registries\n\nImages are pushed to two registries:\n\n1. **Docker Hub:** `qdrant/qdrant:{tag}`\n2. **GitHub Packages:** `docker.pkg.github.com/qdrant/qdrant/qdrant:{tag}`\n\n**Sources:** [.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 311,
      "char_count": 1006,
      "start_char": 17802,
      "end_char": 18808
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:21",
    "content": "t:{tag}`\n2. **GitHub Packages:** `docker.pkg.github.com/qdrant/qdrant/qdrant:{tag}`\n\n**Sources:** [.github/workflows/docker-image.yml44-59](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L44-L59) [.github/workflows/docker-image.yml113-128](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L113-L128)\n\n### Image Signing with Cosign\n\nAll published images are signed using Sigstore Cosign with keyless OIDC signing:\n\n```\n```\n\nThis enables verification of image authenticity without managing signing keys.\n\n**Sources:** [.github/workflows/docker-image.yml61-62](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L61-L62) [.github/workflows/docker-image.yml130-131](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L130-L131)\n\n### SBOM Generation\n\nSoftware Bill of Materials (SBOM) is generated during build:\n\n```\n```\n\nThe SBOM is included in the final image at `/qdrant/qdrant.spdx.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 315,
      "char_count": 1011,
      "start_char": 18708,
      "end_char": 19719
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:22",
    "content": "s generated during build:\n\n```\n```\n\nThe SBOM is included in the final image at `/qdrant/qdrant.spdx.json` and also embedded in the image metadata:\n\n```\n```\n\n**Sources:** [Dockerfile120-121](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L120-L121) [Dockerfile208](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L208-L208) [.github/workflows/docker-image.yml56](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L56-L56)\n\n### Testing Integration\n\nDocker builds are tested in CI through multiple workflows:\n\n**Consensus Testing:**\n\n```\n```\n\n**E2E Testing:**\n\n```\n```\n\n**Sources:** [.github/workflows/integration-tests.yml101-117](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L101-L117) [.github/workflows/integration-tests.yml238-265](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L238-L265)\n\n### Cache Strategy\n\nGitHub Actions cache is used to speed up builds:\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 341,
      "char_count": 1005,
      "start_char": 19619,
      "end_char": 20626
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:23",
    "content": "ests.yml#L238-L265)\n\n### Cache Strategy\n\nGitHub Actions cache is used to speed up builds:\n\n```\n```\n\nThis creates separate cache scopes per branch while allowing fallback to base branch cache.\n\n**Sources:** [.github/workflows/integration-tests.yml108-111](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L108-L111)\n\n---\n\n## Development and Debugging Support\n\nThe Docker build supports optional features for debugging and development workflows.\n\n### Source Code Inclusion\n\nSource files can be included in the image for debugging:\n\n```\n```\n\nThis copies the following directories:\n\n- `/qdrant/src` - Application source\n- `/qdrant/lib` - Library source\n- `/usr/local/cargo/registry/src` - Crate sources\n- `/usr/local/cargo/git/checkouts` - Git dependencies\n\nThe conditional copy uses parameter expansion to work around Dockerfile limitations:\n\n```\n```\n\n**Sources:** [Dockerfile172-194](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L172-L194)\n\n### Debug Tools Installation",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 269,
      "char_count": 1018,
      "start_char": 20526,
      "end_char": 21546
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:24",
    "content": "https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L172-L194)\n\n### Debug Tools Installation\n\nAdditional debugging packages can be installed:\n\n```\n```\n\nThese packages are installed in the final image alongside base dependencies.\n\n**Sources:** [Dockerfile163-170](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L163-L170)\n\n### Build Profile for CI\n\nThe `ci` build profile balances build time and binary size for CI environments:\n\n```\n```\n\nThis profile is defined in `.cargo/config.toml` and used by integration tests.\n\n**Sources:** [.github/workflows/integration-tests.yml114](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L114-L114) [.github/workflows/integration-tests.yml259](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L259-L259)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Docker Deployment](#docker-deployment.md)\n- [Multi-Stage Build Architecture](#multi-stage-build-architecture.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 299,
      "char_count": 1020,
      "start_char": 21446,
      "end_char": 22467
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:25",
    "content": "ment](#docker-deployment.md)\n- [Multi-Stage Build Architecture](#multi-stage-build-architecture.md)\n- [Planner Stage](#planner-stage.md)\n- [Builder Stage](#builder-stage.md)\n- [Build Arguments and Configuration](#build-arguments-and-configuration.md)\n- [Build Profile Selection](#build-profile-selection.md)\n- [Feature Flag Configuration](#feature-flag-configuration.md)\n- [Linker Configuration](#linker-configuration.md)\n- [Image Variants](#image-variants.md)\n- [CPU Variant (Default)](#cpu-variant-default.md)\n- [GPU NVIDIA Variant](#gpu-nvidia-variant.md)\n- [GPU AMD Variant](#gpu-amd-variant.md)\n- [Unprivileged Variant](#unprivileged-variant.md)\n- [Cross-Platform Compilation](#cross-platform-compilation.md)\n- [Platform-Specific Toolchain Setup](#platform-specific-toolchain-setup.md)\n- [Cross-Compilation Wrapper](#cross-compilation-wrapper.md)\n- [Mold Linker Platform Support](#mold-linker-platform-support.md)\n- [Layer Caching Strategy](#layer-caching-strategy.md)\n- [Recipe Generation](#recipe-generation.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 255,
      "char_count": 1018,
      "start_char": 22367,
      "end_char": 23386
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:26",
    "content": "- [Layer Caching Strategy](#layer-caching-strategy.md)\n- [Recipe Generation](#recipe-generation.md)\n- [Dependency Cooking](#dependency-cooking.md)\n- [Application Build](#application-build.md)\n- [Web UI Integration](#web-ui-integration.md)\n- [Download Process](#download-process.md)\n- [Build Integration](#build-integration.md)\n- [Runtime Deployment](#runtime-deployment.md)\n- [Runtime Configuration](#runtime-configuration.md)\n- [Exposed Ports](#exposed-ports.md)\n- [Environment Variables](#environment-variables.md)\n- [File System Layout](#file-system-layout.md)\n- [Entrypoint Script](#entrypoint-script.md)\n- [User Configuration](#user-configuration.md)\n- [CI/CD Integration](#cicd-integration.md)\n- [Multi-Platform Build Configuration](#multi-platform-build-configuration.md)\n- [Tag Generation Strategy](#tag-generation-strategy.md)\n- [Image Registries](#image-registries.md)\n- [Image Signing with Cosign](#image-signing-with-cosign.md)\n- [SBOM Generation](#sbom-generation.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 249,
      "char_count": 980,
      "start_char": 23286,
      "end_char": 24267
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md:chunk:27",
    "content": "[Image Signing with Cosign](#image-signing-with-cosign.md)\n- [SBOM Generation](#sbom-generation.md)\n- [Testing Integration](#testing-integration.md)\n- [Cache Strategy](#cache-strategy.md)\n- [Development and Debugging Support](#development-and-debugging-support.md)\n- [Source Code Inclusion](#source-code-inclusion.md)\n- [Debug Tools Installation](#debug-tools-installation.md)\n- [Build Profile for CI](#build-profile-for-ci.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.2-docker-deployment.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.2-docker-deployment.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 108,
      "char_count": 427,
      "start_char": 24167,
      "end_char": 25191
    }
  }
]