[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:0",
    "content": "Building and CI/CD | qdrant/qdrant | DeepWiki\n\n[Index your code with Devin](private-repo.md)\n\n[DeepWiki](https://deepwiki.com)\n\n[DeepWiki](.md)\n\n[qdrant/qdrant](https://github.com/qdrant/qdrant \"Open repository\")\n\n[Index your code with](private-repo.md)\n\n[Devin](private-repo.md)\n\nShare\n\nLast indexed: 4 October 2025 ([48203e](https://github.com/qdrant/qdrant/commits/48203e41))\n\n- [Introduction to Qdrant](qdrant/qdrant/1-introduction-to-qdrant.md)\n- [Key Concepts and Terminology](qdrant/qdrant/1.1-key-concepts-and-terminology.md)\n- [System Architecture](qdrant/qdrant/2-system-architecture.md)\n- [Application Initialization and Runtime](qdrant/qdrant/2.1-application-initialization-and-runtime.md)\n- [Collections and Table of Content](qdrant/qdrant/2.2-collections-and-table-of-content.md)\n- [Shards and Replica Sets](qdrant/qdrant/2.3-shards-and-replica-sets.md)\n- [Local Shard Architecture](qdrant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 314,
      "char_count": 999,
      "start_char": 0,
      "end_char": 999
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:1",
    "content": "rant/qdrant/2.4-local-shard-architecture.md)\n- [Segment Lifecycle and Construction](qdrant/qdrant/2.5-segment-lifecycle-and-construction.md)\n- [Vector Storage and Indexing](qdrant/qdrant/3-vector-storage-and-indexing.md)\n- [Vector Storage Formats](qdrant/qdrant/3.1-vector-storage-formats.md)\n- [HNSW Index Implementation](qdrant/qdrant/3.2-hnsw-index-implementation.md)\n- [Vector Quantization](qdrant/qdrant/3.3-vector-quantization.md)\n- [Sparse Vector Indexing](qdrant/qdrant/3.4-sparse-vector-indexing.md)\n- [Payload Indexing and Filtering](qdrant/qdrant/4-payload-indexing-and-filtering.md)\n- [Field Index Types](qdrant/qdrant/4.1-field-index-types.md)\n- [Index Selection and Storage Backends](qdrant/qdrant/4.2-index-selection-and-storage-backends.md)\n- [Search and Query Processing](qdrant/qdrant/5-search-and-query-processing.md)\n- [Query Request Flow](qdrant/qdrant/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 298,
      "char_count": 970,
      "start_char": 899,
      "end_char": 1870
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:2",
    "content": "nt/5.1-query-request-flow.md)\n- [Filtering and Scoring](qdrant/qdrant/5.2-filtering-and-scoring.md)\n- [Data Updates and Consistency](qdrant/qdrant/6-data-updates-and-consistency.md)\n- [Update Processing Pipeline](qdrant/qdrant/6.1-update-processing-pipeline.md)\n- [Write Consistency and Replication](qdrant/qdrant/6.2-write-consistency-and-replication.md)\n- [Distributed System Features](qdrant/qdrant/7-distributed-system-features.md)\n- [Raft Consensus Protocol](qdrant/qdrant/7.1-raft-consensus-protocol.md)\n- [Shard Transfers and Resharding](qdrant/qdrant/7.2-shard-transfers-and-resharding.md)\n- [Snapshots and Recovery](qdrant/qdrant/8-snapshots-and-recovery.md)\n- [API Reference](qdrant/qdrant/9-api-reference.md)\n- [REST API Endpoints](qdrant/qdrant/9.1-rest-api-endpoints.md)\n- [gRPC API Services](qdrant/qdrant/9.2-grpc-api-services.md)\n- [Data Types and Conversions](qdrant/qdrant/9.3-data-types-and-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 321,
      "char_count": 1008,
      "start_char": 1770,
      "end_char": 2779
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:3",
    "content": "-conversions.md)\n- [Configuration and Deployment](qdrant/qdrant/10-configuration-and-deployment.md)\n- [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- [Building and CI/CD](qdrant/qdrant/10.3-building-and-cicd.md)\n- [Development Guide](qdrant/qdrant/11-development-guide.md)\n\nMenu\n\n# Building and CI/CD\n\nRelevant source files\n\n- [.config/nextest.toml](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml)\n- [.github/ISSUE\\_TEMPLATE/flaky\\_test.md](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md)\n- [.github/workflows/coverage.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml)\n- [.github/workflows/docker-image.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml)\n- [.github/workflows/integration-tests.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 325,
      "char_count": 1003,
      "start_char": 2679,
      "end_char": 3682
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:4",
    "content": "ts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml)\n- [.github/workflows/release-artifacts.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml)\n- [.github/workflows/rust-gpu.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml)\n- [.github/workflows/rust-lint.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml)\n- [.github/workflows/rust.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml)\n- [.github/workflows/storage-compat.yml](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml)\n- [Dockerfile](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile)\n- [README.md](https://github.com/qdrant/qdrant/blob/48203e41/README.md)\n- [config/deb.yaml](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml)\n- [docs/CODE\\_OF\\_CONDUCT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CODE_OF_CONDUCT.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 360,
      "char_count": 1021,
      "start_char": 3582,
      "end_char": 4604
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:5",
    "content": "[docs/CODE\\_OF\\_CONDUCT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CODE_OF_CONDUCT.md)\n- [docs/CONTRIBUTING.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/CONTRIBUTING.md)\n- [docs/DEVELOPMENT.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md)\n- [docs/QUICK\\_START.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/QUICK_START.md)\n- [docs/imgs/ci-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/ci-coverage-report.png)\n- [docs/imgs/local-coverage-report.png](https://github.com/qdrant/qdrant/blob/48203e41/docs/imgs/local-coverage-report.png)\n- [docs/roadmap/README.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/README.md)\n- [docs/roadmap/roadmap-2022.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2022.md)\n- [docs/roadmap/roadmap-2023.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2023.md)\n- [docs/roadmap/roadmap-2024.md](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 390,
      "char_count": 987,
      "start_char": 4504,
      "end_char": 5491
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:6",
    "content": "/qdrant/blob/48203e41/docs/roadmap/roadmap-2023.md)\n- [docs/roadmap/roadmap-2024.md](https://github.com/qdrant/qdrant/blob/48203e41/docs/roadmap/roadmap-2024.md)\n- [tests/integration-tests.sh](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh)\n- [tools/sync-web-ui.sh](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh)\n\n## Purpose and Scope\n\nThis document describes Qdrant's build system, continuous integration pipelines, and release artifact generation. It covers the Docker multi-stage build process, GitHub Actions workflows for testing and deployment, testing infrastructure using nextest and pytest, and the release process for Docker images and binary artifacts.\n\nFor information about:\n\n- Runtime configuration options, see [Configuration System](qdrant/qdrant/10.1-configuration-system.md)\n- Deploying with Docker, see [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 266,
      "char_count": 931,
      "start_char": 5391,
      "end_char": 6323
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:7",
    "content": "ystem.md)\n- Deploying with Docker, see [Docker Deployment](qdrant/qdrant/10.2-docker-deployment.md)\n- Contributing and local development workflows, see [Development Guide](qdrant/qdrant/11-development-guide.md)\n\n---\n\n## Docker Multi-Stage Build Architecture\n\nQdrant uses a sophisticated multi-stage Docker build with cross-compilation support, layer caching optimization via `cargo-chef`, and conditional base images for CPU and GPU variants.\n\n```\n```\n\n**Docker Build Stages**\n\nSources: [Dockerfile1-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L1-L230)\n\n### Stage 1: Dependency Planning\n\nThe `planner` stage uses `cargo-chef` to extract the dependency graph without source code, enabling Docker layer caching of dependencies separately from application code.\n\n```\n```\n\n**Key mechanism**: [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25) copies all source files and runs `cargo chef prepare` to generate a recipe that captures dependencies without code.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 266,
      "char_count": 1007,
      "start_char": 6223,
      "end_char": 7232
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:8",
    "content": "files and runs `cargo chef prepare` to generate a recipe that captures dependencies without code.\n\nSources: [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25)\n\n### Stage 2: Builder\n\nThe `builder` stage performs cross-compilation with multiple optimizations:\n\n**Dependencies and Tooling**\n\n| Component           | Purpose                     | Installation                                                                                                         |\n| ------------------- | --------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| `clang`, `lld`      | C/C++ compiler and linker   | `apt-get install` [Dockerfile42-44](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L42-L44)               |\n| `protobuf-compiler` | Protocol buffer compilation | `apt-get install` [Dockerfile42-44](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L42-L44)               |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 232,
      "char_count": 1014,
      "start_char": 7132,
      "end_char": 8148
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:9",
    "content": "Dockerfile42-44](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L42-L44)               |\n| `mold` v2.36.0      | Fast linker (default)       | Downloaded from GitHub releases [Dockerfile52-66](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L52-L66) |\n| `xx` tools          | Cross-compilation helpers   | Copied from `tonistiigi/xx` [Dockerfile31](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L31-L31)        |\n| `cargo-chef`        | Dependency caching          | Pre-installed in base image [Dockerfile19](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L19-L19)        |\n\n**Build Arguments**\n\n| Argument        | Default   | Purpose                                                                                                                        |\n| --------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------ |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 255,
      "char_count": 962,
      "start_char": 8048,
      "end_char": 9011
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:10",
    "content": "------------------------------------------------------------------------------------------------- |\n| `PROFILE`       | `release` | Cargo profile (`release`, `dev`, `ci`) [Dockerfile77](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L77-L77)       |\n| `FEATURES`      | (none)    | Comma-separated crate features [Dockerfile80](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L80-L80)               |\n| `RUSTFLAGS`     | (none)    | Additional Rust compiler flags [Dockerfile83](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L83-L83)               |\n| `LINKER`        | `mold`    | Linker selection (`mold`, `lld`, or default) [Dockerfile86](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L86-L86) |\n| `GPU`           | (none)    | GPU support (`nvidia` or `amd`) [Dockerfile89](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L89-L89)              |\n| `GIT_COMMIT_ID` | (none)    | Git commit SHA embedded in binary [Dockerfile108](https://github.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 334,
      "char_count": 1002,
      "start_char": 8911,
      "end_char": 9913
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:11",
    "content": "|\n| `GIT_COMMIT_ID` | (none)    | Git commit SHA embedded in binary [Dockerfile108](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L108-L108)         |\n\n**Cross-Compilation Setup**\n\nThe builder uses `xx-cargo` wrapper with a workaround for `PKG_CONFIG` path resolution:\n\n```\n```\n\nThis configuration:\n\n- Sets correct `PKG_CONFIG` for cross-compilation [Dockerfile101-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L101-L104)\n- Adds mold to PATH if selected\n- Configures linker via `RUSTFLAGS`\n- Always includes `stacktrace` feature\n- Conditionally adds `gpu` feature\n\n**Web UI Integration**\n\nThe build downloads the latest Qdrant Web UI from GitHub releases:\n\n```\n```\n\nSources: [Dockerfile91-94](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L91-L94) [tools/sync-web-ui.sh1-27](https://github.com/qdrant/qdrant/blob/48203e41/tools/sync-web-ui.sh#L1-L27)\n\n### Stage 3: Base Image Selection\n\nQdrant supports three base image variants selected via the `GPU` build argument:\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 328,
      "char_count": 1017,
      "start_char": 9813,
      "end_char": 10833
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:12",
    "content": "lection\n\nQdrant supports three base image variants selected via the `GPU` build argument:\n\n```\n```\n\n**GPU-Specific Configuration**\n\nFor NVIDIA GPUs [Dockerfile130-139](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L130-L139):\n\n- Adds `/etc/vulkan/icd.d/nvidia_icd.json` for Vulkan loader\n- Sets `NVIDIA_DRIVER_CAPABILITIES=compute,graphics,utility`\n- Requires `--gpus all` flag at runtime\n\nFor AMD GPUs [Dockerfile142-147](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L142-L147):\n\n- Uses ROCm development image with GPU drivers pre-installed\n\nBoth GPU variants install Vulkan runtime dependencies [Dockerfile155-161](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L155-L161):\n\n```\n```\n\nSources: [Dockerfile123-161](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L123-L161)\n\n### Stage 4: Final Runtime Image\n\nThe final stage assembles the minimal runtime environment:\n\n**Optional Features via Build Args**",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 314,
      "char_count": 951,
      "start_char": 10733,
      "end_char": 11686
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:13",
    "content": "The final stage assembles the minimal runtime environment:\n\n**Optional Features via Build Args**\n\n| Build Arg  | Effect                                                                                                                                 |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| `PACKAGES` | Additional apt packages (e.g., `gdb`, `lldb`) [Dockerfile165-167](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L165-L167) |\n| `SOURCES`  | Copy source code for debugging [Dockerfile174-194](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L174-L194)                |\n| `USER_ID`  | Run as non-root user (default: `0`) [Dockerfile198-205](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L198-L205)           |\n\n**Conditional Source Copy**\n\nWhen `SOURCES` is set, the build includes debugging symbols:\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 246,
      "char_count": 957,
      "start_char": 11586,
      "end_char": 12547
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:14",
    "content": "**Conditional Source Copy**\n\nWhen `SOURCES` is set, the build includes debugging symbols:\n\n```\n```\n\nThis hack uses parameter expansion with wildcard to make `COPY` conditional. If `SOURCES` is unset, `${DIR:-/null?}` matches nothing and `COPY` silently skips.\n\nSources: [Dockerfile176-194](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L176-L194)\n\n**File Layout**\n\n```\n/qdrant/\n├── qdrant                # Binary executable\n├── qdrant.spdx.json      # SBOM (Software Bill of Materials)\n├── config/               # Default configurations\n├── static/               # Web UI assets\n├── entrypoint.sh         # Startup script\n├── storage/              # Data directory (volume mount)\n└── snapshots/            # Snapshot directory (volume mount)\n```\n\nSources: [Dockerfile196-230](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L196-L230)\n\n---\n\n## GitHub Actions Workflows\n\nQdrant uses multiple GitHub Actions workflows for continuous integration and deployment.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 269,
      "char_count": 980,
      "start_char": 12447,
      "end_char": 13427
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:15",
    "content": "Workflows\n\nQdrant uses multiple GitHub Actions workflows for continuous integration and deployment. All workflows use Swatinem/rust-cache for dependency caching.\n\n```\n```\n\nSources: [.github/workflows/](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/)\n\n### rust.yml - Core Test Suite\n\nThe primary test workflow runs on every push and pull request, executing tests across three operating systems.\n\n**Matrix Strategy**\n\n```\n```\n\n**Test Execution with Nextest**\n\nQdrant uses `cargo-nextest` instead of `cargo test` for faster test execution and better output:\n\n```\n```\n\nThe `ci` profile is configured in [.config/nextest.toml1-12](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml#L1-L12):\n\n- Retries failing tests with exponential backoff (1 retry, 2s initial delay)\n- Does not fail-fast (runs all tests even after failures)\n- Outputs failure details immediately and at end\n- Generates JUnit XML report\n\n**Flaky Test Detection**",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 245,
      "char_count": 961,
      "start_char": 13327,
      "end_char": 14291
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:16",
    "content": "puts failure details immediately and at end\n- Generates JUnit XML report\n\n**Flaky Test Detection**\n\nA separate `process-results` job parses the JUnit XML output to detect flaky tests (tests that fail but pass on retry):\n\n```\n```\n\nThe workflow uses `yq`/`xq` to extract flaky test information and creates issues from [.github/ISSUE\\_TEMPLATE/flaky\\_test.md1-26](https://github.com/qdrant/qdrant/blob/48203e41/.github/ISSUE_TEMPLATE/flaky_test.md#L1-L26) template.\n\nSources: [.github/workflows/rust.yml1-149](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L1-L149)\n\n### integration-tests.yml - Integration Testing\n\nThis workflow runs multiple test suites validating API behavior, distributed consensus, and end-to-end scenarios.\n\n**Job 1: integration-tests**\n\nRuns OpenAPI integration tests with Python pytest:\n\n```\n```\n\nThe integration test script [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76):\n\n1.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 277,
      "char_count": 993,
      "start_char": 14191,
      "end_char": 15184
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:17",
    "content": "tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76):\n\n1. Starts Qdrant in background (standalone or distributed mode)\n2. Waits for server readiness via `/collections` endpoint\n3. Runs pytest on `tests/openapi`\n4. Runs shell-based tests: `basic_api_test.sh`, `basic_sparse_test.sh`, `basic_grpc_test.sh`\n\n**Job 2: integration-tests-consensus**\n\nTests distributed Qdrant with Raft consensus:\n\n```\n```\n\nConsensus tests validate:\n\n- Leader election\n- Shard transfers\n- Replica synchronization\n- Failure recovery\n\n**Job 3: test-consensus-compose**\n\nValidates multi-node deployment using Docker Compose:\n\n```\n```\n\n**Job 4: test-consistency**\n\nEnsures generated API schemas match source code:\n\n```\n```\n\nThese scripts verify that committed OpenAPI and gRPC definitions are up-to-date with code changes.\n\n**Job 5: test-shard-snapshot-api-s3-minio**\n\nTests snapshot functionality with local S3 (MinIO) and filesystem storage:\n\n```\n```\n\n**Job 6: e2e-tests**",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 258,
      "char_count": 990,
      "start_char": 15084,
      "end_char": 16076
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:18",
    "content": "napshot functionality with local S3 (MinIO) and filesystem storage:\n\n```\n```\n\n**Job 6: e2e-tests**\n\nEnd-to-end tests with Docker containers and pytest-xdist parallel execution:\n\n```\n```\n\nSources: [.github/workflows/integration-tests.yml1-274](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L1-L274)\n\n### rust-lint.yml - Code Quality\n\nEnforces code formatting and linting standards:\n\n```\n```\n\nThe workflow uses three clippy invocations with increasing scope to catch issues in:\n\n1. Library code\n2. Tests and benchmarks (`--all-targets`)\n3. Optional feature combinations (`--all-features`)\n\nSources: [.github/workflows/rust-lint.yml1-46](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-lint.yml#L1-L46)\n\n### coverage.yml - Code Coverage\n\nRuns daily (cron schedule) to generate coverage reports for both unit and integration tests.\n\n**Coverage Collection Strategy**\n\n```\n```\n\nThe workflow uses `cargo-llvm-cov` to instrument code and generate coverage data.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 267,
      "char_count": 1016,
      "start_char": 15976,
      "end_char": 16992
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:19",
    "content": "rategy**\n\n```\n```\n\nThe workflow uses `cargo-llvm-cov` to instrument code and generate coverage data. Integration tests run with `LLVM_PROFILE_FILE` environment variable set [tests/integration-tests.sh12](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L12-L12)\n\n**Branch Override Logic**\n\nCoverage reports can be triggered manually or by cron. The workflow adjusts the target branch:\n\n```\n```\n\nFor scheduled runs, coverage targets the `dev` branch; for manual triggers, it uses the current branch.\n\nSources: [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L1-L112)\n\n### docker-image.yml - Container Image Publishing\n\nTriggered on Git tag push, this workflow builds and publishes multi-platform Docker images with multiple variants.\n\n**Self-Hosted Runner Strategy**\n\nThis workflow runs on `[self-hosted, linux, x64]` runners rather than GitHub-hosted to handle:\n\n- Multi-platform builds requiring QEMU\n- Large Docker layer caches",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 254,
      "char_count": 1022,
      "start_char": 16892,
      "end_char": 17915
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:20",
    "content": "r than GitHub-hosted to handle:\n\n- Multi-platform builds requiring QEMU\n- Large Docker layer caches\n- Extended build times for cross-compilation\n\n**Job 1: build (CPU + Unprivileged)**\n\nBuilds standard and unprivileged variants for CPU-only workloads:\n\n```\n```\n\nThe unprivileged variant uses `--build-arg USER_ID=1000` to run as non-root user.\n\n**Job 2: build-gpu (NVIDIA + AMD)**\n\nBuilds GPU-accelerated images for NVIDIA and AMD platforms:\n\n```\n```\n\nGPU images are amd64-only due to lack of ARM GPU support in base images.\n\n**Image Tags**\n\nFor version tag `v1.2.3`, the workflow publishes:\n\n| Variant      | Tags                                                                              |\n| ------------ | --------------------------------------------------------------------------------- |\n| CPU          | `1.2.3`, `latest`, `1.2`, `1`                                                     |\n| Unprivileged | `1.2.3-unprivileged`, `latest-unprivileged`, `1.2-unprivileged`, `1-unprivileged` |\n| GPU NVIDIA   | `1.2.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 234,
      "char_count": 1018,
      "start_char": 17815,
      "end_char": 18833
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:21",
    "content": "-unprivileged`, `latest-unprivileged`, `1.2-unprivileged`, `1-unprivileged` |\n| GPU NVIDIA   | `1.2.3-gpu-nvidia`, `gpu-nvidia-latest`, `1.2-gpu-nvidia`, `1-gpu-nvidia`         |\n| GPU AMD      | `1.2.3-gpu-amd`, `gpu-amd-latest`, `1.2-gpu-amd`, `1-gpu-amd`                     |\n\n**SBOM and Signing**\n\nAll images include Software Bill of Materials (SBOM) via `--sbom=true` flag and are signed with Cosign using OIDC keyless signing for supply chain security.\n\nSources: [.github/workflows/docker-image.yml1-148](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L1-L148)\n\n### release-artifacts.yml - Binary Releases\n\nTriggered on GitHub release publication, this workflow builds and uploads binary artifacts for multiple platforms.\n\n**Build Matrix**\n\n```\n```\n\n**Linux Build Process**\n\nUses `taiki-e/setup-cross-toolchain-action` for musl cross-compilation:\n\n```\n```\n\n**Debian Package Generation**\n\nThe `x86_64-unknown-linux-musl` target additionally generates a `.deb` package:\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 291,
      "char_count": 1018,
      "start_char": 18733,
      "end_char": 19753
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:22",
    "content": "ration**\n\nThe `x86_64-unknown-linux-musl` target additionally generates a `.deb` package:\n\n```\n```\n\nThe Debian package uses configuration from [config/deb.yaml1-10](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml#L1-L10) to set:\n\n- Storage path: `/var/lib/qdrant/storage`\n- Snapshots path: `/var/lib/qdrant/snapshots`\n- Static content: `/var/lib/qdrant/static`\n\n**AppImage Creation**\n\nThe `build-app-image` job creates a portable Linux executable:\n\n```\n```\n\nThe resulting `qdrant-x86_64.AppImage` is a self-contained executable that includes the web UI and all dependencies.\n\nSources: [.github/workflows/release-artifacts.yml1-178](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L1-L178)\n\n### storage-compat.yml - Version Compatibility\n\nTests storage format compatibility between Qdrant versions to ensure seamless upgrades.\n\n```\n```",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 249,
      "char_count": 888,
      "start_char": 19653,
      "end_char": 20543
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:23",
    "content": "Tests storage format compatibility between Qdrant versions to ensure seamless upgrades.\n\n```\n```\n\nThis workflow validates that collections created with older Qdrant versions can be read by newer versions, preventing data migration issues.\n\nSources: [.github/workflows/storage-compat.yml1-34](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/storage-compat.yml#L1-L34)\n\n### rust-gpu.yml - GPU Functionality\n\nManually triggered workflow to test GPU-enabled features (requires GPU hardware on runners):\n\n```\n```\n\nTests validate:\n\n- Vulkan initialization\n- GPU vector operations\n- Quantization on GPU\n- HNSW graph operations with GPU acceleration\n\nSources: [.github/workflows/rust-gpu.yml1-105](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust-gpu.yml#L1-L105)\n\n---\n\n## Testing Infrastructure\n\nQdrant employs a multi-layered testing strategy combining Rust unit tests, integration tests via pytest, and end-to-end scenarios.\n\n### Nextest Configuration\n\nThe [.config/nextest.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 248,
      "char_count": 1007,
      "start_char": 20443,
      "end_char": 21452
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:24",
    "content": "ration tests via pytest, and end-to-end scenarios.\n\n### Nextest Configuration\n\nThe [.config/nextest.toml1-12](https://github.com/qdrant/qdrant/blob/48203e41/.config/nextest.toml#L1-L12) file defines the `ci` profile used in GitHub Actions:\n\n```\n```\n\n**Key behaviors**:\n\n- Retries flaky tests once with 2-second initial delay\n- Continues running all tests after failures\n- Outputs failures immediately and again at end for scrollback\n- Generates JUnit XML for GitHub Actions integration\n\n### Integration Test Script\n\nThe [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76) orchestrates multiple test suites:\n\n```\n```\n\n**Test Organization**\n\n| Test Suite              | Purpose                | Technology                      |\n| ----------------------- | ---------------------- | ------------------------------- |\n| `tests/openapi`         | REST API functionality | pytest                          |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 228,
      "char_count": 963,
      "start_char": 21352,
      "end_char": 22316
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:25",
    "content": "---------- |\n| `tests/openapi`         | REST API functionality | pytest                          |\n| `tests/consensus_tests` | Distributed consensus  | pytest with multi-node clusters |\n| `tests/e2e_tests`       | End-to-end scenarios   | pytest + Docker                 |\n| `basic_api_test.sh`     | Core API smoke tests   | bash + curl                     |\n| `basic_grpc_test.sh`    | gRPC API validation    | bash + grpcurl                  |\n| `shard-snapshot-api.sh` | Snapshot functionality | bash + curl                     |\n\nSources: [tests/integration-tests.sh1-76](https://github.com/qdrant/qdrant/blob/48203e41/tests/integration-tests.sh#L1-L76) [.github/workflows/integration-tests.yml1-274](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L1-L274)\n\n### Coverage Reporting\n\nCoverage collection uses `cargo-llvm-cov` to instrument binaries and `lcov` to merge results:\n\n```\n```\n\nCoverage reports are available at [Codecov dashboard](https://app.codecov.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 258,
      "char_count": 1006,
      "start_char": 22216,
      "end_char": 23222
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:26",
    "content": "merge results:\n\n```\n```\n\nCoverage reports are available at [Codecov dashboard](https://app.codecov.io/gh/qdrant/qdrant) showing per-file and per-function coverage.\n\nSources: [.github/workflows/coverage.yml1-112](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/coverage.yml#L1-L112) [docs/DEVELOPMENT.md156-177](https://github.com/qdrant/qdrant/blob/48203e41/docs/DEVELOPMENT.md#L156-L177)\n\n---\n\n## Release Process\n\nQdrant releases are triggered by pushing Git tags matching version patterns (e.g., `v1.2.3`).\n\n### Release Artifact Matrix\n\n```\n```\n\n### Docker Image Build Details\n\n**Platform Support**\n\n| Image Variant | Platforms                | Base Image                                |\n| ------------- | ------------------------ | ----------------------------------------- |\n| CPU           | linux/amd64, linux/arm64 | debian:13-slim                            |\n| GPU NVIDIA    | linux/amd64              | nvidia/opengl:1.2-glvnd-devel-ubuntu22.04 |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 266,
      "char_count": 974,
      "start_char": 23122,
      "end_char": 24098
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:27",
    "content": "|\n| GPU NVIDIA    | linux/amd64              | nvidia/opengl:1.2-glvnd-devel-ubuntu22.04 |\n| GPU AMD       | linux/amd64              | rocm/dev-ubuntu-22.04                     |\n| Unprivileged  | linux/amd64, linux/arm64 | debian:13-slim (USER\\_ID=1000)            |\n\n**Build Command Template**\n\n```\n```\n\n**SBOM and Provenance**\n\nAll Docker images include:\n\n- SBOM (Software Bill of Materials) via `--sbom=true` [.github/workflows/docker-image.yml56](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L56-L56)\n- Cosign signature for supply chain verification [.github/workflows/docker-image.yml62](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/docker-image.yml#L62-L62)\n\n### Binary Release Details\n\n**Linux Targets**\n\n| Target                       | Linking         | Use Case                           |\n| ---------------------------- | --------------- | ---------------------------------- |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 260,
      "char_count": 946,
      "start_char": 23998,
      "end_char": 24954
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:28",
    "content": "|\n| ---------------------------- | --------------- | ---------------------------------- |\n| `x86_64-unknown-linux-gnu`   | Dynamic (glibc) | Standard Linux systems             |\n| `x86_64-unknown-linux-musl`  | Static          | Portable, Alpine Linux, containers |\n| `aarch64-unknown-linux-musl` | Static          | ARM64 servers (e.g., AWS Graviton) |\n\n**macOS Targets**\n\n| Target                 | Architecture             |\n| ---------------------- | ------------------------ |\n| `x86_64-apple-darwin`  | Intel Macs               |\n| `aarch64-apple-darwin` | Apple Silicon (M1/M2/M3) |\n\n**Windows Target**\n\n| Target                   | Toolchain            |\n| ------------------------ | -------------------- |\n| `x86_64-pc-windows-msvc` | MSVC (Visual Studio) |\n\n### Debian Package Structure\n\nGenerated from `x86_64-unknown-linux-musl` build using `cargo-deb`:\n\n```\nPackage: qdrant\nArchitecture: amd64\nDepends: libc6\nDescription: Qdrant - High-performance vector similarity search engine\n\n/usr/bin/qdrant",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 268,
      "char_count": 1009,
      "start_char": 24854,
      "end_char": 25874
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:29",
    "content": "ends: libc6\nDescription: Qdrant - High-performance vector similarity search engine\n\n/usr/bin/qdrant\n/var/lib/qdrant/storage/\n/var/lib/qdrant/snapshots/\n/var/lib/qdrant/static/\n/etc/qdrant/config/\n```\n\nConfiguration from [config/deb.yaml1-10](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml#L1-L10) sets default paths for system installation.\n\nSources: [.github/workflows/release-artifacts.yml50-64](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L50-L64) [config/deb.yaml1-10](https://github.com/qdrant/qdrant/blob/48203e41/config/deb.yaml#L1-L10)\n\n### AppImage Bundle\n\nThe AppImage bundles:\n\n- Qdrant binary\n- Web UI static files\n- Desktop integration metadata\n- Custom AppRun launcher script\n\nThis creates a single executable file that works on any Linux distribution without installation.\n\nSources: [.github/workflows/release-artifacts.yml117-177](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L117-L177)\n\n---",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 304,
      "char_count": 1008,
      "start_char": 25774,
      "end_char": 26784
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:30",
    "content": "s://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/release-artifacts.yml#L117-L177)\n\n---\n\n## Build Optimization Techniques\n\n### Cargo-Chef Layer Caching\n\nTraditional Docker builds invalidate all layers when source code changes. Cargo-chef separates dependency compilation from source compilation:\n\n```\n```\n\n**Cache layers**:\n\n1. `recipe.json` changes only when dependencies change\n2. `cargo chef cook` layer cached until dependencies change\n3. Source code changes only invalidate final build step\n\nThis typically reduces Docker build time from \\~30min to \\~5min for code-only changes.\n\nSources: [Dockerfile22-25](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L22-L25) [Dockerfile96-104](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L96-L104)\n\n### Linker Selection\n\nQdrant supports three linkers via `LINKER` build arg:\n\n| Linker    | Speed                          | Default |\n| --------- | ------------------------------ | ------- |",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "token_count": 265,
      "char_count": 968,
      "start_char": 26684,
      "end_char": 27653
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:31",
    "content": "Speed                          | Default |\n| --------- | ------------------------------ | ------- |\n| `mold`    | Fastest (2-3x faster than lld) | ✓       |\n| `lld`     | Fast                           |         |\n| (default) | Slower                         |         |\n\nThe mold linker is downloaded during build [Dockerfile52-66](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L52-L66) and added to PATH [Dockerfile102](https://github.com/qdrant/qdrant/blob/48203e41/Dockerfile#L102-L102)\n\n### Rust Cache in GitHub Actions\n\nAll workflows use `Swatinem/rust-cache@v2` to cache:\n\n- `~/.cargo/registry` - crate registry index and downloads\n- `~/.cargo/git` - git dependencies\n- `target/` - compiled artifacts\n\n**Cache key configuration**:\n\n```\n```\n\nThe `shared-key` parameter allows multiple jobs to share the same cache, reducing redundant compilations.\n\nSources: [.github/workflows/rust.yml23](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L23-L23) [.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "token_count": 288,
      "char_count": 992,
      "start_char": 27553,
      "end_char": 28545
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:32",
    "content": "ws/rust.yml23](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/rust.yml#L23-L23) [.github/workflows/integration-tests.yml26-28](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/integration-tests.yml#L26-L28)\n\n---\n\n## Continuous Integration Summary\n\n**Workflow Trigger Matrix**\n\n| Workflow              | Trigger         | Duration    | Purpose               |\n| --------------------- | --------------- | ----------- | --------------------- |\n| rust.yml              | Every push/PR   | \\~10-15 min | Unit tests on 3 OS    |\n| rust-lint.yml         | Every push/PR   | \\~3-5 min   | Code quality checks   |\n| integration-tests.yml | Every push/PR   | \\~20-30 min | API + consensus tests |\n| storage-compat.yml    | Every push/PR   | \\~5-10 min  | Version migration     |\n| coverage.yml          | Daily cron      | \\~30-40 min | Coverage reporting    |\n| rust-gpu.yml          | Manual          | \\~15-20 min | GPU functionality     |\n| docker-image.",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "token_count": 282,
      "char_count": 982,
      "start_char": 28445,
      "end_char": 29427
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:33",
    "content": "|\n| rust-gpu.yml          | Manual          | \\~15-20 min | GPU functionality     |\n| docker-image.yml      | Tag push        | \\~60-90 min | Multi-platform images |\n| release-artifacts.yml | Release publish | \\~45-60 min | Binary artifacts      |\n\n**Test Execution Flow**\n\n```\n```\n\nSources: All workflow files in [.github/workflows/](https://github.com/qdrant/qdrant/blob/48203e41/.github/workflows/)\n\nDismiss\n\nRefresh this wiki\n\nEnter email to refresh\n\n### On this page\n\n- [Building and CI/CD](#building-and-cicd.md)\n- [Purpose and Scope](#purpose-and-scope.md)\n- [Docker Multi-Stage Build Architecture](#docker-multi-stage-build-architecture.md)\n- [Stage 1: Dependency Planning](#stage-1-dependency-planning.md)\n- [Stage 2: Builder](#stage-2-builder.md)\n- [Stage 3: Base Image Selection](#stage-3-base-image-selection.md)\n- [Stage 4: Final Runtime Image](#stage-4-final-runtime-image.md)\n- [GitHub Actions Workflows](#github-actions-workflows.md)\n- [rust.yml - Core Test Suite](#rustyml---core-test-suite.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "token_count": 285,
      "char_count": 1011,
      "start_char": 29327,
      "end_char": 30340
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:34",
    "content": "kflows](#github-actions-workflows.md)\n- [rust.yml - Core Test Suite](#rustyml---core-test-suite.md)\n- [integration-tests.yml - Integration Testing](#integration-testsyml---integration-testing.md)\n- [rust-lint.yml - Code Quality](#rust-lintyml---code-quality.md)\n- [coverage.yml - Code Coverage](#coverageyml---code-coverage.md)\n- [docker-image.yml - Container Image Publishing](#docker-imageyml---container-image-publishing.md)\n- [release-artifacts.yml - Binary Releases](#release-artifactsyml---binary-releases.md)\n- [storage-compat.yml - Version Compatibility](#storage-compatyml---version-compatibility.md)\n- [rust-gpu.yml - GPU Functionality](#rust-gpuyml---gpu-functionality.md)\n- [Testing Infrastructure](#testing-infrastructure.md)\n- [Nextest Configuration](#nextest-configuration.md)\n- [Integration Test Script](#integration-test-script.md)\n- [Coverage Reporting](#coverage-reporting.md)\n- [Release Process](#release-process.md)\n- [Release Artifact Matrix](#release-artifact-matrix.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "token_count": 247,
      "char_count": 993,
      "start_char": 30240,
      "end_char": 31234
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md:chunk:35",
    "content": ")\n- [Release Process](#release-process.md)\n- [Release Artifact Matrix](#release-artifact-matrix.md)\n- [Docker Image Build Details](#docker-image-build-details.md)\n- [Binary Release Details](#binary-release-details.md)\n- [Debian Package Structure](#debian-package-structure.md)\n- [AppImage Bundle](#appimage-bundle.md)\n- [Build Optimization Techniques](#build-optimization-techniques.md)\n- [Cargo-Chef Layer Caching](#cargo-chef-layer-caching.md)\n- [Linker Selection](#linker-selection.md)\n- [Rust Cache in GitHub Actions](#rust-cache-in-github-actions.md)\n- [Continuous Integration Summary](#continuous-integration-summary.md)",
    "metadata": {
      "source_file": "qdrant_qdrant\\_qdrant_qdrant_10.3-building-and-cicd.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_qdrant",
      "filename": "_qdrant_qdrant_10.3-building-and-cicd.md",
      "file_extension": ".md",
      "chunk_index": 35,
      "token_count": 157,
      "char_count": 626,
      "start_char": 31134,
      "end_char": 32158
    }
  }
]