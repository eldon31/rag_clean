[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:0",
    "content": "Explore - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 275,
      "char_count": 1004,
      "start_char": 0,
      "end_char": 1004
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:1",
    "content": "tart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 256,
      "char_count": 1014,
      "start_char": 904,
      "end_char": 1920
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:2",
    "content": "mentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 253,
      "char_count": 1023,
      "start_char": 1820,
      "end_char": 2844
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:3",
    "content": "cumentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 255,
      "char_count": 992,
      "start_char": 2744,
      "end_char": 3736
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:4",
    "content": "(https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 242,
      "char_count": 1001,
      "start_char": 3636,
      "end_char": 4638
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:5",
    "content": "- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 229,
      "char_count": 1011,
      "start_char": 4538,
      "end_char": 5550
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:6",
    "content": "sync-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 261,
      "char_count": 1016,
      "start_char": 5450,
      "end_char": 6466
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:7",
    "content": "ser Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 252,
      "char_count": 1020,
      "start_char": 6366,
      "end_char": 7387
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:8",
    "content": "ion/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 250,
      "char_count": 1001,
      "start_char": 7287,
      "end_char": 8288
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:9",
    "content": "ics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 261,
      "char_count": 1012,
      "start_char": 8188,
      "end_char": 9201
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:10",
    "content": "/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 235,
      "char_count": 1006,
      "start_char": 9101,
      "end_char": 10108
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:11",
    "content": "aborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 231,
      "char_count": 1004,
      "start_char": 10008,
      "end_char": 11014
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:12",
    "content": "attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Concepts](https://qdrant.tech/documentation/concepts/)\n-\n- Explore\n\n# Explore the data\n\nAfter mastering the concepts in [search](https://qdrant.tech/documentation/concepts/search/), you can start exploring your data in other ways. Qdrant provides a stack of APIs that allow you to find similar vectors in a different fashion, as well as to find the most dissimilar ones. These are useful tools for recommendation systems, data exploration, and data cleaning.\n\n## Recommendation API",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 219,
      "char_count": 939,
      "start_char": 10914,
      "end_char": 11856
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:13",
    "content": "eful tools for recommendation systems, data exploration, and data cleaning.\n\n## Recommendation API\n\nIn addition to the regular search, Qdrant also allows you to search based on multiple positive and negative examples. The API is called ***recommend***, and the examples can be point IDs, so that you can leverage the already encoded objects; and, as of v1.6, you can also use raw vectors as input, so that you can create your vectors on the fly without uploading them as points.\n\nREST API - API Schema definition is available [here](https://api.qdrant.tech/api-reference/search/recommend-points)\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718, [0.2, 0.3, 0.4, 0.5]],\n      \"strategy\": \"average_vector\"\n    }\n  },\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"city\",\n        \"match\": {\n          \"value\": \"London\"\n        }\n      }\n    ]\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 262,
      "char_count": 1008,
      "start_char": 11756,
      "end_char": 12766
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:14",
    "content": "ondon\"\n        }\n      }\n    ]\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],\n            negative=[718, [0.2, 0.3, 0.4, 0.5]],\n            strategy=models.RecommendStrategy.AVERAGE_VECTOR,\n        )\n    ),\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\",\n                match=models.MatchValue(\n                    value=\"London\",\n                ),\n            )\n        ]\n    ),\n    limit=3,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718, [0.2, 0.3, 0.4, 0.5]],",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 267,
      "char_count": 1000,
      "start_char": 12666,
      "end_char": 13667
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:15",
    "content": "recommend: {\n            positive: [100, 231],\n            negative: [718, [0.2, 0.3, 0.4, 0.5]],\n            strategy: \"average_vector\"\n        }\n    },\n    filter: {\n        must: [\n            {\n                key: \"city\",\n                match: {\n                    value: \"London\",\n                },\n            },\n        ],\n    },\n    limit: 3\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    Condition, Filter, QueryPointsBuilder, RecommendInputBuilder, RecommendStrategy,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n    \nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_positive(vec![0.2, 0.3, 0.4, 0.5])\n                    .add_negative(718)\n                    .strategy(RecommendStrategy::AverageVector)\n                    .build(),\n            )",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 256,
      "char_count": 1011,
      "start_char": 13567,
      "end_char": 14581
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:16",
    "content": ".strategy(RecommendStrategy::AverageVector)\n                    .build(),\n            )\n            .limit(3)\n            .filter(Filter::must([Condition::matches(\n                \"city\",\n                \"London\".to_string(),\n            )])),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\nimport io.qdrant.client.grpc.Points.RecommendStrategy;\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 226,
      "char_count": 1004,
      "start_char": 14481,
      "end_char": 15497
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:17",
    "content": "uilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(200), vectorInput(100.0f, 231.0f)))\n                .addAllNegative(List.of(vectorInput(718), vectorInput(0.2f, 0.3f, 0.4f, 0.5f)))\n                .setStrategy(RecommendStrategy.AverageVector)\n                .build()))\n        .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")))\n        .setLimit(3)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new RecommendInput {\n        Positive = { 100, 231 },\n        Negative = { 718 }\n    },\n    filter: MatchKeyword(\"city\", \"London\"),\n    limit: 3\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 287,
      "char_count": 1014,
      "start_char": 15397,
      "end_char": 16411
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:18",
    "content": "``\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n        Positive: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n            qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n        },\n        Negative: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n        },\n    }),\n    Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"city\", \"London\"),\n        },\n    },\n})\n```\n\nExample result of this API would be\n\n```json\n{\n  \"result\": [\n    { \"id\": 10, \"score\": 0.81 },\n    { \"id\": 14, \"score\": 0.75 },\n    { \"id\": 11, \"score\": 0.73 }\n  ],\n  \"status\": \"ok\",\n  \"time\": 0.001\n}\n```",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 307,
      "char_count": 954,
      "start_char": 16311,
      "end_char": 17267
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:19",
    "content": "14, \"score\": 0.75 },\n    { \"id\": 11, \"score\": 0.73 }\n  ],\n  \"status\": \"ok\",\n  \"time\": 0.001\n}\n```\n\nThe algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.\n\n### Average vector strategy\n\nThe default and first strategy added to Qdrant is called `average_vector`. It preprocesses the input examples to create a single vector that is used for the search. Since the preprocessing step happens very fast, the performance of this strategy is on-par with regular search. The intuition behind this kind of recommendation is that each vector component represents an independent feature of the data, so, by averaging the examples, we should get a good recommendation.\n\nThe way to produce the searching vector is by first averaging all the positive and negative examples separately, and then combining them into a single vector using the following formula:\n\n```rust",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 222,
      "char_count": 1008,
      "start_char": 17167,
      "end_char": 18177
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:20",
    "content": "ples separately, and then combining them into a single vector using the following formula:\n\n```rust\navg_positive + avg_positive - avg_negative\n```\n\nIn the case of not having any negative examples, the search vector will simply be equal to `avg_positive`.\n\nThis is the default strategy that’s going to be set implicitly, but you can explicitly define it by setting `\"strategy\": \"average_vector\"` in the recommendation request.\n\n### Best score strategy\n\n*Available as of v1.6.0*\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one. The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:\n\n```rust\n// Sigmoid function to normalize the score between 0 and 1\nlet sigmoid = |x| 0.5 * (1.0 + (x / (1.0 + x.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 236,
      "char_count": 1018,
      "start_char": 18077,
      "end_char": 19095
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:21",
    "content": "igmoid function to normalize the score between 0 and 1\nlet sigmoid = |x| 0.5 * (1.0 + (x / (1.0 + x.abs())));\n\nlet score = if best_positive_score > best_negative_score {\n    sigmoid(best_positive_score)\n} else {\n    -sigmoid(best_negative_score)\n};\n```\n\nThe performance of `best_score` strategy will be linearly impacted by the amount of examples.\n\nSince we are computing similarities to every example at each step of the search, the performance of this strategy will be linearly impacted by the amount of examples. This means that the more examples you provide, the slower the search will be. However, this strategy can be very powerful and should be more embedding-agnostic.\n\nAccuracy may be impacted with this strategy. To improve it, increasing the `ef` search parameter to something above 32 will already be much better than the default 16, e.g: `\"params\": { \"ef\": 64 }`\n\nTo use this algorithm, you need to set `\"strategy\": \"best_score\"` in the recommendation request.\n\n#### Using only negative examples",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 233,
      "char_count": 1008,
      "start_char": 18995,
      "end_char": 20005
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:22",
    "content": "o set `\"strategy\": \"best_score\"` in the recommendation request.\n\n#### Using only negative examples\n\nA beneficial side-effect of `best_score` strategy is that you can use it with only negative examples. This will allow you to find the most dissimilar vectors to the ones you provide. This can be useful for finding outliers in your data, or for finding the most dissimilar vectors to a given one.\n\nCombining negative-only examples with filtering can be a powerful tool for data exploration and cleaning.\n\n### Sum scores strategy\n\nAnother strategy for using multiple query vectors simultaneously is to just sum their scores against the candidates. In qdrant, this is called `sum_scores` strategy.\n\nThis strategy was used in [this paper](https://arxiv.org/abs/2210.10695) by [UKP Lab](http://www.ukp.tu-darmstadt.de/), [hessian.ai](https://hessian.ai) and [cohere.ai](https://cohere.ai) to incorporate relevance feedback into a subsequent search. In the paper this boosted the nDCG\\@20 performance by 5.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 234,
      "char_count": 1000,
      "start_char": 19905,
      "end_char": 20905
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:23",
    "content": "elevance feedback into a subsequent search. In the paper this boosted the nDCG\\@20 performance by 5.6% points when using 2-8 positive feedback documents.\n\nThe formula that this strategy implements is\n\n$$ s\\_i = \\sum\\_{v\\_q\\in Q^+}s(v\\_q, v\\_i) - \\sum\\_{v\\_q\\in Q^-}s(v\\_q, v\\_i) $$\n\nwhere $Q^+$ is the set of positive examples, $Q^-$ is the set of negative examples, and $s(v\\_q, v\\_i)$ is the score of the vector $v\\_q$ against the vector $v\\_i$\n\nAs with `best_score`, this strategy also allows using only negative examples.\n\n### Multiple vectors\n\n*Available as of v0.10.0*\n\nIf the collection was created with multiple vectors, the name of the vector should be specified in the recommendation request:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718]\n    }\n  },\n  \"using\": \"image\",\n  \"limit\": 10\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.RecommendQuery(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 294,
      "char_count": 1005,
      "start_char": 20805,
      "end_char": 21811
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:24",
    "content": "thon\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],\n            negative=[718],\n        )\n    ),\n    using=\"image\",\n    limit=10,\n)\n```\n\n```typescript\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718],\n        }\n    },\n    using: \"image\",\n    limit: 10\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{QueryPointsBuilder, RecommendInputBuilder};\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_negative(718)\n                    .build(),\n            )\n            .limit(10)\n            .using(\"image\"),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 250,
      "char_count": 1023,
      "start_char": 21711,
      "end_char": 22734
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:25",
    "content": "```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(231)))\n                .addAllNegative(List.of(vectorInput(718)))\n                .build()))\n        .setUsing(\"image\")\n        .setLimit(10)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new RecommendInput {\n        Positive = { 100, 231 },\n        Negative = { 718 }\n    },\n    usingVector: \"image\",\n    limit: 10\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 253,
      "char_count": 1006,
      "start_char": 22634,
      "end_char": 23642
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:26",
    "content": "}\n    },\n    usingVector: \"image\",\n    limit: 10\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n        Positive: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n            qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n        },\n        Negative: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n        },\n    }),\n    Using: qdrant.PtrOf(\"image\"),\n})\n```\n\nParameter `using` specifies which stored vectors to use for the recommendation.\n\n### Lookup vectors from another collection\n\n*Available as of v0.11.6*",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 241,
      "char_count": 860,
      "start_char": 23542,
      "end_char": 24405
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:27",
    "content": "use for the recommendation.\n\n### Lookup vectors from another collection\n\n*Available as of v0.11.6*\n\nIf you have collections with vectors of the same dimensionality, and you want to look for recommendations in one collection based on the vectors of another collection, you can use the `lookup_from` parameter.\n\nIt might be useful, e.g. in the item-to-user recommendations scenario. Where user and item embeddings, although having the same vector parameters (distance type and dimensionality), are usually stored in different collections.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"recommend\": {\n      \"positive\": [100, 231],\n      \"negative\": [718]\n    }\n  },\n  \"limit\": 10,\n  \"lookup_from\": {\n    \"collection\": \"{external_collection_name}\",\n    \"vector\": \"{external_vector_name}\"\n  }\n}\n```\n\n```python\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 234,
      "char_count": 1004,
      "start_char": 24305,
      "end_char": 25310
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:28",
    "content": "ry=models.RecommendQuery(\n        recommend=models.RecommendInput(\n            positive=[100, 231],\n            negative=[718],\n        )\n    ),\n    using=\"image\",\n    limit=10,\n    lookup_from=models.LookupLocation(\n        collection=\"{external_collection_name}\", vector=\"{external_vector_name}\"\n    ),\n)\n```\n\n```typescript\nclient.query(\"{collection_name}\", {\n    query: {\n        recommend: {\n            positive: [100, 231],\n            negative: [718],\n        }\n    },\n    using: \"image\",\n    limit: 10,\n    lookup_from: {\n        collection: \"{external_collection_name}\",\n        vector: \"{external_vector_name}\"\n    }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{LookupLocationBuilder, QueryPointsBuilder, RecommendInputBuilder};\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(\n                RecommendInputBuilder::default()\n                    .add_positive(100)\n                    .add_positive(231)\n                    .add_negative(718)\n                    .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 235,
      "char_count": 1019,
      "start_char": 25210,
      "end_char": 26229
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:29",
    "content": ".add_positive(231)\n                    .add_negative(718)\n                    .build(),\n            )\n            .limit(10)\n            .using(\"image\")\n            .lookup_from(\n                LookupLocationBuilder::new(\"{external_collection_name}\")\n                    .vector_name(\"{external_vector_name}\"),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.grpc.Points.LookupLocation;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(recommend(RecommendInput.newBuilder()\n                .addAllPositive(List.of(vectorInput(100), vectorInput(231)))\n                .addAllNegative(List.of(vectorInput(718)))\n                .build()))\n        .setUsing(\"image\")\n        .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 213,
      "char_count": 1002,
      "start_char": 26129,
      "end_char": 27152
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:30",
    "content": "lNegative(List.of(vectorInput(718)))\n                .build()))\n        .setUsing(\"image\")\n        .setLimit(10)\n        .setLookupFrom(\n                LookupLocation.newBuilder()\n                        .setCollectionName(\"{external_collection_name}\")\n                        .setVectorName(\"{external_vector_name}\")\n                        .build())\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new RecommendInput {\n        Positive = { 100, 231 },\n        Negative = { 718 }\n    },\n    usingVector: \"image\",\n    limit: 10,\n    lookupFrom: new LookupLocation\n    {\n        CollectionName = \"{external_collection_name}\",\n        VectorName = \"{external_vector_name}\",\n    }\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "token_count": 254,
      "char_count": 1018,
      "start_char": 27052,
      "end_char": 28072
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:31",
    "content": "rant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n        Positive: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n            qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n        },\n        Negative: []*qdrant.VectorInput{\n            qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n        },\n    }),\n    Using: qdrant.PtrOf(\"image\"),\n    LookupFrom: &qdrant.LookupLocation{\n        CollectionName: \"{external_collection_name}\",\n        VectorName:     qdrant.PtrOf(\"{external_vector_name}\"),\n    },\n})\n```\n\nVectors are retrieved from the external collection by ids provided in the `positive` and `negative` lists. These vectors then used to perform the recommendation in the current collection, comparing against the “using” or default vector.\n\n## Batch recommendation API",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "token_count": 255,
      "char_count": 1018,
      "start_char": 27972,
      "end_char": 28992
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:32",
    "content": "current collection, comparing against the “using” or default vector.\n\n## Batch recommendation API\n\n*Available as of v0.10.0*\n\nSimilar to the batch search API in terms of usage and advantages, it enables the batching of recommendation requests.\n\n```http\nPOST /collections/{collection_name}/query/batch\n{\n  \"searches\": [\n    {\n      \"query\": {\n        \"recommend\": {\n          \"positive\": [100, 231],\n          \"negative\": [718]\n        }\n      },\n      \"filter\": {\n        \"must\": [\n          {\n            \"key\": \"city\",\n            \"match\": {\n              \"value\": \"London\"\n            }\n          }\n        ]\n      },\n      \"limit\": 10\n    },\n    {\n      \"query\": {\n        \"recommend\": {\n          \"positive\": [200, 67],\n          \"negative\": [300]\n        }\n      },\n      \"filter\": {\n        \"must\": [\n          {\n            \"key\": \"city\",\n            \"match\": {\n              \"value\": \"London\"\n            }\n          }\n        ]\n      },\n      \"limit\": 10\n    }\n  ]\n}\n```\n\n```python",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "token_count": 255,
      "char_count": 991,
      "start_char": 28892,
      "end_char": 29885
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:33",
    "content": "\"London\"\n            }\n          }\n        ]\n      },\n      \"limit\": 10\n    }\n  ]\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nfilter_ = models.Filter(\n    must=[\n        models.FieldCondition(\n            key=\"city\",\n            match=models.MatchValue(\n                value=\"London\",\n            ),\n        )\n    ]\n)\n\nrecommend_queries = [\n    models.QueryRequest(\n        query=models.RecommendQuery(\n            recommend=models.RecommendInput(positive=[100, 231], negative=[718])\n        ),\n        filter=filter_,\n        limit=3,\n    ),\n    models.QueryRequest(\n        query=models.RecommendQuery(\n            recommend=models.RecommendInput(positive=[200, 67], negative=[300])\n        ),\n        filter=filter_,\n        limit=3,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=recommend_queries\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "token_count": 239,
      "char_count": 991,
      "start_char": 29785,
      "end_char": 30779
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:34",
    "content": "ests=recommend_queries\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nconst filter = {\n    must: [\n        {\n            key: \"city\",\n            match: {\n                value: \"London\",\n            },\n        },\n    ],\n};\n\nconst searches = [\n    {\n        query: {\n            recommend: {\n                positive: [100, 231],\n                negative: [718]\n            }\n        },\n        filter,\n        limit: 3,\n    },\n    {\n        query: {\n            recommend: {\n                positive: [200, 67],\n                negative: [300]\n            }\n        },\n        filter,\n        limit: 3,\n    },\n];\n\nclient.queryBatch(\"{collection_name}\", {\n    searches,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    Condition, Filter, QueryBatchPointsBuilder, QueryPointsBuilder,\n    RecommendInputBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "token_count": 257,
      "char_count": 1005,
      "start_char": 30679,
      "end_char": 31686
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:35",
    "content": "r,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet filter = Filter::must([Condition::matches(\"city\", \"London\".to_string())]);\n\nlet recommend_queries = vec![\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(\n            RecommendInputBuilder::default()\n                .add_positive(100)\n                .add_positive(231)\n                .add_negative(718)\n                .build(),\n        )\n        .filter(filter.clone())\n        .build(),\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(\n            RecommendInputBuilder::default()\n                .add_positive(200)\n                .add_positive(67)\n                .add_negative(300)\n                .build(),\n        )\n        .filter(filter)\n        .build(),\n];\n\nclient\n    .query_batch(QueryBatchPointsBuilder::new(\n        \"{collection_name}\",\n        recommend_queries,\n    ))\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 35,
      "token_count": 240,
      "char_count": 1022,
      "start_char": 31586,
      "end_char": 32608
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:36",
    "content": ")\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.RecommendInput;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.recommend;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nFilter filter = Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\")).build();\n\nList<QueryPoints> recommendQueries = List.of(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(recommend(\n                        RecommendInput.newBuilder()\n                                .addAllPositive(List.of(vectorInput(100), vectorInput(231)))\n                                .addAllNegative(List.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 36,
      "token_count": 221,
      "char_count": 1023,
      "start_char": 32508,
      "end_char": 33531
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:37",
    "content": "e(List.of(vectorInput(100), vectorInput(231)))\n                                .addAllNegative(List.of(vectorInput(731)))\n                                .build()))\n                .setFilter(filter)\n                .setLimit(3)\n                .build(),\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(recommend(\n                        RecommendInput.newBuilder()\n                                .addAllPositive(List.of(vectorInput(200), vectorInput(67)))\n                                .addAllNegative(List.of(vectorInput(300)))\n                                .build()))\n                .setFilter(filter)\n                .setLimit(3)\n                .build());\n                \nclient.queryBatchAsync(\"{collection_name}\", recommendQueries).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nvar filter = MatchKeyword(\"city\", \"london\");",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 37,
      "token_count": 203,
      "char_count": 1022,
      "start_char": 33431,
      "end_char": 34455
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:38",
    "content": ";\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nvar filter = MatchKeyword(\"city\", \"london\");\n\nawait client.QueryBatchAsync(\n    collectionName: \"{collection_name}\",\n    queries:\n    [\n        new QueryPoints()\n        {\n            CollectionName = \"{collection_name}\",\n            Query = new RecommendInput {\n                Positive = { 100, 231 },\n                Negative = { 718 },\n            },\n            Limit = 3,\n            Filter = filter,\n        },\n                new QueryPoints()\n        {\n            CollectionName = \"{collection_name}\",\n            Query = new RecommendInput {\n                Positive = { 200, 67 },\n                Negative = { 300 },\n            },\n            Limit = 3,\n            Filter = filter,\n        }\n    ]\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nfilter := qdrant.Filter{\n    Must: []*qdrant.Condition{\n        qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 38,
      "token_count": 248,
      "char_count": 1010,
      "start_char": 34355,
      "end_char": 35365
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:39",
    "content": "alhost\",\n    Port: 6334,\n})\n\nfilter := qdrant.Filter{\n    Must: []*qdrant.Condition{\n        qdrant.NewMatch(\"city\", \"London\"),\n    },\n}\nclient.QueryBatch(context.Background(), &qdrant.QueryBatchPoints{\n    CollectionName: \"{collection_name}\",\n    QueryPoints: []*qdrant.QueryPoints{\n        {\n            CollectionName: \"{collection_name}\",\n            Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n                Positive: []*qdrant.VectorInput{\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(231)),\n                },\n                Negative: []*qdrant.VectorInput{\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n                },\n            },\n            ),\n            Filter: &filter,\n        },\n        {\n            CollectionName: \"{collection_name}\",\n            Query: qdrant.NewQueryRecommend(&qdrant.RecommendInput{\n                Positive: []*qdrant.VectorInput{\n                    qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 39,
      "token_count": 239,
      "char_count": 1021,
      "start_char": 35265,
      "end_char": 36286
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:40",
    "content": "&qdrant.RecommendInput{\n                Positive: []*qdrant.VectorInput{\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(200)),\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(67)),\n                },\n                Negative: []*qdrant.VectorInput{\n                    qdrant.NewVectorInputID(qdrant.NewIDNum(300)),\n                },\n            },\n            ),\n            Filter: &filter,\n        },\n    },\n},\n)\n```\n\nThe result of this API contains one array per recommendation requests.\n\n```json\n{\n  \"result\": [\n    [\n        { \"id\": 10, \"score\": 0.81 },\n        { \"id\": 14, \"score\": 0.75 },\n        { \"id\": 11, \"score\": 0.73 }\n    ],\n    [\n        { \"id\": 1, \"score\": 0.92 },\n        { \"id\": 3, \"score\": 0.89 },\n        { \"id\": 9, \"score\": 0.75 }\n    ]\n  ],\n  \"status\": \"ok\",\n  \"time\": 0.001\n}\n```\n\n## Discovery API\n\n*Available as of v1.7*\n\nREST API Schema definition available [here](https://api.qdrant.tech/api-reference/search/discover-points)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 40,
      "token_count": 297,
      "char_count": 978,
      "start_char": 36186,
      "end_char": 37166
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:41",
    "content": "I Schema definition available [here](https://api.qdrant.tech/api-reference/search/discover-points)\n\nIn this API, Qdrant introduces the concept of `context`, which is used for splitting the space. Context is a set of positive-negative pairs, and each pair divides the space into positive and negative zones. In that mode, the search operation prefers points based on how many positive zones they belong to (or how much they avoid negative zones).\n\nThe interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs.\n\nDiscovery API lets you do two new types of search:\n\n- **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context.\n- **Context search**: Using only the context pairs, get the points that live in the best zone, where loss is minimized",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 41,
      "token_count": 199,
      "char_count": 975,
      "start_char": 37066,
      "end_char": 38043
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:42",
    "content": ": Using only the context pairs, get the points that live in the best zone, where loss is minimized\n\nThe way positive and negative examples should be arranged in the context pairs is completely up to you. So you can have the flexibility of trying out different permutation techniques based on your model and data.\n\nThe speed of search is linearly related to the amount of examples you provide in the query.\n\n### Discovery search\n\nThis type of search works specially well for combining multimodal, vector-constrained searches. Qdrant already has extensive support for filters, which constrain the search based on its payload, but using discovery search, you can also constrain the vector space in which the search is performed.\n\nThe formula for the discovery score can be expressed as:\n\n$$ \\text{rank}(v^+, v^-) = \\begin{cases} 1, &\\quad s(v^+) \\geq s(v^-) \\\\\\ -1, &\\quad s(v^+) < s(v^-) \\end{cases} $$ where $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vec",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 42,
      "token_count": 238,
      "char_count": 1024,
      "start_char": 37943,
      "end_char": 38967
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:43",
    "content": "a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as: $$ \\text{discovery score} = \\text{sigmoid}(s(v\\_t))+ \\sum \\text{rank}(v\\_i^+, v\\_i^-), $$ where $s(v)$ is the similarity function, $v\\_t$ is the target vector, and again $v\\_i^+$ and $v\\_i^-$ are the positive and negative examples, respectively. The sigmoid function is used to normalize the score between 0 and 1 and the sum of ranks is used to penalize vectors that are closer to the negative examples than to the positive ones. In other words, the sum of individual ranks determines how many positive zones a point is in, while the closeness hierarchy comes second.\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"discover\": {\n      \"target\": [0.2, 0.1, 0.9, 0.7],\n      \"context\": [\n        {\n          \"positive\": 100,\n          \"negative\": 718\n        },\n        {\n          \"positive\": 200,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 43,
      "token_count": 276,
      "char_count": 1008,
      "start_char": 38867,
      "end_char": 39876
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:44",
    "content": "\"positive\": 100,\n          \"negative\": 718\n        },\n        {\n          \"positive\": 200,\n          \"negative\": 300\n        }\n      ]\n    }\n  },\n  \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\ndiscover_queries = [\n    models.QueryRequest(\n        query=models.DiscoverQuery(\n            discover=models.DiscoverInput(\n                target=[0.2, 0.1, 0.9, 0.7],\n                context=[\n                    models.ContextPair(\n                        positive=100,\n                        negative=718,\n                    ),\n                    models.ContextPair(\n                        positive=200,\n                        negative=300,\n                    ),\n                ],\n            )\n        ),\n        limit=10,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=discover_queries\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 44,
      "token_count": 236,
      "char_count": 992,
      "start_char": 39776,
      "end_char": 40779
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:45",
    "content": "uests=discover_queries\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        discover: {\n            target: [0.2, 0.1, 0.9, 0.7],\n            context: [\n                {\n                    positive: 100,\n                    negative: 718,\n                },\n                {\n                    positive: 200,\n                    negative: 300,\n                },\n            ],\n        }\n    },\n    limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{ContextInputBuilder, DiscoverInputBuilder, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\").query(\n            DiscoverInputBuilder::new(\n                vec![0.2, 0.1, 0.9, 0.7],\n                ContextInputBuilder::default()\n                    .add_pair(100, 718)\n                    .add_pair(200, 300),\n            )\n            .build(),",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 45,
      "token_count": 272,
      "char_count": 1024,
      "start_char": 40679,
      "end_char": 41704
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:46",
    "content": ".add_pair(100, 718)\n                    .add_pair(200, 300),\n            )\n            .build(),\n        ),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.ContextInput;\nimport io.qdrant.client.grpc.Points.ContextInputPair;\nimport io.qdrant.client.grpc.Points.DiscoverInput;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.discover;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(discover(DiscoverInput.newBuilder()\n                .setTarget(vectorInput(0.2f, 0.1f, 0.9f, 0.7f))\n                .setContext(ContextInput.newBuilder()\n                        .addAllPairs(List.of(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 46,
      "token_count": 250,
      "char_count": 983,
      "start_char": 41604,
      "end_char": 42591
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:47",
    "content": ".setContext(ContextInput.newBuilder()\n                        .addAllPairs(List.of(\n                                ContextInputPair.newBuilder()\n                                        .setPositive(vectorInput(100))\n                                        .setNegative(vectorInput(718))\n                                        .build(),\n                                ContextInputPair.newBuilder()\n                                        .setPositive(vectorInput(200))\n                                        .setNegative(vectorInput(300))\n                                        .build()))\n                        .build())\n                .build()))\n        .setLimit(10)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n    collectionName: \"{collection_name}\",\n    query: new DiscoverInput {\n        Target = new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n        Context = new ContextInput {",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 47,
      "token_count": 196,
      "char_count": 1005,
      "start_char": 42491,
      "end_char": 43513
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:48",
    "content": "put {\n        Target = new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n        Context = new ContextInput {\n            Pairs = {\n                new ContextInputPair {\n                    Positive = 100,\n                    Negative = 718\n                },\n                new ContextInputPair {\n                    Positive = 200,\n                    Negative = 300\n                },\n            }   \n        },\n    },\n    limit: 10\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryDiscover(&qdrant.DiscoverInput{\n        Target: qdrant.NewVectorInput(0.2, 0.1, 0.9, 0.7),\n        Context: &qdrant.ContextInput{\n            Pairs: []*qdrant.ContextInputPair{\n                {\n                    Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(100)),",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 48,
      "token_count": 275,
      "char_count": 996,
      "start_char": 43413,
      "end_char": 44410
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:49",
    "content": "air{\n                {\n                    Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n                    Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n                },\n                {\n                    Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(200)),\n                    Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(300)),\n                },\n            },\n        },\n    }),\n})\n```\n\nNotes about discovery search:\n\n- When providing ids as examples, they will be excluded from the results.\n- Score is always in descending order (larger is better), regardless of the metric used.\n- Since the space is hard-constrained by the context, accuracy is normal to drop when using default settings. To mitigate this, increasing the `ef` search parameter to something above 64 will already be much better than the default 16, e.g: `\"params\": { \"ef\": 128 }`\n\n### Context search",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 49,
      "token_count": 213,
      "char_count": 909,
      "start_char": 44310,
      "end_char": 45221
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:50",
    "content": "ill already be much better than the default 16, e.g: `\"params\": { \"ef\": 128 }`\n\n### Context search\n\nConversely, in the absence of a target, a rigid integer-by-integer function doesn’t provide much guidance for the search when utilizing a proximity graph like HNSW. Instead, context search employs a function derived from the [triplet-loss](https://qdrant.tech/articles/triplet-loss/) concept, which is usually applied during model training. For context search, this function is adapted to steer the search towards areas with fewer negative examples.\n\nWe can directly associate the score function to a loss function, where 0.0 is the maximum score a point can have, which means it is only in positive areas. As soon as a point exists closer to a negative example, its loss will simply be the difference of the positive and negative similarities.\n\n$$ \\text{context score} = \\sum \\min(s(v^+\\_i) - s(v^-\\_i), 0.0) $$",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 50,
      "token_count": 219,
      "char_count": 912,
      "start_char": 45121,
      "end_char": 46035
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:51",
    "content": "ive and negative similarities.\n\n$$ \\text{context score} = \\sum \\min(s(v^+\\_i) - s(v^-\\_i), 0.0) $$\n\nWhere $v^+\\_i$ and $v^-\\_i$ are the positive and negative examples of each pair, and $s(v)$ is the similarity function.\n\nUsing this kind of search, you can expect the output to not necessarily be around a single point, but rather, to be any point that isn’t closer to a negative example, which creates a constrained diverse result. So, even when the API is not called [`recommend`](#recommendation-api.md), recommendation systems can also use this approach and adapt it for their specific use-cases.\n\nExample:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n  \"query\": {\n    \"context\": [\n      {\n        \"positive\": 100,\n        \"negative\": 718\n      },\n      {\n        \"positive\": 200,\n        \"negative\": 300\n      }\n    ]\n  },\n  \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\ndiscover_queries = [\n    models.QueryRequest(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 51,
      "token_count": 280,
      "char_count": 1018,
      "start_char": 45935,
      "end_char": 46954
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:52",
    "content": "client = QdrantClient(url=\"http://localhost:6333\")\n\ndiscover_queries = [\n    models.QueryRequest(\n        query=models.ContextQuery(\n            context=[\n                models.ContextPair(\n                    positive=100,\n                    negative=718,\n                ),\n                models.ContextPair(\n                    positive=200,\n                    negative=300,\n                ),\n            ],\n        ),\n        limit=10,\n    ),\n]\n\nclient.query_batch_points(\n    collection_name=\"{collection_name}\", requests=discover_queries\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        context: [\n            {\n                positive: 100,\n                negative: 718,\n            },\n            {\n                positive: 200,\n                negative: 300,\n            },\n        ]\n    },\n    limit: 10,\n});\n```\n\n```rust",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 52,
      "token_count": 224,
      "char_count": 993,
      "start_char": 46854,
      "end_char": 47850
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:53",
    "content": "200,\n                negative: 300,\n            },\n        ]\n    },\n    limit: 10,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{ContextInputBuilder, QueryPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\").query(\n            ContextInputBuilder::default()\n                .add_pair(100, 718)\n                .add_pair(200, 300)\n                .build(),\n        ),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.ContextInput;\nimport io.qdrant.client.grpc.Points.ContextInputPair;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.VectorInputFactory.vectorInput;\nimport static io.qdrant.client.QueryFactory.context;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 53,
      "token_count": 273,
      "char_count": 1017,
      "start_char": 47750,
      "end_char": 48767
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:54",
    "content": "ient =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(context(ContextInput.newBuilder()\n                .addAllPairs(List.of(\n                        ContextInputPair.newBuilder()\n                                .setPositive(vectorInput(100))\n                                .setNegative(vectorInput(718))\n                                .build(),\n                        ContextInputPair.newBuilder()\n                                .setPositive(vectorInput(200))\n                                .setNegative(vectorInput(300))\n                                .build()))\n                .build()))\n        .setLimit(10)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: new ContextInput {\n    Pairs = {",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 54,
      "token_count": 203,
      "char_count": 1012,
      "start_char": 48667,
      "end_char": 49680
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:55",
    "content": "client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: new ContextInput {\n    Pairs = {\n      new ContextInputPair {\n        Positive = 100,\n          Negative = 718\n      },\n      new ContextInputPair {\n        Positive = 200,\n          Negative = 300\n      },\n    }\n  },\n  limit: 10\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n    CollectionName: \"{collection_name}\",\n    Query: qdrant.NewQueryContext(&qdrant.ContextInput{\n        Pairs: []*qdrant.ContextInputPair{\n            {\n                Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(100)),\n                Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(718)),\n            },\n            {\n                Positive: qdrant.NewVectorInputID(qdrant.NewIDNum(200)),\n                Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(300)),\n            },",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 55,
      "token_count": 280,
      "char_count": 1015,
      "start_char": 49580,
      "end_char": 50596
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:56",
    "content": "DNum(200)),\n                Negative: qdrant.NewVectorInputID(qdrant.NewIDNum(300)),\n            },\n        },\n    }),\n})\n```\n\nNotes about context search:\n\n- When providing ids as examples, they will be excluded from the results.\n- Score is always in descending order (larger is better), regardless of the metric used.\n- Best possible score is `0.0`, and it is normal that many points get this score.\n\n## Distance Matrix\n\n*Available as of v1.12.0*\n\nThe distance matrix API allows to calculate the distance between sampled pairs of vectors and to return the result as a sparse matrix.\n\nSuch API enables new data exploration use cases such as clustering similar vectors, visualization of connections or dimension reduction.\n\nThe API input request consists of the following parameters:\n\n- `sample`: the number of vectors to sample\n- `limit`: the number of scores to return per sample\n- `filter`: the filter to apply to constraint the samples\n\nLet’s have a look at a basic example with `sample=100`, `limit=10`:",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 56,
      "token_count": 229,
      "char_count": 1007,
      "start_char": 50496,
      "end_char": 51505
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:57",
    "content": "ply to constraint the samples\n\nLet’s have a look at a basic example with `sample=100`, `limit=10`:\n\nThe engine starts by selecting `100` random points from the collection, then for each of the selected points, it will compute the top `10` closest points **within** the samples.\n\nThis will results in a total of 1000 scores represented as a sparse matrix for efficient processing.\n\nThe distance matrix API offers two output formats to ease the integration with different tools.\n\n### Pairwise format\n\nReturns the distance matrix as a list of pairs of point `ids` with their respective score.\n\n```http\nPOST /collections/{collection_name}/points/search/matrix/pairs\n{\n    \"sample\": 10,\n    \"limit\": 2,\n    \"filter\": {\n        \"must\": {\n            \"key\": \"color\",\n            \"match\": { \"value\": \"red\" }\n        }\n    }  \n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.search_matrix_pairs(\n    collection_name=\"{collection_name}\",\n    sample=10,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 57,
      "token_count": 254,
      "char_count": 1018,
      "start_char": 51405,
      "end_char": 52424
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:58",
    "content": "calhost:6333\")\n\nclient.search_matrix_pairs(\n    collection_name=\"{collection_name}\",\n    sample=10,\n    limit=2,\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"color\", match=models.MatchValue(value=\"red\")\n            ),\n        ]\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.searchMatrixPairs(\"{collection_name}\", {\n    filter: {\n        must: [\n            {\n                key: \"color\",\n                match: {\n                    value: \"red\",\n                },\n            },\n        ],\n    },\n    sample: 10,\n    limit: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, SearchMatrixPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .search_matrix_pairs(\n        SearchMatrixPointsBuilder::new(\"collection_name\")\n           .filter(Filter::must(vec![Condition::matches(\n               \"color\",\n               \"red\".",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 58,
      "token_count": 238,
      "char_count": 1015,
      "start_char": 52324,
      "end_char": 53339
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:59",
    "content": ".filter(Filter::must(vec![Condition::matches(\n               \"color\",\n               \"red\".to_string(),\n           )]))\n           .sample(10)\n           .limit(2),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.SearchMatrixPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .searchMatrixPairsAsync(\n        Points.SearchMatrixPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n            .setSample(10)\n            .setLimit(2)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 59,
      "token_count": 238,
      "char_count": 965,
      "start_char": 53239,
      "end_char": 54215
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:60",
    "content": "`csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchMatrixPairsAsync(\n    collectionName: \"{collection_name}\",\n    filter: MatchKeyword(\"color\", \"red\"),\n    sample: 10,\n    limit: 2\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nsample := uint64(10)\nlimit := uint64(2)\nres, err := client.SearchMatrixPairs(ctx, &qdrant.SearchMatrixPoints{\n    CollectionName: \"{collection_name}\",\n    Sample:         &sample,\n    Limit:          &limit,\n    Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"color\", \"red\"),\n        },\n    },\n})\n```\n\nReturns\n\n```json\n{\n    \"result\": {\n        \"pairs\": [\n            {\"a\": 1, \"b\": 3, \"score\": 1.4063001},\n            {\"a\": 1, \"b\": 4, \"score\": 1.2531},\n            {\"a\": 2, \"b\": 1, \"score\": 1.1550001},",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 60,
      "token_count": 330,
      "char_count": 1015,
      "start_char": 54115,
      "end_char": 55131
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:61",
    "content": "},\n            {\"a\": 1, \"b\": 4, \"score\": 1.2531},\n            {\"a\": 2, \"b\": 1, \"score\": 1.1550001},\n            {\"a\": 2, \"b\": 8, \"score\": 1.1359},\n            {\"a\": 3, \"b\": 1, \"score\": 1.4063001},\n            {\"a\": 3, \"b\": 4, \"score\": 1.2218001},\n            {\"a\": 4, \"b\": 1, \"score\": 1.2531},\n            {\"a\": 4, \"b\": 3, \"score\": 1.2218001},\n            {\"a\": 5, \"b\": 3, \"score\": 0.70239997},\n            {\"a\": 5, \"b\": 1, \"score\": 0.6146},\n            {\"a\": 6, \"b\": 3, \"score\": 0.6353},\n            {\"a\": 6, \"b\": 4, \"score\": 0.5093},\n            {\"a\": 7, \"b\": 3, \"score\": 1.0990001},\n            {\"a\": 7, \"b\": 1, \"score\": 1.0349001},\n            {\"a\": 8, \"b\": 2, \"score\": 1.1359},\n            {\"a\": 8, \"b\": 3, \"score\": 1.0553}\n        ]\n    }\n}\n```\n\n### Offset format\n\nReturns the distance matrix as a four arrays:\n\n- `offsets_row` and `offsets_col`, represent the positions of non-zero distance values in the matrix.\n- `scores` contains the distance values.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 61,
      "token_count": 436,
      "char_count": 960,
      "start_char": 55031,
      "end_char": 55992
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:62",
    "content": "t the positions of non-zero distance values in the matrix.\n- `scores` contains the distance values.\n- `ids` contains the point ids corresponding to the distance values.\n\n```http\nPOST /collections/{collection_name}/points/search/matrix/offsets\n{\n    \"sample\": 10,\n    \"limit\": 2,\n    \"filter\": {\n        \"must\": {\n            \"key\": \"color\",\n            \"match\": { \"value\": \"red\" }\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.search_matrix_offsets(\n    collection_name=\"{collection_name}\",\n    sample=10,\n    limit=2,\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"color\", match=models.MatchValue(value=\"red\")\n            ),\n        ]\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.searchMatrixOffsets(\"{collection_name}\", {\n    filter: {\n        must: [",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 62,
      "token_count": 255,
      "char_count": 1018,
      "start_char": 55892,
      "end_char": 56911
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:63",
    "content": "t\", port: 6333 });\n\nclient.searchMatrixOffsets(\"{collection_name}\", {\n    filter: {\n        must: [\n            {\n                key: \"color\",\n                match: {\n                    value: \"red\",\n                },\n            },\n        ],\n    },\n    sample: 10,\n    limit: 2,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{Condition, Filter, SearchMatrixPointsBuilder};\nuse qdrant_client::Qdrant;\n\nclient\n    .search_matrix_offsets(\n        SearchMatrixPointsBuilder::new(\"collection_name\")\n           .filter(Filter::must(vec![Condition::matches(\n               \"color\",\n               \"red\".to_string(),\n           )]))\n           .sample(10)\n           .limit(2),\n    )\n    .await?;\n```\n\n```java\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.SearchMatrixPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 63,
      "token_count": 247,
      "char_count": 1010,
      "start_char": 56811,
      "end_char": 57821
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:64",
    "content": "client.grpc.Points.SearchMatrixPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .searchMatrixOffsetsAsync(\n        SearchMatrixPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"color\", \"red\")).build())\n            .setSample(10)\n            .setLimit(2)\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchMatrixOffsetsAsync(\n    collectionName: \"{collection_name}\",\n    filter: MatchKeyword(\"color\", \"red\"),\n    sample: 10,\n    limit: 2\n);\n```\n\n```go\nimport (\n    \"context\"\n\n    \"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n    Host: \"localhost\",\n    Port: 6334,\n})\n\nsample := uint64(10)\nlimit := uint64(2)\nres, err := client.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 64,
      "token_count": 272,
      "char_count": 995,
      "start_char": 57721,
      "end_char": 58716
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:65",
    "content": "Host: \"localhost\",\n    Port: 6334,\n})\n\nsample := uint64(10)\nlimit := uint64(2)\nres, err := client.SearchMatrixOffsets(ctx, &qdrant.SearchMatrixPoints{\n    CollectionName: \"{collection_name}\",\n    Sample:         &sample,\n    Limit:          &limit,\n    Filter: &qdrant.Filter{\n        Must: []*qdrant.Condition{\n            qdrant.NewMatch(\"color\", \"red\"),\n        },\n    },\n})\n```\n\nReturns\n\n```json\n{\n    \"result\": {\n        \"offsets_row\": [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7],\n        \"offsets_col\": [2, 3, 0, 7, 0, 3, 0, 2, 2, 0, 2, 3, 2, 0, 1, 2],\n        \"scores\": [\n            1.4063001, 1.2531, 1.1550001, 1.1359, 1.4063001,\n            1.2218001, 1.2531, 1.2218001, 0.70239997, 0.6146, 0.6353,\n            0.5093, 1.0990001, 1.0349001, 1.1359, 1.0553\n            ],\n        \"ids\": [1, 2, 3, 4, 5, 6, 7, 8]\n    }\n}\n```\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 65,
      "token_count": 462,
      "char_count": 967,
      "start_char": 58616,
      "end_char": 59585
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:66",
    "content": "Yes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/explore.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Explore the data](#explore-the-data.md)\n\n  - [Recommendation API](#recommendation-api.md)\n\n    - [Average vector strategy](#average-vector-strategy.md)\n    - [Best score strategy](#best-score-strategy.md)\n    - [Sum scores strategy](#sum-scores-strategy.md)\n    - [Multiple vectors](#multiple-vectors.md)\n    - [Lookup vectors from another collection](#lookup-vectors-from-another-collection.md)\n\n  - [Batch recommendation API](#batch-recommendation-api.md)\n\n  - [Discovery API](#discovery-api.md)\n\n    - [Discovery search](#discovery-search.md)\n    - [Context search](#context-search.md)\n\n  - [Distance Matrix](#distance-matrix.md)\n\n    - [Pairwise format](#pairwise-format.md)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 66,
      "token_count": 260,
      "char_count": 996,
      "start_char": 59485,
      "end_char": 60484
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md:chunk:67",
    "content": "earch.md)\n\n  - [Distance Matrix](#distance-matrix.md)\n\n    - [Pairwise format](#pairwise-format.md)\n    - [Offset format](#offset-format.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/explore.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_explore\\_documentation_concepts_explore_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_explore_.md",
      "file_extension": ".md",
      "chunk_index": 67,
      "token_count": 170,
      "char_count": 611,
      "start_char": 60384,
      "end_char": 61408
    }
  }
]