[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:0",
    "content": "Upstage - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 279,
      "char_count": 999,
      "start_char": 0,
      "end_char": 999
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:1",
    "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 267,
      "char_count": 1000,
      "start_char": 899,
      "end_char": 1899
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:2",
    "content": "nfluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 264,
      "char_count": 1011,
      "start_char": 1799,
      "end_char": 2811
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:3",
    "content": "entation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 271,
      "char_count": 1012,
      "start_char": 2711,
      "end_char": 3723
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:4",
    "content": "/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 275,
      "char_count": 1007,
      "start_char": 3623,
      "end_char": 4630
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:5",
    "content": "[LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 269,
      "char_count": 1003,
      "start_char": 4530,
      "end_char": 5535
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:6",
    "content": "meworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 273,
      "char_count": 1015,
      "start_char": 5435,
      "end_char": 6450
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:7",
    "content": "ion/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 257,
      "char_count": 987,
      "start_char": 6350,
      "end_char": 7339
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:8",
    "content": "ering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 259,
      "char_count": 978,
      "start_char": 7239,
      "end_char": 8217
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:9",
    "content": "ion/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 231,
      "char_count": 997,
      "start_char": 8117,
      "end_char": 9114
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:10",
    "content": "cumentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 280,
      "char_count": 1022,
      "start_char": 9014,
      "end_char": 10038
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:11",
    "content": "ng Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 262,
      "char_count": 1025,
      "start_char": 9938,
      "end_char": 10963
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:12",
    "content": "ured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 270,
      "char_count": 995,
      "start_char": 10863,
      "end_char": 11858
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:13",
    "content": "[Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 269,
      "char_count": 990,
      "start_char": 11758,
      "end_char": 12748
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:14",
    "content": "peval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 284,
      "char_count": 1019,
      "start_char": 12648,
      "end_char": 13667
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:15",
    "content": "j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 270,
      "char_count": 1016,
      "start_char": 13567,
      "end_char": 14585
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:16",
    "content": "entation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 279,
      "char_count": 1018,
      "start_char": 14485,
      "end_char": 15503
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:17",
    "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 249,
      "char_count": 974,
      "start_char": 15403,
      "end_char": 16377
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:18",
    "content": "-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 254,
      "char_count": 1005,
      "start_char": 16277,
      "end_char": 17282
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:19",
    "content": "r-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Embeddings](https://qdrant.tech/documentation/embeddings/)\n-\n- Upstage\n\n# Upstage",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 237,
      "char_count": 990,
      "start_char": 17182,
      "end_char": 18174
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:20",
    "content": "mentation/)\n-\n- [Embeddings](https://qdrant.tech/documentation/embeddings/)\n-\n- Upstage\n\n# Upstage\n\nQdrant supports working with the Solar Embeddings API from [Upstage](https://upstage.ai/).\n\n[Solar Embeddings](https://developers.upstage.ai/docs/apis/embeddings) API features dual models for user queries and document embedding, within a unified vector space, designed for performant text processing.\n\nYou can generate an API key to authenticate the requests from the [Upstage Console](https://console.upstage.ai/api-keys).\n\n### Setting up the Qdrant client and Upstage session\n\n```python\nimport requests\nfrom qdrant_client import QdrantClient\n\nUPSTAGE_BASE_URL = \"https://api.upstage.ai/v1/solar/embeddings\"\n\nUPSTAGE_API_KEY = \"<YOUR_API_KEY>\"\n\nupstage_session = requests.Session()\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nheaders = {\n    \"Authorization\": f\"Bearer {UPSTAGE_API_KEY}\",\n    \"Accept\": \"application/json\",\n}\n\ntexts = [\n    \"Qdrant is the best vector search engine!\",",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 243,
      "char_count": 992,
      "start_char": 18074,
      "end_char": 19067
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:21",
    "content": "Y}\",\n    \"Accept\": \"application/json\",\n}\n\ntexts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\n```typescript\nimport { QdrantClient } from '@qdrant/js-client-rest';\n\nconst UPSTAGE_BASE_URL = \"https://api.upstage.ai/v1/solar/embeddings\"\nconst UPSTAGE_API_KEY = \"<YOUR_API_KEY>\"\n\nconst client = new QdrantClient({ url: 'http://localhost:6333' });\n\nconst headers = {\n    \"Authorization\": \"Bearer \" + UPSTAGE_API_KEY,\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n}\n\nconst texts = [\n    \"Qdrant is the best vector search engine!\",\n    \"Loved by Enterprises and everyone building for low latency, high performance, and scale.\",\n]\n```\n\nThe following example shows how to embed documents with the recommended `solar-embedding-1-large-passage` and `solar-embedding-1-large-query` models that generates sentence embeddings of size 4096.\n\n### Embedding documents\n\n```python\nbody = {",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 254,
      "char_count": 1006,
      "start_char": 18967,
      "end_char": 19974
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:22",
    "content": "odels that generates sentence embeddings of size 4096.\n\n### Embedding documents\n\n```python\nbody = {\n    \"input\": texts,\n    \"model\": \"solar-embedding-1-large-passage\",\n}\n\nresponse_body = upstage_session.post(\n    UPSTAGE_BASE_URL, headers=headers, json=body\n).json()\n```\n\n```typescript\nlet body = {\n    \"input\": texts,\n    \"model\": \"solar-embedding-1-large-passage\",\n}\n\nlet response = await fetch(UPSTAGE_BASE_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n});\n\nlet response_body = await response.json()\n```\n\n### Converting the model outputs to Qdrant points\n\n```python\nfrom qdrant_client.models import PointStruct\n\npoints = [\n    PointStruct(\n        id=idx,\n        vector=data[\"embedding\"],\n        payload={\"text\": text},\n    )\n    for idx, (data, text) in enumerate(zip(response_body[\"data\"], texts))\n]\n```\n\n```typescript\nlet points = response_body.data.map((data, i) => {\n    return {\n        id: i,\n        vector: data.embedding,\n        payload: {\n            text: texts[i]\n        }\n    }",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 262,
      "char_count": 1023,
      "start_char": 19874,
      "end_char": 20898
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:23",
    "content": "d: i,\n        vector: data.embedding,\n        payload: {\n            text: texts[i]\n        }\n    }\n})\n```\n\n### Creating a collection to insert the documents\n\n```python\nfrom qdrant_client.models import VectorParams, Distance\n\ncollection_name = \"example_collection\"\n\nclient.create_collection(\n    collection_name,\n    vectors_config=VectorParams(\n        size=4096,\n        distance=Distance.COSINE,\n    ),\n)\nclient.upsert(collection_name, points)\n```\n\n```typescript\nconst COLLECTION_NAME = \"example_collection\"\n\nawait client.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 4096,\n        distance: 'Cosine',\n    }\n});\n\nawait client.upsert(COLLECTION_NAME, {\n    wait: true,\n    points\n})\n```\n\n## Searching for documents with Qdrant\n\nOnce all the documents are added, you can search for the most relevant documents.\n\n```python\nbody = {\n    \"input\": \"What is the best to use for vector search scaling?\",\n    \"model\": \"solar-embedding-1-large-query\",\n}\n\nresponse_body = upstage_session.post(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 237,
      "char_count": 1004,
      "start_char": 20798,
      "end_char": 21803
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:24",
    "content": "h scaling?\",\n    \"model\": \"solar-embedding-1-large-query\",\n}\n\nresponse_body = upstage_session.post(\n    UPSTAGE_BASE_URL, headers=headers, json=body\n).json()\n\nclient.search(\n    collection_name=collection_name,\n    query_vector=response_body[\"data\"][0][\"embedding\"],\n)\n```\n\n```typescript\nbody = {\n    \"input\": \"What is the best to use for vector search scaling?\",\n    \"model\": \"solar-embedding-1-large-query\",\n}\n\nresponse = await fetch(UPSTAGE_BASE_URL, {\n    method: \"POST\",\n    body: JSON.stringify(body),\n    headers\n});\n\nresponse_body = await response.json()\n\nawait client.search(COLLECTION_NAME, {\n    vector: response_body.data[0].embedding,\n});\n```\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/embeddings/upstage.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Upstage](#upstage.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 263,
      "char_count": 1024,
      "start_char": 21703,
      "end_char": 22727
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:25",
    "content": "hub.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Upstage](#upstage.md)\n\n  - - [Setting up the Qdrant client and Upstage session](#setting-up-the-qdrant-client-and-upstage-session.md)\n    - [Embedding documents](#embedding-documents.md)\n    - [Converting the model outputs to Qdrant points](#converting-the-model-outputs-to-qdrant-points.md)\n    - [Creating a collection to insert the documents](#creating-a-collection-to-insert-the-documents.md)\n\n  - [Searching for documents with Qdrant](#searching-for-documents-with-qdrant.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/embeddings/upstage.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 273,
      "char_count": 1013,
      "start_char": 22627,
      "end_char": 23640
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md:chunk:26",
    "content": "conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_upstage\\_documentation_embeddings_upstage_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_upstage_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 33,
      "char_count": 122,
      "start_char": 23540,
      "end_char": 24564
    }
  }
]