[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:0",
    "content": "Twelve Labs - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 280,
      "char_count": 1003,
      "start_char": 0,
      "end_char": 1003
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:1",
    "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 267,
      "char_count": 1000,
      "start_char": 903,
      "end_char": 1903
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:2",
    "content": "nfluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 264,
      "char_count": 1011,
      "start_char": 1803,
      "end_char": 2815
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:3",
    "content": "entation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 271,
      "char_count": 1012,
      "start_char": 2715,
      "end_char": 3727
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:4",
    "content": "/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 275,
      "char_count": 1007,
      "start_char": 3627,
      "end_char": 4634
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:5",
    "content": "[LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 269,
      "char_count": 1003,
      "start_char": 4534,
      "end_char": 5539
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:6",
    "content": "meworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 273,
      "char_count": 1015,
      "start_char": 5439,
      "end_char": 6454
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:7",
    "content": "ion/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 257,
      "char_count": 987,
      "start_char": 6354,
      "end_char": 7343
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:8",
    "content": "ering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 259,
      "char_count": 978,
      "start_char": 7243,
      "end_char": 8221
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:9",
    "content": "ion/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 231,
      "char_count": 997,
      "start_char": 8121,
      "end_char": 9118
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:10",
    "content": "cumentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 280,
      "char_count": 1022,
      "start_char": 9018,
      "end_char": 10042
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:11",
    "content": "ng Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 262,
      "char_count": 1025,
      "start_char": 9942,
      "end_char": 10967
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:12",
    "content": "ured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 270,
      "char_count": 995,
      "start_char": 10867,
      "end_char": 11862
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:13",
    "content": "[Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 269,
      "char_count": 990,
      "start_char": 11762,
      "end_char": 12752
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:14",
    "content": "peval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 284,
      "char_count": 1019,
      "start_char": 12652,
      "end_char": 13671
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:15",
    "content": "j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 270,
      "char_count": 1016,
      "start_char": 13571,
      "end_char": 14589
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:16",
    "content": "entation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 279,
      "char_count": 1018,
      "start_char": 14489,
      "end_char": 15507
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:17",
    "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 249,
      "char_count": 974,
      "start_char": 15407,
      "end_char": 16381
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:18",
    "content": "-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 254,
      "char_count": 1005,
      "start_char": 16281,
      "end_char": 17286
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:19",
    "content": "r-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Embeddings](https://qdrant.tech/documentation/embeddings/)\n-\n- Twelve Labs\n\n# Twelve Labs",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 237,
      "char_count": 998,
      "start_char": 17186,
      "end_char": 18186
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:20",
    "content": "n/)\n-\n- [Embeddings](https://qdrant.tech/documentation/embeddings/)\n-\n- Twelve Labs\n\n# Twelve Labs\n\n[Twelve Labs](https://twelvelabs.io) Embed API provides powerful embeddings that represent videos, texts, images, and audio in a unified vector space. This space enables any-to-any searches across different types of content.\n\nBy natively processing all modalities, it captures interactions like visual expressions, speech, and context, enabling advanced applications such as sentiment analysis, anomaly detection, and recommendation systems with precision and efficiency.\n\nWe’ll look at how to work with Twelve Labs embeddings in Qdrant via the Python and Node SDKs.\n\n### Installing the SDKs\n\n```python\n$ pip install twelvelabs qdrant-client\n```\n\n```typescript\n$ npm install twelvelabs-js @qdrant/js-client-rest\n```\n\n### Setting up the clients\n\n```python\nfrom twelvelabs import TwelveLabs\nfrom qdrant_client import QdrantClient\n\n# Get your API keys from:\n# https://playground.twelvelabs.io/dashboard/api-key",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 231,
      "char_count": 1007,
      "start_char": 18086,
      "end_char": 19094
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:21",
    "content": "import QdrantClient\n\n# Get your API keys from:\n# https://playground.twelvelabs.io/dashboard/api-key\nTL_API_KEY = \"<YOUR_TWELVE_LABS_API_KEY>\"\n\ntwelvelabs_client = TwelveLabs(api_key=TL_API_KEY)\nqdrant_client = QdrantClient(url=\"http://localhost:6333/\")\n```\n\n```typescript\nimport { QdrantClient } from '@qdrant/js-client-rest';\nimport { TwelveLabs, EmbeddingsTask, SegmentEmbedding } from 'twelvelabs-js';\n\n// Get your API keys from:\n// https://playground.twelvelabs.io/dashboard/api-key\nconst TL_API_KEY = \"<YOUR_TWELVE_LABS_API_KEY>\"\n\nconst twelveLabsClient = new TwelveLabs({ apiKey: TL_API_KEY });\nconst qdrantClient = new QdrantClient({ url: 'http://localhost:6333' });\n```\n\nThe following example uses the `\"Marengo-retrieval-2.7\"` model to embed a video. It generates vector embeddings of 1024 dimensionality and works with cosine similarity.\n\nYou can use the same model to embed audio, text and images into a common vector space. Enabling cross-modality searches!\n\n### Embedding videos\n\n```python",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 277,
      "char_count": 1002,
      "start_char": 18994,
      "end_char": 19997
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:22",
    "content": "ages into a common vector space. Enabling cross-modality searches!\n\n### Embedding videos\n\n```python\ntask = twelvelabs_client.embed.task.create(\n    model_name=\"Marengo-retrieval-2.7\",\n    video_url=\"https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_2mb.mp4\"\n)\n\ntask.wait_for_done(sleep_interval=3)\n\ntask_result = twelvelabs_client.embed.task.retrieve(task.id)\n```\n\n```typescript\nconst task = await twelveLabsClient.embed.task.create(\"Marengo-retrieval-2.7\", {\n    url: \"https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_2mb.mp4\"\n})\n\nawait task.waitForDone(3)\n\nconst taskResult = await twelveLabsClient.embed.task.retrieve(task.id)\n```\n\n### Converting the model outputs to Qdrant points\n\n```python\nfrom qdrant_client.models import PointStruct\n\npoints = [\n    PointStruct(\n        id=idx,\n        vector=v.embeddings_float,\n        payload={\n            \"start_offset_sec\": v.start_offset_sec,\n            \"end_offset_sec\": v.end_offset_sec,\n            \"embedding_scope\": v.embedding_scope,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 277,
      "char_count": 1015,
      "start_char": 19897,
      "end_char": 20913
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:23",
    "content": ",\n            \"end_offset_sec\": v.end_offset_sec,\n            \"embedding_scope\": v.embedding_scope,\n        },\n    )\n    for idx, v in enumerate(task_result.video_embedding.segments)\n]\n```\n\n```typescript\nlet points = taskResult.videoEmbedding.segments.map((data, i) => {\n    return {\n        id: i,\n        vector: data.embeddingsFloat,\n        payload: {\n            startOffsetSec: data.startOffsetSec,\n            endOffsetSec: data.endOffsetSec,\n            embeddingScope: data.embeddingScope\n        }\n    }\n})\n```\n\n### Creating a collection to insert the vectors\n\n```python\nfrom qdrant_client.models import VectorParams, Distance\n\ncollection_name = \"twelve_labs_collection\"\n\nqdrant_client.create_collection(\n    collection_name,\n    vectors_config=VectorParams(\n        size=1024,\n        distance=Distance.COSINE,\n    ),\n)\nqdrant_client.upsert(collection_name, points)\n```\n\n```typescript\nconst COLLECTION_NAME = \"twelve_labs_collection\"\n\nawait qdrantClient.createCollection(COLLECTION_NAME, {\n    vectors: {",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 231,
      "char_count": 1015,
      "start_char": 20813,
      "end_char": 21829
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:24",
    "content": "E = \"twelve_labs_collection\"\n\nawait qdrantClient.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 1024,\n        distance: 'Cosine',\n    }\n});\n\nawait qdrantClient.upsert(COLLECTION_NAME, {\n    wait: true,\n    points\n})\n```\n\n## Perform a search\n\nOnce the vectors are added, you can run semantic searches across different modalities. Let’s try text.\n\n```python\ntext_segment = twelvelabs_client.embed.create(\n    model_name=\"Marengo-retrieval-2.7\",\n    text=\"<YOUR_QUERY_TEXT>\",\n).text_embedding.segments[0]\n\nqdrant_client.query_points(\n    collection_name=collection_name,\n    query=text_segment.embeddings_float,\n)\n```\n\n```typescript\nconst textSegment = (await twelveLabsClient.embed.create({\n    modelName: \"Marengo-retrieval-2.7\",\n    text: \"<YOUR_QUERY_TEXT>\"\n})).textEmbedding.segments[0]\n\nawait qdrantClient.query(COLLECTION_NAME, {\n    query: textSegment.embeddingsFloat,\n});\n```\n\nLet’s try audio:\n\n```python\naudio_segment = twelvelabs_client.embed.create(\n    model_name=\"Marengo-retrieval-2.7\",",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 269,
      "char_count": 1016,
      "start_char": 21729,
      "end_char": 22746
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:25",
    "content": "```python\naudio_segment = twelvelabs_client.embed.create(\n    model_name=\"Marengo-retrieval-2.7\",\n    audio_url=\"https://codeskulptor-demos.commondatastorage.googleapis.com/descent/background%20music.mp3\",\n).audio_embedding.segments[0]\n\nqdrant_client.query_points(\n    collection_name=collection_name,\n    query=audio_segment.embeddings_float,\n)\n```\n\n```typescript\nconst audioSegment = (await twelveLabsClient.embed.create({\n    modelName: \"Marengo-retrieval-2.7\",\n    audioUrl: \"https://codeskulptor-demos.commondatastorage.googleapis.com/descent/background%20music.mp3\"\n})).audioEmbedding.segments[0]\n\nawait qdrantClient.query(COLLECTION_NAME, {\n    query: audioSegment.embeddingsFloat,\n});\n```\n\nSimilarly, querying by image:\n\n```python\nimage_segment = twelvelabs_client.embed.create(\n    model_name=\"Marengo-retrieval-2.7\",\n    image_url=\"https://gratisography.com/wp-content/uploads/2024/01/gratisography-cyber-kitty-1170x780.jpg\",\n).image_embedding.segments[0]\n\nqdrant_client.query_points(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 272,
      "char_count": 994,
      "start_char": 22646,
      "end_char": 23643
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:26",
    "content": "gratisography-cyber-kitty-1170x780.jpg\",\n).image_embedding.segments[0]\n\nqdrant_client.query_points(\n    collection_name=collection_name,\n    query=image_segment.embeddings_float,\n)\n```\n\n```typescript\nconst imageSegment = (await twelveLabsClient.embed.create({\n    modelName: \"Marengo-retrieval-2.7\",\n    imageUrl: \"https://gratisography.com/wp-content/uploads/2024/01/gratisography-cyber-kitty-1170x780.jpg\"\n})).imageEmbedding.segments[0]\n\nawait qdrantClient.query(COLLECTION_NAME, {\n    query: imageSegment.embeddingsFloat,\n});\n```\n\n## Further Reading\n\n- [Twelve Labs Documentation](https://docs.twelvelabs.io/)\n- [Twelve Labs Examples](https://docs.twelvelabs.io/docs/sample-applications)\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 281,
      "char_count": 1024,
      "start_char": 23543,
      "end_char": 24568
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:27",
    "content": "ge on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Twelve Labs](#twelve-labs.md)\n\n  - - [Installing the SDKs](#installing-the-sdks.md)\n    - [Setting up the clients](#setting-up-the-clients.md)\n    - [Embedding videos](#embedding-videos.md)\n    - [Converting the model outputs to Qdrant points](#converting-the-model-outputs-to-qdrant-points.md)\n    - [Creating a collection to insert the vectors](#creating-a-collection-to-insert-the-vectors.md)\n\n  - [Perform a search](#perform-a-search.md)\n\n  - [Further Reading](#further-reading.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/embeddings/twelvelabs.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 279,
      "char_count": 1003,
      "start_char": 24468,
      "end_char": 25471
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md:chunk:28",
    "content": "5 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_twelvelabs\\_documentation_embeddings_twelvelabs_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_twelvelabs_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 51,
      "char_count": 177,
      "start_char": 25371,
      "end_char": 26395
    }
  }
]