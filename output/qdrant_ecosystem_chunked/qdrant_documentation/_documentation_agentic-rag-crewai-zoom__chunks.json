[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:0",
    "content": "Simple Agentic RAG System - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 283,
      "char_count": 1017,
      "start_char": 0,
      "end_char": 1017
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:1",
    "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 267,
      "char_count": 1000,
      "start_char": 917,
      "end_char": 1917
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:2",
    "content": "nfluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 264,
      "char_count": 1011,
      "start_char": 1817,
      "end_char": 2829
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:3",
    "content": "entation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 271,
      "char_count": 1012,
      "start_char": 2729,
      "end_char": 3741
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:4",
    "content": "/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 275,
      "char_count": 1007,
      "start_char": 3641,
      "end_char": 4648
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:5",
    "content": "[LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 269,
      "char_count": 1003,
      "start_char": 4548,
      "end_char": 5553
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:6",
    "content": "meworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 273,
      "char_count": 1015,
      "start_char": 5453,
      "end_char": 6468
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:7",
    "content": "ion/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 257,
      "char_count": 987,
      "start_char": 6368,
      "end_char": 7357
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:8",
    "content": "ering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 259,
      "char_count": 978,
      "start_char": 7257,
      "end_char": 8235
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:9",
    "content": "ion/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 231,
      "char_count": 997,
      "start_char": 8135,
      "end_char": 9132
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:10",
    "content": "cumentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 280,
      "char_count": 1022,
      "start_char": 9032,
      "end_char": 10056
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:11",
    "content": "ng Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 262,
      "char_count": 1025,
      "start_char": 9956,
      "end_char": 10981
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:12",
    "content": "ured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 270,
      "char_count": 995,
      "start_char": 10881,
      "end_char": 11876
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:13",
    "content": "[Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 269,
      "char_count": 990,
      "start_char": 11776,
      "end_char": 12766
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:14",
    "content": "peval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 284,
      "char_count": 1019,
      "start_char": 12666,
      "end_char": 13685
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:15",
    "content": "j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 270,
      "char_count": 1016,
      "start_char": 13585,
      "end_char": 14603
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:16",
    "content": "entation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 279,
      "char_count": 1018,
      "start_char": 14503,
      "end_char": 15521
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:17",
    "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 249,
      "char_count": 974,
      "start_char": 15421,
      "end_char": 16395
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:18",
    "content": "-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 254,
      "char_count": 1005,
      "start_char": 16295,
      "end_char": 17300
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:19",
    "content": "r-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- Simple Agentic RAG System\n\n# Agentic RAG With CrewAI & Qdrant Vector Database",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 236,
      "char_count": 985,
      "start_char": 17200,
      "end_char": 18187
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:20",
    "content": "/documentation/)\n-\n- Simple Agentic RAG System\n\n# Agentic RAG With CrewAI & Qdrant Vector Database\n\n| Time: 45 min | Level: Beginner | Output: [GitHub](https://github.com/qdrant/examples/tree/master/agentic_rag_zoom_crewai) |   |\n| ------------ | --------------- | ---------------------------------------------------------------------------------------- | - |\n\nBy combining the power of Qdrant for vector search and CrewAI for orchestrating modular agents, you can build systems that don’t just answer questions but analyze, interpret, and act.\n\nTraditional RAG systems focus on fetching data and generating responses, but they lack the ability to reason deeply or handle multi-step processes.\n\nIn this tutorial, we’ll walk you through building an Agentic RAG system step by step. By the end, you’ll have a working framework for storing data in a Qdrant Vector Database and extracting insights using CrewAI agents in conjunction with Vector Search over your data.\n\nWe already built this app for you.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 204,
      "char_count": 999,
      "start_char": 18087,
      "end_char": 19086
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:21",
    "content": "CrewAI agents in conjunction with Vector Search over your data.\n\nWe already built this app for you. [Clone this repository](https://github.com/qdrant/examples/tree/master/agentic_rag_zoom_crewai) and follow along with the tutorial.\n\n## What You’ll Build\n\nIn this hands-on tutorial, we’ll create a system that:\n\n1. Uses Qdrant to store and retrieve meeting transcripts as vector embeddings\n2. Leverages CrewAI agents to analyze and summarize meeting data\n3. Presents insights in a simple Streamlit interface for easy interaction\n\nThis project demonstrates how to build a Vector Search powered Agentic workflow to extract insights from meeting recordings. By combining Qdrant’s vector search capabilities with CrewAI agents, users can search through and analyze their own meeting content.\n\nThe application first converts the meeting transcript into vector embeddings and stores them in a Qdrant vector database. It then uses CrewAI agents to query the vector database and extract insights from the meeting content.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 199,
      "char_count": 1012,
      "start_char": 18986,
      "end_char": 19999
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:22",
    "content": "then uses CrewAI agents to query the vector database and extract insights from the meeting content. Finally, it uses Anthropic Claude to generate natural language responses to user queries based on the extracted insights from the vector database.\n\n### How Does It Work?\n\nWhen you interact with the system, here’s what happens behind the scenes:\n\nFirst the user submits a query to the system. In this example, we want to find out the average length of Marketing meetings. Since one of the data points from the meetings is the duration of the meeting, the agent can calculate the average duration of the meetings by averaging the duration of all meetings with the keyword “Marketing” in the topic or content.\n\nNext, the agent used the `search_meetings` tool to search the Qdrant vector database for the most semantically similar meeting points. We asked about Marketing meetings, so the agent searched the database with the search meeting tool for all meetings with the keyword “Marketing” in the topic or content.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 197,
      "char_count": 1012,
      "start_char": 19899,
      "end_char": 20914
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:23",
    "content": "ith the search meeting tool for all meetings with the keyword “Marketing” in the topic or content.\n\nNext, the agent used the `calculator` tool to find the average duration of the meetings.\n\nFinally, the agent used the `Information Synthesizer` tool to synthesize the analysis and present it in a natural language format.\n\nThe user sees the final output in a chat-like interface.\n\nThe user can then continue to interact with the system by asking more questions.\n\n### Architecture\n\nThe system is built on three main components:\n\n- **Qdrant Vector Database**: Stores meeting transcripts and summaries as vector embeddings, enabling semantic search\n- **CrewAI Framework**: Coordinates AI agents that handle different aspects of meeting analysis\n- **Anthropic Claude**: Provides natural language understanding and response generation\n\n1. **Data Processing Pipeline**\n\n   - Processes meeting transcripts and metadata\n   - Creates embeddings with SentenceTransformer\n   - Manages Qdrant collection and data upload\n\n2.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 195,
      "char_count": 1010,
      "start_char": 20814,
      "end_char": 21824
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:24",
    "content": "- Creates embeddings with SentenceTransformer\n   - Manages Qdrant collection and data upload\n\n2. **AI Agent System**\n\n   - Implements CrewAI agent logic\n   - Handles vector search integration\n   - Processes queries with Claude\n\n3. **User Interface**\n\n   - Provides chat-like web interface\n   - Shows real-time processing feedback\n   - Maintains conversation history\n\n---\n\n## Getting Started\n\n1. **Get API Credentials for Qdrant**:\n\n   - Sign up for an account at [Qdrant Cloud](https://cloud.qdrant.io/signup).\n   - Create a new cluster and copy the **Cluster URL** (format: <https://xxx.gcp.cloud.qdrant.io>).\n   - Go to **Data Access Control** and generate an **API key**.\n\n2. **Get API Credentials for AI Services**:\n\n   - Get an API key from [Anthropic](https://www.anthropic.com/)\n   - Get an API key from [OpenAI](https://platform.openai.com/)\n\n---\n\n## Setup\n\n1. **Clone the Repository**:\n\n```bash\ngit clone https://github.com/qdrant/examples.git\ncd agentic_rag_zoom_crewai\n```\n\n2.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 255,
      "char_count": 987,
      "start_char": 21724,
      "end_char": 22715
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:25",
    "content": "tory**:\n\n```bash\ngit clone https://github.com/qdrant/examples.git\ncd agentic_rag_zoom_crewai\n```\n\n2. **Create and Activate a Python Virtual Environment with Python 3.10 for compatibility**:\n\n```bash\npython3.10 -m venv venv\nsource venv/bin/activate  # Windows: venv\\Scripts\\activate\n```\n\n3. **Install Dependencies**:\n\n```bash\npip install -r requirements.txt\n```\n\n4. **Configure Environment Variables**: Create a `.env.local` file with:\n\n```bash\nopenai_api_key=your_openai_key_here\nanthropic_api_key=your_anthropic_key_here\nqdrant_url=your_qdrant_url_here\nqdrant_api_key=your_qdrant_api_key_here\n```\n\n---\n\n## Usage\n\n### 1. Process Meeting Data\n\nThe [`data_loader.py`](https://github.com/qdrant/examples/blob/master/agentic_rag_zoom_crewai/vector/data_loader.py) script processes meeting data and stores it in Qdrant:\n\n```bash\npython vector/data_loader.py\n```\n\nAfter this script has run, you should see a new collection in your Qdrant Cloud account called `zoom_recordings`.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 264,
      "char_count": 971,
      "start_char": 22615,
      "end_char": 23586
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:26",
    "content": "ript has run, you should see a new collection in your Qdrant Cloud account called `zoom_recordings`. This collection contains the vector embeddings of the meeting transcripts. The points in the collection contain the original meeting data, including the topic, content, and summary.\n\n### 2. Launch the Interface\n\nThe [`streamlit_app.py`](https://github.com/qdrant/examples/blob/master/agentic_rag_zoom_crewai/vector/streamlit_app.py) is located in the `vector` folder. To launch it, run:\n\n```bash\nstreamlit run vector/streamlit_app.py\n```\n\nWhen you run this script, you will be able to interact with the system through a chat-like interface. Ask questions about the meeting content, and the system will use the AI agents to find the most relevant information and present it in a natural language format.\n\n### The Data Pipeline\n\nAt the heart of our system is the data processing pipeline:\n\n```python\nclass MeetingData:\n    def _initialize(self):\n        self.data_dir = Path(__file__).parent.parent / 'data'\n        self.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 222,
      "char_count": 1020,
      "start_char": 23486,
      "end_char": 24506
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:27",
    "content": "def _initialize(self):\n        self.data_dir = Path(__file__).parent.parent / 'data'\n        self.meetings = self._load_meetings()\n        \n        self.qdrant_client = QdrantClient(\n            url=os.getenv('qdrant_url'),\n            api_key=os.getenv('qdrant_api_key')\n        )\n        self.embedding_model = SentenceTransformer('all-MiniLM-L6-v2')\n```\n\nThe singleton pattern in data\\_loader.py is implemented through a MeetingData class that uses Python’s **new** and **init** methods. The class maintains a private \\_instance variable to track if an instance exists, and a \\_initialized flag to ensure the initialization code only runs once. When creating a new instance with MeetingData(), **new** first checks if \\_instance exists - if it doesn’t, it creates one and sets the initialization flag to False. The **init** method then checks this flag, and if it’s False, runs the initialization code and sets the flag to True.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 212,
      "char_count": 931,
      "start_char": 24406,
      "end_char": 25339
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:28",
    "content": "od then checks this flag, and if it’s False, runs the initialization code and sets the flag to True. This ensures that all subsequent calls to MeetingData() return the same instance with the same initialized resources.\n\nWhen processing meetings, we need to consider both the content and context. Each meeting gets converted into a rich text representation before being transformed into a vector:\n\n```python\ntext_to_embed = f\"\"\"\n    Topic: {meeting.get('topic', '')}\n    Content: {meeting.get('vtt_content', '')}\n    Summary: {json.dumps(meeting.get('summary', {}))}\n\"\"\"\n```\n\nThis structured format ensures our vector embeddings capture the full context of each meeting. But processing meetings one at a time would be inefficient. Instead, we batch process our data:\n\n```python\nbatch_size = 100\nfor i in range(0, len(points), batch_size):\n    batch = points[i:i + batch_size]\n    self.qdrant_client.upsert(\n        collection_name='zoom_recordings',\n        points=batch\n    )\n```\n\n### Building the AI Agent System",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 223,
      "char_count": 1013,
      "start_char": 25239,
      "end_char": 26254
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:29",
    "content": "ollection_name='zoom_recordings',\n        points=batch\n    )\n```\n\n### Building the AI Agent System\n\nOur AI system uses a tool-based approach. Let’s start with the simplest tool - a calculator for meeting statistics:\n\n```python\nclass CalculatorTool(BaseTool):\n    name: str = \"calculator\"\n    description: str = \"Perform basic mathematical calculations\"\n    \n    def _run(self, a: int, b: int) -> dict:\n        return {\n            \"addition\": a + b,\n            \"multiplication\": a * b\n        }\n```\n\nBut the real power comes from our vector search integration. This tool converts natural language queries into vector representations and searches our meeting database:\n\n```python\nclass SearchMeetingsTool(BaseTool):\n    def _run(self, query: str) -> List[Dict]:\n        response = openai_client.embeddings.create(\n            model=\"text-embedding-ada-002\",\n            input=query\n        )\n        query_vector = response.data[0].embedding\n        \n        return self.qdrant_client.search(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 217,
      "char_count": 992,
      "start_char": 26154,
      "end_char": 27147
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:30",
    "content": "query_vector = response.data[0].embedding\n        \n        return self.qdrant_client.search(\n            collection_name='zoom_recordings',\n            query_vector=query_vector,\n            limit=10\n        )\n```\n\nThe search results then feed into our analysis tool, which uses Claude to provide deeper insights:\n\n```python\nclass MeetingAnalysisTool(BaseTool):\n    def _run(self, meeting_data: dict) -> Dict:\n        meetings_text = self._format_meetings(meeting_data)\n        \n        message = client.messages.create(\n            model=\"claude-3-sonnet-20240229\",\n            messages=[{\n                \"role\": \"user\", \n                \"content\": f\"Analyze these meetings:\\n\\n{meetings_text}\"\n            }]\n        )\n```\n\n### Orchestrating the Workflow\n\nThe magic happens when we bring these tools together under our agent framework. We create two specialized agents:\n\n```python\nresearcher = Agent(\n    role='Research Assistant',\n    goal='Find and analyze relevant information',",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "token_count": 214,
      "char_count": 984,
      "start_char": 27047,
      "end_char": 28039
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:31",
    "content": "esearcher = Agent(\n    role='Research Assistant',\n    goal='Find and analyze relevant information',\n    tools=[calculator, searcher, analyzer]\n)\n\nsynthesizer = Agent(\n    role='Information Synthesizer',\n    goal='Create comprehensive and clear responses'\n)\n```\n\nThese agents work together in a coordinated workflow. The researcher gathers and analyzes information, while the synthesizer creates clear, actionable responses. This separation of concerns allows each agent to focus on its strengths.\n\n### Building the User Interface\n\nThe Streamlit interface provides a clean, chat-like experience for interacting with our AI system. Let’s start with the basic setup:\n\n```python\nst.set_page_config(\n    page_title=\"Meeting Assistant\",\n    page_icon=\"🤖\",\n    layout=\"wide\"\n)\n```\n\nTo make the interface more engaging, we add custom styling that makes the output easier to read:\n\n```python\nst.markdown(\"\"\"\n    <style>\n    .stApp {\n        max-width: 1200px;\n        margin: 0 auto;\n    }\n    .output-container {",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "token_count": 217,
      "char_count": 1004,
      "start_char": 27939,
      "end_char": 28944
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:32",
    "content": "tyle>\n    .stApp {\n        max-width: 1200px;\n        margin: 0 auto;\n    }\n    .output-container {\n        background-color: #f0f2f6;\n        padding: 20px;\n        border-radius: 10px;\n        margin: 10px 0;\n    }\n    </style>\n\"\"\", unsafe_allow_html=True)\n```\n\nOne of the key features is real-time feedback during processing. We achieve this with a custom output handler:\n\n```python\nclass ConsoleOutput:\n    def __init__(self, placeholder):\n        self.placeholder = placeholder\n        self.buffer = []\n        self.update_interval = 0.5  # seconds\n        self.last_update = time.time()\n\n    def write(self, text):\n        self.buffer.append(text)\n        if time.time() - self.last_update > self.update_interval:\n            self._update_display()\n```\n\nThis handler buffers the output and updates the display periodically, creating a smooth user experience. When a user sends a query, we process it with visual feedback:\n\n```python\nwith st.chat_message(\"assistant\"):\n    message_placeholder = st.empty()",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "token_count": 239,
      "char_count": 1010,
      "start_char": 28844,
      "end_char": 29855
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:33",
    "content": "visual feedback:\n\n```python\nwith st.chat_message(\"assistant\"):\n    message_placeholder = st.empty()\n    progress_bar = st.progress(0)\n    console_placeholder = st.empty()\n    \n    try:\n        console_output = ConsoleOutput(console_placeholder)\n        with contextlib.redirect_stdout(console_output):\n            progress_bar.progress(0.3)\n            full_response = get_crew_response(prompt)\n            progress_bar.progress(1.0)\n```\n\nThe interface maintains a chat history, making it feel like a natural conversation:\n\n```python\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n```\n\nWe also include helpful examples and settings in the sidebar:\n\n```python\nwith st.sidebar:\n    st.header(\"Settings\")\n    search_limit = st.slider(\"Number of results\", 1, 10, 5)\n    \n    analysis_depth = st.select_slider(\n        \"Analysis Depth\",",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "token_count": 210,
      "char_count": 984,
      "start_char": 29755,
      "end_char": 30740
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:34",
    "content": "Number of results\", 1, 10, 5)\n    \n    analysis_depth = st.select_slider(\n        \"Analysis Depth\",\n        options=[\"Basic\", \"Standard\", \"Detailed\"],\n        value=\"Standard\"\n    )\n```\n\nThis combination of features creates an interface that’s both powerful and approachable. Users can see their query being processed in real-time, adjust settings to their needs, and maintain context through the chat history.\n\n---\n\n## Conclusion\n\nThis tutorial has demonstrated how to build a sophisticated meeting analysis system that combines vector search with AI agents. Let’s recap the key components we’ve covered:\n\n1. **Vector Search Integration**\n\n   - Efficient storage and retrieval of meeting content using Qdrant\n   - Semantic search capabilities through vector embeddings\n   - Batched processing for optimal performance\n\n2. **AI Agent Framework**\n\n   - Tool-based approach for modular functionality\n   - Specialized agents for research and analysis\n   - Integration with Claude for intelligent insights\n\n3.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "token_count": 198,
      "char_count": 1004,
      "start_char": 30640,
      "end_char": 31644
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:35",
    "content": "ecialized agents for research and analysis\n   - Integration with Claude for intelligent insights\n\n3. **Interactive Interface**\n\n   - Real-time feedback and progress tracking\n   - Persistent chat history\n   - Configurable search and analysis settings\n\nThe resulting system demonstrates the power of combining vector search with AI agents to create an intelligent meeting assistant. By following this tutorial, you’ve learned how to:\n\n- Process and store meeting data efficiently\n- Implement semantic search capabilities\n- Create specialized AI agents for analysis\n- Build an intuitive user interface\n\nThis foundation can be extended in many ways, such as:\n\n- Adding more specialized agents\n- Implementing additional analysis tools\n- Enhancing the user interface\n- Integrating with other data sources\n\nThe code is available in the [repository](https://github.com/qdrant/examples/tree/master/agentic_rag_zoom_crewai), and we encourage you to experiment with your own modifications and improvements.\n\n---",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 35,
      "token_count": 189,
      "char_count": 1000,
      "start_char": 31544,
      "end_char": 32546
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:36",
    "content": "oom_crewai), and we encourage you to experiment with your own modifications and improvements.\n\n---\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Agentic RAG With CrewAI & Qdrant Vector Database](#agentic-rag-with-crewai--qdrant-vector-database.md)\n\n  - [What You’ll Build](#what-youll-build.md)\n\n    - [How Does It Work?](#how-does-it-work.md)\n    - [Architecture](#architecture.md)\n\n  - [Getting Started](#getting-started.md)\n\n  - [Setup](#setup.md)\n\n  - [Usage](#usage.md)\n\n    - [1. Process Meeting Data](#1-process-meeting-data.md)\n    - [2. Launch the Interface](#2-launch-the-interface.md)\n    - [The Data Pipeline](#the-data-pipeline.md)\n    - [Building the AI Agent System](#building-the-ai-agent-system.md)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 36,
      "token_count": 284,
      "char_count": 1024,
      "start_char": 32446,
      "end_char": 33471
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md:chunk:37",
    "content": "line](#the-data-pipeline.md)\n    - [Building the AI Agent System](#building-the-ai-agent-system.md)\n    - [Orchestrating the Workflow](#orchestrating-the-workflow.md)\n    - [Building the User Interface](#building-the-user-interface.md)\n\n  - [Conclusion](#conclusion.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/agentic-rag-crewai-zoom.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_agentic-rag-crewai-zoom\\_documentation_agentic-rag-crewai-zoom_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_agentic-rag-crewai-zoom_.md",
      "file_extension": ".md",
      "chunk_index": 37,
      "token_count": 207,
      "char_count": 747,
      "start_char": 33371,
      "end_char": 34395
    }
  }
]