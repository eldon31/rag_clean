[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:0",
    "content": "Prem AI - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 279,
      "char_count": 999,
      "start_char": 0,
      "end_char": 999
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:1",
    "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 267,
      "char_count": 1000,
      "start_char": 899,
      "end_char": 1899
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:2",
    "content": "nfluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 264,
      "char_count": 1011,
      "start_char": 1799,
      "end_char": 2811
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:3",
    "content": "entation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 271,
      "char_count": 1012,
      "start_char": 2711,
      "end_char": 3723
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:4",
    "content": "/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 275,
      "char_count": 1007,
      "start_char": 3623,
      "end_char": 4630
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:5",
    "content": "[LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 269,
      "char_count": 1003,
      "start_char": 4530,
      "end_char": 5535
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:6",
    "content": "meworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 273,
      "char_count": 1015,
      "start_char": 5435,
      "end_char": 6450
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:7",
    "content": "ion/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 257,
      "char_count": 987,
      "start_char": 6350,
      "end_char": 7339
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:8",
    "content": "ering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 259,
      "char_count": 978,
      "start_char": 7239,
      "end_char": 8217
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:9",
    "content": "ion/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 231,
      "char_count": 997,
      "start_char": 8117,
      "end_char": 9114
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:10",
    "content": "cumentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 280,
      "char_count": 1022,
      "start_char": 9014,
      "end_char": 10038
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:11",
    "content": "ng Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 262,
      "char_count": 1025,
      "start_char": 9938,
      "end_char": 10963
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:12",
    "content": "ured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 270,
      "char_count": 995,
      "start_char": 10863,
      "end_char": 11858
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:13",
    "content": "[Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 269,
      "char_count": 990,
      "start_char": 11758,
      "end_char": 12748
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:14",
    "content": "peval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 284,
      "char_count": 1019,
      "start_char": 12648,
      "end_char": 13667
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:15",
    "content": "j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 270,
      "char_count": 1016,
      "start_char": 13567,
      "end_char": 14585
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:16",
    "content": "entation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 279,
      "char_count": 1018,
      "start_char": 14485,
      "end_char": 15503
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:17",
    "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 249,
      "char_count": 974,
      "start_char": 15403,
      "end_char": 16377
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:18",
    "content": "-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 254,
      "char_count": 1005,
      "start_char": 16277,
      "end_char": 17282
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:19",
    "content": "r-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Embeddings](https://qdrant.tech/documentation/embeddings/)\n-\n- Prem AI\n\n# Prem AI\n\n[PremAI](https://premai.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 246,
      "char_count": 1016,
      "start_char": 17182,
      "end_char": 18198
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:20",
    "content": "ngs](https://qdrant.tech/documentation/embeddings/)\n-\n- Prem AI\n\n# Prem AI\n\n[PremAI](https://premai.io/) is a unified generative AI development platform for fine-tuning deploying, and monitoring AI models.\n\nQdrant is compatible with PremAI APIs.\n\n### Installing the SDKs\n\n```bash\npip install premai qdrant-client\n```\n\nTo install the npm package:\n\n```bash\nnpm install @premai/prem-sdk @qdrant/js-client-rest\n```\n\n### Import all required packages\n\n```python\nfrom premai import Prem\n\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import Distance, VectorParams\n```\n\n```typescript\nimport Prem from '@premai/prem-sdk';\nimport { QdrantClient } from '@qdrant/js-client-rest';\n```\n\n### Define all the constants\n\nWe need to define the project ID and the embedding model to use. You can learn more about obtaining these in the PremAI [docs](https://docs.premai.io/quick-start).\n\n```python\nPROJECT_ID = 123\nEMBEDDING_MODEL = \"text-embedding-3-large\"\nCOLLECTION_NAME = \"prem-collection-py\"",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 259,
      "char_count": 995,
      "start_char": 18098,
      "end_char": 19094
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:21",
    "content": "PROJECT_ID = 123\nEMBEDDING_MODEL = \"text-embedding-3-large\"\nCOLLECTION_NAME = \"prem-collection-py\"\nQDRANT_SERVER_URL = \"http://localhost:6333\"\nDOCUMENTS = [\n    \"This is a sample python document\",\n    \"We will be using qdrant and premai python sdk\"\n]\n```\n\n```typescript\nconst PROJECT_ID = 123;\nconst EMBEDDING_MODEL = \"text-embedding-3-large\";\nconst COLLECTION_NAME = \"prem-collection-js\";\nconst SERVER_URL = \"http://localhost:6333\"\nconst DOCUMENTS = [\n    \"This is a sample javascript document\",\n    \"We will be using qdrant and premai javascript sdk\"\n];\n```\n\n### Set up PremAI and Qdrant clients\n\n```python\nprem_client = Prem(api_key=\"xxxx-xxx-xxx\")\nqdrant_client = QdrantClient(url=QDRANT_SERVER_URL)\n```\n\n```typescript\nconst premaiClient = new Prem({\n    apiKey: \"xxxx-xxx-xxx\"\n})\nconst qdrantClient = new QdrantClient({ url: SERVER_URL });\n```\n\n### Generating Embeddings\n\n```python\nfrom typing import Union, List\n\ndef get_embeddings(\n    project_id: int, \n    embedding_model: str,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 285,
      "char_count": 986,
      "start_char": 18994,
      "end_char": 19983
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:22",
    "content": "rom typing import Union, List\n\ndef get_embeddings(\n    project_id: int, \n    embedding_model: str, \n    documents: Union[str, List[str]]\n) -> List[List[float]]:\n    \"\"\"\n    Helper function to get the embeddings from premai sdk \n    Args\n        project_id (int): The project id from prem saas platform.\n        embedding_model (str): The embedding model alias to choose\n        documents (Union[str, List[str]]): Single texts or list of texts to embed\n    Returns:\n        List[List[int]]: A list of list of integers that represents different\n            embeddings\n    \"\"\"\n    embeddings = []\n    documents = [documents] if isinstance(documents, str) else documents \n    for embedding in prem_client.embeddings.create(\n        project_id=project_id,\n        model=embedding_model, \n        input=documents\n    ).data:\n        embeddings.append(embedding.embedding)\n    \n    return embeddings\n```\n\n```typescript\nasync function getEmbeddings(projectID, embeddingModel, documents) {\n    const response = await premaiClient.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 221,
      "char_count": 1021,
      "start_char": 19883,
      "end_char": 20904
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:23",
    "content": "ction getEmbeddings(projectID, embeddingModel, documents) {\n    const response = await premaiClient.embeddings.create({\n        project_id: projectID,\n        model: embeddingModel,\n        input: documents\n    });\n    return response;\n}\n```\n\n### Converting Embeddings to Qdrant Points\n\n```python\nfrom qdrant_client.models import PointStruct\n\nembeddings = get_embeddings(\n    project_id=PROJECT_ID,\n    embedding_model=EMBEDDING_MODEL, \n    documents=DOCUMENTS \n)\n\npoints = [\n    PointStruct(\n        id=idx, \n        vector=embedding,\n        payload={\"text\": text},\n    ) for idx, (embedding, text) in enumerate(zip(embeddings, DOCUMENTS))\n]\n```\n\n```typescript\nfunction convertToQdrantPoints(embeddings, texts) {\n    return embeddings.data.map((data, i) => {\n        return {\n            id: i,\n            vector: data.embedding,\n            payload: {\n                text: texts[i]\n            }\n        };\n    });\n}\n\nconst embeddings = await getEmbeddings(PROJECT_ID, EMBEDDING_MODEL, DOCUMENTS);",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 233,
      "char_count": 1002,
      "start_char": 20804,
      "end_char": 21807
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:24",
    "content": "};\n    });\n}\n\nconst embeddings = await getEmbeddings(PROJECT_ID, EMBEDDING_MODEL, DOCUMENTS);\nconst points = convertToQdrantPoints(embeddings, DOCUMENTS);\n```\n\n### Set up a Qdrant Collection\n\n```python\nqdrant_client.create_collection(\n    collection_name=COLLECTION_NAME, \n    vectors_config=VectorParams(size=3072, distance=Distance.DOT)\n)\n```\n\n```typescript\nawait qdrantClient.createCollection(COLLECTION_NAME, {\n    vectors: {\n        size: 3072,\n        distance: 'Cosine'\n    }\n})\n```\n\n### Insert Documents into the Collection\n\n```python\ndoc_ids = list(range(len(embeddings)))\n\nqdrant_client.upsert(\n    collection_name=COLLECTION_NAME, \n    points=points\n )\n```\n\n```typescript\nawait qdrantClient.upsert(COLLECTION_NAME, {\n        wait: true,\n        points\n    });\n```\n\n### Perform a Search\n\n```python\nquery = \"what is the extension of python document\"\n\nquery_embedding = get_embeddings(\n    project_id=PROJECT_ID, \n    embedding_model=EMBEDDING_MODEL, \n    documents=query\n)\n\nqdrant_client.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 258,
      "char_count": 997,
      "start_char": 21707,
      "end_char": 22710
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:25",
    "content": "project_id=PROJECT_ID, \n    embedding_model=EMBEDDING_MODEL, \n    documents=query\n)\n\nqdrant_client.search(collection_name=COLLECTION_NAME, query_vector=query_embedding[0])\n```\n\n```typescript\nconst query = \"what is the extension of javascript document\"\nconst query_embedding_response = await getEmbeddings(PROJECT_ID, EMBEDDING_MODEL, query)\n\nawait qdrantClient.search(COLLECTION_NAME, {\n    vector: query_embedding_response.data[0].embedding\n});\n```\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/embeddings/premai.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Prem AI](#prem-ai.md)\n\n  - - [Installing the SDKs](#installing-the-sdks.md)\n    - [Import all required packages](#import-all-required-packages.md)\n    - [Define all the constants](#define-all-the-constants.md)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 258,
      "char_count": 1008,
      "start_char": 22610,
      "end_char": 23620
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:26",
    "content": "s](#import-all-required-packages.md)\n    - [Define all the constants](#define-all-the-constants.md)\n    - [Set up PremAI and Qdrant clients](#set-up-premai-and-qdrant-clients.md)\n    - [Generating Embeddings](#generating-embeddings.md)\n    - [Converting Embeddings to Qdrant Points](#converting-embeddings-to-qdrant-points.md)\n    - [Set up a Qdrant Collection](#set-up-a-qdrant-collection.md)\n    - [Insert Documents into the Collection](#insert-documents-into-the-collection.md)\n    - [Perform a Search](#perform-a-search.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/embeddings/premai.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 276,
      "char_count": 999,
      "start_char": 23520,
      "end_char": 24544
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md:chunk:27",
    "content": "ch/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_embeddings_premai\\_documentation_embeddings_premai_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_embeddings_premai_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 22,
      "char_count": 75,
      "start_char": 24444,
      "end_char": 25468
    }
  }
]