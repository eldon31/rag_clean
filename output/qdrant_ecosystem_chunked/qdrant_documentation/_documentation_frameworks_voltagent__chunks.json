[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:0",
    "content": "VoltAgent - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 279,
      "char_count": 1001,
      "start_char": 0,
      "end_char": 1001
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:1",
    "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 267,
      "char_count": 1000,
      "start_char": 901,
      "end_char": 1901
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:2",
    "content": "nfluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 264,
      "char_count": 1011,
      "start_char": 1801,
      "end_char": 2813
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:3",
    "content": "entation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 271,
      "char_count": 1012,
      "start_char": 2713,
      "end_char": 3725
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:4",
    "content": "/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 275,
      "char_count": 1007,
      "start_char": 3625,
      "end_char": 4632
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:5",
    "content": "[LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 269,
      "char_count": 1003,
      "start_char": 4532,
      "end_char": 5537
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:6",
    "content": "meworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 273,
      "char_count": 1015,
      "start_char": 5437,
      "end_char": 6452
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:7",
    "content": "ion/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 257,
      "char_count": 987,
      "start_char": 6352,
      "end_char": 7341
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:8",
    "content": "ering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 259,
      "char_count": 978,
      "start_char": 7241,
      "end_char": 8219
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:9",
    "content": "ion/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 231,
      "char_count": 997,
      "start_char": 8119,
      "end_char": 9116
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:10",
    "content": "cumentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 280,
      "char_count": 1022,
      "start_char": 9016,
      "end_char": 10040
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:11",
    "content": "ng Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 262,
      "char_count": 1025,
      "start_char": 9940,
      "end_char": 10965
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:12",
    "content": "ured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 270,
      "char_count": 995,
      "start_char": 10865,
      "end_char": 11860
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:13",
    "content": "[Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 269,
      "char_count": 990,
      "start_char": 11760,
      "end_char": 12750
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:14",
    "content": "peval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 284,
      "char_count": 1019,
      "start_char": 12650,
      "end_char": 13669
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:15",
    "content": "j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 270,
      "char_count": 1016,
      "start_char": 13569,
      "end_char": 14587
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:16",
    "content": "entation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 279,
      "char_count": 1018,
      "start_char": 14487,
      "end_char": 15505
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:17",
    "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 249,
      "char_count": 974,
      "start_char": 15405,
      "end_char": 16379
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:18",
    "content": "-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 254,
      "char_count": 1005,
      "start_char": 16279,
      "end_char": 17284
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:19",
    "content": "r-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Frameworks](https://qdrant.tech/documentation/frameworks/)\n-\n- VoltAgent\n\n# VoltAgent\n\n[VoltAgent](https://github.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 244,
      "char_count": 1023,
      "start_char": 17184,
      "end_char": 18207
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:20",
    "content": "tps://qdrant.tech/documentation/frameworks/)\n-\n- VoltAgent\n\n# VoltAgent\n\n[VoltAgent](https://github.com/VoltAgent/voltagent) is a TypeScript-based open-source framework designed for developing AI agents that support modular tool integration, LLM coordination, and adaptable multi-agent architectures. The framework includes an integrated observability dashboard similar to n8n, enabling visual monitoring of agent operations, action tracking, and streamlined debugging capabilities.\n\n## Installation\n\nCreate a new VoltAgent project with Qdrant integration:\n\n```bash\nnpm create voltagent-app@latest -- --example with-qdrant\ncd with-qdrant\n```\n\nThis command generates a fully configured project combining VoltAgent and Qdrant, including example data and two distinct agent implementation patterns.\n\nInstall the dependencies:\n\n```bash\nnpm install\n```\n\n## Environment Setup\n\nCreate a `.env` file with your configuration:\n\n```env\n# Qdrant URL\n# docker run -p 6333:6333 qdrant/qdrant\nQDRANT_URL=http://localhost:6333",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 229,
      "char_count": 1010,
      "start_char": 18107,
      "end_char": 19119
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:21",
    "content": "ion:\n\n```env\n# Qdrant URL\n# docker run -p 6333:6333 qdrant/qdrant\nQDRANT_URL=http://localhost:6333\n\n# Qdrant API key (Optional)\nQDRANT_API_KEY=your-qdrant-api-key-here\n\n# OpenAI API key for embeddings and LLM\nOPENAI_API_KEY=your-openai-api-key-here\n```\n\nStart your VoltAgent application:\n\n```bash\nnpm run dev\n```\n\nRefer to source code of example [here](https://github.com/VoltAgent/voltagent/tree/main/examples/with-qdrant).\n\n## How It Works\n\nThe sections below demonstrate the construction of this example and provide guidance on adapting it to your needs.\n\n### Create the Qdrant Retriever\n\nCreate `src/retriever/index.ts`:\n\n```typescript\nimport { BaseRetriever, type BaseMessage, type RetrieveOptions } from \"@voltagent/core\";\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\n// Initialize Qdrant client\nconst qdrant = new QdrantClient({\n  url: process.env.QDRANT_URL || \"http://localhost:6333\",\n  apiKey: process.env.QDRANT_API_KEY,\n});\n\nconst collectionName = \"voltagent-knowledge-base\";\n```",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 289,
      "char_count": 1002,
      "start_char": 19019,
      "end_char": 20023
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:22",
    "content": "apiKey: process.env.QDRANT_API_KEY,\n});\n\nconst collectionName = \"voltagent-knowledge-base\";\n```\n\n**Key Components Explained**:\n\n- **Qdrant Client**: Connects to Qdrant’s REST API\n- **Collection**: A named container for your vectors in Qdrant\n- **Open Source & Cloud**: Use locally or as a managed service\n\n### Initialize Collection and Sample Data\n\nThe provided example handles automatic creation and initialization of your Qdrant collection with data:\n\n```typescript\nasync function initializeCollection() {\n  try {\n    // Check if collection exists\n    let exists = false;\n    try {\n      await qdrant.getCollection(collectionName);\n      exists = true;\n      console.log(`📋 Collection \"${collectionName}\" already exists`);\n    } catch (error) {\n      console.log(`📋 Creating new collection \"${collectionName}\"...`);\n    }\n\n    // Create collection if it doesn't exist\n    if (!exists) {\n      await qdrant.createCollection(collectionName, {\n        vectors: { size: 1536, distance: \"Cosine\" },\n      });\n      console.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 235,
      "char_count": 1020,
      "start_char": 19923,
      "end_char": 20946
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:23",
    "content": "tion(collectionName, {\n        vectors: { size: 1536, distance: \"Cosine\" },\n      });\n      console.log(`✅ Collection \"${collectionName}\" created successfully`);\n    }\n\n    // Check if we need to populate with sample data\n    const stats = await qdrant.count(collectionName);\n    if (stats.count === 0) {\n      console.log(\"📚 Populating collection with sample documents...\");\n      // Generate embeddings for sample documents using OpenAI\n      const OpenAI = await import(\"openai\");\n      const openai = new OpenAI.default({\n        apiKey: process.env.OPENAI_API_KEY!,\n      });\n      const points = [];\n      for (const record of sampleRecords) {\n        try {\n          const embeddingResponse = await openai.embeddings.create({\n            model: \"text-embedding-3-small\",\n            input: record.payload.text,\n          });\n          points.push({\n            id: record.id,\n            vector: embeddingResponse.data[0].embedding,\n            payload: record.payload,\n          });\n        } catch (error) {",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 217,
      "char_count": 1016,
      "start_char": 20846,
      "end_char": 21863
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:24",
    "content": "nse.data[0].embedding,\n            payload: record.payload,\n          });\n        } catch (error) {\n          console.error(`Error generating embedding for ${record.id}:`, error);\n        }\n      }\n      if (points.length > 0) {\n        await qdrant.upsert(collectionName, { points });\n        console.log(`✅ Successfully upserted ${points.length} documents to collection`);\n      }\n    } else {\n      console.log(`📊 Collection already contains ${stats.count} documents`);\n    }\n  } catch (error) {\n    console.error(\"Error initializing Qdrant collection:\", error);\n  }\n}\n```\n\n**What This Does**:\n\n- Creates a Qdrant collection with cosine similarity\n- Generates embeddings using OpenAI’s API\n- Adds the embeddings and payloads to Qdrant\n\n### Implement the Retriever Class\n\nImplement the primary retriever class for vector search functionality:\n\n```typescript\n// Retriever function\nasync function retrieveDocuments(query: string, topK = 3) {\n  try {\n    // Generate embedding for the query",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 220,
      "char_count": 989,
      "start_char": 21763,
      "end_char": 22753
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:25",
    "content": "nction retrieveDocuments(query: string, topK = 3) {\n  try {\n    // Generate embedding for the query\n    const OpenAI = await import(\"openai\");\n    const openai = new OpenAI.default({\n      apiKey: process.env.OPENAI_API_KEY!,\n    });\n    const embeddingResponse = await openai.embeddings.create({\n      model: \"text-embedding-3-small\",\n      input: query,\n    });\n    const queryVector = embeddingResponse.data[0].embedding;\n    // Perform search in Qdrant\n    const searchResults = (\n      await qdrant.query(collectionName, {\n        query: queryVector,\n        limit: topK,\n        with_payload: true,\n      })\n    ).points;\n    // Format results\n    return (\n      searchResults.map((match: any) => ({\n        content: match.payload?.text || \"\",\n        metadata: match.payload || {},\n        score: match.score || 0,\n        id: match.id,\n      })) || []\n    );\n  } catch (error) {\n    console.error(\"Error retrieving documents from Qdrant:\", error);\n    return [];\n  }\n}\n\n/**",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 235,
      "char_count": 981,
      "start_char": 22653,
      "end_char": 23635
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:26",
    "content": "r) {\n    console.error(\"Error retrieving documents from Qdrant:\", error);\n    return [];\n  }\n}\n\n/**\n * Qdrant-based retriever implementation for VoltAgent\n */\nexport class QdrantRetriever extends BaseRetriever {\n  /**\n   * Retrieve documents from Qdrant based on semantic similarity\n   * @param input - The input to use for retrieval (string or BaseMessage[])\n   * @param options - Configuration and context for the retrieval\n   * @returns Promise resolving to a formatted context string\n   */\n  async retrieve(input: string | BaseMessage[], options: RetrieveOptions): Promise<string> {\n    // Convert input to searchable string\n    let searchText = \"\";\n    if (typeof input === \"string\") {\n      searchText = input;\n    } else if (Array.isArray(input) && input.length > 0) {\n      const lastMessage = input[input.length - 1];\n      if (Array.isArray(lastMessage.content)) {\n        const textParts = lastMessage.content\n          .filter((part: any) => part.type === \"text\")\n          .map((part: any) => part.text);",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 233,
      "char_count": 1017,
      "start_char": 23535,
      "end_char": 24553
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:27",
    "content": "nt\n          .filter((part: any) => part.type === \"text\")\n          .map((part: any) => part.text);\n        searchText = textParts.join(\" \");\n      } else {\n        searchText = lastMessage.content as string;\n      }\n    }\n    // Perform semantic search using Qdrant\n    const results = await retrieveDocuments(searchText, 3);\n    // Add references to userContext if available\n    if (options.userContext && results.length > 0) {\n      const references = results.map((doc: any, index: number) => ({\n        id: doc.id,\n        title: doc.metadata.topic || `Document ${index + 1}`,\n        source: \"Qdrant Knowledge Base\",\n        score: doc.score,\n        category: doc.metadata.category,\n      }));\n      options.userContext.set(\"references\", references);\n    }\n    // Return the concatenated content for the LLM\n    if (results.length === 0) {\n      return \"No relevant documents found in the knowledge base.\";\n    }\n    return results\n      .map(\n        (doc: any, index: number) =>",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 230,
      "char_count": 986,
      "start_char": 24453,
      "end_char": 25440
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:28",
    "content": "in the knowledge base.\";\n    }\n    return results\n      .map(\n        (doc: any, index: number) =>\n          `Document ${index + 1} (ID: ${doc.id}, Score: ${doc.score.toFixed(4)}, Category: ${doc.metadata.category}):\\n${doc.content}`\n      )\n      .join(\"\\n\\n---\\n\\n\");\n  }\n}\n\n// Create retriever instance\nexport const retriever = new QdrantRetriever();\n```\n\n### Create Your Agents\n\nConfigure agents with various retrieval strategies in `src/index.ts`:\n\n```typescript\nimport { openai } from \"@ai-sdk/openai\";\nimport { Agent, VoltAgent } from \"@voltagent/core\";\nimport { createPinoLogger } from \"@voltagent/logger\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\n\nimport { retriever } from \"./retriever/index.js\";\n\n// Agent 1: Using retriever directly\nconst agentWithRetriever = new Agent({\n  name: \"Assistant with Retriever\",\n  description:\n    \"A helpful assistant that can retrieve information from the Qdrant knowledge base using semantic search to provide better answers.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 251,
      "char_count": 985,
      "start_char": 25340,
      "end_char": 26326
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:29",
    "content": "retrieve information from the Qdrant knowledge base using semantic search to provide better answers. I automatically search for relevant information when needed.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  retriever: retriever,\n});\n\n// Agent 2: Using retriever as tool\nconst agentWithTools = new Agent({\n  name: \"Assistant with Tools\",\n  description:\n    \"A helpful assistant that can search the Qdrant knowledge base using tools. The agent will decide when to search for information based on user questions.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  tools: [retriever.tool],\n});\n\n// Create logger\nconst logger = createPinoLogger({\n  name: \"with-qdrant\",\n  level: \"info\",\n});\n\nnew VoltAgent({\n  agents: {\n    agentWithRetriever,\n    agentWithTools,\n  },\n  logger,\n});\n```\n\n## Further Reading\n\n- [VoltAgent Documentation](https://voltagent.dev/docs/)\n- [VoltAgent Examples](https://github.com/VoltAgent/voltagent/tree/main/examples)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 248,
      "char_count": 979,
      "start_char": 26226,
      "end_char": 27206
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:30",
    "content": "tagent.dev/docs/)\n- [VoltAgent Examples](https://github.com/VoltAgent/voltagent/tree/main/examples)\n- [VoltAgent Qdrant Official Docs](https://voltagent.dev/docs/rag/qdrant/)\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/frameworks/voltagent.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [VoltAgent](#voltagent.md)\n\n  - [Installation](#installation.md)\n\n  - [Environment Setup](#environment-setup.md)\n\n  - [How It Works](#how-it-works.md)\n\n    - [Create the Qdrant Retriever](#create-the-qdrant-retriever.md)\n    - [Initialize Collection and Sample Data](#initialize-collection-and-sample-data.md)\n    - [Implement the Retriever Class](#implement-the-retriever-class.md)\n    - [Create Your Agents](#create-your-agents.md)\n\n  - [Further Reading](#further-reading.md)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "token_count": 273,
      "char_count": 1003,
      "start_char": 27106,
      "end_char": 28111
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md:chunk:31",
    "content": "md)\n    - [Create Your Agents](#create-your-agents.md)\n\n  - [Further Reading](#further-reading.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/frameworks/voltagent.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_voltagent\\_documentation_frameworks_voltagent_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_voltagent_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "token_count": 162,
      "char_count": 573,
      "start_char": 28011,
      "end_char": 29035
    }
  }
]