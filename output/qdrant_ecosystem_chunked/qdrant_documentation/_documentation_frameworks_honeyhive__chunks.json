[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:0",
    "content": "HoneyHive - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 281,
      "char_count": 1001,
      "start_char": 0,
      "end_char": 1001
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:1",
    "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 267,
      "char_count": 1000,
      "start_char": 901,
      "end_char": 1901
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:2",
    "content": "nfluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 264,
      "char_count": 1011,
      "start_char": 1801,
      "end_char": 2813
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:3",
    "content": "entation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 271,
      "char_count": 1012,
      "start_char": 2713,
      "end_char": 3725
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:4",
    "content": "/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 275,
      "char_count": 1007,
      "start_char": 3625,
      "end_char": 4632
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:5",
    "content": "[LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 269,
      "char_count": 1003,
      "start_char": 4532,
      "end_char": 5537
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:6",
    "content": "meworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 273,
      "char_count": 1015,
      "start_char": 5437,
      "end_char": 6452
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:7",
    "content": "ion/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 257,
      "char_count": 987,
      "start_char": 6352,
      "end_char": 7341
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:8",
    "content": "ering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 259,
      "char_count": 978,
      "start_char": 7241,
      "end_char": 8219
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:9",
    "content": "ion/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 231,
      "char_count": 997,
      "start_char": 8119,
      "end_char": 9116
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:10",
    "content": "cumentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 280,
      "char_count": 1022,
      "start_char": 9016,
      "end_char": 10040
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:11",
    "content": "ng Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 262,
      "char_count": 1025,
      "start_char": 9940,
      "end_char": 10965
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:12",
    "content": "ured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 270,
      "char_count": 995,
      "start_char": 10865,
      "end_char": 11860
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:13",
    "content": "[Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 269,
      "char_count": 990,
      "start_char": 11760,
      "end_char": 12750
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:14",
    "content": "peval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 284,
      "char_count": 1019,
      "start_char": 12650,
      "end_char": 13669
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:15",
    "content": "j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 270,
      "char_count": 1016,
      "start_char": 13569,
      "end_char": 14587
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:16",
    "content": "entation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 279,
      "char_count": 1018,
      "start_char": 14487,
      "end_char": 15505
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:17",
    "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 249,
      "char_count": 974,
      "start_char": 15405,
      "end_char": 16379
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:18",
    "content": "-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 254,
      "char_count": 1005,
      "start_char": 16279,
      "end_char": 17284
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:19",
    "content": "r-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Frameworks](https://qdrant.tech/documentation/frameworks/)\n-\n- HoneyHive\n\n# HoneyHive\n\n[HoneyHive](https://www.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 247,
      "char_count": 1020,
      "start_char": 17184,
      "end_char": 18204
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:20",
    "content": "(https://qdrant.tech/documentation/frameworks/)\n-\n- HoneyHive\n\n# HoneyHive\n\n[HoneyHive](https://www.honeyhive.ai/) is an AI evaluation and observability platform for Generative AI applications. HoneyHive’s platform gives developers enterprise-grade tools to debug complex retrieval pipelines, evaluate performance over large test suites, monitor usage in real-time, and manage prompts within a shared workspace. Teams use HoneyHive to iterate faster, detect failures at scale, and deliver exceptional AI products.\n\nBy integrating Qdrant with HoneyHive, you can:\n\n- Trace vector database operations\n- Monitor latency, embedding quality, and context relevance\n- Evaluate retrieval performance in your RAG pipelines\n- Optimize paramaters such as `chunk_size` or `chunk_overlap`\n\n## Prerequisites\n\n- A HoneyHive account and API key\n- Python 3.8+\n\n## Installation\n\nInstall the required packages:\n\n```bash\npip install qdrant-client openai honeyhive\n```\n\n## Basic Integration Example",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 212,
      "char_count": 976,
      "start_char": 18104,
      "end_char": 19082
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:21",
    "content": "ed packages:\n\n```bash\npip install qdrant-client openai honeyhive\n```\n\n## Basic Integration Example\n\nThe following example demonstrates a complete RAG pipeline with HoneyHive tracing for Qdrant operations. We’ll break down each component step by step.\n\n### Initialize Clients and Setup\n\nFirst, set up the necessary clients and configuration for HoneyHive, OpenAI, and Qdrant:\n\n```python\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.http.models import PointStruct, VectorParams, Distance\nimport openai\nimport os\nfrom honeyhive.tracer import HoneyHiveTracer\nfrom honeyhive.tracer.custom import trace\nfrom openai import OpenAI\n\n# Set API Keys\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nhoneyhive_api_key = os.getenv(\"HONEYHIVE_API_KEY\")\n\n# Initialize HoneyHive Tracer\nHoneyHiveTracer.init(\n    api_key=honeyhive_api_key,\n    project=\"qdrant-rag-example\",\n    session_name=\"qdrant-integration-demo\"\n)\n\n# Initialize OpenAI client\nopenai_client = OpenAI(api_key=openai.api_key)\n```\n\n### Connect to Qdrant",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 256,
      "char_count": 1012,
      "start_char": 18982,
      "end_char": 19996
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:22",
    "content": "Initialize OpenAI client\nopenai_client = OpenAI(api_key=openai.api_key)\n```\n\n### Connect to Qdrant\n\nYou can connect to Qdrant in two ways: self-hosted (local) or cloud-hosted (Qdrant Cloud):\n\n#### Option 1: Self-Hosted Qdrant (Local)\n\nTo run Qdrant locally, you need to have Docker installed and run the following command:\n\n```bash\ndocker pull qdrant/qdrant\ndocker run -p 6333:6333 -p 6334:6334 -v \"$(pwd)/qdrant_storage:/qdrant/storage\" qdrant/qdrant\n```\n\nThen connect to the local Qdrant instance:\n\n```python\n# Connect to local Qdrant\nclient = QdrantClient(url=\"http://localhost:6333\")\nprint(\"Connected to local Qdrant instance\")\n```\n\n#### Option 2: Qdrant Cloud\n\nFor Qdrant Cloud, you’ll need your cluster host and API key:\n\n```python\n# Qdrant Cloud configuration\nQDRANT_HOST = os.getenv(\"QDRANT_HOST\")  # e.g., \"your-cluster-id.eu-central.aws.cloud.qdrant.io\"\nQDRANT_API_KEY = os.getenv(\"QDRANT_API_KEY\")\n\n# Connect to Qdrant Cloud\nclient = QdrantClient(url=QDRANT_HOST, api_key=QDRANT_API_KEY)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 312,
      "char_count": 998,
      "start_char": 19896,
      "end_char": 20895
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:23",
    "content": "API_KEY\")\n\n# Connect to Qdrant Cloud\nclient = QdrantClient(url=QDRANT_HOST, api_key=QDRANT_API_KEY)\nprint(\"Connected to Qdrant Cloud\")\n```\n\n### Create a Collection\n\nCreate a collection to store document embeddings:\n\n```python\ncollection_name = \"documents\"\nvector_size = 1536  # For text-embedding-3-small\nvector_distance = Distance.COSINE\n\n# Create collection if it doesn't exist\nif not client.collection_exists(collection_name):\n    client.create_collection(\n        collection_name=collection_name,\n        vectors_config=VectorParams(size=vector_size, distance=vector_distance)\n    )\n```\n\n### Define Embedding Function with Tracing\n\nCreate a function to generate embeddings with HoneyHive tracing:\n\n```python\n@trace()\ndef embed_text(text: str) -> list:\n    \"\"\"Generate embeddings for a text using OpenAI's API.\"\"\"\n    response = openai_client.embeddings.create(\n        model=\"text-embedding-3-small\",\n        input=text\n    )\n    return response.data[0].embedding\n```\n\n### Insert Documents with Tracing",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 235,
      "char_count": 1006,
      "start_char": 20795,
      "end_char": 21803
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:24",
    "content": "input=text\n    )\n    return response.data[0].embedding\n```\n\n### Insert Documents with Tracing\n\nCreate a function to insert documents into Qdrant with tracing:\n\n```python\n@trace()\ndef insert_documents(docs):\n    \"\"\"Insert documents into Qdrant collection.\"\"\"\n    points = []\n    for idx, doc in enumerate(docs):\n        vector = embed_text(doc)\n        points.append(PointStruct(\n            id=idx + 1,\n            vector=vector,\n            payload={\"text\": doc}\n        ))\n    \n    client.upsert(\n        collection_name=collection_name,\n        points=points\n    )\n    return len(points)\n\n# Sample documents\ndocuments = [\n    \"Qdrant is a vector database optimized for storing and searching high-dimensional vectors.\",\n    \"HoneyHive provides observability for AI applications, including RAG pipelines.\",\n    \"Retrieval-Augmented Generation (RAG) combines retrieval systems with generative models.\",\n    \"Vector databases like Qdrant are essential for efficient similarity search in RAG systems.\",",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 213,
      "char_count": 1000,
      "start_char": 21703,
      "end_char": 22709
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:25",
    "content": ",\n    \"Vector databases like Qdrant are essential for efficient similarity search in RAG systems.\",\n    \"OpenAI's embedding models convert text into high-dimensional vectors for semantic search.\"\n]\n\n# Insert documents\nnum_inserted = insert_documents(documents)\n```\n\n### Retrieve Documents with Tracing\n\nCreate a function to retrieve relevant documents from Qdrant with tracing:\n\n```python\n@trace()\ndef get_relevant_docs(query: str, top_k: int = 3) -> list:\n    \"\"\"Retrieve relevant documents for a query.\"\"\"\n    # Embed the query\n    q_vector = embed_text(query)\n    \n    # Search in Qdrant\n    search_response = client.query_points(\n        collection_name=collection_name,\n        query=q_vector,\n        limit=top_k,\n        with_payload=True\n    )\n    \n    # Extract results\n    docs = []\n    for point in search_response.points:\n        docs.append({\n            \"id\": point.id,\n            \"text\": point.payload.get(\"text\"),\n            \"score\": point.score\n        })\n    \n    return docs\n```",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 219,
      "char_count": 999,
      "start_char": 22609,
      "end_char": 23610
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:26",
    "content": "\": point.payload.get(\"text\"),\n            \"score\": point.score\n        })\n    \n    return docs\n```\n\n### Generate Response with Tracing\n\nCreate a function to generate a response using OpenAI with tracing:\n\n```python\n@trace()\ndef answer_query(query: str, relevant_docs: list) -> str:\n    \"\"\"Generate an answer for a query using retrieved documents.\"\"\"\n    if not relevant_docs:\n        return \"Could not retrieve relevant documents to answer the query.\"\n\n    # Format context from retrieved documents\n    context_parts = []\n    for i, doc in enumerate(relevant_docs):\n        context_parts.append(f\"Document {i+1} (ID: {doc['id']}, Score: {doc['score']:.4f}):\\n{doc['text']}\")\n    context = \"\\n\\n\".join(context_parts)\n\n    # Create prompt\n    prompt = f\"\"\"Answer the question based ONLY on the following context:\n\nContext:\n{context}\n\nQuestion: {query}\n\nAnswer:\"\"\"\n\n    # Generate answer\n    completion = openai_client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 234,
      "char_count": 988,
      "start_char": 23510,
      "end_char": 24499
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:27",
    "content": "completion = openai_client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant that answers questions based strictly on the provided context. If the answer is not in the context, say so clearly.\"},\n            {\"role\": \"user\", \"content\": prompt}\n        ],\n        temperature=0.2\n    )\n\n    return completion.choices[0].message.content.strip()\n```\n\n### Complete RAG Pipeline\n\nCreate a function to run the complete RAG pipeline with tracing:\n\n```python\n@trace()\ndef rag_pipeline(query: str) -> dict:\n    \"\"\"End-to-end RAG pipeline.\"\"\"\n    # Get relevant documents\n    relevant_docs = get_relevant_docs(query)\n    \n    # Generate answer\n    answer = answer_query(query, relevant_docs)\n    \n    return {\n        \"query\": query,\n        \"answer\": answer,\n        \"retrieved_documents\": relevant_docs\n    }\n```\n\n### Batch Processing\n\nFor larger document sets, you can use batch processing to improve performance:\n\n```python\n@trace()",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 229,
      "char_count": 1020,
      "start_char": 24399,
      "end_char": 25420
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:28",
    "content": "For larger document sets, you can use batch processing to improve performance:\n\n```python\n@trace()\ndef batch_insert_documents(documents_to_insert, batch_size=10, start_id_offset=0):\n    \"\"\"Insert documents in batches.\"\"\"\n    total_inserted = 0\n    \n    for i in range(0, len(documents_to_insert), batch_size):\n        batch_docs = documents_to_insert[i:i+batch_size]\n        points = []\n        \n        for local_idx, doc in enumerate(batch_docs):\n            relative_idx = i + local_idx\n            vector = embed_text(doc)\n            point_id = relative_idx + start_id_offset + 1\n            points.append(PointStruct(\n                id=point_id,\n                vector=vector,\n                payload={\"text\": doc}\n            ))\n        \n        if points:\n            client.upsert(\n                collection_name=collection_name,\n                points=points\n            )\n            total_inserted += len(points)\n    \n    return total_inserted\n```\n\n### Test the RAG Pipeline",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 207,
      "char_count": 988,
      "start_char": 25320,
      "end_char": 26311
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:29",
    "content": "total_inserted += len(points)\n    \n    return total_inserted\n```\n\n### Test the RAG Pipeline\n\nHere’s how to test the complete RAG pipeline:\n\n```python\n# Test query\ntest_query = \"What is Qdrant used for?\"\nresult = rag_pipeline(test_query)\n\nprint(f\"Query: {result['query']}\")\nprint(f\"Answer: {result['answer']}\")\nprint(\"\\nRetrieved Documents:\")\nfor i, doc in enumerate(result['retrieved_documents']):\n    print(f\"Document {i+1} (ID: {doc['id']}, Score: {doc['score']:.4f}): {doc['text']}\")\n```\n\n## Viewing Traces in HoneyHive\n\nAfter running your RAG pipeline with Qdrant, you can view the traces in the HoneyHive UI:\n\n1. Navigate to your project in the HoneyHive dashboard\n2. Click on the “Traces” tab to see all the traces from your RAG pipeline\n3. Click on a specific trace to see detailed information about each step in the pipeline\n4. Analyze the performance of your vector operations, embeddings, and retrieval processes",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 242,
      "char_count": 922,
      "start_char": 26211,
      "end_char": 27142
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:30",
    "content": "pipeline\n4. Analyze the performance of your vector operations, embeddings, and retrieval processes\n\nWith HoneyHive, you can easily monitor and optimize your Qdrant-powered RAG pipeline, ensuring that it delivers the best possible results for your users.\n\n## Further Reading\n\n- [HoneyHive Documentation](https://docs.honeyhive.ai/introduction/what-is-hhai)\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/frameworks/honeyhive.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [HoneyHive](#honeyhive.md)\n\n  - [Prerequisites](#prerequisites.md)\n\n  - [Installation](#installation.md)\n\n  - [Basic Integration Example](#basic-integration-example.md)\n\n    - [Initialize Clients and Setup](#initialize-clients-and-setup.md)\n    - [Connect to Qdrant](#connect-to-qdrant.md)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "token_count": 249,
      "char_count": 996,
      "start_char": 27042,
      "end_char": 28039
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:31",
    "content": "ients and Setup](#initialize-clients-and-setup.md)\n    - [Connect to Qdrant](#connect-to-qdrant.md)\n    - [Create a Collection](#create-a-collection.md)\n    - [Define Embedding Function with Tracing](#define-embedding-function-with-tracing.md)\n    - [Insert Documents with Tracing](#insert-documents-with-tracing.md)\n    - [Retrieve Documents with Tracing](#retrieve-documents-with-tracing.md)\n    - [Generate Response with Tracing](#generate-response-with-tracing.md)\n    - [Complete RAG Pipeline](#complete-rag-pipeline.md)\n    - [Batch Processing](#batch-processing.md)\n    - [Test the RAG Pipeline](#test-the-rag-pipeline.md)\n\n  - [Viewing Traces in HoneyHive](#viewing-traces-in-honeyhive.md)\n\n  - [Further Reading](#further-reading.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/frameworks/honeyhive.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "token_count": 270,
      "char_count": 1022,
      "start_char": 27939,
      "end_char": 28961
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md:chunk:32",
    "content": "anding_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_frameworks_honeyhive\\_documentation_frameworks_honeyhive_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_frameworks_honeyhive_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "token_count": 86,
      "char_count": 294,
      "start_char": 28861,
      "end_char": 29885
    }
  }
]