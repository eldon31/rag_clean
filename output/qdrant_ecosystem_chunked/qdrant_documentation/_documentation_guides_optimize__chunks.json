[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:0",
    "content": "Optimize Performance - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 277,
      "char_count": 1017,
      "start_char": 0,
      "end_char": 1017
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:1",
    "content": "tart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 256,
      "char_count": 1014,
      "start_char": 917,
      "end_char": 1933
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:2",
    "content": "mentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 253,
      "char_count": 1023,
      "start_char": 1833,
      "end_char": 2857
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:3",
    "content": "cumentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 255,
      "char_count": 992,
      "start_char": 2757,
      "end_char": 3749
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:4",
    "content": "(https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 242,
      "char_count": 1001,
      "start_char": 3649,
      "end_char": 4651
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:5",
    "content": "- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 229,
      "char_count": 1011,
      "start_char": 4551,
      "end_char": 5563
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:6",
    "content": "sync-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 261,
      "char_count": 1016,
      "start_char": 5463,
      "end_char": 6479
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:7",
    "content": "ser Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 252,
      "char_count": 1020,
      "start_char": 6379,
      "end_char": 7400
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:8",
    "content": "ion/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 250,
      "char_count": 1001,
      "start_char": 7300,
      "end_char": 8301
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:9",
    "content": "ics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 261,
      "char_count": 1012,
      "start_char": 8201,
      "end_char": 9214
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:10",
    "content": "/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 235,
      "char_count": 1006,
      "start_char": 9114,
      "end_char": 10121
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:11",
    "content": "aborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 231,
      "char_count": 1004,
      "start_char": 10021,
      "end_char": 11027
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:12",
    "content": "attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Guides](https://qdrant.tech/documentation/guides/)\n-\n- Optimize Performance\n\n# Optimizing Qdrant Performance: Three Scenarios\n\nDifferent use cases require different balances between memory usage, search speed, and precision. Qdrant is designed to be flexible and customizable so you can tune it to your specific needs.\n\nThis guide will walk you three main optimization strategies:\n\n- High Speed Search & Low Memory Usage\n- High Precision & Low Memory Usage\n- High Precision & High Speed Search\n\n## 1. High-Speed Search with Low Memory Usage",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 232,
      "char_count": 998,
      "start_char": 10927,
      "end_char": 11928
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:13",
    "content": "w Memory Usage\n- High Precision & High Speed Search\n\n## 1. High-Speed Search with Low Memory Usage\n\nTo achieve high search speed with minimal memory usage, you can store vectors on disk while minimizing the number of disk reads. Vector quantization is a technique that compresses vectors, allowing more of them to be stored in memory, thus reducing the need to read from disk.\n\nTo configure in-memory quantization, with on-disk original vectors, you need to create a collection with the following parameters:\n\n- `on_disk`: Stores original vectors on disk.\n- `quantization_config`: Compresses quantized vectors to `int8` using the `scalar` method.\n- `always_ram`: Keeps quantized vectors in RAM.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n        \"size\": 768,\n        \"distance\": \"Cosine\",\n        \"on_disk\": true\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n```python",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 230,
      "char_count": 980,
      "start_char": 11828,
      "end_char": 12809
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:14",
    "content": "lar\": {\n            \"type\": \"int8\",\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE, on_disk=True),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n    on_disk: true,\n  },\n  quantization_config: {\n    scalar: {\n      type: \"int8\",\n      always_ram: true,\n    },\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 251,
      "char_count": 960,
      "start_char": 12709,
      "end_char": 13670
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:15",
    "content": "type: \"int8\",\n      always_ram: true,\n    },\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, QuantizationType, ScalarQuantizationBuilder,\n    VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\n            .quantization_config(\n                ScalarQuantizationBuilder::default()\n                    .r#type(QuantizationType::Int8.into())\n                    .always_ram(true),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 244,
      "char_count": 1013,
      "start_char": 13570,
      "end_char": 14588
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:16",
    "content": "grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\nimport io.qdrant.client.grpc.Collections.QuantizationType;\nimport io.qdrant.client.grpc.Collections.ScalarQuantization;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .setOnDisk(true)\n                            .build())\n                    .build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 192,
      "char_count": 1017,
      "start_char": 14488,
      "end_char": 15506
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:17",
    "content": ".build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()\n                    .setScalar(\n                        ScalarQuantization.newBuilder()\n                            .setType(QuantizationType.Int8)\n                            .setAlwaysRam(true)\n                            .build())\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine, OnDisk = true },\n\tquantizationConfig: new QuantizationConfig\n\t{\n\t\tScalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }\n\t}\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 233,
      "char_count": 1000,
      "start_char": 15406,
      "end_char": 16412
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:18",
    "content": "rant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tOnDisk:   qdrant.PtrOf(true),\n\t}),\n\tQuantizationConfig: qdrant.NewQuantizationScalar(&qdrant.ScalarQuantization{\n\t\tType:      qdrant.QuantizationType_Int8,\n\t\tAlwaysRam: qdrant.PtrOf(true),\n\t}),\n})\n```\n\n### Disable Rescoring for Faster Search (optional)\n\nThis is completely optional. Disabling rescoring with search `params` can further reduce the number of disk reads. Note that this might slightly decrease precision.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"params\": {\n        \"quantization\": {\n            \"rescore\": false\n        }\n    },\n    \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 277,
      "char_count": 976,
      "start_char": 16312,
      "end_char": 17290
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:19",
    "content": "e\n        }\n    },\n    \"limit\": 10\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    search_params=models.SearchParams(\n        quantization=models.QuantizationSearchParams(rescore=False)\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    params: {\n        quantization: {\n            rescore: false,\n        },\n    },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    QuantizationSearchParamsBuilder, QueryPointsBuilder, SearchParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 306,
      "char_count": 1018,
      "start_char": 17190,
      "end_char": 18209
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:20",
    "content": "uilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .params(\n                SearchParamsBuilder::default()\n                    .quantization(QuantizationSearchParamsBuilder::default().rescore(false)),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QuantizationSearchParams;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(\n                        SearchParams.newBuilder()\n                                .setQuantization(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 243,
      "char_count": 1007,
      "start_char": 18109,
      "end_char": 19117
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:21",
    "content": "SearchParams.newBuilder()\n                                .setQuantization(\n                                        QuantizationSearchParams.newBuilder().setRescore(false).build())\n                                .build())\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tsearchParams: new SearchParams\n\t{\n\t\tQuantization = new QuantizationSearchParams { Rescore = false }\n\t},\n\tlimit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tParams: &qdrant.SearchParams{\n\t\tQuantization: &qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 276,
      "char_count": 998,
      "start_char": 19017,
      "end_char": 20039
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:22",
    "content": "qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tParams: &qdrant.SearchParams{\n\t\tQuantization: &qdrant.QuantizationSearchParams{\n\t\t\tRescore: qdrant.PtrOf(true),\n\t\t},\n\t},\n})\n```\n\n## 2. High Precision with Low Memory Usage\n\nIf you require high precision but have limited RAM, you can store both vectors and the HNSW index on disk. This setup reduces memory usage while maintaining search precision.\n\nTo store the vectors `on_disk`, you need to configure both the vectors and the HNSW index:\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\",\n      \"on_disk\": true\n    },\n    \"hnsw_config\": {\n        \"on_disk\": true\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE, on_disk=True),\n    hnsw_config=models.HnswConfigDiff(on_disk=True),\n)\n```",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 283,
      "char_count": 1007,
      "start_char": 19939,
      "end_char": 20956
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:23",
    "content": "=models.Distance.COSINE, on_disk=True),\n    hnsw_config=models.HnswConfigDiff(on_disk=True),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n    on_disk: true,\n  },\n  hnsw_config: {\n    on_disk: true,\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, HnswConfigDiffBuilder,\n    VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine).on_disk(true))\n            .hnsw_config(HnswConfigDiffBuilder::default().on_disk(true)),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 286,
      "char_count": 1023,
      "start_char": 20856,
      "end_char": 21879
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:24",
    "content": "rt io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.HnswConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .setOnDisk(true)\n                            .build())\n                    .build())\n            .setHnswConfig(HnswConfigDiff.newBuilder().",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 204,
      "char_count": 1012,
      "start_char": 21779,
      "end_char": 22791
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:25",
    "content": ".build())\n                    .build())\n            .setHnswConfig(HnswConfigDiff.newBuilder().setOnDisk(true).build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine, OnDisk = true },\n\thnswConfig: new HnswConfigDiff { OnDisk = true }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tOnDisk:   qdrant.PtrOf(true),\n\t}),\n\tHnswConfig: &qdrant.HnswConfigDiff{\n\t\tOnDisk: qdrant.PtrOf(true),\n\t},\n})\n```\n\n### Improving Precision",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 293,
      "char_count": 1009,
      "start_char": 22691,
      "end_char": 23707
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:26",
    "content": "wConfig: &qdrant.HnswConfigDiff{\n\t\tOnDisk: qdrant.PtrOf(true),\n\t},\n})\n```\n\n### Improving Precision\n\nIncrease the `ef` and `m` parameters of the HNSW index to improve precision, even with limited RAM:\n\n```json\n...\n\"hnsw_config\": {\n    \"m\": 64,\n    \"ef_construct\": 512,\n    \"on_disk\": true\n}\n...\n```\n\n**Note:** The speed of this setup depends on the disk’s IOPS (Input/Output Operations Per Second).\\\nYou can use [fio](https://gist.github.com/superboum/aaa45d305700a7873a8ebbab1abddf2b) to measure disk IOPS.\n\n## 3. High Precision with High-Speed Search\n\nFor scenarios requiring both high speed and high precision, keep as much data in RAM as possible. Apply quantization with re-scoring for tunable accuracy.\n\nHere is how you can configure scalar quantization for a collection:\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"quantization_config\": {\n        \"scalar\": {\n            \"type\": \"int8\",\n            \"always_ram\": true\n        }\n    }\n}\n```",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 296,
      "char_count": 1022,
      "start_char": 23607,
      "end_char": 24631
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:27",
    "content": "\"scalar\": {\n            \"type\": \"int8\",\n            \"always_ram\": true\n        }\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    quantization_config=models.ScalarQuantization(\n        scalar=models.ScalarQuantizationConfig(\n            type=models.ScalarType.INT8,\n            always_ram=True,\n        ),\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  quantization_config: {\n    scalar: {\n      type: \"int8\",\n      always_ram: true,\n    },\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, QuantizationType, ScalarQuantizationBuilder,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 259,
      "char_count": 1015,
      "start_char": 24531,
      "end_char": 25553
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:28",
    "content": "ient::qdrant::{\n    CreateCollectionBuilder, Distance, QuantizationType, ScalarQuantizationBuilder,\n    VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\n            .quantization_config(\n                ScalarQuantizationBuilder::default()\n                    .r#type(QuantizationType::Int8.into())\n                    .always_ram(true),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\nimport io.qdrant.client.grpc.Collections.QuantizationType;\nimport io.qdrant.client.grpc.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 238,
      "char_count": 1022,
      "start_char": 25453,
      "end_char": 26475
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:29",
    "content": "tionConfig;\nimport io.qdrant.client.grpc.Collections.QuantizationType;\nimport io.qdrant.client.grpc.Collections.ScalarQuantization;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setQuantizationConfig(\n                QuantizationConfig.newBuilder()\n                    .setScalar(\n                        ScalarQuantization.newBuilder()\n                            .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 179,
      "char_count": 1002,
      "start_char": 26375,
      "end_char": 27377
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:30",
    "content": ".setScalar(\n                        ScalarQuantization.newBuilder()\n                            .setType(QuantizationType.Int8)\n                            .setAlwaysRam(true)\n                            .build())\n                    .build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine},\n\tquantizationConfig: new QuantizationConfig\n\t{\n\t\tScalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }\n\t}\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "token_count": 243,
      "char_count": 1009,
      "start_char": 27277,
      "end_char": 28290
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:31",
    "content": "CollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tQuantizationConfig: qdrant.NewQuantizationScalar(&qdrant.ScalarQuantization{\n\t\tType:      qdrant.QuantizationType_Int8,\n\t\tAlwaysRam: qdrant.PtrOf(true),\n\t}),\n})\n```\n\n### Fine-Tuning Search Parameters\n\nYou can adjust search parameters like `hnsw_ef` and `exact` to balance between speed and precision:\n\n**Key Parameters:**\n\n- `hnsw_ef`: Number of neighbors to visit during search (higher value = better accuracy, slower speed).\n- `exact`: Set to `true` for exact search, which is slower but more accurate. You can use it to compare results of the search with different `hnsw_ef` values versus the ground truth.\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"params\": {\n        \"hnsw_ef\": 128,\n        \"exact\": false\n    },\n    \"limit\": 3\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "token_count": 287,
      "char_count": 1011,
      "start_char": 28190,
      "end_char": 29204
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:32",
    "content": "xact\": false\n    },\n    \"limit\": 3\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    search_params=models.SearchParams(hnsw_ef=128, exact=False),\n    limit=3,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: [0.2, 0.1, 0.9, 0.7],\n    params: {\n        hnsw_ef: 128,\n        exact: false,\n    },\n    limit: 3,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{QueryPointsBuilder, SearchParamsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false)),\n    )",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "token_count": 331,
      "char_count": 1022,
      "start_char": 29104,
      "end_char": 30127
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:33",
    "content": ".limit(3)\n            .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false)),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\nimport io.qdrant.client.grpc.Points.SearchParams;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n                .setParams(SearchParams.newBuilder().setHnswEf(128).setExact(false).build())\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "token_count": 293,
      "char_count": 1018,
      "start_char": 30027,
      "end_char": 31051
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:34",
    "content": "t.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tsearchParams: new SearchParams { HnswEf = 128, Exact = false },\n\tlimit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tParams: &qdrant.SearchParams{\n\t\tHnswEf: qdrant.PtrOf(uint64(128)),\n\t\tExact:  qdrant.PtrOf(false),\n\t},\n})\n```\n\n## Balancing Latency and Throughput\n\nWhen optimizing search performance, latency and throughput are two main metrics to consider:\n\n- **Latency:** Time taken for a single request.\n- **Throughput:** Number of requests handled per second.\n\nThe following optimization approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n### Minimizing Latency",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "token_count": 295,
      "char_count": 994,
      "start_char": 30951,
      "end_char": 31947
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:35",
    "content": ", but in some cases it might be preferable to optimize for one or another.\n\n### Minimizing Latency\n\nTo minimize latency, you can set up Qdrant to use as many cores as possible for a single request. You can do this by setting the number of segments in the collection to be equal to the number of cores in the system.\n\nIn this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"optimizers_config\": {\n        \"default_segment_number\": 16\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    optimizers_config=models.OptimizersConfigDiff(default_segment_number=16),\n)\n```\n\n```typescript",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 35,
      "token_count": 237,
      "char_count": 972,
      "start_char": 31847,
      "end_char": 32820
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:36",
    "content": "optimizers_config=models.OptimizersConfigDiff(default_segment_number=16),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  optimizers_config: {\n    default_segment_number: 16,\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, OptimizersConfigDiffBuilder, VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\n            .optimizers_config(\n                OptimizersConfigDiffBuilder::default().default_segment_number(16),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 36,
      "token_count": 265,
      "char_count": 1006,
      "start_char": 32720,
      "end_char": 33731
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:37",
    "content": "),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setOptimizersConfig(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 37,
      "token_count": 205,
      "char_count": 990,
      "start_char": 33631,
      "end_char": 34625
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:38",
    "content": ".build())\n                    .build())\n            .setOptimizersConfig(\n                OptimizersConfigDiff.newBuilder().setDefaultSegmentNumber(16).build())\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\toptimizersConfig: new OptimizersConfigDiff { DefaultSegmentNumber = 16 }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 38,
      "token_count": 262,
      "char_count": 973,
      "start_char": 34525,
      "end_char": 35525
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:39",
    "content": "768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{\n\t\tDefaultSegmentNumber: qdrant.PtrOf(uint64(16)),\n\t},\n})\n```\n\n### Maximizing Throughput\n\nTo maximize throughput, configure Qdrant to use as many cores as possible to process multiple requests in parallel.\n\nTo do that, use fewer segments (usually 2) of larger size (default 200Mb per segment) to handle more requests in parallel.\n\nLarge segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. However, they will require more time to build the HNSW index.\n\n```http\nPUT /collections/{collection_name}\n{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    },\n    \"optimizers_config\": {\n        \"default_segment_number\": 2,\n        \"max_segment_size\": 5000000\n    }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 39,
      "token_count": 266,
      "char_count": 990,
      "start_char": 35425,
      "end_char": 36421
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:40",
    "content": "QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n    optimizers_config=models.OptimizersConfigDiff(default_segment_number=2, max_segment_size=5000000),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 768,\n    distance: \"Cosine\",\n  },\n  optimizers_config: {\n    default_segment_number: 2,\n    max_segment_size: 5000000,\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, OptimizersConfigDiffBuilder, VectorParamsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 40,
      "token_count": 271,
      "char_count": 1001,
      "start_char": 36321,
      "end_char": 37322
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:41",
    "content": "ient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(768, Distance::Cosine))\n            .optimizers_config(\n                OptimizersConfigDiffBuilder::default().default_segment_number(2).max_segment_size(5000000),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 41,
      "token_count": 232,
      "char_count": 1022,
      "start_char": 37222,
      "end_char": 38245
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:42",
    "content": "Name(\"{collection_name}\")\n            .setVectorsConfig(\n                VectorsConfig.newBuilder()\n                    .setParams(\n                        VectorParams.newBuilder()\n                            .setSize(768)\n                            .setDistance(Distance.Cosine)\n                            .build())\n                    .build())\n            .setOptimizersConfig(\n                OptimizersConfigDiff.newBuilder()\n                    .setDefaultSegmentNumber(2)\n                    .setMaxSegmentSize(5000000)\n                    .build()\n            )\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\toptimizersConfig: new OptimizersConfigDiff { DefaultSegmentNumber = 2, MaxSegmentSize = 5000000 }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 42,
      "token_count": 220,
      "char_count": 1015,
      "start_char": 38145,
      "end_char": 39160
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:43",
    "content": "{ DefaultSegmentNumber = 2, MaxSegmentSize = 5000000 }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     768,\n\t\tDistance: qdrant.Distance_Cosine,\n\t}),\n\tOptimizersConfig: &qdrant.OptimizersConfigDiff{\n\t\tDefaultSegmentNumber: qdrant.PtrOf(uint64(2)),\n\t\tMaxSegmentSize:       qdrant.PtrOf(uint64(5000000)),\n\t},\n})\n```\n\n## Summary\n\nBy adjusting configurations like vector storage, quantization, and search parameters, you can optimize Qdrant for different use cases:\n\n- **Low Memory + High Speed:** Use vector quantization.\n- **High Precision + Low Memory:** Store vectors and HNSW index on disk.\n- **High Precision + High Speed:** Keep data in RAM, use quantization with re-scoring.\n- **Latency vs.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 43,
      "token_count": 283,
      "char_count": 990,
      "start_char": 39060,
      "end_char": 40051
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:44",
    "content": "**High Precision + High Speed:** Keep data in RAM, use quantization with re-scoring.\n- **Latency vs. Throughput:** Adjust segment numbers based on the priority.\n\nChoose the strategy that best fits your use case to get the most out of Qdrant’s performance capabilities.\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/guides/optimize.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Optimizing Qdrant Performance: Three Scenarios](#optimizing-qdrant-performance-three-scenarios.md)\n\n  - [1. High-Speed Search with Low Memory Usage](#1-high-speed-search-with-low-memory-usage.md)\n    - [Disable Rescoring for Faster Search (optional)](#disable-rescoring-for-faster-search-optional.md)\n\n  - [2. High Precision with Low Memory Usage](#2-high-precision-with-low-memory-usage.md)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 44,
      "token_count": 251,
      "char_count": 1007,
      "start_char": 39951,
      "end_char": 40959
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:45",
    "content": "onal.md)\n\n  - [2. High Precision with Low Memory Usage](#2-high-precision-with-low-memory-usage.md)\n    - [Improving Precision](#improving-precision.md)\n\n  - [3. High Precision with High-Speed Search](#3-high-precision-with-high-speed-search.md)\n    - [Fine-Tuning Search Parameters](#fine-tuning-search-parameters.md)\n\n  - [Balancing Latency and Throughput](#balancing-latency-and-throughput.md)\n\n    - [Minimizing Latency](#minimizing-latency.md)\n    - [Maximizing Throughput](#maximizing-throughput.md)\n\n  - [Summary](#summary.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/guides/optimize.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 45,
      "token_count": 279,
      "char_count": 1003,
      "start_char": 40859,
      "end_char": 41883
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md:chunk:46",
    "content": "t.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_guides_optimize\\_documentation_guides_optimize_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_guides_optimize_.md",
      "file_extension": ".md",
      "chunk_index": 46,
      "token_count": 23,
      "char_count": 79,
      "start_char": 41783,
      "end_char": 42807
    }
  }
]