[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:0",
    "content": "Build a Recommendation System with Collaborative Filtering - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 269,
      "char_count": 1022,
      "start_char": 0,
      "end_char": 1024
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:1",
    "content": "drant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 253,
      "char_count": 1006,
      "start_char": 924,
      "end_char": 1930
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:2",
    "content": "e/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 250,
      "char_count": 999,
      "start_char": 1830,
      "end_char": 2830
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:3",
    "content": "tion/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 260,
      "char_count": 1017,
      "start_char": 2730,
      "end_char": 3749
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:4",
    "content": "embed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 247,
      "char_count": 988,
      "start_char": 3649,
      "end_char": 4637
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:5",
    "content": "tation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 235,
      "char_count": 1014,
      "start_char": 4537,
      "end_char": 5551
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:6",
    "content": "s://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 257,
      "char_count": 1004,
      "start_char": 5451,
      "end_char": 6455
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:7",
    "content": "rant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 251,
      "char_count": 1008,
      "start_char": 6355,
      "end_char": 7365
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:8",
    "content": "cumentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 249,
      "char_count": 994,
      "start_char": 7265,
      "end_char": 8259
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:9",
    "content": "[Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 254,
      "char_count": 994,
      "start_char": 8159,
      "end_char": 9156
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:10",
    "content": "ant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 229,
      "char_count": 960,
      "start_char": 9056,
      "end_char": 10017
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:11",
    "content": "- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 229,
      "char_count": 1011,
      "start_char": 9917,
      "end_char": 10929
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:12",
    "content": "sync-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Advanced tutorials](https://qdrant.tech/documentation/advanced-tutorials/)\n-\n- Build a Recommendation System with Collaborative Filtering\n\n# Use Collaborative Filtering to Build a Movie Recommendation System with Qdrant\n\n| Time: 45 min | Level: Intermediate | [](https://githubtocolab.com/qdrant/examples/blob/master/collaborative-filtering/collaborative-filtering.ipynb) |   |",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 237,
      "char_count": 972,
      "start_char": 10829,
      "end_char": 11802
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:13",
    "content": "ocolab.com/qdrant/examples/blob/master/collaborative-filtering/collaborative-filtering.ipynb) |   |\n| ------------ | ------------------- | --------------------------------------------------------------------------------------------------------------- | - |\n\nEvery time Spotify recommends the next song from a band you’ve never heard of, it uses a recommendation algorithm based on other users’ interactions with that song. This type of algorithm is known as **collaborative filtering**.\n\nUnlike content-based recommendations, collaborative filtering excels when the objects’ semantics are loosely or unrelated to users’ preferences. This adaptability is what makes it so fascinating. Movie, music, or book recommendations are good examples of such use cases. After all, we rarely choose which book to read purely based on the plot twists.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 149,
      "char_count": 838,
      "start_char": 11702,
      "end_char": 12542
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:14",
    "content": "of such use cases. After all, we rarely choose which book to read purely based on the plot twists.\n\nThe traditional way to build a collaborative filtering engine involves training a model that converts the sparse matrix of user-to-item relations into a compressed, dense representation of user and item vectors. Some of the most commonly referenced algorithms for this purpose include [SVD (Singular Value Decomposition)](https://en.wikipedia.org/wiki/Singular_value_decomposition) and [Factorization Machines](https://en.wikipedia.org/wiki/Matrix_factorization_%28recommender_systems%29). However, the model training approach requires significant resource investments. Model training necessitates data, regular re-training, and a mature infrastructure.\n\n## Methodology\n\nFortunately, there is a way to build collaborative filtering systems without any model training. You can obtain interpretable recommendations and have a scalable system using a technique based on similarity search.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 184,
      "char_count": 985,
      "start_char": 12442,
      "end_char": 13427
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:15",
    "content": "terpretable recommendations and have a scalable system using a technique based on similarity search. Let’s explore how this works with an example of building a movie recommendation system.\n\n## Implementation\n\nTo implement this, you will use a simple yet powerful resource: [Qdrant with Sparse Vectors](https://qdrant.tech/articles/sparse-vectors/).\n\nNotebook: [You can try this code here](https://githubtocolab.com/qdrant/examples/blob/master/collaborative-filtering/collaborative-filtering.ipynb)\n\n### Setup\n\nYou have to first import the necessary libraries and define the environment.\n\n```python\nimport os\nimport pandas as pd\nimport requests\nfrom qdrant_client import QdrantClient, models\nfrom qdrant_client.models import PointStruct, SparseVector, NamedSparseVector\nfrom collections import defaultdict\n\n# OMDB API Key - for movie posters\nomdb_api_key = os.getenv(\"OMDB_API_KEY\")\n\n# Collection name\ncollection_name = \"movies\"\n\n# Set Qdrant Client\nqdrant_client = QdrantClient(\n    os.getenv(\"QDRANT_HOST\"),\n    api_key=os.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 240,
      "char_count": 1024,
      "start_char": 13327,
      "end_char": 14351
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:16",
    "content": "es\"\n\n# Set Qdrant Client\nqdrant_client = QdrantClient(\n    os.getenv(\"QDRANT_HOST\"),\n    api_key=os.getenv(\"QDRANT_API_KEY\")\n)\n```\n\n### Define output\n\nHere, you will configure the recommendation engine to retrieve movie posters as output.\n\n```python\n# Function to get movie poster using OMDB API\ndef get_movie_poster(imdb_id, api_key):\n    url = f\"https://www.omdbapi.com/?i={imdb_id}&apikey={api_key}\"\n    data = requests.get(url).json()\n    return data.get('Poster'), data\n```\n\n### Prepare the data\n\nLoad the movie datasets. These include three main CSV files: user ratings, movie titles, and OMDB IDs.\n\n```python\n# Load CSV files\nratings_df = pd.read_csv('data/ratings.csv', low_memory=False)\nmovies_df = pd.read_csv('data/movies.csv', low_memory=False)\n\n# Convert movieId in ratings_df and movies_df to string\nratings_df['movieId'] = ratings_df['movieId'].astype(str)\nmovies_df['movieId'] = movies_df['movieId'].astype(str)\n\nrating = ratings_df['rating']\n\n# Normalize ratings\nratings_df['rating'] = (rating - rating.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 266,
      "char_count": 1020,
      "start_char": 14251,
      "end_char": 15271
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:17",
    "content": "pe(str)\n\nrating = ratings_df['rating']\n\n# Normalize ratings\nratings_df['rating'] = (rating - rating.mean()) / rating.std()\n\n# Merge ratings with movie metadata to get movie titles\nmerged_df = ratings_df.merge(\n    movies_df[['movieId', 'title']],\n    left_on='movieId', right_on='movieId', how='inner'\n)\n\n# Aggregate ratings to handle duplicate (userId, title) pairs\nratings_agg_df = merged_df.groupby(['userId', 'movieId']).rating.mean().reset_index()\n\nratings_agg_df.head()\n```\n\n|   | userId | movieId | rating    |\n| - | ------ | ------- | --------- |\n| 0 | 1      | 1       | 0.429960  |\n| 1 | 1      | 1036    | 1.369846  |\n| 2 | 1      | 1049    | -0.509926 |\n| 3 | 1      | 1066    | 0.429960  |\n| 4 | 1      | 110     | 0.429960  |\n\n### Convert to sparse\n\nIf you want to search across numerous reviews from different users, you can represent these reviews in a sparse matrix.\n\n```python\n# Convert ratings to sparse vectors\nuser_sparse_vectors = defaultdict(lambda: {\"values\": [], \"indices\": []})",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 314,
      "char_count": 1003,
      "start_char": 15171,
      "end_char": 16175
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:18",
    "content": "ratings to sparse vectors\nuser_sparse_vectors = defaultdict(lambda: {\"values\": [], \"indices\": []})\nfor row in ratings_agg_df.itertuples():\n    user_sparse_vectors[row.userId][\"values\"].append(row.rating)\n    user_sparse_vectors[row.userId][\"indices\"].append(int(row.movieId))\n```\n\n### Upload the data\n\nHere, you will initialize the Qdrant client and create a new collection to store the data. Convert the user ratings to sparse vectors and include the `movieId` in the payload.\n\n```python\n# Define a data generator\ndef data_generator():\n    for user_id, sparse_vector in user_sparse_vectors.items():\n        yield PointStruct(\n            id=user_id,\n            vector={\"ratings\": SparseVector(\n                indices=sparse_vector[\"indices\"],\n                values=sparse_vector[\"values\"]\n            )},\n            payload={\"user_id\": user_id, \"movie_id\": sparse_vector[\"indices\"]}\n        )\n\n# Upload points using the data generator\nqdrant_client.upload_points(\n    collection_name=collection_name,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 209,
      "char_count": 1005,
      "start_char": 16075,
      "end_char": 17082
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:19",
    "content": "d points using the data generator\nqdrant_client.upload_points(\n    collection_name=collection_name,\n    points=data_generator()\n)\n```\n\n### Define query\n\nIn order to get recommendations, we need to find users with similar tastes to ours. Let’s describe our preferences by providing ratings for some of our favorite movies.\n\n`1` indicates that we like the movie, `-1` indicates that we dislike it.\n\n```python\nmy_ratings = {\n    603: 1,     # Matrix\n    13475: 1,   # Star Trek\n    11: 1,      # Star Wars\n    1091: -1,   # The Thing\n    862: 1,     # Toy Story\n    597: -1,    # Titanic\n    680: -1,    # Pulp Fiction\n    13: 1,      # Forrest Gump\n    120: 1,     # Lord of the Rings\n    87: -1,     # Indiana Jones\n    562: -1     # Die Hard\n}\n```\n\nClick to see the code for `to_vector`\n\n```python\n# Create sparse vector from my_ratings\ndef to_vector(ratings):\n    vector = SparseVector(\n        values=[],\n        indices=[]\n    )\n    for movie_id, rating in ratings.items():\n        vector.values.append(rating)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 308,
      "char_count": 1013,
      "start_char": 16982,
      "end_char": 17996
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:20",
    "content": "indices=[]\n    )\n    for movie_id, rating in ratings.items():\n        vector.values.append(rating)\n        vector.indices.append(movie_id)\n    return vector\n```\n\n### Run the query\n\nFrom the uploaded list of movies with ratings, we can perform a search in Qdrant to get the top most similar users to us.\n\n```python\n# Perform the search\nresults = qdrant_client.query_points(\n    collection_name=collection_name,\n    query=to_vector(my_ratings),\n    using=\"ratings\",\n    limit=20\n).points\n```\n\nNow we can find the movies liked by the other similar users, but we haven’t seen yet. Let’s combine the results from found users, filter out seen movies, and sort by the score.\n\n```python\n# Convert results to scores and sort by score\ndef results_to_scores(results):\n    movie_scores = defaultdict(lambda: 0)\n    for result in results:\n        for movie_id in result.payload[\"movie_id\"]:\n            movie_scores[movie_id] += result.score\n    return movie_scores\n\n# Convert results to scores and sort by score",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 227,
      "char_count": 999,
      "start_char": 17896,
      "end_char": 18897
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:21",
    "content": "es[movie_id] += result.score\n    return movie_scores\n\n# Convert results to scores and sort by score\nmovie_scores = results_to_scores(results)\ntop_movies = sorted(movie_scores.items(), key=lambda x: x[1], reverse=True)\n```\n\nVisualize results in Jupyter Notebook\n\nFinally, we display the top 5 recommended movies along with their posters and titles.\n\n```python\n# Create HTML to display top 5 results\nhtml_content = \"<div class='movies-container'>\"\n\nfor movie_id, score in top_movies[:5]:\n    imdb_id_row = links.loc[links['movieId'] == int(movie_id), 'imdbId']\n    if not imdb_id_row.empty:\n        imdb_id = imdb_id_row.values[0]\n        poster_url, movie_info = get_movie_poster(imdb_id, omdb_api_key)\n        movie_title = movie_info.get('Title', 'Unknown Title')\n        \n        html_content += f\"\"\"\n        <div class='movie-card'>\n            <img src=\"{poster_url}\" alt=\"Poster\" class=\"movie-poster\">\n            <div class=\"movie-title\">{movie_title}</div>\n            <div class=\"movie-score\">Score: {score}</div>",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 250,
      "char_count": 1021,
      "start_char": 18797,
      "end_char": 19819
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:22",
    "content": "v class=\"movie-title\">{movie_title}</div>\n            <div class=\"movie-score\">Score: {score}</div>\n        </div>\n        \"\"\"\n    else:\n        continue  # Skip if imdb_id is not found\n\nhtml_content += \"</div>\"\n\ndisplay(HTML(html_content))\n```\n\n## Recommendations\n\nFor a complete display of movie posters, check the [notebook output](https://github.com/qdrant/examples/blob/master/collaborative-filtering/collaborative-filtering.ipynb). Here are the results without html content.\n\n```text\nToy Story, Score: 131.2033799 \nMonty Python and the Holy Grail, Score: 131.2033799 \nStar Wars: Episode V - The Empire Strikes Back, Score: 131.2033799  \nStar Wars: Episode VI - Return of the Jedi, Score: 131.2033799 \nMen in Black, Score: 131.2033799\n```\n\nOn top of collaborative filtering, we can further enhance the recommendation system by incorporating other features like user demographics, movie genres, or movie tags.\n\nOr, for example, only consider recent ratings via a time-based filter.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 275,
      "char_count": 985,
      "start_char": 19719,
      "end_char": 20704
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:23",
    "content": "movie genres, or movie tags.\n\nOr, for example, only consider recent ratings via a time-based filter. This way, we can recommend movies that are currently popular among users.\n\n## Conclusion\n\nAs demonstrated, it is possible to build an interesting movie recommendation system without intensive model training using Qdrant and Sparse Vectors. This approach not only simplifies the recommendation process but also makes it scalable and interpretable. In future tutorials, we can experiment more with this combination to further enhance our recommendation systems.\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 197,
      "char_count": 930,
      "start_char": 20604,
      "end_char": 21536
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:24",
    "content": "[create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Use Collaborative Filtering to Build a Movie Recommendation System with Qdrant](#use-collaborative-filtering-to-build-a-movie-recommendation-system-with-qdrant.md)\n\n  - [Methodology](#methodology.md)\n\n  - [Implementation](#implementation.md)\n\n    - [Setup](#setup.md)\n    - [Define output](#define-output.md)\n    - [Prepare the data](#prepare-the-data.md)\n    - [Convert to sparse](#convert-to-sparse.md)\n    - [Upload the data](#upload-the-data.md)\n    - [Define query](#define-query.md)\n    - [Run the query](#run-the-query.md)\n\n  - [Recommendations](#recommendations.md)\n\n  - [Conclusion](#conclusion.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/advanced-tutorials/collaborative-filtering.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 272,
      "char_count": 1022,
      "start_char": 21436,
      "end_char": 22461
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md:chunk:25",
    "content": "issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_advanced-tutorials_collaborative-filtering\\_documentation_advanced-tutorials_collaborative-filtering_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_advanced-tutorials_collaborative-filtering_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 84,
      "char_count": 282,
      "start_char": 22361,
      "end_char": 23385
    }
  }
]