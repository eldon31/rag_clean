[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:0",
    "content": "Vectors - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 275,
      "char_count": 1004,
      "start_char": 0,
      "end_char": 1004
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:1",
    "content": "tart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 256,
      "char_count": 1014,
      "start_char": 904,
      "end_char": 1920
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:2",
    "content": "mentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 253,
      "char_count": 1023,
      "start_char": 1820,
      "end_char": 2844
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:3",
    "content": "cumentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 255,
      "char_count": 992,
      "start_char": 2744,
      "end_char": 3736
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:4",
    "content": "(https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 242,
      "char_count": 1001,
      "start_char": 3636,
      "end_char": 4638
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:5",
    "content": "- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 229,
      "char_count": 1011,
      "start_char": 4538,
      "end_char": 5550
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:6",
    "content": "sync-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 261,
      "char_count": 1016,
      "start_char": 5450,
      "end_char": 6466
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:7",
    "content": "ser Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 252,
      "char_count": 1020,
      "start_char": 6366,
      "end_char": 7387
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:8",
    "content": "ion/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 250,
      "char_count": 1001,
      "start_char": 7287,
      "end_char": 8288
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:9",
    "content": "ics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 261,
      "char_count": 1012,
      "start_char": 8188,
      "end_char": 9201
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:10",
    "content": "/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 235,
      "char_count": 1006,
      "start_char": 9101,
      "end_char": 10108
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:11",
    "content": "aborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 231,
      "char_count": 1004,
      "start_char": 10008,
      "end_char": 11014
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:12",
    "content": "attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Concepts](https://qdrant.tech/documentation/concepts/)\n-\n- Vectors\n\n# Vectors\n\nVectors (or embeddings) are the core concept of the Qdrant Vector Search engine. Vectors define the similarity between objects in the vector space.\n\nIf a pair of vectors are similar in vector space, it means that the objects they represent are similar in some way.\n\nFor example, if you have a collection of images, you can represent each image as a vector. If two images are similar, their vectors will be close to each other in the vector space.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 232,
      "char_count": 983,
      "start_char": 10914,
      "end_char": 11900
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:13",
    "content": "vector. If two images are similar, their vectors will be close to each other in the vector space.\n\nIn order to obtain a vector representation of an object, you need to apply a vectorization algorithm to the object. Usually, this algorithm is a neural network that converts the object into a fixed-size vector.\n\nThe neural network is usually [trained](https://qdrant.tech/articles/metric-learning-tips/) on a pairs or [triplets](https://qdrant.tech/articles/triplet-loss/) of similar and dissimilar objects, so it learns to recognize a specific type of similarity.\n\nBy using this property of vectors, you can explore your data in a number of ways; e.g. by searching for similar objects, clustering objects, and more.\n\n## Vector Types\n\nModern neural networks can output vectors in different shapes and sizes, and Qdrant supports most of them. Let’s take a look at the most common types of vectors supported by Qdrant.\n\n### Dense Vectors\n\nThis is the most common type of vector.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 211,
      "char_count": 975,
      "start_char": 11800,
      "end_char": 12776
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:14",
    "content": "on types of vectors supported by Qdrant.\n\n### Dense Vectors\n\nThis is the most common type of vector. It is a simple list of numbers, it has a fixed length and each element of the list is a floating-point number.\n\nIt looks like this:\n\n```json\n\n// A piece of a real-world dense vector\n[\n    -0.013052909,\n    0.020387933,\n    -0.007869,\n    -0.11111383,\n    -0.030188112,\n    -0.0053388323,\n    0.0010654867,\n    0.072027855,\n    -0.04167721,\n    0.014839341,\n    -0.032948174,\n    -0.062975034,\n    -0.024837125,\n    ....\n]\n```\n\nThe majority of neural networks create dense vectors, so you can use them with Qdrant without any additional processing. Although compatible with most embedding models out there, Qdrant has been tested with the following [verified embedding providers](https://qdrant.tech/documentation/embeddings/).\n\n### Sparse Vectors\n\nSparse vectors are a special type of vectors. Mathematically, they are the same as dense vectors, but they contain many zeros so they are stored in a special format.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 350,
      "char_count": 1014,
      "start_char": 12676,
      "end_char": 13692
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:15",
    "content": "are the same as dense vectors, but they contain many zeros so they are stored in a special format.\n\nSparse vectors in Qdrant don’t have a fixed length, as it is dynamically allocated during vector insertion. The amount of non-zero values in sparse vectors is currently limited to u32 datatype range (4294967295).\n\nIn order to define a sparse vector, you need to provide a list of non-zero elements and their indexes.\n\n```json\n// A sparse vector with 4 non-zero elements\n{\n    \"indexes\": [1, 3, 5, 7],\n    \"values\": [0.1, 0.2, 0.3, 0.4]\n}\n```\n\nSparse vectors in Qdrant are kept in special storage and indexed in a separate index, so their configuration is different from dense vectors.\n\nTo create a collection with sparse vectors:\n\n```http\nPUT /collections/{collection_name}\n{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n}\n```\n\n```bash\ncurl -X PUT http://localhost:6333/collections/{collection_name} \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n  }'\n```",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 275,
      "char_count": 1021,
      "start_char": 13592,
      "end_char": 14615
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:16",
    "content": "pe: application/json' \\\n  --data-raw '{\n    \"sparse_vectors\": {\n        \"text\": { }\n    }\n  }'\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={},\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(),\n    },\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  sparse_vectors: {\n    text: { },\n  },\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\n};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vector_config = SparseVectorsConfigBuilder::default();\n\nsparse_vector_config.add_named_vector_params(\"text\", SparseVectorParamsBuilder::default());\n\nclient\n    .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 260,
      "char_count": 1016,
      "start_char": 14515,
      "end_char": 15531
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:17",
    "content": "e_vector_config.add_named_vector_params(\"text\", SparseVectorParamsBuilder::default());\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .sparse_vectors_config(sparse_vector_config),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setSparseVectorsConfig(\n                SparseVectorConfig.newBuilder()\n                    .putMap(\"text\", SparseVectorParams.getDefaultInstance()))\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 224,
      "char_count": 1020,
      "start_char": 15431,
      "end_char": 16453
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:18",
    "content": "))\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"{collection_name}\",\n\tsparseVectorsConfig: (\"text\", new SparseVectorParams())\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text\": {},\n\t\t}),\n})\n```\n\nInsert a point with a sparse vector into the created collection:\n\n```http\nPUT /collections/{collection_name}/points\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": {\n                \"text\": {\n                    \"indices\": [1, 3, 5, 7],\n                    \"values\": [0.1, 0.2, 0.3, 0.4]\n                }\n            }",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 276,
      "char_count": 1018,
      "start_char": 16353,
      "end_char": 17372
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:19",
    "content": "\": [1, 3, 5, 7],\n                    \"values\": [0.1, 0.2, 0.3, 0.4]\n                }\n            }\n        }\n    ]\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            payload={},  # Add any additional payload if necessary\n            vector={\n                \"text\": models.SparseVector(\n                    indices=[1, 3, 5, 7],\n                    values=[0.1, 0.2, 0.3, 0.4]\n                )\n            },\n        )\n    ],\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      vector: {\n        text: {\n          indices: [1, 3, 5, 7],\n          values: [0.1, 0.2, 0.3, 0.4]\n        },\n      },\n    }\n  ]\n});\n```\n\n```rust",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 297,
      "char_count": 985,
      "start_char": 17272,
      "end_char": 18258
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:20",
    "content": "[1, 3, 5, 7],\n          values: [0.1, 0.2, 0.3, 0.4]\n        },\n      },\n    }\n  ]\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{NamedVectors, PointStruct, UpsertPointsBuilder, Vector};\n\nuse qdrant_client::{Payload, Qdrant};\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet points = vec![PointStruct::new(\n    1,\n    NamedVectors::default().add_vector(\n        \"text\",\n        Vector::new_sparse(vec![1, 3, 5, 7], vec![0.1, 0.2, 0.3, 0.4]),\n    ),\n    Payload::new(),\n)];\n\nclient\n    .upsert_points(UpsertPointsBuilder::new(\"{collection_name}\", points))\n    .await?;\n```\n\n```java\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorFactory.vector;\nimport static io.qdrant.client.VectorsFactory.namedVectors;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 309,
      "char_count": 999,
      "start_char": 18158,
      "end_char": 19157
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:21",
    "content": "o.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .upsertAsync(\n    \"{collection_name}\",\n    List.of(\n      PointStruct.newBuilder()\n      .setId(id(1))\n      .setVectors(\n        namedVectors(Map.of(\n          \"text\", vector(List.of(1.0f, 2.0f), List.of(6, 7))))\n      )\n      .build()))\n  .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n  collectionName: \"{collection_name}\",\n  points: new List < PointStruct > {\n    new() {\n      Id = 1,\n        Vectors = new Dictionary <string, Vector> {\n          [\"text\"] = ([0.1f, 0.2f, 0.3f, 0.4f], [1, 3, 5, 7])\n        }\n    }\n  }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 320,
      "char_count": 1000,
      "start_char": 19057,
      "end_char": 20058
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:22",
    "content": "fig{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMap(\n\t\t\t\tmap[string]*qdrant.Vector{\n\t\t\t\t\t\"text\": qdrant.NewVectorSparse(\n\t\t\t\t\t\t[]uint32{1, 3, 5, 7},\n\t\t\t\t\t\t[]float32{0.1, 0.2, 0.3, 0.4}),\n\t\t\t\t}),\n\t\t},\n\t},\n})\n```\n\nNow you can run a search with sparse vectors:\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": {\n        \"indices\": [1, 3, 5, 7],\n        \"values\": [0.1, 0.2, 0.3, 0.4]\n    },\n    \"using\": \"text\"\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\n\nresult = client.query_points(\n    collection_name=\"{collection_name}\",\n    query=models.SparseVector(indices=[1, 3, 5, 7], values=[0.1, 0.2, 0.3, 0.4]),\n    using=\"text\",\n).points\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 347,
      "char_count": 985,
      "start_char": 19958,
      "end_char": 20945
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:23",
    "content": "using=\"text\",\n).points\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n    query: {\n        indices: [1, 3, 5, 7],\n        values: [0.1, 0.2, 0.3, 0.4]\n    },\n    using: \"text\",\n    limit: 3,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![(1, 0.2), (3, 0.1), (5, 0.9), (7, 0.7)])\n            .limit(10)\n            .using(\"text\"),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 329,
      "char_count": 1023,
      "start_char": 20845,
      "end_char": 21870
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:24",
    "content": "client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(\n        QueryPoints.newBuilder()\n                .setCollectionName(\"{collection_name}\")\n                .setUsing(\"text\")\n                .setQuery(nearest(List.of(0.1f, 0.2f, 0.3f, 0.4f), List.of(1, 3, 5, 7)))\n                .setLimit(3)\n                .build())\n        .get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: new (float, uint)[] {(0.1f, 1), (0.2f, 3), (0.3f, 5), (0.4f, 7)},\n  usingVector: \"text\",\n  limit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery: qdrant.NewQuerySparse(\n\t\t[]uint32{1, 3, 5, 7},\n\t\t[]float32{0.1, 0.2, 0.3, 0.4}),\n\tUsing: qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 347,
      "char_count": 1015,
      "start_char": 21770,
      "end_char": 22785
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:25",
    "content": "ry: qdrant.NewQuerySparse(\n\t\t[]uint32{1, 3, 5, 7},\n\t\t[]float32{0.1, 0.2, 0.3, 0.4}),\n\tUsing: qdrant.PtrOf(\"text\"),\n})\n```\n\n### Multivectors\n\n**Available as of v1.10.0**\n\nQdrant supports the storing of a variable amount of same-shaped dense vectors in a single point. This means that instead of a single dense vector, you can upload a matrix of dense vectors.\n\nThe length of the matrix is fixed, but the number of vectors in the matrix can be different for each point.\n\nMultivectors look like this:\n\n```json\n// A multivector of size 4\n\"vector\": [\n    [-0.013,  0.020, -0.007, -0.111],\n    [-0.030, -0.055,  0.001,  0.072],\n    [-0.041,  0.014, -0.032, -0.062],\n    ....\n]\n```\n\nThere are two scenarios where multivectors are useful:\n\n- **Multiple representation of the same object** - For example, you can store multiple embeddings for pictures of the same object, taken from different angles. This approach assumes that the payload is same for all vectors.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 320,
      "char_count": 955,
      "start_char": 22685,
      "end_char": 23641
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:26",
    "content": "bject, taken from different angles. This approach assumes that the payload is same for all vectors.\n- **Late interaction embeddings** - Some text embedding models can output multiple vectors for a single text. For example, a family of models such as ColBERT output a relatively small vector for each token in the text.\n\nIn order to use multivectors, we need to specify a function that will be used to compare between matrices of vectors\n\nCurrently, Qdrant supports `max_sim` function, which is defined as a sum of maximum similarities between each pair of vectors in the matrices.\n\n$$ score = \\sum\\_{i=1}^{N} \\max\\_{j=1}^{M} \\text{Sim}(\\text{vectorA}\\_i, \\text{vectorB}\\_j) $$\n\nWhere $N$ is the number of vectors in the first matrix, $M$ is the number of vectors in the second matrix, and $\\text{Sim}$ is a similarity function, for example, cosine similarity.\n\nTo use multivectors, create a collection with the following configuration:\n\n```http\nPUT collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 250,
      "char_count": 1012,
      "start_char": 23541,
      "end_char": 24554
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:27",
    "content": "llowing configuration:\n\n```http\nPUT collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\",\n    \"multivector_config\": {\n      \"comparator\": \"max_sim\"\n    }\n  }\n}\n```\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=128,\n        distance=models.Distance.COSINE,\n        multivector_config=models.MultiVectorConfig(\n            comparator=models.MultiVectorComparator.MAX_SIM\n        ),\n    ),\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 128,\n    distance: \"Cosine\",\n    multivector_config: {\n      comparator: \"max_sim\"\n    }\n  },\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, VectorParamsBuilder,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 266,
      "char_count": 1024,
      "start_char": 24454,
      "end_char": 25479
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:28",
    "content": "`\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, VectorParamsBuilder,\n    MultiVectorComparator, MultiVectorConfigBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(\n                VectorParamsBuilder::new(100, Distance::Cosine)\n                    .multivector_config(\n                        MultiVectorConfigBuilder::new(MultiVectorComparator::MaxSim)\n                    ),\n            ),\n    )\n    .await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.MultiVectorComparator;\nimport io.qdrant.client.grpc.Collections.MultiVectorConfig;\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 232,
      "char_count": 997,
      "start_char": 25379,
      "end_char": 26376
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:29",
    "content": "nt.client.grpc.Collections.VectorParams;\n\nQdrantClient client =\n  new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.createCollectionAsync(\"{collection_name}\",\n  VectorParams.newBuilder().setSize(128)\n  .setDistance(Distance.Cosine)\n  .setMultivectorConfig(MultiVectorConfig.newBuilder()\n    .setComparator(MultiVectorComparator.MaxSim)\n    .build())\n  .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 128,\n      Distance = Distance.Cosine,\n      MultivectorConfig = new() {\n        Comparator = MultiVectorComparator.MaxSim\n      }\n  }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 264,
      "char_count": 1011,
      "start_char": 26276,
      "end_char": 27288
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:30",
    "content": "ocalhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     128,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tMultivectorConfig: &qdrant.MultiVectorConfig{\n\t\t\tComparator: qdrant.MultiVectorComparator_MaxSim,\n\t\t},\n\t}),\n})\n```\n\nTo insert a point with multivector:\n\n```http\nPUT collections/{collection_name}/points\n{\n  \"points\": [\n    {\n      \"id\": 1,\n      \"vector\": [\n        [-0.013,  0.020, -0.007, -0.111, ...],\n        [-0.030, -0.055,  0.001,  0.072, ...],\n        [-0.041,  0.014, -0.032, -0.062, ...]\n      ]\n    }\n  ]\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            vector=[\n                [-0.013,  0.020, -0.007, -0.111],\n                [-0.030, -0.055,  0.001,  0.072],",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "token_count": 373,
      "char_count": 1022,
      "start_char": 27188,
      "end_char": 28211
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:31",
    "content": "[-0.013,  0.020, -0.007, -0.111],\n                [-0.030, -0.055,  0.001,  0.072],\n                [-0.041,  0.014, -0.032, -0.062]\n            ],\n        )\n    ],\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id: 1,\n      vector: [\n        [-0.013,  0.020, -0.007, -0.111, ...],\n        [-0.030, -0.055,  0.001,  0.072, ...],\n        [-0.041,  0.014, -0.032, -0.062, ...]\n      ],\n    }\n  ]\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder, Vector};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet points = vec![\n    PointStruct::new(\n        1,\n        Vector::new_multi(vec![\n            vec![-0.013, 0.020, -0.007, -0.111],\n            vec![-0.030, -0.055, 0.001, 0.072],\n            vec![-0.041, 0.014, -0.032, -0.062],\n        ]),\n        Payload::new()\n    )",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "token_count": 450,
      "char_count": 1006,
      "start_char": 28111,
      "end_char": 29134
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:32",
    "content": ", 0.072],\n            vec![-0.041, 0.014, -0.032, -0.062],\n        ]),\n        Payload::new()\n    )\n];\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\"{collection_name}\", points)\n    ).await?;\n```\n\n```java\nimport java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorsFactory.vectors;\nimport static io.qdrant.client.VectorFactory.multiVector;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n.upsertAsync(\n    \"{collection_name}\",\n    List.of(\n        PointStruct.newBuilder()\n            .setId(id(1))\n            .setVectors(vectors(multiVector(new float[][] {\n                {-0.013f,  0.020f, -0.007f, -0.111f},\n                {-0.030f, -0.055f,  0.001f,  0.072f},\n                {-0.041f,  0.014f, -0.032f, -0.062f}\n            })))\n            .build()",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "token_count": 338,
      "char_count": 1022,
      "start_char": 29034,
      "end_char": 30057
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:33",
    "content": "0.072f},\n                {-0.041f,  0.014f, -0.032f, -0.062f}\n            })))\n            .build()\n    ))\n.get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n  collectionName: \"{collection_name}\",\n  points: new List <PointStruct> {\n    new() {\n      Id = 1,\n        Vectors = new float[][] {\n          [-0.013f, 0.020f, -0.007f, -0.111f],\n          [-0.030f, -0.05f, 0.001f, 0.072f],\n          [-0.041f, 0.014f, -0.032f, -0.062f ],\n        },\n    },\n  }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMulti(\n\t\t\t\t[][]float32{\n\t\t\t\t\t{-0.013, 0.020, -0.007, -0.111},\n\t\t\t\t\t{-0.030, -0.055, 0.001, 0.072},\n\t\t\t\t\t{-0.041, 0.014, -0.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "token_count": 435,
      "char_count": 1023,
      "start_char": 29957,
      "end_char": 30980
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:34",
    "content": "{-0.013, 0.020, -0.007, -0.111},\n\t\t\t\t\t{-0.030, -0.055, 0.001, 0.072},\n\t\t\t\t\t{-0.041, 0.014, -0.032, -0.062}}),\n\t\t},\n\t},\n})\n```\n\nTo search with multivector (available in `query` API):\n\n```http\nPOST collections/{collection_name}/points/query\n{\n  \"query\": [\n    [-0.013,  0.020, -0.007, -0.111, ...],\n    [-0.030, -0.055,  0.001,  0.072, ...],\n    [-0.041,  0.014, -0.032, -0.062, ...]\n  ]\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[\n        [-0.013,  0.020, -0.007, -0.111],\n        [-0.030, -0.055,  0.001,  0.072],\n        [-0.041,  0.014, -0.032, -0.062]\n    ],\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  \"query\": [\n    [-0.013, 0.020, -0.007, -0.111],\n    [-0.030, -0.055, 0.001, 0.072],\n    [-0.041, 0.014, -0.032, -0.062]\n  ]",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 34,
      "token_count": 519,
      "char_count": 1016,
      "start_char": 30880,
      "end_char": 31903
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:35",
    "content": "0.020, -0.007, -0.111],\n    [-0.030, -0.055, 0.001, 0.072],\n    [-0.041, 0.014, -0.032, -0.062]\n  ]\n});\n```\n\n```rust\nuse qdrant_client::Qdrant;\nuse qdrant_client::qdrant::{ QueryPointsBuilder, VectorInput };\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet res = client.query(\n    QueryPointsBuilder::new(\"{collection_name}\")\n        .query(VectorInput::new_multi(\n            vec![\n                vec![-0.013,  0.020, -0.007, -0.111],\n                vec![-0.030, -0.055,  0.001,  0.072],\n                vec![-0.041,  0.014, -0.032, -0.062],\n            ]\n        ))\n).await?;\n```\n\n```java\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 35,
      "token_count": 369,
      "char_count": 999,
      "start_char": 31803,
      "end_char": 32802
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:36",
    "content": "ld());\n\nclient.queryAsync(QueryPoints.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setQuery(nearest(new float[][] {\n        {-0.013f, 0.020f, -0.007f, -0.111f}, \n        {-0.030f, -0.055f, 0.001f, 0.072f}, \n        {-0.041f, 0.014f, -0.032f, -0.062f}\n    }))\n    .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n  collectionName: \"{collection_name}\",\n  query: new float[][] {\n    [-0.013f, 0.020f, -0.007f, -0.111f],\n    [-0.030f, -0.055f, 0.001 , 0.072f],\n    [-0.041f, 0.014f, -0.032f, -0.062f],\n  }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery: qdrant.NewQueryMulti(\n\t\t[][]float32{\n\t\t\t{-0.013, 0.020, -0.007, -0.111},\n\t\t\t{-0.030, -0.055, 0.001, 0.072},\n\t\t\t{-0.041, 0.014, -0.032, -0.062},\n\t\t}),\n})\n```",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 36,
      "token_count": 470,
      "char_count": 1019,
      "start_char": 32702,
      "end_char": 33723
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:37",
    "content": ".007, -0.111},\n\t\t\t{-0.030, -0.055, 0.001, 0.072},\n\t\t\t{-0.041, 0.014, -0.032, -0.062},\n\t\t}),\n})\n```\n\n## Named Vectors\n\nIn Qdrant, you can store multiple vectors of different sizes and [types](#vector-types.md) in the same data [point](https://qdrant.tech/documentation/concepts/points/). This is useful when you need to define your data with multiple embeddings to represent different features or modalities (e.g., image, text or video).\n\nTo store different vectors for each point, you need to create separate named vector spaces in the [collection](https://qdrant.tech/documentation/concepts/collections/). You can define these vector spaces during collection creation and manage them independently.\n\nEach vector should have a unique name. Vectors can represent different modalities and you can use different embedding models to generate them.\n\nTo create a collection with named vectors, you need to specify a configuration for each vector:\n\n```http\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"image\": {",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 37,
      "token_count": 269,
      "char_count": 1016,
      "start_char": 33623,
      "end_char": 34640
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:38",
    "content": "ration for each vector:\n\n```http\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"image\": {\n      \"size\": 4,\n      \"distance\": \"Dot\"\n    },\n    \"text\": {\n      \"size\": 5,\n      \"distance\": \"Cosine\"\n    }\n  },\n  \"sparse_vectors\": {\n    \"text-sparse\": {}\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config={\n        \"image\": models.VectorParams(size=4, distance=models.Distance.DOT),\n        \"text\": models.VectorParams(size=5, distance=models.Distance.COSINE),\n    },\n    sparse_vectors_config={\"text-sparse\": models.SparseVectorParams()},\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n    vectors: {\n        image: { size: 4, distance: \"Dot\" },\n        text: { size: 5, distance: \"Cosine\" },\n    },",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 38,
      "token_count": 274,
      "char_count": 1009,
      "start_char": 34540,
      "end_char": 35550
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:39",
    "content": "image: { size: 4, distance: \"Dot\" },\n        text: { size: 5, distance: \"Cosine\" },\n    },\n    sparse_vectors: {\n        text_sparse: {}\n    }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Distance, SparseVectorParamsBuilder, SparseVectorsConfigBuilder,\n    VectorParamsBuilder, VectorsConfigBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut vector_config = VectorsConfigBuilder::default();\nvector_config.add_named_vector_params(\"text\", VectorParamsBuilder::new(5, Distance::Dot));\nvector_config.add_named_vector_params(\"image\", VectorParamsBuilder::new(4, Distance::Cosine));\n\nlet mut sparse_vectors_config = SparseVectorsConfigBuilder::default();\nsparse_vectors_config\n    .add_named_vector_params(\"text-sparse\", SparseVectorParamsBuilder::default());\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(vector_config)\n            .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 39,
      "token_count": 239,
      "char_count": 993,
      "start_char": 35450,
      "end_char": 36452
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:40",
    "content": "CollectionBuilder::new(\"{collection_name}\")\n            .vectors_config(vector_config)\n            .sparse_vectors_config(sparse_vectors_config),\n    )\n    .await?;\n```\n\n```java\nimport java.util.Map;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParamsMap;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n    .createCollectionAsync(\n        CreateCollection.newBuilder()\n            .setCollectionName(\"{collection_name}\")\n            .setVectorsConfig(VectorsConfig.newBuilder().setParamsMap(\n                VectorParamsMap.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 40,
      "token_count": 221,
      "char_count": 1019,
      "start_char": 36352,
      "end_char": 37371
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:41",
    "content": ".setVectorsConfig(VectorsConfig.newBuilder().setParamsMap(\n                VectorParamsMap.newBuilder().putAllMap(Map.of(\"image\",\n                    VectorParams.newBuilder()\n                        .setSize(4)\n                        .setDistance(Distance.Dot)\n                        .build(),\n                    \"text\",\n                    VectorParams.newBuilder()\n                        .setSize(5)\n                        .setDistance(Distance.Cosine)\n                        .build()))))\n            .setSparseVectorsConfig(SparseVectorConfig.newBuilder().putMap(\n                \"text-sparse\", SparseVectorParams.getDefaultInstance()))\n            .build())\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParamsMap\n  {\n      Map = {\n      [\"image\"] = new VectorParams {\n        Size = 4, Distance = Distance.Dot\n      },",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 41,
      "token_count": 203,
      "char_count": 1012,
      "start_char": 37271,
      "end_char": 38293
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:42",
    "content": "Map = {\n      [\"image\"] = new VectorParams {\n        Size = 4, Distance = Distance.Dot\n      },\n      [\"text\"] = new VectorParams {\n        Size = 5, Distance = Distance.Cosine\n      },\n    }\n  },\n  sparseVectorsConfig: new SparseVectorConfig\n  {\n      Map = {\n        [\"text-sparse\"] = new()\n    }\n  }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfigMap(\n\t\tmap[string]*qdrant.VectorParams{\n\t\t\t\"image\": {\n\t\t\t\tSize:     4,\n\t\t\t\tDistance: qdrant.Distance_Dot,\n\t\t\t},\n\t\t\t\"text\": {\n\t\t\t\tSize:     5,\n\t\t\t\tDistance: qdrant.Distance_Cosine,\n\t\t\t},\n\t\t}),\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text-sparse\": {},\n\t\t},\n\t),\n})\n```\n\nTo insert a point with named vectors:\n\n```http",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 42,
      "token_count": 286,
      "char_count": 984,
      "start_char": 38193,
      "end_char": 39182
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:43",
    "content": "VectorParams{\n\t\t\t\"text-sparse\": {},\n\t\t},\n\t),\n})\n```\n\nTo insert a point with named vectors:\n\n```http\nPUT /collections/{collection_name}/points?wait=true\n{\n    \"points\": [\n        {\n            \"id\": 1,\n            \"vector\": {\n                \"image\": [0.9, 0.1, 0.1, 0.2],\n                \"text\": [0.4, 0.7, 0.1, 0.8, 0.1],\n                \"text-sparse\": {\n                  \"indices\": [1, 3, 5, 7],\n                  \"values\": [0.1, 0.2, 0.3, 0.4]\n                }\n            }\n        }\n    ]\n}\n```\n\n```python\nclient.upsert(\n    collection_name=\"{collection_name}\",\n    points=[\n        models.PointStruct(\n            id=1,\n            vector={\n                \"image\": [0.9, 0.1, 0.1, 0.2],\n                \"text\": [0.4, 0.7, 0.1, 0.8, 0.1],\n                \"text-sparse\": {\n                    \"indices\": [1, 3, 5, 7],\n                    \"values\": [0.1, 0.2, 0.3, 0.4],\n                },\n            },\n        ),\n    ],\n)\n```\n\n```typescript\nclient.upsert(\"{collection_name}\", {\n    points: [\n        {",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 43,
      "token_count": 330,
      "char_count": 1010,
      "start_char": 39082,
      "end_char": 40093
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:44",
    "content": "),\n    ],\n)\n```\n\n```typescript\nclient.upsert(\"{collection_name}\", {\n    points: [\n        {\n            id: 1,\n            vector: {\n                image: [0.9, 0.1, 0.1, 0.2],\n                text: [0.4, 0.7, 0.1, 0.8, 0.1],\n                text_sparse: {\n                    indices: [1, 3, 5, 7],\n                    values: [0.1, 0.2, 0.3, 0.4]\n                }\n            },\n        },\n    ],\n});\n```\n\n```rust\n\nuse qdrant_client::qdrant::{\n    NamedVectors, PointStruct, UpsertPointsBuilder, Vector,\n};\nuse qdrant_client::Payload;\n\nclient\n    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"{collection_name}\",\n            vec![PointStruct::new(\n                1,\n                NamedVectors::default()\n                    .add_vector(\"text\", Vector::new_dense(vec![0.4, 0.7, 0.1, 0.8, 0.1]))\n                    .add_vector(\"image\", Vector::new_dense(vec![0.9, 0.1, 0.1, 0.2]))\n                    .add_vector(\n                        \"text-sparse\",",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 44,
      "token_count": 294,
      "char_count": 975,
      "start_char": 39993,
      "end_char": 40977
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:45",
    "content": "(vec![0.9, 0.1, 0.1, 0.2]))\n                    .add_vector(\n                        \"text-sparse\",\n                        Vector::new_sparse(vec![1, 3, 5, 7], vec![0.1, 0.2, 0.3, 0.4]),\n                    ),\n                Payload::default(),\n            )],\n        )\n        .wait(true),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorFactory.vector;\nimport static io.qdrant.client.VectorsFactory.namedVectors;\n\nimport io.qdrant.client.grpc.Points.PointStruct;\n\nclient\n    .upsertAsync(\n        \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n                .setId(id(1))\n                .setVectors(\n                    namedVectors(\n                        Map.of(\n                            \"image\",\n                            vector(List.of(0.9f, 0.1f, 0.1f, 0.2f)),\n                            \"text\",\n                            vector(List.of(0.4f, 0.7f, 0.1f, 0.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 45,
      "token_count": 259,
      "char_count": 1024,
      "start_char": 40877,
      "end_char": 41901
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:46",
    "content": "\"text\",\n                            vector(List.of(0.4f, 0.7f, 0.1f, 0.8f, 0.1f)),\n                            \"text-sparse\",\n                            vector(List.of(0.1f, 0.2f, 0.3f, 0.4f), List.of(1, 3, 5, 7)))))\n                .build()))\n    .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nawait client.UpsertAsync(\n    collectionName: \"{collection_name}\",\n    points: new List<PointStruct>\n    {\n        new()\n        {\n            Id = 1,\n            Vectors = new Dictionary<string, Vector>\n            {\n                [\"image\"] = new() {\n                    Data = {0.9f, 0.1f, 0.1f, 0.2f}\n                },\n                [\"text\"] = new() {\n                    Data = {0.4f, 0.7f, 0.1f, 0.8f, 0.1f}\n                },\n                [\"text-sparse\"] = ([0.1f, 0.2f, 0.3f, 0.4f], [1, 3, 5, 7]),\n            }\n        }\n    }\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient.Upsert(context.Background(), &qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 46,
      "token_count": 328,
      "char_count": 983,
      "start_char": 41801,
      "end_char": 42813
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:47",
    "content": "(\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient.Upsert(context.Background(), &qdrant.UpsertPoints{\n\tCollectionName: \"{collection_name}\",\n\tPoints: []*qdrant.PointStruct{\n\t\t{\n\t\t\tId: qdrant.NewIDNum(1),\n\t\t\tVectors: qdrant.NewVectorsMap(map[string]*qdrant.Vector{\n\t\t\t\t\"image\": qdrant.NewVector(0.9, 0.1, 0.1, 0.2),\n\t\t\t\t\"text\":  qdrant.NewVector(0.4, 0.7, 0.1, 0.8, 0.1),\n\t\t\t\t\"text-sparse\": qdrant.NewVectorSparse(\n\t\t\t\t\t[]uint32{1, 3, 5, 7},\n\t\t\t\t\t[]float32{0.1, 0.2, 0.3, 0.4}),\n\t\t\t}),\n\t\t},\n\t},\n})\n```\n\nTo search with named vectors (available in `query` API):\n\n```http\nPOST /collections/{collection_name}/points/query\n{\n    \"query\": [0.2, 0.1, 0.9, 0.7],\n    \"using\": \"image\",\n    \"limit\": 3\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.query_points(\n    collection_name=\"{collection_name}\",\n    query=[0.2, 0.1, 0.9, 0.7],\n    using=\"image\",\n    limit=3,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 47,
      "token_count": 380,
      "char_count": 1011,
      "start_char": 42713,
      "end_char": 43727
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:48",
    "content": "=\"image\",\n    limit=3,\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.query(\"{collection_name}\", {\n  query: [0.2, 0.1, 0.9, 0.7],\n  using: \"image\",\n  limit: 3,\n});\n```\n\n```rust\nuse qdrant_client::qdrant::QueryPointsBuilder;\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n    .query(\n        QueryPointsBuilder::new(\"{collection_name}\")\n            .query(vec![0.2, 0.1, 0.9, 0.7])\n            .limit(3)\n            .using(\"image\"),\n    )\n    .await?;\n```\n\n```java\nimport java.util.List;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.QueryPoints;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 48,
      "token_count": 302,
      "char_count": 992,
      "start_char": 43627,
      "end_char": 44619
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:49",
    "content": "newBuilder(\"localhost\", 6334, false).build());\n\nclient.queryAsync(QueryPoints.newBuilder()\n        .setCollectionName(\"{collection_name}\")\n        .setQuery(nearest(0.2f, 0.1f, 0.9f, 0.7f))\n        .setUsing(\"image\")\n        .setLimit(3)\n        .build()).get();\n```\n\n```csharp\nusing Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.QueryAsync(\n\tcollectionName: \"{collection_name}\",\n\tquery: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\tusingVector: \"image\",\n\tlimit: 3\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.Query(context.Background(), &qdrant.QueryPoints{\n\tCollectionName: \"{collection_name}\",\n\tQuery:          qdrant.NewQuery(0.2, 0.1, 0.9, 0.7),\n\tUsing:          qdrant.PtrOf(\"image\"),\n})\n```\n\n## Datatypes\n\nNewest versions of embeddings models generate vectors with very large dimentionalities.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 49,
      "token_count": 300,
      "char_count": 953,
      "start_char": 44519,
      "end_char": 45472
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:50",
    "content": "# Datatypes\n\nNewest versions of embeddings models generate vectors with very large dimentionalities. With OpenAI’s `text-embedding-3-large` embedding model, the dimensionality can go up to 3072.\n\nThe amount of memory required to store such vectors grows linearly with the dimensionality, so it is important to choose the right datatype for the vectors.\n\nThe choice between datatypes is a trade-off between memory consumption and precision of vectors.\n\nQdrant supports a number of datatypes for both dense and sparse vectors:\n\n**Float32**\n\nThis is the default datatype for vectors in Qdrant. It is a 32-bit (4 bytes) floating-point number. The standard OpenAI embedding of 1536 dimensionality will require 6KB of memory to store in Float32.\n\nYou don’t need to specify the datatype for vectors in Qdrant, as it is set to Float32 by default.\n\n**Float16**\n\nThis is a 16-bit (2 bytes) floating-point number. It is also known as half-precision float. Intuitively, it looks like this:\n\n```text",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 50,
      "token_count": 238,
      "char_count": 986,
      "start_char": 45372,
      "end_char": 46359
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:51",
    "content": "g-point number. It is also known as half-precision float. Intuitively, it looks like this:\n\n```text\nfloat32 -> float16 delta (float32 - float16).abs\n\n0.79701585 -> 0.796875   delta 0.00014084578\n0.7850789  -> 0.78515625 delta 0.00007736683\n0.7775044  -> 0.77734375 delta 0.00016063452\n0.85776305 -> 0.85791016 delta 0.00014710426\n0.6616839  -> 0.6616211  delta 0.000062823296\n```\n\nThe main advantage of Float16 is that it requires half the memory of Float32, while having virtually no impact on the quality of vector search.\n\nTo use Float16, you need to specify the datatype for vectors in the collection configuration:\n\n```http\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\",\n    \"datatype\": \"float16\" // <-- For dense vectors\n  },\n  \"sparse_vectors\": {\n    \"text\": {\n      \"index\": {\n        \"datatype\": \"float16\" // <-- And for sparse vectors \n      }\n    }\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 51,
      "token_count": 395,
      "char_count": 975,
      "start_char": 46259,
      "end_char": 47236
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:52",
    "content": "sparse vectors \n      }\n    }\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=128,\n        distance=models.Distance.COSINE,\n        datatype=models.Datatype.FLOAT16\n    ),\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            index=models.SparseIndexParams(datatype=models.Datatype.FLOAT16)\n        ),\n    },\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 128,\n    distance: \"Cosine\",\n    datatype: \"float16\"\n  },\n  sparse_vectors: {\n    text: {\n      index: {\n        datatype: \"float16\"\n      }\n    }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 52,
      "token_count": 248,
      "char_count": 943,
      "start_char": 47136,
      "end_char": 48081
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:53",
    "content": "ndex: {\n        datatype: \"float16\"\n      }\n    }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Datatype, Distance, SparseIndexConfigBuilder, SparseVectorParamsBuilder, SparseVectorsConfigBuilder, VectorParamsBuilder\n};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vector_config = SparseVectorsConfigBuilder::default();\nsparse_vector_config.add_named_vector_params(\n    \"text\",\n    SparseVectorParamsBuilder::default()\n        .index(SparseIndexConfigBuilder::default().datatype(Datatype::Float32)),\n);\n\nlet create_collection = CreateCollectionBuilder::new(\"{collection_name}\")\n    .sparse_vectors_config(sparse_vector_config)\n    .vectors_config(\n        VectorParamsBuilder::new(128, Distance::Cosine).datatype(Datatype::Float16),\n    );\n\nclient.create_collection(create_collection).await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 53,
      "token_count": 250,
      "char_count": 1024,
      "start_char": 47981,
      "end_char": 49005
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:54",
    "content": "nt.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Datatype;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.SparseIndexConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .createCollectionAsync(\n    CreateCollection.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setVectorsConfig(VectorsConfig.newBuilder()\n      .setParams(VectorParams.newBuilder()\n        .setSize(128)\n        .setDistance(Distance.Cosine)\n        .setDatatype(Datatype.Float16)\n        .build())\n      .build())\n    .setSparseVectorsConfig(\n      SparseVectorConfig.newBuilder()",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 54,
      "token_count": 233,
      "char_count": 1020,
      "start_char": 48905,
      "end_char": 49926
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:55",
    "content": ".build())\n      .build())\n    .setSparseVectorsConfig(\n      SparseVectorConfig.newBuilder()\n      .putMap(\"text\", SparseVectorParams.newBuilder()\n        .setIndex(SparseIndexConfig.newBuilder()\n          .setDatatype(Datatype.Float16)\n          .build())\n        .build()))\n    .build())\n  .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 128,\n      Distance = Distance.Cosine,\n      Datatype = Datatype.Float16\n  },\n  sparseVectorsConfig: (\n    \"text\",\n    new SparseVectorParams {\n      Index = new SparseIndexConfig {\n        Datatype = Datatype.Float16\n      }\n    }\n  )\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 55,
      "token_count": 263,
      "char_count": 1004,
      "start_char": 49826,
      "end_char": 50838
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:56",
    "content": "ocalhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     128,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tDatatype: qdrant.Datatype_Float16.Enum(),\n\t}),\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text\": {\n\t\t\t\tIndex: &qdrant.SparseIndexConfig{\n\t\t\t\t\tDatatype: qdrant.Datatype_Float16.Enum(),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n})\n```\n\n**Uint8**\n\nAnother step towards memory optimization is to use the Uint8 datatype for vectors. Unlike Float16, Uint8 is not a floating-point number, but an integer number in the range from 0 to 255.\n\nNot all embeddings models generate vectors in the range from 0 to 255, so you need to be careful when using Uint8 datatype.\n\nIn order to convert a number from float range to Uint8 range, you need to apply a process called quantization.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 56,
      "token_count": 258,
      "char_count": 955,
      "start_char": 50738,
      "end_char": 51695
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:57",
    "content": "convert a number from float range to Uint8 range, you need to apply a process called quantization.\n\nSome embedding providers may provide embeddings in a pre-quantized format. One of the most notable examples is the [Cohere int8 & binary embeddings](https://cohere.com/blog/int8-binary-embeddings).\n\nFor other embeddings, you will need to apply quantization yourself.\n\nThere is a difference in how Uint8 vectors are handled for dense and sparse vectors. Dense vectors are required to be in the range from 0 to 255, while sparse vectors can be quantized in-flight.\n\n```http\nPUT /collections/{collection_name}\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\",\n    \"datatype\": \"uint8\" // <-- For dense vectors\n  },\n  \"sparse_vectors\": {\n    \"text\": {\n      \"index\": {\n        \"datatype\": \"uint8\" // <-- For sparse vectors \n      }\n    }\n  }\n}\n```\n\n```python\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 57,
      "token_count": 250,
      "char_count": 989,
      "start_char": 51595,
      "end_char": 52585
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:58",
    "content": "QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"{collection_name}\",\n    vectors_config=models.VectorParams(\n        size=128, distance=models.Distance.COSINE, datatype=models.Datatype.UINT8\n    ),\n    sparse_vectors_config={\n        \"text\": models.SparseVectorParams(\n            index=models.SparseIndexParams(datatype=models.Datatype.UINT8)\n        ),\n    },\n)\n```\n\n```typescript\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\nclient.createCollection(\"{collection_name}\", {\n  vectors: {\n    size: 128,\n    distance: \"Cosine\",\n    datatype: \"uint8\"\n  },\n  sparse_vectors: {\n    text: {\n      index: {\n        datatype: \"uint8\"\n      }\n    }\n  }\n});\n```\n\n```rust\nuse qdrant_client::qdrant::{\n    CreateCollectionBuilder, Datatype, Distance, SparseIndexConfigBuilder,\n    SparseVectorParamsBuilder, SparseVectorsConfigBuilder, VectorParamsBuilder,\n};",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 58,
      "token_count": 254,
      "char_count": 1000,
      "start_char": 52485,
      "end_char": 53487
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:59",
    "content": "xConfigBuilder,\n    SparseVectorParamsBuilder, SparseVectorsConfigBuilder, VectorParamsBuilder,\n};\n\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet mut sparse_vector_config = SparseVectorsConfigBuilder::default();\n\nsparse_vector_config.add_named_vector_params(\n    \"text\",\n    SparseVectorParamsBuilder::default()\n        .index(SparseIndexConfigBuilder::default().datatype(Datatype::Uint8)),\n);\nlet create_collection = CreateCollectionBuilder::new(\"{collection_name}\")\n    .sparse_vectors_config(sparse_vector_config)\n    .vectors_config(\n        VectorParamsBuilder::new(128, Distance::Cosine)\n            .datatype(Datatype::Uint8)\n    );\n\nclient.create_collection(create_collection).await?;\n```\n\n```java\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Collections.CreateCollection;\nimport io.qdrant.client.grpc.Collections.Datatype;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 59,
      "token_count": 236,
      "char_count": 1023,
      "start_char": 53387,
      "end_char": 54410
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:60",
    "content": "pc.Collections.Datatype;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.SparseIndexConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorConfig;\nimport io.qdrant.client.grpc.Collections.SparseVectorParams;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\nQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\nclient\n  .createCollectionAsync(\n    CreateCollection.newBuilder()\n    .setCollectionName(\"{collection_name}\")\n    .setVectorsConfig(VectorsConfig.newBuilder()\n      .setParams(VectorParams.newBuilder()\n        .setSize(128)\n        .setDistance(Distance.Cosine)\n        .setDatatype(Datatype.Uint8)\n        .build())\n      .build())\n    .setSparseVectorsConfig(\n      SparseVectorConfig.newBuilder()\n      .putMap(\"text\", SparseVectorParams.newBuilder()\n        .setIndex(SparseIndexConfig.newBuilder()\n          .setDatatype(Datatype.Uint8)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 60,
      "token_count": 228,
      "char_count": 1016,
      "start_char": 54310,
      "end_char": 55327
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:61",
    "content": "ewBuilder()\n        .setIndex(SparseIndexConfig.newBuilder()\n          .setDatatype(Datatype.Uint8)\n          .build())\n        .build()))\n    .build())\n  .get();\n```\n\n```csharp\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n  collectionName: \"{collection_name}\",\n  vectorsConfig: new VectorParams {\n    Size = 128,\n      Distance = Distance.Cosine,\n      Datatype = Datatype.Uint8\n  },\n  sparseVectorsConfig: (\n    \"text\",\n    new SparseVectorParams {\n      Index = new SparseIndexConfig {\n        Datatype = Datatype.Uint8\n      }\n    }\n  )\n);\n```\n\n```go\nimport (\n\t\"context\"\n\n\t\"github.com/qdrant/go-client/qdrant\"\n)\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\tHost: \"localhost\",\n\tPort: 6334,\n})\n\nclient.CreateCollection(context.Background(), &qdrant.CreateCollection{\n\tCollectionName: \"{collection_name}\",\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     128,\n\t\tDistance: qdrant.Distance_Cosine,",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 61,
      "token_count": 275,
      "char_count": 1016,
      "start_char": 55227,
      "end_char": 56244
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:62",
    "content": "qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\t\tSize:     128,\n\t\tDistance: qdrant.Distance_Cosine,\n\t\tDatatype: qdrant.Datatype_Uint8.Enum(),\n\t}),\n\tSparseVectorsConfig: qdrant.NewSparseVectorsConfig(\n\t\tmap[string]*qdrant.SparseVectorParams{\n\t\t\t\"text\": {\n\t\t\t\tIndex: &qdrant.SparseIndexConfig{\n\t\t\t\t\tDatatype: qdrant.Datatype_Uint8.Enum(),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n})\n```\n\n## Quantization\n\nApart from changing the datatype of the original vectors, Qdrant can create quantized representations of vectors alongside the original ones. This quantized representation can be used to quickly select candidates for rescoring with the original vectors or even used directly for search.\n\nQuantization is applied in the background, during the optimization process.\n\nMore information about the quantization process can be found in the [Quantization](https://qdrant.tech/documentation/guides/quantization/) section.\n\n## Vector Storage\n\nDepending on the requirements of the application, Qdrant can use one of the data storage options.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 62,
      "token_count": 242,
      "char_count": 1010,
      "start_char": 56144,
      "end_char": 57155
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:63",
    "content": "e\n\nDepending on the requirements of the application, Qdrant can use one of the data storage options. Keep in mind that you will have to tradeoff between search speed and the size of RAM used.\n\nMore information about the storage options can be found in the [Storage](https://qdrant.tech/documentation/concepts/storage/#vector-storage) section.\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/vectors.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Vectors](#vectors.md)\n\n  - [Vector Types](#vector-types.md)\n\n    - [Dense Vectors](#dense-vectors.md)\n    - [Sparse Vectors](#sparse-vectors.md)\n    - [Multivectors](#multivectors.md)\n\n  - [Named Vectors](#named-vectors.md)\n\n  - [Datatypes](#datatypes.md)\n\n  - [Quantization](#quantization.md)\n\n  - [Vector Storage](#vector-storage.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 63,
      "token_count": 267,
      "char_count": 1023,
      "start_char": 57055,
      "end_char": 58078
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md:chunk:64",
    "content": "tatypes](#datatypes.md)\n\n  - [Quantization](#quantization.md)\n\n  - [Vector Storage](#vector-storage.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/concepts/vectors.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_concepts_vectors\\_documentation_concepts_vectors_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_concepts_vectors_.md",
      "file_extension": ".md",
      "chunk_index": 64,
      "token_count": 161,
      "char_count": 574,
      "start_char": 57978,
      "end_char": 59002
    }
  }
]