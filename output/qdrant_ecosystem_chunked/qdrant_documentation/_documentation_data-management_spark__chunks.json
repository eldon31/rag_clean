[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:0",
    "content": "Apache Spark - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 279,
      "char_count": 1004,
      "start_char": 0,
      "end_char": 1004
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:1",
    "content": ".tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 267,
      "char_count": 1000,
      "start_char": 904,
      "end_char": 1904
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:2",
    "content": "nfluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 264,
      "char_count": 1011,
      "start_char": 1804,
      "end_char": 2816
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:3",
    "content": "entation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 271,
      "char_count": 1012,
      "start_char": 2716,
      "end_char": 3728
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:4",
    "content": "/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 275,
      "char_count": 1007,
      "start_char": 3628,
      "end_char": 4635
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:5",
    "content": "[LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 269,
      "char_count": 1003,
      "start_char": 4535,
      "end_char": 5540
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:6",
    "content": "meworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 273,
      "char_count": 1015,
      "start_char": 5440,
      "end_char": 6455
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:7",
    "content": "ion/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 257,
      "char_count": 987,
      "start_char": 6355,
      "end_char": 7344
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:8",
    "content": "ering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 259,
      "char_count": 978,
      "start_char": 7244,
      "end_char": 8222
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:9",
    "content": "ion/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 231,
      "char_count": 997,
      "start_char": 8122,
      "end_char": 9119
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:10",
    "content": "cumentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n### Essentials\n\n[Data Ingestion for Beginners](https://qdrant.tech/documentation/data-ingestion-beginners/)\n\n[Simple Agentic RAG System](https://qdrant.tech/documentation/agentic-rag-crewai-zoom/)\n\n[Agentic RAG With LangGraph](https://qdrant.tech/documentation/agentic-rag-langgraph/)\n\n[Agentic RAG Discord Bot with CAMEL-AI](https://qdrant.tech/documentation/agentic-rag-camelai-discord/)\n\n[Multilingual & Multimodal RAG with LlamaIndex](https://qdrant.tech/documentation/multimodal-search/)\n\n[5 Minute RAG with Qdrant and DeepSeek](https://qdrant.tech/documentation/rag-deepseek/)\n\n[Automating Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 280,
      "char_count": 1022,
      "start_char": 9019,
      "end_char": 10043
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:11",
    "content": "ng Processes with Qdrant and n8n](https://qdrant.tech/documentation/qdrant-n8n/)\n\n### Integrations\n\n[Data Management](https://qdrant.tech/documentation/data-management/)\n\n- [Airbyte](https://qdrant.tech/documentation/data-management/airbyte/)\n- [Apache Airflow](https://qdrant.tech/documentation/data-management/airflow/)\n- [Apache Spark](https://qdrant.tech/documentation/data-management/spark/)\n- [CocoIndex](https://qdrant.tech/documentation/data-management/cocoindex/)\n- [cognee](https://qdrant.tech/documentation/data-management/cognee/)\n- [Confluent Kafka](https://qdrant.tech/documentation/data-management/confluent/)\n- [DLT](https://qdrant.tech/documentation/data-management/dlt/)\n- [InfinyOn Fluvio](https://qdrant.tech/documentation/data-management/fluvio/)\n- [Redpanda Connect](https://qdrant.tech/documentation/data-management/redpanda/)\n- [Unstructured](https://qdrant.tech/documentation/data-management/unstructured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 262,
      "char_count": 1025,
      "start_char": 9943,
      "end_char": 10968
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:12",
    "content": "ured/)\n\n[Embeddings](https://qdrant.tech/documentation/embeddings/)\n\n- [Aleph Alpha](https://qdrant.tech/documentation/embeddings/aleph-alpha/)\n- [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/)\n- [Cohere](https://qdrant.tech/documentation/embeddings/cohere/)\n- [Gemini](https://qdrant.tech/documentation/embeddings/gemini/)\n- [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/)\n- [Mistral](https://qdrant.tech/documentation/embeddings/mistral/)\n- [MixedBread](https://qdrant.tech/documentation/embeddings/mixedbread/)\n- [Mixpeek](https://qdrant.tech/documentation/embeddings/mixpeek/)\n- [Nomic](https://qdrant.tech/documentation/embeddings/nomic/)\n- [Nvidia](https://qdrant.tech/documentation/embeddings/nvidia/)\n- [Ollama](https://qdrant.tech/documentation/embeddings/ollama/)\n- [OpenAI](https://qdrant.tech/documentation/embeddings/openai/)\n- [Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 270,
      "char_count": 995,
      "start_char": 10868,
      "end_char": 11863
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:13",
    "content": "[Prem AI](https://qdrant.tech/documentation/embeddings/premai/)\n- [Snowflake Models](https://qdrant.tech/documentation/embeddings/snowflake/)\n- [Twelve Labs](https://qdrant.tech/documentation/embeddings/twelvelabs/)\n- [Upstage](https://qdrant.tech/documentation/embeddings/upstage/)\n- [Voyage AI](https://qdrant.tech/documentation/embeddings/voyage/)\n\n[Frameworks](https://qdrant.tech/documentation/frameworks/)\n\n- [Autogen](https://qdrant.tech/documentation/frameworks/autogen/)\n- [AWS Lakechain](https://qdrant.tech/documentation/frameworks/lakechain/)\n- [CamelAI](https://qdrant.tech/documentation/frameworks/camel/)\n- [Cheshire Cat](https://qdrant.tech/documentation/frameworks/cheshire-cat/)\n- [CrewAI](https://qdrant.tech/documentation/frameworks/crewai/)\n- [Dagster](https://qdrant.tech/documentation/frameworks/dagster/)\n- [DeepEval](https://qdrant.tech/documentation/frameworks/deepeval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 269,
      "char_count": 990,
      "start_char": 11763,
      "end_char": 12753
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:14",
    "content": "peval/)\n- [Dynamiq](https://qdrant.tech/documentation/frameworks/dynamiq/)\n- [Feast](https://qdrant.tech/documentation/frameworks/feast/)\n- [FiftyOne](https://qdrant.tech/documentation/frameworks/fifty-one/)\n- [Firebase Genkit](https://qdrant.tech/documentation/frameworks/genkit/)\n- [Haystack](https://qdrant.tech/documentation/frameworks/haystack/)\n- [HoneyHive](https://qdrant.tech/documentation/frameworks/honeyhive/)\n- [Langchain](https://qdrant.tech/documentation/frameworks/langchain/)\n- [Langchain4J](https://qdrant.tech/documentation/frameworks/langchain4j/)\n- [LangGraph](https://qdrant.tech/documentation/frameworks/langgraph/)\n- [LlamaIndex](https://qdrant.tech/documentation/frameworks/llama-index/)\n- [Mastra](https://qdrant.tech/documentation/frameworks/mastra/)\n- [Mem0](https://qdrant.tech/documentation/frameworks/mem0/)\n- [Microsoft NLWeb](https://qdrant.tech/documentation/frameworks/nlweb/)\n- [Neo4j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 284,
      "char_count": 1019,
      "start_char": 12653,
      "end_char": 13672
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:15",
    "content": "j GraphRAG](https://qdrant.tech/documentation/frameworks/neo4j-graphrag/)\n- [Rig-rs](https://qdrant.tech/documentation/frameworks/rig-rs/)\n- [Semantic-Router](https://qdrant.tech/documentation/frameworks/semantic-router/)\n- [SmolAgents](https://qdrant.tech/documentation/frameworks/smolagents/)\n- [Spring AI](https://qdrant.tech/documentation/frameworks/spring-ai/)\n- [Stanford DSPy](https://qdrant.tech/documentation/frameworks/dspy/)\n- [Swiftide](https://qdrant.tech/documentation/frameworks/swiftide/)\n- [Sycamore](https://qdrant.tech/documentation/frameworks/sycamore/)\n- [Testcontainers](https://qdrant.tech/documentation/frameworks/testcontainers/)\n- [txtai](https://qdrant.tech/documentation/frameworks/txtai/)\n- [Vanna.AI](https://qdrant.tech/documentation/frameworks/vanna-ai/)\n- [VectaX - Mirror Security](https://qdrant.tech/documentation/frameworks/mirror-security/)\n- [VoltAgent](https://qdrant.tech/documentation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 270,
      "char_count": 1016,
      "start_char": 13572,
      "end_char": 14590
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:16",
    "content": "entation/frameworks/voltagent/)\n\n[Observability](https://qdrant.tech/documentation/observability/)\n\n- [OpenLLMetry](https://qdrant.tech/documentation/observability/openllmetry/)\n- [OpenLIT](https://qdrant.tech/documentation/observability/openlit/)\n- [Datadog](https://qdrant.tech/documentation/observability/datadog/)\n\n[Platforms](https://qdrant.tech/documentation/platforms/)\n\n- [Apify](https://qdrant.tech/documentation/platforms/apify/)\n- [BuildShip](https://qdrant.tech/documentation/platforms/buildship/)\n- [Keboola](https://qdrant.tech/documentation/platforms/keboola/)\n- [Kotaemon](https://qdrant.tech/documentation/platforms/kotaemon/)\n- [Make.com](https://qdrant.tech/documentation/platforms/make/)\n- [N8N](https://qdrant.tech/documentation/platforms/n8n/)\n- [Pipedream](https://qdrant.tech/documentation/platforms/pipedream/)\n- [Power Apps](https://qdrant.tech/documentation/platforms/powerapps/)\n- [PrivateGPT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 279,
      "char_count": 1018,
      "start_char": 14490,
      "end_char": 15508
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:17",
    "content": "PT](https://qdrant.tech/documentation/platforms/privategpt/)\n- [Salesforce Mulesoft](https://qdrant.tech/documentation/platforms/mulesoft/)\n- [ToolJet](https://qdrant.tech/documentation/platforms/tooljet/)\n- [Vectorize.io](https://qdrant.tech/documentation/platforms/vectorize/)\n\n### Examples\n\n[Search Enhancement](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n\n- [Reranking in Semantic Search](https://qdrant.tech/documentation/search-precision/reranking-semantic-search/)\n- [Automate filtering with LLMs](https://qdrant.tech/documentation/search-precision/automate-filtering-with-llms/)\n\n[Send Data to Qdrant](https://qdrant.tech/documentation/send-data/)\n\n- [Qdrant on Databricks](https://qdrant.tech/documentation/send-data/databricks/)\n- [Semantic Querying with Airflow and Astronomer](https://qdrant.tech/documentation/send-data/qdrant-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 249,
      "char_count": 974,
      "start_char": 15408,
      "end_char": 16382
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:18",
    "content": "-airflow-astronomer/)\n- [How to Setup Seamless Data Streaming with Kafka and Qdrant](https://qdrant.tech/documentation/send-data/data-streaming-kafka-qdrant/)\n\n[Build Prototypes](https://qdrant.tech/documentation/examples/)\n\n- [GraphRAG with Qdrant and Neo4j](https://qdrant.tech/documentation/examples/graphrag-qdrant-neo4j/)\n- [Building a Chain-of-Thought Medical Chatbot with Qdrant and DSPy](https://qdrant.tech/documentation/examples/qdrant-dspy-medicalbot/)\n- [Multitenancy with LlamaIndex](https://qdrant.tech/documentation/examples/llama-index-multitenancy/)\n- [Private Chatbot for Interactive Learning](https://qdrant.tech/documentation/examples/rag-chatbot-red-hat-openshift-haystack/)\n- [Implement Cohere RAG connector](https://qdrant.tech/documentation/examples/cohere-rag-connector/)\n- [Question-Answering System for AI Customer Support](https://qdrant.tech/documentation/examples/rag-customer-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 254,
      "char_count": 1005,
      "start_char": 16282,
      "end_char": 17287
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:19",
    "content": "r-support-cohere-airbyte-aws/)\n- [Chat With Product PDF Manuals Using Hybrid Search](https://qdrant.tech/documentation/examples/hybrid-search-llamaindex-jinaai/)\n- [Region-Specific Contract Management System](https://qdrant.tech/documentation/examples/rag-contract-management-stackit-aleph-alpha/)\n- [RAG System for Employee Onboarding](https://qdrant.tech/documentation/examples/natural-language-search-oracle-cloud-infrastructure-cohere-langchain/)\n- [Private RAG Information Extraction Engine](https://qdrant.tech/documentation/examples/rag-chatbot-vultr-dspy-ollama/)\n- [Movie Recommendation System](https://qdrant.tech/documentation/examples/recommendation-system-ovhcloud/)\n- [Blog-Reading Chatbot with GPT-4o](https://qdrant.tech/documentation/examples/rag-chatbot-scaleway/)\n\n[Practice Datasets](https://qdrant.tech/documentation/datasets/)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Data management](https://qdrant.tech/documentation/data-management/)\n-\n- Apache Spark\n\n# Apache Spark",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 237,
      "char_count": 1010,
      "start_char": 17187,
      "end_char": 18199
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:20",
    "content": "a management](https://qdrant.tech/documentation/data-management/)\n-\n- Apache Spark\n\n# Apache Spark\n\n[Spark](https://spark.apache.org/) is a distributed computing framework designed for big data processing and analytics. The [Qdrant-Spark connector](https://github.com/qdrant/qdrant-spark) enables Qdrant to be a storage destination in Spark.\n\n## Installation\n\nTo integrate the connector into your Spark environment, get the JAR file from one of the sources listed below.\n\n- GitHub Releases\n\nThe packaged `jar` file with all the required dependencies can be found [here](https://github.com/qdrant/qdrant-spark/releases).\n\n- Building from Source\n\nTo build the `jar` from source, you need [JDK@8](https://www.azul.com/downloads/#zulu) and [Maven](https://maven.apache.org/) installed. Once the requirements have been satisfied, run the following command in the [project root](https://github.com/qdrant/qdrant-spark).\n\n```bash\nmvn package -DskipTests\n```\n\nThe JAR file will be written into the `target` directory by default.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 245,
      "char_count": 1020,
      "start_char": 18099,
      "end_char": 19121
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:21",
    "content": "mvn package -DskipTests\n```\n\nThe JAR file will be written into the `target` directory by default.\n\n- Maven Central\n\nFind the project on Maven Central [here](https://central.sonatype.com/artifact/io.qdrant/spark).\n\n## Usage\n\n### Creating a Spark session with Qdrant support\n\n```python\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.config(\n        \"spark.jars\",\n        \"path/to/file/spark-VERSION.jar\",  # Specify the path to the downloaded JAR file\n    )\n    .master(\"local[*]\")\n    .appName(\"qdrant\")\n    .getOrCreate()\n```\n\n```scala\nimport org.apache.spark.sql.SparkSession\n\nval spark = SparkSession.builder\n  .config(\"spark.jars\", \"path/to/file/spark-VERSION.jar\") // Specify the path to the downloaded JAR file\n  .master(\"local[*]\")\n  .appName(\"qdrant\")\n  .getOrCreate()\n```\n\n```java\nimport org.apache.spark.sql.SparkSession;\n\npublic class QdrantSparkJavaExample {\n    public static void main(String[] args) {\n        SparkSession spark = SparkSession.builder()\n                .config(\"spark.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 256,
      "char_count": 1018,
      "start_char": 19021,
      "end_char": 20040
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:22",
    "content": "String[] args) {\n        SparkSession spark = SparkSession.builder()\n                .config(\"spark.jars\", \"path/to/file/spark-VERSION.jar\") // Specify the path to the downloaded JAR file\n                .master(\"local[*]\")\n                .appName(\"qdrant\")\n                .getOrCreate(); \n    }\n}\n```\n\n### Loading data\n\nBefore loading the data using this connector, a collection has to be [created](https://qdrant.tech/documentation/concepts/collections/#create-a-collection) in advance with the appropriate vector dimensions and configurations.\n\nThe connector supports ingesting multiple named/unnamed, dense/sparse vectors.\n\n*Click each to expand.*\n\n**Unnamed/Default vector**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", <QDRANT_GRPC_URL>)\n   .option(\"collection_name\", <QDRANT_COLLECTION_NAME>)\n   .option(\"embedding_field\", <EMBEDDING_FIELD_NAME>)  # Expected to be a field of type ArrayType(FloatType)\n   .option(\"schema\", <pyspark.sql.DataFrame>.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 244,
      "char_count": 1020,
      "start_char": 19940,
      "end_char": 20960
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:23",
    "content": "# Expected to be a field of type ArrayType(FloatType)\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n**Named vector**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", <QDRANT_GRPC_URL>)\n   .option(\"collection_name\", <QDRANT_COLLECTION_NAME>)\n   .option(\"embedding_field\", <EMBEDDING_FIELD_NAME>)  # Expected to be a field of type ArrayType(FloatType)\n   .option(\"vector_name\", <VECTOR_NAME>)\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n> #### NOTE\n>\n> The `embedding_field` and `vector_name` options are maintained for backward compatibility. It is recommended to use `vector_fields` and `vector_names` for named vectors as shown below.\n\n**Multiple named vectors**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 282,
      "char_count": 1016,
      "start_char": 20860,
      "end_char": 21877
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:24",
    "content": "on(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"vector_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"vector_names\", \"<VECTOR_NAME>,<ANOTHER_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n**Sparse vectors**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"sparse_vector_value_fields\", \"<COLUMN_NAME>\")\n   .option(\"sparse_vector_index_fields\", \"<COLUMN_NAME>\")\n   .option(\"sparse_vector_names\", \"<SPARSE_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n**Multiple sparse vectors**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 288,
      "char_count": 1020,
      "start_char": 21777,
      "end_char": 22797
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:25",
    "content": "on(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"sparse_vector_value_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"sparse_vector_index_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"sparse_vector_names\", \"<SPARSE_VECTOR_NAME>,<ANOTHER_SPARSE_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n**Combination of named dense and sparse vectors**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"vector_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"vector_names\", \"<VECTOR_NAME>,<ANOTHER_VECTOR_NAME>\")\n   .option(\"sparse_vector_value_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"sparse_vector_index_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 260,
      "char_count": 973,
      "start_char": 22697,
      "end_char": 23670
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:26",
    "content": "_COLUMN_NAME>\")\n   .option(\"sparse_vector_index_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"sparse_vector_names\", \"<SPARSE_VECTOR_NAME>,<ANOTHER_SPARSE_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n**Multi-vectors**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"multi_vector_fields\", \"<COLUMN_NAME>\")\n   .option(\"multi_vector_names\", \"<MULTI_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n**Multiple Multi-vectors**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"multi_vector_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 275,
      "char_count": 978,
      "start_char": 23570,
      "end_char": 24548
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:27",
    "content": "ANT_COLLECTION_NAME>\")\n   .option(\"multi_vector_fields\", \"<COLUMN_NAME>,<ANOTHER_COLUMN_NAME>\")\n   .option(\"multi_vector_names\", \"<MULTI_VECTOR_NAME>,<ANOTHER_MULTI_VECTOR_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n**No vectors - Entire dataframe is stored as payload**\n\n```python\n  <pyspark.sql.DataFrame>\n   .write\n   .format(\"io.qdrant.spark.Qdrant\")\n   .option(\"qdrant_url\", \"<QDRANT_GRPC_URL>\")\n   .option(\"collection_name\", \"<QDRANT_COLLECTION_NAME>\")\n   .option(\"schema\", <pyspark.sql.DataFrame>.schema.json())\n   .mode(\"append\")\n   .save()\n```\n\n## Databricks\n\nCheck out our [example](https://qdrant.tech/documentation/send-data/databricks/) of using the Spark connector with Databricks.\n\nYou can use the `qdrant-spark` connector as a library in [Databricks](https://www.databricks.com/).\n\n- Go to the `Libraries` section in your Databricks cluster dashboard.\n- Select `Install New` to open the library installation modal.\n- Search for `io.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 268,
      "char_count": 1007,
      "start_char": 24448,
      "end_char": 25455
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:28",
    "content": "cluster dashboard.\n- Select `Install New` to open the library installation modal.\n- Search for `io.qdrant:spark:VERSION` in the Maven packages and click `Install`.\n\n## Datatype support\n\nThe appropriate Spark data types are mapped to the Qdrant payload based on the provided `schema`.\n\n## Options and Spark types\n\n| Option                       | Description                                                                          | Column DataType                   | Required |\n| ---------------------------- | ------------------------------------------------------------------------------------ | --------------------------------- | -------- |\n| `qdrant_url`                 | gRPC URL of the Qdrant instance. Eg: <http://localhost:6334>                         | -                                 | ✅        |\n| `collection_name`            | Name of the collection to write data into                                            | -                                 | ✅        |",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 158,
      "char_count": 980,
      "start_char": 25355,
      "end_char": 26337
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:29",
    "content": "ta into                                            | -                                 | ✅        |\n| `schema`                     | JSON string of the dataframe schema                                                  | -                                 | ✅        |\n| `embedding_field`            | Name of the column holding the embeddings (Deprecated - Use `vector_fields` instead) | `ArrayType(FloatType)`            | ❌        |\n| `id_field`                   | Name of the column holding the point IDs. Default: Random UUID                       | `StringType` or `IntegerType`     | ❌        |\n| `batch_size`                 | Max size of the upload batch. Default: 64                                            | -                                 | ❌        |\n| `retries`                    | Number of upload retries. Default: 3                                                 | -                                 | ❌        |",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 29,
      "token_count": 158,
      "char_count": 934,
      "start_char": 26237,
      "end_char": 27172
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:30",
    "content": "3                                                 | -                                 | ❌        |\n| `api_key`                    | Qdrant API key for authentication                                                    | -                                 | ❌        |\n| `vector_name`                | Name of the vector in the collection.                                                | -                                 | ❌        |\n| `vector_fields`              | Comma-separated names of columns holding the vectors.                                | `ArrayType(FloatType)`            | ❌        |\n| `vector_names`               | Comma-separated names of vectors in the collection.                                  | -                                 | ❌        |\n| `sparse_vector_index_fields` | Comma-separated names of columns holding the sparse vector indices.                  | `ArrayType(IntegerType)`          | ❌        |",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 30,
      "token_count": 147,
      "char_count": 933,
      "start_char": 27072,
      "end_char": 28007
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:31",
    "content": "olding the sparse vector indices.                  | `ArrayType(IntegerType)`          | ❌        |\n| `sparse_vector_value_fields` | Comma-separated names of columns holding the sparse vector values.                   | `ArrayType(FloatType)`            | ❌        |\n| `sparse_vector_names`        | Comma-separated names of the sparse vectors in the collection.                       | -                                 | ❌        |\n| `multi_vector_fields`        | Comma-separated names of columns holding the multi-vector values.                    | `ArrayType(ArrayType(FloatType))` | ❌        |\n| `multi_vector_names`         | Comma-separated names of the multi-vectors in the collection.                        | -                                 | ❌        |\n| `shard_key_selector`         | Comma-separated names of custom shard keys to use during upsert.                     | -                                 | ❌        |\n| `wait`                       | Wait for each batch upsert to complete.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 31,
      "token_count": 193,
      "char_count": 1007,
      "start_char": 27907,
      "end_char": 28914
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:32",
    "content": "| ❌        |\n| `wait`                       | Wait for each batch upsert to complete. `true` or `false`. Defaults to `true`.       | -                                 | ❌        |\n\nFor more information, be sure to check out the [Qdrant-Spark GitHub repository](https://github.com/qdrant/qdrant-spark). The Apache Spark guide is available [here](https://spark.apache.org/docs/latest/quick-start.html). Happy data processing!\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/data-management/spark.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Apache Spark](#apache-spark.md)\n\n  - [Installation](#installation.md)\n\n  - [Usage](#usage.md)\n\n    - [Creating a Spark session with Qdrant support](#creating-a-spark-session-with-qdrant-support.md)\n    - [Loading data](#loading-data.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 32,
      "token_count": 254,
      "char_count": 1010,
      "start_char": 28814,
      "end_char": 29839
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md:chunk:33",
    "content": "drant support](#creating-a-spark-session-with-qdrant-support.md)\n    - [Loading data](#loading-data.md)\n\n  - [Databricks](#databricks.md)\n\n  - [Datatype support](#datatype-support.md)\n\n  - [Options and Spark types](#options-and-spark-types.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/data-management/spark.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_data-management_spark\\_documentation_data-management_spark_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_data-management_spark_.md",
      "file_extension": ".md",
      "chunk_index": 33,
      "token_count": 200,
      "char_count": 719,
      "start_char": 29739,
      "end_char": 30763
    }
  }
]