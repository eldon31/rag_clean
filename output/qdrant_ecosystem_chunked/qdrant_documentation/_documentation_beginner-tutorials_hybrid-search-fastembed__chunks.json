[
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:0",
    "content": "Setup Hybrid Search with FastEmbed - Qdrant\n\n[](https://qdrant.tech/)\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\nSearch\n\n[Log in](https://cloud.qdrant.io/login) [Start Free](https://cloud.qdrant.io/signup)\n\nSearch\n\n- [Qdrant](https://qdrant.tech/documentation/)\n- [Cloud](https://qdrant.tech/documentation/cloud-intro/)\n- [Build](https://qdrant.tech/documentation/build/)\n- [Learn](https://qdrant.tech/articles/)\n- [API Reference](https://api.qdrant.tech/api-reference)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 0,
      "token_count": 267,
      "char_count": 998,
      "start_char": 0,
      "end_char": 1000
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:1",
    "content": "drant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 1,
      "token_count": 253,
      "char_count": 1006,
      "start_char": 900,
      "end_char": 1906
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:2",
    "content": "e/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 2,
      "token_count": 250,
      "char_count": 999,
      "start_char": 1806,
      "end_char": 2806
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:3",
    "content": "tion/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 3,
      "token_count": 260,
      "char_count": 1017,
      "start_char": 2706,
      "end_char": 3725
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:4",
    "content": "embed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 4,
      "token_count": 247,
      "char_count": 988,
      "start_char": 3625,
      "end_char": 4613
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:5",
    "content": "tation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 5,
      "token_count": 235,
      "char_count": 1014,
      "start_char": 4513,
      "end_char": 5527
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:6",
    "content": "s://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n### Getting Started\n\n[What is Qdrant?](https://qdrant.tech/documentation/overview/)\n\n- [Understanding Vector Search in Qdrant](https://qdrant.tech/documentation/overview/vector-search/)\n\n[Local Quickstart](https://qdrant.tech/documentation/quickstart/)\n\n[API & SDKs](https://qdrant.tech/documentation/interfaces/)\n\n[Qdrant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 6,
      "token_count": 257,
      "char_count": 1004,
      "start_char": 5427,
      "end_char": 6431
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:7",
    "content": "rant Web UI](https://qdrant.tech/documentation/web-ui/)\n\n### User Manual\n\n[Concepts](https://qdrant.tech/documentation/concepts/)\n\n- [Collections](https://qdrant.tech/documentation/concepts/collections/)\n- [Points](https://qdrant.tech/documentation/concepts/points/)\n- [Vectors](https://qdrant.tech/documentation/concepts/vectors/)\n- [Payload](https://qdrant.tech/documentation/concepts/payload/)\n- [Search](https://qdrant.tech/documentation/concepts/search/)\n- [Explore](https://qdrant.tech/documentation/concepts/explore/)\n- [Hybrid Queries](https://qdrant.tech/documentation/concepts/hybrid-queries/)\n- [Filtering](https://qdrant.tech/documentation/concepts/filtering/)\n- [Optimizer](https://qdrant.tech/documentation/concepts/optimizer/)\n- [Storage](https://qdrant.tech/documentation/concepts/storage/)\n- [Indexing](https://qdrant.tech/documentation/concepts/indexing/)\n- [Snapshots](https://qdrant.tech/documentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 7,
      "token_count": 251,
      "char_count": 1008,
      "start_char": 6331,
      "end_char": 7341
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:8",
    "content": "cumentation/concepts/snapshots/)\n\n[Guides](https://qdrant.tech/documentation/guides/installation/)\n\n- [Installation](https://qdrant.tech/documentation/guides/installation/)\n- [Administration](https://qdrant.tech/documentation/guides/administration/)\n- [Running with GPU](https://qdrant.tech/documentation/guides/running-with-gpu/)\n- [Capacity Planning](https://qdrant.tech/documentation/guides/capacity-planning/)\n- [Optimize Performance](https://qdrant.tech/documentation/guides/optimize/)\n- [Multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/)\n- [Distributed Deployment](https://qdrant.tech/documentation/guides/distributed_deployment/)\n- [Quantization](https://qdrant.tech/documentation/guides/quantization/)\n- [Monitoring & Telemetry](https://qdrant.tech/documentation/guides/monitoring/)\n- [Configuration](https://qdrant.tech/documentation/guides/configuration/)\n- [Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 8,
      "token_count": 249,
      "char_count": 994,
      "start_char": 7241,
      "end_char": 8235
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:9",
    "content": "[Security](https://qdrant.tech/documentation/guides/security/)\n- [Usage Statistics](https://qdrant.tech/documentation/guides/usage-statistics/)\n- [Troubleshooting](https://qdrant.tech/documentation/guides/common-errors/)\n\n### Ecosystem\n\n[FastEmbed](https://qdrant.tech/documentation/fastembed/)\n\n- [Quickstart](https://qdrant.tech/documentation/fastembed/fastembed-quickstart/)\n- [FastEmbed & Qdrant](https://qdrant.tech/documentation/fastembed/fastembed-semantic-search/)\n- [Working with miniCOIL](https://qdrant.tech/documentation/fastembed/fastembed-minicoil/)\n- [Working with SPLADE](https://qdrant.tech/documentation/fastembed/fastembed-splade/)\n- [Working with ColBERT](https://qdrant.tech/documentation/fastembed/fastembed-colbert/)\n- [Reranking with FastEmbed](https://qdrant.tech/documentation/fastembed/fastembed-rerankers/)\n\n[Qdrant MCP Server](https://github.com/qdrant/mcp-server-qdrant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 9,
      "token_count": 254,
      "char_count": 994,
      "start_char": 8135,
      "end_char": 9132
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:10",
    "content": "ant)\n\n### Tutorials\n\n[Vector Search Basics](https://qdrant.tech/documentation/beginner-tutorials/)\n\n- [Semantic Search 101](https://qdrant.tech/documentation/beginner-tutorials/search-beginners/)\n- [Build a Neural Search Service](https://qdrant.tech/documentation/beginner-tutorials/neural-search/)\n- [Setup Hybrid Search with FastEmbed](https://qdrant.tech/documentation/beginner-tutorials/hybrid-search-fastembed/)\n- [Measure Search Quality](https://qdrant.tech/documentation/beginner-tutorials/retrieval-quality/)\n\n[Advanced Retrieval](https://qdrant.tech/documentation/advanced-tutorials/)\n\n- [How to Use Multivector Representations with Qdrant Effectively](https://qdrant.tech/documentation/advanced-tutorials/using-multivector-representations/)\n- [Reranking in Hybrid Search](https://qdrant.tech/documentation/advanced-tutorials/reranking-hybrid-search/)\n- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 10,
      "token_count": 229,
      "char_count": 960,
      "start_char": 9032,
      "end_char": 9993
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:11",
    "content": "- [Search Through Your Codebase](https://qdrant.tech/documentation/advanced-tutorials/code-search/)\n- [Build a Recommendation System with Collaborative Filtering](https://qdrant.tech/documentation/advanced-tutorials/collaborative-filtering/)\n- [Scaling PDF Retrieval with Qdrant](https://qdrant.tech/documentation/advanced-tutorials/pdf-retrieval-at-scale/)\n\n[Using the Database](https://qdrant.tech/documentation/database-tutorials/)\n\n- [Bulk Upload Vectors](https://qdrant.tech/documentation/database-tutorials/bulk-upload/)\n- [Create & Restore Snapshots](https://qdrant.tech/documentation/database-tutorials/create-snapshot/)\n- [Large Scale Search](https://qdrant.tech/documentation/database-tutorials/large-scale-search/)\n- [Load a HuggingFace Dataset](https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/)\n- [Build With Async API](https://qdrant.tech/documentation/database-tutorials/async-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 11,
      "token_count": 229,
      "char_count": 1011,
      "start_char": 9893,
      "end_char": 10905
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:12",
    "content": "sync-api/)\n- [Migration to Qdrant](https://qdrant.tech/documentation/database-tutorials/migration/)\n- [Static Embeddings. Should you pay attention?](https://qdrant.tech/documentation/database-tutorials/static-embeddings/)\n\n### Support\n\n[FAQ](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n\n- [Qdrant Fundamentals](https://qdrant.tech/documentation/faq/qdrant-fundamentals/)\n- [Database Optimization](https://qdrant.tech/documentation/faq/database-optimization/)\n\n[Release Notes](https://github.com/qdrant/qdrant/releases)\n\n- [Documentation](https://qdrant.tech/documentation/)\n-\n- [Beginner tutorials](https://qdrant.tech/documentation/beginner-tutorials/)\n-\n- Setup Hybrid Search with FastEmbed\n\n# Build a Hybrid Search Service with FastEmbed and Qdrant\n\n| Time: 20 min | Level: Beginner | Output: [GitHub](https://github.com/qdrant/qdrant_demo/) |   |\n| ------------ | --------------- | -------------------------------------------------------- | - |",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 12,
      "token_count": 233,
      "char_count": 964,
      "start_char": 10805,
      "end_char": 11771
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:13",
    "content": "| ------------ | --------------- | -------------------------------------------------------- | - |\n\nThis tutorial shows you how to build and deploy your own hybrid search service to look through descriptions of companies from [startups-list.com](https://www.startups-list.com/) and pick the most similar ones to your query. The website contains the company names, descriptions, locations, and a picture for each entry.\n\nAs we have already written on our [blog](https://qdrant.tech/articles/hybrid-search/), there is no single definition of hybrid search. In this tutorial we are covering the case with a combination of dense and [sparse embeddings](https://qdrant.tech/articles/sparse-vectors/). The former ones refer to the embeddings generated by such well-known neural networks as BERT, while the latter ones are more related to a traditional full-text search approach.\n\nOur hybrid search service will use [Fastembed](https://github.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 13,
      "token_count": 184,
      "char_count": 935,
      "start_char": 11671,
      "end_char": 12607
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:14",
    "content": "aditional full-text search approach.\n\nOur hybrid search service will use [Fastembed](https://github.com/qdrant/fastembed) package to generate embeddings of text descriptions and [FastAPI](https://fastapi.tiangolo.com/) to serve the search API. Fastembed natively integrates with Qdrant client, so you can easily upload the data into Qdrant and perform search queries.\n\n## Workflow\n\nTo create a hybrid search service, you will need to transform your raw data and then create a search function to manipulate it. First, you will 1) download and prepare a sample dataset using a modified version of the BERT ML model. Then, you will 2) load the data into Qdrant, 3) create a hybrid search API and 4) serve it using FastAPI.\n\n## Prerequisites\n\nTo complete this tutorial, you will need:\n\n- Docker - The easiest way to use Qdrant is to run a pre-built Docker image.\n- [Raw parsed data](https://storage.googleapis.com/generall-shared-data/startups_demo.json) from startups-list.com.\n- Python version >=3.9\n\n## Prepare sample dataset",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 14,
      "token_count": 238,
      "char_count": 1024,
      "start_char": 12507,
      "end_char": 13532
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:15",
    "content": "-data/startups_demo.json) from startups-list.com.\n- Python version >=3.9\n\n## Prepare sample dataset\n\nTo conduct a hybrid search on startup descriptions, you must first encode the description data into vectors. Fastembed integration into qdrant client combines encoding and uploading into a single step.\n\nIt also takes care of batching and parallelization, so you don’t have to worry about it.\n\nLet’s start by downloading the data and installing the necessary packages.\n\n1. First you need to download the dataset.\n\n```bash\nwget https://storage.googleapis.com/generall-shared-data/startups_demo.json\n```\n\n## Run Qdrant in Docker\n\nNext, you need to manage all of your data using a vector engine. Qdrant lets you store, update or delete created vectors. Most importantly, it lets you search for the nearest vectors via a convenient API.\n\n> **Note:** Before you begin, create a project directory and a virtual python environment in it.\n\n1. Download the Qdrant image from DockerHub.\n\n```bash\ndocker pull qdrant/qdrant\n```\n\n2.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 15,
      "token_count": 224,
      "char_count": 1019,
      "start_char": 13432,
      "end_char": 14451
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:16",
    "content": "ment in it.\n\n1. Download the Qdrant image from DockerHub.\n\n```bash\ndocker pull qdrant/qdrant\n```\n\n2. Start Qdrant inside of Docker.\n\n```bash\ndocker run -p 6333:6333 \\\n    -v $(pwd)/qdrant_storage:/qdrant/storage \\\n    qdrant/qdrant\n```\n\nYou should see output like this\n\n```text\n...\n[2021-02-05T00:08:51Z INFO  actix_server::builder] Starting 12 workers\n[2021-02-05T00:08:51Z INFO  actix_server::builder] Starting \"actix-web-service-0.0.0.0:6333\" service on 0.0.0.0:6333\n```\n\nTest the service by going to <http://localhost:6333/>. You should see the Qdrant version info in your browser.\n\nAll data uploaded to Qdrant is saved inside the `./qdrant_storage` directory and will be persisted even if you recreate the container.\n\n## Upload data to Qdrant\n\n1. Install the official Python client to best interact with Qdrant.\n\n```bash\npip install \"qdrant-client[fastembed]>=1.14.2\"\n```\n\n> **Note:** This tutorial requires fastembed of version >=0.6.1.\n\nAt this point, you should have startup records in the `startups_demo.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 16,
      "token_count": 336,
      "char_count": 1013,
      "start_char": 14351,
      "end_char": 15364
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:17",
    "content": "fastembed of version >=0.6.1.\n\nAt this point, you should have startup records in the `startups_demo.json` file and Qdrant running on a local machine.\n\nNow you need to write a script to upload all startup data and vectors into the search engine.\n\n2. Create a client object for Qdrant.\n\n```python\n# Import client library\nfrom qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n```\n\n3. Choose models to encode your data and prepare collections.\n\nIn this tutorial, we will be using two pre-trained models to compute dense and sparse vectors correspondingly The models are: `sentence-transformers/all-MiniLM-L6-v2` and `prithivida/Splade_PP_en_v1`. As soon as the choice is made, we need to configure a collection in Qdrant.\n\n```python\ndense_vector_name = \"dense\"\nsparse_vector_name = \"sparse\"\ndense_model_name = \"sentence-transformers/all-MiniLM-L6-v2\"\nsparse_model_name = \"prithivida/Splade_PP_en_v1\"\nif not client.collection_exists(\"startups\"):\n    client.create_collection(",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 17,
      "token_count": 256,
      "char_count": 1015,
      "start_char": 15264,
      "end_char": 16280
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:18",
    "content": "thivida/Splade_PP_en_v1\"\nif not client.collection_exists(\"startups\"):\n    client.create_collection(\n        collection_name=\"startups\",\n        vectors_config={\n            dense_vector_name: models.VectorParams(\n                size=client.get_embedding_size(dense_model_name), \n                distance=models.Distance.COSINE\n            )\n        },  # size and distance are model dependent\n        sparse_vectors_config={sparse_vector_name: models.SparseVectorParams()},\n    )\n```\n\nQdrant requires vectors to have their own names and configurations. Parameters `size` and `distance` are mandatory, however, you can additionaly specify extended configuration for your vectors, like `quantization_config` or `hnsw_config`.\n\n4. Read data from the file.\n\n```python\nimport json\n\npayload_path = \"startups_demo.json\"\ndocuments = []\nmetadata = []\n\nwith open(payload_path) as fd:\n    for line in fd:\n        obj = json.loads(line)\n        description = obj[\"description\"]\n        dense_document = models.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 18,
      "token_count": 210,
      "char_count": 999,
      "start_char": 16180,
      "end_char": 17179
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:19",
    "content": "obj = json.loads(line)\n        description = obj[\"description\"]\n        dense_document = models.Document(text=description, model=dense_model_name)\n        sparse_document = models.Document(text=description, model=sparse_model_name)\n        documents.append(\n            {\n                dense_vector_name: dense_document,\n                sparse_vector_name: sparse_document,\n            }\n        )\n        metadata.append(obj)\n```\n\nIn this block of code, we read data from `startups_demo.json` file and split it into two list: `documents` and `metadata`. Documents are models with descriptions of startups and model names to embed data. Metadata is payload associated with each startup, such as the name, location, and picture. We will use `documents` to encode the data into vectors.\n\n6. Encode and upload data.\n\n```python\n    client.upload_collection(\n        collection_name=\"startups\",\n        vectors=tqdm.tqdm(documents),\n        payload=metadata,\n        parallel=4,  # Use 4 CPU cores to encode data.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 19,
      "token_count": 209,
      "char_count": 1010,
      "start_char": 17079,
      "end_char": 18094
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:20",
    "content": "m.tqdm(documents),\n        payload=metadata,\n        parallel=4,  # Use 4 CPU cores to encode data.\n        # This will spawn a model per process, which might be memory expensive\n        # Make sure that your system does not use swap, and reduce the amount\n        # # of processes if it does. \n        # Otherwise, it might significantly slow down the process.\n        # Requires wrapping code into if __name__ == '__main__' block\n    )\n```\n\nVector generation process might be time-consuming. In order to save time, you can skip this step by uploading already processed data (available under the spoiler).\n\nUpload processed data\n\nDownload and unpack the processed data from [here](https://storage.googleapis.com/dataset-startup-search/startup-list-com/startups_hybrid_search_processed_40k.tar.gz) or use the following script:\n\n```bash\nwget https://storage.googleapis.com/dataset-startup-search/startup-list-com/startups_hybrid_search_processed_40k.tar.gz\ntar -xvf startups_hybrid_search_processed_40k.tar.gz\n```",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 20,
      "token_count": 230,
      "char_count": 1012,
      "start_char": 17994,
      "end_char": 19008
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:21",
    "content": "artups_hybrid_search_processed_40k.tar.gz\ntar -xvf startups_hybrid_search_processed_40k.tar.gz\n```\n\nThen you can upload the data to Qdrant.\n\n```python\nimport json\nimport numpy as np\n\n\ndef named_vectors(\n        vectors: list[float], \n        sparse_vectors: list[models.SparseVector]\n) -> dict:\n    for vector, sparse_vector in zip(vectors, sparse_vectors):\n        yield {\n            dense_vector_name: vector,\n            sparse_vector_name: models.SparseVector(**sparse_vector),\n        }\n\n\nwith open(\"dense_vectors.npy\", \"rb\") as f:\n    vectors = np.load(f)\nwith open(\"sparse_vectors.json\", \"r\") as f:\n    sparse_vectors = json.load(f)\n\nwith open(\"payload.json\", \"r\") as f:\n    payload = json.load(f)\n\nclient.upload_collection(\n    \"startups\", \n    vectors=named_vectors(vectors, sparse_vectors), \n    payload=payload\n)\n```\n\nThe `upload_collection` method will encode all documents and upload them to Qdrant.\n\nThe `parallel` parameter enables data-parallelism instead of built-in ONNX parallelism.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 21,
      "token_count": 245,
      "char_count": 1002,
      "start_char": 18908,
      "end_char": 19912
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:22",
    "content": "o Qdrant.\n\nThe `parallel` parameter enables data-parallelism instead of built-in ONNX parallelism.\n\nAdditionally, you can specify ids for each document, if you want to use them later to update or delete documents. If you don’t specify ids, they will be generated automatically.\n\nYou can monitor the progress of the encoding by passing tqdm progress bar to the `upload_collection` method.\n\n```python\nfrom tqdm import tqdm\n\nclient.upload_collection(\n    collection_name=\"startups\",\n    vectors=documents,\n    payload=metadata,\n    ids=tqdm(range(len(documents))),\n)\n```\n\n## Build the search API\n\nNow that all the preparations are complete, let’s start building a neural search class.\n\nIn order to process incoming requests, the hybrid search class will need 3 things: 1) models to convert the query into a vector, 2) the Qdrant client to perform search queries, 3) fusion function to re-rank dense and sparse search results.\n\nQdrant supports 2 fusion functions for combining the results: [reciprocal rank fusion](https://plg.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 22,
      "token_count": 228,
      "char_count": 1023,
      "start_char": 19812,
      "end_char": 20835
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:23",
    "content": "Qdrant supports 2 fusion functions for combining the results: [reciprocal rank fusion](https://plg.uwaterloo.ca/~gvcormac/cormacksigir09-rrf.pdf) and [distribution based score fusion](https://qdrant.tech/documentation/concepts/hybrid-queries/?q=distribution+based+sc#:~:text=Distribution%2DBased%20Score%20Fusion)\n\n1. Create a file named `hybrid_searcher.py` and specify the following.\n\n```python\nfrom qdrant_client import QdrantClient, models\n\n\nclass HybridSearcher:\n    DENSE_MODEL = \"sentence-transformers/all-MiniLM-L6-v2\"\n    SPARSE_MODEL = \"prithivida/Splade_PP_en_v1\"\n    \n    def __init__(self, collection_name):\n        self.collection_name = collection_name\n        self.qdrant_client = QdrantClient()\n```\n\n2. Write the search function.\n\n```python\ndef search(self, text: str):\n    search_result = self.qdrant_client.query_points(\n        collection_name=self.collection_name,\n        query=models.FusionQuery(\n            fusion=models.Fusion.RRF  # we are using reciprocal rank fusion here\n        ),",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 23,
      "token_count": 265,
      "char_count": 1011,
      "start_char": 20735,
      "end_char": 21748
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:24",
    "content": "nQuery(\n            fusion=models.Fusion.RRF  # we are using reciprocal rank fusion here\n        ),\n        prefetch=[\n            models.Prefetch(\n                query=models.Document(text=text, model=self.DENSE_MODEL),\n                using=dense_vector_name,\n            ),\n            models.Prefetch(\n                query=models.Document(text=text, model=self.SPARSE_MODEL),\n                using=sparse_vector_name,\n            ),\n        ],\n        query_filter=None,  # If you don't want any filters for now\n        limit=5,  # 5 the closest results\n    ).points\n    # `search_result` contains models.QueryResponse structure\n    # We can access list of scored points with the corresponding similarity scores,\n    # vectors (if `with_vectors` was set to `True`), and payload via `points` attribute.\n\n    # Select and return metadata\n    metadata = [point.payload for point in search_result]\n    return metadata\n```\n\n3. Add search filters.\n\nWith Qdrant it is also feasible to add some conditions to the search.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 24,
      "token_count": 215,
      "char_count": 1018,
      "start_char": 21648,
      "end_char": 22666
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:25",
    "content": "a\n```\n\n3. Add search filters.\n\nWith Qdrant it is also feasible to add some conditions to the search. For example, if you wanted to search for startups in a certain city, the search query could look like this:\n\n```python\n    ...\n\n    city_of_interest = \"Berlin\"\n\n    # Define a filter for cities\n    city_filter = models.Filter(\n        must=[\n            models.FieldCondition(\n                key=\"city\", \n                match=models.MatchValue(value=city_of_interest)\n            )\n        ]\n    )\n\n    # NOTE: it is not a hybrid search! It's just a dense query for simplicity\n    search_result = self.qdrant_client.query_points(\n        collection_name=self.collection_name,\n        query=models.Document(text=text, model=self.DENSE_MODEL),\n        query_filter=city_filter,\n        limit=5\n    ).points\n    ...\n```\n\nYou have now created a class for neural search queries. Now wrap it up into a service.\n\n## Deploy the search with FastAPI\n\nTo build the service you will use the FastAPI framework.\n\n1. Install FastAPI.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 25,
      "token_count": 225,
      "char_count": 1021,
      "start_char": 22566,
      "end_char": 23589
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:26",
    "content": "search with FastAPI\n\nTo build the service you will use the FastAPI framework.\n\n1. Install FastAPI.\n\nTo install it, use the command\n\n```bash\npip install fastapi uvicorn\n```\n\n2. Implement the service.\n\nCreate a file named `service.py` and specify the following.\n\nThe service will have only one API endpoint and will look like this:\n\n```python\nfrom fastapi import FastAPI\n\n# The file where HybridSearcher is stored\nfrom hybrid_searcher import HybridSearcher\n\napp = FastAPI()\n\n# Create a neural searcher instance\nhybrid_searcher = HybridSearcher(collection_name=\"startups\")\n\n\n@app.get(\"/api/search\")\ndef search_startup(q: str):\n    return {\"result\": hybrid_searcher.search(text=q)}\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\n3. Run the service.\n\n```bash\npython service.py\n```\n\n4. Open your browser at <http://localhost:8000/docs>.\n\nYou should be able to see a debug interface for your service.",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 26,
      "token_count": 240,
      "char_count": 948,
      "start_char": 23489,
      "end_char": 24439
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:27",
    "content": "er at <http://localhost:8000/docs>.\n\nYou should be able to see a debug interface for your service.\n\nFeel free to play around with it, make queries regarding the companies in our corpus, and check out the results.\n\nJoin our [Discord community](https://qdrant.to/discord), where we talk about vector search and similarity learning, publish other examples of neural networks and neural search applications.\n\n##### Was this page useful?\n\nYes No\n\nThank you for your feedback! 🙏\n\nWe are sorry to hear that. 😔 You can [edit](https:/github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md) this page on GitHub, or [create](https://github.com/qdrant/landing_page/issues/new/choose) a GitHub issue.\n\nOn this page:\n\n- [Build a Hybrid Search Service with FastEmbed and Qdrant](#build-a-hybrid-search-service-with-fastembed-and-qdrant.md)\n\n  - [Workflow](#workflow.md)\n  - [Prerequisites](#prerequisites.md)\n  - [Prepare sample dataset](#prepare-sample-dataset.md)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 27,
      "token_count": 247,
      "char_count": 1021,
      "start_char": 24339,
      "end_char": 25361
    }
  },
  {
    "chunk_id": "qdrant_ecosystem:qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md:chunk:28",
    "content": "md)\n  - [Prerequisites](#prerequisites.md)\n  - [Prepare sample dataset](#prepare-sample-dataset.md)\n  - [Run Qdrant in Docker](#run-qdrant-in-docker.md)\n  - [Upload data to Qdrant](#upload-data-to-qdrant.md)\n  - [Build the search API](#build-the-search-api.md)\n  - [Deploy the search with FastAPI](#deploy-the-search-with-fastapi.md)\n\n* [Edit on Github](https://github.com/qdrant/landing_page/tree/master/qdrant-landing/content/documentation/beginner-tutorials/hybrid-search-fastembed.md)\n* [Create an issue](https://github.com/qdrant/landing_page/issues/new/choose)\n\n#### Ready to get started with Qdrant?\n\n[Start Free](https://qdrant.to/cloud/)\n\n© 2025 Qdrant.\n\n[Terms](https://qdrant.tech/legal/terms_and_conditions/) [Privacy Policy](https://qdrant.tech/legal/privacy-policy/) [Impressum](https://qdrant.tech/legal/impressum/)",
    "metadata": {
      "source_file": "qdrant_documentation\\documentation_beginner-tutorials_hybrid-search-fastembed\\_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "source_collection": "qdrant_ecosystem",
      "subdirectory": "qdrant_documentation",
      "filename": "_documentation_beginner-tutorials_hybrid-search-fastembed_.md",
      "file_extension": ".md",
      "chunk_index": 28,
      "token_count": 237,
      "char_count": 830,
      "start_char": 25261,
      "end_char": 26285
    }
  }
]