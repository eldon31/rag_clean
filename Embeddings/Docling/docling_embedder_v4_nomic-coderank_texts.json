[
  "### Core Dependencies | Dependency | Purpose | | -------------------- | --------------------------------- | | `docling-core` | Core data models and utilities | | `docling-parse` | PDF text extraction library | | `docling-ibm-models` | Layout and table structure models | | `pypdfium2` | PDF rendering | | `pydantic` | Data validation and settings | | `huggingface_hub` | Model downloading |",
  "### Optional Dependencies | Extra | Dependencies | Purpose | | ----------- | -------------------------------------------------- | --------------------------------- | | `easyocr` | `easyocr` | Deep learning OCR engine | | `tesserocr` | `tesserocr` | Tesseract OCR binding | | `ocrmac` | `ocrmac` | macOS native OCR | | `vlm` | `transformers`, `mlx-vlm`, `vllm`, `qwen-vl-utils` | Vision-language model support | | `rapidocr` | `rapidocr`, `onnxruntime` | RapidOCR engine with ONNX backend | | `asr` | `openai-whisper` | Audio transcription |",
  "# Office Document Backends Relevant source files - [docling/backend/msword\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [tests/data/docx/textbox.docx](https://github.com/docling-project/docling/blob/f7244a43/tests/data/docx/textbox.docx) - [tests/data/docx/unit\\_test\\_formatting.docx](https://github.com/docling-project/docling/blob/f7244a43/tests/data/docx/unit_test_formatting.docx) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.itxt) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.json) - [tests/data/groundtruth/docling\\_v2/unit\\_test\\_formatting.docx.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/unit_test_formatting.docx.md) - [tests/test\\_backend\\_msword.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_msword.py) This document covers the backend implementations for Microsoft Office document formats in Docling, specifically Word (DOCX) and Excel (XLSX) processing. These backends parse declarative document formats into the universal `DoclingDocument` representation. For PDF document processing, see [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md). For web and text format backends, see [Web and Text Document Backends](docling-project/docling/3.3-web-and-markup-backends.md).",
  "### List Processing The backend handles complex list structures with proper nesting and numbering: ``` ``` Sources: [docling/backend/msword\\_backend.py335-421](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L335-L421) [docling/backend/msword\\_backend.py1405-1485](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/msword_backend.py#L1405-L1485)",
  "# VLM Pipeline Relevant source files - [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) The VLM Pipeline provides vision-language model based document processing capabilities for converting documents (primarily PDFs) into structured formats using AI models that can understand both text and images. This pipeline leverages various VLM backends including local models via HuggingFace Transformers, MLX for Apple Silicon optimization, VLLM for high-throughput inference, and remote API services. For traditional PDF processing without VLM capabilities, see [Standard PDF Pipeline](docling-project/docling/5.1-standard-pdf-pipeline.md). For base pipeline architecture and common functionality, see [Base Pipeline Architecture](docling-project/docling/5.3-vlm-pipeline.md).",
  "### Model Wrapper: \\_NativeWhisperModel The `_NativeWhisperModel` class encapsulates Whisper model loading and inference: | Property | Type | Purpose | | ----------------- | ------------- | ----------------------------- | | `enabled` | `bool` | Whether model is active | | `device` | `str` | Compute device (cpu/cuda/mps) | | `model` | Whisper model | Loaded Whisper model instance | | `max_tokens` | `int` | Maximum tokens per generation | | `temperature` | `float` | Sampling temperature | | `verbose` | `bool` | Enable Whisper logging | | `timestamps` | `bool` | Include segment timestamps | | `word_timestamps` | `bool` | Include word-level timestamps |",
  "# Base Pipeline Architecture Relevant source files - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) This document covers the foundational pipeline framework in Docling that enables extensible document processing workflows. The base pipeline architecture defines abstract interfaces, execution patterns, model integration points, and caching mechanisms that allow different processing strategies to be implemented consistently. The key architectural components include: - `BasePipeline`: Abstract base class defining the three-phase execution model (build, assemble, enrich) - `ConvertPipeline`: Specialization that adds enrichment model support - `PaginatedPipeline`: Specialization that adds page-by-page processing for paginated formats - Pipeline caching: Instance reuse based on pipeline class and options hash to avoid redundant model loading For information about specific pipeline implementations like PDF processing, see page 5.1 (Standard PDF Pipeline) and page 5.3 (VLM Pipeline). For document backends that pipelines operate on, see page 3 (Document Backends).",
  "## Pipeline Hierarchy The Docling pipeline architecture is built around a hierarchy of abstract base classes that define different processing paradigms: ``` ``` **Sources:** [docling/pipeline/base\\_pipeline.py43-133](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L43-L133) [docling/pipeline/base\\_pipeline.py135-182](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L135-L182) [docling/pipeline/base\\_pipeline.py184-319](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L184-L319) [docling/pipeline/simple\\_pipeline.py16-56](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L16-L56) [docling/pipeline/vlm\\_pipeline.py50-389](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py#L50-L389) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py296-648](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L296-L648) [docling/pipeline/asr\\_pipeline.py204-242](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L204-L242) [docling/pipeline/extraction\\_vlm\\_pipeline.py32-198](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py#L32-L198) [docling/pipeline/base\\_extraction\\_pipeline.py15-73](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py#L15-L73)",
  "## Error Handling and Status Determination Pipelines implement different strategies for determining conversion status: - **SimplePipeline**: Always returns `SUCCESS` if no exceptions occur - **VlmPipeline**: Checks for valid pages and backend status - **ThreadedStandardPdfPipeline**: Preserves status from threaded processing - **AsrPipeline**: Always returns `SUCCESS` for valid transcription All pipelines support graceful error handling through the `raises_on_error` parameter in `execute()`, allowing partial results to be returned instead of exceptions. **Sources:** [docling/pipeline/simple\\_pipeline.py43-47](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py#L43-L47) [docling/pipeline/base\\_pipeline.py295-314](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L295-L314) [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py639-640](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py#L639-L640) [docling/pipeline/asr\\_pipeline.py224-226](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py#L224-L226) [docling/pipeline/base\\_pipeline.py77-81](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L77-L81) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again.",
  "# docling-project_docling - Documentation Index - [/docling-project/docling](./_docling-project_docling.md) - [/docling-project/docling/1-overview](./_docling-project_docling_1-overview.md) - [/docling-project/docling/1.1-installation](./_docling-project_docling_1.1-installation.md) - [/docling-project/docling/2.1-document-conversion-flow](./_docling-project_docling_2.1-document-conversion-flow.md) - [/docling-project/docling/1.2-quick-start](./_docling-project_docling_1.2-quick-start.md) - [/docling-project/docling/2.2-doclingdocument-data-model](./_docling-project_docling_2.2-doclingdocument-data-model.md) - [/docling-project/docling/2-core-architecture](./_docling-project_docling_2-core-architecture.md) - [/docling-project/docling/2.3-configuration-and-pipeline-options](./_docling-project_docling_2.3-configuration-and-pipeline-options.md) - [/docling-project/docling/3-document-backends](./_docling-project_docling_3-document-backends.md) - [/docling-project/docling/2.4-format-detection-and-routing](./_docling-project_docling_2.4-format-detection-and-routing.md) - [/docling-project/docling/3.1-pdf-processing-backends](./_docling-project_docling_3.1-pdf-processing-backends.md) - [/docling-project/docling/3.2-office-document-backends](./_docling-project_docling_3.2-office-document-backends.md) - [/docling-project/docling/4-aiml-models](./_docling-project_docling_4-aiml-models.md) - [/docling-project/docling/4.1-ocr-models](./_docling-project_docling_4.1-ocr-models.md) - [/docling-project/docling/3.3-web-and-markup-backends](./_docling-project_docling_3.3-web-and-markup-backends.md) - [/docling-project/docling/4.3.1-inline-vlm-models](./_docling-project_docling_4.3.1-inline-vlm-models.md) - [/docling-project/docling/4.3-vision-language-models](./_docling-project_docling_4.3-vision-language-models.md) - [/docling-project/docling/4.2-layout-and-table-structure-models](./_docling-project_docling_4.2-layout-and-table-structure-models.md) - [/docling-project/docling/4.3.2-api-based-vlm-models](./_docling-project_docling_4.3.2-api-based-vlm-models.md) - [/docling-project/docling/5-processing-pipelines](./_docling-project_docling_5-processing-pipelines.md) - [/docling-project/docling/5.1-standard-pdf-pipeline](./_docling-project_docling_5.1-standard-pdf-pipeline.md) - [/docling-project/docling/4.4-enrichment-models](./_docling-project_docling_4.4-enrichment-models.md) - [/docling-project/docling/5.2-threaded-pdf-pipeline](./_docling-project_docling_5.2-threaded-pdf-pipeline.md) - [/docling-project/docling/5.3-vlm-pipeline](./_docling-project_docling_5.3-vlm-pipeline.md) - [/docling-project/docling/5.4-extraction-pipeline](./_docling-project_docling_5.4-extraction-pipeline.md) - [/docling-project/docling/5.5-asr-pipeline](./_docling-project_docling_5.5-asr-pipeline.md) - [/docling-project/docling/6-command-line-interface](./_docling-project_docling_6-command-line-interface.md) - [/docling-project/docling/5.6-base-pipeline-architecture](./_docling-project_docling_5.6-base-pipeline-architecture.md) - [/docling-project/docling/6.2-model-management-cli](./_docling-project_docling_6.2-model-management-cli.md) - [/docling-project/docling/7-python-sdk](./_docling-project_docling_7-python-sdk.md) - [/docling-project/docling/6.1-document-conversion-cli](./_docling-project_docling_6.1-document-conversion-cli.md) - [/docling-project/docling/7.1-documentconverter-api](./_docling-project_docling_7.1-documentconverter-api.md) - [/docling-project/docling/7.3-usage-examples](./_docling-project_docling_7.3-usage-examples.md) - [/docling-project/docling/7.2-documentextractor-api](./_docling-project_docling_7.2-documentextractor-api.md) - [/docling-project/docling/8-output-and-integration](./_docling-project_docling_8-output-and-integration.md) - [/docling-project/docling/8.2-document-chunking](./_docling-project_docling_8.2-document-chunking.md) - [/docling-project/docling/8.1-export-formats](./_docling-project_docling_8.1-export-formats.md) - [/docling-project/docling/9-development-and-testing](./_docling-project_docling_9-development-and-testing.md) - [/docling-project/docling/9.1-testing-framework](./_docling-project_docling_9.1-testing-framework.md) - [/docling-project/docling/8.3-framework-integrations](./_docling-project_docling_8.3-framework-integrations.md) - [/docling-project/docling/9.2-ground-truth-data](./_docling-project_docling_9.2-ground-truth-data.md) - [/docling-project/docling/9.3-cicd-and-development-workflow](./_docling-project_docling_9.3-cicd-and-development-workflow.md) - [/docling-project/docling/10-deployment](./_docling-project_docling_10-deployment.md) - [/docling-project/docling/10.1-docker-deployment](./_docling-project_docling_10.1-docker-deployment.md) - [/docling-project/docling/10.2-model-artifacts-management](./_docling-project_docling_10.2-model-artifacts-management.md)",
  "### On this page - [Processing Pipelines](#processing-pipelines.md) - [Pipeline Architecture Overview](#pipeline-architecture-overview.md) - [Pipeline Base Architecture](#pipeline-base-architecture.md) - [Processing Pipelines](#processing-pipelines-1.md) - [Pipeline Architecture Overview](#pipeline-architecture-overview-1.md) - [Pipeline Base Architecture](#pipeline-base-architecture-1.md) - [Pipeline Types and Backend Compatibility](#pipeline-types-and-backend-compatibility.md) - [Pipeline Type Selection](#pipeline-type-selection.md) - [Pipeline Implementations](#pipeline-implementations.md) - [ThreadedStandardPdfPipeline Architecture](#threadedstandardpdfpipeline-architecture.md) - [ThreadedQueue Implementation](#threadedqueue-implementation.md) - [VlmPipeline and ExtractionVlmPipeline](#vlmpipeline-and-extractionvlmpipeline.md) - [SimplePipeline and AsrPipeline](#simplepipeline-and-asrpipeline.md) - [Model Factory Integration](#model-factory-integration.md) - [Factory-Based Model Creation](#factory-based-model-creation.md) - [Pipeline Execution Flow](#pipeline-execution-flow.md) - [BasePipeline Execution Flow](#basepipeline-execution-flow.md) - [PaginatedPipeline vs ThreadedPipeline Processing](#paginatedpipeline-vs-threadedpipeline-processing.md) - [ThreadedStandardPdfPipeline Document Assembly](#threadedstandardpdfpipeline-document-assembly.md) - [Configuration and Model Selection](#configuration-and-model-selection.md) - [Configuration-Driven Model Instantiation](#configuration-driven-model-instantiation.md)",
  "### Core Dependencies | Dependency | Purpose | | -------------------- | --------------------------------- | | `docling-core` | Core data models and utilities | | `docling-parse` | PDF text extraction library | | `docling-ibm-models` | Layout and table structure models | | `pypdfium2` | PDF rendering | | `pydantic` | Data validation and settings | | `huggingface_hub` | Model downloading |",
  "### Optional Dependencies | Extra | Dependencies | Purpose | | ----------- | -------------------------------------------------- | --------------------------------- | | `easyocr` | `easyocr` | Deep learning OCR engine | | `tesserocr` | `tesserocr` | Tesseract OCR binding | | `ocrmac` | `ocrmac` | macOS native OCR | | `vlm` | `transformers`, `mlx-vlm`, `vllm`, `qwen-vl-utils` | Vision-language model support | | `rapidocr` | `rapidocr`, `onnxruntime` | RapidOCR engine with ONNX backend | | `asr` | `openai-whisper` | Audio transcription |",
  "### On this page - [Configuration and Pipeline Options](#configuration-and-pipeline-options.md) - [Purpose and Scope](#purpose-and-scope.md) - [Options Architecture Overview](#options-architecture-overview.md) - [Base Options Classes](#base-options-classes.md) - [BaseOptions](#baseoptions.md) - [PipelineOptions](#pipelineoptions.md) - [ConvertPipelineOptions](#convertpipelineoptions.md) - [PaginatedPipelineOptions](#paginatedpipelineoptions.md) - [Pipeline-Specific Options](#pipeline-specific-options.md) - [PdfPipelineOptions](#pdfpipelineoptions.md) - [VlmPipelineOptions](#vlmpipelineoptions.md) - [AsrPipelineOptions](#asrpipelineoptions.md) - [ThreadedPdfPipelineOptions](#threadedpdfpipelineoptions.md) - [Model-Specific Options](#model-specific-options.md) - [AcceleratorOptions](#acceleratoroptions.md) - [OcrOptions Hierarchy](#ocroptions-hierarchy.md) - [TableStructureOptions](#tablestructureoptions.md) - [LayoutOptions](#layoutoptions.md) - [Picture Description Options](#picture-description-options.md) - [Configuration Flow: CLI to Pipeline](#configuration-flow-cli-to-pipeline.md) - [Environment Variable Configuration](#environment-variable-configuration.md) - [FormatOption and Pipeline Mapping](#formatoption-and-pipeline-mapping.md) - [Pipeline Caching and Options Hashing](#pipeline-caching-and-options-hashing.md) - [Common Configuration Patterns](#common-configuration-patterns.md) - [Pattern 1: Minimal OCR-Free PDF Processing](#pattern-1-minimal-ocr-free-pdf-processing.md) - [Pattern 2: High-Accuracy Table Extraction](#pattern-2-high-accuracy-table-extraction.md) - [Pattern 3: GPU-Accelerated Processing](#pattern-3-gpu-accelerated-processing.md) - [Pattern 4: Code and Formula Enrichment](#pattern-4-code-and-formula-enrichment.md) - [Pattern 5: Custom OCR Engine](#pattern-5-custom-ocr-engine.md) - [Pattern 6: Picture Classification and Description](#pattern-6-picture-classification-and-description.md) - [Pattern 7: Custom Model Artifacts Path](#pattern-7-custom-model-artifacts-path.md) - [Options Validation and Type Safety](#options-validation-and-type-safety.md) - [Summary](#summary.md)",
  "## Export Formats Overview Docling provides four primary export formats, each accessed through methods on the `DoclingDocument` instance: | Format | Method | Primary Use Case | Output Type | | ------------ | ---------------------- | ------------------------------------------- | ----------- | | **Markdown** | `export_to_markdown()` | Human-readable text, LLM input | `str` | | **JSON** | `export_to_json()` | Lossless serialization, programmatic access | `str` | | **HTML** | `export_to_html()` | Web display, visual rendering | `str` | | **DOCTAGS** | `export_to_doctags()` | Structured markup, VLM training | `str` |",
  "## Chunking Configuration The chunking subsystem uses `HybridChunker` from `docling-core`, configurable through initialization parameters: | Parameter | Type | Default | Description | | --------------------------- | ------ | -------------- | --------------------------------- | | `max_tokens` | `int` | 512 | Maximum tokens per chunk | | `tokenizer` | `str` | \"cl100k\\_base\" | Tokenizer for counting (tiktoken) | | `include_heading_hierarchy` | `bool` | `True` | Add heading context to chunks | | `overlap` | `int` | 0 | Token overlap between chunks |",
  "### Pattern 1: Direct Framework Integration Frameworks like LangChain and LlamaIndex provide native loaders/readers that accept `DoclingDocument` objects: ``` ``` These loaders handle the conversion from `DoclingDocument` (or `DocChunk`) to framework-native document representations.",
  "## Model Type Management The `docling-tools` CLI manages different categories of AI models used throughout Docling's processing pipeline, each with specific download and caching strategies. **Model Category Breakdown** ``` ``` **Sources:** [pyproject.toml49](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L49-L49) [pyproject.toml55](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L55-L55) [pyproject.toml93-99](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L93-L99)",
  "## Artifact Path Management The CLI provides flexible configuration for model artifact storage locations through environment variables and command-line options, enabling deployment-specific model management strategies. | Configuration Method | Description | Priority | | ------------------------ | ----------------------------- | -------- | | `DOCLING_ARTIFACTS_PATH` | Environment variable override | Highest | | `--artifacts-path` | CLI argument (if available) | Medium | | Default cache | `~/.cache/docling/models` | Lowest | **Environment Integration** ``` ``` **Sources:** [Dockerfile14-15](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L14-L15) [Dockerfile28-29](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L28-L29)",
  "## Overview The `docling-tools` CLI is the dedicated model management interface for Docling, providing utilities to download and manage AI model artifacts used throughout the document processing pipeline. It serves as the primary tool for setting up and maintaining the machine learning models that power Docling's advanced document understanding capabilities. **CLI Architecture** ``` ``` **Sources:** [pyproject.toml86-88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L86-L88) [Dockerfile19](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L19-L19)",
  "## Pipeline Integration The model management CLI integrates tightly with Docling's document processing pipelines, ensuring that required models are available before pipeline initialization. **Model-to-Pipeline Mapping** ``` ``` **Sources:** [pyproject.toml107-109](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L107-L109) [docling/backend/docling\\_parse\\_v4\\_backend.py1-250](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py#L1-L250)",
  "## Model Download Command The primary function of `docling-tools` is the `models download` command, which handles downloading and caching model artifacts required by Docling's processing pipelines. **Model Download Workflow** ``` ``` **Sources:** [Dockerfile19](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L19-L19) [CHANGELOG.md76](https://github.com/docling-project/docling/blob/f7244a43/CHANGELOG.md#L76-L76)",
  "# Document Backends Relevant source files - [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py) - [docling/backend/docling\\_parse\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py) - [docling/backend/docling\\_parse\\_v2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py) - [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py) - [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py) - [docling/backend/pypdfium2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py) - [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py) - [docling/utils/locks.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md) - [tests/test\\_backend\\_docling\\_parse\\_v4.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py) - [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py) This document covers the backend architecture in Docling that handles parsing and initial processing of different document formats. Document backends are responsible for extracting raw content and structure from input files before they enter the AI/ML processing pipeline. For information about the complete document conversion process, see [Document Conversion Process](docling-project/docling/2.1-document-conversion-flow.md). For details about pipeline processing that occurs after backend parsing, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md).",
  "### Legacy DoclingParse Backends The system maintains backward compatibility with older docling-parse versions through dedicated backend implementations. Sources: [docling/backend/docling\\_parse\\_backend.py200-238](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py#L200-L238) [docling/backend/docling\\_parse\\_v2\\_backend.py228-277](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py#L228-L277)",
  "### Throughput Analysis For a document with `N` pages and 5 stages: - **Sequential pipeline:** Processes `N` pages serially through all stages - **Threaded pipeline:** Can process up to `min(N, queue_capacity * num_stages)` pages concurrently **Example:** With `queue_max_size=10` and 5 stages, up to 50 pages can be \"in flight\" simultaneously across the pipeline.",
  "# Quick Start Relevant source files - [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) This page provides simple, working code examples to get you started with Docling immediately. It covers the most common use cases: basic document conversion, using vision language models, and CLI usage. For detailed installation instructions, see [Installation](docling-project/docling/1.1-installation.md). For advanced configuration options, see [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md) and [Advanced Options](https://docling-project.github.io/docling/usage/advanced_options/).",
  "### Overlap Configuration - **No overlap (0 tokens)**: Fastest processing, risk of splitting concepts - **Small overlap (50-100 tokens)**: Minimal redundancy, some context preservation - **Medium overlap (100-200 tokens)**: Recommended for most scenarios - **Large overlap (200+ tokens)**: Maximum context continuity, higher storage cost",
  "# Testing Framework Relevant source files - [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py) - [docling/models/tesseract\\_ocr\\_cli\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py) - [docling/models/tesseract\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md) - [tests/data\\_scanned/sample\\_with\\_rotation\\_mismatch.pdf](https://github.com/docling-project/docling/blob/f7244a43/tests/data_scanned/sample_with_rotation_mismatch.pdf) - [tests/test\\_backend\\_docling\\_parse.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse.py) - [tests/test\\_backend\\_docling\\_parse\\_v2.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v2.py) - [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py) - [tests/test\\_backend\\_pdfium.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pdfium.py) - [tests/test\\_e2e\\_ocr\\_conversion.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py) This document covers Docling's comprehensive testing infrastructure, including verification utilities, ground truth data management, and test patterns for document backends. For information about CI/CD workflows and development processes, see [CI/CD and Development Workflow](docling-project/docling/9.3-cicd-and-development-workflow.md). For details on ground truth data formats and schema evolution, see [Ground Truth Data](docling-project/docling/9.2-ground-truth-data.md).",
  "### Element Detection The model classifies document elements into these categories: | Label Type | Elements | Purpose | | ------------- | -------------------------------------------------------------------------------------------------- | ------------------------ | | Text Elements | `TEXT`, `FOOTNOTE`, `CAPTION`, `SECTION_HEADER`, `PAGE_HEADER`, `PAGE_FOOTER`, `CODE`, `LIST_ITEM` | Content text blocks | | Tables | `TABLE`, `DOCUMENT_INDEX` | Tabular data structures | | Figures | `PICTURE` | Images and graphics | | Interactive | `CHECKBOX_SELECTED`, `CHECKBOX_UNSELECTED` | Form elements | | Containers | `FORM`, `KEY_VALUE_REGION` | Wrapper structures | | Mathematical | `FORMULA` | Mathematical expressions |",
  "### Core Parameters The CLI accepts the following main parameter categories: **Input/Output Configuration:** - `input_sources` - File paths, directories, or URLs to process - `--from` - Input format filtering ([docling/cli/main.py303-307](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L303-L307)) - `--to` - Output format selection ([docling/cli/main.py308-310](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L308-L310)) - `--output` - Output directory ([docling/cli/main.py432-434](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L432-L434)) **Processing Pipeline Options:** - `--pipeline` - Choose between `standard`, `vlm`, or `asr` pipelines ([docling/cli/main.py330-333](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L330-L333)) - `--vlm-model` - VLM model selection for vision-language processing ([docling/cli/main.py334-337](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L334-L337)) - `--asr-model` - ASR model for audio processing ([docling/cli/main.py338-341](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L338-L341)) **OCR Configuration:** - `--ocr/--no-ocr` - Enable/disable OCR processing ([docling/cli/main.py342-347](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L342-L347)) - `--force-ocr` - Replace existing text with OCR ([docling/cli/main.py348-354](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L348-L354)) - `--ocr-engine` - OCR engine selection ([docling/cli/main.py355-365](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L355-L365)) - `--ocr-lang` - Language configuration ([docling/cli/main.py366-372](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L366-L372))",
  "### Advanced Configuration **PDF Processing Options:** - `--pdf-backend` - Backend selection (DLPARSE\\_V4, DLPARSE\\_V2, PYPDFIUM2) ([docling/cli/main.py373-375](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L373-L375)) - `--table-mode` - Table structure model mode (FAST/ACCURATE) ([docling/cli/main.py376-379](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L376-L379)) - `--enrich-code` - Enable code enrichment ([docling/cli/main.py380-383](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L380-L383)) - `--enrich-formula` - Enable formula enrichment ([docling/cli/main.py384-387](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L384-L387)) **Performance and Resource Control:** - `--num-threads` - Threading configuration ([docling/cli/main.py478](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L478-L478)) - `--device` - Accelerator device selection ([docling/cli/main.py479-481](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L479-L481)) - `--document-timeout` - Per-document timeout ([docling/cli/main.py471-477](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L471-L477)) - `--abort-on-error` - Error handling behavior ([docling/cli/main.py424-431](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L424-L431)) Sources: [docling/cli/main.py294-500](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L294-L500) [docling/datamodel/pipeline\\_options.py232-239](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L232-L239)",
  "### On this page - [Command Line Interface](#command-line-interface.md) - [Overview](#overview.md) - [Document Conversion Command](#document-conversion-command.md) - [Core Parameters](#core-parameters.md) - [Processing Pipeline Selection](#processing-pipeline-selection.md) - [Format Support and Export Options](#format-support-and-export-options.md) - [Advanced Configuration](#advanced-configuration.md) - [CLI Processing Workflow](#cli-processing-workflow.md) - [Command Examples](#command-examples.md)",
  "## Overview Docling provides two CLI entry points defined in [pyproject.toml86-88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L86-L88): - **`docling`** - Main document conversion interface supporting batch processing of various document formats - **`docling-tools`** - Utility for downloading and managing AI model artifacts Both tools are built using the Typer framework and provide comprehensive help through the `--help` flag. **CLI Entry Points Architecture** ``` ``` Sources: [pyproject.toml86-88](https://github.com/docling-project/docling/blob/f7244a43/pyproject.toml#L86-L88) [docling/cli/main.py136-141](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L136-L141)",
  "### Memory Optimization The container configuration optimizes memory usage through: - **Temporary cache locations**: Using `/tmp/` for model caches reduces persistent storage requirements - **CPU-only PyTorch**: Eliminates GPU memory overhead - **Slim base image**: Minimizes container footprint",
  "# Core Architecture Relevant source files - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) This document provides an architectural overview of Docling's core system design, including its three-layer architecture, key abstractions, and how components interact during document processing. For details on specific subsystems, see [Document Conversion Flow](docling-project/docling/2.1-document-conversion-flow.md), [DoclingDocument Data Model](docling-project/docling/2.2-doclingdocument-data-model.md), [Configuration and Pipeline Options](docling-project/docling/2.3-configuration-and-pipeline-options.md), and [Format Detection and Routing](docling-project/docling/2.4-format-detection-and-routing.md).",
  "## Conversion Flow Architecture The document conversion process follows a consistent pattern across all pipelines: ``` ``` **Sources:** [docling/document\\_converter.py227-284](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L227-L284) [docling/document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L351-L378) [docling/pipeline/base\\_pipeline.py62-84](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py#L62-L84)",
  "### Chunking Methods | Chunker Type | Description | Use Case | | --------------------- | --------------------------------------------------- | ---------------------------------- | | `HierarchicalChunker` | Structure-aware chunking based on document elements | Preserving document hierarchy | | `HybridChunker` | Token-aware refinement with merge/split logic | RAG applications with token limits |",
  "## Overview Docling provides multiple export formats to support different downstream use cases, from human-readable documents to machine-processable structured data. All export formats are generated from the universal `DoclingDocument` representation that serves as the intermediate format after document conversion.",
  "### TextItem Structure Text elements represent textual content with rich provenance information: ``` ``` **Key fields:** - `orig`: Original text as extracted from the source - `text`: Processed/cleaned text for output - `prov`: Provenance array linking text to source page(s) - `label`: Semantic classification (text, paragraph, section\\_header, etc.)",
  "# Format Detection and Routing Relevant source files - [docling/backend/abstract\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/abstract_backend.py) - [docling/backend/docling\\_parse\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_backend.py) - [docling/backend/docling\\_parse\\_v2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v2_backend.py) - [docling/backend/docling\\_parse\\_v4\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/docling_parse_v4_backend.py) - [docling/backend/pypdfium2\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/pypdfium2_backend.py) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docling/utils/layout\\_postprocessor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/layout_postprocessor.py) - [docling/utils/locks.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/locks.py) - [tests/test\\_backend\\_docling\\_parse\\_v4.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v4.py) This document describes how Docling automatically detects the format of input documents and routes them to the appropriate backend and pipeline for processing. For information about pipeline execution itself, see [Processing Pipelines](docling-project/docling/5-processing-pipelines.md). For backend implementation details, see [Document Backends](docling-project/docling/3-document-backends.md).",
  "## CLI Format Configuration The CLI provides extensive control over format routing through command-line arguments: ``` ``` **Key CLI Options:** | Option | Purpose | Example | | --------------- | ---------------------------- | ---------------------------- | | `--from` | Filter allowed input formats | `--from pdf --from docx` | | `--pipeline` | Select processing pipeline | `--pipeline vlm` | | `--pdf-backend` | Choose PDF backend | `--pdf-backend dlparse_v4` | | `--ocr-engine` | Select OCR engine | `--ocr-engine tesseract` | | `--vlm-model` | Choose VLM model | `--vlm-model granitedocling` | **Sources:** [docling/cli/main.py308-697](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py#L308-L697)",
  "### Pipeline Caching Mechanism To avoid redundant model loading, `DocumentConverter` caches pipeline instances based on a composite key: ``` ``` **Caching Logic:** 1. Hash the serialized `pipeline_options` to create a stable fingerprint 2. Use `(pipeline_class, options_hash)` as the cache key 3. Thread-safe access using `_PIPELINE_CACHE_LOCK` 4. Pipelines with identical configurations share the same instance across all documents This approach is critical for performance when processing batches of documents with the same pipeline configuration, as it avoids reloading models (OCR engines, layout models, table models, etc.) for each document. **Sources:** [docling/document\\_converter.py212-218](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L212-L218) [docling/document\\_converter.py351-378](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L351-L378)",
  "### Initialization Pattern All models follow a consistent initialization pattern: 1. **enabled**: Boolean flag controlling whether the model is active 2. **artifacts\\_path**: Optional path to model artifacts (triggers download if None) 3. **options**: Model-specific configuration object 4. **accelerator\\_options**: Hardware acceleration settings (device, threads) Example from [docling/models/layout\\_model.py49-87](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L49-L87): ``` ```",
  "### Artifact Path Resolution Models support two artifact path patterns for backward compatibility: 1. **Modern structure** (recommended): `artifacts_path / model_repo_folder / model_path` 2. **Legacy structure** (deprecated): `artifacts_path / model_path` Example from [docling/models/layout\\_model.py64-81](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py#L64-L81): ``` ``` ---",
  "# AI/ML Models Relevant source files - [docling/cli/models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/models.py) - [docling/models/auto\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/auto_ocr_model.py) - [docling/models/base\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_ocr_model.py) - [docling/models/code\\_formula\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/code_formula_model.py) - [docling/models/document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/document_picture_classifier.py) - [docling/models/easyocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/easyocr_model.py) - [docling/models/layout\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/layout_model.py) - [docling/models/page\\_assemble\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_assemble_model.py) - [docling/models/page\\_preprocessing\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/page_preprocessing_model.py) - [docling/models/picture\\_description\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py) - [docling/models/plugins/defaults.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/plugins/defaults.py) - [docling/models/rapid\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py) - [docling/models/table\\_structure\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/table_structure_model.py) - [docling/pipeline/standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/standard_pdf_pipeline.py) - [docling/utils/model\\_downloader.py](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py) - [tests/test\\_document\\_picture\\_classifier.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_document_picture_classifier.py) - [tests/test\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_options.py)",
  "### Model Download Interface Each model class implements a static `download_models()` method: ``` ``` This method handles downloading from the appropriate source: - **HuggingFace** (default): Uses `huggingface_hub.snapshot_download()` - **ModelScope** (alternative): Uses `modelscope` library for downloads in China",
  "### Page-Level Models Page-level models inherit from `BasePageModel` and process entire pages through a batch iterator pattern. They implement: ``` ``` Models in this category include: - **OCR Models**: Extract text from images ([RapidOcrModel](https://github.com/docling-project/docling/blob/f7244a43/RapidOcrModel) [EasyOcrModel](https://github.com/docling-project/docling/blob/f7244a43/EasyOcrModel) [TesseractOcrModel](https://github.com/docling-project/docling/blob/f7244a43/TesseractOcrModel) [OcrMacModel](https://github.com/docling-project/docling/blob/f7244a43/OcrMacModel)) - **LayoutModel**: Analyzes page layout and identifies document elements - **TableStructureModel**: Recognizes table structure and extracts cells - **PagePreprocessingModel**: Generates page images and extracts text cells - **PageAssembleModel**: Assembles page elements into structured output",
  "### On this page - [OCR Models](#ocr-models.md) - [OCR Architecture Overview](#ocr-architecture-overview.md) - [OCR Model Class Hierarchy](#ocr-model-class-hierarchy.md) - [Base OCR Model Framework](#base-ocr-model-framework.md) - [Core Functionality](#core-functionality.md) - [OCR Region Detection](#ocr-region-detection.md) - [Supported OCR Engines](#supported-ocr-engines.md) - [OcrAutoModel (Automatic Engine Selection)](#ocrautomodel-automatic-engine-selection.md) - [Selection Priority](#selection-priority.md) - [Implementation](#implementation.md) - [RapidOcrModel](#rapidocrmodel.md) - [Architecture](#architecture.md) - [Backend Support](#backend-support.md) - [Model Artifacts](#model-artifacts.md) - [Configuration Options](#configuration-options.md) - [Processing Flow](#processing-flow.md) - [TesseractOcrModel](#tesseractocrmodel.md) - [Key Features](#key-features.md) - [Language Detection Implementation](#language-detection-implementation.md) - [Configuration Options](#configuration-options-1.md) - [TesseractOcrCliModel](#tesseractocrclimodel.md) - [Implementation Characteristics](#implementation-characteristics.md) - [Key Methods](#key-methods.md) - [Configuration Options](#configuration-options-2.md) - [EasyOcrModel](#easyocrmodel.md) - [Key Features](#key-features-1.md) - [Configuration Options](#configuration-options-3.md) - [OcrMacModel](#ocrmacmodel.md) - [Platform Requirements](#platform-requirements.md) - [OCR Processing Pipeline](#ocr-processing-pipeline.md) - [End-to-End OCR Flow](#end-to-end-ocr-flow.md) - [Coordinate Transformation](#coordinate-transformation.md) - [OCR Cell Post-Processing](#ocr-cell-post-processing.md) - [Configuration and Options](#configuration-and-options.md) - [OCR Options Factory](#ocr-options-factory.md) - [Common Options (All Engines)](#common-options-all-engines.md) - [Usage Examples](#usage-examples.md) - [Integration with Accelerator Options](#integration-with-accelerator-options.md) - [Performance and Capabilities](#performance-and-capabilities.md) - [Engine Comparison](#engine-comparison.md) - [Processing Characteristics](#processing-characteristics.md) - [Quality Assessment](#quality-assessment.md)",
  "# Python SDK Relevant source files - [README.md](https://github.com/docling-project/docling/blob/f7244a43/README.md) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [docs/examples/minimal\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docs/examples/minimal_vlm_pipeline.py) - [docs/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/index.md) - [docs/usage/index.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/index.md) - [docs/usage/mcp.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/mcp.md) - [docs/usage/vision\\_models.md](https://github.com/docling-project/docling/blob/f7244a43/docs/usage/vision_models.md) - [mkdocs.yml](https://github.com/docling-project/docling/blob/f7244a43/mkdocs.yml) The Python SDK provides programmatic interfaces for document processing through Docling's document AI capabilities. The SDK exposes two primary classes for different use cases: - **`DocumentConverter`**: Converts documents to the unified `DoclingDocument` format with comprehensive structure and content extraction - **`DocumentExtractor`**: Performs structured data extraction from documents using schema-based templates This page provides an overview of both APIs and common integration patterns. For detailed documentation, see: - [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) - Full conversion API reference - [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) - Structured extraction API reference - [Usage Examples](docling-project/docling/7.3-usage-examples.md) - Code examples and integration patterns For command-line usage, see [Command Line Interface](docling-project/docling/6-command-line-interface.md).",
  "## Integration with AI Frameworks The SDK's `DoclingDocument` output integrates seamlessly with popular AI frameworks and RAG pipelines. **Framework Integration Pattern:** ``` ``` **LangChain Integration:** ``` ``` **LlamaIndex Integration:** ``` ``` **Document Chunking:** Docling provides specialized chunkers for optimal RAG performance: - `HybridChunker`: Combines semantic and structural chunking - `MetaChunker`: Preserves metadata and hierarchical structure - `DocChunks`: Native chunk representation with provenance See [Chunking](docling-project/docling/8.2-document-chunking.md) for detailed chunking strategies and [Framework Integrations](docling-project/docling/8.3-framework-integrations.md) for specific framework examples. Sources: [docling\\_core.transforms.chunker](https://github.com/docling-project/docling/blob/f7244a43/docling_core.transforms.chunker) [examples/rag\\_langchain.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_langchain.ipynb) [examples/rag\\_llamaindex.ipynb](https://github.com/docling-project/docling/blob/f7244a43/examples/rag_llamaindex.ipynb)",
  "## DocumentConverter Overview The `DocumentConverter` class is the primary interface for converting documents into the unified `DoclingDocument` format. It handles format detection, backend initialization, and pipeline orchestration automatically. **Basic Usage:** ``` ``` **Key Capabilities:** ``` ``` **Core Methods:** | Method | Purpose | Returns | | --------------------------------- | ------------------------------------------------- | ---------------------------- | | `convert(source)` | Convert single document from path, URL, or stream | `ConversionResult` | | `convert_all(sources)` | Convert multiple documents with streaming results | `Iterator[ConversionResult]` | | `convert_string(content, format)` | Convert in-memory string content (HTML, Markdown) | `ConversionResult` | | `initialize_pipeline(format)` | Pre-load pipeline for specified format | None | The `ConversionResult` object contains: - `document`: The converted `DoclingDocument` - `status`: Success/failure status (`ConversionStatus`) - `errors`: List of errors if any occurred (`List[ErrorItem]`) - `pages`: Raw page-level data (`List[Page]`) - `timings`: Performance profiling data See [DocumentConverter API](docling-project/docling/7.1-documentconverter-api.md) for detailed documentation of configuration options, error handling, and advanced usage patterns. Sources: [docling/document\\_converter.py184-433](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py#L184-L433)",
  "## Configuration Validation and Limits The SDK provides comprehensive validation through `DocumentLimits` to prevent resource exhaustion and ensure predictable processing behavior. **DocumentLimits Configuration:** - `max_file_size`: Maximum file size in bytes - `max_num_pages`: Maximum pages for paginated documents - `page_range`: Tuple specifying page range to process **Validation Points:** 1. **File size check**: Before document parsing 2. **Page count check**: After backend initialization 3. **Page range validation**: Ensures valid range specification 4. **Format validation**: Against allowed formats list ``` ``` Sources: [docling/datamodel/settings.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/settings.py#LNaN-LNaN) [docling/datamodel/document.py108-168](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py#L108-L168) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again.",
  "## DocumentExtractor Overview The `DocumentExtractor` class provides structured data extraction from documents using schema-based templates. It uses vision-language models (VLMs) to extract specific fields according to user-defined schemas. **Basic Usage:** ``` ``` **Template Types:** The extractor supports three template formats: ``` ``` 1. **String Template**: Natural language description of desired extraction 2. **Dictionary Template**: Key-value pairs with field names and descriptions 3. **Pydantic Model**: Strongly-typed schema with validation **Extraction Result:** The `ExtractionResult` contains: - `data`: Extracted structured data matching the template schema - `confidence`: Model confidence score for the extraction - `source`: Original source document information **Use Cases:** - Metadata extraction (titles, authors, dates) - Form data extraction - Invoice/receipt parsing - Scientific paper metadata - Custom field extraction from any document type See [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md) for detailed documentation including template design, model configuration, and advanced extraction patterns. Sources: [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) [docling/datamodel/pipeline\\_options.py328-332](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py#L328-L332)",
  "# Development and Testing Relevant source files - [docling/models/tesseract\\_ocr\\_cli\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_cli_model.py) - [docling/models/tesseract\\_ocr\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/tesseract_ocr_model.py) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.json) - [tests/data/groundtruth/docling\\_v2/2203.01017v2.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2203.01017v2.md) - [tests/data/groundtruth/docling\\_v2/2206.01062.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2206.01062.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2206.01062.json) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.doctags.txt) - [tests/data/groundtruth/docling\\_v2/2305.03393v1.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/2305.03393v1.json) - [tests/data/groundtruth/docling\\_v2/multi\\_page.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/multi_page.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.doctags.txt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.doctags.txt) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.json) - [tests/data/groundtruth/docling\\_v2/redp5110\\_sampled.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/redp5110_sampled.md) - [tests/data\\_scanned/sample\\_with\\_rotation\\_mismatch.pdf](https://github.com/docling-project/docling/blob/f7244a43/tests/data_scanned/sample_with_rotation_mismatch.pdf) - [tests/test\\_backend\\_docling\\_parse.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse.py) - [tests/test\\_backend\\_docling\\_parse\\_v2.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_docling_parse_v2.py) - [tests/test\\_backend\\_pdfium.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_pdfium.py) - [tests/test\\_e2e\\_ocr\\_conversion.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_e2e_ocr_conversion.py)",
  "# Web and Markup Backends Relevant source files - [docling/backend/html\\_backend.py](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py) - [docling/cli/main.py](https://github.com/docling-project/docling/blob/f7244a43/docling/cli/main.py) - [docling/datamodel/base\\_models.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/base_models.py) - [docling/datamodel/document.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/document.py) - [docling/datamodel/pipeline\\_options.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options.py) - [docling/document\\_converter.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_converter.py) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_06.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_06.html.md) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.itxt) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.json) - [tests/data/groundtruth/docling\\_v2/example\\_09.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/example_09.html.md) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.itxt](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.itxt) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.json](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.json) - [tests/data/groundtruth/docling\\_v2/wiki\\_duck.html.md](https://github.com/docling-project/docling/blob/f7244a43/tests/data/groundtruth/docling_v2/wiki_duck.html.md) - [tests/test\\_backend\\_html.py](https://github.com/docling-project/docling/blob/f7244a43/tests/test_backend_html.py)",
  "### Core Implementation ``` ``` **Sources:** [docling/backend/html\\_backend.py183-237](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L183-L237) [docling/backend/html\\_backend.py239-292](https://github.com/docling-project/docling/blob/f7244a43/docling/backend/html_backend.py#L239-L292)",
  "## Purpose and Scope This document covers the document backends for web and markup formats: HTML, Markdown, and AsciiDoc. These backends parse structured text documents and convert them into the unified `DoclingDocument` representation. All three formats share the `SimplePipeline` processing path and produce documents with hierarchical structure, content layers, and rich formatting. For PDF document backends, see [PDF Processing Backends](docling-project/docling/3.1-pdf-processing-backends.md). For Office document formats, see [Office Document Backends](docling-project/docling/3.2-office-document-backends.md).",
  "### CPU Optimization The Dockerfile configures PyTorch for CPU-only operation to reduce image size and memory requirements: ``` ``` This configuration is suitable for CPU-based inference but may require modification for GPU-accelerated deployments. Sources: [Dockerfile10-12](https://github.com/docling-project/docling/blob/f7244a43/Dockerfile#L10-L12)",
  "### Model Storage Architecture ``` ``` **Model Storage Conventions**: Each model type defines a `_model_repo_folder` class attribute (e.g., `RapidOcrModel._model_repo_folder = \"RapidOcr\"`) used for organizing downloaded files. HuggingFace models use a `repo_cache_folder` property that sanitizes repo IDs by replacing `/` with `--`. Sources: [docling/utils/model\\_downloader.py1-158](https://github.com/docling-project/docling/blob/f7244a43/docling/utils/model_downloader.py#L1-L158) [docling/models/rapid\\_ocr\\_model.py37-224](https://github.com/docling-project/docling/blob/f7244a43/docling/models/rapid_ocr_model.py#L37-L224) [docling/models/picture\\_description\\_vlm\\_model.py49-53](https://github.com/docling-project/docling/blob/f7244a43/docling/models/picture_description_vlm_model.py#L49-L53)",
  "# Extraction Pipeline Relevant source files - [docling/datamodel/extraction.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/extraction.py) - [docling/datamodel/pipeline\\_options\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/pipeline_options_vlm_model.py) - [docling/datamodel/vlm\\_model\\_specs.py](https://github.com/docling-project/docling/blob/f7244a43/docling/datamodel/vlm_model_specs.py) - [docling/document\\_extractor.py](https://github.com/docling-project/docling/blob/f7244a43/docling/document_extractor.py) - [docling/models/api\\_vlm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/api_vlm_model.py) - [docling/models/base\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/base_model.py) - [docling/models/utils/hf\\_model\\_download.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/utils/hf_model_download.py) - [docling/models/vlm\\_models\\_inline/hf\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/hf_transformers_model.py) - [docling/models/vlm\\_models\\_inline/mlx\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/mlx_model.py) - [docling/models/vlm\\_models\\_inline/nuextract\\_transformers\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/nuextract_transformers_model.py) - [docling/models/vlm\\_models\\_inline/vllm\\_model.py](https://github.com/docling-project/docling/blob/f7244a43/docling/models/vlm_models_inline/vllm_model.py) - [docling/pipeline/asr\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/asr_pipeline.py) - [docling/pipeline/base\\_extraction\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_extraction_pipeline.py) - [docling/pipeline/base\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/base_pipeline.py) - [docling/pipeline/extraction\\_vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/extraction_vlm_pipeline.py) - [docling/pipeline/simple\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/simple_pipeline.py) - [docling/pipeline/threaded\\_standard\\_pdf\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/threaded_standard_pdf_pipeline.py) - [docling/pipeline/vlm\\_pipeline.py](https://github.com/docling-project/docling/blob/f7244a43/docling/pipeline/vlm_pipeline.py) The Extraction Pipeline provides schema-based structured data extraction from documents using Vision-Language Models. Unlike the VlmPipeline (see [5.3](docling-project/docling/5.3-vlm-pipeline.md)) which performs full document conversion, `ExtractionVlmPipeline` focuses on extracting specific fields defined by user-provided templates, returning JSON-structured data rather than a complete `DoclingDocument`. This pipeline is currently experimental and supports PDF and image formats only. It uses the NuExtract model, which is specifically designed for structured information extraction from visual documents. **Related pages**: For full document conversion with VLM models, see [VLM Pipeline](docling-project/docling/5.3-vlm-pipeline.md). For general pipeline architecture, see [Base Pipeline Architecture](docling-project/docling/5.6-base-pipeline-architecture.md). For the public API, see [DocumentExtractor API](docling-project/docling/7.2-documentextractor-api.md)."
]