[
  "## Model Lifecycle The lifecycle of a Pydantic model class from definition to usage: ``` ``` Key lifecycle steps: 1. **Metaclass invocation:** `ModelMetaclass.__new__()` [pydantic/\\_internal/\\_model\\_construction.py80-276](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L276) 2. **Namespace inspection:** `inspect_namespace()` identifies fields vs class vars [pydantic/\\_internal/\\_model\\_construction.py520-642](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L520-L642) 3. **Field collection:** `set_model_fields()` creates `FieldInfo` instances [pydantic/\\_internal/\\_model\\_construction.py299-331](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L299-L331) 4. **Schema generation:** `complete_model_class()` builds validation/serialization schemas [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) 5. **Completion:** Model marked as complete in `__pydantic_complete__` [pydantic/main.py167-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L167-L168) Models can be rebuilt after definition using `model_rebuild()` [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) if forward references need resolution. **Sources:** [pydantic/\\_internal/\\_model\\_construction.py79-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L277) [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650)",
  "# Overview Relevant source files - [.pre-commit-config.yaml](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml) - [CITATION.cff](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff) - [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md) - [docs/concepts/config.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md) - [docs/concepts/dataclasses.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md) - [docs/concepts/json.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json.md) - [docs/concepts/json\\_schema.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md) - [docs/concepts/models.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md) - [docs/concepts/performance.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md) - [docs/concepts/serialization.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md) - [docs/concepts/validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md) - [docs/contributing.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md) - [docs/examples/custom\\_validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/examples/custom_validators.md) - [docs/integrations/aws\\_lambda.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/aws_lambda.md) - [docs/integrations/llms.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/llms.md) - [docs/migration.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md) - [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) - [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) - [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) - [pydantic/version.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py) - [release/README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/release/README.md) - [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) - [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py) - [uv.lock](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock) This document provides a high-level introduction to Pydantic's architecture, core concepts, and design philosophy. It explains what Pydantic is, its relationship with pydantic-core, and how the major systems interact. For detailed information about specific subsystems, see: - Model system details: [Core Model System](pydantic/pydantic/2-core-model-system.md) - Type system details: [Type System](pydantic/pydantic/3-type-system.md) - Validation and serialization: [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - Schema generation: [Schema Generation](pydantic/pydantic/5-schema-generation.md)",
  "### Built-in Type Serialization | Python Type | JSON Representation | Example | | --------------------------------- | -------------------------- | ---------------------------------------- | | `str` | string | `\"text\"` | | `int`/`float` | number | `123`, `3.14` | | `bool` | boolean | `true`, `false` | | `None` | null | `null` | | `list`/`tuple`/`set` | array | `[1, 2, 3]` | | `dict` | object | `{\"key\": \"value\"}` | | `UUID` | string | `\"ebcdab58-6eb8-46fb-a190-d07a33e9eac8\"` | | `datetime` | string (ISO 8601) | `\"2032-01-01T01:01:00\"` | | `date` | string (ISO 8601) | `\"2032-01-01\"` | | `time` | string (ISO 8601) | `\"12:34:56\"` | | `timedelta` | string (ISO 8601 duration) | `\"P12DT34.000056S\"` | | `bytes` | string (UTF-8) | `\"this is bytes\"` | | `Decimal` | string | `\"12.34\"` | | `Enum` | string/number | `\"bar\"` | | `Pattern` | string | `\"^regex$\"` | | `SecretStr`/`SecretBytes` | string (masked) | `\"**********\"` | | `IPv4Address`/`IPv6Address` | string | `\"192.168.0.1\"` | | `Path`/`FilePath`/`DirectoryPath` | string | `\"/path/to/file\"` | Sources: [tests/test\\_json.py61-91](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L61-L91) [tests/test\\_json.py107-120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L107-L120)",
  "## Integration with Standard JSON Module Pydantic provides a compatibility function for use with the standard `json` module: ``` ``` This allows serializing models and other Pydantic types using the standard `json` module. Sources: [tests/test\\_json.py120](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L120-L120) [tests/test\\_json.py278-288](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L278-L288)",
  "### JSON Encoders You can use the `json_encoders` configuration option to customize serialization for specific types: ``` ``` JSON encoders are applied when serializing to JSON, not when creating Python dictionaries. Sources: [tests/test\\_json.py400-414](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L400-L414) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439) [tests/test\\_json.py480-488](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L480-L488)",
  "## Inheritance and JSON Serialization In class inheritance, field serializers from parent classes are used, unless the child class provides its own serializer for the same field: ``` ``` Note that `json_encoders` configurations are not inherited; child models must define their own. Sources: [tests/test\\_json.py254-268](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L254-L268) [tests/test\\_json.py426-439](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json.py#L426-L439)",
  "### Bytes Constraints The `conbytes` function creates a constrained bytes type with parameters: - `min_length`: Minimum length in bytes - `max_length`: Maximum length in bytes - `strict`: When True, input must be an actual bytes object",
  "### Set and FrozenSet Constraints The `conset` and `confrozenset` functions create constrained set and frozenset types with similar parameters: - `item_type`: The type of items in the set - `min_length`: Minimum number of items - `max_length`: Maximum number of items",
  "## Model Lifecycle The lifecycle of a Pydantic model class from definition to usage: ``` ``` Key lifecycle steps: 1. **Metaclass invocation:** `ModelMetaclass.__new__()` [pydantic/\\_internal/\\_model\\_construction.py80-276](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L80-L276) 2. **Namespace inspection:** `inspect_namespace()` identifies fields vs class vars [pydantic/\\_internal/\\_model\\_construction.py520-642](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L520-L642) 3. **Field collection:** `set_model_fields()` creates `FieldInfo` instances [pydantic/\\_internal/\\_model\\_construction.py299-331](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L299-L331) 4. **Schema generation:** `complete_model_class()` builds validation/serialization schemas [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) 5. **Completion:** Model marked as complete in `__pydantic_complete__` [pydantic/main.py167-168](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L167-L168) Models can be rebuilt after definition using `model_rebuild()` [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650) if forward references need resolution. **Sources:** [pydantic/\\_internal/\\_model\\_construction.py79-277](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L79-L277) [pydantic/\\_internal/\\_model\\_construction.py387-518](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py#L387-L518) [pydantic/main.py593-650](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py#L593-L650)",
  "# Overview Relevant source files - [.pre-commit-config.yaml](https://github.com/pydantic/pydantic/blob/76ef0b08/.pre-commit-config.yaml) - [CITATION.cff](https://github.com/pydantic/pydantic/blob/76ef0b08/CITATION.cff) - [HISTORY.md](https://github.com/pydantic/pydantic/blob/76ef0b08/HISTORY.md) - [docs/concepts/config.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/config.md) - [docs/concepts/dataclasses.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/dataclasses.md) - [docs/concepts/json.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json.md) - [docs/concepts/json\\_schema.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/json_schema.md) - [docs/concepts/models.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/models.md) - [docs/concepts/performance.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/performance.md) - [docs/concepts/serialization.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/serialization.md) - [docs/concepts/validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/concepts/validators.md) - [docs/contributing.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md) - [docs/examples/custom\\_validators.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/examples/custom_validators.md) - [docs/integrations/aws\\_lambda.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/aws_lambda.md) - [docs/integrations/llms.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/integrations/llms.md) - [docs/migration.md](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/migration.md) - [pydantic/\\_internal/\\_model\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_model_construction.py) - [pydantic/fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/fields.py) - [pydantic/main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/main.py) - [pydantic/version.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/version.py) - [release/README.md](https://github.com/pydantic/pydantic/blob/76ef0b08/release/README.md) - [tests/test\\_create\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_create_model.py) - [tests/test\\_edge\\_cases.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_edge_cases.py) - [tests/test\\_main.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_main.py) - [tests/test\\_private\\_attributes.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_private_attributes.py) - [uv.lock](https://github.com/pydantic/pydantic/blob/76ef0b08/uv.lock) This document provides a high-level introduction to Pydantic's architecture, core concepts, and design philosophy. It explains what Pydantic is, its relationship with pydantic-core, and how the major systems interact. For detailed information about specific subsystems, see: - Model system details: [Core Model System](pydantic/pydantic/2-core-model-system.md) - Type system details: [Type System](pydantic/pydantic/3-type-system.md) - Validation and serialization: [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md) - Schema generation: [Schema Generation](pydantic/pydantic/5-schema-generation.md)",
  "## Generic Models Generic models in Pydantic allow you to create model templates that can be parameterized with different types, similar to how generic classes work in languages like Java or C#. This enables type-safe reuse of model structures across different data types.",
  "## Overview Pydantic's development and deployment infrastructure encompasses: - **Version Management**: Strict version compatibility checks between `pydantic` and `pydantic-core` - **Testing Framework**: Comprehensive test suite with pytest fixtures and utilities - **CI/CD Pipeline**: GitHub Actions workflows for linting, testing, and deployment - **Documentation System**: MkDocs-based documentation with versioning via mike - **Release Process**: Automated PyPI publishing with trusted publishing and changelog generation The infrastructure ensures quality through multi-platform testing, third-party integration testing, and automated version compatibility validation.",
  "### Equality Behavior The `__eq__` method has changed for models in V2: - Models can only be equal to other `BaseModel` instances - They must have the same type, field values, extra values, and private attribute values - Models are no longer equal to dicts containing their data",
  "## Overview Pydantic's documentation system is built using MkDocs with the Material theme, enhanced with custom plugins and extensions. The system provides comprehensive documentation including conceptual guides, API references, examples, error messages, and integration information. The documentation system provides: 1. Versioned documentation (latest/stable release, development, and previous versions) 2. API documentation generated from docstrings 3. Integrated search with Algolia 4. Interactive code examples 5. Optimized presentation for both human readers and AI assistants Sources: [mkdocs.yml1-333](https://github.com/pydantic/pydantic/blob/76ef0b08/mkdocs.yml#L1-L333) [README.md32-34](https://github.com/pydantic/pydantic/blob/76ef0b08/README.md#L32-L34)",
  "### On this page - [Documentation System](#documentation-system.md) - [Overview](#overview.md) - [Documentation Architecture](#documentation-architecture.md) - [Documentation Build System](#documentation-build-system.md) - [Documentation Structure](#documentation-structure.md) - [Documentation Generation Process](#documentation-generation-process.md) - [Hooks and Plugins](#hooks-and-plugins.md) - [Markdown Extensions and Customization](#markdown-extensions-and-customization.md) - [Documentation Versioning](#documentation-versioning.md) - [Search Integration](#search-integration.md) - [LLMs Integration](#llms-integration.md) - [Code Examples Processing](#code-examples-processing.md) - [Contributing to Documentation](#contributing-to-documentation.md) - [Styling and Theming](#styling-and-theming.md) - [Redirects and URL Management](#redirects-and-url-management.md)",
  "## Contributing to Documentation Guidelines for contributing to Pydantic's documentation: 1. **Documentation Style**: - Written in Markdown - API documentation from Google-style docstrings - Code examples should be complete, self-contained, and runnable 2. **Testing Documentation**: - Code examples in documentation are tested - Use `pytest tests/test_docs.py --update-examples` to test and update code examples 3. **Building Documentation**: - Use `make docs` to build documentation - Use `uv run mkdocs serve` to serve documentation locally 4. **Documentation Updates**: - Regular updates through normal PR process - Out-of-cycle updates through the cherry-pick process to the `docs-update` branch Sources: [docs/contributing.md105-137](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md#L105-L137) [docs/contributing.md147-212](https://github.com/pydantic/pydantic/blob/76ef0b08/docs/contributing.md#L147-L212)",
  "## Documentation Generation Process The documentation generation process involves several stages: 1. **Pre-build preparation**: - Converting `HISTORY.md` to a format suitable for the docs - Setting up dependencies for interactive code examples 2. **Markdown processing**: - Upgrading Python code examples to be compatible with different Python versions - Formatting JSON output for code examples - Rendering templates for dynamic content 3. **API documentation generation**: - Extracting docstrings from Python source files - Formatting and organizing API reference pages 4. **Output generation**: - Creating HTML files for web viewing - Generating search indices for Algolia - Creating LLMs.txt for AI consumption - Setting up redirects for backward compatibility",
  "# CI/CD Pipeline Relevant source files - [.github/labels/default\\_pass.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/labels/default_pass.yml) - [.github/labels/first\\_pass.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/labels/first_pass.yml) - [.github/workflows/ci.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/ci.yml) - [.github/workflows/codspeed.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/codspeed.yml) - [.github/workflows/dependencies-check.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/dependencies-check.yml) - [.github/workflows/docs-update.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/docs-update.yml) - [.github/workflows/integration.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/integration.yml) - [.github/workflows/labeler.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/labeler.yml) - [.github/workflows/third-party.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/third-party.yml) - [.github/workflows/update-pydantic-people.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/update-pydantic-people.yml) - [.github/workflows/upload-previews.yml](https://github.com/pydantic/pydantic/blob/76ef0b08/.github/workflows/upload-previews.yml) - [build-docs.sh](https://github.com/pydantic/pydantic/blob/76ef0b08/build-docs.sh) This document provides a detailed overview of the Continuous Integration and Continuous Deployment (CI/CD) pipeline used in the Pydantic project. It covers the GitHub Actions workflows, testing strategies, and release processes. For information about the testing framework and approach, see [Testing Framework](pydantic/pydantic/7.1-testing-framework.md).",
  "### Types of Functional Validators - **BeforeValidator**: Runs before standard validation, useful for pre-processing input - **AfterValidator**: Runs after standard validation, for additional checks on typed data - **PlainValidator**: Direct validator without standard validation - **WrapValidator**: Gives full control over the validation process",
  "# Validators Relevant source files - [pydantic/\\_internal/\\_decorators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_decorators.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [tests/test\\_computed\\_fields.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_computed_fields.py) - [tests/test\\_construction.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_construction.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_serialize.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) - [tests/test\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validators.py) Validators in Pydantic are powerful tools for customizing validation logic beyond simple type checking. They allow you to validate and transform data during model creation or when field values change, ensuring data meets specific requirements, enforcing business rules, and modifying values as needed. For information about serializers, which handle converting data out of Pydantic models, see [Serializers](pydantic/pydantic/4.2-serializers.md).",
  "### On this page - [Validators](#validators.md) - [Validation Pipeline](#validation-pipeline.md) - [Field Validators](#field-validators.md) - [Basic Usage](#basic-usage.md) - [Validator Modes](#validator-modes.md) - [Multi-field Validators](#multi-field-validators.md) - [Wildcard Validators](#wildcard-validators.md) - [Validator Information](#validator-information.md) - [Model Validators](#model-validators.md) - [Functional Validators](#functional-validators.md) - [Types of Functional Validators](#types-of-functional-validators.md) - [Examples](#examples.md) - [Root Validators (Deprecated)](#root-validators-deprecated.md) - [Validator Inheritance](#validator-inheritance.md) - [Advanced Usage](#advanced-usage.md) - [Validating Collections](#validating-collections.md) - [Validation on Assignment](#validation-on-assignment.md) - [Validators with Default Values](#validators-with-default-values.md) - [Core Internals](#core-internals.md) - [Combining Validators with Constrained Types](#combining-validators-with-constrained-types.md) - [Best Practices](#best-practices.md)",
  "## Purpose and Scope This document covers Pydantic's testing infrastructure, including pytest configuration, test fixtures, module creation utilities, and validation helpers. The framework provides tools for dynamic module creation, JSON schema validation, schema generation monitoring, and thread safety management across the test suite. For information about CI/CD pipelines and automation, see [CI/CD Pipeline](pydantic/pydantic/7.2-cicd-pipeline.md). For documentation building and testing, see [Documentation System](pydantic/pydantic/7.3-documentation-system.md). ---",
  "# Using Annotated with Field from typing import Annotated from pydantic import BaseModel, Field class Model(BaseModel): value: Annotated[int, Field(gt=0, lt=100)] ``` The latter approach using `Annotated` is recommended for better support with static analysis tools.",
  "# Type System Relevant source files - [pydantic/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/__init__.py) - [pydantic/\\_internal/\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_validate_call.py) - [pydantic/errors.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/errors.py) - [pydantic/functional\\_serializers.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py) - [pydantic/functional\\_validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_validators.py) - [pydantic/networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/networks.py) - [pydantic/plugin/\\_\\_init\\_\\_.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/__init__.py) - [pydantic/plugin/\\_schema\\_validator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/plugin/_schema_validator.py) - [pydantic/root\\_model.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/root_model.py) - [pydantic/type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/type_adapter.py) - [pydantic/types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/types.py) - [pydantic/validate\\_call\\_decorator.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py) - [pydantic/validators.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validators.py) - [tests/test\\_networks.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_networks.py) - [tests/test\\_plugins.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_plugins.py) - [tests/test\\_type\\_adapter.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_type_adapter.py) - [tests/test\\_types.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_types.py) - [tests/test\\_validate\\_call.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_validate_call.py) Pydantic's type system provides specialized types for data validation, offers constrainable versions of standard Python types, and implements network-related and other utility types. This document explains the architecture and components of Pydantic's type system, how to use built-in types, and how to extend the system with custom types. For information about validation and serialization using these types, see [Validation and Serialization](pydantic/pydantic/4-validation-and-serialization.md). For details about the schema generation process, see [Schema Generation](pydantic/pydantic/5-schema-generation.md).",
  "# Schema Generation Relevant source files - [pydantic/\\_internal/\\_core\\_metadata.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_core_metadata.py) - [pydantic/\\_internal/\\_generate\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py) - [pydantic/json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py) - [pyproject.toml](https://github.com/pydantic/pydantic/blob/76ef0b08/pyproject.toml) - [tests/test\\_datetime.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_datetime.py) - [tests/test\\_json\\_schema.py](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_json_schema.py) Schema generation is the process that converts Python types and annotations into Pydantic's internal schema representation and JSON Schema. This page focuses on how Pydantic transforms type annotations into both core schemas (used internally for validation and serialization) and JSON schemas (for external documentation and compatibility). For information about how to use JSON Schema with Pydantic models, see the relevant documentation section.",
  "### On this page - [Schema Generation](#schema-generation.md) - [Schema Generation Architecture](#schema-generation-architecture.md) - [Core Schema Generation](#core-schema-generation.md) - [Type Matching and Schema Mapping](#type-matching-and-schema-mapping.md) - [Schema Generation Process](#schema-generation-process.md) - [JSON Schema Generation](#json-schema-generation.md) - [JSON Schema Modes](#json-schema-modes.md) - [JSON Schema Type Handlers](#json-schema-type-handlers.md) - [Custom Schema Generation](#custom-schema-generation.md) - [Custom Core Schema Generation](#custom-core-schema-generation.md) - [Custom JSON Schema Generation](#custom-json-schema-generation.md) - [Schema Reference Handling](#schema-reference-handling.md) - [Working with Schema Generation](#working-with-schema-generation.md) - [Schema Validation and Serialization](#schema-validation-and-serialization.md)",
  "## Core Schema Generation The core schema generation is handled by the `GenerateSchema` class, which converts Python types to pydantic-core schemas. It's a comprehensive system that supports a wide variety of Python types and provides the foundation for Pydantic's validation and serialization capabilities. ``` ``` Sources: [pydantic/\\_internal/\\_generate\\_schema.py318-343](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L318-L343) [pydantic/\\_internal/\\_generate\\_schema.py679-702](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L702)",
  "## Schema Reference Handling Both schema generation systems handle references to avoid duplicating schemas for the same types. The core schema uses a definition registry, while JSON Schema uses standard `$ref` references: ``` ``` The reference handling ensures efficient schema representation and prevents circular references from causing infinite recursion. Sources: [pydantic/\\_internal/\\_generate\\_schema.py723-736](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L723-L736) [pydantic/json\\_schema.py140-214](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L140-L214)",
  "## Reference System The JSON Schema generator uses a sophisticated reference system to handle complex type references, avoid duplication, and manage circular dependencies. ``` ``` Sources: [pydantic/json\\_schema.py119-139](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L119-L139) [pydantic/json\\_schema.py258-264](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L258-L264) When Pydantic encounters the same type multiple times (such as a model used in different places), it creates a schema definition and uses references to avoid duplication: 1. **CoreRef**: Internal identifier for a core schema 2. **DefsRef**: Name of the type in the definitions dictionary 3. **JsonRef**: JSON Schema `$ref` value (e.g., `#/$defs/User`)",
  "## Overview Pydantic provides built-in JSON Schema generation capabilities for its models and types. The generated JSON Schema documents describe the expected structure, types, constraints, and other metadata for validation and serialization purposes. ``` ``` Sources: [pydantic/json\\_schema.py216-427](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/json_schema.py#L216-L427)",
  "## Schema Generation Process The schema generation process follows several steps to convert Python types into a complete core schema: ``` ``` Sources: - [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) - [pydantic/\\_internal/\\_generate\\_schema.py843-889](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L843-L889) - [pydantic/\\_internal/\\_generate\\_schema.py718-843](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L718-L843)",
  "## Metadata Processing Type annotations can include metadata that affects schema generation. This is particularly relevant for `Annotated` types and field constraints. ``` ``` Metadata can come from various sources: - Field constraints (min\\_length, max\\_length, etc.) - Validators (before, after, wrap validators) - Field descriptions and examples - Custom schema transformations Sources: - [pydantic/\\_internal/\\_known\\_annotated\\_metadata.py168-329](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_known_annotated_metadata.py#L168-L329) - [tests/test\\_annotated.py28-134](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_annotated.py#L28-L134)",
  "## The GenerateSchema Class The `GenerateSchema` class is the central component responsible for transforming Python types into core schemas. It provides methods for handling different Python types and constructing appropriate schema representations. ``` ``` The `generate_schema` method is the main entry point that dispatches to type-specific handlers based on the input object. The class also maintains state such as a stack of models being processed (to handle recursive references) and definitions being generated. Sources: - [pydantic/\\_internal/\\_generate\\_schema.py318-342](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L318-L342) - [pydantic/\\_internal/\\_generate\\_schema.py679-716](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L679-L716) - [pydantic/\\_internal/\\_generate\\_schema.py366-377](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_generate_schema.py#L366-L377)",
  "# pydantic_pydantic - Documentation Index - [/pydantic/pydantic](./_pydantic_pydantic.md) - [/pydantic/pydantic/2.2-field-system](./_pydantic_pydantic_2.2-field-system.md) - [/pydantic/pydantic/2.3-model-configuration](./_pydantic_pydantic_2.3-model-configuration.md) - [/pydantic/pydantic/2-core-model-system](./_pydantic_pydantic_2-core-model-system.md) - [/pydantic/pydantic/2.1-basemodel](./_pydantic_pydantic_2.1-basemodel.md) - [/pydantic/pydantic/1-overview](./_pydantic_pydantic_1-overview.md) - [/pydantic/pydantic/3-type-system](./_pydantic_pydantic_3-type-system.md) - [/pydantic/pydantic/3.3-typeadapter](./_pydantic_pydantic_3.3-typeadapter.md) - [/pydantic/pydantic/3.1-constrained-types](./_pydantic_pydantic_3.1-constrained-types.md) - [/pydantic/pydantic/3.4-generics-and-forward-references](./_pydantic_pydantic_3.4-generics-and-forward-references.md) - [/pydantic/pydantic/3.2-network-types](./_pydantic_pydantic_3.2-network-types.md) - [/pydantic/pydantic/4-validation-and-serialization](./_pydantic_pydantic_4-validation-and-serialization.md) - [/pydantic/pydantic/4.1-validators](./_pydantic_pydantic_4.1-validators.md) - [/pydantic/pydantic/4.2-serializers](./_pydantic_pydantic_4.2-serializers.md) - [/pydantic/pydantic/4.3-json-conversion](./_pydantic_pydantic_4.3-json-conversion.md) - [/pydantic/pydantic/5.1-core-schema-generation](./_pydantic_pydantic_5.1-core-schema-generation.md) - [/pydantic/pydantic/5-schema-generation](./_pydantic_pydantic_5-schema-generation.md) - [/pydantic/pydantic/5.2-json-schema-generation](./_pydantic_pydantic_5.2-json-schema-generation.md) - [/pydantic/pydantic/6-advanced-features](./_pydantic_pydantic_6-advanced-features.md) - [/pydantic/pydantic/6.1-dataclass-support](./_pydantic_pydantic_6.1-dataclass-support.md) - [/pydantic/pydantic/6.3-rootmodel-and-computed-fields](./_pydantic_pydantic_6.3-rootmodel-and-computed-fields.md) - [/pydantic/pydantic/6.4-plugin-system](./_pydantic_pydantic_6.4-plugin-system.md) - [/pydantic/pydantic/6.2-function-validation](./_pydantic_pydantic_6.2-function-validation.md) - [/pydantic/pydantic/7.1-testing-framework](./_pydantic_pydantic_7.1-testing-framework.md) - [/pydantic/pydantic/7-development-and-deployment](./_pydantic_pydantic_7-development-and-deployment.md) - [/pydantic/pydantic/7.2-cicd-pipeline](./_pydantic_pydantic_7.2-cicd-pipeline.md) - [/pydantic/pydantic/7.3-documentation-system](./_pydantic_pydantic_7.3-documentation-system.md) - [/pydantic/pydantic/8-migration-and-compatibility](./_pydantic_pydantic_8-migration-and-compatibility.md) - [/pydantic/pydantic/8.1-v1-to-v2-migration](./_pydantic_pydantic_8.1-v1-to-v2-migration.md) - [/pydantic/pydantic/7.4-versioning-and-dependencies](./_pydantic_pydantic_7.4-versioning-and-dependencies.md) - [/pydantic/pydantic/8.2-backported-modules](./_pydantic_pydantic_8.2-backported-modules.md)",
  "## Best Practices for Serializers 1. **Choose the right serializer type**: - Use field serializers for customizing individual fields - Use model serializers for complex model-level serialization - Use functional serializers for reusable serialization logic 2. **Respect the serialization mode**: - Use the `info.mode` parameter to adjust behavior based on the serialization mode - Use `when_used` to apply serializers only in specific scenarios 3. **Be mindful of performance**: - Use plain serializers for simple transformations - Use wrap serializers when you need to modify the default serialization behavior 4. **Handle None values appropriately**: - Use `when_used='unless-none'` to skip serialization of None values - Explicitly handle None values in your serializers to avoid errors 5. **Provide return types**: - Specify the `return_type` parameter to ensure correct JSON schema generation - Use type annotations in your serializer functions for better IDE support Sources: - [tests/test\\_serialize.py171-197](https://github.com/pydantic/pydantic/blob/76ef0b08/tests/test_serialize.py#L171-L197) - [pydantic/functional\\_serializers.py18-52](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/functional_serializers.py#L18-L52) Dismiss Refresh this wiki This wiki was recently refreshed. Please wait 4 days to refresh again.",
  "### On this page - [Serializers](#serializers.md) - [Overview of the Serialization System](#overview-of-the-serialization-system.md) - [Core Serialization Components](#core-serialization-components.md) - [Serialization Modes](#serialization-modes.md) - [Field Serializers](#field-serializers.md) - [Using the field\\_serializer Decorator](#using-the-field_serializer-decorator.md) - [Field Serializer Signature](#field-serializer-signature.md) - [Functional Serializers](#functional-serializers.md) - [PlainSerializer](#plainserializer.md) - [WrapSerializer](#wrapserializer.md) - [Model Serializers](#model-serializers.md) - [Using the model\\_serializer Decorator](#using-the-model_serializer-decorator.md) - [Model Serializer Modes](#model-serializer-modes.md) - [Serialization Process](#serialization-process.md) - [Core Serialization Methods](#core-serialization-methods.md) - [Serialization in TypeAdapter](#serialization-in-typeadapter.md) - [Serialization with Computed Fields](#serialization-with-computed-fields.md) - [Advanced Serialization Techniques](#advanced-serialization-techniques.md) - [Conditional Serialization](#conditional-serialization.md) - [Serialization in Dataclasses](#serialization-in-dataclasses.md) - [Root Model Serialization](#root-model-serialization.md) - [Integration with pydantic-core](#integration-with-pydantic-core.md) - [Deferred Building and Mocking](#deferred-building-and-mocking.md) - [Best Practices for Serializers](#best-practices-for-serializers.md)",
  "## Integration with pydantic-core Pydantic uses `pydantic-core` for the actual serialization logic. The `SchemaSerializer` class from `pydantic-core` handles the serialization process. ``` ``` During model definition, Pydantic generates a serialization schema that incorporates all custom serializers. This schema is then used by `pydantic-core` to perform the actual serialization. Sources: - [pydantic/\\_internal/\\_schema\\_generation\\_shared.py1-142](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_schema_generation_shared.py#L1-L142) - [pydantic/\\_internal/\\_mock\\_val\\_ser.py1-69](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/_internal/_mock_val_ser.py#L1-L69)",
  "### On this page - [Network Types](#network-types.md) - [Core Network Types Overview](#core-network-types-overview.md) - [URL Types Architecture](#url-types-architecture.md) - [Common URL Types](#common-url-types.md) - [URL Components and Properties](#url-components-and-properties.md) - [Usage Example](#usage-example.md) - [Database Connection Strings (DSNs)](#database-connection-strings-dsns.md) - [Supported DSN Types](#supported-dsn-types.md) - [DSN Example](#dsn-example.md) - [Multi-Host Support](#multi-host-support.md) - [Email Validation Types](#email-validation-types.md) - [Email Types Example](#email-types-example.md) - [IP Address Types](#ip-address-types.md) - [IP Address Types Categories](#ip-address-types-categories.md) - [Customization with UrlConstraints](#customization-with-urlconstraints.md) - [UrlConstraints Parameters](#urlconstraints-parameters.md) - [Implementation Details](#implementation-details.md) - [URL Validation Process](#url-validation-process.md) - [International Domain Name Support](#international-domain-name-support.md) - [Database DSN Customization](#database-dsn-customization.md) - [Best Practices](#best-practices.md)",
  "### Argument Types and Schema Mapping | Argument Kind | Schema Type | Example | | ----------------------------- | --------------------------------------------- | ----------------------------------------- | | Positional-only (`/`) | `arguments_schema` with positional parameters | `def f(a, /, b): ...` | | Keyword-only (`*`) | `arguments_schema` with keyword parameters | `def f(*, a, b): ...` | | Variable positional (`*args`) | `arguments_schema` with var\\_args\\_schema | `def f(*args): ...` | | Variable keyword (`**kwargs`) | `arguments_schema` with var\\_kwargs\\_schema | `def f(**kwargs): ...` | | Mixed | Combined `arguments_schema` | `def f(a, /, b, *args, c, **kwargs): ...` |",
  "## Overview Function validation in Pydantic enables automatic validation of function arguments and return values using the `@validate_call` decorator. This system extends Pydantic's validation capabilities beyond models to regular Python functions, methods, and lambdas by transforming function signatures into validation schemas and wrapping function calls with validation logic. For field-level validation within models, see [Validators](pydantic/pydantic/4.1-validators.md). For model-level validation, see [Model Configuration](pydantic/pydantic/2.3-model-configuration.md). **Sources:** [pydantic/validate\\_call\\_decorator.py1-117](https://github.com/pydantic/pydantic/blob/76ef0b08/pydantic/validate_call_decorator.py#L1-L117)"
]